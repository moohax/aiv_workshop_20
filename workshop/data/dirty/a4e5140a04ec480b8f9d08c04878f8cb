Execute-OnTime.ps1,69003b03b33801808735caba201e21cd,Scan result is 32768. IsMalware: 1,CmZ1bmN0aW9uIEV4ZWN1dGUtT25UaW1lCnsKPCMKLlNZTk9QU0lTCk5pc2hhbmcgUGF5bG9hZCB3aGljaCB3YWl0cyB0aWxsIGdpdmVuIHRpbWUgdG8gZXhlY3V0ZSBhIHNjcmlwdC4KCi5ERVNDUklQVElPTgpUaGlzIHBheWxvYWQgd2FpdHMgdGlsbCB0aGUgZ2l2ZW4gdGltZSAob24gdGhlIHZpY3RpbSkgYW5kIHRoZW4gZG93bmxvYWRzIGEgUG93ZXJTaGVsbCBzY3JpcHQgYW5kIGV4ZWN1dGVzIGl0LgpJZiB1c2luZyBETlMgb3IgV2Vic2VydmVyIEV4ZmlsT3B0aW9uLCB1c2UgSW52b2tlLURlY29kZS5wczEgaW4gdGhlIFV0aWxpdHkgZm9sZGVyIHRvIGRlY29kZS4KCgouUEFSQU1FVEVSIFBheWxvYWRVUkwKVGhlIFVSTCBmcm9tIHdoZXJlIHRoZSBmaWxlIHdvdWxkIGJlIGRvd25sb2FkZWQuCgouUEFSQU1FVEVSIEFyZ3VtZW50cwpBcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIGEgc2NyaXB0LiBQb3dlcnByZXRlciBhbmQgb3RoZXIgc2NyaXB0cyBpbiBOaXNoYW5nIG5lZWQgdGhlIGZ1bmN0aW9uIG5hbWUgYW5kIGFyZ3VtZW50cyBoZXJlLgoKLlBBUkFNRVRFUiB0aW1lClRoZSBUaW1lIHdoZW4gdGhlIHBheWxvYWQgd2lsbCBiZSBleGVjdXRlZCAoaW4gMjQgaG91ciBmb3JtYXQgZS5nLiAyMzoyMSkuCgouUEFSQU1FVEVSIENoZWNrVVJMClRoZSBVUkwgd2hpY2ggdGhlIHBheWxvYWQgd291bGQgY2hlY2sgZm9yIGluc3RydWN0aW9ucyB0byBzdG9wLgoKLlBBUkFNRVRFUiBTdG9wU3RyaW5nClRoZSBzdHJpbmcgd2hpY2ggaWYgZm91bmQgYXQgQ2hlY2tVUkwgd2lsbCBzdG9wIHRoZSBwYXlsb2FkLgoKLlBBUkFNRVRFUiBwZXJzaXN0ClVzZSB0aGlzIHBhcmFtZXRlciB0byBhY2hpZXZlIHJlYm9vdCBwZXJzaXN0ZW5jZS4gRGlmZmVyZW50IG1ldGhvZHMgb2YgcGVyc2lzdGVuY2Ugd2l0aCBBZG1pbiBhY2Nlc3MgYW5kIG5vcm1hbCB1c2VyIGFjY2Vzcy4KClBBUkFNRVRFUiBleGZpbApVc2UgdGhpcyBwYXJhbWV0ZXIgdG8gdXNlIGV4ZmlsdHJhdGlvbiBtZXRob2RzIGZvciByZXR1cm5pbmcgdGhlIHJlc3VsdHMuCgouUEFSQU1FVEVSIEV4ZmlsT3B0aW9uClRoZSBtZXRob2QgeW91IHdhbnQgdG8gdXNlIGZvciBleGZpdHJhdGlvbiBvZiBkYXRhLiBWYWxpZCBvcHRpb25zIGFyZSAiZ21haWwiLCJwYXN0ZWJpbiIsIldlYlNlcnZlciIgYW5kICJETlMiLgoKLlBBUkFNRVRFUiBkZXZfa2V5ClRoZSBVbmlxdWUgQVBJIGtleSBwcm92aWRlZCBieSBwYXN0ZWJpbiB3aGVuIHlvdSByZWdpc3RlciBhIGZyZWUgYWNjb3VudC4KVW51c2VkIGZvciBvdGhlciBvcHRpb25zCgouUEFSQU1FVEVSIHVzZXJuYW1lClVzZXJuYW1lIGZvciB0aGUgcGFzdGViaW4vZ21haWwgYWNjb3VudCB3aGVyZSBkYXRhIHdvdWxkIGJlIGV4ZmlsdHJhdGVkLgpVbnVzZWQgZm9yIG90aGVyIG9wdGlvbnMKCi5QQVJBTUVURVIgcGFzc3dvcmQKUGFzc3dvcmQgZm9yIHRoZSBwYXN0ZWJpbi9nbWFpbCBhY2NvdW50IHdoZXJlIGRhdGEgd291bGQgYmUgZXhmaWx0cmF0ZWQuClVudXNlZCBmb3Igb3RoZXIgb3B0aW9ucwoKLlBBUkFNRVRFUiBVUkwKVGhlIFVSTCBvZiB0aGUgd2Vic2VydmVyIHdoZXJlIFBPU1QgcmVxdWVzdHMgd291bGQgYmUgc2VudC4gVGhlIFdlYnNlcnZlciBtdXN0IGJlYiBhYmxlIHRvIGxvZyB0aGUgUE9TVCByZXF1ZXN0cy4KVGhlIGVuY29kZWQgdmFsdWVzIGZyb20gdGhlIHdlYnNlcnZlciBjb3VsZCBiZSBkZWNvZGVkIGJieSB1c2luZyBJbnZva2UtRGVjb2RlIGZyb20gTmlzaGFuZy4KCi5QQVJBTUVURVIgRG9tYWluTmFtZQpUaGUgRG9tYWluTmFtZSwgd2hvc2Ugc3ViZG9tYWlucyB3b3VsZCBiZSB1c2VkIGZvciBzZW5kaW5nIFRYVCBxdWVyaWVzIHRvLiBUaGUgRE5TIFNlcnZlciBtdXN0IGxvZyB0aGUgVFhUIHF1ZXJpZXMuCgouUEFSQU1FVEVSIEF1dGhOUwpBdXRob3JpdGF0aXZlIE5hbWUgU2VydmVyIGZvciB0aGUgZG9tYWluIHNwZWNpZmllZCBpbiBEb21haW5OYW1lLiBVc2luZyBpdCBtYXkgaW5jcmVhc2UgY2hhbmNlcyBvZiBkZXRlY3Rpb24uClVzdWFsbHksIHlvdSBzaG91bGQgbGV0IHRoZSBOYW1lIFNlcnZlciBvZiB0YXJnZXQgdG8gcmVzb2x2ZSB0aGluZ3MgZm9yIHlvdS4KCi5FWEFNUExFClBTID4gRXhlY3V0ZS1PblRpbWUgLVBheWxvYWRVUkwgaHR0cDovL3Bhc3RlYmluLmNvbS9yYXcucGhwP2k9Wmh5Zjhyd2ggLUFyZ3VtZW50cyBHZXQtSW5mb3JtYXRpb24gLVRpbWUgaGg6bW0gLUNoZWNrVVJMIGh0dHA6Ly9wYXN0ZWJpbi5jb20vcmF3LnBocD9pPVpoeWY4cndoIC1TdG9wU3RyaW5nIHN0b3BwYXlsb2FkClVzZSBhYm92ZSB3aGVuIHVzaW5nIHRoZSBwYXlsb2FkIGZyb20gbm9uLWludGVyYWN0aXZlIHNoZWxscy4KCkVYQU1QTEUKUFMgPiBFeGVjdXRlLU9uVGltZSBQYXlsb2FkVVJMIGh0dHA6Ly9wYXN0ZWJpbi5jb20vcmF3LnBocD9pPVpoeWY4cndoIC1Bcmd1bWVudHMgR2V0LUluZm9ybWF0aW9uIC1UaW1lIGhoOm1tIC1DaGVja1VSTCBodHRwOi8vcGFzdGViaW4uY29tL3Jhdy5waHA/aT1aaHlmOHJ3aCAtU3RvcFN0cmluZyBzdG9wcGF5bG9hZCAtZXhmaWwgLUV4ZmlsT3B0aW9uIFdlYnNlcnZlciAtVVJMIGh0dHA6Ly8xOTIuMTY4LjI1NC4xODMvY2F0Y2hwb3N0LnBocAoKRXhmaWx0cmF0ZSByZXN1bHRzIHRvIGEgd2Vic2VydmVyIHdoaWNoIGxvZ3MgUE9TVCByZXF1ZXN0cy4KCi5FWEFNUExFClBTID4gRXhlY3V0ZS1PblRpbWUgLVBheWxvYWRVUkwgaHR0cDovL2V4YW1wbGUuY29tL3NjcmlwdC5wczEgLVRpbWUgaGg6bW0gLUNoZWNrVVJMIGh0dHA6Ly9wYXN0ZWJpbi5jb20vcmF3LnBocD9pPVpoeWY4cndoIC1TdG9wU3RyaW5nIHN0b3BwYXlsb2FkIC1leGZpbCAtRXhmaWxPcHRpb24gV2Vic2VydmVyIC1VUkwgaHR0cDovLzE5Mi4xNjguMjU0LjE4My9jYXRjaHBvc3QucGhwIC1wZXJzaXN0CgpVc2UgYWJvdmUgZm9yIHJlYm9vdCBwZXJzaXN0ZW5jZS4KCi5MSU5LCmh0dHA6Ly9sYWJvZmFwZW5ldHJhdGlvbnRlc3Rlci5jb20vCmh0dHBzOi8vZ2l0aHViLmNvbS9zYW1yYXRhc2hvay9uaXNoYW5nCiM+CgoKICAgIFtDbWRsZXRCaW5kaW5nKERlZmF1bHRQYXJhbWV0ZXJTZXROYW1lPSJub2V4ZmlsIildIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyc2V0bmFtZT0iZXhmaWwiKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRwZXJzaXN0LAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlcnNldG5hbWU9ImV4ZmlsIildCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkZXhmaWwsCgogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBNYW5kYXRvcnkgPSAkVHJ1ZSwgUGFyYW1ldGVyc2V0bmFtZT0iZXhmaWwiKV0KICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUsIFBhcmFtZXRlcnNldG5hbWU9Im5vZXhmaWwiKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRQYXlsb2FkVVJMLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMSwgTWFuZGF0b3J5ID0gJEZhbHNlLCBQYXJhbWV0ZXJzZXRuYW1lPSJleGZpbCIpXQogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAxLCBNYW5kYXRvcnkgPSAkRmFsc2UsIFBhcmFtZXRlcnNldG5hbWU9Im5vZXhmaWwiKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRBcmd1bWVudHMgPSAiT3V0LU51bGwiLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMiwgTWFuZGF0b3J5ID0gJFRydWUsIFBhcmFtZXRlcnNldG5hbWU9ImV4ZmlsIildCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDIsIE1hbmRhdG9yeSA9ICRUcnVlLCBQYXJhbWV0ZXJzZXRuYW1lPSJub2V4ZmlsIildCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkdGltZSwKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDMsIE1hbmRhdG9yeSA9ICRUcnVlLCBQYXJhbWV0ZXJzZXRuYW1lPSJleGZpbCIpXQogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAzLCBNYW5kYXRvcnkgPSAkVHJ1ZSwgUGFyYW1ldGVyc2V0bmFtZT0ibm9leGZpbCIpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENoZWNrVVJMLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gNCwgTWFuZGF0b3J5ID0gJFRydWUsIFBhcmFtZXRlcnNldG5hbWU9ImV4ZmlsIildCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDQsIE1hbmRhdG9yeSA9ICRUcnVlLCBQYXJhbWV0ZXJzZXRuYW1lPSJub2V4ZmlsIildCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU3RvcFN0cmluZywKCgogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSA1LCBNYW5kYXRvcnkgPSAkRmFsc2UsIFBhcmFtZXRlcnNldG5hbWU9ImV4ZmlsIildIFtWYWxpZGF0ZVNldCgiZ21haWwiLCJwYXN0ZWJpbiIsIldlYlNlcnZlciIsIkROUyIpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEV4ZmlsT3B0aW9uLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gNiwgTWFuZGF0b3J5ID0gJEZhbHNlLCBQYXJhbWV0ZXJzZXRuYW1lPSJleGZpbCIpXSAKICAgICAgICBbU3RyaW5nXQogICAgICAgICRkZXZfa2V5ID0gIm51bGwiLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gNywgTWFuZGF0b3J5ID0gJEZhbHNlLCBQYXJhbWV0ZXJzZXRuYW1lPSJleGZpbCIpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJHVzZXJuYW1lID0gIm51bGwiLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gOCwgTWFuZGF0b3J5ID0gJEZhbHNlLCBQYXJhbWV0ZXJzZXRuYW1lPSJleGZpbCIpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJHBhc3N3b3JkID0gIm51bGwiLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gOSwgTWFuZGF0b3J5ID0gJEZhbHNlLCBQYXJhbWV0ZXJzZXRuYW1lPSJleGZpbCIpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVSTCA9ICJudWxsIiwKICAgICAgCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDEwLCBNYW5kYXRvcnkgPSAkRmFsc2UsIFBhcmFtZXRlcnNldG5hbWU9ImV4ZmlsIildCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluTmFtZSA9ICJudWxsIiwKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDExLCBNYW5kYXRvcnkgPSAkRmFsc2UsIFBhcmFtZXRlcnNldG5hbWU9ImV4ZmlsIildCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQXV0aE5TID0gIm51bGwiICAgCiAgIAogICApCiAKICRib2R5ID0gQCcKZnVuY3Rpb24gTG9naWMtRXhlY3V0ZS1PblRpbWUgKCRQYXlsb2FkVVJMLCAkQXJndW1lbnRzLCAkdGltZSwgJENoZWNrVVJMLCAkU3RvcFN0cmluZywgJEV4ZmlsT3B0aW9uLCAkZGV2X2tleSwgJHVzZXJuYW1lLCAkcGFzc3dvcmQsICRVUkwsICREb21haW5OYW1lLCAkQXV0aE5TLCAkZXhmaWwpCnsKICAgIAogICAgd2hpbGUoJHRydWUpCiAgICB7CiAgICAgICAgJGV4ZWMgPSAwCiAgICAgICAgc3RhcnQtc2xlZXAgLXNlY29uZHMgNSAKICAgICAgICAkd2ViY2xpZW50ID0gTmV3LU9iamVjdCBTeXN0ZW0uTmV0LldlYkNsaWVudAogICAgICAgICRmaWxlY29udGVudCA9ICR3ZWJjbGllbnQuRG93bmxvYWRTdHJpbmcoIiRDaGVja1VSTCIpCiAgICAgICAgJHN5c3RpbWUgPSBHZXQtRGF0ZSAtVUZvcm1hdCAlUgogICAgICAgIGlmICgkc3lzdGltZSAtbWF0Y2ggJHRpbWUpCiAgICAgICAgewogICAgICAgICAgICAKICAgICAgICAgICAgJHBhc3RldmFsdWUgPSBJbnZva2UtRXhwcmVzc2lvbiAkd2ViY2xpZW50LkRvd25sb2FkU3RyaW5nKCRQYXlsb2FkVVJMKQogICAgICAgICAgICAjIENoZWNrIGZvciBhcmd1bWVudHMgdG8gdGhlIGRvd25sb2FkZWQgc2NyaXB0LgogICAgICAgICAgICBpZiAoJEFyZ3VtZW50cyAtbmUgIk91dC1OdWxsIikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJHBhc3RldmFsdWUgPSBJbnZva2UtRXhwcmVzc2lvbiAkQXJndW1lbnRzICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgICAgICRwYXN0ZXZhbHVlCiAgICAgICAgICAgICRleGVjKysKICAgICAgICAgICAgaWYgKCRleGZpbCAtZXEgJFRydWUpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIERvLUV4ZmlsdHJhdGlvbiAiJHBhc3RlbmFtZSIgIiRwYXN0ZXZhbHVlIiAiJEV4ZmlsT3B0aW9uIiAiJGRldl9rZXkiICIkdXNlcm5hbWUiICIkcGFzc3dvcmQiICIkVVJMIiAiJERvbWFpbk5hbWUiICIkQXV0aE5TIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkZXhlYyAtZXEgMSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgU3RhcnQtU2xlZXAgLVNlY29uZHMgNjAKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlaWYgKCRmaWxlY29udGVudCAtZXEgJFN0b3BTdHJpbmcpCiAgICAgICAgewogICAgICAgICAgICBicmVhawogICAgICAgIH0KICAgIH0KfQonQAoKCgokZXhmaWx0cmF0aW9uID0gQCcKZnVuY3Rpb24gRG8tRXhmaWx0cmF0aW9uKCRwYXN0ZW5hbWUsJHBhc3RldmFsdWUsJEV4ZmlsT3B0aW9uLCRkZXZfa2V5LCR1c2VybmFtZSwkcGFzc3dvcmQsJFVSTCwkRG9tYWluTmFtZSwkQXV0aE5TKQp7CiAgICBmdW5jdGlvbiBwb3N0X2h0dHAoJHVybCwkcGFyYW1ldGVycykgCiAgICB7IAogICAgICAgICRodHRwX3JlcXVlc3QgPSBOZXctT2JqZWN0IC1Db21PYmplY3QgTXN4bWwyLlhNTEhUVFAgCiAgICAgICAgJGh0dHBfcmVxdWVzdC5vcGVuKCJQT1NUIiwgJHVybCwgJGZhbHNlKSAKICAgICAgICAkaHR0cF9yZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtdHlwZSIsImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIpIAogICAgICAgICRodHRwX3JlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC1sZW5ndGgiLCAkcGFyYW1ldGVycy5sZW5ndGgpOyAKICAgICAgICAkaHR0cF9yZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoIkNvbm5lY3Rpb24iLCAiY2xvc2UiKSAKICAgICAgICAkaHR0cF9yZXF1ZXN0LnNlbmQoJHBhcmFtZXRlcnMpIAogICAgICAgICRzY3JpcHQ6c2Vzc2lvbl9rZXk9JGh0dHBfcmVxdWVzdC5yZXNwb25zZVRleHQgCiAgICB9IAoKICAgIGZ1bmN0aW9uIENvbXByZXNzLUVuY29kZQogICAgewogICAgICAgICNDb21wcmVzc2lvbiBsb2dpYyBmcm9tIGh0dHA6Ly93d3cuZGFya29wZXJhdG9yLmNvbS9ibG9nLzIwMTMvMy8yMS9wb3dlcnNoZWxsLWJhc2ljcy1leGVjdXRpb24tcG9saWN5LWFuZC1jb2RlLXNpZ25pbmctcGFydC0yLmh0bWwKICAgICAgICAkbXMgPSBOZXctT2JqZWN0IElPLk1lbW9yeVN0cmVhbQogICAgICAgICRhY3Rpb24gPSBbSU8uQ29tcHJlc3Npb24uQ29tcHJlc3Npb25Nb2RlXTo6Q29tcHJlc3MKICAgICAgICAkY3MgPSBOZXctT2JqZWN0IElPLkNvbXByZXNzaW9uLkRlZmxhdGVTdHJlYW0gKCRtcywkYWN0aW9uKQogICAgICAgICRzdyA9IE5ldy1PYmplY3QgSU8uU3RyZWFtV3JpdGVyICgkY3MsIFtUZXh0LkVuY29kaW5nXTo6QVNDSUkpCiAgICAgICAgJHBhc3RldmFsdWUgfCBGb3JFYWNoLU9iamVjdCB7JHN3LldyaXRlTGluZSgkXyl9CiAgICAgICAgJHN3LkNsb3NlKCkKICAgICAgICAjIEJhc2U2NCBlbmNvZGUgc3RyZWFtCiAgICAgICAgJGNvZGUgPSBbQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRtcy5Ub0FycmF5KCkpCiAgICAgICAgcmV0dXJuICRjb2RlCiAgICB9CgogICAgaWYgKCRleGZpbG9wdGlvbiAtZXEgInBhc3RlYmluIikKICAgIHsKICAgICAgICAkdXRmYnl0ZXMgID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygkRGF0YSkKICAgICAgICAkcGFzdGV2YWx1ZSA9IFtTeXN0ZW0uQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCR1dGZieXRlcykKICAgICAgICBwb3N0X2h0dHAgImh0dHBzOi8vcGFzdGViaW4uY29tL2FwaS9hcGlfbG9naW4ucGhwIiAiYXBpX2Rldl9rZXk9JGRldl9rZXkmYXBpX3VzZXJfbmFtZT0kdXNlcm5hbWUmYXBpX3VzZXJfcGFzc3dvcmQ9JHBhc3N3b3JkIiAKICAgICAgICBwb3N0X2h0dHAgImh0dHBzOi8vcGFzdGViaW4uY29tL2FwaS9hcGlfcG9zdC5waHAiICJhcGlfdXNlcl9rZXk9JHNlc3Npb25fa2V5JmFwaV9vcHRpb249cGFzdGUmYXBpX2Rldl9rZXk9JGRldl9rZXkmYXBpX3Bhc3RlX25hbWU9JHBhc3RlbmFtZSZhcGlfcGFzdGVfY29kZT0kcGFzdGV2YWx1ZSZhcGlfcGFzdGVfcHJpdmF0ZT0yIiAKICAgIH0KICAgICAgICAKICAgIGVsc2VpZiAoJGV4Zmlsb3B0aW9uIC1lcSAiZ21haWwiKQogICAgewogICAgICAgICNodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEyNTIzMzUvc2VuZC1tYWlsLXZpYS1nbWFpbC13aXRoLXBvd2Vyc2hlbGwtdjJzLXNlbmQtbWFpbG1lc3NhZ2UKICAgICAgICAkc210cHNlcnZlciA9IOKAnHNtdHAuZ21haWwuY29t4oCdCiAgICAgICAgJG1zZyA9IG5ldy1vYmplY3QgTmV0Lk1haWwuTWFpbE1lc3NhZ2UKICAgICAgICAkc210cCA9IG5ldy1vYmplY3QgTmV0Lk1haWwuU210cENsaWVudCgkc210cFNlcnZlciApCiAgICAgICAgJHNtdHAuRW5hYmxlU3NsID0gJFRydWUKICAgICAgICAkc210cC5DcmVkZW50aWFscyA9IE5ldy1PYmplY3QgU3lzdGVtLk5ldC5OZXR3b3JrQ3JlZGVudGlhbCjigJwkdXNlcm5hbWXigJ0sIOKAnCRwYXNzd29yZOKAnSk7IAogICAgICAgICRtc2cuRnJvbSA9IOKAnCR1c2VybmFtZUBnbWFpbC5jb23igJ0KICAgICAgICAkbXNnLlRvLkFkZCjigJ0kdXNlcm5hbWVAZ21haWwuY29t4oCdKQogICAgICAgICRtc2cuU3ViamVjdCA9ICRwYXN0ZW5hbWUKICAgICAgICAkbXNnLkJvZHkgPSAkcGFzdGV2YWx1ZQogICAgICAgIGlmICgkZmlsZW5hbWUpCiAgICAgICAgewogICAgICAgICAgICAkYXR0ID0gbmV3LW9iamVjdCBOZXQuTWFpbC5BdHRhY2htZW50KCRmaWxlbmFtZSkKICAgICAgICAgICAgJG1zZy5BdHRhY2htZW50cy5BZGQoJGF0dCkKICAgICAgICB9CiAgICAgICAgJHNtdHAuU2VuZCgkbXNnKQogICAgfQoKICAgIGVsc2VpZiAoJGV4Zmlsb3B0aW9uIC1lcSAid2Vic2VydmVyIikKICAgIHsKICAgICAgICAkRGF0YSA9IENvbXByZXNzLUVuY29kZSAgICAKICAgICAgICBwb3N0X2h0dHAgJFVSTCAkRGF0YQogICAgfQogICAgZWxzZWlmICgkRXhmaWxPcHRpb24gLWVxICJETlMiKQogICAgewogICAgICAgICRsZW5ndGhvZnN1YnN0ciA9IDAKICAgICAgICAkY29kZSA9IENvbXByZXNzLUVuY29kZQogICAgICAgICRxdWVyaWVzID0gW2ludF0oJGNvZGUuTGVuZ3RoLzYzKQogICAgICAgIHdoaWxlICgkcXVlcmllcyAtbmUgMCkKICAgICAgICB7CiAgICAgICAgICAgICRxdWVyeXN0cmluZyA9ICRjb2RlLlN1YnN0cmluZygkbGVuZ3Rob2ZzdWJzdHIsNjMpCiAgICAgICAgICAgIEludm9rZS1FeHByZXNzaW9uICJuc2xvb2t1cCAtcXVlcnl0eXBlPXR4dCAkcXVlcnlzdHJpbmcuJERvbWFpbk5hbWUgJEF1dGhOUyIKICAgICAgICAgICAgJGxlbmd0aG9mc3Vic3RyICs9IDYzCiAgICAgICAgICAgICRxdWVyaWVzIC09IDEKICAgICAgICB9CiAgICAgICAgJG1vZCA9ICRjb2RlLkxlbmd0aCU2MwogICAgICAgICRxdWVyeSA9ICRjb2RlLlN1YnN0cmluZygkY29kZS5MZW5ndGggLSAkbW9kLCAkbW9kKQogICAgICAgIEludm9rZS1FeHByZXNzaW9uICJuc2xvb2t1cCAtcXVlcnl0eXBlPXR4dCAkcXVlcnkuJERvbWFpbk5hbWUgJEF1dGhOUyIKCiAgICB9Cn0KJ0AKCiAgICAkbW9kdWxlbmFtZSA9ICJFeGVjdXRlLU9uVGltZS5wczEiCiAgICBpZigkcGVyc2lzdCAtZXEgJFRydWUpCiAgICB7CiAgICAgICAgCiAgICAgICAgJG5hbWUgPSAicGVyc2lzdC52YnMiCiAgICAgICAgJG9wdGlvbnMgPSAiTG9naWMtRXhlY3V0ZS1PblRpbWUgJFBheWxvYWRVUkwgJEFyZ3VtZW50cyAkdGltZSAkQ2hlY2tVUkwgJFN0b3BTdHJpbmcgJGRldl9rZXkgJHVzZXJuYW1lICRwYXNzd29yZCAka2V5b3V0b3B0aW9uICRleGZpbCIKCiAgICAgICAgaWYgKCRleGZpbCAtZXEgJFRydWUpCiAgICAgICAgewogICAgICAgICAgICAkb3B0aW9ucyA9ICJMb2dpYy1FeGVjdXRlLU9uVGltZSAkUGF5bG9hZFVSTCAkQXJndW1lbnRzICR0aW1lICRDaGVja1VSTCAkU3RvcFN0cmluZyAkRXhmaWxPcHRpb24gJGRldl9rZXkgJHVzZXJuYW1lICRwYXNzd29yZCAkVVJMICREb21haW5OYW1lICRBdXRoTlMgJGV4ZmlsIgogICAgICAgIH0KICAgICAgICBPdXQtRmlsZSAtSW5wdXRPYmplY3QgJGJvZHkgLUZvcmNlICRlbnY6VEVNUFwkbW9kdWxlbmFtZQogICAgICAgIE91dC1GaWxlIC1JbnB1dE9iamVjdCAkZXhmaWx0cmF0aW9uIC1BcHBlbmQgJGVudjpURU1QXCRtb2R1bGVuYW1lCiAgICAgICAgT3V0LUZpbGUgLUlucHV0T2JqZWN0ICRvcHRpb25zIC1BcHBlbmQgJGVudjpURU1QXCRtb2R1bGVuYW1lCiAgICAgICAgZWNobyAiU2V0IG9ialNoZWxsID0gQ3JlYXRlT2JqZWN0KGAiV3NjcmlwdC5zaGVsbGAiKSIgPiAkZW52OlRFTVBcJG5hbWUKICAgICAgICBlY2hvICJvYmpTaGVsbC5ydW4oYCJwb3dlcnNoZWxsIC1XaW5kb3dTdHlsZSBIaWRkZW4gLWV4ZWN1dGlvbnBvbGljeSBieXBhc3MgLWZpbGUgJGVudjp0ZW1wXCRtb2R1bGVuYW1lYCIpIiA+PiAkZW52OlRFTVBcJG5hbWUKICAgICAgICAkY3VycmVudFByaW5jaXBhbCA9IE5ldy1PYmplY3QgU2VjdXJpdHkuUHJpbmNpcGFsLldpbmRvd3NQcmluY2lwYWwoIFtTZWN1cml0eS5QcmluY2lwYWwuV2luZG93c0lkZW50aXR5XTo6R2V0Q3VycmVudCgpKSAKICAgICAgICBpZigkY3VycmVudFByaW5jaXBhbC5Jc0luUm9sZShbU2VjdXJpdHkuUHJpbmNpcGFsLldpbmRvd3NCdWlsdEluUm9sZV06OkFkbWluaXN0cmF0b3IpIC1lcSAkdHJ1ZSkKICAgICAgICB7CiAgICAgICAgICAgICRzY3JpcHRwYXRoID0gJGVudjpURU1QCiAgICAgICAgICAgICRzY3JpcHRGaWxlTmFtZSA9ICIkc2NyaXB0cGF0aFwkbmFtZSIKICAgICAgICAgICAgJGZpbHRlck5TID0gInJvb3RcY2ltdjIiCiAgICAgICAgICAgICR3bWlOUyA9ICJyb290XHN1YnNjcmlwdGlvbiIKICAgICAgICAgICAgJHF1ZXJ5ID0gQCIKICAgICAgICAgICAgIFNlbGVjdCAqIGZyb20gX19JbnN0YW5jZUNyZWF0aW9uRXZlbnQgd2l0aGluIDMwIAogICAgICAgICAgICAgd2hlcmUgdGFyZ2V0SW5zdGFuY2UgaXNhICdXaW4zMl9Mb2dvblNlc3Npb24nIAoiQAogICAgICAgICAgICAkZmlsdGVyTmFtZSA9ICJXaW5kb3dzU2FuaXR5IgogICAgICAgICAgICAkZmlsdGVyUGF0aCA9IFNldC1XbWlJbnN0YW5jZSAtQ2xhc3MgX19FdmVudEZpbHRlciAtTmFtZXNwYWNlICR3bWlOUyAtQXJndW1lbnRzIEB7bmFtZT0kZmlsdGVyTmFtZTsgRXZlbnROYW1lU3BhY2U9JGZpbHRlck5TOyBRdWVyeUxhbmd1YWdlPSJXUUwiOyBRdWVyeT0kcXVlcnl9CiAgICAgICAgICAgICRjb25zdW1lclBhdGggPSBTZXQtV21pSW5zdGFuY2UgLUNsYXNzIEFjdGl2ZVNjcmlwdEV2ZW50Q29uc3VtZXIgLU5hbWVzcGFjZSAkd21pTlMgLUFyZ3VtZW50cyBAe25hbWU9IldpbmRvd3NTYW5pdHkiOyBTY3JpcHRGaWxlTmFtZT0kc2NyaXB0RmlsZU5hbWU7IFNjcmlwdGluZ0VuZ2luZT0iVkJTY3JpcHQifQogICAgICAgICAgICBTZXQtV21pSW5zdGFuY2UgLUNsYXNzIF9fRmlsdGVyVG9Db25zdW1lckJpbmRpbmcgLU5hbWVzcGFjZSAkd21pTlMgLWFyZ3VtZW50cyBAe0ZpbHRlcj0kZmlsdGVyUGF0aDsgQ29uc3VtZXI9JGNvbnN1bWVyUGF0aH0gfCAgb3V0LW51bGwKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgTmV3LUl0ZW1Qcm9wZXJ0eSAtUGF0aCBIS0NVOlNvZnR3YXJlXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXFJ1blwgLU5hbWUgVXBkYXRlIC1Qcm9wZXJ0eVR5cGUgU3RyaW5nIC1WYWx1ZSAkZW52OlRFTVBcJG5hbWUgLWZvcmNlCiAgICAgICAgICAgIGVjaG8gIlNldCBvYmpTaGVsbCA9IENyZWF0ZU9iamVjdChgIldzY3JpcHQuc2hlbGxgIikiID4gJGVudjpURU1QXCRuYW1lCiAgICAgICAgICAgIGVjaG8gIm9ialNoZWxsLnJ1bihgInBvd2Vyc2hlbGwgLVdpbmRvd1N0eWxlIEhpZGRlbiAtZXhlY3V0aW9ucG9saWN5IGJ5cGFzcyAtZmlsZSAkZW52OnRlbXBcJG1vZHVsZW5hbWVgIikiID4+ICRlbnY6VEVNUFwkbmFtZQogICAgICAgIH0KICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICAkb3B0aW9ucyA9ICJMb2dpYy1FeGVjdXRlLU9uVGltZSAkUGF5bG9hZFVSTCAkQXJndW1lbnRzICR0aW1lICRDaGVja1VSTCAkU3RvcFN0cmluZyAkZGV2X2tleSAkdXNlcm5hbWUgJHBhc3N3b3JkICRrZXlvdXRvcHRpb24gJGV4ZmlsIgogICAgICAgIGlmICgkZXhmaWwgLWVxICRUcnVlKQogICAgICAgIHsKICAgICAgICAgICAgJG9wdGlvbnMgPSAiTG9naWMtRXhlY3V0ZS1PblRpbWUgJFBheWxvYWRVUkwgJEFyZ3VtZW50cyAkdGltZSAkQ2hlY2tVUkwgJFN0b3BTdHJpbmcgJEV4ZmlsT3B0aW9uICRkZXZfa2V5ICR1c2VybmFtZSAkcGFzc3dvcmQgJFVSTCAkRG9tYWluTmFtZSAkQXV0aE5TICRleGZpbCIKICAgICAgICB9CiAgICAgICAgT3V0LUZpbGUgLUlucHV0T2JqZWN0ICRib2R5IC1Gb3JjZSAkZW52OlRFTVBcJG1vZHVsZW5hbWUKICAgICAgICBPdXQtRmlsZSAtSW5wdXRPYmplY3QgJGV4ZmlsdHJhdGlvbiAtQXBwZW5kICRlbnY6VEVNUFwkbW9kdWxlbmFtZQogICAgICAgIE91dC1GaWxlIC1JbnB1dE9iamVjdCAkb3B0aW9ucyAtQXBwZW5kICRlbnY6VEVNUFwkbW9kdWxlbmFtZQogICAgICAgIEludm9rZS1FeHByZXNzaW9uICRlbnY6VEVNUFwkbW9kdWxlbmFtZQogICAgfQp9Cg==
