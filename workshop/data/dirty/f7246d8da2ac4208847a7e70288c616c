powerview.ps1,09bd9fb1eb903df3ead21cc388146693,Scan result is 32768. IsMalware: 1,I3JlcXVpcmVzIC12ZXJzaW9uIDIKCjwjCgogICAgUG93ZXJTcGxvaXQgRmlsZTogUG93ZXJWaWV3LnBzMQogICAgQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpCiAgICBMaWNlbnNlOiBCU0QgMy1DbGF1c2UKICAgIFJlcXVpcmVkIERlcGVuZGVuY2llczogTm9uZQogICAgT3B0aW9uYWwgRGVwZW5kZW5jaWVzOiBOb25lCgojPgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIwojIFBTUmVmbGVjdCBjb2RlIGZvciBXaW5kb3dzIEFQSSBhY2Nlc3MKIyBBdXRob3I6IEBtYXR0aWZlc3RhdGlvbgojICAgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL21hdHRpZmVzdGF0aW9uL1BTUmVmbGVjdC9tYXN0ZXIvUFNSZWZsZWN0LnBzbTEKIwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKZnVuY3Rpb24gTmV3LUluTWVtb3J5TW9kdWxlCnsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBDcmVhdGVzIGFuIGluLW1lbW9yeSBhc3NlbWJseSBhbmQgbW9kdWxlCgogICAgICAgIEF1dGhvcjogTWF0dGhldyBHcmFlYmVyIChAbWF0dGlmZXN0YXRpb24pCiAgICAgICAgTGljZW5zZTogQlNEIDMtQ2xhdXNlCiAgICAgICAgUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBOb25lCiAgICAgICAgT3B0aW9uYWwgRGVwZW5kZW5jaWVzOiBOb25lCgogICAgLkRFU0NSSVBUSU9OCgogICAgICAgIFdoZW4gZGVmaW5pbmcgY3VzdG9tIGVudW1zLCBzdHJ1Y3RzLCBhbmQgdW5tYW5hZ2VkIGZ1bmN0aW9ucywgaXQgaXMKICAgICAgICBuZWNlc3NhcnkgdG8gYXNzb2NpYXRlIHRvIGFuIGFzc2VtYmx5IG1vZHVsZS4gVGhpcyBoZWxwZXIgZnVuY3Rpb24KICAgICAgICBjcmVhdGVzIGFuIGluLW1lbW9yeSBtb2R1bGUgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHRoZSAnZW51bScsCiAgICAgICAgJ3N0cnVjdCcsIGFuZCBBZGQtV2luMzJUeXBlIGZ1bmN0aW9ucy4KCiAgICAuUEFSQU1FVEVSIE1vZHVsZU5hbWUKCiAgICAgICAgU3BlY2lmaWVzIHRoZSBkZXNpcmVkIG5hbWUgZm9yIHRoZSBpbi1tZW1vcnkgYXNzZW1ibHkgYW5kIG1vZHVsZS4gSWYKICAgICAgICBNb2R1bGVOYW1lIGlzIG5vdCBwcm92aWRlZCwgaXQgd2lsbCBkZWZhdWx0IHRvIGEgR1VJRC4KCiAgICAuRVhBTVBMRQoKICAgICAgICAkTW9kdWxlID0gTmV3LUluTWVtb3J5TW9kdWxlIC1Nb2R1bGVOYW1lIFdpbjMyCiM+CgogICAgUGFyYW0KICAgICgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRNb2R1bGVOYW1lID0gW0d1aWRdOjpOZXdHdWlkKCkuVG9TdHJpbmcoKQogICAgKQoKICAgICRMb2FkZWRBc3NlbWJsaWVzID0gW0FwcERvbWFpbl06OkN1cnJlbnREb21haW4uR2V0QXNzZW1ibGllcygpCgogICAgRm9yRWFjaCAoJEFzc2VtYmx5IGluICRMb2FkZWRBc3NlbWJsaWVzKSB7CiAgICAgICAgaWYgKCRBc3NlbWJseS5GdWxsTmFtZSAtYW5kICgkQXNzZW1ibHkuRnVsbE5hbWUuU3BsaXQoJywnKVswXSAtZXEgJE1vZHVsZU5hbWUpKSB7CiAgICAgICAgICAgIHJldHVybiAkQXNzZW1ibHkKICAgICAgICB9CiAgICB9CgogICAgJER5bkFzc2VtYmx5ID0gTmV3LU9iamVjdCBSZWZsZWN0aW9uLkFzc2VtYmx5TmFtZSgkTW9kdWxlTmFtZSkKICAgICREb21haW4gPSBbQXBwRG9tYWluXTo6Q3VycmVudERvbWFpbgogICAgJEFzc2VtYmx5QnVpbGRlciA9ICREb21haW4uRGVmaW5lRHluYW1pY0Fzc2VtYmx5KCREeW5Bc3NlbWJseSwgJ1J1bicpCiAgICAkTW9kdWxlQnVpbGRlciA9ICRBc3NlbWJseUJ1aWxkZXIuRGVmaW5lRHluYW1pY01vZHVsZSgkTW9kdWxlTmFtZSwgJEZhbHNlKQoKICAgIHJldHVybiAkTW9kdWxlQnVpbGRlcgp9CgoKIyBBIGhlbHBlciBmdW5jdGlvbiB1c2VkIHRvIHJlZHVjZSB0eXBpbmcgd2hpbGUgZGVmaW5pbmcgZnVuY3Rpb24KIyBwcm90b3R5cGVzIGZvciBBZGQtV2luMzJUeXBlLgpmdW5jdGlvbiBmdW5jCnsKICAgIFBhcmFtCiAgICAoCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREbGxOYW1lLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMSwgTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZ1bmN0aW9uTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDIsIE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbVHlwZV0KICAgICAgICAkUmV0dXJuVHlwZSwKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDMpXQogICAgICAgIFtUeXBlW11dCiAgICAgICAgJFBhcmFtZXRlclR5cGVzLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gNCldCiAgICAgICAgW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkNhbGxpbmdDb252ZW50aW9uXQogICAgICAgICROYXRpdmVDYWxsaW5nQ29udmVudGlvbiwKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDUpXQogICAgICAgIFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5DaGFyU2V0XQogICAgICAgICRDaGFyc2V0LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRTZXRMYXN0RXJyb3IKICAgICkKCiAgICAkUHJvcGVydGllcyA9IEB7CiAgICAgICAgRGxsTmFtZSA9ICREbGxOYW1lCiAgICAgICAgRnVuY3Rpb25OYW1lID0gJEZ1bmN0aW9uTmFtZQogICAgICAgIFJldHVyblR5cGUgPSAkUmV0dXJuVHlwZQogICAgfQoKICAgIGlmICgkUGFyYW1ldGVyVHlwZXMpIHsgJFByb3BlcnRpZXNbJ1BhcmFtZXRlclR5cGVzJ10gPSAkUGFyYW1ldGVyVHlwZXMgfQogICAgaWYgKCROYXRpdmVDYWxsaW5nQ29udmVudGlvbikgeyAkUHJvcGVydGllc1snTmF0aXZlQ2FsbGluZ0NvbnZlbnRpb24nXSA9ICROYXRpdmVDYWxsaW5nQ29udmVudGlvbiB9CiAgICBpZiAoJENoYXJzZXQpIHsgJFByb3BlcnRpZXNbJ0NoYXJzZXQnXSA9ICRDaGFyc2V0IH0KICAgIGlmICgkU2V0TGFzdEVycm9yKSB7ICRQcm9wZXJ0aWVzWydTZXRMYXN0RXJyb3InXSA9ICRTZXRMYXN0RXJyb3IgfQoKICAgIE5ldy1PYmplY3QgUFNPYmplY3QgLVByb3BlcnR5ICRQcm9wZXJ0aWVzCn0KCgpmdW5jdGlvbiBBZGQtV2luMzJUeXBlCnsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBDcmVhdGVzIGEgLk5FVCB0eXBlIGZvciBhbiB1bm1hbmFnZWQgV2luMzIgZnVuY3Rpb24uCgogICAgICAgIEF1dGhvcjogTWF0dGhldyBHcmFlYmVyIChAbWF0dGlmZXN0YXRpb24pCiAgICAgICAgTGljZW5zZTogQlNEIDMtQ2xhdXNlCiAgICAgICAgUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBOb25lCiAgICAgICAgT3B0aW9uYWwgRGVwZW5kZW5jaWVzOiBmdW5jCgogICAgLkRFU0NSSVBUSU9OCgogICAgICAgIEFkZC1XaW4zMlR5cGUgZW5hYmxlcyB5b3UgdG8gZWFzaWx5IGludGVyYWN0IHdpdGggdW5tYW5hZ2VkIChpLmUuCiAgICAgICAgV2luMzIgdW5tYW5hZ2VkKSBmdW5jdGlvbnMgaW4gUG93ZXJTaGVsbC4gQWZ0ZXIgcHJvdmlkaW5nCiAgICAgICAgQWRkLVdpbjMyVHlwZSB3aXRoIGEgZnVuY3Rpb24gc2lnbmF0dXJlLCBhIC5ORVQgdHlwZSBpcyBjcmVhdGVkCiAgICAgICAgdXNpbmcgcmVmbGVjdGlvbiAoaS5lLiBjc2MuZXhlIGlzIG5ldmVyIGNhbGxlZCBsaWtlIHdpdGggQWRkLVR5cGUpLgoKICAgICAgICBUaGUgJ2Z1bmMnIGhlbHBlciBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byByZWR1Y2UgdHlwaW5nIHdoZW4gZGVmaW5pbmcKICAgICAgICBtdWx0aXBsZSBmdW5jdGlvbiBkZWZpbml0aW9ucy4KCiAgICAuUEFSQU1FVEVSIERsbE5hbWUKCiAgICAgICAgVGhlIG5hbWUgb2YgdGhlIERMTC4KCiAgICAuUEFSQU1FVEVSIEZ1bmN0aW9uTmFtZQoKICAgICAgICBUaGUgbmFtZSBvZiB0aGUgdGFyZ2V0IGZ1bmN0aW9uLgoKICAgIC5QQVJBTUVURVIgUmV0dXJuVHlwZQoKICAgICAgICBUaGUgcmV0dXJuIHR5cGUgb2YgdGhlIGZ1bmN0aW9uLgoKICAgIC5QQVJBTUVURVIgUGFyYW1ldGVyVHlwZXMKCiAgICAgICAgVGhlIGZ1bmN0aW9uIHBhcmFtZXRlcnMuCgogICAgLlBBUkFNRVRFUiBOYXRpdmVDYWxsaW5nQ29udmVudGlvbgoKICAgICAgICBTcGVjaWZpZXMgdGhlIG5hdGl2ZSBjYWxsaW5nIGNvbnZlbnRpb24gb2YgdGhlIGZ1bmN0aW9uLiBEZWZhdWx0cyB0bwogICAgICAgIHN0ZGNhbGwuCgogICAgLlBBUkFNRVRFUiBDaGFyc2V0CgogICAgICAgIElmIHlvdSBuZWVkIHRvIGV4cGxpY2l0bHkgY2FsbCBhbiAnQScgb3IgJ1cnIFdpbjMyIGZ1bmN0aW9uLCB5b3UgY2FuCiAgICAgICAgc3BlY2lmeSB0aGUgY2hhcmFjdGVyIHNldC4KCiAgICAuUEFSQU1FVEVSIFNldExhc3RFcnJvcgoKICAgICAgICBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY2FsbGVlIGNhbGxzIHRoZSBTZXRMYXN0RXJyb3IgV2luMzIgQVBJCiAgICAgICAgZnVuY3Rpb24gYmVmb3JlIHJldHVybmluZyBmcm9tIHRoZSBhdHRyaWJ1dGVkIG1ldGhvZC4KCiAgICAuUEFSQU1FVEVSIE1vZHVsZQoKICAgICAgICBUaGUgaW4tbWVtb3J5IG1vZHVsZSB0aGF0IHdpbGwgaG9zdCB0aGUgZnVuY3Rpb25zLiBVc2UKICAgICAgICBOZXctSW5NZW1vcnlNb2R1bGUgdG8gZGVmaW5lIGFuIGluLW1lbW9yeSBtb2R1bGUuCgogICAgLlBBUkFNRVRFUiBOYW1lc3BhY2UKCiAgICAgICAgQW4gb3B0aW9uYWwgbmFtZXNwYWNlIHRvIHByZXBlbmQgdG8gdGhlIHR5cGUuIEFkZC1XaW4zMlR5cGUgZGVmYXVsdHMKICAgICAgICB0byBhIG5hbWVzcGFjZSBjb25zaXN0aW5nIG9ubHkgb2YgdGhlIG5hbWUgb2YgdGhlIERMTC4KCiAgICAuRVhBTVBMRQoKICAgICAgICAkTW9kID0gTmV3LUluTWVtb3J5TW9kdWxlIC1Nb2R1bGVOYW1lIFdpbjMyCgogICAgICAgICRGdW5jdGlvbkRlZmluaXRpb25zID0gQCgKICAgICAgICAgIChmdW5jIGtlcm5lbDMyIEdldFByb2NBZGRyZXNzIChbSW50UHRyXSkgQChbSW50UHRyXSwgW1N0cmluZ10pIC1DaGFyc2V0IEFuc2kgLVNldExhc3RFcnJvciksCiAgICAgICAgICAoZnVuYyBrZXJuZWwzMiBHZXRNb2R1bGVIYW5kbGUgKFtJbnRwdHJdKSBAKFtTdHJpbmddKSAtU2V0TGFzdEVycm9yKSwKICAgICAgICAgIChmdW5jIG50ZGxsIFJ0bEdldEN1cnJlbnRQZWIgKFtJbnRQdHJdKSBAKCkpCiAgICAgICAgKQoKICAgICAgICAkVHlwZXMgPSAkRnVuY3Rpb25EZWZpbml0aW9ucyB8IEFkZC1XaW4zMlR5cGUgLU1vZHVsZSAkTW9kIC1OYW1lc3BhY2UgJ1dpbjMyJwogICAgICAgICRLZXJuZWwzMiA9ICRUeXBlc1sna2VybmVsMzInXQogICAgICAgICROdGRsbCA9ICRUeXBlc1snbnRkbGwnXQogICAgICAgICROdGRsbDo6UnRsR2V0Q3VycmVudFBlYigpCiAgICAgICAgJG50ZGxsYmFzZSA9ICRLZXJuZWwzMjo6R2V0TW9kdWxlSGFuZGxlKCdudGRsbCcpCiAgICAgICAgJEtlcm5lbDMyOjpHZXRQcm9jQWRkcmVzcygkbnRkbGxiYXNlLCAnUnRsR2V0Q3VycmVudFBlYicpCgogICAgLk5PVEVTCgogICAgICAgIEluc3BpcmVkIGJ5IExlZSBIb2xtZXMnIEludm9rZS1XaW5kb3dzQXBpIGh0dHA6Ly9wb3NoY29kZS5vcmcvMjE4OQoKICAgICAgICBXaGVuIGRlZmluaW5nIG11bHRpcGxlIGZ1bmN0aW9uIHByb3RvdHlwZXMsIGl0IGlzIGlkZWFsIHRvIHByb3ZpZGUKICAgICAgICBBZGQtV2luMzJUeXBlIHdpdGggYW4gYXJyYXkgb2YgZnVuY3Rpb24gc2lnbmF0dXJlcy4gVGhhdCB3YXksIHRoZXkKICAgICAgICBhcmUgYWxsIGluY29ycG9yYXRlZCBpbnRvIHRoZSBzYW1lIGluLW1lbW9yeSBtb2R1bGUuCiM+CgogICAgW091dHB1dFR5cGUoW0hhc2h0YWJsZV0pXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREbGxOYW1lLAoKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZ1bmN0aW9uTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbVHlwZV0KICAgICAgICAkUmV0dXJuVHlwZSwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtUeXBlW11dCiAgICAgICAgJFBhcmFtZXRlclR5cGVzLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkNhbGxpbmdDb252ZW50aW9uXQogICAgICAgICROYXRpdmVDYWxsaW5nQ29udmVudGlvbiA9IFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5DYWxsaW5nQ29udmVudGlvbl06OlN0ZENhbGwsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuQ2hhclNldF0KICAgICAgICAkQ2hhcnNldCA9IFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5DaGFyU2V0XTo6QXV0bywKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFNldExhc3RFcnJvciwKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHsoJF8gLWlzIFtSZWZsZWN0aW9uLkVtaXQuTW9kdWxlQnVpbGRlcl0pIC1vciAoJF8gLWlzIFtSZWZsZWN0aW9uLkFzc2VtYmx5XSl9KV0KICAgICAgICAkTW9kdWxlLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsKCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTmFtZXNwYWNlID0gJycKICAgICkKCiAgICBCRUdJTgogICAgewogICAgICAgICRUeXBlSGFzaCA9IEB7fQogICAgfQoKICAgIFBST0NFU1MKICAgIHsKICAgICAgICBpZiAoJE1vZHVsZSAtaXMgW1JlZmxlY3Rpb24uQXNzZW1ibHldKQogICAgICAgIHsKICAgICAgICAgICAgaWYgKCROYW1lc3BhY2UpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRUeXBlSGFzaFskRGxsTmFtZV0gPSAkTW9kdWxlLkdldFR5cGUoIiROYW1lc3BhY2UuJERsbE5hbWUiKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJFR5cGVIYXNoWyREbGxOYW1lXSA9ICRNb2R1bGUuR2V0VHlwZSgkRGxsTmFtZSkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICAjIERlZmluZSBvbmUgdHlwZSBmb3IgZWFjaCBETEwKICAgICAgICAgICAgaWYgKCEkVHlwZUhhc2guQ29udGFpbnNLZXkoJERsbE5hbWUpKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoJE5hbWVzcGFjZSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAkVHlwZUhhc2hbJERsbE5hbWVdID0gJE1vZHVsZS5EZWZpbmVUeXBlKCIkTmFtZXNwYWNlLiREbGxOYW1lIiwgJ1B1YmxpYyxCZWZvcmVGaWVsZEluaXQnKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICRUeXBlSGFzaFskRGxsTmFtZV0gPSAkTW9kdWxlLkRlZmluZVR5cGUoJERsbE5hbWUsICdQdWJsaWMsQmVmb3JlRmllbGRJbml0JykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgJE1ldGhvZCA9ICRUeXBlSGFzaFskRGxsTmFtZV0uRGVmaW5lTWV0aG9kKAogICAgICAgICAgICAgICAgJEZ1bmN0aW9uTmFtZSwKICAgICAgICAgICAgICAgICdQdWJsaWMsU3RhdGljLFBpbnZva2VJbXBsJywKICAgICAgICAgICAgICAgICRSZXR1cm5UeXBlLAogICAgICAgICAgICAgICAgJFBhcmFtZXRlclR5cGVzKQoKICAgICAgICAgICAgIyBNYWtlIGVhY2ggQnlSZWYgcGFyYW1ldGVyIGFuIE91dCBwYXJhbWV0ZXIKICAgICAgICAgICAgJGkgPSAxCiAgICAgICAgICAgIEZvckVhY2goJFBhcmFtZXRlciBpbiAkUGFyYW1ldGVyVHlwZXMpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmICgkUGFyYW1ldGVyLklzQnlSZWYpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgW3ZvaWRdICRNZXRob2QuRGVmaW5lUGFyYW1ldGVyKCRpLCAnT3V0JywgJE51bGwpCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJGkrKwogICAgICAgICAgICB9CgogICAgICAgICAgICAkRGxsSW1wb3J0ID0gW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkRsbEltcG9ydEF0dHJpYnV0ZV0KICAgICAgICAgICAgJFNldExhc3RFcnJvckZpZWxkID0gJERsbEltcG9ydC5HZXRGaWVsZCgnU2V0TGFzdEVycm9yJykKICAgICAgICAgICAgJENhbGxpbmdDb252ZW50aW9uRmllbGQgPSAkRGxsSW1wb3J0LkdldEZpZWxkKCdDYWxsaW5nQ29udmVudGlvbicpCiAgICAgICAgICAgICRDaGFyc2V0RmllbGQgPSAkRGxsSW1wb3J0LkdldEZpZWxkKCdDaGFyU2V0JykKICAgICAgICAgICAgaWYgKCRTZXRMYXN0RXJyb3IpIHsgJFNMRVZhbHVlID0gJFRydWUgfSBlbHNlIHsgJFNMRVZhbHVlID0gJEZhbHNlIH0KCiAgICAgICAgICAgICMgRXF1aXZhbGVudCB0byBDIyB2ZXJzaW9uIG9mIFtEbGxJbXBvcnQoRGxsTmFtZSldCiAgICAgICAgICAgICRDb25zdHJ1Y3RvciA9IFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5EbGxJbXBvcnRBdHRyaWJ1dGVdLkdldENvbnN0cnVjdG9yKFtTdHJpbmddKQogICAgICAgICAgICAkRGxsSW1wb3J0QXR0cmlidXRlID0gTmV3LU9iamVjdCBSZWZsZWN0aW9uLkVtaXQuQ3VzdG9tQXR0cmlidXRlQnVpbGRlcigkQ29uc3RydWN0b3IsCiAgICAgICAgICAgICAgICAkRGxsTmFtZSwgW1JlZmxlY3Rpb24uUHJvcGVydHlJbmZvW11dIEAoKSwgW09iamVjdFtdXSBAKCksCiAgICAgICAgICAgICAgICBbUmVmbGVjdGlvbi5GaWVsZEluZm9bXV0gQCgkU2V0TGFzdEVycm9yRmllbGQsICRDYWxsaW5nQ29udmVudGlvbkZpZWxkLCAkQ2hhcnNldEZpZWxkKSwKICAgICAgICAgICAgICAgIFtPYmplY3RbXV0gQCgkU0xFVmFsdWUsIChbUnVudGltZS5JbnRlcm9wU2VydmljZXMuQ2FsbGluZ0NvbnZlbnRpb25dICROYXRpdmVDYWxsaW5nQ29udmVudGlvbiksIChbUnVudGltZS5JbnRlcm9wU2VydmljZXMuQ2hhclNldF0gJENoYXJzZXQpKSkKCiAgICAgICAgICAgICRNZXRob2QuU2V0Q3VzdG9tQXR0cmlidXRlKCREbGxJbXBvcnRBdHRyaWJ1dGUpCiAgICAgICAgfQogICAgfQoKICAgIEVORAogICAgewogICAgICAgIGlmICgkTW9kdWxlIC1pcyBbUmVmbGVjdGlvbi5Bc3NlbWJseV0pCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gJFR5cGVIYXNoCiAgICAgICAgfQoKICAgICAgICAkUmV0dXJuVHlwZXMgPSBAe30KCiAgICAgICAgRm9yRWFjaCAoJEtleSBpbiAkVHlwZUhhc2guS2V5cykKICAgICAgICB7CiAgICAgICAgICAgICRUeXBlID0gJFR5cGVIYXNoWyRLZXldLkNyZWF0ZVR5cGUoKQoKICAgICAgICAgICAgJFJldHVyblR5cGVzWyRLZXldID0gJFR5cGUKICAgICAgICB9CgogICAgICAgIHJldHVybiAkUmV0dXJuVHlwZXMKICAgIH0KfQoKCmZ1bmN0aW9uIHBzZW51bQp7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgQ3JlYXRlcyBhbiBpbi1tZW1vcnkgZW51bWVyYXRpb24gZm9yIHVzZSBpbiB5b3VyIFBvd2VyU2hlbGwgc2Vzc2lvbi4KCiAgICAgICAgQXV0aG9yOiBNYXR0aGV3IEdyYWViZXIgKEBtYXR0aWZlc3RhdGlvbikKICAgICAgICBMaWNlbnNlOiBCU0QgMy1DbGF1c2UKICAgICAgICBSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IE5vbmUKICAgICAgICBPcHRpb25hbCBEZXBlbmRlbmNpZXM6IE5vbmUKICAgICAKICAgIC5ERVNDUklQVElPTgoKICAgICAgICBUaGUgJ3BzZW51bScgZnVuY3Rpb24gZmFjaWxpdGF0ZXMgdGhlIGNyZWF0aW9uIG9mIGVudW1zIGVudGlyZWx5IGluCiAgICAgICAgbWVtb3J5IHVzaW5nIGFzIGNsb3NlIHRvIGEgIkMgc3R5bGUiIGFzIFBvd2VyU2hlbGwgd2lsbCBhbGxvdy4KCiAgICAuUEFSQU1FVEVSIE1vZHVsZQoKICAgICAgICBUaGUgaW4tbWVtb3J5IG1vZHVsZSB0aGF0IHdpbGwgaG9zdCB0aGUgZW51bS4gVXNlCiAgICAgICAgTmV3LUluTWVtb3J5TW9kdWxlIHRvIGRlZmluZSBhbiBpbi1tZW1vcnkgbW9kdWxlLgoKICAgIC5QQVJBTUVURVIgRnVsbE5hbWUKCiAgICAgICAgVGhlIGZ1bGx5LXF1YWxpZmllZCBuYW1lIG9mIHRoZSBlbnVtLgoKICAgIC5QQVJBTUVURVIgVHlwZQoKICAgICAgICBUaGUgdHlwZSBvZiBlYWNoIGVudW0gZWxlbWVudC4KCiAgICAuUEFSQU1FVEVSIEVudW1FbGVtZW50cwoKICAgICAgICBBIGhhc2h0YWJsZSBvZiBlbnVtIGVsZW1lbnRzLgoKICAgIC5QQVJBTUVURVIgQml0ZmllbGQKCiAgICAgICAgU3BlY2lmaWVzIHRoYXQgdGhlIGVudW0gc2hvdWxkIGJlIHRyZWF0ZWQgYXMgYSBiaXRmaWVsZC4KCiAgICAuRVhBTVBMRQoKICAgICAgICAkTW9kID0gTmV3LUluTWVtb3J5TW9kdWxlIC1Nb2R1bGVOYW1lIFdpbjMyCgogICAgICAgICRJbWFnZVN1YnN5c3RlbSA9IHBzZW51bSAkTW9kIFBFLklNQUdFX1NVQlNZU1RFTSBVSW50MTYgQHsKICAgICAgICAgICAgVU5LTk9XTiA9ICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICBOQVRJVkUgPSAgICAgICAgICAgICAgICAgICAxICMgSW1hZ2UgZG9lc24ndCByZXF1aXJlIGEgc3Vic3lzdGVtLgogICAgICAgICAgICBXSU5ET1dTX0dVSSA9ICAgICAgICAgICAgICAyICMgSW1hZ2UgcnVucyBpbiB0aGUgV2luZG93cyBHVUkgc3Vic3lzdGVtLgogICAgICAgICAgICBXSU5ET1dTX0NVSSA9ICAgICAgICAgICAgICAzICMgSW1hZ2UgcnVucyBpbiB0aGUgV2luZG93cyBjaGFyYWN0ZXIgc3Vic3lzdGVtLgogICAgICAgICAgICBPUzJfQ1VJID0gICAgICAgICAgICAgICAgICA1ICMgSW1hZ2UgcnVucyBpbiB0aGUgT1MvMiBjaGFyYWN0ZXIgc3Vic3lzdGVtLgogICAgICAgICAgICBQT1NJWF9DVUkgPSAgICAgICAgICAgICAgICA3ICMgSW1hZ2UgcnVucyBpbiB0aGUgUG9zaXggY2hhcmFjdGVyIHN1YnN5c3RlbS4KICAgICAgICAgICAgTkFUSVZFX1dJTkRPV1MgPSAgICAgICAgICAgOCAjIEltYWdlIGlzIGEgbmF0aXZlIFdpbjl4IGRyaXZlci4KICAgICAgICAgICAgV0lORE9XU19DRV9HVUkgPSAgICAgICAgICAgOSAjIEltYWdlIHJ1bnMgaW4gdGhlIFdpbmRvd3MgQ0Ugc3Vic3lzdGVtLgogICAgICAgICAgICBFRklfQVBQTElDQVRJT04gPSAgICAgICAgICAxMAogICAgICAgICAgICBFRklfQk9PVF9TRVJWSUNFX0RSSVZFUiA9ICAxMQogICAgICAgICAgICBFRklfUlVOVElNRV9EUklWRVIgPSAgICAgICAxMgogICAgICAgICAgICBFRklfUk9NID0gICAgICAgICAgICAgICAgICAxMwogICAgICAgICAgICBYQk9YID0gICAgICAgICAgICAgICAgICAgICAxNAogICAgICAgICAgICBXSU5ET1dTX0JPT1RfQVBQTElDQVRJT04gPSAxNgogICAgICAgIH0KCiAgICAuTk9URVMKCiAgICAgICAgUG93ZXJTaGVsbCBwdXJpc3RzIG1heSBkaXNhZ3JlZSB3aXRoIHRoZSBuYW1pbmcgb2YgdGhpcyBmdW5jdGlvbiBidXQKICAgICAgICBhZ2FpbiwgdGhpcyB3YXMgZGV2ZWxvcGVkIGluIHN1Y2ggYSB3YXkgc28gYXMgdG8gZW11bGF0ZSBhICJDIHN0eWxlIgogICAgICAgIGRlZmluaXRpb24gYXMgY2xvc2VseSBhcyBwb3NzaWJsZS4gU29ycnksIEknbSBub3QgZ29pbmcgdG8gbmFtZSBpdAogICAgICAgIE5ldy1FbnVtLiA6UAojPgoKICAgIFtPdXRwdXRUeXBlKFtUeXBlXSldCiAgICBQYXJhbQogICAgKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHsoJF8gLWlzIFtSZWZsZWN0aW9uLkVtaXQuTW9kdWxlQnVpbGRlcl0pIC1vciAoJF8gLWlzIFtSZWZsZWN0aW9uLkFzc2VtYmx5XSl9KV0KICAgICAgICAkTW9kdWxlLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMSwgTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRnVsbE5hbWUsCgogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAyLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1R5cGVdCiAgICAgICAgJFR5cGUsCgogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAzLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbSGFzaHRhYmxlXQogICAgICAgICRFbnVtRWxlbWVudHMsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEJpdGZpZWxkCiAgICApCgogICAgaWYgKCRNb2R1bGUgLWlzIFtSZWZsZWN0aW9uLkFzc2VtYmx5XSkKICAgIHsKICAgICAgICByZXR1cm4gKCRNb2R1bGUuR2V0VHlwZSgkRnVsbE5hbWUpKQogICAgfQoKICAgICRFbnVtVHlwZSA9ICRUeXBlIC1hcyBbVHlwZV0KCiAgICAkRW51bUJ1aWxkZXIgPSAkTW9kdWxlLkRlZmluZUVudW0oJEZ1bGxOYW1lLCAnUHVibGljJywgJEVudW1UeXBlKQoKICAgIGlmICgkQml0ZmllbGQpCiAgICB7CiAgICAgICAgJEZsYWdzQ29uc3RydWN0b3IgPSBbRmxhZ3NBdHRyaWJ1dGVdLkdldENvbnN0cnVjdG9yKEAoKSkKICAgICAgICAkRmxhZ3NDdXN0b21BdHRyaWJ1dGUgPSBOZXctT2JqZWN0IFJlZmxlY3Rpb24uRW1pdC5DdXN0b21BdHRyaWJ1dGVCdWlsZGVyKCRGbGFnc0NvbnN0cnVjdG9yLCBAKCkpCiAgICAgICAgJEVudW1CdWlsZGVyLlNldEN1c3RvbUF0dHJpYnV0ZSgkRmxhZ3NDdXN0b21BdHRyaWJ1dGUpCiAgICB9CgogICAgRm9yRWFjaCAoJEtleSBpbiAkRW51bUVsZW1lbnRzLktleXMpCiAgICB7CiAgICAgICAgIyBBcHBseSB0aGUgc3BlY2lmaWVkIGVudW0gdHlwZSB0byBlYWNoIGVsZW1lbnQKICAgICAgICAkTnVsbCA9ICRFbnVtQnVpbGRlci5EZWZpbmVMaXRlcmFsKCRLZXksICRFbnVtRWxlbWVudHNbJEtleV0gLWFzICRFbnVtVHlwZSkKICAgIH0KCiAgICAkRW51bUJ1aWxkZXIuQ3JlYXRlVHlwZSgpCn0KCgojIEEgaGVscGVyIGZ1bmN0aW9uIHVzZWQgdG8gcmVkdWNlIHR5cGluZyB3aGlsZSBkZWZpbmluZyBzdHJ1Y3QKIyBmaWVsZHMuCmZ1bmN0aW9uIGZpZWxkCnsKICAgIFBhcmFtCiAgICAoCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbVUludDE2XQogICAgICAgICRQb3NpdGlvbiwKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDEsIE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbVHlwZV0KICAgICAgICAkVHlwZSwKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDIpXQogICAgICAgIFtVSW50MTZdCiAgICAgICAgJE9mZnNldCwKCiAgICAgICAgW09iamVjdFtdXQogICAgICAgICRNYXJzaGFsQXMKICAgICkKCiAgICBAewogICAgICAgIFBvc2l0aW9uID0gJFBvc2l0aW9uCiAgICAgICAgVHlwZSA9ICRUeXBlIC1hcyBbVHlwZV0KICAgICAgICBPZmZzZXQgPSAkT2Zmc2V0CiAgICAgICAgTWFyc2hhbEFzID0gJE1hcnNoYWxBcwogICAgfQp9CgoKZnVuY3Rpb24gc3RydWN0CnsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBDcmVhdGVzIGFuIGluLW1lbW9yeSBzdHJ1Y3QgZm9yIHVzZSBpbiB5b3VyIFBvd2VyU2hlbGwgc2Vzc2lvbi4KCiAgICAgICAgQXV0aG9yOiBNYXR0aGV3IEdyYWViZXIgKEBtYXR0aWZlc3RhdGlvbikKICAgICAgICBMaWNlbnNlOiBCU0QgMy1DbGF1c2UKICAgICAgICBSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IE5vbmUKICAgICAgICBPcHRpb25hbCBEZXBlbmRlbmNpZXM6IGZpZWxkCgogICAgLkRFU0NSSVBUSU9OCgogICAgICAgIFRoZSAnc3RydWN0JyBmdW5jdGlvbiBmYWNpbGl0YXRlcyB0aGUgY3JlYXRpb24gb2Ygc3RydWN0cyBlbnRpcmVseSBpbgogICAgICAgIG1lbW9yeSB1c2luZyBhcyBjbG9zZSB0byBhICJDIHN0eWxlIiBhcyBQb3dlclNoZWxsIHdpbGwgYWxsb3cuIFN0cnVjdAogICAgICAgIGZpZWxkcyBhcmUgc3BlY2lmaWVkIHVzaW5nIGEgaGFzaHRhYmxlIHdoZXJlIGVhY2ggZmllbGQgb2YgdGhlIHN0cnVjdAogICAgICAgIGlzIGNvbXByb3NlZCBvZiB0aGUgb3JkZXIgaW4gd2hpY2ggaXQgc2hvdWxkIGJlIGRlZmluZWQsIGl0cyAuTkVUCiAgICAgICAgdHlwZSwgYW5kIG9wdGlvbmFsbHksIGl0cyBvZmZzZXQgYW5kIHNwZWNpYWwgbWFyc2hhbGluZyBhdHRyaWJ1dGVzLgoKICAgICAgICBPbmUgb2YgdGhlIGZlYXR1cmVzIG9mICdzdHJ1Y3QnIGlzIHRoYXQgYWZ0ZXIgeW91ciBzdHJ1Y3QgaXMgZGVmaW5lZCwKICAgICAgICBpdCB3aWxsIGNvbWUgd2l0aCBhIGJ1aWx0LWluIEdldFNpemUgbWV0aG9kIGFzIHdlbGwgYXMgYW4gZXhwbGljaXQKICAgICAgICBjb252ZXJ0ZXIgc28gdGhhdCB5b3UgY2FuIGVhc2lseSBjYXN0IGFuIEludFB0ciB0byB0aGUgc3RydWN0IHdpdGhvdXQKICAgICAgICByZWx5aW5nIHVwb24gY2FsbGluZyBTaXplT2YgYW5kL29yIFB0clRvU3RydWN0dXJlIGluIHRoZSBNYXJzaGFsCiAgICAgICAgY2xhc3MuCgogICAgLlBBUkFNRVRFUiBNb2R1bGUKCiAgICAgICAgVGhlIGluLW1lbW9yeSBtb2R1bGUgdGhhdCB3aWxsIGhvc3QgdGhlIHN0cnVjdC4gVXNlCiAgICAgICAgTmV3LUluTWVtb3J5TW9kdWxlIHRvIGRlZmluZSBhbiBpbi1tZW1vcnkgbW9kdWxlLgoKICAgIC5QQVJBTUVURVIgRnVsbE5hbWUKCiAgICAgICAgVGhlIGZ1bGx5LXF1YWxpZmllZCBuYW1lIG9mIHRoZSBzdHJ1Y3QuCgogICAgLlBBUkFNRVRFUiBTdHJ1Y3RGaWVsZHMKCiAgICAgICAgQSBoYXNodGFibGUgb2YgZmllbGRzLiBVc2UgdGhlICdmaWVsZCcgaGVscGVyIGZ1bmN0aW9uIHRvIGVhc2UKICAgICAgICBkZWZpbmluZyBlYWNoIGZpZWxkLgoKICAgIC5QQVJBTUVURVIgUGFja2luZ1NpemUKCiAgICAgICAgU3BlY2lmaWVzIHRoZSBtZW1vcnkgYWxpZ25tZW50IG9mIGZpZWxkcy4KCiAgICAuUEFSQU1FVEVSIEV4cGxpY2l0TGF5b3V0CgogICAgICAgIEluZGljYXRlcyB0aGF0IGFuIGV4cGxpY2l0IG9mZnNldCBmb3IgZWFjaCBmaWVsZCB3aWxsIGJlIHNwZWNpZmllZC4KCiAgICAuRVhBTVBMRQoKICAgICAgICAkTW9kID0gTmV3LUluTWVtb3J5TW9kdWxlIC1Nb2R1bGVOYW1lIFdpbjMyCgogICAgICAgICRJbWFnZURvc1NpZ25hdHVyZSA9IHBzZW51bSAkTW9kIFBFLklNQUdFX0RPU19TSUdOQVRVUkUgVUludDE2IEB7CiAgICAgICAgICAgIERPU19TSUdOQVRVUkUgPSAgICAweDVBNEQKICAgICAgICAgICAgT1MyX1NJR05BVFVSRSA9ICAgIDB4NDU0RQogICAgICAgICAgICBPUzJfU0lHTkFUVVJFX0xFID0gMHg0NTRDCiAgICAgICAgICAgIFZYRF9TSUdOQVRVUkUgPSAgICAweDQ1NEMKICAgICAgICB9CgogICAgICAgICRJbWFnZURvc0hlYWRlciA9IHN0cnVjdCAkTW9kIFBFLklNQUdFX0RPU19IRUFERVIgQHsKICAgICAgICAgICAgZV9tYWdpYyA9ICAgIGZpZWxkIDAgJEltYWdlRG9zU2lnbmF0dXJlCiAgICAgICAgICAgIGVfY2JscCA9ICAgICBmaWVsZCAxIFVJbnQxNgogICAgICAgICAgICBlX2NwID0gICAgICAgZmllbGQgMiBVSW50MTYKICAgICAgICAgICAgZV9jcmxjID0gICAgIGZpZWxkIDMgVUludDE2CiAgICAgICAgICAgIGVfY3BhcmhkciA9ICBmaWVsZCA0IFVJbnQxNgogICAgICAgICAgICBlX21pbmFsbG9jID0gZmllbGQgNSBVSW50MTYKICAgICAgICAgICAgZV9tYXhhbGxvYyA9IGZpZWxkIDYgVUludDE2CiAgICAgICAgICAgIGVfc3MgPSAgICAgICBmaWVsZCA3IFVJbnQxNgogICAgICAgICAgICBlX3NwID0gICAgICAgZmllbGQgOCBVSW50MTYKICAgICAgICAgICAgZV9jc3VtID0gICAgIGZpZWxkIDkgVUludDE2CiAgICAgICAgICAgIGVfaXAgPSAgICAgICBmaWVsZCAxMCBVSW50MTYKICAgICAgICAgICAgZV9jcyA9ICAgICAgIGZpZWxkIDExIFVJbnQxNgogICAgICAgICAgICBlX2xmYXJsYyA9ICAgZmllbGQgMTIgVUludDE2CiAgICAgICAgICAgIGVfb3ZubyA9ICAgICBmaWVsZCAxMyBVSW50MTYKICAgICAgICAgICAgZV9yZXMgPSAgICAgIGZpZWxkIDE0IFVJbnQxNltdIC1NYXJzaGFsQXMgQCgnQnlWYWxBcnJheScsIDQpCiAgICAgICAgICAgIGVfb2VtaWQgPSAgICBmaWVsZCAxNSBVSW50MTYKICAgICAgICAgICAgZV9vZW1pbmZvID0gIGZpZWxkIDE2IFVJbnQxNgogICAgICAgICAgICBlX3JlczIgPSAgICAgZmllbGQgMTcgVUludDE2W10gLU1hcnNoYWxBcyBAKCdCeVZhbEFycmF5JywgMTApCiAgICAgICAgICAgIGVfbGZhbmV3ID0gICBmaWVsZCAxOCBJbnQzMgogICAgICAgIH0KCiAgICAgICAgIyBFeGFtcGxlIG9mIHVzaW5nIGFuIGV4cGxpY2l0IGxheW91dCBpbiBvcmRlciB0byBjcmVhdGUgYSB1bmlvbi4KICAgICAgICAkVGVzdFVuaW9uID0gc3RydWN0ICRNb2QgVGVzdFVuaW9uIEB7CiAgICAgICAgICAgIGZpZWxkMSA9IGZpZWxkIDAgVUludDMyIDAKICAgICAgICAgICAgZmllbGQyID0gZmllbGQgMSBJbnRQdHIgMAogICAgICAgIH0gLUV4cGxpY2l0TGF5b3V0CgogICAgLk5PVEVTCgogICAgICAgIFBvd2VyU2hlbGwgcHVyaXN0cyBtYXkgZGlzYWdyZWUgd2l0aCB0aGUgbmFtaW5nIG9mIHRoaXMgZnVuY3Rpb24gYnV0CiAgICAgICAgYWdhaW4sIHRoaXMgd2FzIGRldmVsb3BlZCBpbiBzdWNoIGEgd2F5IHNvIGFzIHRvIGVtdWxhdGUgYSAiQyBzdHlsZSIKICAgICAgICBkZWZpbml0aW9uIGFzIGNsb3NlbHkgYXMgcG9zc2libGUuIFNvcnJ5LCBJJ20gbm90IGdvaW5nIHRvIG5hbWUgaXQKICAgICAgICBOZXctU3RydWN0LiA6UAojPgoKICAgIFtPdXRwdXRUeXBlKFtUeXBlXSldCiAgICBQYXJhbQogICAgKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAxLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHsoJF8gLWlzIFtSZWZsZWN0aW9uLkVtaXQuTW9kdWxlQnVpbGRlcl0pIC1vciAoJF8gLWlzIFtSZWZsZWN0aW9uLkFzc2VtYmx5XSl9KV0KICAgICAgICAkTW9kdWxlLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMiwgTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRnVsbE5hbWUsCgogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAzLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbSGFzaHRhYmxlXQogICAgICAgICRTdHJ1Y3RGaWVsZHMsCgogICAgICAgIFtSZWZsZWN0aW9uLkVtaXQuUGFja2luZ1NpemVdCiAgICAgICAgJFBhY2tpbmdTaXplID0gW1JlZmxlY3Rpb24uRW1pdC5QYWNraW5nU2l6ZV06OlVuc3BlY2lmaWVkLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRFeHBsaWNpdExheW91dAogICAgKQoKICAgIGlmICgkTW9kdWxlIC1pcyBbUmVmbGVjdGlvbi5Bc3NlbWJseV0pCiAgICB7CiAgICAgICAgcmV0dXJuICgkTW9kdWxlLkdldFR5cGUoJEZ1bGxOYW1lKSkKICAgIH0KCiAgICBbUmVmbGVjdGlvbi5UeXBlQXR0cmlidXRlc10gJFN0cnVjdEF0dHJpYnV0ZXMgPSAnQW5zaUNsYXNzLAogICAgICAgIENsYXNzLAogICAgICAgIFB1YmxpYywKICAgICAgICBTZWFsZWQsCiAgICAgICAgQmVmb3JlRmllbGRJbml0JwoKICAgIGlmICgkRXhwbGljaXRMYXlvdXQpCiAgICB7CiAgICAgICAgJFN0cnVjdEF0dHJpYnV0ZXMgPSAkU3RydWN0QXR0cmlidXRlcyAtYm9yIFtSZWZsZWN0aW9uLlR5cGVBdHRyaWJ1dGVzXTo6RXhwbGljaXRMYXlvdXQKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICAkU3RydWN0QXR0cmlidXRlcyA9ICRTdHJ1Y3RBdHRyaWJ1dGVzIC1ib3IgW1JlZmxlY3Rpb24uVHlwZUF0dHJpYnV0ZXNdOjpTZXF1ZW50aWFsTGF5b3V0CiAgICB9CgogICAgJFN0cnVjdEJ1aWxkZXIgPSAkTW9kdWxlLkRlZmluZVR5cGUoJEZ1bGxOYW1lLCAkU3RydWN0QXR0cmlidXRlcywgW1ZhbHVlVHlwZV0sICRQYWNraW5nU2l6ZSkKICAgICRDb25zdHJ1Y3RvckluZm8gPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbEFzQXR0cmlidXRlXS5HZXRDb25zdHJ1Y3RvcnMoKVswXQogICAgJFNpemVDb25zdCA9IEAoW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxBc0F0dHJpYnV0ZV0uR2V0RmllbGQoJ1NpemVDb25zdCcpKQoKICAgICRGaWVsZHMgPSBOZXctT2JqZWN0IEhhc2h0YWJsZVtdKCRTdHJ1Y3RGaWVsZHMuQ291bnQpCgogICAgIyBTb3J0IGVhY2ggZmllbGQgYWNjb3JkaW5nIHRvIHRoZSBvcmRlcnMgc3BlY2lmaWVkCiAgICAjIFVuZm9ydHVuYXRlbHksIFBTdjIgZG9lc24ndCBoYXZlIHRoZSBsdXh1cnkgb2YgdGhlCiAgICAjIGhhc2h0YWJsZSBbT3JkZXJlZF0gYWNjZWxlcmF0b3IuCiAgICBGb3JFYWNoICgkRmllbGQgaW4gJFN0cnVjdEZpZWxkcy5LZXlzKQogICAgewogICAgICAgICRJbmRleCA9ICRTdHJ1Y3RGaWVsZHNbJEZpZWxkXVsnUG9zaXRpb24nXQogICAgICAgICRGaWVsZHNbJEluZGV4XSA9IEB7RmllbGROYW1lID0gJEZpZWxkOyBQcm9wZXJ0aWVzID0gJFN0cnVjdEZpZWxkc1skRmllbGRdfQogICAgfQoKICAgIEZvckVhY2ggKCRGaWVsZCBpbiAkRmllbGRzKQogICAgewogICAgICAgICRGaWVsZE5hbWUgPSAkRmllbGRbJ0ZpZWxkTmFtZSddCiAgICAgICAgJEZpZWxkUHJvcCA9ICRGaWVsZFsnUHJvcGVydGllcyddCgogICAgICAgICRPZmZzZXQgPSAkRmllbGRQcm9wWydPZmZzZXQnXQogICAgICAgICRUeXBlID0gJEZpZWxkUHJvcFsnVHlwZSddCiAgICAgICAgJE1hcnNoYWxBcyA9ICRGaWVsZFByb3BbJ01hcnNoYWxBcyddCgogICAgICAgICROZXdGaWVsZCA9ICRTdHJ1Y3RCdWlsZGVyLkRlZmluZUZpZWxkKCRGaWVsZE5hbWUsICRUeXBlLCAnUHVibGljJykKCiAgICAgICAgaWYgKCRNYXJzaGFsQXMpCiAgICAgICAgewogICAgICAgICAgICAkVW5tYW5hZ2VkVHlwZSA9ICRNYXJzaGFsQXNbMF0gLWFzIChbUnVudGltZS5JbnRlcm9wU2VydmljZXMuVW5tYW5hZ2VkVHlwZV0pCiAgICAgICAgICAgIGlmICgkTWFyc2hhbEFzWzFdKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAkU2l6ZSA9ICRNYXJzaGFsQXNbMV0KICAgICAgICAgICAgICAgICRBdHRyaWJCdWlsZGVyID0gTmV3LU9iamVjdCBSZWZsZWN0aW9uLkVtaXQuQ3VzdG9tQXR0cmlidXRlQnVpbGRlcigkQ29uc3RydWN0b3JJbmZvLAogICAgICAgICAgICAgICAgICAgICRVbm1hbmFnZWRUeXBlLCAkU2l6ZUNvbnN0LCBAKCRTaXplKSkKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRBdHRyaWJCdWlsZGVyID0gTmV3LU9iamVjdCBSZWZsZWN0aW9uLkVtaXQuQ3VzdG9tQXR0cmlidXRlQnVpbGRlcigkQ29uc3RydWN0b3JJbmZvLCBbT2JqZWN0W11dIEAoJFVubWFuYWdlZFR5cGUpKQogICAgICAgICAgICB9CgogICAgICAgICAgICAkTmV3RmllbGQuU2V0Q3VzdG9tQXR0cmlidXRlKCRBdHRyaWJCdWlsZGVyKQogICAgICAgIH0KCiAgICAgICAgaWYgKCRFeHBsaWNpdExheW91dCkgeyAkTmV3RmllbGQuU2V0T2Zmc2V0KCRPZmZzZXQpIH0KICAgIH0KCiAgICAjIE1ha2UgdGhlIHN0cnVjdCBhd2FyZSBvZiBpdHMgb3duIHNpemUuCiAgICAjIE5vIG1vcmUgaGF2aW5nIHRvIGNhbGwgW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpTaXplT2YhCiAgICAkU2l6ZU1ldGhvZCA9ICRTdHJ1Y3RCdWlsZGVyLkRlZmluZU1ldGhvZCgnR2V0U2l6ZScsCiAgICAgICAgJ1B1YmxpYywgU3RhdGljJywKICAgICAgICBbSW50XSwKICAgICAgICBbVHlwZVtdXSBAKCkpCiAgICAkSUxHZW5lcmF0b3IgPSAkU2l6ZU1ldGhvZC5HZXRJTEdlbmVyYXRvcigpCiAgICAjIFRoYW5rcyBmb3IgdGhlIGhlbHAsIEphc29uIFNoaXJrIQogICAgJElMR2VuZXJhdG9yLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6TGR0b2tlbiwgJFN0cnVjdEJ1aWxkZXIpCiAgICAkSUxHZW5lcmF0b3IuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpDYWxsLAogICAgICAgIFtUeXBlXS5HZXRNZXRob2QoJ0dldFR5cGVGcm9tSGFuZGxlJykpCiAgICAkSUxHZW5lcmF0b3IuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpDYWxsLAogICAgICAgIFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXS5HZXRNZXRob2QoJ1NpemVPZicsIFtUeXBlW11dIEAoW1R5cGVdKSkpCiAgICAkSUxHZW5lcmF0b3IuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpSZXQpCgogICAgIyBBbGxvdyBmb3IgZXhwbGljaXQgY2FzdGluZyBmcm9tIGFuIEludFB0cgogICAgIyBObyBtb3JlIGhhdmluZyB0byBjYWxsIFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6UHRyVG9TdHJ1Y3R1cmUhCiAgICAkSW1wbGljaXRDb252ZXJ0ZXIgPSAkU3RydWN0QnVpbGRlci5EZWZpbmVNZXRob2QoJ29wX0ltcGxpY2l0JywKICAgICAgICAnUHJpdmF0ZVNjb3BlLCBQdWJsaWMsIFN0YXRpYywgSGlkZUJ5U2lnLCBTcGVjaWFsTmFtZScsCiAgICAgICAgJFN0cnVjdEJ1aWxkZXIsCiAgICAgICAgW1R5cGVbXV0gQChbSW50UHRyXSkpCiAgICAkSUxHZW5lcmF0b3IyID0gJEltcGxpY2l0Q29udmVydGVyLkdldElMR2VuZXJhdG9yKCkKICAgICRJTEdlbmVyYXRvcjIuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpOb3ApCiAgICAkSUxHZW5lcmF0b3IyLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6TGRhcmdfMCkKICAgICRJTEdlbmVyYXRvcjIuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpMZHRva2VuLCAkU3RydWN0QnVpbGRlcikKICAgICRJTEdlbmVyYXRvcjIuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpDYWxsLAogICAgICAgIFtUeXBlXS5HZXRNZXRob2QoJ0dldFR5cGVGcm9tSGFuZGxlJykpCiAgICAkSUxHZW5lcmF0b3IyLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6Q2FsbCwKICAgICAgICBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF0uR2V0TWV0aG9kKCdQdHJUb1N0cnVjdHVyZScsIFtUeXBlW11dIEAoW0ludFB0cl0sIFtUeXBlXSkpKQogICAgJElMR2VuZXJhdG9yMi5FbWl0KFtSZWZsZWN0aW9uLkVtaXQuT3BDb2Rlc106OlVuYm94X0FueSwgJFN0cnVjdEJ1aWxkZXIpCiAgICAkSUxHZW5lcmF0b3IyLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6UmV0KQoKICAgICRTdHJ1Y3RCdWlsZGVyLkNyZWF0ZVR5cGUoKQp9CgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIwojIE1pc2MuIGhlbHBlcnMKIwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKZmlsdGVyIEV4cG9ydC1Qb3dlclZpZXdDU1Ygewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFRoaXMgaGVscGVyIGV4cG9ydHMgYW4gLUlucHV0T2JqZWN0IHRvIGEgLmNzdiBpbiBhIHRocmVhZC1zYWZlIG1hbm5lcgogICAgICAgIHVzaW5nIGEgbXV0ZXguIFRoaXMgaXMgc28gdGhlIHZhcmlvdXMgbXVsdGktdGhyZWFkZWQgZnVuY3Rpb25zIGluCiAgICAgICAgUG93ZXJWaWV3IGhhcyBhIHRocmVhZC1zYWZlIHdheSB0byBleHBvcnQgb3V0cHV0IHRvIHRoZSBzYW1lIGZpbGUuCiAgICAgICAgCiAgICAgICAgQmFzZWQgcGFydGlhbGx5IG9uIERtaXRyeSBTb3RuaWtvdidzIEV4cG9ydC1DU1YgY29kZQogICAgICAgICAgICBhdCBodHRwOi8vcG9zaGNvZGUub3JnLzE1OTAKCiAgICAuTElOSwoKICAgICAgICBodHRwOi8vcG9zaGNvZGUub3JnLzE1OTAKICAgICAgICBodHRwOi8vZG1pdHJ5c290bmlrb3Yud29yZHByZXNzLmNvbS8yMDEwLzAxLzE5L0V4cG9ydC1Dc3YtYXBwZW5kLwojPgogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSRUcnVlKV0KICAgICAgICBbU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU09iamVjdFtdXQogICAgICAgICRJbnB1dE9iamVjdCwKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUsIFBvc2l0aW9uPTApXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAkT3V0RmlsZQogICAgKQoKICAgICRPYmplY3RDU1YgPSAkSW5wdXRPYmplY3QgfCBDb252ZXJ0VG8tQ3N2IC1Ob1R5cGVJbmZvcm1hdGlvbgoKICAgICMgbXV0ZXggc28gdGhyZWFkZWQgY29kZSBkb2Vzbid0IHN0b21wIG9uIHRoZSBvdXRwdXQgZmlsZQogICAgJE11dGV4ID0gTmV3LU9iamVjdCBTeXN0ZW0uVGhyZWFkaW5nLk11dGV4ICRGYWxzZSwnQ1NWTXV0ZXgnOwogICAgJE51bGwgPSAkTXV0ZXguV2FpdE9uZSgpCgogICAgaWYgKFRlc3QtUGF0aCAtUGF0aCAkT3V0RmlsZSkgewogICAgICAgICMgaGFjayB0byBza2lwIHRoZSBmaXJzdCBsaW5lIG9mIG91dHB1dCBpZiB0aGUgZmlsZSBhbHJlYWR5IGV4aXN0cwogICAgICAgICRPYmplY3RDU1YgfCBGb3JFYWNoLU9iamVjdCB7ICRTdGFydD0kVHJ1ZSB9eyBpZiAoJFN0YXJ0KSB7JFN0YXJ0PSRGYWxzZX0gZWxzZSB7JF99IH0gfCBPdXQtRmlsZSAtRW5jb2RpbmcgJ0FTQ0lJJyAtQXBwZW5kIC1GaWxlUGF0aCAkT3V0RmlsZQogICAgfQogICAgZWxzZSB7CiAgICAgICAgJE9iamVjdENTViB8IE91dC1GaWxlIC1FbmNvZGluZyAnQVNDSUknIC1BcHBlbmQgLUZpbGVQYXRoICRPdXRGaWxlCiAgICB9CgogICAgJE11dGV4LlJlbGVhc2VNdXRleCgpCn0KCgpmaWx0ZXIgR2V0LUlQQWRkcmVzcyB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgUmVzb2x2ZXMgYSBnaXZlbiBob3N0ZW5hbWUgdG8gaXRzIGFzc29jaWF0ZWQgSVB2NCBhZGRyZXNzLiAKICAgICAgICBJZiBubyBob3N0bmFtZSBpcyBwcm92aWRlZCwgaXQgZGVmYXVsdHMgdG8gcmV0dXJuaW5nCiAgICAgICAgdGhlIElQIGFkZHJlc3Mgb2YgdGhlIGxvY2FsaG9zdC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1JUEFkZHJlc3MgLUNvbXB1dGVyTmFtZSBTRVJWRVIKICAgICAgICAKICAgICAgICBSZXR1cm4gdGhlIElQdjQgYWRkcmVzcyBvZiAnU0VSVkVSJwoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LUNvbnRlbnQgLlxob3N0bmFtZXMudHh0IHwgR2V0LUlQQWRkcmVzcwoKICAgICAgICBHZXQgdGhlIElQIGFkZHJlc3NlcyBvZiBhbGwgaG9zdG5hbWVzIGluIGFuIGlucHV0IGZpbGUuCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MCwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlck5hbWUgPSAkRW52OkNvbXB1dGVyTmFtZQogICAgKQoKICAgIHRyeSB7CiAgICAgICAgIyBleHRyYWN0IHRoZSBjb21wdXRlciBuYW1lIGZyb20gd2hhdGV2ZXIgb2JqZWN0IHdhcyBwYXNzZWQgb24gdGhlIHBpcGVsaW5lCiAgICAgICAgJENvbXB1dGVyID0gJENvbXB1dGVyTmFtZSB8IEdldC1OYW1lRmllbGQKCiAgICAgICAgIyBnZXQgdGhlIElQIHJlc29sdXRpb24gb2YgdGhpcyBzcGVjaWZpZWQgaG9zdG5hbWUKICAgICAgICBAKChbTmV0LkRuc106OkdldEhvc3RFbnRyeSgkQ29tcHV0ZXIpKS5BZGRyZXNzTGlzdCkgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgIGlmICgkXy5BZGRyZXNzRmFtaWx5IC1lcSAnSW50ZXJOZXR3b3JrJykgewogICAgICAgICAgICAgICAgJE91dCA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSVBBZGRyZXNzJyAkXy5JUEFkZHJlc3NUb1N0cmluZwogICAgICAgICAgICAgICAgJE91dAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgY2F0Y2ggewogICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgJ0NvdWxkIG5vdCByZXNvbHZlIGhvc3QgdG8gYW4gSVAgQWRkcmVzcy4nCiAgICB9Cn0KCgpmaWx0ZXIgQ29udmVydC1OYW1lVG9TaWQgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIENvbnZlcnRzIGEgZ2l2ZW4gdXNlci9ncm91cCBuYW1lIHRvIGEgc2VjdXJpdHkgaWRlbnRpZmllciAoU0lEKS4KCiAgICAuUEFSQU1FVEVSIE9iamVjdE5hbWUKCiAgICAgICAgVGhlIHVzZXIvZ3JvdXAgbmFtZSB0byBjb252ZXJ0LCBjYW4gYmUgJ3VzZXInIG9yICdET01BSU5cdXNlcicgZm9ybWF0LgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFNwZWNpZmljIGRvbWFpbiBmb3IgdGhlIGdpdmVuIHVzZXIgYWNjb3VudCwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gQ29udmVydC1OYW1lVG9TaWQgJ0RFVlxkZm0nCiM+CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgIFtBbGlhcygnTmFtZScpXQogICAgICAgICRPYmplY3ROYW1lLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4KICAgICkKCiAgICAkT2JqZWN0TmFtZSA9ICRPYmplY3ROYW1lIC1SZXBsYWNlICIvIiwiXCIKICAgIAogICAgaWYoJE9iamVjdE5hbWUuQ29udGFpbnMoIlwiKSkgewogICAgICAgICMgaWYgd2UgZ2V0IGEgRE9NQUlOXHVzZXIgZm9ybWF0LCBhdXRvIGNvbnZlcnQgaXQKICAgICAgICAkRG9tYWluID0gJE9iamVjdE5hbWUuU3BsaXQoIlwiKVswXQogICAgICAgICRPYmplY3ROYW1lID0gJE9iamVjdE5hbWUuU3BsaXQoIlwiKVsxXQogICAgfQogICAgZWxzZWlmKCEkRG9tYWluKSB7CiAgICAgICAgJERvbWFpbiA9IChHZXQtTmV0RG9tYWluKS5OYW1lCiAgICB9CgogICAgdHJ5IHsKICAgICAgICAkT2JqID0gKE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5OVEFjY291bnQoJERvbWFpbiwgJE9iamVjdE5hbWUpKQogICAgICAgICRTSUQgPSAkT2JqLlRyYW5zbGF0ZShbU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXJdKS5WYWx1ZQogICAgICAgIAogICAgICAgICRPdXQgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdPYmplY3ROYW1lJyAkT2JqZWN0TmFtZQogICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU0lEJyAkU0lECiAgICAgICAgJE91dAogICAgfQogICAgY2F0Y2ggewogICAgICAgIFdyaXRlLVZlcmJvc2UgIkludmFsaWQgb2JqZWN0L25hbWU6ICREb21haW5cJE9iamVjdE5hbWUiCiAgICAgICAgJE51bGwKICAgIH0KfQoKCmZpbHRlciBDb252ZXJ0LVNpZFRvTmFtZSB7CjwjCiAgICAuU1lOT1BTSVMKICAgIAogICAgICAgIENvbnZlcnRzIGEgc2VjdXJpdHkgaWRlbnRpZmllciAoU0lEKSB0byBhIGdyb3VwL3VzZXIgbmFtZS4KCiAgICAuUEFSQU1FVEVSIFNJRAogICAgCiAgICAgICAgVGhlIFNJRCB0byBjb252ZXJ0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gQ29udmVydC1TaWRUb05hbWUgUy0xLTUtMjEtMjYyMDg5MTgyOS0yNDExMjYxNDk3LTE3NzM4NTMwODgtMTEwNQojPgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbVmFsaWRhdGVQYXR0ZXJuKCdeUy0xLS4qJyldCiAgICAgICAgJFNJRAogICAgKQoKICAgIHRyeSB7CiAgICAgICAgJFNJRDIgPSAkU0lELnRyaW0oJyonKQoKICAgICAgICAjIHRyeSB0byByZXNvbHZlIGFueSBidWlsdC1pbiBTSURzIGZpcnN0CiAgICAgICAgIyAgIGZyb20gaHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20vZW4tdXMva2IvMjQzMzMwCiAgICAgICAgU3dpdGNoICgkU0lEMikKICAgICAgICB7CiAgICAgICAgICAgICdTLTEtMCcgICAgICAgICB7ICdOdWxsIEF1dGhvcml0eScgfQogICAgICAgICAgICAnUy0xLTAtMCcgICAgICAgeyAnTm9ib2R5JyB9CiAgICAgICAgICAgICdTLTEtMScgICAgICAgICB7ICdXb3JsZCBBdXRob3JpdHknIH0KICAgICAgICAgICAgJ1MtMS0xLTAnICAgICAgIHsgJ0V2ZXJ5b25lJyB9CiAgICAgICAgICAgICdTLTEtMicgICAgICAgICB7ICdMb2NhbCBBdXRob3JpdHknIH0KICAgICAgICAgICAgJ1MtMS0yLTAnICAgICAgIHsgJ0xvY2FsJyB9CiAgICAgICAgICAgICdTLTEtMi0xJyAgICAgICB7ICdDb25zb2xlIExvZ29uICcgfQogICAgICAgICAgICAnUy0xLTMnICAgICAgICAgeyAnQ3JlYXRvciBBdXRob3JpdHknIH0KICAgICAgICAgICAgJ1MtMS0zLTAnICAgICAgIHsgJ0NyZWF0b3IgT3duZXInIH0KICAgICAgICAgICAgJ1MtMS0zLTEnICAgICAgIHsgJ0NyZWF0b3IgR3JvdXAnIH0KICAgICAgICAgICAgJ1MtMS0zLTInICAgICAgIHsgJ0NyZWF0b3IgT3duZXIgU2VydmVyJyB9CiAgICAgICAgICAgICdTLTEtMy0zJyAgICAgICB7ICdDcmVhdG9yIEdyb3VwIFNlcnZlcicgfQogICAgICAgICAgICAnUy0xLTMtNCcgICAgICAgeyAnT3duZXIgUmlnaHRzJyB9CiAgICAgICAgICAgICdTLTEtNCcgICAgICAgICB7ICdOb24tdW5pcXVlIEF1dGhvcml0eScgfQogICAgICAgICAgICAnUy0xLTUnICAgICAgICAgeyAnTlQgQXV0aG9yaXR5JyB9CiAgICAgICAgICAgICdTLTEtNS0xJyAgICAgICB7ICdEaWFsdXAnIH0KICAgICAgICAgICAgJ1MtMS01LTInICAgICAgIHsgJ05ldHdvcmsnIH0KICAgICAgICAgICAgJ1MtMS01LTMnICAgICAgIHsgJ0JhdGNoJyB9CiAgICAgICAgICAgICdTLTEtNS00JyAgICAgICB7ICdJbnRlcmFjdGl2ZScgfQogICAgICAgICAgICAnUy0xLTUtNicgICAgICAgeyAnU2VydmljZScgfQogICAgICAgICAgICAnUy0xLTUtNycgICAgICAgeyAnQW5vbnltb3VzJyB9CiAgICAgICAgICAgICdTLTEtNS04JyAgICAgICB7ICdQcm94eScgfQogICAgICAgICAgICAnUy0xLTUtOScgICAgICAgeyAnRW50ZXJwcmlzZSBEb21haW4gQ29udHJvbGxlcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTEwJyAgICAgIHsgJ1ByaW5jaXBhbCBTZWxmJyB9CiAgICAgICAgICAgICdTLTEtNS0xMScgICAgICB7ICdBdXRoZW50aWNhdGVkIFVzZXJzJyB9CiAgICAgICAgICAgICdTLTEtNS0xMicgICAgICB7ICdSZXN0cmljdGVkIENvZGUnIH0KICAgICAgICAgICAgJ1MtMS01LTEzJyAgICAgIHsgJ1Rlcm1pbmFsIFNlcnZlciBVc2VycycgfQogICAgICAgICAgICAnUy0xLTUtMTQnICAgICAgeyAnUmVtb3RlIEludGVyYWN0aXZlIExvZ29uJyB9CiAgICAgICAgICAgICdTLTEtNS0xNScgICAgICB7ICdUaGlzIE9yZ2FuaXphdGlvbiAnIH0KICAgICAgICAgICAgJ1MtMS01LTE3JyAgICAgIHsgJ1RoaXMgT3JnYW5pemF0aW9uICcgfQogICAgICAgICAgICAnUy0xLTUtMTgnICAgICAgeyAnTG9jYWwgU3lzdGVtJyB9CiAgICAgICAgICAgICdTLTEtNS0xOScgICAgICB7ICdOVCBBdXRob3JpdHknIH0KICAgICAgICAgICAgJ1MtMS01LTIwJyAgICAgIHsgJ05UIEF1dGhvcml0eScgfQogICAgICAgICAgICAnUy0xLTUtODAtMCcgICAgeyAnQWxsIFNlcnZpY2VzICcgfQogICAgICAgICAgICAnUy0xLTUtMzItNTQ0JyAgeyAnQlVJTFRJTlxBZG1pbmlzdHJhdG9ycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTQ1JyAgeyAnQlVJTFRJTlxVc2VycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTQ2JyAgeyAnQlVJTFRJTlxHdWVzdHMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU0NycgIHsgJ0JVSUxUSU5cUG93ZXIgVXNlcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU0OCcgIHsgJ0JVSUxUSU5cQWNjb3VudCBPcGVyYXRvcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU0OScgIHsgJ0JVSUxUSU5cU2VydmVyIE9wZXJhdG9ycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTUwJyAgeyAnQlVJTFRJTlxQcmludCBPcGVyYXRvcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU1MScgIHsgJ0JVSUxUSU5cQmFja3VwIE9wZXJhdG9ycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTUyJyAgeyAnQlVJTFRJTlxSZXBsaWNhdG9ycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTU0JyAgeyAnQlVJTFRJTlxQcmUtV2luZG93cyAyMDAwIENvbXBhdGlibGUgQWNjZXNzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NTUnICB7ICdCVUlMVElOXFJlbW90ZSBEZXNrdG9wIFVzZXJzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NTYnICB7ICdCVUlMVElOXE5ldHdvcmsgQ29uZmlndXJhdGlvbiBPcGVyYXRvcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU1NycgIHsgJ0JVSUxUSU5cSW5jb21pbmcgRm9yZXN0IFRydXN0IEJ1aWxkZXJzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NTgnICB7ICdCVUlMVElOXFBlcmZvcm1hbmNlIE1vbml0b3IgVXNlcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU1OScgIHsgJ0JVSUxUSU5cUGVyZm9ybWFuY2UgTG9nIFVzZXJzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NjAnICB7ICdCVUlMVElOXFdpbmRvd3MgQXV0aG9yaXphdGlvbiBBY2Nlc3MgR3JvdXAnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU2MScgIHsgJ0JVSUxUSU5cVGVybWluYWwgU2VydmVyIExpY2Vuc2UgU2VydmVycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTYyJyAgeyAnQlVJTFRJTlxEaXN0cmlidXRlZCBDT00gVXNlcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU2OScgIHsgJ0JVSUxUSU5cQ3J5cHRvZ3JhcGhpYyBPcGVyYXRvcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU3MycgIHsgJ0JVSUxUSU5cRXZlbnQgTG9nIFJlYWRlcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU3NCcgIHsgJ0JVSUxUSU5cQ2VydGlmaWNhdGUgU2VydmljZSBEQ09NIEFjY2VzcycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTc1JyAgeyAnQlVJTFRJTlxSRFMgUmVtb3RlIEFjY2VzcyBTZXJ2ZXJzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NzYnICB7ICdCVUlMVElOXFJEUyBFbmRwb2ludCBTZXJ2ZXJzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NzcnICB7ICdCVUlMVElOXFJEUyBNYW5hZ2VtZW50IFNlcnZlcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU3OCcgIHsgJ0JVSUxUSU5cSHlwZXItViBBZG1pbmlzdHJhdG9ycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTc5JyAgeyAnQlVJTFRJTlxBY2Nlc3MgQ29udHJvbCBBc3Npc3RhbmNlIE9wZXJhdG9ycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTgwJyAgeyAnQlVJTFRJTlxBY2Nlc3MgQ29udHJvbCBBc3Npc3RhbmNlIE9wZXJhdG9ycycgfQogICAgICAgICAgICBEZWZhdWx0IHsgCiAgICAgICAgICAgICAgICAkT2JqID0gKE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXIoJFNJRDIpKQogICAgICAgICAgICAgICAgJE9iai5UcmFuc2xhdGUoIFtTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLk5UQWNjb3VudF0pLlZhbHVlCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBjYXRjaCB7CiAgICAgICAgV3JpdGUtRGVidWcgIkludmFsaWQgU0lEOiAkU0lEIgogICAgICAgICRTSUQKICAgIH0KfQoKCmZpbHRlciBDb252ZXJ0LUFETmFtZSB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgQ29udmVydHMgdXNlci9ncm91cCBuYW1lcyBmcm9tIE5UNCAoRE9NQUlOXHVzZXIpIG9yIGRvbWFpblNpbXBsZSAodXNlckBkb21haW4uY29tKQogICAgICAgIHRvIGNhbm9uaWNhbCBmb3JtYXQgKGRvbWFpbi5jb20vVXNlcnMvdXNlcikgb3IgTlQ0LgoKICAgICAgICBCYXNlZCBvbiBCaWxsIFN0ZXdhcnQncyBjb2RlIGZyb20gdGhpcyBhcnRpY2xlOiAKICAgICAgICAgICAgaHR0cDovL3dpbmRvd3NpdHByby5jb20vYWN0aXZlLWRpcmVjdG9yeS90cmFuc2xhdGluZy1hY3RpdmUtZGlyZWN0b3J5LW9iamVjdC1uYW1lcy1iZXR3ZWVuLWZvcm1hdHMKCiAgICAuUEFSQU1FVEVSIE9iamVjdE5hbWUKCiAgICAgICAgVGhlIHVzZXIvZ3JvdXAgbmFtZSB0byBjb252ZXJ0LgoKICAgIC5QQVJBTUVURVIgSW5wdXRUeXBlCgogICAgICAgIFRoZSBJbnB1dFR5cGUgb2YgdGhlIHVzZXIvZ3JvdXAgbmFtZSAoIk5UNCIsIlNpbXBsZSIsIkNhbm9uaWNhbCIpLgoKICAgIC5QQVJBTUVURVIgT3V0cHV0VHlwZQoKICAgICAgICBUaGUgT3V0cHV0VHlwZSBvZiB0aGUgdXNlci9ncm91cCBuYW1lICgiTlQ0IiwiU2ltcGxlIiwiQ2Fub25pY2FsIikuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBDb252ZXJ0LUFETmFtZSAtT2JqZWN0TmFtZSAiZGV2XGRmbSIKICAgICAgICAKICAgICAgICBSZXR1cm5zICJkZXYudGVzdGxhYi5sb2NhbC9Vc2Vycy9EYXZlIgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gQ29udmVydC1TaWRUb05hbWUgIlMtLi4uIiB8IENvbnZlcnQtQUROYW1lCiAgICAgICAgCiAgICAgICAgUmV0dXJucyB0aGUgY2Fub25pY2FsIG5hbWUgZm9yIHRoZSByZXNvbHZlZCBTSUQuCgogICAgLkxJTksKCiAgICAgICAgaHR0cDovL3dpbmRvd3NpdHByby5jb20vYWN0aXZlLWRpcmVjdG9yeS90cmFuc2xhdGluZy1hY3RpdmUtZGlyZWN0b3J5LW9iamVjdC1uYW1lcy1iZXR3ZWVuLWZvcm1hdHMKIz4KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE9iamVjdE5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlU2V0KCJOVDQiLCJTaW1wbGUiLCJDYW5vbmljYWwiKV0KICAgICAgICAkSW5wdXRUeXBlLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgIFtWYWxpZGF0ZVNldCgiTlQ0IiwiU2ltcGxlIiwiQ2Fub25pY2FsIildCiAgICAgICAgJE91dHB1dFR5cGUKICAgICkKCiAgICAkTmFtZVR5cGVzID0gQHsKICAgICAgICAiQ2Fub25pY2FsIiA9IDIKICAgICAgICAiTlQ0IiAgICAgICA9IDMKICAgICAgICAiU2ltcGxlIiAgICA9IDUKICAgIH0KCiAgICBpZighJFBTQm91bmRQYXJhbWV0ZXJzWydJbnB1dFR5cGUnXSkgewogICAgICAgIGlmKCAoJE9iamVjdE5hbWUuc3BsaXQoJy8nKSkuQ291bnQgLWVxIDIgKSB7CiAgICAgICAgICAgICRPYmplY3ROYW1lID0gJE9iamVjdE5hbWUucmVwbGFjZSgnLycsICdcJykKICAgICAgICB9CgogICAgICAgIGlmKCRPYmplY3ROYW1lIC1tYXRjaCAiXltBLVphLXpdK1xcW0EtWmEteiBdKyQiKSB7CiAgICAgICAgICAgICRJbnB1dFR5cGUgPSAnTlQ0JwogICAgICAgIH0KICAgICAgICBlbHNlaWYoJE9iamVjdE5hbWUgLW1hdGNoICJeW0EtWmEteiBdK0BbQS1aYS16XC5dKyIpIHsKICAgICAgICAgICAgJElucHV0VHlwZSA9ICdTaW1wbGUnCiAgICAgICAgfQogICAgICAgIGVsc2VpZigkT2JqZWN0TmFtZSAtbWF0Y2ggIl5bQS1aYS16XC5dKy9bQS1aYS16XSsvW0EtWmEtei8gXSsiKSB7CiAgICAgICAgICAgICRJbnB1dFR5cGUgPSAnQ2Fub25pY2FsJwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiQ2FuIG5vdCBpZGVudGlmeSBJblR5cGUgZm9yICRPYmplY3ROYW1lIgogICAgICAgICAgICByZXR1cm4gJE9iamVjdE5hbWUKICAgICAgICB9CiAgICB9CiAgICBlbHNlaWYoJElucHV0VHlwZSAtZXEgJ05UNCcpIHsKICAgICAgICAkT2JqZWN0TmFtZSA9ICRPYmplY3ROYW1lLnJlcGxhY2UoJy8nLCAnXCcpCiAgICB9CgogICAgaWYoISRQU0JvdW5kUGFyYW1ldGVyc1snT3V0cHV0VHlwZSddKSB7CiAgICAgICAgJE91dHB1dFR5cGUgPSBTd2l0Y2goJElucHV0VHlwZSkgewogICAgICAgICAgICAnTlQ0JyB7J0Nhbm9uaWNhbCd9CiAgICAgICAgICAgICdTaW1wbGUnIHsnTlQ0J30KICAgICAgICAgICAgJ0Nhbm9uaWNhbCcgeydOVDQnfQogICAgICAgIH0KICAgIH0KCiAgICAjIHRyeSB0byBleHRyYWN0IHRoZSBkb21haW4gZnJvbSB0aGUgZ2l2ZW4gZm9ybWF0CiAgICAkRG9tYWluID0gU3dpdGNoKCRJbnB1dFR5cGUpIHsKICAgICAgICAnTlQ0JyB7ICRPYmplY3ROYW1lLnNwbGl0KCJcIilbMF0gfQogICAgICAgICdTaW1wbGUnIHsgJE9iamVjdE5hbWUuc3BsaXQoIkAiKVsxXSB9CiAgICAgICAgJ0Nhbm9uaWNhbCcgeyAkT2JqZWN0TmFtZS5zcGxpdCgiLyIpWzBdIH0KICAgIH0KCiAgICAjIEFjY2Vzc29yIGZ1bmN0aW9ucyB0byBzaW1wbGlmeSBjYWxscyB0byBOYW1lVHJhbnNsYXRlCiAgICBmdW5jdGlvbiBJbnZva2UtTWV0aG9kKFtfX0NvbU9iamVjdF0gJE9iamVjdCwgW1N0cmluZ10gJE1ldGhvZCwgJFBhcmFtZXRlcnMpIHsKICAgICAgICAkT3V0cHV0ID0gJE9iamVjdC5HZXRUeXBlKCkuSW52b2tlTWVtYmVyKCRNZXRob2QsICJJbnZva2VNZXRob2QiLCAkTnVsbCwgJE9iamVjdCwgJFBhcmFtZXRlcnMpCiAgICAgICAgaWYgKCAkT3V0cHV0ICkgeyAkT3V0cHV0IH0KICAgIH0KICAgIGZ1bmN0aW9uIFNldC1Qcm9wZXJ0eShbX19Db21PYmplY3RdICRPYmplY3QsIFtTdHJpbmddICRQcm9wZXJ0eSwgJFBhcmFtZXRlcnMpIHsKICAgICAgICBbVm9pZF0gJE9iamVjdC5HZXRUeXBlKCkuSW52b2tlTWVtYmVyKCRQcm9wZXJ0eSwgIlNldFByb3BlcnR5IiwgJE51bGwsICRPYmplY3QsICRQYXJhbWV0ZXJzKQogICAgfQoKICAgICRUcmFuc2xhdGUgPSBOZXctT2JqZWN0IC1Db21PYmplY3QgTmFtZVRyYW5zbGF0ZQoKICAgIHRyeSB7CiAgICAgICAgSW52b2tlLU1ldGhvZCAkVHJhbnNsYXRlICJJbml0IiAoMSwgJERvbWFpbikKICAgIH0KICAgIGNhdGNoIFtTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLk1ldGhvZEludm9jYXRpb25FeGNlcHRpb25dIHsgCiAgICAgICAgV3JpdGUtRGVidWcgIkVycm9yIHdpdGggdHJhbnNsYXRlIGluaXQgaW4gQ29udmVydC1BRE5hbWU6ICRfIgogICAgfQoKICAgIFNldC1Qcm9wZXJ0eSAkVHJhbnNsYXRlICJDaGFzZVJlZmVycmFsIiAoMHg2MCkKCiAgICB0cnkgewogICAgICAgIEludm9rZS1NZXRob2QgJFRyYW5zbGF0ZSAiU2V0IiAoJE5hbWVUeXBlc1skSW5wdXRUeXBlXSwgJE9iamVjdE5hbWUpCiAgICAgICAgKEludm9rZS1NZXRob2QgJFRyYW5zbGF0ZSAiR2V0IiAoJE5hbWVUeXBlc1skT3V0cHV0VHlwZV0pKQogICAgfQogICAgY2F0Y2ggW1N5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uTWV0aG9kSW52b2NhdGlvbkV4Y2VwdGlvbl0gewogICAgICAgIFdyaXRlLURlYnVnICJFcnJvciB3aXRoIHRyYW5zbGF0ZSBTZXQvR2V0IGluIENvbnZlcnQtQUROYW1lOiAkXyIKICAgIH0KfQoKCmZ1bmN0aW9uIENvbnZlcnRGcm9tLVVBQ1ZhbHVlIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBDb252ZXJ0cyBhIFVBQyBpbnQgdmFsdWUgdG8gaHVtYW4gcmVhZGFibGUgZm9ybS4KCiAgICAuUEFSQU1FVEVSIFZhbHVlCgogICAgICAgIFRoZSBpbnQgVUFDIHZhbHVlIHRvIGNvbnZlcnQuCgogICAgLlBBUkFNRVRFUiBTaG93QWxsCgogICAgICAgIFNob3cgYWxsIFVBQyB2YWx1ZXMsIHdpdGggYSArIGluZGljYXRpbmcgdGhlIHZhbHVlIGlzIGN1cnJlbnRseSBzZXQuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBDb252ZXJ0RnJvbS1VQUNWYWx1ZSAtVmFsdWUgNjYxNzYKCiAgICAgICAgQ29udmVydCB0aGUgVUFDIHZhbHVlIDY2MTc2IHRvIGh1bWFuIHJlYWRhYmxlIGZvcm1hdC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRVc2VyIGphc29uIHwgc2VsZWN0IHVzZXJhY2NvdW50Y29udHJvbCB8IENvbnZlcnRGcm9tLVVBQ1ZhbHVlCgogICAgICAgIENvbnZlcnQgdGhlIFVBQyB2YWx1ZSBmb3IgJ2phc29uJyB0byBodW1hbiByZWFkYWJsZSBmb3JtYXQuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0VXNlciBqYXNvbiB8IHNlbGVjdCB1c2VyYWNjb3VudGNvbnRyb2wgfCBDb252ZXJ0RnJvbS1VQUNWYWx1ZSAtU2hvd0FsbAoKICAgICAgICBDb252ZXJ0IHRoZSBVQUMgdmFsdWUgZm9yICdqYXNvbicgdG8gaHVtYW4gcmVhZGFibGUgZm9ybWF0LCBzaG93aW5nIGFsbAogICAgICAgIHBvc3NpYmxlIFVBQyB2YWx1ZXMuCiM+CiAgICAKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgICRWYWx1ZSwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU2hvd0FsbAogICAgKQoKICAgIGJlZ2luIHsKICAgICAgICAjIHZhbHVlcyBmcm9tIGh0dHBzOi8vc3VwcG9ydC5taWNyb3NvZnQuY29tL2VuLXVzL2tiLzMwNTE0NAogICAgICAgICRVQUNWYWx1ZXMgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJTQ1JJUFQiLCAxKQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJBQ0NPVU5URElTQUJMRSIsIDIpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIkhPTUVESVJfUkVRVUlSRUQiLCA4KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJMT0NLT1VUIiwgMTYpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIlBBU1NXRF9OT1RSRVFEIiwgMzIpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIlBBU1NXRF9DQU5UX0NIQU5HRSIsIDY0KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJFTkNSWVBURURfVEVYVF9QV0RfQUxMT1dFRCIsIDEyOCkKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiVEVNUF9EVVBMSUNBVEVfQUNDT1VOVCIsIDI1NikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiTk9STUFMX0FDQ09VTlQiLCA1MTIpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIklOVEVSRE9NQUlOX1RSVVNUX0FDQ09VTlQiLCAyMDQ4KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJXT1JLU1RBVElPTl9UUlVTVF9BQ0NPVU5UIiwgNDA5NikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiU0VSVkVSX1RSVVNUX0FDQ09VTlQiLCA4MTkyKQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJET05UX0VYUElSRV9QQVNTV09SRCIsIDY1NTM2KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJNTlNfTE9HT05fQUNDT1VOVCIsIDEzMTA3MikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiU01BUlRDQVJEX1JFUVVJUkVEIiwgMjYyMTQ0KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJUUlVTVEVEX0ZPUl9ERUxFR0FUSU9OIiwgNTI0Mjg4KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJOT1RfREVMRUdBVEVEIiwgMTA0ODU3NikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiVVNFX0RFU19LRVlfT05MWSIsIDIwOTcxNTIpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIkRPTlRfUkVRX1BSRUFVVEgiLCA0MTk0MzA0KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJQQVNTV09SRF9FWFBJUkVEIiwgODM4ODYwOCkKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiVFJVU1RFRF9UT19BVVRIX0ZPUl9ERUxFR0FUSU9OIiwgMTY3NzcyMTYpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIlBBUlRJQUxfU0VDUkVUU19BQ0NPVU5UIiwgNjcxMDg4NjQpCiAgICB9CgogICAgcHJvY2VzcyB7CgogICAgICAgICRSZXN1bHRVQUNWYWx1ZXMgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQoKICAgICAgICBpZigkVmFsdWUgLWlzIFtJbnRdKSB7CiAgICAgICAgICAgICRJbnRWYWx1ZSA9ICRWYWx1ZQogICAgICAgIH0KICAgICAgICBlbHNlaWYgKCRWYWx1ZSAtaXMgW1BTQ3VzdG9tT2JqZWN0XSkgewogICAgICAgICAgICBpZigkVmFsdWUudXNlcmFjY291bnRjb250cm9sKSB7CiAgICAgICAgICAgICAgICAkSW50VmFsdWUgPSAkVmFsdWUudXNlcmFjY291bnRjb250cm9sCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkludmFsaWQgb2JqZWN0IGlucHV0IGZvciAtVmFsdWUgOiAkVmFsdWUiCiAgICAgICAgICAgIHJldHVybiAkTnVsbCAKICAgICAgICB9CgogICAgICAgIGlmKCRTaG93QWxsKSB7CiAgICAgICAgICAgIGZvcmVhY2ggKCRVQUNWYWx1ZSBpbiAkVUFDVmFsdWVzLkdldEVudW1lcmF0b3IoKSkgewogICAgICAgICAgICAgICAgaWYoICgkSW50VmFsdWUgLWJhbmQgJFVBQ1ZhbHVlLlZhbHVlKSAtZXEgJFVBQ1ZhbHVlLlZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgJFJlc3VsdFVBQ1ZhbHVlcy5BZGQoJFVBQ1ZhbHVlLk5hbWUsICIkKCRVQUNWYWx1ZS5WYWx1ZSkrIikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRSZXN1bHRVQUNWYWx1ZXMuQWRkKCRVQUNWYWx1ZS5OYW1lLCAiJCgkVUFDVmFsdWUuVmFsdWUpIikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgZm9yZWFjaCAoJFVBQ1ZhbHVlIGluICRVQUNWYWx1ZXMuR2V0RW51bWVyYXRvcigpKSB7CiAgICAgICAgICAgICAgICBpZiggKCRJbnRWYWx1ZSAtYmFuZCAkVUFDVmFsdWUuVmFsdWUpIC1lcSAkVUFDVmFsdWUuVmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAkUmVzdWx0VUFDVmFsdWVzLkFkZCgkVUFDVmFsdWUuTmFtZSwgIiQoJFVBQ1ZhbHVlLlZhbHVlKSIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgJFJlc3VsdFVBQ1ZhbHVlcwogICAgfQp9CgoKZmlsdGVyIEdldC1Qcm94eSB7CjwjCiAgICAuU1lOT1BTSVMKICAgIAogICAgICAgIEVudW1lcmF0ZXMgdGhlIHByb3h5IHNlcnZlciBhbmQgV1BBRCBjb25lbnRzIGZvciB0aGUgY3VycmVudCB1c2VyLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIFRoZSBjb21wdXRlcm5hbWUgdG8gZW51bWVyYXRlIHByb3h5IHNldHRpbmdzIG9uLCBkZWZhdWx0cyB0byBsb2NhbCBob3N0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LVByb3h5IAogICAgICAgIAogICAgICAgIFJldHVybnMgdGhlIGN1cnJlbnQgcHJveHkgc2V0dGluZ3MuCiM+CiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICRFTlY6Q09NUFVURVJOQU1FCiAgICApCgogICAgdHJ5IHsKICAgICAgICAkUmVnID0gW01pY3Jvc29mdC5XaW4zMi5SZWdpc3RyeUtleV06Ok9wZW5SZW1vdGVCYXNlS2V5KCdDdXJyZW50VXNlcicsICRDb21wdXRlck5hbWUpCiAgICAgICAgJFJlZ0tleSA9ICRSZWcuT3BlblN1YmtleSgiU09GVFdBUkVcXE1pY3Jvc29mdFxcV2luZG93c1xcQ3VycmVudFZlcnNpb25cXEludGVybmV0IFNldHRpbmdzIikKICAgICAgICAkUHJveHlTZXJ2ZXIgPSAkUmVnS2V5LkdldFZhbHVlKCdQcm94eVNlcnZlcicpCiAgICAgICAgJEF1dG9Db25maWdVUkwgPSAkUmVnS2V5LkdldFZhbHVlKCdBdXRvQ29uZmlnVVJMJykKCiAgICAgICAgJFdwYWQgPSAiIgogICAgICAgIGlmKCRBdXRvQ29uZmlnVVJMIC1hbmQgKCRBdXRvQ29uZmlnVVJMIC1uZSAiIikpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICRXcGFkID0gKE5ldy1PYmplY3QgTmV0LldlYmNsaWVudCkuRG93bmxvYWRTdHJpbmcoJEF1dG9Db25maWdVUkwpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiRXJyb3IgY29ubmVjdGluZyB0byBBdXRvQ29uZmlnVVJMIDogJEF1dG9Db25maWdVUkwiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYoJFByb3h5U2VydmVyIC1vciAkQXV0b0NvbmZpZ1VybCkgewoKICAgICAgICAgICAgJFByb3BlcnRpZXMgPSBAewogICAgICAgICAgICAgICAgJ1Byb3h5U2VydmVyJyA9ICRQcm94eVNlcnZlcgogICAgICAgICAgICAgICAgJ0F1dG9Db25maWdVUkwnID0gJEF1dG9Db25maWdVUkwKICAgICAgICAgICAgICAgICdXcGFkJyA9ICRXcGFkCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIE5ldy1PYmplY3QgLVR5cGVOYW1lIFBTT2JqZWN0IC1Qcm9wZXJ0eSAkUHJvcGVydGllcwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiTm8gcHJveHkgc2V0dGluZ3MgZm91bmQgZm9yICRDb21wdXRlck5hbWUiCiAgICAgICAgfQogICAgfQogICAgY2F0Y2ggewogICAgICAgIFdyaXRlLVdhcm5pbmcgIkVycm9yIGVudW1lcmF0aW5nIHByb3h5IHNldHRpbmdzIGZvciAkQ29tcHV0ZXJOYW1lIDogJF8iCiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtUGF0aEFjbCB7CjwjCiAgICAuU1lOT1BTSVMKICAgIAogICAgICAgIEVudW1lcmF0ZXMgdGhlIEFDTCBmb3IgYSBnaXZlbiBmaWxlIHBhdGguCgogICAgLlBBUkFNRVRFUiBQYXRoCgogICAgICAgIFRoZSBsb2NhbC9yZW1vdGUgcGF0aCB0byBlbnVtZXJhdGUgdGhlIEFDTHMgZm9yLgoKICAgIC5QQVJBTUVURVIgUmVjdXJzZQogICAgICAgIAogICAgICAgIElmIGFueSBBQ0wgcmVzdWx0cyBhcmUgZ3JvdXBzLCByZWN1cnNlIGFuZCByZXRyaWV2ZSB1c2VyIG1lbWJlcnNoaXAuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtUGF0aEFjbCAiXFxTRVJWRVJcU2hhcmVcIiAKICAgICAgICAKICAgICAgICBSZXR1cm5zIEFDTHMgZm9yIHRoZSBnaXZlbiBVTkMgc2hhcmUuCiM+CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRQYXRoLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZWN1cnNlCiAgICApCgogICAgYmVnaW4gewoKICAgICAgICBmdW5jdGlvbiBDb252ZXJ0LUZpbGVSaWdodCB7CgogICAgICAgICAgICAjIEZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yODAyOTg3Mi9yZXRyaWV2aW5nLXNlY3VyaXR5LWRlc2NyaXB0b3ItYW5kLWdldHRpbmctbnVtYmVyLWZvci1maWxlc3lzdGVtcmlnaHRzCgogICAgICAgICAgICBbQ21kbGV0QmluZGluZygpXQogICAgICAgICAgICBwYXJhbSgKICAgICAgICAgICAgICAgIFtJbnRdCiAgICAgICAgICAgICAgICAkRlNSCiAgICAgICAgICAgICkKCiAgICAgICAgICAgICRBY2Nlc3NNYXNrID0gQHsKICAgICAgICAgICAgICBbdWludDMyXScweDgwMDAwMDAwJyA9ICdHZW5lcmljUmVhZCcKICAgICAgICAgICAgICBbdWludDMyXScweDQwMDAwMDAwJyA9ICdHZW5lcmljV3JpdGUnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgyMDAwMDAwMCcgPSAnR2VuZXJpY0V4ZWN1dGUnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgxMDAwMDAwMCcgPSAnR2VuZXJpY0FsbCcKICAgICAgICAgICAgICBbdWludDMyXScweDAyMDAwMDAwJyA9ICdNYXhpbXVtQWxsb3dlZCcKICAgICAgICAgICAgICBbdWludDMyXScweDAxMDAwMDAwJyA9ICdBY2Nlc3NTeXN0ZW1TZWN1cml0eScKICAgICAgICAgICAgICBbdWludDMyXScweDAwMTAwMDAwJyA9ICdTeW5jaHJvbml6ZScKICAgICAgICAgICAgICBbdWludDMyXScweDAwMDgwMDAwJyA9ICdXcml0ZU93bmVyJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwNDAwMDAnID0gJ1dyaXRlREFDJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMjAwMDAnID0gJ1JlYWRDb250cm9sJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMTAwMDAnID0gJ0RlbGV0ZScKICAgICAgICAgICAgICBbdWludDMyXScweDAwMDAwMTAwJyA9ICdXcml0ZUF0dHJpYnV0ZXMnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDA4MCcgPSAnUmVhZEF0dHJpYnV0ZXMnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDA0MCcgPSAnRGVsZXRlQ2hpbGQnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDAyMCcgPSAnRXhlY3V0ZS9UcmF2ZXJzZScKICAgICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDEwJyA9ICdXcml0ZUV4dGVuZGVkQXR0cmlidXRlcycKICAgICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDA4JyA9ICdSZWFkRXh0ZW5kZWRBdHRyaWJ1dGVzJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMDQnID0gJ0FwcGVuZERhdGEvQWRkU3ViZGlyZWN0b3J5JwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMDInID0gJ1dyaXRlRGF0YS9BZGRGaWxlJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMDEnID0gJ1JlYWREYXRhL0xpc3REaXJlY3RvcnknCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRTaW1wbGVQZXJtaXNzaW9ucyA9IEB7CiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgxZjAxZmYnID0gJ0Z1bGxDb250cm9sJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDMwMWJmJyA9ICdNb2RpZnknCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMjAwYTknID0gJ1JlYWRBbmRFeGVjdXRlJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDIwMTlmJyA9ICdSZWFkQW5kV3JpdGUnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMjAwODknID0gJ1JlYWQnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAxMTYnID0gJ1dyaXRlJwogICAgICAgICAgICB9CgogICAgICAgICAgICAkUGVybWlzc2lvbnMgPSBAKCkKCiAgICAgICAgICAgICMgZ2V0IHNpbXBsZSBwZXJtaXNzaW9uCiAgICAgICAgICAgICRQZXJtaXNzaW9ucyArPSAkU2ltcGxlUGVybWlzc2lvbnMuS2V5cyB8ICAlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCgkRlNSIC1iYW5kICRfKSAtZXEgJF8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU2ltcGxlUGVybWlzc2lvbnNbJF9dCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZTUiA9ICRGU1IgLWJhbmQgKC1ub3QgJF8pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgZ2V0IHJlbWFpbmluZyBleHRlbmRlZCBwZXJtaXNzaW9ucwogICAgICAgICAgICAkUGVybWlzc2lvbnMgKz0gJEFjY2Vzc01hc2suS2V5cyB8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHsgJEZTUiAtYmFuZCAkXyB9IHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICUgeyAkQWNjZXNzTWFza1skX10gfQoKICAgICAgICAgICAgKCRQZXJtaXNzaW9ucyB8ID97JF99KSAtam9pbiAiLCIKICAgICAgICB9CiAgICB9CgogICAgcHJvY2VzcyB7CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgICRBQ0wgPSBHZXQtQWNsIC1QYXRoICRQYXRoCgogICAgICAgICAgICAkQUNMLkdldEFjY2Vzc1J1bGVzKCR0cnVlLCR0cnVlLFtTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllcl0pIHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICAgICAgICAgICROYW1lcyA9IEAoKQogICAgICAgICAgICAgICAgaWYgKCRfLklkZW50aXR5UmVmZXJlbmNlIC1tYXRjaCAnXlMtMS01LTIxLVswLTldKy1bMC05XSstWzAtOV0rLVswLTldKycpIHsKICAgICAgICAgICAgICAgICAgICAkT2JqZWN0ID0gR2V0LUFET2JqZWN0IC1TSUQgJF8uSWRlbnRpdHlSZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAkTmFtZXMgPSBAKCkKICAgICAgICAgICAgICAgICAgICAkU0lEcyA9IEAoJE9iamVjdC5vYmplY3RzaWQpCgogICAgICAgICAgICAgICAgICAgIGlmICgkUmVjdXJzZSAtYW5kIChAKCcyNjg0MzU0NTYnLCcyNjg0MzU0NTcnLCc1MzY4NzA5MTInLCc1MzY4NzA5MTMnKSAtY29udGFpbnMgJE9iamVjdC5zYW1BY2NvdW50VHlwZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNJRHMgKz0gR2V0LU5ldEdyb3VwTWVtYmVyIC1TSUQgJE9iamVjdC5vYmplY3RzaWQgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBNZW1iZXJTaWQKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICRTSURzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAkTmFtZXMgKz0gLEAoJF8sIChDb252ZXJ0LVNpZFRvTmFtZSAkXykpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJE5hbWVzICs9ICxAKCRfLklkZW50aXR5UmVmZXJlbmNlLlZhbHVlLCAoQ29udmVydC1TaWRUb05hbWUgJF8uSWRlbnRpdHlSZWZlcmVuY2UuVmFsdWUpKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIEZvckVhY2goJE5hbWUgaW4gJE5hbWVzKSB7CiAgICAgICAgICAgICAgICAgICAgJE91dCA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1BhdGgnICRQYXRoCiAgICAgICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdGaWxlU3lzdGVtUmlnaHRzJyAoQ29udmVydC1GaWxlUmlnaHQgLUZTUiAkXy5GaWxlU3lzdGVtUmlnaHRzLnZhbHVlX18pCiAgICAgICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJZGVudGl0eVJlZmVyZW5jZScgJE5hbWVbMV0KICAgICAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lkZW50aXR5U0lEJyAkTmFtZVswXQogICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQWNjZXNzQ29udHJvbFR5cGUnICRfLkFjY2Vzc0NvbnRyb2xUeXBlCiAgICAgICAgICAgICAgICAgICAgJE91dAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtV2FybmluZyAkXwogICAgICAgIH0KICAgIH0KfQoKCmZpbHRlciBHZXQtTmFtZUZpZWxkIHsKPCMKICAgIC5TWU5PUFNJUwogICAgCiAgICAgICAgSGVscGVyIHRoYXQgYXR0ZW1wdHMgdG8gZXh0cmFjdCBhcHByb3ByaWF0ZSBmaWVsZCBuYW1lcyBmcm9tCiAgICAgICAgcGFzc2VkIGNvbXB1dGVyIG9iamVjdHMuCgogICAgLlBBUkFNRVRFUiBPYmplY3QKCiAgICAgICAgVGhlIHBhc3NlZCBvYmplY3QgdG8gZXh0cmFjdCBuYW1lIGZpZWxkcyBmcm9tLgoKICAgIC5QQVJBTUVURVIgRG5zSG9zdE5hbWUKICAgICAgICAKICAgICAgICBBIERuc0hvc3ROYW1lIHRvIGV4dHJhY3QgdGhyb3VnaCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lLgoKICAgIC5QQVJBTUVURVIgTmFtZQogICAgICAgIAogICAgICAgIEEgTmFtZSB0byBleHRyYWN0IHRocm91Z2ggVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZS4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRDb21wdXRlciAtRnVsbERhdGEgfCBHZXQtTmFtZUZpZWxkCiM+CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtPYmplY3RdCiAgICAgICAgJE9iamVjdCwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERuc0hvc3ROYW1lLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTmFtZQogICAgKQoKICAgIGlmKCRQU0JvdW5kUGFyYW1ldGVyc1snRG5zSG9zdE5hbWUnXSkgewogICAgICAgICREbnNIb3N0TmFtZQogICAgfQogICAgZWxzZWlmKCRQU0JvdW5kUGFyYW1ldGVyc1snTmFtZSddKSB7CiAgICAgICAgJE5hbWUKICAgIH0KICAgIGVsc2VpZigkT2JqZWN0KSB7CiAgICAgICAgaWYgKCBbYm9vbF0oJE9iamVjdC5QU29iamVjdC5Qcm9wZXJ0aWVzLm5hbWUgLW1hdGNoICJkbnNob3N0bmFtZSIpICkgewogICAgICAgICAgICAjIG9iamVjdHMgZnJvbSBHZXQtTmV0Q29tcHV0ZXIKICAgICAgICAgICAgJE9iamVjdC5kbnNob3N0bmFtZQogICAgICAgIH0KICAgICAgICBlbHNlaWYgKCBbYm9vbF0oJE9iamVjdC5QU29iamVjdC5Qcm9wZXJ0aWVzLm5hbWUgLW1hdGNoICJuYW1lIikgKSB7CiAgICAgICAgICAgICMgb2JqZWN0cyBmcm9tIEdldC1OZXREb21haW5Db250cm9sbGVyCiAgICAgICAgICAgICRPYmplY3QubmFtZQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgIyBzdHJpbmdzIGFuZCBjYXRjaCBhbGxzCiAgICAgICAgICAgICRPYmplY3QKICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICByZXR1cm4gJE51bGwKICAgIH0KfQoKCmZ1bmN0aW9uIENvbnZlcnQtTERBUFByb3BlcnR5IHsKPCMKICAgIC5TWU5PUFNJUwogICAgCiAgICAgICAgSGVscGVyIHRoYXQgY29udmVydHMgc3BlY2lmaWMgTERBUCBwcm9wZXJ0eSByZXN1bHQgZmllbGRzLgogICAgICAgIFVzZWQgYnkgc2V2ZXJhbCBvZiB0aGUgR2V0LU5ldCogZnVuY3Rpb24uCgogICAgLlBBUkFNRVRFUiBQcm9wZXJ0aWVzCgogICAgICAgIFByb3BlcnRpZXMgb2JqZWN0IHRvIGV4dHJhY3Qgb3V0IExEQVAgZmllbGRzIGZvciBkaXNwbGF5LgojPgogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgICRQcm9wZXJ0aWVzCiAgICApCgogICAgJE9iamVjdFByb3BlcnRpZXMgPSBAe30KCiAgICAkUHJvcGVydGllcy5Qcm9wZXJ0eU5hbWVzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgIGlmICgoJF8gLWVxICJvYmplY3RzaWQiKSAtb3IgKCRfIC1lcSAic2lkaGlzdG9yeSIpKSB7CiAgICAgICAgICAgICMgY29udmVydCB0aGUgU0lEIHRvIGEgc3RyaW5nCiAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9IChOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyKCRQcm9wZXJ0aWVzWyRfXVswXSwwKSkuVmFsdWUKICAgICAgICB9CiAgICAgICAgZWxzZWlmKCRfIC1lcSAib2JqZWN0Z3VpZCIpIHsKICAgICAgICAgICAgIyBjb252ZXJ0IHRoZSBHVUlEIHRvIGEgc3RyaW5nCiAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9IChOZXctT2JqZWN0IEd1aWQgKCwkUHJvcGVydGllc1skX11bMF0pKS5HdWlkCiAgICAgICAgfQogICAgICAgIGVsc2VpZiggKCRfIC1lcSAibGFzdGxvZ29uIikgLW9yICgkXyAtZXEgImxhc3Rsb2dvbnRpbWVzdGFtcCIpIC1vciAoJF8gLWVxICJwd2RsYXN0c2V0IikgLW9yICgkXyAtZXEgImxhc3Rsb2dvZmYiKSAtb3IgKCRfIC1lcSAiYmFkUGFzc3dvcmRUaW1lIikgKSB7CiAgICAgICAgICAgICMgY29udmVydCB0aW1lc3RhbXBzCiAgICAgICAgICAgIGlmICgkUHJvcGVydGllc1skX11bMF0gLWlzIFtTeXN0ZW0uTWFyc2hhbEJ5UmVmT2JqZWN0XSkgewogICAgICAgICAgICAgICAgIyBpZiB3ZSBoYXZlIGEgU3lzdGVtLl9fQ29tT2JqZWN0CiAgICAgICAgICAgICAgICAkVGVtcCA9ICRQcm9wZXJ0aWVzWyRfXVswXQogICAgICAgICAgICAgICAgW0ludDMyXSRIaWdoID0gJFRlbXAuR2V0VHlwZSgpLkludm9rZU1lbWJlcigiSGlnaFBhcnQiLCBbU3lzdGVtLlJlZmxlY3Rpb24uQmluZGluZ0ZsYWdzXTo6R2V0UHJvcGVydHksICRudWxsLCAkVGVtcCwgJG51bGwpCiAgICAgICAgICAgICAgICBbSW50MzJdJExvdyAgPSAkVGVtcC5HZXRUeXBlKCkuSW52b2tlTWVtYmVyKCJMb3dQYXJ0IiwgIFtTeXN0ZW0uUmVmbGVjdGlvbi5CaW5kaW5nRmxhZ3NdOjpHZXRQcm9wZXJ0eSwgJG51bGwsICRUZW1wLCAkbnVsbCkKICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9IChbZGF0ZXRpbWVdOjpGcm9tRmlsZVRpbWUoW0ludDY0XSgiMHh7MDp4OH17MTp4OH0iIC1mICRIaWdoLCAkTG93KSkpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkT2JqZWN0UHJvcGVydGllc1skX10gPSAoW2RhdGV0aW1lXTo6RnJvbUZpbGVUaW1lKCgkUHJvcGVydGllc1skX11bMF0pKSkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlaWYoJFByb3BlcnRpZXNbJF9dWzBdIC1pcyBbU3lzdGVtLk1hcnNoYWxCeVJlZk9iamVjdF0pIHsKICAgICAgICAgICAgIyB0cnkgdG8gY29udmVydCBtaXNjIGNvbSBvYmplY3RzCiAgICAgICAgICAgICRQcm9wID0gJFByb3BlcnRpZXNbJF9dCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkVGVtcCA9ICRQcm9wWyRfXVswXQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAkXwogICAgICAgICAgICAgICAgW0ludDMyXSRIaWdoID0gJFRlbXAuR2V0VHlwZSgpLkludm9rZU1lbWJlcigiSGlnaFBhcnQiLCBbU3lzdGVtLlJlZmxlY3Rpb24uQmluZGluZ0ZsYWdzXTo6R2V0UHJvcGVydHksICRudWxsLCAkVGVtcCwgJG51bGwpCiAgICAgICAgICAgICAgICBbSW50MzJdJExvdyAgPSAkVGVtcC5HZXRUeXBlKCkuSW52b2tlTWVtYmVyKCJMb3dQYXJ0IiwgIFtTeXN0ZW0uUmVmbGVjdGlvbi5CaW5kaW5nRmxhZ3NdOjpHZXRQcm9wZXJ0eSwgJG51bGwsICRUZW1wLCAkbnVsbCkKICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9IFtJbnQ2NF0oIjB4ezA6eDh9ezE6eDh9IiAtZiAkSGlnaCwgJExvdykKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAkT2JqZWN0UHJvcGVydGllc1skX10gPSAkUHJvcFskX10KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlaWYoJFByb3BlcnRpZXNbJF9dLmNvdW50IC1lcSAxKSB7CiAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9ICRQcm9wZXJ0aWVzWyRfXVswXQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJE9iamVjdFByb3BlcnRpZXNbJF9dID0gJFByb3BlcnRpZXNbJF9dCiAgICAgICAgfQogICAgfQoKICAgIE5ldy1PYmplY3QgLVR5cGVOYW1lIFBTT2JqZWN0IC1Qcm9wZXJ0eSAkT2JqZWN0UHJvcGVydGllcwp9CgoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMKIyBEb21haW4gaW5mbyBmdW5jdGlvbnMgYmVsb3cuCiMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCmZpbHRlciBHZXQtRG9tYWluU2VhcmNoZXIgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEhlbHBlciB1c2VkIGJ5IHZhcmlvdXMgZnVuY3Rpb25zIHRoYXQgdGFrZXMgYW4gQURTcGF0aCBhbmQKICAgICAgICBkb21haW4gc3BlY2lmaWVyIGFuZCBidWlsZHMgdGhlIGNvcnJlY3QgQURTSSBzZWFyY2hlciBvYmplY3QuCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byB1c2UgZm9yIHRoZSBxdWVyeSwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgQURTcGF0aAoKICAgICAgICBUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBBRFNwcmVmaXgKCiAgICAgICAgUHJlZml4IHRvIHNldCBmb3IgdGhlIHNlYXJjaGVyIChsaWtlICJDTj1TaXRlcyxDTj1Db25maWd1cmF0aW9uIikKCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gdGVzdGxhYi5sb2NhbAoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gdGVzdGxhYi5sb2NhbCAtRG9tYWluQ29udHJvbGxlciBTRUNPTkRBUlkuZGV2LnRlc3RsYWIubG9jYWwKIz4KCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3ByZWZpeCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgIGlmKCEkQ3JlZGVudGlhbCkgewogICAgICAgIGlmKCEkRG9tYWluKXsKICAgICAgICAgICAgJERvbWFpbiA9IChHZXQtTmV0RG9tYWluKS5uYW1lCiAgICAgICAgfQogICAgICAgIGVsc2VpZighJERvbWFpbkNvbnRyb2xsZXIpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICMgaWYgdGhlcmUncyBubyAtRG9tYWluQ29udHJvbGxlciBzcGVjaWZpZWQsIHRyeSB0byBwdWxsIHRoZSBwcmltYXJ5IERDCiAgICAgICAgICAgICAgICAjICAgdG8gcmVmbGVjdCBxdWVyaWVzIHRocm91Z2gKICAgICAgICAgICAgICAgICREb21haW5Db250cm9sbGVyID0gKChHZXQtTmV0RG9tYWluKS5QZGNSb2xlT3duZXIpLk5hbWUKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICB0aHJvdyAiR2V0LURvbWFpblNlYXJjaGVyOiBFcnJvciBpbiByZXRyaWV2aW5nIFBEQyBmb3IgY3VycmVudCBkb21haW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBlbHNlaWYgKCEkRG9tYWluQ29udHJvbGxlcikgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgICREb21haW5Db250cm9sbGVyID0gKChHZXQtTmV0RG9tYWluIC1DcmVkZW50aWFsICRDcmVkZW50aWFsKS5QZGNSb2xlT3duZXIpLk5hbWUKICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICB0aHJvdyAiR2V0LURvbWFpblNlYXJjaGVyOiBFcnJvciBpbiByZXRyaWV2aW5nIFBEQyBmb3IgY3VycmVudCBkb21haW4iCiAgICAgICAgfQoKICAgICAgICBpZighJERvbWFpbkNvbnRyb2xsZXIpIHsKICAgICAgICAgICAgdGhyb3cgIkdldC1Eb21haW5TZWFyY2hlcjogRXJyb3IgaW4gcmV0cmlldmluZyBQREMgZm9yIGN1cnJlbnQgZG9tYWluIgogICAgICAgIH0KICAgIH0KCiAgICAkU2VhcmNoU3RyaW5nID0gIkxEQVA6Ly8iCgogICAgaWYoJERvbWFpbkNvbnRyb2xsZXIpIHsKICAgICAgICAkU2VhcmNoU3RyaW5nICs9ICREb21haW5Db250cm9sbGVyCiAgICAgICAgaWYoJERvbWFpbil7CiAgICAgICAgICAgICRTZWFyY2hTdHJpbmcgKz0gIi8iCiAgICAgICAgfQogICAgfQoKICAgIGlmKCRBRFNwcmVmaXgpIHsKICAgICAgICAkU2VhcmNoU3RyaW5nICs9ICRBRFNwcmVmaXggKyAiLCIKICAgIH0KCiAgICBpZigkQURTcGF0aCkgewogICAgICAgIGlmKCRBRFNwYXRoIC1saWtlICJHQzovLyoiKSB7CiAgICAgICAgICAgICMgaWYgd2UncmUgc2VhcmNoaW5nIHRoZSBnbG9iYWwgY2F0YWxvZwogICAgICAgICAgICAkRE4gPSAkQWRzUGF0aAogICAgICAgICAgICAkU2VhcmNoU3RyaW5nID0gIiIKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGlmKCRBRFNwYXRoIC1saWtlICJMREFQOi8vKiIpIHsKICAgICAgICAgICAgICAgIGlmKCRBRFNwYXRoIC1tYXRjaCAiTERBUDovLy4rLy4rIikgewogICAgICAgICAgICAgICAgICAgICRTZWFyY2hTdHJpbmcgPSAiIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJEFEU3BhdGggPSAkQURTcGF0aC5TdWJzdHJpbmcoNykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAkRE4gPSAkQURTcGF0aAogICAgICAgIH0KICAgIH0KICAgIGVsc2UgewogICAgICAgIGlmKCREb21haW4gLWFuZCAoJERvbWFpbi5UcmltKCkgLW5lICIiKSkgewogICAgICAgICAgICAkRE4gPSAiREM9JCgkRG9tYWluLlJlcGxhY2UoJy4nLCAnLERDPScpKSIKICAgICAgICB9CiAgICB9CgogICAgJFNlYXJjaFN0cmluZyArPSAkRE4KICAgIFdyaXRlLVZlcmJvc2UgIkdldC1Eb21haW5TZWFyY2hlciBzZWFyY2ggc3RyaW5nOiAkU2VhcmNoU3RyaW5nIgoKICAgIGlmKCRDcmVkZW50aWFsKSB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiVXNpbmcgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzIGZvciBMREFQIGNvbm5lY3Rpb24iCiAgICAgICAgJERvbWFpbk9iamVjdCA9IE5ldy1PYmplY3QgRGlyZWN0b3J5U2VydmljZXMuRGlyZWN0b3J5RW50cnkoJFNlYXJjaFN0cmluZywgJENyZWRlbnRpYWwuVXNlck5hbWUsICRDcmVkZW50aWFsLkdldE5ldHdvcmtDcmVkZW50aWFsKCkuUGFzc3dvcmQpCiAgICAgICAgJFNlYXJjaGVyID0gTmV3LU9iamVjdCBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuRGlyZWN0b3J5U2VhcmNoZXIoJERvbWFpbk9iamVjdCkKICAgIH0KICAgIGVsc2UgewogICAgICAgICRTZWFyY2hlciA9IE5ldy1PYmplY3QgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkRpcmVjdG9yeVNlYXJjaGVyKFtBRFNJXSRTZWFyY2hTdHJpbmcpCiAgICB9CgogICAgJFNlYXJjaGVyLlBhZ2VTaXplID0gJFBhZ2VTaXplCiAgICAkU2VhcmNoZXIKfQoKCmZpbHRlciBHZXQtTmV0RG9tYWluIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBSZXR1cm5zIGEgZ2l2ZW4gZG9tYWluIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBUaGUgZG9tYWluIG5hbWUgdG8gcXVlcnkgZm9yLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXREb21haW4gLURvbWFpbiB0ZXN0bGFiLmxvY2FsCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiAidGVzdGxhYi5sb2NhbCIgfCBHZXQtTmV0RG9tYWluCgogICAgLkxJTksKCiAgICAgICAgaHR0cDovL3NvY2lhbC50ZWNobmV0Lm1pY3Jvc29mdC5jb20vRm9ydW1zL3NjcmlwdGNlbnRlci9lbi1VUy8wYzViM2Y4My1lNTI4LTRkNDktOTJhNC1kZWUzMWY0YjQ4MWMvZmluZGluZy10aGUtZG4tb2YtdGhlLXRoZS1kb21haW4td2l0aG91dC1hZG1vZHVsZS1pbi1wb3dlcnNoZWxsP2ZvcnVtPUlUQ0cKIz4KCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCgogICAgaWYoJENyZWRlbnRpYWwpIHsKICAgICAgICAKICAgICAgICBXcml0ZS1WZXJib3NlICJVc2luZyBhbHRlcm5hdGUgY3JlZGVudGlhbHMgZm9yIEdldC1OZXREb21haW4iCgogICAgICAgIGlmKCEkRG9tYWluKSB7CiAgICAgICAgICAgICMgaWYgbm8gZG9tYWluIGlzIHN1cHBsaWVkLCBleHRyYWN0IHRoZSBsb2dvbiBkb21haW4gZnJvbSB0aGUgUFNDcmVkZW50aWFsIHBhc3NlZAogICAgICAgICAgICAkRG9tYWluID0gJENyZWRlbnRpYWwuR2V0TmV0d29ya0NyZWRlbnRpYWwoKS5Eb21haW4KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXh0cmFjdGVkIGRvbWFpbiAnJERvbWFpbicgZnJvbSAtQ3JlZGVudGlhbCIKICAgICAgICB9CiAgIAogICAgICAgICREb21haW5Db250ZXh0ID0gTmV3LU9iamVjdCBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkRpcmVjdG9yeUNvbnRleHQoJ0RvbWFpbicsICREb21haW4sICRDcmVkZW50aWFsLlVzZXJOYW1lLCAkQ3JlZGVudGlhbC5HZXROZXR3b3JrQ3JlZGVudGlhbCgpLlBhc3N3b3JkKQogICAgICAgIAogICAgICAgIHRyeSB7CiAgICAgICAgICAgIFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkRvbWFpbl06OkdldERvbWFpbigkRG9tYWluQ29udGV4dCkKICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJUaGUgc3BlY2lmaWVkIGRvbWFpbiBkb2VzICckRG9tYWluJyBub3QgZXhpc3QsIGNvdWxkIG5vdCBiZSBjb250YWN0ZWQsIHRoZXJlIGlzbid0IGFuIGV4aXN0aW5nIHRydXN0LCBvciB0aGUgc3BlY2lmaWVkIGNyZWRlbnRpYWxzIGFyZSBpbnZhbGlkLiIKICAgICAgICAgICAgJE51bGwKICAgICAgICB9CiAgICB9CiAgICBlbHNlaWYoJERvbWFpbikgewogICAgICAgICREb21haW5Db250ZXh0ID0gTmV3LU9iamVjdCBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkRpcmVjdG9yeUNvbnRleHQoJ0RvbWFpbicsICREb21haW4pCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRG9tYWluXTo6R2V0RG9tYWluKCREb21haW5Db250ZXh0KQogICAgICAgIH0KICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIlRoZSBzcGVjaWZpZWQgZG9tYWluICckRG9tYWluJyBkb2VzIG5vdCBleGlzdCwgY291bGQgbm90IGJlIGNvbnRhY3RlZCwgb3IgdGhlcmUgaXNuJ3QgYW4gZXhpc3RpbmcgdHJ1c3QuIgogICAgICAgICAgICAkTnVsbAogICAgICAgIH0KICAgIH0KICAgIGVsc2UgewogICAgICAgIFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkRvbWFpbl06OkdldEN1cnJlbnREb21haW4oKQogICAgfQp9CgoKZmlsdGVyIEdldC1OZXRGb3Jlc3Qgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFJldHVybnMgYSBnaXZlbiBmb3Jlc3Qgb2JqZWN0LgoKICAgIC5QQVJBTUVURVIgRm9yZXN0CgogICAgICAgIFRoZSBmb3Jlc3QgbmFtZSB0byBxdWVyeSBmb3IsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCiAgICAKICAgICAgICBQUyBDOlw+IEdldC1OZXRGb3Jlc3QgLUZvcmVzdCBleHRlcm5hbC5kb21haW4KCiAgICAuRVhBTVBMRQogICAgCiAgICAgICAgUFMgQzpcPiAiZXh0ZXJuYWwuZG9tYWluIiB8IEdldC1OZXRGb3Jlc3QKIz4KCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRGb3Jlc3QsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCgogICAgaWYoJENyZWRlbnRpYWwpIHsKICAgICAgICAKICAgICAgICBXcml0ZS1WZXJib3NlICJVc2luZyBhbHRlcm5hdGUgY3JlZGVudGlhbHMgZm9yIEdldC1OZXRGb3Jlc3QiCgogICAgICAgIGlmKCEkRm9yZXN0KSB7CiAgICAgICAgICAgICMgaWYgbm8gZG9tYWluIGlzIHN1cHBsaWVkLCBleHRyYWN0IHRoZSBsb2dvbiBkb21haW4gZnJvbSB0aGUgUFNDcmVkZW50aWFsIHBhc3NlZAogICAgICAgICAgICAkRm9yZXN0ID0gJENyZWRlbnRpYWwuR2V0TmV0d29ya0NyZWRlbnRpYWwoKS5Eb21haW4KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXh0cmFjdGVkIGRvbWFpbiAnJEZvcmVzdCcgZnJvbSAtQ3JlZGVudGlhbCIKICAgICAgICB9CiAgIAogICAgICAgICRGb3Jlc3RDb250ZXh0ID0gTmV3LU9iamVjdCBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkRpcmVjdG9yeUNvbnRleHQoJ0ZvcmVzdCcsICRGb3Jlc3QsICRDcmVkZW50aWFsLlVzZXJOYW1lLCAkQ3JlZGVudGlhbC5HZXROZXR3b3JrQ3JlZGVudGlhbCgpLlBhc3N3b3JkKQogICAgICAgIAogICAgICAgIHRyeSB7CiAgICAgICAgICAgICRGb3Jlc3RPYmplY3QgPSBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5Gb3Jlc3RdOjpHZXRGb3Jlc3QoJEZvcmVzdENvbnRleHQpCiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiVGhlIHNwZWNpZmllZCBmb3Jlc3QgJyRGb3Jlc3QnIGRvZXMgbm90IGV4aXN0LCBjb3VsZCBub3QgYmUgY29udGFjdGVkLCB0aGVyZSBpc24ndCBhbiBleGlzdGluZyB0cnVzdCwgb3IgdGhlIHNwZWNpZmllZCBjcmVkZW50aWFscyBhcmUgaW52YWxpZC4iCiAgICAgICAgICAgICROdWxsCiAgICAgICAgfQogICAgfQogICAgZWxzZWlmKCRGb3Jlc3QpIHsKICAgICAgICAkRm9yZXN0Q29udGV4dCA9IE5ldy1PYmplY3QgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5EaXJlY3RvcnlDb250ZXh0KCdGb3Jlc3QnLCAkRm9yZXN0KQogICAgICAgIHRyeSB7CiAgICAgICAgICAgICRGb3Jlc3RPYmplY3QgPSBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5Gb3Jlc3RdOjpHZXRGb3Jlc3QoJEZvcmVzdENvbnRleHQpCiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiVGhlIHNwZWNpZmllZCBmb3Jlc3QgJyRGb3Jlc3QnIGRvZXMgbm90IGV4aXN0LCBjb3VsZCBub3QgYmUgY29udGFjdGVkLCBvciB0aGVyZSBpc24ndCBhbiBleGlzdGluZyB0cnVzdC4iCiAgICAgICAgICAgIHJldHVybiAkTnVsbAogICAgICAgIH0KICAgIH0KICAgIGVsc2UgewogICAgICAgICMgb3RoZXJ3aXNlIHVzZSB0aGUgY3VycmVudCBmb3Jlc3QKICAgICAgICAkRm9yZXN0T2JqZWN0ID0gW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRm9yZXN0XTo6R2V0Q3VycmVudEZvcmVzdCgpCiAgICB9CgogICAgaWYoJEZvcmVzdE9iamVjdCkgewogICAgICAgICMgZ2V0IHRoZSBTSUQgb2YgdGhlIGZvcmVzdCByb290CiAgICAgICAgJEZvcmVzdFNpZCA9IChOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuTlRBY2NvdW50KCRGb3Jlc3RPYmplY3QuUm9vdERvbWFpbiwia3JidGd0IikpLlRyYW5zbGF0ZShbU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXJdKS5WYWx1ZQogICAgICAgICRQYXJ0cyA9ICRGb3Jlc3RTaWQgLVNwbGl0ICItIgogICAgICAgICRGb3Jlc3RTaWQgPSAkUGFydHNbMC4uJCgkUGFydHMubGVuZ3RoLTIpXSAtam9pbiAiLSIKICAgICAgICAkRm9yZXN0T2JqZWN0IHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ1Jvb3REb21haW5TaWQnICRGb3Jlc3RTaWQKICAgICAgICAkRm9yZXN0T2JqZWN0CiAgICB9Cn0KCgpmaWx0ZXIgR2V0LU5ldEZvcmVzdERvbWFpbiB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgUmV0dXJuIGFsbCBkb21haW5zIGZvciBhIGdpdmVuIGZvcmVzdC4KCiAgICAuUEFSQU1FVEVSIEZvcmVzdAoKICAgICAgICBUaGUgZm9yZXN0IG5hbWUgdG8gcXVlcnkgZG9tYWluIGZvci4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldEZvcmVzdERvbWFpbgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldEZvcmVzdERvbWFpbiAtRm9yZXN0IGV4dGVybmFsLmxvY2FsCiM+CgogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRm9yZXN0LAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgICRGb3Jlc3RPYmplY3QgPSBHZXQtTmV0Rm9yZXN0IC1Gb3Jlc3QgJEZvcmVzdCAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAoKICAgIGlmKCRGb3Jlc3RPYmplY3QpIHsKICAgICAgICAkRm9yZXN0T2JqZWN0LkRvbWFpbnMKICAgIH0KfQoKCmZpbHRlciBHZXQtTmV0Rm9yZXN0Q2F0YWxvZyB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgUmV0dXJuIGFsbCBnbG9iYWwgY2F0YWxvZ3MgZm9yIGEgZ2l2ZW4gZm9yZXN0LgoKICAgIC5QQVJBTUVURVIgRm9yZXN0CgogICAgICAgIFRoZSBmb3Jlc3QgbmFtZSB0byBxdWVyeSBkb21haW4gZm9yLgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0Rm9yZXN0Q2F0YWxvZwojPgogICAgCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRGb3Jlc3QsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCgogICAgJEZvcmVzdE9iamVjdCA9IEdldC1OZXRGb3Jlc3QgLUZvcmVzdCAkRm9yZXN0IC1DcmVkZW50aWFsICRDcmVkZW50aWFsCgogICAgaWYoJEZvcmVzdE9iamVjdCkgewogICAgICAgICRGb3Jlc3RPYmplY3QuRmluZEFsbEdsb2JhbENhdGFsb2dzKCkKICAgIH0KfQoKCmZpbHRlciBHZXQtTmV0RG9tYWluQ29udHJvbGxlciB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgUmV0dXJuIHRoZSBjdXJyZW50IGRvbWFpbiBjb250cm9sbGVycyBmb3IgdGhlIGFjdGl2ZSBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byBxdWVyeSBmb3IgZG9tYWluIGNvbnRyb2xsZXJzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBMREFQCgogICAgICAgIFN3aXRjaC4gVXNlIExEQVAgcXVlcmllcyB0byBkZXRlcm1pbmUgdGhlIGRvbWFpbiBjb250cm9sbGVycy4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldERvbWFpbkNvbnRyb2xsZXIgLURvbWFpbiAndGVzdC5sb2NhbCcKICAgICAgICAKICAgICAgICBEZXRlcm1pbmUgdGhlIGRvbWFpbiBjb250cm9sbGVycyBmb3IgJ3Rlc3QubG9jYWwnLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldERvbWFpbkNvbnRyb2xsZXIgLURvbWFpbiAndGVzdC5sb2NhbCcgLUxEQVAKCiAgICAgICAgRGV0ZXJtaW5lIHRoZSBkb21haW4gY29udHJvbGxlcnMgZm9yICd0ZXN0LmxvY2FsJyB1c2luZyBMREFQIHF1ZXJpZXMuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiAndGVzdC5sb2NhbCcgfCBHZXQtTmV0RG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEZXRlcm1pbmUgdGhlIGRvbWFpbiBjb250cm9sbGVycyBmb3IgJ3Rlc3QubG9jYWwnLgojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJExEQVAsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCgogICAgaWYoJExEQVAgLW9yICREb21haW5Db250cm9sbGVyKSB7CiAgICAgICAgIyBmaWx0ZXIgc3RyaW5nIHRvIHJldHVybiBhbGwgZG9tYWluIGNvbnRyb2xsZXJzCiAgICAgICAgR2V0LU5ldENvbXB1dGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtRnVsbERhdGEgLUZpbHRlciAnKHVzZXJBY2NvdW50Q29udHJvbDoxLjIuODQwLjExMzU1Ni4xLjQuODAzOj04MTkyKScKICAgIH0KICAgIGVsc2UgewogICAgICAgICRGb3VuZERvbWFpbiA9IEdldC1OZXREb21haW4gLURvbWFpbiAkRG9tYWluIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgaWYoJEZvdW5kRG9tYWluKSB7CiAgICAgICAgICAgICRGb3VuZGRvbWFpbi5Eb21haW5Db250cm9sbGVycwogICAgICAgIH0KICAgIH0KfQoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMKIyAibmV0ICoiIHJlcGxhY2VtZW50cyBhbmQgb3RoZXIgZnVuIHN0YXJ0IGJlbG93CiMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCmZ1bmN0aW9uIEdldC1OZXRVc2VyIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBRdWVyeSBpbmZvcm1hdGlvbiBmb3IgYSBnaXZlbiB1c2VyIG9yIHVzZXJzIGluIHRoZSBkb21haW4KICAgICAgICB1c2luZyBBRFNJIGFuZCBMREFQLiBBbm90aGVyIC1Eb21haW4gY2FuIGJlIHNwZWNpZmllZCB0bwogICAgICAgIHF1ZXJ5IGZvciB1c2VycyBhY3Jvc3MgYSB0cnVzdC4KICAgICAgICBSZXBsYWNlbWVudCBmb3IgIm5ldCB1c2VycyAvZG9tYWluIgoKICAgIC5QQVJBTUVURVIgVXNlck5hbWUKCiAgICAgICAgVXNlcm5hbWUgZmlsdGVyIHN0cmluZywgd2lsZGNhcmRzIGFjY2VwdGVkLgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gcXVlcnkgZm9yIHVzZXJzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCwgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCiAgICAuUEFSQU1FVEVSIEZpbHRlcgoKICAgICAgICBBIGN1c3RvbWl6ZWQgbGRhcCBmaWx0ZXIgc3RyaW5nIHRvIHVzZSwgZS5nLiAiKGRlc2NyaXB0aW9uPSphZG1pbiopIgoKICAgIC5QQVJBTUVURVIgQWRtaW5Db3VudAoKICAgICAgICBTd2l0Y2guIFJldHVybiB1c2VycyB3aXRoIGFkbWluQ291bnQ9MS4KCiAgICAuUEFSQU1FVEVSIFNQTgoKICAgICAgICBTd2l0Y2guIE9ubHkgcmV0dXJuIHVzZXIgb2JqZWN0cyB3aXRoIG5vbi1udWxsIHNlcnZpY2UgcHJpbmNpcGFsIG5hbWVzLgoKICAgIC5QQVJBTUVURVIgVW5jb25zdHJhaW5lZAoKICAgICAgICBTd2l0Y2guIFJldHVybiB1c2VycyB0aGF0IGhhdmUgdW5jb25zdHJhaW5lZCBkZWxlZ2F0aW9uLgoKICAgIC5QQVJBTUVURVIgQWxsb3dEZWxlZ2F0aW9uCgogICAgICAgIFN3aXRjaC4gUmV0dXJuIHVzZXIgYWNjb3VudHMgdGhhdCBhcmUgbm90IG1hcmtlZCBhcyAnc2Vuc2l0aXZlIGFuZCBub3QgYWxsb3dlZCBmb3IgZGVsZWdhdGlvbicKCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldFVzZXIgLURvbWFpbiB0ZXN0aW5nCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0VXNlciAtQURTcGF0aCAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgojPgoKICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MCwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJOYW1lLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZpbHRlciwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU1BOLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRBZG1pbkNvdW50LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRVbmNvbnN0cmFpbmVkLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRBbGxvd0RlbGVnYXRpb24sCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICBiZWdpbiB7CiAgICAgICAgIyBzbyB0aGlzIGlzbid0IHJlcGVhdGVkIGlmIHVzZXJzIGFyZSBwYXNzZWQgb24gdGhlIHBpcGVsaW5lCiAgICAgICAgJFVzZXJTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciAtRG9tYWluICREb21haW4gLUFEU3BhdGggJEFEU3BhdGggLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLVBhZ2VTaXplICRQYWdlU2l6ZSAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgfQoKICAgIHByb2Nlc3MgewogICAgICAgIGlmKCRVc2VyU2VhcmNoZXIpIHsKCiAgICAgICAgICAgICMgaWYgd2UncmUgY2hlY2tpbmcgZm9yIHVuY29uc3RyYWluZWQgZGVsZWdhdGlvbgogICAgICAgICAgICBpZigkVW5jb25zdHJhaW5lZCkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiQ2hlY2tpbmcgZm9yIHVuY29uc3RyYWluZWQgZGVsZWdhdGlvbiIKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIih1c2VyQWNjb3VudENvbnRyb2w6MS4yLjg0MC4xMTM1NTYuMS40LjgwMzo9NTI0Mjg4KSIKICAgICAgICAgICAgfQogICAgICAgICAgICBpZigkQWxsb3dEZWxlZ2F0aW9uKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJDaGVja2luZyBmb3IgdXNlcnMgd2hvIGNhbiBiZSBkZWxlZ2F0ZWQiCiAgICAgICAgICAgICAgICAjIG5lZ2F0aW9uIG9mICJBY2NvdW50cyB0aGF0IGFyZSBzZW5zaXRpdmUgYW5kIG5vdCB0cnVzdGVkIGZvciBkZWxlZ2F0aW9uIgogICAgICAgICAgICAgICAgJEZpbHRlciArPSAiKCEodXNlckFjY291bnRDb250cm9sOjEuMi44NDAuMTEzNTU2LjEuNC44MDM6PTEwNDg1NzQpKSIKICAgICAgICAgICAgfQogICAgICAgICAgICBpZigkQWRtaW5Db3VudCkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiQ2hlY2tpbmcgZm9yIGFkbWluQ291bnQ9MSIKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIihhZG1pbmNvdW50PTEpIgogICAgICAgICAgICB9CgogICAgICAgICAgICAjIGNoZWNrIGlmIHdlJ3JlIHVzaW5nIGEgdXNlcm5hbWUgZmlsdGVyIG9yIG5vdAogICAgICAgICAgICBpZigkVXNlck5hbWUpIHsKICAgICAgICAgICAgICAgICMgc2FtQWNjb3VudFR5cGU9ODA1MzA2MzY4IGluZGljYXRlcyB1c2VyIG9iamVjdHMKICAgICAgICAgICAgICAgICRVc2VyU2VhcmNoZXIuZmlsdGVyPSIoJihzYW1BY2NvdW50VHlwZT04MDUzMDYzNjgpKHNhbUFjY291bnROYW1lPSRVc2VyTmFtZSkkRmlsdGVyKSIKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYoJFNQTikgewogICAgICAgICAgICAgICAgJFVzZXJTZWFyY2hlci5maWx0ZXI9IigmKHNhbUFjY291bnRUeXBlPTgwNTMwNjM2OCkoc2VydmljZVByaW5jaXBhbE5hbWU9KikkRmlsdGVyKSIKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICMgZmlsdGVyIGlzIHNvbWV0aGluZyBsaWtlICIoc2FtQWNjb3VudE5hbWU9KmJsYWgqKSIgaWYgc3BlY2lmaWVkCiAgICAgICAgICAgICAgICAkVXNlclNlYXJjaGVyLmZpbHRlcj0iKCYoc2FtQWNjb3VudFR5cGU9ODA1MzA2MzY4KSRGaWx0ZXIpIgogICAgICAgICAgICB9CgogICAgICAgICAgICAkVXNlclNlYXJjaGVyLkZpbmRBbGwoKSB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgIyBjb252ZXJ0L3Byb2Nlc3MgdGhlIExEQVAgZmllbGRzIGZvciBlYWNoIHJlc3VsdAogICAgICAgICAgICAgICAgQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gQWRkLU5ldFVzZXIgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEFkZHMgYSBkb21haW4gdXNlciBvciBhIGxvY2FsIHVzZXIgdG8gdGhlIGN1cnJlbnQgKG9yIHJlbW90ZSkgbWFjaGluZSwKICAgICAgICBpZiBwZXJtaXNzaW9ucyBhbGxvdywgdXRpbGl6aW5nIHRoZSBXaW5OVCBzZXJ2aWNlIHByb3ZpZGVyIGFuZAogICAgICAgIERpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LCByZXNwZWN0aXZlbHkuCiAgICAgICAgCiAgICAgICAgVGhlIGRlZmF1bHQgYmVoYXZpb3IgaXMgdG8gYWRkIGEgdXNlciB0byB0aGUgbG9jYWwgbWFjaGluZS4KICAgICAgICBBbiBvcHRpb25hbCBncm91cCBuYW1lIHRvIGFkZCB0aGUgdXNlciB0byBjYW4gYmUgc3BlY2lmaWVkLgoKICAgIC5QQVJBTUVURVIgVXNlck5hbWUKCiAgICAgICAgVGhlIHVzZXJuYW1lIHRvIGFkZC4gSWYgbm90IGdpdmVuLCBpdCBkZWZhdWx0cyB0byAnYmFja2Rvb3InCgogICAgLlBBUkFNRVRFUiBQYXNzd29yZAoKICAgICAgICBUaGUgcGFzc3dvcmQgdG8gc2V0IGZvciB0aGUgYWRkZWQgdXNlci4gSWYgbm90IGdpdmVuLCBpdCBkZWZhdWx0cyB0byAnUGFzc3dvcmQxMjMhJwoKICAgIC5QQVJBTUVURVIgR3JvdXBOYW1lCgogICAgICAgIEdyb3VwIHRvIG9wdGlvbmFsbHkgYWRkIHRoZSB1c2VyIHRvLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIEhvc3RuYW1lIHRvIGFkZCB0aGUgbG9jYWwgdXNlciB0bywgZGVmYXVsdHMgdG8gJ2xvY2FsaG9zdCcKCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBTcGVjaWZpZWQgZG9tYWluIHRvIGFkZCB0aGUgdXNlciB0by4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEFkZC1OZXRVc2VyIC1Vc2VyTmFtZSBqb2huIC1QYXNzd29yZCAnUGFzc3dvcmQxMjMhJwogICAgICAgIAogICAgICAgIEFkZHMgYSBsb2NhbHVzZXIgJ2pvaG4nIHRvIHRoZSBsb2NhbCBtYWNoaW5lIHdpdGggcGFzc3dvcmQgb2YgJ1Bhc3N3b3JkMTIzIScKCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEFkZC1OZXRVc2VyIC1Vc2VyTmFtZSBqb2huIC1QYXNzd29yZCAnUGFzc3dvcmQxMjMhJyAtQ29tcHV0ZXJOYW1lIHNlcnZlci50ZXN0bGFiLmxvY2FsCiAgICAgICAgCiAgICAgICAgQWRkcyBhIGxvY2FsdXNlciAnam9obicgd2l0aCBwYXNzd29yZCBvZiAnUGFzc3dvcmQxMjMhJyB0byBzZXJ2ZXIudGVzdGxhYi5sb2NhbCdzIGxvY2FsIEFkbWluaXN0cmF0b3JzIGdyb3VwLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gQWRkLU5ldFVzZXIgLVVzZXJOYW1lIGpvaG4gLVBhc3N3b3JkIHBhc3N3b3JkIC1Hcm91cE5hbWUgIkRvbWFpbiBBZG1pbnMiIC1Eb21haW4gJycKICAgICAgICAKICAgICAgICBBZGRzIHRoZSB1c2VyICJqb2huIiB3aXRoIHBhc3N3b3JkICJwYXNzd29yZCIgdG8gdGhlIGN1cnJlbnQgZG9tYWluIGFuZCBhZGRzCiAgICAgICAgdGhlIHVzZXIgdG8gdGhlIGRvbWFpbiBncm91cCAiRG9tYWluIEFkbWlucyIKCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEFkZC1OZXRVc2VyIC1Vc2VyTmFtZSBqb2huIC1QYXNzd29yZCBwYXNzd29yZCAtR3JvdXBOYW1lICJEb21haW4gQWRtaW5zIiAtRG9tYWluICd0ZXN0aW5nJwogICAgICAgIAogICAgICAgIEFkZHMgdGhlIHVzZXIgImpvaG4iIHdpdGggcGFzc3dvcmQgInBhc3N3b3JkIiB0byB0aGUgJ3Rlc3RpbmcnIGRvbWFpbiBhbmQgYWRkcwogICAgICAgIHRoZSB1c2VyIHRvIHRoZSBkb21haW4gZ3JvdXAgIkRvbWFpbiBBZG1pbnMiCgogICAgLkxpbmsKCiAgICAgICAgaHR0cDovL2Jsb2dzLnRlY2huZXQuY29tL2IvaGV5c2NyaXB0aW5nZ3V5L2FyY2hpdmUvMjAxMC8xMS8yMy91c2UtcG93ZXJzaGVsbC10by1jcmVhdGUtbG9jYWwtdXNlci1hY2NvdW50cy5hc3B4CiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJOYW1lID0gJ2JhY2tkb29yJywKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRQYXNzd29yZCA9ICdQYXNzd29yZDEyMyEnLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEdyb3VwTmFtZSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJ2xvY2FsaG9zdCcsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluCiAgICApCgogICAgaWYgKCREb21haW4pIHsKCiAgICAgICAgJERvbWFpbk9iamVjdCA9IEdldC1OZXREb21haW4gLURvbWFpbiAkRG9tYWluCiAgICAgICAgaWYoLW5vdCAkRG9tYWluT2JqZWN0KSB7CiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkVycm9yIGluIGdyYWJiaW5nICREb21haW4gb2JqZWN0IgogICAgICAgICAgICByZXR1cm4gJE51bGwKICAgICAgICB9CgogICAgICAgICMgYWRkIHRoZSBhc3NlbWJseSB3ZSBuZWVkCiAgICAgICAgQWRkLVR5cGUgLUFzc2VtYmx5TmFtZSBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQKCiAgICAgICAgIyBodHRwOi8vcmljaGFyZHNwb3dlcnNoZWxsYmxvZy53b3JkcHJlc3MuY29tLzIwMDgvMDUvMjUvc3lzdGVtLWRpcmVjdG9yeXNlcnZpY2VzLWFjY291bnRtYW5hZ2VtZW50LwogICAgICAgICMgZ2V0IHRoZSBkb21haW4gY29udGV4dAogICAgICAgICRDb250ZXh0ID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LlByaW5jaXBhbENvbnRleHQgLUFyZ3VtZW50TGlzdCAoW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5Db250ZXh0VHlwZV06OkRvbWFpbiksICREb21haW5PYmplY3QKCiAgICAgICAgIyBjcmVhdGUgdGhlIHVzZXIgb2JqZWN0CiAgICAgICAgJFVzZXIgPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuVXNlclByaW5jaXBhbCAtQXJndW1lbnRMaXN0ICRDb250ZXh0CgogICAgICAgICMgc2V0IHVzZXIgcHJvcGVydGllcwogICAgICAgICRVc2VyLk5hbWUgPSAkVXNlck5hbWUKICAgICAgICAkVXNlci5TYW1BY2NvdW50TmFtZSA9ICRVc2VyTmFtZQogICAgICAgICRVc2VyLlBhc3N3b3JkTm90UmVxdWlyZWQgPSAkRmFsc2UKICAgICAgICAkVXNlci5TZXRQYXNzd29yZCgkUGFzc3dvcmQpCiAgICAgICAgJFVzZXIuRW5hYmxlZCA9ICRUcnVlCgogICAgICAgIFdyaXRlLVZlcmJvc2UgIkNyZWF0aW5nIHVzZXIgJFVzZXJOYW1lIHRvIHdpdGggcGFzc3dvcmQgJyRQYXNzd29yZCcgaW4gZG9tYWluICREb21haW4iCgogICAgICAgIHRyeSB7CiAgICAgICAgICAgICMgY29tbWl0IHRoZSB1c2VyCiAgICAgICAgICAgICRVc2VyLlNhdmUoKQogICAgICAgICAgICAiWypdIFVzZXIgJFVzZXJOYW1lIHN1Y2Nlc3NmdWxseSBjcmVhdGVkIGluIGRvbWFpbiAkRG9tYWluIgogICAgICAgIH0KICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgJ1shXSBVc2VyIGFscmVhZHkgZXhpc3RzIScKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgfQogICAgfQogICAgZWxzZSB7CiAgICAgICAgCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiQ3JlYXRpbmcgdXNlciAkVXNlck5hbWUgdG8gd2l0aCBwYXNzd29yZCAnJFBhc3N3b3JkJyBvbiAkQ29tcHV0ZXJOYW1lIgoKICAgICAgICAjIGlmIGl0J3Mgbm90IGEgZG9tYWluIGFkZCwgaXQncyBhIGxvY2FsIG1hY2hpbmUgYWRkCiAgICAgICAgJE9iak91ID0gW0FEU0ldIldpbk5UOi8vJENvbXB1dGVyTmFtZSIKICAgICAgICAkT2JqVXNlciA9ICRPYmpPdS5DcmVhdGUoJ1VzZXInLCAkVXNlck5hbWUpCiAgICAgICAgJE9ialVzZXIuU2V0UGFzc3dvcmQoJFBhc3N3b3JkKQoKICAgICAgICAjIGNvbW1pdCB0aGUgY2hhbmdlcyB0byB0aGUgbG9jYWwgbWFjaGluZQogICAgICAgIHRyeSB7CiAgICAgICAgICAgICROdWxsID0gJE9ialVzZXIuU2V0SW5mbygpCiAgICAgICAgICAgICJbKl0gVXNlciAkVXNlck5hbWUgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWQgb24gaG9zdCAkQ29tcHV0ZXJOYW1lIgogICAgICAgIH0KICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgJ1shXSBBY2NvdW50IGFscmVhZHkgZXhpc3RzIScKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgfQogICAgfQoKICAgICMgaWYgYSBncm91cCBpcyBzcGVjaWZpZWQsIGludm9rZSBBZGQtTmV0R3JvdXBVc2VyIGFuZCByZXR1cm4gaXRzIHZhbHVlCiAgICBpZiAoJEdyb3VwTmFtZSkgewogICAgICAgICMgaWYgd2UncmUgYWRkaW5nIHRoZSB1c2VyIHRvIGEgZG9tYWluCiAgICAgICAgaWYgKCREb21haW4pIHsKICAgICAgICAgICAgQWRkLU5ldEdyb3VwVXNlciAtVXNlck5hbWUgJFVzZXJOYW1lIC1Hcm91cE5hbWUgJEdyb3VwTmFtZSAtRG9tYWluICREb21haW4KICAgICAgICAgICAgIlsqXSBVc2VyICRVc2VyTmFtZSBzdWNjZXNzZnVsbHkgYWRkZWQgdG8gZ3JvdXAgJEdyb3VwTmFtZSBpbiBkb21haW4gJERvbWFpbiIKICAgICAgICB9CiAgICAgICAgIyBvdGhlcndpc2UsIHdlJ3JlIGFkZGluZyB0byBhIGxvY2FsIGdyb3VwCiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIEFkZC1OZXRHcm91cFVzZXIgLVVzZXJOYW1lICRVc2VyTmFtZSAtR3JvdXBOYW1lICRHcm91cE5hbWUgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgICJbKl0gVXNlciAkVXNlck5hbWUgc3VjY2Vzc2Z1bGx5IGFkZGVkIHRvIGdyb3VwICRHcm91cE5hbWUgb24gaG9zdCAkQ29tcHV0ZXJOYW1lIgogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEFkZC1OZXRHcm91cFVzZXIgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEFkZHMgYSB1c2VyIHRvIGEgZG9tYWluIGdyb3VwIG9yIGEgbG9jYWwgZ3JvdXAgb24gdGhlIGN1cnJlbnQgKG9yIHJlbW90ZSkgbWFjaGluZSwKICAgICAgICBpZiBwZXJtaXNzaW9ucyBhbGxvdywgdXRpbGl6aW5nIHRoZSBXaW5OVCBzZXJ2aWNlIHByb3ZpZGVyIGFuZAogICAgICAgIERpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LCByZXNwZWN0aXZlbHkuCgogICAgLlBBUkFNRVRFUiBVc2VyTmFtZQoKICAgICAgICBUaGUgZG9tYWluIHVzZXJuYW1lIHRvIHF1ZXJ5IGZvci4KCiAgICAuUEFSQU1FVEVSIEdyb3VwTmFtZQoKICAgICAgICBHcm91cCB0byBhZGQgdGhlIHVzZXIgdG8uCgogICAgLlBBUkFNRVRFUiBDb21wdXRlck5hbWUKCiAgICAgICAgSG9zdG5hbWUgdG8gYWRkIHRoZSB1c2VyIHRvLCBkZWZhdWx0cyB0byBsb2NhbGhvc3QuCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgRG9tYWluIHRvIGFkZCB0aGUgdXNlciB0by4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEFkZC1OZXRHcm91cFVzZXIgLVVzZXJOYW1lIGpvaG4gLUdyb3VwTmFtZSBBZG1pbmlzdHJhdG9ycwogICAgICAgIAogICAgICAgIEFkZHMgYSBsb2NhbHVzZXIgImpvaG4iIHRvIHRoZSBsb2NhbCBncm91cCAiQWRtaW5pc3RyYXRvcnMiCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBBZGQtTmV0R3JvdXBVc2VyIC1Vc2VyTmFtZSBqb2huIC1Hcm91cE5hbWUgIkRvbWFpbiBBZG1pbnMiIC1Eb21haW4gZGV2LmxvY2FsCiAgICAgICAgCiAgICAgICAgQWRkcyB0aGUgZXhpc3RpbmcgdXNlciAiam9obiIgdG8gdGhlIGRvbWFpbiBncm91cCAiRG9tYWluIEFkbWlucyIgaW4gImRldi5sb2NhbCIKIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcm91cE5hbWUsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyTmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluCiAgICApCgogICAgIyBhZGQgdGhlIGFzc2VtYmx5IGlmIHdlIG5lZWQgaXQKICAgIEFkZC1UeXBlIC1Bc3NlbWJseU5hbWUgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50CgogICAgIyBpZiB3ZSdyZSBhZGRpbmcgdG8gYSByZW1vdGUgaG9zdCdzIGxvY2FsIGdyb3VwLCB1c2UgdGhlIFdpbk5UIHByb3ZpZGVyCiAgICBpZigkQ29tcHV0ZXJOYW1lIC1hbmQgKCRDb21wdXRlck5hbWUgLW5lICJsb2NhbGhvc3QiKSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkFkZGluZyB1c2VyICRVc2VyTmFtZSB0byAkR3JvdXBOYW1lIG9uIGhvc3QgJENvbXB1dGVyTmFtZSIKICAgICAgICAgICAgKFtBRFNJXSJXaW5OVDovLyRDb21wdXRlck5hbWUvJEdyb3VwTmFtZSxncm91cCIpLmFkZCgiV2luTlQ6Ly8kQ29tcHV0ZXJOYW1lLyRVc2VyTmFtZSx1c2VyIikKICAgICAgICAgICAgIlsqXSBVc2VyICRVc2VyTmFtZSBzdWNjZXNzZnVsbHkgYWRkZWQgdG8gZ3JvdXAgJEdyb3VwTmFtZSBvbiAkQ29tcHV0ZXJOYW1lIgogICAgICAgIH0KICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIlshXSBFcnJvciBhZGRpbmcgdXNlciAkVXNlck5hbWUgdG8gZ3JvdXAgJEdyb3VwTmFtZSBvbiAkQ29tcHV0ZXJOYW1lIgogICAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICB9CgogICAgIyBvdGhlcndpc2UgaXQncyBhIGxvY2FsIG1hY2hpbmUgb3IgZG9tYWluIGFkZAogICAgZWxzZSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaWYgKCREb21haW4pIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkFkZGluZyB1c2VyICRVc2VyTmFtZSB0byAkR3JvdXBOYW1lIG9uIGRvbWFpbiAkRG9tYWluIgogICAgICAgICAgICAgICAgJENUID0gW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5Db250ZXh0VHlwZV06OkRvbWFpbgogICAgICAgICAgICAgICAgJERvbWFpbk9iamVjdCA9IEdldC1OZXREb21haW4gLURvbWFpbiAkRG9tYWluCiAgICAgICAgICAgICAgICBpZigtbm90ICREb21haW5PYmplY3QpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJE51bGwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICMgZ2V0IHRoZSBmdWxsIHByaW5jaXBhbCBjb250ZXh0CiAgICAgICAgICAgICAgICAkQ29udGV4dCA9IE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5QcmluY2lwYWxDb250ZXh0IC1Bcmd1bWVudExpc3QgJENULCAkRG9tYWluT2JqZWN0ICAgICAgICAgICAgCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAjIG90aGVyd2lzZSwgZ2V0IHRoZSBsb2NhbCBtYWNoaW5lIGNvbnRleHQKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkFkZGluZyB1c2VyICRVc2VyTmFtZSB0byAkR3JvdXBOYW1lIG9uIGxvY2FsaG9zdCIKICAgICAgICAgICAgICAgICRDb250ZXh0ID0gTmV3LU9iamVjdCBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuUHJpbmNpcGFsQ29udGV4dChbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LkNvbnRleHRUeXBlXTo6TWFjaGluZSwgJEVudjpDb21wdXRlck5hbWUpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgZmluZCB0aGUgcGFydGljdWxhciBncm91cAogICAgICAgICAgICAkR3JvdXAgPSBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50Lkdyb3VwUHJpbmNpcGFsXTo6RmluZEJ5SWRlbnRpdHkoJENvbnRleHQsJEdyb3VwTmFtZSkKCiAgICAgICAgICAgICMgYWRkIHRoZSBwYXJ0aWN1bGFyIHVzZXIgdG8gdGhlIGdyb3VwCiAgICAgICAgICAgICRHcm91cC5NZW1iZXJzLmFkZCgkQ29udGV4dCwgW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5JZGVudGl0eVR5cGVdOjpTYW1BY2NvdW50TmFtZSwgJFVzZXJOYW1lKQoKICAgICAgICAgICAgIyBjb21taXQgdGhlIGNoYW5nZXMKICAgICAgICAgICAgJEdyb3VwLlNhdmUoKQogICAgICAgIH0KICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkVycm9yIGFkZGluZyAkVXNlck5hbWUgdG8gJEdyb3VwTmFtZSA6ICRfIgogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1Vc2VyUHJvcGVydHkgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFJldHVybnMgYSBsaXN0IG9mIGFsbCB1c2VyIG9iamVjdCBwcm9wZXJ0aWVzLiBJZiBhIHByb3BlcnR5CiAgICAgICAgbmFtZSBpcyBzcGVjaWZpZWQsIGl0IHJldHVybnMgYWxsIFt1c2VyOnByb3BlcnR5XSB2YWx1ZXMuCgogICAgICAgIFRha2VuIGRpcmVjdGx5IGZyb20gQG9ic2N1cmVzZWMncyBwb3N0OgogICAgICAgICAgICBodHRwOi8vb2JzY3VyZXNlY3VyaXR5LmJsb2dzcG90LmNvbS8yMDE0LzA0L0FEU0lTZWFyY2hlci5odG1sCgogICAgLlBBUkFNRVRFUiBQcm9wZXJ0aWVzCgogICAgICAgIFByb3BlcnR5IG5hbWVzIHRvIGV4dHJhY3QgZm9yIHVzZXJzLgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gcXVlcnkgZm9yIHVzZXIgcHJvcGVydGllcywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtVXNlclByb3BlcnR5IC1Eb21haW4gdGVzdGluZwogICAgICAgIAogICAgICAgIFJldHVybnMgYWxsIHVzZXIgcHJvcGVydGllcyBmb3IgdXNlcnMgaW4gdGhlICd0ZXN0aW5nJyBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtVXNlclByb3BlcnR5IC1Qcm9wZXJ0aWVzIHNzbixsYXN0bG9nb24sbG9jYXRpb24KICAgICAgICAKICAgICAgICBSZXR1cm5zIGFsbCBhbiBhcnJheSBvZiB1c2VyL3Nzbi9sYXN0bG9naW4vbG9jYXRpb24gY29tYmluYXRpb25zCiAgICAgICAgZm9yIHVzZXJzIGluIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuTElOSwoKICAgICAgICBodHRwOi8vb2JzY3VyZXNlY3VyaXR5LmJsb2dzcG90LmNvbS8yMDE0LzA0L0FEU0lTZWFyY2hlci5odG1sCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkUHJvcGVydGllcywKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICBpZigkUHJvcGVydGllcykgewogICAgICAgICMgZXh0cmFjdCBvdXQgdGhlIHNldCBvZiBhbGwgcHJvcGVydGllcyBmb3IgZWFjaCBvYmplY3QKICAgICAgICAkUHJvcGVydGllcyA9ICwibmFtZSIgKyAkUHJvcGVydGllcwogICAgICAgIEdldC1OZXRVc2VyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtUGFnZVNpemUgJFBhZ2VTaXplIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIHwgU2VsZWN0LU9iamVjdCAtUHJvcGVydHkgJFByb3BlcnRpZXMKICAgIH0KICAgIGVsc2UgewogICAgICAgICMgZXh0cmFjdCBvdXQganVzdCB0aGUgcHJvcGVydHkgbmFtZXMKICAgICAgICBHZXQtTmV0VXNlciAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLVBhZ2VTaXplICRQYWdlU2l6ZSAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCB8IFNlbGVjdC1PYmplY3QgLUZpcnN0IDEgfCBHZXQtTWVtYmVyIC1NZW1iZXJUeXBlICpQcm9wZXJ0eSB8IFNlbGVjdC1PYmplY3QgLVByb3BlcnR5ICdOYW1lJwogICAgfQp9CgoKZmlsdGVyIEZpbmQtVXNlckZpZWxkIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBTZWFyY2hlcyB1c2VyIG9iamVjdCBmaWVsZHMgZm9yIGEgZ2l2ZW4gd29yZCAoZGVmYXVsdCAqcGFzcyopLiBEZWZhdWx0CiAgICAgICAgZmllbGQgYmVpbmcgc2VhcmNoZWQgaXMgJ2Rlc2NyaXB0aW9uJy4KCiAgICAgICAgVGFrZW4gZGlyZWN0bHkgZnJvbSBAb2JzY3VyZXNlYydzIHBvc3Q6CiAgICAgICAgICAgIGh0dHA6Ly9vYnNjdXJlc2VjdXJpdHkuYmxvZ3Nwb3QuY29tLzIwMTQvMDQvQURTSVNlYXJjaGVyLmh0bWwKCiAgICAuUEFSQU1FVEVSIFNlYXJjaFRlcm0KCiAgICAgICAgVGVybSB0byBzZWFyY2ggZm9yLCBkZWZhdWx0IG9mICJwYXNzIi4KCiAgICAuUEFSQU1FVEVSIFNlYXJjaEZpZWxkCgogICAgICAgIFVzZXIgZmllbGQgdG8gc2VhcmNoLCBkZWZhdWx0IG9mICJkZXNjcmlwdGlvbiIuCgogICAgLlBBUkFNRVRFUiBBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCwgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBEb21haW4gdG8gc2VhcmNoIGNvbXB1dGVyIGZpZWxkcyBmb3IsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gRmluZC1Vc2VyRmllbGQgLVNlYXJjaEZpZWxkIGluZm8gLVNlYXJjaFRlcm0gYmFja3VwCgogICAgICAgIEZpbmQgdXNlciBhY2NvdW50cyB3aXRoICJiYWNrdXAiIGluIHRoZSAiaW5mbyIgZmllbGQuCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MCxWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoVGVybSA9ICdwYXNzJywKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoRmllbGQgPSAnZGVzY3JpcHRpb24nLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwYXRoLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKIAogICAgR2V0LU5ldFVzZXIgLUFEU3BhdGggJEFEU3BhdGggLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1GaWx0ZXIgIigkU2VhcmNoRmllbGQ9KiRTZWFyY2hUZXJtKikiIC1QYWdlU2l6ZSAkUGFnZVNpemUgfCBTZWxlY3QtT2JqZWN0IHNhbWFjY291bnRuYW1lLCRTZWFyY2hGaWVsZAp9CgoKZmlsdGVyIEdldC1Vc2VyRXZlbnQgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIER1bXAgYW5kIHBhcnNlIHNlY3VyaXR5IGV2ZW50cyByZWxhdGluZyB0byBhbiBhY2NvdW50IGxvZ29uIChJRCA0NjI0KQogICAgICAgIG9yIGEgVEdUIHJlcXVlc3QgZXZlbnQgKElEIDQ3NjgpLiBJbnRlbmRlZCB0byBiZSB1c2VkIGFuZCB0ZXN0ZWQgb24KICAgICAgICBXaW5kb3dzIDIwMDggRG9tYWluIENvbnRyb2xsZXJzLgogICAgICAgIEFkbWluIFJlcWQ/IFlFUwoKICAgICAgICBBdXRob3I6IEBzaXhkdWIKCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBUaGUgY29tcHV0ZXIgdG8gZ2V0IGV2ZW50cyBmcm9tLiBEZWZhdWx0OiBMb2NhbGhvc3QKCiAgICAuUEFSQU1FVEVSIEV2ZW50VHlwZQoKICAgICAgICBFaXRoZXIgJ2xvZ29uJywgJ3RndCcsIG9yICdhbGwnLiBEZWZhdWx0czogJ2xvZ29uJwoKICAgIC5QQVJBTUVURVIgRGF0ZVN0YXJ0CgogICAgICAgIEZpbHRlciBvdXQgYWxsIGV2ZW50cyBiZWZvcmUgdGhpcyBkYXRlLiBEZWZhdWx0OiA1IGRheXMKCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LVVzZXJFdmVudCAtQ29tcHV0ZXJOYW1lIERvbWFpbkNvbnRyb2xsZXIudGVzdGxhYi5sb2NhbAoKICAgIC5MSU5LCgogICAgICAgIGh0dHA6Ly93d3cuc2l4ZHViLm5ldC8yMDE0LzExLzA3L29mZmVuc2l2ZS1ldmVudC1wYXJzaW5nLWJyaW5naW5nLWhvbWUtdHJvcGhpZXMvCiM+CgogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJEVudjpDb21wdXRlck5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlU2V0KCJsb2dvbiIsInRndCIsImFsbCIpXQogICAgICAgICRFdmVudFR5cGUgPSAibG9nb24iLAoKICAgICAgICBbRGF0ZVRpbWVdCiAgICAgICAgJERhdGVTdGFydCA9IFtEYXRlVGltZV06OlRvZGF5LkFkZERheXMoLTUpLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgIGlmKCRFdmVudFR5cGUuVG9Mb3dlcigpIC1saWtlICJsb2dvbiIpIHsKICAgICAgICBbSW50MzJbXV0kSUQgPSBAKDQ2MjQpCiAgICB9CiAgICBlbHNlaWYoJEV2ZW50VHlwZS5Ub0xvd2VyKCkgLWxpa2UgInRndCIpIHsKICAgICAgICBbSW50MzJbXV0kSUQgPSBAKDQ3NjgpCiAgICB9CiAgICBlbHNlIHsKICAgICAgICBbSW50MzJbXV0kSUQgPSBAKDQ2MjQsIDQ3NjgpCiAgICB9CgogICAgaWYoJENyZWRlbnRpYWwpIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJVc2luZyBhbHRlcm5hdGl2ZSBjcmVkZW50aWFscyIKICAgICAgICAkQXJndW1lbnRzID0gQHsKICAgICAgICAgICAgJ0NvbXB1dGVyTmFtZScgPSAkQ29tcHV0ZXJOYW1lOwogICAgICAgICAgICAnQ3JlZGVudGlhbCcgPSAkQ3JlZGVudGlhbDsKICAgICAgICAgICAgJ0ZpbHRlckhhc2hUYWJsZScgPSBAeyBMb2dOYW1lID0gJ1NlY3VyaXR5JzsgSUQ9JElEOyBTdGFydFRpbWU9JERhdGVTdGFydH07CiAgICAgICAgICAgICdFcnJvckFjdGlvbicgPSAnU2lsZW50bHlDb250aW51ZSc7CiAgICAgICAgfQogICAgfQogICAgZWxzZSB7CiAgICAgICAgJEFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICdDb21wdXRlck5hbWUnID0gJENvbXB1dGVyTmFtZTsKICAgICAgICAgICAgJ0ZpbHRlckhhc2hUYWJsZScgPSBAeyBMb2dOYW1lID0gJ1NlY3VyaXR5JzsgSUQ9JElEOyBTdGFydFRpbWU9JERhdGVTdGFydH07CiAgICAgICAgICAgICdFcnJvckFjdGlvbicgPSAnU2lsZW50bHlDb250aW51ZSc7ICAgICAgICAgICAgCiAgICAgICAgfQogICAgfQoKICAgICMgZ3JhYiBhbGwgZXZlbnRzIG1hdGNoaW5nIG91ciBmaWx0ZXIgZm9yIHRoZSBzcGVjaWZpZWQgaG9zdAogICAgR2V0LVdpbkV2ZW50IEBBcmd1bWVudHMgfCBGb3JFYWNoLU9iamVjdCB7CgogICAgICAgIGlmKCRJRCAtY29udGFpbnMgNDYyNCkgeyAgICAKICAgICAgICAgICAgIyBmaXJzdCBwYXJzZSBhbmQgY2hlY2sgdGhlIGxvZ29uIGV2ZW50IHR5cGUuIFRoaXMgY291bGQgYmUgbGF0ZXIgYWRhcHRlZCBhbmQgdGVzdGVkIGZvciBSRFAgbG9nb25zICh0eXBlIDEwKQogICAgICAgICAgICBpZigkXy5tZXNzYWdlIC1tYXRjaCAnKD9zKSg/PD1Mb2dvbiBUeXBlOikuKj8oPz0oSW1wZXJzb25hdGlvbiBMZXZlbDp8TmV3IExvZ29uOikpJykgewogICAgICAgICAgICAgICAgaWYoJE1hdGNoZXMpIHsKICAgICAgICAgICAgICAgICAgICAkTG9nb25UeXBlID0gJE1hdGNoZXNbMF0udHJpbSgpCiAgICAgICAgICAgICAgICAgICAgJE1hdGNoZXMgPSAkTnVsbAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJExvZ29uVHlwZSA9ICIiCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgaW50ZXJhY3RpdmUgbG9nb25zIG9yIGRvbWFpbiBsb2dvbnMKICAgICAgICAgICAgaWYgKCgkTG9nb25UeXBlIC1lcSAyKSAtb3IgKCRMb2dvblR5cGUgLWVxIDMpKSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICMgcGFyc2UgYW5kIHN0b3JlIHRoZSBhY2NvdW50IHVzZWQgYW5kIHRoZSBhZGRyZXNzIHRoZXkgY2FtZSBmcm9tCiAgICAgICAgICAgICAgICAgICAgaWYoJF8ubWVzc2FnZSAtbWF0Y2ggJyg/cykoPzw9TmV3IExvZ29uOikuKj8oPz1Qcm9jZXNzIEluZm9ybWF0aW9uOiknKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRNYXRjaGVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVXNlck5hbWUgPSAkTWF0Y2hlc1swXS5zcGxpdCgiYG4iKVsyXS5zcGxpdCgiOiIpWzFdLnRyaW0oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpbiA9ICRNYXRjaGVzWzBdLnNwbGl0KCJgbiIpWzNdLnNwbGl0KCI6IilbMV0udHJpbSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWF0Y2hlcyA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYoJF8ubWVzc2FnZSAtbWF0Y2ggJyg/cykoPzw9TmV0d29yayBJbmZvcm1hdGlvbjopLio/KD89U291cmNlIFBvcnQ6KScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJE1hdGNoZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRBZGRyZXNzID0gJE1hdGNoZXNbMF0uc3BsaXQoImBuIilbMl0uc3BsaXQoIjoiKVsxXS50cmltKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNYXRjaGVzID0gJE51bGwKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIyBvbmx5IGFkZCBpZiB0aGVyZSB3YXMgYWNjb3VudCBpbmZvcm1hdGlvbiBub3QgZm9yIGEgbWFjaGluZSBvciBhbm9ueW1vdXMgbG9nb24KICAgICAgICAgICAgICAgICAgICBpZiAoJFVzZXJOYW1lIC1hbmQgKC1ub3QgJFVzZXJOYW1lLmVuZHNXaXRoKCckJykpIC1hbmQgKCRVc2VyTmFtZSAtbmUgJ0FOT05ZTU9VUyBMT0dPTicpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRMb2dvbkV2ZW50UHJvcGVydGllcyA9IEB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRG9tYWluJyA9ICREb21haW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb21wdXRlck5hbWUnID0gJENvbXB1dGVyTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXJuYW1lJyA9ICRVc2VyTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FkZHJlc3MnID0gJEFkZHJlc3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdJRCcgPSAnNDYyNCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdMb2dvblR5cGUnID0gJExvZ29uVHlwZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1RpbWUnID0gJF8uVGltZUNyZWF0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBOZXctT2JqZWN0IC1UeXBlTmFtZSBQU09iamVjdCAtUHJvcGVydHkgJExvZ29uRXZlbnRQcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgIFdyaXRlLURlYnVnICJFcnJvciBwYXJzaW5nIGV2ZW50IGxvZ3M6ICRfIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmKCRJRCAtY29udGFpbnMgNDc2OCkgewogICAgICAgICAgICAjIHRoZSBUR1QgZXZlbnQgdHlwZQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgaWYoJF8ubWVzc2FnZSAtbWF0Y2ggJyg/cykoPzw9QWNjb3VudCBJbmZvcm1hdGlvbjopLio/KD89U2VydmljZSBJbmZvcm1hdGlvbjopJykgewogICAgICAgICAgICAgICAgICAgIGlmKCRNYXRjaGVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRVc2VybmFtZSA9ICRNYXRjaGVzWzBdLnNwbGl0KCJgbiIpWzFdLnNwbGl0KCI6IilbMV0udHJpbSgpCiAgICAgICAgICAgICAgICAgICAgICAgICREb21haW4gPSAkTWF0Y2hlc1swXS5zcGxpdCgiYG4iKVsyXS5zcGxpdCgiOiIpWzFdLnRyaW0oKQogICAgICAgICAgICAgICAgICAgICAgICAkTWF0Y2hlcyA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmKCRfLm1lc3NhZ2UgLW1hdGNoICcoP3MpKD88PU5ldHdvcmsgSW5mb3JtYXRpb246KS4qPyg/PUFkZGl0aW9uYWwgSW5mb3JtYXRpb246KScpIHsKICAgICAgICAgICAgICAgICAgICBpZigkTWF0Y2hlcykgewogICAgICAgICAgICAgICAgICAgICAgICAkQWRkcmVzcyA9ICRNYXRjaGVzWzBdLnNwbGl0KCJgbiIpWzFdLnNwbGl0KCI6IilbLTFdLnRyaW0oKQogICAgICAgICAgICAgICAgICAgICAgICAkTWF0Y2hlcyA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRMb2dvbkV2ZW50UHJvcGVydGllcyA9IEB7CiAgICAgICAgICAgICAgICAgICAgJ0RvbWFpbicgPSAkRG9tYWluCiAgICAgICAgICAgICAgICAgICAgJ0NvbXB1dGVyTmFtZScgPSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgJ1VzZXJuYW1lJyA9ICRVc2VyTmFtZQogICAgICAgICAgICAgICAgICAgICdBZGRyZXNzJyA9ICRBZGRyZXNzCiAgICAgICAgICAgICAgICAgICAgJ0lEJyA9ICc0NzY4JwogICAgICAgICAgICAgICAgICAgICdMb2dvblR5cGUnID0gJycKICAgICAgICAgICAgICAgICAgICAnVGltZScgPSAkXy5UaW1lQ3JlYXRlZAogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIE5ldy1PYmplY3QgLVR5cGVOYW1lIFBTT2JqZWN0IC1Qcm9wZXJ0eSAkTG9nb25FdmVudFByb3BlcnRpZXMKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1EZWJ1ZyAiRXJyb3IgcGFyc2luZyBldmVudCBsb2dzOiAkXyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1PYmplY3RBY2wgewo8IwogICAgLlNZTk9QU0lTCiAgICAgICAgUmV0dXJucyB0aGUgQUNMcyBhc3NvY2lhdGVkIHdpdGggYSBzcGVjaWZpYyBhY3RpdmUgZGlyZWN0b3J5IG9iamVjdC4KCiAgICAgICAgVGhhbmtzIFNlYW4gTWV0Y2FsZiAoQHB5cm90ZWszKSBmb3IgdGhlIGlkZWEgYW5kIGd1aWRhbmNlLgoKICAgIC5QQVJBTUVURVIgU2FtQWNjb3VudE5hbWUKCiAgICAgICAgT2JqZWN0IG5hbWUgdG8gZmlsdGVyIGZvci4gICAgICAgIAoKICAgIC5QQVJBTUVURVIgTmFtZQoKICAgICAgICBPYmplY3QgbmFtZSB0byBmaWx0ZXIgZm9yLgoKICAgIC5QQVJBTUVURVIgRGlzdGluZ3Vpc2hlZE5hbWUKCiAgICAgICAgT2JqZWN0IGRpc3Rpbmd1aXNoZWQgbmFtZSB0byBmaWx0ZXIgZm9yLgoKICAgIC5QQVJBTUVURVIgUmVzb2x2ZUdVSURzCgogICAgICAgIFN3aXRjaC4gUmVzb2x2ZSBHVUlEcyB0byB0aGVpciBkaXNwbGF5IG5hbWVzLgoKICAgIC5QQVJBTUVURVIgRmlsdGVyCgogICAgICAgIEEgY3VzdG9taXplZCBsZGFwIGZpbHRlciBzdHJpbmcgdG8gdXNlLCBlLmcuICIoZGVzY3JpcHRpb249KmFkbWluKikiCiAgICAgCiAgICAuUEFSQU1FVEVSIEFEU3BhdGgKCiAgICAgICAgVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoLCBlLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiCiAgICAgICAgVXNlZnVsIGZvciBPVSBxdWVyaWVzLgoKICAgIC5QQVJBTUVURVIgQURTcHJlZml4CgogICAgICAgIFByZWZpeCB0byBzZXQgZm9yIHRoZSBzZWFyY2hlciAobGlrZSAiQ049U2l0ZXMsQ049Q29uZmlndXJhdGlvbiIpCgogICAgLlBBUkFNRVRFUiBSaWdodHNGaWx0ZXIKCiAgICAgICAgT25seSByZXR1cm4gcmVzdWx0cyB3aXRoIHRoZSBhc3NvY2lhdGVkIHJpZ2h0cywgIkFsbCIsICJSZXNldFBhc3N3b3JkIiwiV3JpdGVNZW1iZXJzIgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gdXNlIGZvciB0aGUgcXVlcnksIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1PYmplY3RBY2wgLVNhbUFjY291bnROYW1lIG1hdHQuYWRtaW4gLWRvbWFpbiB0ZXN0bGFiLmxvY2FsCiAgICAgICAgCiAgICAgICAgR2V0IHRoZSBBQ0xzIGZvciB0aGUgbWF0dC5hZG1pbiB1c2VyIGluIHRoZSB0ZXN0bGFiLmxvY2FsIGRvbWFpbgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU9iamVjdEFjbCAtU2FtQWNjb3VudE5hbWUgbWF0dC5hZG1pbiAtZG9tYWluIHRlc3RsYWIubG9jYWwgLVJlc29sdmVHVUlEcwogICAgICAgIAogICAgICAgIEdldCB0aGUgQUNMcyBmb3IgdGhlIG1hdHQuYWRtaW4gdXNlciBpbiB0aGUgdGVzdGxhYi5sb2NhbCBkb21haW4gYW5kCiAgICAgICAgcmVzb2x2ZSByZWxldmFudCBHVUlEcyB0byB0aGVpciBkaXNwbGF5IG5hbWVzLgojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2FtQWNjb3VudE5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE5hbWUgPSAiKiIsCgogICAgICAgIFtBbGlhcygnRE4nKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREaXN0aW5ndWlzaGVkTmFtZSA9ICIqIiwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUmVzb2x2ZUdVSURzLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRGaWx0ZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3ByZWZpeCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbVmFsaWRhdGVTZXQoIkFsbCIsIlJlc2V0UGFzc3dvcmQiLCJXcml0ZU1lbWJlcnMiKV0KICAgICAgICAkUmlnaHRzRmlsdGVyLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMAogICAgKQoKICAgIGJlZ2luIHsKICAgICAgICAkU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1BRFNwYXRoICRBRFNwYXRoIC1BRFNwcmVmaXggJEFEU3ByZWZpeCAtUGFnZVNpemUgJFBhZ2VTaXplIAoKICAgICAgICAjIGdldCBhIEdVSUQgLT4gbmFtZSBtYXBwaW5nCiAgICAgICAgaWYoJFJlc29sdmVHVUlEcykgewogICAgICAgICAgICAkR1VJRHMgPSBHZXQtR1VJRE1hcCAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgICAgIH0KICAgIH0KCiAgICBwcm9jZXNzIHsKCiAgICAgICAgaWYgKCRTZWFyY2hlcikgewoKICAgICAgICAgICAgaWYoJFNhbUFjY291bnROYW1lKSB7CiAgICAgICAgICAgICAgICAkU2VhcmNoZXIuZmlsdGVyPSIoJihzYW1hY2NvdW50bmFtZT0kU2FtQWNjb3VudE5hbWUpKG5hbWU9JE5hbWUpKGRpc3Rpbmd1aXNoZWRuYW1lPSREaXN0aW5ndWlzaGVkTmFtZSkkRmlsdGVyKSIgIAogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJFNlYXJjaGVyLmZpbHRlcj0iKCYobmFtZT0kTmFtZSkoZGlzdGluZ3Vpc2hlZG5hbWU9JERpc3Rpbmd1aXNoZWROYW1lKSRGaWx0ZXIpIiAgCiAgICAgICAgICAgIH0KICAKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICRTZWFyY2hlci5GaW5kQWxsKCkgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAkT2JqZWN0ID0gW2Fkc2ldKCRfLnBhdGgpCgogICAgICAgICAgICAgICAgICAgIGlmKCRPYmplY3QuZGlzdGluZ3Vpc2hlZG5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJEFjY2VzcyA9ICRPYmplY3QuUHNCYXNlLk9iamVjdFNlY3VyaXR5LmFjY2VzcwogICAgICAgICAgICAgICAgICAgICAgICAkQWNjZXNzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8gfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnT2JqZWN0RE4nICRPYmplY3QuZGlzdGluZ3Vpc2hlZG5hbWVbMF0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkT2JqZWN0Lm9iamVjdHNpZFswXSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFMgPSAoTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllcigkT2JqZWN0Lm9iamVjdHNpZFswXSwwKSkuVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTID0gJE51bGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8gfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnT2JqZWN0U0lEJyAkUwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgaWYoJFJpZ2h0c0ZpbHRlcikgewogICAgICAgICAgICAgICAgICAgICAgICAkR3VpZEZpbHRlciA9IFN3aXRjaCAoJFJpZ2h0c0ZpbHRlcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlJlc2V0UGFzc3dvcmQiIHsgIjAwMjk5NTcwLTI0NmQtMTFkMC1hNzY4LTAwYWEwMDZlMDUyOSIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIldyaXRlTWVtYmVycyIgeyAiYmY5Njc5YzAtMGRlNi0xMWQwLWEyODUtMDBhYTAwMzA0OWUyIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0IHsgIjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCJ9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJF8uT2JqZWN0VHlwZSAtZXEgJEd1aWRGaWx0ZXIpIHsgJF8gfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJF8KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgIGlmKCRHVUlEcykgewogICAgICAgICAgICAgICAgICAgICAgICAjIGlmIHdlJ3JlIHJlc29sdmluZyBHVUlEcywgbWFwIHRoZW0gdGhlbSB0byB0aGUgcmVzb2x2ZWQgaGFzaCB0YWJsZQogICAgICAgICAgICAgICAgICAgICAgICAkQWNsUHJvcGVydGllcyA9IEB7fQogICAgICAgICAgICAgICAgICAgICAgICAkXy5wc29iamVjdC5wcm9wZXJ0aWVzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICgkXy5OYW1lIC1lcSAnT2JqZWN0VHlwZScpIC1vciAoJF8uTmFtZSAtZXEgJ0luaGVyaXRlZE9iamVjdFR5cGUnKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQWNsUHJvcGVydGllc1skXy5OYW1lXSA9ICRHVUlEU1skXy5WYWx1ZS50b1N0cmluZygpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRBY2xQcm9wZXJ0aWVzWyRfLk5hbWVdID0gJF8uVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQWNsUHJvcGVydGllc1skXy5OYW1lXSA9ICRfLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5ICRBY2xQcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgeyAkXyB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAkXwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gQWRkLU9iamVjdEFjbCB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgQWRkcyBhbiBBQ0wgZm9yIGEgc3BlY2lmaWMgYWN0aXZlIGRpcmVjdG9yeSBvYmplY3QuCiAgICAgICAgCiAgICAgICAgQWRtaW5TREhvbGRlciBBQ0wgYXBwcm9hY2ggZnJvbSBTZWFuIE1ldGNhbGYgKEBweXJvdGVrMykKICAgICAgICAgICAgaHR0cHM6Ly9hZHNlY3VyaXR5Lm9yZy8/cD0xOTA2CgogICAgICAgIEFDRSBzZXR0aW5nIG1ldGhvZCBhZGFwdGVkIGZyb20gaHR0cHM6Ly9zb2NpYWwudGVjaG5ldC5taWNyb3NvZnQuY29tL0ZvcnVtcy93aW5kb3dzc2VydmVyL2VuLVVTL2RmM2JmZDMzLWMwNzAtNGE5Yy1iZTk4LWM0ZGE2ZTU5MWEwYS9mb3J1bS1mYXEtdXNpbmctcG93ZXJzaGVsbC10by1hc3NpZ24tcGVybWlzc2lvbnMtb24tYWN0aXZlLWRpcmVjdG9yeS1vYmplY3RzLgoKICAgICAgICAnUmVzZXRQYXNzd29yZCcgZG9lc24ndCBuZWVkIHRvIGtub3cgdGhlIHVzZXIncyBjdXJyZW50IHBhc3N3b3JkCiAgICAgICAgJ1dyaXRlTWVtYmVycycgYWxsb3dzIGZvciB0aGUgbW9kaWZpY2F0aW9uIG9mIGdyb3VwIG1lbWJlcnNoaXAKCiAgICAuUEFSQU1FVEVSIFRhcmdldFNhbUFjY291bnROYW1lCgogICAgICAgIFRhcmdldCBvYmplY3QgbmFtZSB0byBmaWx0ZXIgZm9yLiAgICAgICAgCgogICAgLlBBUkFNRVRFUiBUYXJnZXROYW1lCgogICAgICAgIFRhcmdldCBvYmplY3QgbmFtZSB0byBmaWx0ZXIgZm9yLgoKICAgIC5QQVJBTUVURVIgVGFyZ2V0RGlzdGluZ3Vpc2hlZE5hbWUKCiAgICAgICAgVGFyZ2V0IG9iamVjdCBkaXN0aW5ndWlzaGVkIG5hbWUgdG8gZmlsdGVyIGZvci4KCiAgICAuUEFSQU1FVEVSIFRhcmdldEZpbHRlcgoKICAgICAgICBBIGN1c3RvbWl6ZWQgbGRhcCBmaWx0ZXIgc3RyaW5nIHRvIHVzZSB0byBmaW5kIGEgdGFyZ2V0LCBlLmcuICIoZGVzY3JpcHRpb249KmFkbWluKikiCgogICAgLlBBUkFNRVRFUiBUYXJnZXRBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSBmb3IgdGhlIHRhcmdldCwgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgoKICAgIC5QQVJBTUVURVIgVGFyZ2V0QURTcHJlZml4CgogICAgICAgIFByZWZpeCB0byBzZXQgZm9yIHRoZSB0YXJnZXQgc2VhcmNoZXIgKGxpa2UgIkNOPVNpdGVzLENOPUNvbmZpZ3VyYXRpb24iKQoKICAgIC5QQVJBTUVURVIgUHJpbmNpcGFsU0lECgogICAgICAgIFRoZSBTSUQgb2YgdGhlIHByaW5jaXBhbCBvYmplY3QgdG8gYWRkIGZvciBhY2Nlc3MuCgogICAgLlBBUkFNRVRFUiBQcmluY2lwYWxOYW1lCgogICAgICAgIFRoZSBuYW1lIG9mIHRoZSBwcmluY2lwYWwgb2JqZWN0IHRvIGFkZCBmb3IgYWNjZXNzLgoKICAgIC5QQVJBTUVURVIgUHJpbmNpcGFsU2FtQWNjb3VudE5hbWUKCiAgICAgICAgVGhlIHNhbUFjY291bnROYW1lIG9mIHRoZSBwcmluY2lwYWwgb2JqZWN0IHRvIGFkZCBmb3IgYWNjZXNzLgoKICAgIC5QQVJBTUVURVIgUmlnaHRzCgogICAgICAgIFJpZ2h0cyB0byBhZGQgZm9yIHRoZSBwcmluY2lwYWwsICJBbGwiLCJSZXNldFBhc3N3b3JkIiwiV3JpdGVNZW1iZXJzIiwiRENTeW5jIgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gdXNlIGZvciB0aGUgdGFyZ2V0IHF1ZXJ5LCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBQYWdlU2l6ZQoKICAgICAgICBUaGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgogICAgLkVYQU1QTEUKCiAgICAgICAgQWRkLU9iamVjdEFjbCAtVGFyZ2V0U2FtQWNjb3VudE5hbWUgbWF0dCAtUHJpbmNpcGFsU2FtQWNjb3VudE5hbWUgam9obgoKICAgICAgICBHcmFudHMgJ2pvaG4nIGFsbCBmdWxsIGFjY2VzcyByaWdodHMgdG8gdGhlICdtYXR0JyBhY2NvdW50LgoKICAgIC5FWEFNUExFCgogICAgICAgIEFkZC1PYmplY3RBY2wgLVRhcmdldFNhbUFjY291bnROYW1lIG1hdHQgLVByaW5jaXBhbFNhbUFjY291bnROYW1lIGpvaG4gLVJpZ2h0cyBSZXNldFBhc3N3b3JkCgogICAgICAgIEdyYW50cyAnam9obicgdGhlIHJpZ2h0IHRvIHJlc2V0IHRoZSBwYXNzd29yZCBmb3IgdGhlICdtYXR0JyBhY2NvdW50LgoKICAgIC5MSU5LCgogICAgICAgIGh0dHBzOi8vYWRzZWN1cml0eS5vcmcvP3A9MTkwNgogICAgICAgIAogICAgICAgIGh0dHBzOi8vc29jaWFsLnRlY2huZXQubWljcm9zb2Z0LmNvbS9Gb3J1bXMvd2luZG93c3NlcnZlci9lbi1VUy9kZjNiZmQzMy1jMDcwLTRhOWMtYmU5OC1jNGRhNmU1OTFhMGEvZm9ydW0tZmFxLXVzaW5nLXBvd2Vyc2hlbGwtdG8tYXNzaWduLXBlcm1pc3Npb25zLW9uLWFjdGl2ZS1kaXJlY3Rvcnktb2JqZWN0cz9mb3J1bT13aW5zZXJ2ZXJwb3dlcnNoZWxsCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbU3RyaW5nXQogICAgICAgICRUYXJnZXRTYW1BY2NvdW50TmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVGFyZ2V0TmFtZSA9ICIqIiwKCiAgICAgICAgW0FsaWFzKCdETicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRhcmdldERpc3Rpbmd1aXNoZWROYW1lID0gIioiLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRUYXJnZXRGaWx0ZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRhcmdldEFEU3BhdGgsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRhcmdldEFEU3ByZWZpeCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbVmFsaWRhdGVQYXR0ZXJuKCdeUy0xLTUtMjEtWzAtOV0rLVswLTldKy1bMC05XSstWzAtOV0rJyldCiAgICAgICAgJFByaW5jaXBhbFNJRCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkUHJpbmNpcGFsTmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkUHJpbmNpcGFsU2FtQWNjb3VudE5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlU2V0KCJBbGwiLCJSZXNldFBhc3N3b3JkIiwiV3JpdGVNZW1iZXJzIiwiRENTeW5jIildCiAgICAgICAgJFJpZ2h0cyA9ICJBbGwiLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRSaWdodHNHVUlELAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMAogICAgKQoKICAgIGJlZ2luIHsKICAgICAgICAkU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1BRFNwYXRoICRUYXJnZXRBRFNwYXRoIC1BRFNwcmVmaXggJFRhcmdldEFEU3ByZWZpeCAtUGFnZVNpemUgJFBhZ2VTaXplCgogICAgICAgIGlmKCEkUHJpbmNpcGFsU0lEKSB7CiAgICAgICAgICAgICRQcmluY2lwYWwgPSBHZXQtQURPYmplY3QgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1OYW1lICRQcmluY2lwYWxOYW1lIC1TYW1BY2NvdW50TmFtZSAkUHJpbmNpcGFsU2FtQWNjb3VudE5hbWUgLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgICAgICAgICAKICAgICAgICAgICAgaWYoISRQcmluY2lwYWwpIHsKICAgICAgICAgICAgICAgIHRocm93ICJFcnJvciByZXNvbHZpbmcgcHJpbmNpcGFsIgogICAgICAgICAgICB9CiAgICAgICAgICAgICRQcmluY2lwYWxTSUQgPSAkUHJpbmNpcGFsLm9iamVjdHNpZAogICAgICAgIH0KICAgICAgICBpZighJFByaW5jaXBhbFNJRCkgewogICAgICAgICAgICB0aHJvdyAiRXJyb3IgcmVzb2x2aW5nIHByaW5jaXBhbCIKICAgICAgICB9CiAgICB9CgogICAgcHJvY2VzcyB7CgogICAgICAgIGlmICgkU2VhcmNoZXIpIHsKCiAgICAgICAgICAgIGlmKCRUYXJnZXRTYW1BY2NvdW50TmFtZSkgewogICAgICAgICAgICAgICAgJFNlYXJjaGVyLmZpbHRlcj0iKCYoc2FtYWNjb3VudG5hbWU9JFRhcmdldFNhbUFjY291bnROYW1lKShuYW1lPSRUYXJnZXROYW1lKShkaXN0aW5ndWlzaGVkbmFtZT0kVGFyZ2V0RGlzdGluZ3Vpc2hlZE5hbWUpJFRhcmdldEZpbHRlcikiICAKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRTZWFyY2hlci5maWx0ZXI9IigmKG5hbWU9JFRhcmdldE5hbWUpKGRpc3Rpbmd1aXNoZWRuYW1lPSRUYXJnZXREaXN0aW5ndWlzaGVkTmFtZSkkVGFyZ2V0RmlsdGVyKSIgIAogICAgICAgICAgICB9CiAgCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkU2VhcmNoZXIuRmluZEFsbCgpIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgIyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9zb2NpYWwudGVjaG5ldC5taWNyb3NvZnQuY29tL0ZvcnVtcy93aW5kb3dzc2VydmVyL2VuLVVTL2RmM2JmZDMzLWMwNzAtNGE5Yy1iZTk4LWM0ZGE2ZTU5MWEwYS9mb3J1bS1mYXEtdXNpbmctcG93ZXJzaGVsbC10by1hc3NpZ24tcGVybWlzc2lvbnMtb24tYWN0aXZlLWRpcmVjdG9yeS1vYmplY3RzCgogICAgICAgICAgICAgICAgICAgICRUYXJnZXRETiA9ICRfLlByb3BlcnRpZXMuZGlzdGluZ3Vpc2hlZG5hbWUKCiAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5ID0gW1N5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuSWRlbnRpdHlSZWZlcmVuY2VdIChbU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXJdJFByaW5jaXBhbFNJRCkKICAgICAgICAgICAgICAgICAgICAkSW5oZXJpdGFuY2VUeXBlID0gW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnlTZWN1cml0eUluaGVyaXRhbmNlXSAiTm9uZSIKICAgICAgICAgICAgICAgICAgICAkQ29udHJvbFR5cGUgPSBbU3lzdGVtLlNlY3VyaXR5LkFjY2Vzc0NvbnRyb2wuQWNjZXNzQ29udHJvbFR5cGVdICJBbGxvdyIKICAgICAgICAgICAgICAgICAgICAkQUNFcyA9IEAoKQoKICAgICAgICAgICAgICAgICAgICBpZigkUmlnaHRzR1VJRCkgewogICAgICAgICAgICAgICAgICAgICAgICAkR1VJRHMgPSBAKCRSaWdodHNHVUlEKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJEdVSURzID0gU3dpdGNoICgkUmlnaHRzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFJlc2V0UGFzc3dvcmQgZG9lc24ndCBuZWVkIHRvIGtub3cgdGhlIHVzZXIncyBjdXJyZW50IHBhc3N3b3JkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiUmVzZXRQYXNzd29yZCIgeyAiMDAyOTk1NzAtMjQ2ZC0xMWQwLWE3NjgtMDBhYTAwNmUwNTI5IiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGFsbG93cyBmb3IgdGhlIG1vZGlmaWNhdGlvbiBvZiBncm91cCBtZW1iZXJzaGlwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiV3JpdGVNZW1iZXJzIiB7ICJiZjk2NzljMC0wZGU2LTExZDAtYTI4NS0wMGFhMDAzMDQ5ZTIiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgJ0RTLVJlcGxpY2F0aW9uLUdldC1DaGFuZ2VzJyA9IDExMzFmNmFhLTljMDctMTFkMS1mNzlmLTAwYzA0ZmMyZGNkMgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAnRFMtUmVwbGljYXRpb24tR2V0LUNoYW5nZXMtQWxsJyA9IDExMzFmNmFkLTljMDctMTFkMS1mNzlmLTAwYzA0ZmMyZGNkMgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAnRFMtUmVwbGljYXRpb24tR2V0LUNoYW5nZXMtSW4tRmlsdGVyZWQtU2V0JyA9IDg5ZTk1Yjc2LTQ0NGQtNGM2Mi05OTFhLTBmYWNiZWRhNjQwYwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAgIHdoZW4gYXBwbGllZCB0byBhIGRvbWFpbidzIEFDTCwgYWxsb3dzIGZvciB0aGUgdXNlIG9mIERDU3luYwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIkRDU3luYyIgeyAiMTEzMWY2YWEtOWMwNy0xMWQxLWY3OWYtMDBjMDRmYzJkY2QyIiwgIjExMzFmNmFkLTljMDctMTFkMS1mNzlmLTAwYzA0ZmMyZGNkMiIsICI4OWU5NWI3Ni00NDRkLTRjNjItOTkxYS0wZmFjYmVkYTY0MGMifQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZigkR1VJRHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCgkR1VJRCBpbiAkR1VJRHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICROZXdHVUlEID0gTmV3LU9iamVjdCBHdWlkICRHVUlECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQURSaWdodHMgPSBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeVJpZ2h0c10gIkV4dGVuZGVkUmlnaHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQUNFcyArPSBOZXctT2JqZWN0IFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnlBY2Nlc3NSdWxlICRJZGVudGl0eSwkQURSaWdodHMsJENvbnRyb2xUeXBlLCROZXdHVUlELCRJbmhlcml0YW5jZVR5cGUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBkZWF1bHQgdG8gR2VuZXJpY0FsbCByaWdodHMKICAgICAgICAgICAgICAgICAgICAgICAgJEFEUmlnaHRzID0gW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnlSaWdodHNdICJHZW5lcmljQWxsIgogICAgICAgICAgICAgICAgICAgICAgICAkQUNFcyArPSBOZXctT2JqZWN0IFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnlBY2Nlc3NSdWxlICRJZGVudGl0eSwkQURSaWdodHMsJENvbnRyb2xUeXBlLCRJbmhlcml0YW5jZVR5cGUKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkdyYW50aW5nIHByaW5jaXBhbCAkUHJpbmNpcGFsU0lEICckUmlnaHRzJyBvbiAkKCRfLlByb3BlcnRpZXMuZGlzdGluZ3Vpc2hlZG5hbWUpIgoKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAjIGFkZCBhbGwgdGhlIG5ldyBBQ0VzIHRvIHRoZSBzcGVjaWZpZWQgb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgIEZvckVhY2ggKCRBQ0UgaW4gJEFDRXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkdyYW50aW5nIHByaW5jaXBhbCAkUHJpbmNpcGFsU0lEICckKCRBQ0UuT2JqZWN0VHlwZSknIHJpZ2h0cyBvbiAkKCRfLlByb3BlcnRpZXMuZGlzdGluZ3Vpc2hlZG5hbWUpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE9iamVjdCA9IFthZHNpXSgkXy5wYXRoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE9iamVjdC5Qc0Jhc2UuT2JqZWN0U2VjdXJpdHkuQWRkQWNjZXNzUnVsZSgkQUNFKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE9iamVjdC5Qc0Jhc2UuY29tbWl0Y2hhbmdlcygpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJFcnJvciBncmFudGluZyBwcmluY2lwYWwgJFByaW5jaXBhbFNJRCAnJFJpZ2h0cycgb24gJFRhcmdldEROIDogJF8iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkVycm9yOiAkXyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEludm9rZS1BQ0xTY2FubmVyIHsKPCMKICAgIC5TWU5PUFNJUwogICAgICAgIFNlYXJjaGVzIGZvciBBQ0xzIGZvciBzcGVjaWZhYmxlIEFEIG9iamVjdHMgKGRlZmF1bHQgdG8gYWxsIGRvbWFpbiBvYmplY3RzKQogICAgICAgIHdpdGggYSBkb21haW4gc2lkIG9mID4gLTEwMDAsIGFuZCBoYXZlIG1vZGlmaWFibGUgcmlnaHRzLgoKICAgICAgICBUaGFua3MgU2VhbiBNZXRjYWxmIChAcHlyb3RlazMpIGZvciB0aGUgaWRlYSBhbmQgZ3VpZGFuY2UuCgogICAgLlBBUkFNRVRFUiBTYW1BY2NvdW50TmFtZQoKICAgICAgICBPYmplY3QgbmFtZSB0byBmaWx0ZXIgZm9yLiAgICAgICAgCgogICAgLlBBUkFNRVRFUiBOYW1lCgogICAgICAgIE9iamVjdCBuYW1lIHRvIGZpbHRlciBmb3IuCgogICAgLlBBUkFNRVRFUiBEaXN0aW5ndWlzaGVkTmFtZQoKICAgICAgICBPYmplY3QgZGlzdGluZ3Vpc2hlZCBuYW1lIHRvIGZpbHRlciBmb3IuCgogICAgLlBBUkFNRVRFUiBGaWx0ZXIKCiAgICAgICAgQSBjdXN0b21pemVkIGxkYXAgZmlsdGVyIHN0cmluZyB0byB1c2UsIGUuZy4gIihkZXNjcmlwdGlvbj0qYWRtaW4qKSIKICAgICAKICAgIC5QQVJBTUVURVIgQURTcGF0aAoKICAgICAgICBUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBBRFNwcmVmaXgKCiAgICAgICAgUHJlZml4IHRvIHNldCBmb3IgdGhlIHNlYXJjaGVyIChsaWtlICJDTj1TaXRlcyxDTj1Db25maWd1cmF0aW9uIikKCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBUaGUgZG9tYWluIHRvIHVzZSBmb3IgdGhlIHF1ZXJ5LCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBSZXNvbHZlR1VJRHMKCiAgICAgICAgU3dpdGNoLiBSZXNvbHZlIEdVSURzIHRvIHRoZWlyIGRpc3BsYXkgbmFtZXMuCgogICAgLlBBUkFNRVRFUiBQYWdlU2l6ZQoKICAgICAgICBUaGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBJbnZva2UtQUNMU2Nhbm5lciAtUmVzb2x2ZUdVSURzIHwgRXhwb3J0LUNTViAtTm9UeXBlSW5mb3JtYXRpb24gYWNscy5jc3YKCiAgICAgICAgRW51bWVyYXRlIGFsbCBtb2RpZmFibGUgQUNMcyBpbiB0aGUgY3VycmVudCBkb21haW4sIHJlc29sdmluZyBHVUlEcyB0byBkaXNwbGF5IAogICAgICAgIG5hbWVzLCBhbmQgZXhwb3J0IGV2ZXJ5dGhpbmcgdG8gYSAuY3N2CiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTYW1BY2NvdW50TmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTmFtZSA9ICIqIiwKCiAgICAgICAgW0FsaWFzKCdETicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERpc3Rpbmd1aXNoZWROYW1lID0gIioiLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRGaWx0ZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3ByZWZpeCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZXNvbHZlR1VJRHMsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMAogICAgKQoKICAgICMgR2V0IGFsbCBkb21haW4gQUNMcyB3aXRoIHRoZSBhcHByb3ByaWF0ZSBwYXJhbWV0ZXJzCiAgICBHZXQtT2JqZWN0QUNMIEBQU0JvdW5kUGFyYW1ldGVycyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAjIGFkZCBpbiB0aGUgdHJhbnNsYXRlZCBTSUQgZm9yIHRoZSBvYmplY3QgaWRlbnRpdHkKICAgICAgICAkXyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJZGVudGl0eVNJRCcgKCRfLklkZW50aXR5UmVmZXJlbmNlLlRyYW5zbGF0ZShbU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXJdKS5WYWx1ZSkKICAgICAgICAkXwogICAgfSB8IFdoZXJlLU9iamVjdCB7CiAgICAgICAgIyBjaGVjayBmb3IgYW55IEFDTHMgd2l0aCBTSURzID4gLTEwMDAKICAgICAgICB0cnkgewogICAgICAgICAgICAjIFRPRE86IGNoYW5nZSB0aGlzIHRvIGEgcmVnZXggZm9yIHNwZWVkdXA/CiAgICAgICAgICAgIFtpbnRdKCRfLklkZW50aXR5U2lkLnNwbGl0KCItIilbLTFdKSAtZ2UgMTAwMAogICAgICAgIH0KICAgICAgICBjYXRjaCB7fQogICAgfSB8IFdoZXJlLU9iamVjdCB7CiAgICAgICAgIyBmaWx0ZXIgZm9yIG1vZGlmaWFibGUgcmlnaHRzCiAgICAgICAgKCRfLkFjdGl2ZURpcmVjdG9yeVJpZ2h0cyAtZXEgIkdlbmVyaWNBbGwiKSAtb3IgKCRfLkFjdGl2ZURpcmVjdG9yeVJpZ2h0cyAtbWF0Y2ggIldyaXRlIikgLW9yICgkXy5BY3RpdmVEaXJlY3RvcnlSaWdodHMgLW1hdGNoICJDcmVhdGUiKSAtb3IgKCRfLkFjdGl2ZURpcmVjdG9yeVJpZ2h0cyAtbWF0Y2ggIkRlbGV0ZSIpIC1vciAoKCRfLkFjdGl2ZURpcmVjdG9yeVJpZ2h0cyAtbWF0Y2ggIkV4dGVuZGVkUmlnaHQiKSAtYW5kICgkXy5BY2Nlc3NDb250cm9sVHlwZSAtZXEgIkFsbG93IikpCiAgICB9Cn0KCgpmaWx0ZXIgR2V0LUdVSURNYXAgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEhlbHBlciB0byBidWlsZCBhIGhhc2ggdGFibGUgb2YgW0dVSURdIC0+IHJlc29sdmVkIG5hbWVzCgogICAgICAgIEhlYXZpbHkgYWRhcHRlZCBmcm9tIGh0dHA6Ly9ibG9ncy50ZWNobmV0LmNvbS9iL2FzaGxleW1jZ2xvbmUvYXJjaGl2ZS8yMDEzLzAzLzI1L2FjdGl2ZS1kaXJlY3Rvcnktb3UtcGVybWlzc2lvbnMtcmVwb3J0LWZyZWUtcG93ZXJzaGVsbC1zY3JpcHQtZG93bmxvYWQuYXNweAoKICAgIC5QQVJBTUVURVIgRG9tYWluCiAgICAKICAgICAgICBUaGUgZG9tYWluIHRvIHVzZSBmb3IgdGhlIHF1ZXJ5LCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCiAgICAKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5MSU5LCgogICAgICAgIGh0dHA6Ly9ibG9ncy50ZWNobmV0LmNvbS9iL2FzaGxleW1jZ2xvbmUvYXJjaGl2ZS8yMDEzLzAzLzI1L2FjdGl2ZS1kaXJlY3Rvcnktb3UtcGVybWlzc2lvbnMtcmVwb3J0LWZyZWUtcG93ZXJzaGVsbC1zY3JpcHQtZG93bmxvYWQuYXNweAojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAKICAgICkKCiAgICAkR1VJRHMgPSBAeycwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAnID0gJ0FsbCd9CgogICAgJFNjaGVtYVBhdGggPSAoR2V0LU5ldEZvcmVzdCkuc2NoZW1hLm5hbWUKCiAgICAkU2NoZW1hU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLUFEU3BhdGggJFNjaGVtYVBhdGggLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgaWYoJFNjaGVtYVNlYXJjaGVyKSB7CiAgICAgICAgJFNjaGVtYVNlYXJjaGVyLmZpbHRlciA9ICIoc2NoZW1hSURHVUlEPSopIgogICAgICAgIHRyeSB7CiAgICAgICAgICAgICRTY2hlbWFTZWFyY2hlci5GaW5kQWxsKCkgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICMgY29udmVydCB0aGUgR1VJRAogICAgICAgICAgICAgICAgJEdVSURzWyhOZXctT2JqZWN0IEd1aWQgKCwkXy5wcm9wZXJ0aWVzLnNjaGVtYWlkZ3VpZFswXSkpLkd1aWRdID0gJF8ucHJvcGVydGllcy5uYW1lWzBdCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICBXcml0ZS1EZWJ1ZyAiRXJyb3IgaW4gYnVpbGRpbmcgR1VJRCBtYXA6ICRfIgogICAgICAgIH0KICAgIH0KCiAgICAkUmlnaHRzU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLUFEU3BhdGggJFNjaGVtYVBhdGgucmVwbGFjZSgiU2NoZW1hIiwiRXh0ZW5kZWQtUmlnaHRzIikgLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLVBhZ2VTaXplICRQYWdlU2l6ZSAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgaWYgKCRSaWdodHNTZWFyY2hlcikgewogICAgICAgICRSaWdodHNTZWFyY2hlci5maWx0ZXIgPSAiKG9iamVjdENsYXNzPWNvbnRyb2xBY2Nlc3NSaWdodCkiCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJFJpZ2h0c1NlYXJjaGVyLkZpbmRBbGwoKSB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgIyBjb252ZXJ0IHRoZSBHVUlECiAgICAgICAgICAgICAgICAkR1VJRHNbJF8ucHJvcGVydGllcy5yaWdodHNndWlkWzBdLnRvU3RyaW5nKCldID0gJF8ucHJvcGVydGllcy5uYW1lWzBdCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICBXcml0ZS1EZWJ1ZyAiRXJyb3IgaW4gYnVpbGRpbmcgR1VJRCBtYXA6ICRfIgogICAgICAgIH0KICAgIH0KCiAgICAkR1VJRHMKfQoKCmZ1bmN0aW9uIEdldC1OZXRDb21wdXRlciB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgVGhpcyBmdW5jdGlvbiB1dGlsaXplcyBhZHNpc2VhcmNoZXIgdG8gcXVlcnkgdGhlIGN1cnJlbnQgQUQgY29udGV4dAogICAgICAgIGZvciBjdXJyZW50IGNvbXB1dGVyIG9iamVjdHMuIEJhc2VkIG9mZiBvZiBDYXJsb3MgUGVyZXoncyBBdWRpdC5wc20xCiAgICAgICAgc2NyaXB0IGluIFBvc2gtU2VjTW9kIChsaW5rIGJlbG93KS4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBSZXR1cm4gY29tcHV0ZXJzIHdpdGggYSBzcGVjaWZpYyBuYW1lLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgogICAgLlBBUkFNRVRFUiBTUE4KCiAgICAgICAgUmV0dXJuIGNvbXB1dGVycyB3aXRoIGEgc3BlY2lmaWMgc2VydmljZSBwcmluY2lwYWwgbmFtZSwgd2lsZGNhcmRzIGFjY2VwdGVkLgoKICAgIC5QQVJBTUVURVIgT3BlcmF0aW5nU3lzdGVtCgogICAgICAgIFJldHVybiBjb21wdXRlcnMgd2l0aCBhIHNwZWNpZmljIG9wZXJhdGluZyBzeXN0ZW0sIHdpbGRjYXJkcyBhY2NlcHRlZC4KCiAgICAuUEFSQU1FVEVSIFNlcnZpY2VQYWNrCgogICAgICAgIFJldHVybiBjb21wdXRlcnMgd2l0aCBhIHNwZWNpZmljIHNlcnZpY2UgcGFjaywgd2lsZGNhcmRzIGFjY2VwdGVkLgoKICAgIC5QQVJBTUVURVIgRmlsdGVyCgogICAgICAgIEEgY3VzdG9taXplZCBsZGFwIGZpbHRlciBzdHJpbmcgdG8gdXNlLCBlLmcuICIoZGVzY3JpcHRpb249KmFkbWluKikiCgogICAgLlBBUkFNRVRFUiBQcmludGVycwoKICAgICAgICBTd2l0Y2guIFJldHVybiBvbmx5IHByaW50ZXJzLgoKICAgIC5QQVJBTUVURVIgUGluZwoKICAgICAgICBTd2l0Y2guIFBpbmcgZWFjaCBob3N0IHRvIGVuc3VyZSBpdCdzIHVwIGJlZm9yZSBlbnVtZXJhdGluZy4KCiAgICAuUEFSQU1FVEVSIEZ1bGxEYXRhCgogICAgICAgIFN3aXRjaC4gUmV0dXJuIGZ1bGwgY29tcHV0ZXIgb2JqZWN0cyBpbnN0ZWFkIG9mIGp1c3Qgc3lzdGVtIG5hbWVzICh0aGUgZGVmYXVsdCkuCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byBxdWVyeSBmb3IgY29tcHV0ZXJzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCwgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KICAgIAogICAgLlBBUkFNRVRFUiBTaXRlTmFtZQoKICAgICAgICBUaGUgQUQgU2l0ZSBuYW1lIHRvIHNlYXJjaCBmb3IgY29tcHV0ZXJzLgoKICAgIC5QQVJBTUVURVIgVW5jb25zdHJhaW5lZAoKICAgICAgICBTd2l0Y2guIFJldHVybiBjb21wdXRlciBvYmplY3RzIHRoYXQgaGF2ZSB1bmNvbnN0cmFpbmVkIGRlbGVnYXRpb24uCgogICAgLlBBUkFNRVRFUiBQYWdlU2l6ZQoKICAgICAgICBUaGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRDb21wdXRlcgogICAgICAgIAogICAgICAgIFJldHVybnMgdGhlIGN1cnJlbnQgY29tcHV0ZXJzIGluIGN1cnJlbnQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldENvbXB1dGVyIC1TUE4gbXNzcWwqCiAgICAgICAgCiAgICAgICAgUmV0dXJucyBhbGwgTVMgU1FMIHNlcnZlcnMgb24gdGhlIGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRDb21wdXRlciAtRG9tYWluIHRlc3RpbmcKICAgICAgICAKICAgICAgICBSZXR1cm5zIHRoZSBjdXJyZW50IGNvbXB1dGVycyBpbiAndGVzdGluZycgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldENvbXB1dGVyIC1Eb21haW4gdGVzdGluZyAtRnVsbERhdGEKICAgICAgICAKICAgICAgICBSZXR1cm5zIGZ1bGwgY29tcHV0ZXIgb2JqZWN0cyBpbiB0aGUgJ3Rlc3RpbmcnIGRvbWFpbi4KCiAgICAuTElOSwoKICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vZGFya29wZXJhdG9yL1Bvc2gtU2VjTW9kL2Jsb2IvbWFzdGVyL0F1ZGl0L0F1ZGl0LnBzbTEKIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlck5hbWUgPSAnKicsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNQTiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkT3BlcmF0aW5nU3lzdGVtLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2aWNlUGFjaywKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRmlsdGVyLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRQcmludGVycywKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUGluZywKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRnVsbERhdGEsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQURTcGF0aCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2l0ZU5hbWUsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFVuY29uc3RyYWluZWQsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICBiZWdpbiB7CiAgICAgICAgIyBzbyB0aGlzIGlzbid0IHJlcGVhdGVkIGlmIG11bHRpcGxlIGNvbXB1dGVyIG5hbWVzIGFyZSBwYXNzZWQgb24gdGhlIHBpcGVsaW5lCiAgICAgICAgJENvbXBTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUFEU3BhdGggJEFEU3BhdGggLVBhZ2VTaXplICRQYWdlU2l6ZSAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgfQoKICAgIHByb2Nlc3MgewoKICAgICAgICBpZiAoJENvbXBTZWFyY2hlcikgewoKICAgICAgICAgICAgIyBpZiB3ZSdyZSBjaGVja2luZyBmb3IgdW5jb25zdHJhaW5lZCBkZWxlZ2F0aW9uCiAgICAgICAgICAgIGlmKCRVbmNvbnN0cmFpbmVkKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJTZWFyY2hpbmcgZm9yIGNvbXB1dGVycyB3aXRoIGZvciB1bmNvbnN0cmFpbmVkIGRlbGVnYXRpb24iCiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIodXNlckFjY291bnRDb250cm9sOjEuMi44NDAuMTEzNTU2LjEuNC44MDM6PTUyNDI4OCkiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgIyBzZXQgdGhlIGZpbHRlcnMgZm9yIHRoZSBzZXJhY2hlciBpZiBpdCBleGlzdHMKICAgICAgICAgICAgaWYoJFByaW50ZXJzKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJTZWFyY2hpbmcgZm9yIHByaW50ZXJzIgogICAgICAgICAgICAgICAgIyAkQ29tcFNlYXJjaGVyLmZpbHRlcj0iKCYob2JqZWN0Q2F0ZWdvcnk9cHJpbnRRdWV1ZSkkRmlsdGVyKSIKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIihvYmplY3RDYXRlZ29yeT1wcmludFF1ZXVlKSIKICAgICAgICAgICAgfQogICAgICAgICAgICBpZigkU1BOKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJTZWFyY2hpbmcgZm9yIGNvbXB1dGVycyB3aXRoIFNQTjogJFNQTiIKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIihzZXJ2aWNlUHJpbmNpcGFsTmFtZT0kU1BOKSIKICAgICAgICAgICAgfQogICAgICAgICAgICBpZigkT3BlcmF0aW5nU3lzdGVtKSB7CiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIob3BlcmF0aW5nc3lzdGVtPSRPcGVyYXRpbmdTeXN0ZW0pIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCRTZXJ2aWNlUGFjaykgewogICAgICAgICAgICAgICAgJEZpbHRlciArPSAiKG9wZXJhdGluZ3N5c3RlbXNlcnZpY2VwYWNrPSRTZXJ2aWNlUGFjaykiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJFNpdGVOYW1lKSB7CiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIoc2VydmVycmVmZXJlbmNlYmw9JFNpdGVOYW1lKSIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJENvbXBGaWx0ZXIgPSAiKCYoc0FNQWNjb3VudFR5cGU9ODA1MzA2MzY5KShkbnNob3N0bmFtZT0kQ29tcHV0ZXJOYW1lKSRGaWx0ZXIpIgogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJHZXQtTmV0Q29tcHV0ZXIgZmlsdGVyIDogJyRDb21wRmlsdGVyJyIKICAgICAgICAgICAgJENvbXBTZWFyY2hlci5maWx0ZXIgPSAkQ29tcEZpbHRlcgoKICAgICAgICAgICAgdHJ5IHsKCiAgICAgICAgICAgICAgICAkQ29tcFNlYXJjaGVyLkZpbmRBbGwoKSB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRVcCA9ICRUcnVlCiAgICAgICAgICAgICAgICAgICAgaWYoJFBpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBUT0RPOiBob3cgY2FuIHRoZXNlIHJlc3VsdHMgYmUgcGlwZWQgdG8gcGluZyBmb3IgYSBzcGVlZHVwPwogICAgICAgICAgICAgICAgICAgICAgICAkVXAgPSBUZXN0LUNvbm5lY3Rpb24gLUNvdW50IDEgLVF1aWV0IC1Db21wdXRlck5hbWUgJF8ucHJvcGVydGllcy5kbnNob3N0bmFtZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZigkVXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyByZXR1cm4gZnVsbCBkYXRhIG9iamVjdHMKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRGdWxsRGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBjb252ZXJ0L3Byb2Nlc3MgdGhlIExEQVAgZmllbGRzIGZvciBlYWNoIHJlc3VsdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBvdGhlcndpc2Ugd2UncmUganVzdCByZXR1cm5pbmcgdGhlIEROUyBob3N0IG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfLnByb3BlcnRpZXMuZG5zaG9zdG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJFcnJvcjogJF8iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtQURPYmplY3Qgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFRha2VzIGEgZG9tYWluIFNJRCBhbmQgcmV0dXJucyB0aGUgdXNlciwgZ3JvdXAsIG9yIGNvbXB1dGVyIG9iamVjdAogICAgICAgIGFzc29jaWF0ZWQgd2l0aCBpdC4KCiAgICAuUEFSQU1FVEVSIFNJRAoKICAgICAgICBUaGUgU0lEIG9mIHRoZSBkb21haW4gb2JqZWN0IHlvdSdyZSBxdWVyeWluZyBmb3IuCgogICAgLlBBUkFNRVRFUiBOYW1lCgogICAgICAgIFRoZSBOYW1lIG9mIHRoZSBkb21haW4gb2JqZWN0IHlvdSdyZSBxdWVyeWluZyBmb3IuCgogICAgLlBBUkFNRVRFUiBTYW1BY2NvdW50TmFtZQoKICAgICAgICBUaGUgU2FtQWNjb3VudE5hbWUgb2YgdGhlIGRvbWFpbiBvYmplY3QgeW91J3JlIHF1ZXJ5aW5nIGZvci4gCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byBxdWVyeSBmb3Igb2JqZWN0cywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgQURTcGF0aAoKICAgICAgICBUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBGaWx0ZXIKCiAgICAgICAgQWRkaXRpb25hbCBMREFQIGZpbHRlciBzdHJpbmcgZm9yIHRoZSBxdWVyeS4KCiAgICAuUEFSQU1FVEVSIFJldHVyblJhdwoKICAgICAgICBTd2l0Y2guIFJldHVybiB0aGUgcmF3IG9iamVjdCBpbnN0ZWFkIG9mIHRyYW5zbGF0aW5nIGl0cyBwcm9wZXJ0aWVzLgogICAgICAgIFVzZWQgYnkgU2V0LUFET2JqZWN0IHRvIG1vZGlmeSBvYmplY3QgcHJvcGVydGllcy4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LUFET2JqZWN0IC1TSUQgIlMtMS01LTIxLTI2MjA4OTE4MjktMjQxMTI2MTQ5Ny0xNzczODUzMDg4LTExMTAiCiAgICAgICAgCiAgICAgICAgR2V0IHRoZSBkb21haW4gb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCB0aGUgc3BlY2lmaWVkIFNJRC4KICAgICAgICAKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LUFET2JqZWN0IC1BRFNwYXRoICJDTj1BZG1pblNESG9sZGVyLENOPVN5c3RlbSxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIAogICAgICAgIEdldCB0aGUgQWRtaW5TREhvbGRlciBvYmplY3QgZm9yIHRoZSB0ZXN0bGFiLmxvY2FsIGRvbWFpbi4KIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNJRCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2FtQWNjb3VudE5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQURTcGF0aCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRmlsdGVyLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZXR1cm5SYXcsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKICAgIHByb2Nlc3MgewogICAgICAgIGlmKCRTSUQpIHsKICAgICAgICAgICAgIyBpZiBhIFNJRCBpcyBwYXNzZWQsIHRyeSB0byByZXNvbHZlIGl0IHRvIGEgcmVhY2hhYmxlIGRvbWFpbiBuYW1lIGZvciB0aGUgc2VhcmNoZXIKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICROYW1lID0gQ29udmVydC1TaWRUb05hbWUgJFNJRAogICAgICAgICAgICAgICAgaWYoJE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAkQ2Fub25pY2FsID0gQ29udmVydC1BRE5hbWUgLU9iamVjdE5hbWUgJE5hbWUgLUlucHV0VHlwZSBOVDQgLU91dHB1dFR5cGUgQ2Fub25pY2FsCiAgICAgICAgICAgICAgICAgICAgaWYoJENhbm9uaWNhbCkgewogICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluID0gJENhbm9uaWNhbC5zcGxpdCgiLyIpWzBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJFcnJvciByZXNvbHZpbmcgU0lEICckU0lEJyIKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICROdWxsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkVycm9yIHJlc29sdmluZyBTSUQgJyRTSUQnIDogJF8iCiAgICAgICAgICAgICAgICByZXR1cm4gJE51bGwKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgJE9iamVjdFNlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQURTcGF0aCAkQURTcGF0aCAtUGFnZVNpemUgJFBhZ2VTaXplCgogICAgICAgIGlmKCRPYmplY3RTZWFyY2hlcikgewogICAgICAgICAgICBpZigkU0lEKSB7CiAgICAgICAgICAgICAgICAkT2JqZWN0U2VhcmNoZXIuZmlsdGVyID0gIigmKG9iamVjdHNpZD0kU0lEKSRGaWx0ZXIpIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZigkTmFtZSkgewogICAgICAgICAgICAgICAgJE9iamVjdFNlYXJjaGVyLmZpbHRlciA9ICIoJihuYW1lPSROYW1lKSRGaWx0ZXIpIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZigkU2FtQWNjb3VudE5hbWUpIHsKICAgICAgICAgICAgICAgICRPYmplY3RTZWFyY2hlci5maWx0ZXIgPSAiKCYoc2FtQWNjb3VudE5hbWU9JFNhbUFjY291bnROYW1lKSRGaWx0ZXIpIgogICAgICAgICAgICB9CgogICAgICAgICAgICAkT2JqZWN0U2VhcmNoZXIuRmluZEFsbCgpIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICBpZigkUmV0dXJuUmF3KSB7CiAgICAgICAgICAgICAgICAgICAgJF8KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICMgY29udmVydC9wcm9jZXNzIHRoZSBMREFQIGZpZWxkcyBmb3IgZWFjaCByZXN1bHQKICAgICAgICAgICAgICAgICAgICBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBTZXQtQURPYmplY3Qgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFRha2VzIGEgU0lELCBuYW1lLCBvciBTYW1BY2NvdW50TmFtZSB0byBxdWVyeSBmb3IgYSBzcGVjaWZpZWQKICAgICAgICBkb21haW4gb2JqZWN0LCBhbmQgdGhlbiBzZXRzIGEgc3BlY2lmaWVkICdQcm9wZXJ0eU5hbWUnIHRvIGEKICAgICAgICBzcGVjaWZpZWQgJ1Byb3BlcnR5VmFsdWUnLgoKICAgIC5QQVJBTUVURVIgU0lECgogICAgICAgIFRoZSBTSUQgb2YgdGhlIGRvbWFpbiBvYmplY3QgeW91J3JlIHF1ZXJ5aW5nIGZvci4KCiAgICAuUEFSQU1FVEVSIE5hbWUKCiAgICAgICAgVGhlIE5hbWUgb2YgdGhlIGRvbWFpbiBvYmplY3QgeW91J3JlIHF1ZXJ5aW5nIGZvci4KCiAgICAuUEFSQU1FVEVSIFNhbUFjY291bnROYW1lCgogICAgICAgIFRoZSBTYW1BY2NvdW50TmFtZSBvZiB0aGUgZG9tYWluIG9iamVjdCB5b3UncmUgcXVlcnlpbmcgZm9yLiAKCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBUaGUgZG9tYWluIHRvIHF1ZXJ5IGZvciBvYmplY3RzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBGaWx0ZXIKCiAgICAgICAgQWRkaXRpb25hbCBMREFQIGZpbHRlciBzdHJpbmcgZm9yIHRoZSBxdWVyeS4KCiAgICAuUEFSQU1FVEVSIFByb3BlcnR5TmFtZQoKICAgICAgICBUaGUgcHJvcGVydHkgbmFtZSB0byBzZXQuCgogICAgLlBBUkFNRVRFUiBQcm9wZXJ0eVZhbHVlCgogICAgICAgIFRoZSB2YWx1ZSB0byBzZXQgZm9yIFByb3BlcnR5TmFtZQoKICAgIC5QQVJBTUVURVIgUHJvcGVydHlYb3JWYWx1ZQoKICAgICAgICBJbnRlZ2VyIHZhbHVlIHRvIGJpbmFyeSB4b3IgKC1ieG9yKSB3aXRoIHRoZSBjdXJyZW50IGludCB2YWx1ZS4KCiAgICAuUEFSQU1FVEVSIENsZWFyVmFsdWUKCiAgICAgICAgU3dpdGNoLiBDbGVhciB0aGUgdmFsdWUgb2YgUHJvcGVydHlOYW1lCgogICAgLlBBUkFNRVRFUiBQYWdlU2l6ZQoKICAgICAgICBUaGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IFNldC1BRE9iamVjdCAtU2FtQWNjb3VudE5hbWUgbWF0dC5hZG1pbiAtUHJvcGVydHlOYW1lIGNvdW50cnljb2RlIC1Qcm9wZXJ0eVZhbHVlIDAKICAgICAgICAKICAgICAgICBTZXQgdGhlIGNvdW50cnljb2RlIGZvciBtYXR0LmFkbWluIHRvIDAKCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IFNldC1BRE9iamVjdCAtU2FtQWNjb3VudE5hbWUgbWF0dC5hZG1pbiAtUHJvcGVydHlOYW1lIHVzZXJhY2NvdW50Y29udHJvbCAtUHJvcGVydHlYb3JWYWx1ZSA2NTUzNgogICAgICAgIAogICAgICAgIFNldCB0aGUgcGFzc3dvcmQgbm90IHRvIGV4cGlyZSBvbiBtYXR0LmFkbWluCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbU3RyaW5nXQogICAgICAgICRTSUQsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNhbUFjY291bnROYW1lLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZpbHRlciwKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkUHJvcGVydHlOYW1lLAoKICAgICAgICAkUHJvcGVydHlWYWx1ZSwKCiAgICAgICAgW0ludF0KICAgICAgICAkUHJvcGVydHlYb3JWYWx1ZSwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkQ2xlYXJWYWx1ZSwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgICRBcmd1bWVudHMgPSBAewogICAgICAgICdTSUQnID0gJFNJRAogICAgICAgICdOYW1lJyA9ICROYW1lCiAgICAgICAgJ1NhbUFjY291bnROYW1lJyA9ICRTYW1BY2NvdW50TmFtZQogICAgICAgICdEb21haW4nID0gJERvbWFpbgogICAgICAgICdEb21haW5Db250cm9sbGVyJyA9ICREb21haW5Db250cm9sbGVyCiAgICAgICAgJ0ZpbHRlcicgPSAkRmlsdGVyCiAgICAgICAgJ1BhZ2VTaXplJyA9ICRQYWdlU2l6ZQogICAgICAgICdDcmVkZW50aWFsJyA9ICRDcmVkZW50aWFsCiAgICB9CiAgICAjIHNwbGF0IHRoZSBhcHByb3ByaWF0ZSBhcmd1bWVudHMgdG8gR2V0LUFET2JqZWN0CiAgICAkUmF3T2JqZWN0ID0gR2V0LUFET2JqZWN0IC1SZXR1cm5SYXcgQEFyZ3VtZW50cwogICAgCiAgICB0cnkgewogICAgICAgICMgZ2V0IHRoZSBtb2RpZmlhYmxlIG9iamVjdCBmb3IgdGhpcyBzZWFyY2ggcmVzdWx0CiAgICAgICAgJEVudHJ5ID0gJFJhd09iamVjdC5HZXREaXJlY3RvcnlFbnRyeSgpCiAgICAgICAgCiAgICAgICAgaWYoJENsZWFyVmFsdWUpIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiQ2xlYXJpbmcgdmFsdWUiCiAgICAgICAgICAgICRFbnRyeS4kUHJvcGVydHlOYW1lLmNsZWFyKCkKICAgICAgICAgICAgJEVudHJ5LmNvbW1pdGNoYW5nZXMoKQogICAgICAgIH0KCiAgICAgICAgZWxzZWlmKCRQcm9wZXJ0eVhvclZhbHVlKSB7CiAgICAgICAgICAgICRUeXBlTmFtZSA9ICRFbnRyeS4kUHJvcGVydHlOYW1lWzBdLkdldFR5cGUoKS5uYW1lCgogICAgICAgICAgICAjIFVBQyB2YWx1ZSByZWZlcmVuY2VzLSBodHRwczovL3N1cHBvcnQubWljcm9zb2Z0LmNvbS9lbi11cy9rYi8zMDUxNDQKICAgICAgICAgICAgJFByb3BlcnR5VmFsdWUgPSAkKCRFbnRyeS4kUHJvcGVydHlOYW1lKSAtYnhvciAkUHJvcGVydHlYb3JWYWx1ZSAKICAgICAgICAgICAgJEVudHJ5LiRQcm9wZXJ0eU5hbWUgPSAkUHJvcGVydHlWYWx1ZSAtYXMgJFR5cGVOYW1lICAgICAgIAogICAgICAgICAgICAkRW50cnkuY29tbWl0Y2hhbmdlcygpICAgICAKICAgICAgICB9CgogICAgICAgIGVsc2UgewogICAgICAgICAgICAkRW50cnkucHV0KCRQcm9wZXJ0eU5hbWUsICRQcm9wZXJ0eVZhbHVlKQogICAgICAgICAgICAkRW50cnkuc2V0aW5mbygpCiAgICAgICAgfQogICAgfQogICAgY2F0Y2ggewogICAgICAgIFdyaXRlLVdhcm5pbmcgIkVycm9yIHNldHRpbmcgcHJvcGVydHkgJFByb3BlcnR5TmFtZSB0byB2YWx1ZSAnJFByb3BlcnR5VmFsdWUnIGZvciBvYmplY3QgJCgkUmF3T2JqZWN0LlByb3BlcnRpZXMuc2FtYWNjb3VudG5hbWUpIDogJF8iCiAgICB9Cn0KCgpmdW5jdGlvbiBJbnZva2UtRG93bmdyYWRlQWNjb3VudCB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgU2V0IHJldmVyc2libGUgZW5jcnlwdGlvbiBvbiBhIGdpdmVuIGFjY291bnQgYW5kIHRoZW4gZm9yY2UgdGhlIHBhc3N3b3JkCiAgICAgICAgdG8gYmUgc2V0IG9uIG5leHQgdXNlciBsb2dpbi4gVG8gcmVwYWlyIHVzZSAiLVJlcGFpciIuCgogICAgLlBBUkFNRVRFUiBTYW1BY2NvdW50TmFtZQoKICAgICAgICBUaGUgU2FtQWNjb3VudE5hbWUgb2YgdGhlIGRvbWFpbiBvYmplY3QgeW91J3JlIHF1ZXJ5aW5nIGZvci4gCgogICAgLlBBUkFNRVRFUiBOYW1lCgogICAgICAgIFRoZSBOYW1lIG9mIHRoZSBkb21haW4gb2JqZWN0IHlvdSdyZSBxdWVyeWluZyBmb3IuCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byBxdWVyeSBmb3Igb2JqZWN0cywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgRmlsdGVyCgogICAgICAgIEFkZGl0aW9uYWwgTERBUCBmaWx0ZXIgc3RyaW5nIGZvciB0aGUgcXVlcnkuCgogICAgLlBBUkFNRVRFUiBSZXBhaXIKCiAgICAgICAgU3dpdGNoLiBVbnNldCB0aGUgcmV2ZXJzaWJsZSBlbmNyeXB0aW9uIGZsYWcgYW5kIGZvcmNlIHBhc3N3b3JkIHJlc2V0IGZsYWcuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUz4gSW52b2tlLURvd25ncmFkZUFjY291bnQgLVNhbUFjY291bnROYW1lIGphc29uCgogICAgICAgIFNldCByZXZlcnNpYmxlIGVuY3J5cHRpb24gb24gdGhlICdqYXNvbicgYWNjb3VudCBhbmQgZm9yY2UgdGhlIHBhc3N3b3JkIHRvIGJlIGNoYW5nZWQuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFM+IEludm9rZS1Eb3duZ3JhZGVBY2NvdW50IC1TYW1BY2NvdW50TmFtZSBqYXNvbiAtUmVwYWlyCgogICAgICAgIFVuc2V0IHJldmVyc2libGUgZW5jcnlwdGlvbiBvbiB0aGUgJ2phc29uJyBhY2NvdW50IGFuZCByZW1vdmUgdGhlIGZvcmNlZCBwYXNzd29yZCBjaGFuZ2UuCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnU2FtQWNjb3VudE5hbWUnLCBQb3NpdGlvbj0wLCBWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2FtQWNjb3VudE5hbWUsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdOYW1lJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRGaWx0ZXIsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFJlcGFpciwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICBwcm9jZXNzIHsKICAgICAgICAkQXJndW1lbnRzID0gQHsKICAgICAgICAgICAgJ1NhbUFjY291bnROYW1lJyA9ICRTYW1BY2NvdW50TmFtZQogICAgICAgICAgICAnTmFtZScgPSAkTmFtZQogICAgICAgICAgICAnRG9tYWluJyA9ICREb21haW4KICAgICAgICAgICAgJ0RvbWFpbkNvbnRyb2xsZXInID0gJERvbWFpbkNvbnRyb2xsZXIKICAgICAgICAgICAgJ0ZpbHRlcicgPSAkRmlsdGVyCiAgICAgICAgICAgICdDcmVkZW50aWFsJyA9ICRDcmVkZW50aWFsCiAgICAgICAgfQoKICAgICAgICAjIHNwbGF0IHRoZSBhcHByb3ByaWF0ZSBhcmd1bWVudHMgdG8gR2V0LUFET2JqZWN0CiAgICAgICAgJFVBQ1ZhbHVlcyA9IEdldC1BRE9iamVjdCBAQXJndW1lbnRzIHwgc2VsZWN0IHVzZXJhY2NvdW50Y29udHJvbCB8IENvbnZlcnRGcm9tLVVBQ1ZhbHVlCgogICAgICAgIGlmKCRSZXBhaXIpIHsKCiAgICAgICAgICAgIGlmKCRVQUNWYWx1ZXMuS2V5cyAtY29udGFpbnMgIkVOQ1JZUFRFRF9URVhUX1BXRF9BTExPV0VEIikgewogICAgICAgICAgICAgICAgIyBpZiByZXZlcnNpYmxlIGVuY3J5cHRpb24gaXMgc2V0LCB1bnNldCBpdAogICAgICAgICAgICAgICAgU2V0LUFET2JqZWN0IEBBcmd1bWVudHMgLVByb3BlcnR5TmFtZSB1c2VyYWNjb3VudGNvbnRyb2wgLVByb3BlcnR5WG9yVmFsdWUgMTI4CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgdW5zZXQgdGhlIGZvcmNlZCBwYXNzd29yZCBjaGFuZ2UKICAgICAgICAgICAgU2V0LUFET2JqZWN0IEBBcmd1bWVudHMgLVByb3BlcnR5TmFtZSBwd2RsYXN0c2V0IC1Qcm9wZXJ0eVZhbHVlIC0xCiAgICAgICAgfQoKICAgICAgICBlbHNlIHsKCiAgICAgICAgICAgIGlmKCRVQUNWYWx1ZXMuS2V5cyAtY29udGFpbnMgIkRPTlRfRVhQSVJFX1BBU1NXT1JEIikgewogICAgICAgICAgICAgICAgIyBpZiB0aGUgcGFzc3dvcmQgaXMgc2V0IHRvIG5ldmVyIGV4cGlyZSwgdW5zZXQKICAgICAgICAgICAgICAgIFNldC1BRE9iamVjdCBAQXJndW1lbnRzIC1Qcm9wZXJ0eU5hbWUgdXNlcmFjY291bnRjb250cm9sIC1Qcm9wZXJ0eVhvclZhbHVlIDY1NTM2CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKCRVQUNWYWx1ZXMuS2V5cyAtbm90Y29udGFpbnMgIkVOQ1JZUFRFRF9URVhUX1BXRF9BTExPV0VEIikgewogICAgICAgICAgICAgICAgIyBpZiByZXZlcnNpYmxlIGVuY3J5cHRpb24gaXMgbm90IHNldCwgc2V0IGl0CiAgICAgICAgICAgICAgICBTZXQtQURPYmplY3QgQEFyZ3VtZW50cyAtUHJvcGVydHlOYW1lIHVzZXJhY2NvdW50Y29udHJvbCAtUHJvcGVydHlYb3JWYWx1ZSAxMjgKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBmb3JjZSB0aGUgcGFzc3dvcmQgdG8gYmUgY2hhbmdlZCBvbiBuZXh0IGxvZ2luCiAgICAgICAgICAgIFNldC1BRE9iamVjdCBAQXJndW1lbnRzIC1Qcm9wZXJ0eU5hbWUgcHdkbGFzdHNldCAtUHJvcGVydHlWYWx1ZSAwCiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LUNvbXB1dGVyUHJvcGVydHkgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFJldHVybnMgYSBsaXN0IG9mIGFsbCBjb21wdXRlciBvYmplY3QgcHJvcGVydGllcy4gSWYgYSBwcm9wZXJ0eQogICAgICAgIG5hbWUgaXMgc3BlY2lmaWVkLCBpdCByZXR1cm5zIGFsbCBbY29tcHV0ZXI6cHJvcGVydHldIHZhbHVlcy4KCiAgICAgICAgVGFrZW4gZGlyZWN0bHkgZnJvbSBAb2JzY3VyZXNlYydzIHBvc3Q6CiAgICAgICAgICAgIGh0dHA6Ly9vYnNjdXJlc2VjdXJpdHkuYmxvZ3Nwb3QuY29tLzIwMTQvMDQvQURTSVNlYXJjaGVyLmh0bWwKCiAgICAuUEFSQU1FVEVSIFByb3BlcnRpZXMKCiAgICAgICAgUmV0dXJuIHByb3BlcnR5IG5hbWVzIGZvciBjb21wdXRlcnMuCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byBxdWVyeSBmb3IgY29tcHV0ZXIgcHJvcGVydGllcywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtQ29tcHV0ZXJQcm9wZXJ0eSAtRG9tYWluIHRlc3RpbmcKICAgICAgICAKICAgICAgICBSZXR1cm5zIGFsbCB1c2VyIHByb3BlcnRpZXMgZm9yIGNvbXB1dGVycyBpbiB0aGUgJ3Rlc3RpbmcnIGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1Db21wdXRlclByb3BlcnR5IC1Qcm9wZXJ0aWVzIHNzbixsYXN0bG9nb24sbG9jYXRpb24KICAgICAgICAKICAgICAgICBSZXR1cm5zIGFsbCBhbiBhcnJheSBvZiBjb21wdXRlci9zc24vbGFzdGxvZ2luL2xvY2F0aW9uIGNvbWJpbmF0aW9ucwogICAgICAgIGZvciBjb21wdXRlcnMgaW4gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5MSU5LCgogICAgICAgIGh0dHA6Ly9vYnNjdXJlc2VjdXJpdHkuYmxvZ3Nwb3QuY29tLzIwMTQvMDQvQURTSVNlYXJjaGVyLmh0bWwKIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRQcm9wZXJ0aWVzLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICBpZigkUHJvcGVydGllcykgewogICAgICAgICMgZXh0cmFjdCBvdXQgdGhlIHNldCBvZiBhbGwgcHJvcGVydGllcyBmb3IgZWFjaCBvYmplY3QKICAgICAgICAkUHJvcGVydGllcyA9ICwibmFtZSIgKyAkUHJvcGVydGllcyB8IFNvcnQtT2JqZWN0IC1VbmlxdWUKICAgICAgICBHZXQtTmV0Q29tcHV0ZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1GdWxsRGF0YSAtUGFnZVNpemUgJFBhZ2VTaXplIHwgU2VsZWN0LU9iamVjdCAtUHJvcGVydHkgJFByb3BlcnRpZXMKICAgIH0KICAgIGVsc2UgewogICAgICAgICMgZXh0cmFjdCBvdXQganVzdCB0aGUgcHJvcGVydHkgbmFtZXMKICAgICAgICBHZXQtTmV0Q29tcHV0ZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1GdWxsRGF0YSAtUGFnZVNpemUgJFBhZ2VTaXplIHwgU2VsZWN0LU9iamVjdCAtZmlyc3QgMSB8IEdldC1NZW1iZXIgLU1lbWJlclR5cGUgKlByb3BlcnR5IHwgU2VsZWN0LU9iamVjdCAtUHJvcGVydHkgIk5hbWUiCiAgICB9Cn0KCgpmdW5jdGlvbiBGaW5kLUNvbXB1dGVyRmllbGQgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFNlYXJjaGVzIGNvbXB1dGVyIG9iamVjdCBmaWVsZHMgZm9yIGEgZ2l2ZW4gd29yZCAoZGVmYXVsdCAqcGFzcyopLiBEZWZhdWx0CiAgICAgICAgZmllbGQgYmVpbmcgc2VhcmNoZWQgaXMgJ2Rlc2NyaXB0aW9uJy4KCiAgICAgICAgVGFrZW4gZGlyZWN0bHkgZnJvbSBAb2JzY3VyZXNlYydzIHBvc3Q6CiAgICAgICAgICAgIGh0dHA6Ly9vYnNjdXJlc2VjdXJpdHkuYmxvZ3Nwb3QuY29tLzIwMTQvMDQvQURTSVNlYXJjaGVyLmh0bWwKCiAgICAuUEFSQU1FVEVSIFNlYXJjaFRlcm0KCiAgICAgICAgVGVybSB0byBzZWFyY2ggZm9yLCBkZWZhdWx0IG9mICJwYXNzIi4KCiAgICAuUEFSQU1FVEVSIFNlYXJjaEZpZWxkCgogICAgICAgIFVzZXIgZmllbGQgdG8gc2VhcmNoIGluLCBkZWZhdWx0IG9mICJkZXNjcmlwdGlvbiIuCgogICAgLlBBUkFNRVRFUiBBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCwgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBEb21haW4gdG8gc2VhcmNoIGNvbXB1dGVyIGZpZWxkcyBmb3IsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gRmluZC1Db21wdXRlckZpZWxkIC1TZWFyY2hUZXJtIGJhY2t1cCAtU2VhcmNoRmllbGQgaW5mbwoKICAgICAgICBGaW5kIGNvbXB1dGVyIGFjY291bnRzIHdpdGggImJhY2t1cCIgaW4gdGhlICJpbmZvIiBmaWVsZC4KIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ1Rlcm0nKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hUZXJtID0gJ3Bhc3MnLAoKICAgICAgICBbQWxpYXMoJ0ZpZWxkJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoRmllbGQgPSAnZGVzY3JpcHRpb24nLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwYXRoLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICBwcm9jZXNzIHsKICAgICAgICBHZXQtTmV0Q29tcHV0ZXIgLUFEU3BhdGggJEFEU3BhdGggLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1GdWxsRGF0YSAtRmlsdGVyICIoJFNlYXJjaEZpZWxkPSokU2VhcmNoVGVybSopIiAtUGFnZVNpemUgJFBhZ2VTaXplIHwgU2VsZWN0LU9iamVjdCBzYW1hY2NvdW50bmFtZSwkU2VhcmNoRmllbGQKICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1OZXRPVSB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgR2V0cyBhIGxpc3Qgb2YgYWxsIGN1cnJlbnQgT1VzIGluIGEgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgT1VOYW1lCgogICAgICAgIFRoZSBPVSBuYW1lIHRvIHF1ZXJ5IGZvciwgd2lsZGNhcmRzIGFjY2VwdGVkLgoKICAgIC5QQVJBTUVURVIgR1VJRAoKICAgICAgICBPbmx5IHJldHVybiBPVXMgd2l0aCB0aGUgc3BlY2lmaWVkIEdVSUQgaW4gdGhlaXIgZ3BsaW5rIHByb3BlcnR5LgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gcXVlcnkgZm9yIE9VcywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgQURTcGF0aAoKICAgICAgICBUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBGdWxsRGF0YQoKICAgICAgICBTd2l0Y2guIFJldHVybiBmdWxsIE9VIG9iamVjdHMgaW5zdGVhZCBvZiBqdXN0IG9iamVjdCBuYW1lcyAodGhlIGRlZmF1bHQpLgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0T1UKICAgICAgICAKICAgICAgICBSZXR1cm5zIHRoZSBjdXJyZW50IE9VcyBpbiB0aGUgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldE9VIC1PVU5hbWUgKmFkbWluKiAtRG9tYWluIHRlc3RsYWIubG9jYWwKICAgICAgICAKICAgICAgICBSZXR1cm5zIGFsbCBPVXMgd2l0aCAiYWRtaW4iIGluIHRoZWlyIG5hbWUgaW4gdGhlIHRlc3RsYWIubG9jYWwgZG9tYWluLgoKICAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRPVSAtR1VJRCAxMjMtLi4uCiAgICAgICAgCiAgICAgICAgUmV0dXJucyBhbGwgT1VzIHdpdGggbGlua2VkIHRvIHRoZSBzcGVjaWZpZWQgZ3JvdXAgcG9saWN5IG9iamVjdC4KCiAgICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiAiKmFkbWluKiIsIipzZXJ2ZXIqIiB8IEdldC1OZXRPVQoKICAgICAgICBHZXQgdGhlIGZ1bGwgT1UgbmFtZXMgZm9yIHRoZSBnaXZlbiBzZWFyY2ggdGVybXMgcGlwZWQgb24gdGhlIHBpcGVsaW5lLgojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkT1VOYW1lID0gJyonLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRHVUlELAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEZ1bGxEYXRhLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCgogICAgYmVnaW4gewogICAgICAgICRPVVNlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQURTcGF0aCAkQURTcGF0aCAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICB9CiAgICBwcm9jZXNzIHsKICAgICAgICBpZiAoJE9VU2VhcmNoZXIpIHsKICAgICAgICAgICAgaWYgKCRHVUlEKSB7CiAgICAgICAgICAgICAgICAjIGlmIHdlJ3JlIGZpbHRlcmluZyBmb3IgYSBHVUlEIGluIC5ncGxpbmsKICAgICAgICAgICAgICAgICRPVVNlYXJjaGVyLmZpbHRlcj0iKCYob2JqZWN0Q2F0ZWdvcnk9b3JnYW5pemF0aW9uYWxVbml0KShuYW1lPSRPVU5hbWUpKGdwbGluaz0qJEdVSUQqKSkiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkT1VTZWFyY2hlci5maWx0ZXI9IigmKG9iamVjdENhdGVnb3J5PW9yZ2FuaXphdGlvbmFsVW5pdCkobmFtZT0kT1VOYW1lKSkiCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkT1VTZWFyY2hlci5GaW5kQWxsKCkgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICBpZiAoJEZ1bGxEYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgY29udmVydC9wcm9jZXNzIHRoZSBMREFQIGZpZWxkcyBmb3IgZWFjaCByZXN1bHQKICAgICAgICAgICAgICAgICAgICAgICAgQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsgCiAgICAgICAgICAgICAgICAgICAgICAgICMgb3RoZXJ3aXNlIGp1c3QgcmV0dXJuaW5nIHRoZSBBRFMgcGF0aHMgb2YgdGhlIE9VcwogICAgICAgICAgICAgICAgICAgICAgICAkXy5wcm9wZXJ0aWVzLmFkc3BhdGgKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAkXwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LU5ldFNpdGUgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEdldHMgYSBsaXN0IG9mIGFsbCBjdXJyZW50IHNpdGVzIGluIGEgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgU2l0ZU5hbWUKCiAgICAgICAgU2l0ZSBmaWx0ZXIgc3RyaW5nLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byBxdWVyeSBmb3Igc2l0ZXMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIEFEU3BhdGgKCiAgICAgICAgVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgR1VJRAoKICAgICAgICBPbmx5IHJldHVybiBzaXRlIHdpdGggdGhlIHNwZWNpZmllZCBHVUlEIGluIHRoZWlyIGdwbGluayBwcm9wZXJ0eS4KCiAgICAuUEFSQU1FVEVSIEZ1bGxEYXRhCgogICAgICAgIFN3aXRjaC4gUmV0dXJuIGZ1bGwgc2l0ZSBvYmplY3RzIGluc3RlYWQgb2YganVzdCBvYmplY3QgbmFtZXMgKHRoZSBkZWZhdWx0KS4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldFNpdGUgLURvbWFpbiB0ZXN0bGFiLmxvY2FsIC1GdWxsRGF0YQogICAgICAgIAogICAgICAgIFJldHVybnMgdGhlIGZ1bGwgZGF0YSBvYmplY3RzIGZvciBhbGwgc2l0ZXMgaW4gdGVzdGxhYi5sb2NhbAojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2l0ZU5hbWUgPSAiKiIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQURTcGF0aCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkR1VJRCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRnVsbERhdGEsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICBiZWdpbiB7CiAgICAgICAgaWYoISREb21haW4pIHsKICAgICAgICAgICAgJERvbWFpbiA9IEdldC1OZXREb21haW4gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICB9CgogICAgICAgICRTaXRlU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLUFEU3BhdGggJEFEU3BhdGggLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1BRFNwcmVmaXggIkNOPVNpdGVzLENOPUNvbmZpZ3VyYXRpb24iIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgIH0KICAgIHByb2Nlc3MgewogICAgICAgIGlmKCRTaXRlU2VhcmNoZXIpIHsKCiAgICAgICAgICAgIGlmICgkR1VJRCkgewogICAgICAgICAgICAgICAgIyBpZiB3ZSdyZSBmaWx0ZXJpbmcgZm9yIGEgR1VJRCBpbiAuZ3BsaW5rCiAgICAgICAgICAgICAgICAkU2l0ZVNlYXJjaGVyLmZpbHRlcj0iKCYob2JqZWN0Q2F0ZWdvcnk9c2l0ZSkobmFtZT0kU2l0ZU5hbWUpKGdwbGluaz0qJEdVSUQqKSkiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkU2l0ZVNlYXJjaGVyLmZpbHRlcj0iKCYob2JqZWN0Q2F0ZWdvcnk9c2l0ZSkobmFtZT0kU2l0ZU5hbWUpKSIKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICRTaXRlU2VhcmNoZXIuRmluZEFsbCgpIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRGdWxsRGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAjIGNvbnZlcnQvcHJvY2VzcyB0aGUgTERBUCBmaWVsZHMgZm9yIGVhY2ggcmVzdWx0CiAgICAgICAgICAgICAgICAgICAgICAgIENvbnZlcnQtTERBUFByb3BlcnR5IC1Qcm9wZXJ0aWVzICRfLlByb3BlcnRpZXMKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgb3RoZXJ3aXNlIGp1c3QgcmV0dXJuIHRoZSBzaXRlIG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJF8ucHJvcGVydGllcy5uYW1lCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgJF8KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1OZXRTdWJuZXQgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEdldHMgYSBsaXN0IG9mIGFsbCBjdXJyZW50IHN1Ym5ldHMgaW4gYSBkb21haW4uCgogICAgLlBBUkFNRVRFUiBTaXRlTmFtZQoKICAgICAgICBPbmx5IHJldHVybiBzdWJuZXRzIGZyb20gdGhlIHNwZWNpZmllZCBTaXRlTmFtZS4KCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBUaGUgZG9tYWluIHRvIHF1ZXJ5IGZvciBzdWJuZXRzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIEZ1bGxEYXRhCgogICAgICAgIFN3aXRjaC4gUmV0dXJuIGZ1bGwgc3VibmV0IG9iamVjdHMgaW5zdGVhZCBvZiBqdXN0IG9iamVjdCBuYW1lcyAodGhlIGRlZmF1bHQpLgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0U3VibmV0CiAgICAgICAgCiAgICAgICAgUmV0dXJucyBhbGwgc3VibmV0IG5hbWVzIGluIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRTdWJuZXQgLURvbWFpbiB0ZXN0bGFiLmxvY2FsIC1GdWxsRGF0YQogICAgICAgIAogICAgICAgIFJldHVybnMgdGhlIGZ1bGwgZGF0YSBvYmplY3RzIGZvciBhbGwgc3VibmV0cyBpbiB0ZXN0bGFiLmxvY2FsCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTaXRlTmFtZSA9ICIqIiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwYXRoLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRGdWxsRGF0YSwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgIGJlZ2luIHsKICAgICAgICBpZighJERvbWFpbikgewogICAgICAgICAgICAkRG9tYWluID0gR2V0LU5ldERvbWFpbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgIH0KCiAgICAgICAgJFN1Ym5ldFNlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQURTcGF0aCAkQURTcGF0aCAtQURTcHJlZml4ICJDTj1TdWJuZXRzLENOPVNpdGVzLENOPUNvbmZpZ3VyYXRpb24iIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgIH0KCiAgICBwcm9jZXNzIHsKICAgICAgICBpZigkU3VibmV0U2VhcmNoZXIpIHsKCiAgICAgICAgICAgICRTdWJuZXRTZWFyY2hlci5maWx0ZXI9IigmKG9iamVjdENhdGVnb3J5PXN1Ym5ldCkpIgoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICRTdWJuZXRTZWFyY2hlci5GaW5kQWxsKCkgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICBpZiAoJEZ1bGxEYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgY29udmVydC9wcm9jZXNzIHRoZSBMREFQIGZpZWxkcyBmb3IgZWFjaCByZXN1bHQKICAgICAgICAgICAgICAgICAgICAgICAgQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcyB8IFdoZXJlLU9iamVjdCB7ICRfLnNpdGVvYmplY3QgLW1hdGNoICJDTj0kU2l0ZU5hbWUiIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgb3RoZXJ3aXNlIGp1c3QgcmV0dXJuIHRoZSBzdWJuZXQgbmFtZSBhbmQgc2l0ZSBuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggKCRTaXRlTmFtZSAtYW5kICgkXy5wcm9wZXJ0aWVzLnNpdGVvYmplY3QgLW1hdGNoICJDTj0kU2l0ZU5hbWUsIikpIC1vciAoJFNpdGVOYW1lIC1lcSAnKicpKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFN1Ym5ldFByb3BlcnRpZXMgPSBAewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTdWJuZXQnID0gJF8ucHJvcGVydGllcy5uYW1lWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTdWJuZXRQcm9wZXJ0aWVzWydTaXRlJ10gPSAoJF8ucHJvcGVydGllcy5zaXRlb2JqZWN0WzBdKS5zcGxpdCgiLCIpWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFN1Ym5ldFByb3BlcnRpZXNbJ1NpdGUnXSA9ICdFcnJvcicKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZXctT2JqZWN0IC1UeXBlTmFtZSBQU09iamVjdCAtUHJvcGVydHkgJFN1Ym5ldFByb3BlcnRpZXMgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgJF8KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1Eb21haW5TSUQgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEdldHMgdGhlIFNJRCBmb3IgdGhlIGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBUaGUgZG9tYWluIHRvIHF1ZXJ5LCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgQzpcPiBHZXQtRG9tYWluU0lEIC1Eb21haW4gVEVTVAogICAgICAgIAogICAgICAgIFJldHVybnMgU0lEIGZvciB0aGUgZG9tYWluICdURVNUJwojPgoKICAgIHBhcmFtKAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbgogICAgKQoKICAgICRGb3VuZERvbWFpbiA9IEdldC1OZXREb21haW4gLURvbWFpbiAkRG9tYWluCiAgICAKICAgIGlmKCRGb3VuZERvbWFpbikgewogICAgICAgICMgcXVlcnkgZm9yIHRoZSBwcmltYXJ5IGRvbWFpbiBjb250cm9sbGVyIHNvIHdlIGNhbiBleHRyYWN0IHRoZSBkb21haW4gU0lEIGZvciBmaWx0ZXJpbmcKICAgICAgICAkUHJpbWFyeURDID0gJEZvdW5kRG9tYWluLlBkY1JvbGVPd25lcgogICAgICAgICRQcmltYXJ5RENTSUQgPSAoR2V0LU5ldENvbXB1dGVyIC1Eb21haW4gJERvbWFpbiAtQ29tcHV0ZXJOYW1lICRQcmltYXJ5REMgLUZ1bGxEYXRhKS5vYmplY3RzaWQKICAgICAgICAkUGFydHMgPSAkUHJpbWFyeURDU0lELnNwbGl0KCItIikKICAgICAgICAkUGFydHNbMC4uKCRQYXJ0cy5sZW5ndGggLTIpXSAtam9pbiAiLSIKICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1OZXRHcm91cCB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgR2V0cyBhIGxpc3Qgb2YgYWxsIGN1cnJlbnQgZ3JvdXBzIGluIGEgZG9tYWluLCBvciBhbGwKICAgICAgICB0aGUgZ3JvdXBzIGEgZ2l2ZW4gdXNlci9ncm91cCBvYmplY3QgYmVsb25ncyB0by4KCiAgICAuUEFSQU1FVEVSIEdyb3VwTmFtZQoKICAgICAgICBUaGUgZ3JvdXAgbmFtZSB0byBxdWVyeSBmb3IsIHdpbGRjYXJkcyBhY2NlcHRlZC4KCiAgICAuUEFSQU1FVEVSIFNJRAoKICAgICAgICBUaGUgZ3JvdXAgU0lEIHRvIHF1ZXJ5IGZvci4KCiAgICAuUEFSQU1FVEVSIFVzZXJOYW1lCgogICAgICAgIFRoZSB1c2VyIG5hbWUgKG9yIGdyb3VwIG5hbWUpIHRvIHF1ZXJ5IGZvciBhbGwgZWZmZWN0aXZlCiAgICAgICAgZ3JvdXBzIG9mLgoKICAgIC5QQVJBTUVURVIgRmlsdGVyCgogICAgICAgIEEgY3VzdG9taXplZCBsZGFwIGZpbHRlciBzdHJpbmcgdG8gdXNlLCBlLmcuICIoZGVzY3JpcHRpb249KmFkbWluKikiCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byBxdWVyeSBmb3IgZ3JvdXBzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCwgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCiAgICAuUEFSQU1FVEVSIEFkbWluQ291bnQKCiAgICAgICAgU3dpdGNoLiBSZXR1cm4gZ3JvdXAgd2l0aCBhZG1pbkNvdW50PTEuCgogICAgLlBBUkFNRVRFUiBGdWxsRGF0YQoKICAgICAgICBTd2l0Y2guIFJldHVybiBmdWxsIGdyb3VwIG9iamVjdHMgaW5zdGVhZCBvZiBqdXN0IG9iamVjdCBuYW1lcyAodGhlIGRlZmF1bHQpLgoKICAgIC5QQVJBTUVURVIgUmF3U2lkcwoKICAgICAgICBTd2l0Y2guIFJldHVybiByYXcgU0lEcyB3aGVuIHVzaW5nICJHZXQtTmV0R3JvdXAgLVVzZXJOYW1lIFgiCgogICAgLlBBUkFNRVRFUiBQYWdlU2l6ZQoKICAgICAgICBUaGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRHcm91cAogICAgICAgIAogICAgICAgIFJldHVybnMgdGhlIGN1cnJlbnQgZ3JvdXBzIGluIHRoZSBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0R3JvdXAgLUdyb3VwTmFtZSAqYWRtaW4qCiAgICAgICAgCiAgICAgICAgUmV0dXJucyBhbGwgZ3JvdXBzIHdpdGggImFkbWluIiBpbiB0aGVpciBncm91cCBuYW1lLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldEdyb3VwIC1Eb21haW4gdGVzdGluZyAtRnVsbERhdGEKICAgICAgICAKICAgICAgICBSZXR1cm5zIGZ1bGwgZ3JvdXAgZGF0YSBvYmplY3RzIGluIHRoZSAndGVzdGluZycgZG9tYWluCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEdyb3VwTmFtZSA9ICcqJywKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU0lELAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyTmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRmlsdGVyLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKICAgICAgICAKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwYXRoLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRBZG1pbkNvdW50LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRGdWxsRGF0YSwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUmF3U2lkcywKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgIGJlZ2luIHsKICAgICAgICAkR3JvdXBTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUFEU3BhdGggJEFEU3BhdGggLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgfQoKICAgIHByb2Nlc3MgewogICAgICAgIGlmKCRHcm91cFNlYXJjaGVyKSB7CgogICAgICAgICAgICBpZigkQWRtaW5Db3VudCkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiQ2hlY2tpbmcgZm9yIGFkbWluQ291bnQ9MSIKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIihhZG1pbmNvdW50PTEpIgogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJFVzZXJOYW1lKSB7CiAgICAgICAgICAgICAgICAjIGdldCB0aGUgcmF3IHVzZXIgb2JqZWN0CiAgICAgICAgICAgICAgICAkVXNlciA9IEdldC1BRE9iamVjdCAtU2FtQWNjb3VudE5hbWUgJFVzZXJOYW1lIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtUmV0dXJuUmF3IC1QYWdlU2l6ZSAkUGFnZVNpemUKCiAgICAgICAgICAgICAgICAjIGNvbnZlcnQgdGhlIHVzZXIgdG8gYSBkaXJlY3RvcnkgZW50cnkKICAgICAgICAgICAgICAgICRVc2VyRGlyZWN0b3J5RW50cnkgPSAkVXNlci5HZXREaXJlY3RvcnlFbnRyeSgpCgogICAgICAgICAgICAgICAgIyBjYXVzZSB0aGUgY2FjaGUgdG8gY2FsY3VsYXRlIHRoZSB0b2tlbiBncm91cHMgZm9yIHRoZSB1c2VyCiAgICAgICAgICAgICAgICAkVXNlckRpcmVjdG9yeUVudHJ5LlJlZnJlc2hDYWNoZSgidG9rZW5Hcm91cHMiKQoKICAgICAgICAgICAgICAgICRVc2VyRGlyZWN0b3J5RW50cnkuVG9rZW5Hcm91cHMgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgIyBjb252ZXJ0IHRoZSB0b2tlbiBncm91cCBzaWQKICAgICAgICAgICAgICAgICAgICAkR3JvdXBTaWQgPSAoTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllcigkXywwKSkuVmFsdWUKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIGlnbm9yZSB0aGUgYnVpbHQgaW4gdXNlcnMgYW5kIGRlZmF1bHQgZG9tYWluIHVzZXIgZ3JvdXAKICAgICAgICAgICAgICAgICAgICBpZighKCRHcm91cFNpZCAtbWF0Y2ggJ15TLTEtNS0zMi01NDV8LTUxMyQnKSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZigkRnVsbERhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldC1BRE9iamVjdCAtU0lEICRHcm91cFNpZCAtUGFnZVNpemUgJFBhZ2VTaXplIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFJhd1NpZHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBTaWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbnZlcnQtU2lkVG9OYW1lICRHcm91cFNpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgaWYgKCRTSUQpIHsKICAgICAgICAgICAgICAgICAgICAkR3JvdXBTZWFyY2hlci5maWx0ZXIgPSAiKCYob2JqZWN0Q2F0ZWdvcnk9Z3JvdXApKG9iamVjdFNJRD0kU0lEKSRGaWx0ZXIpIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJEdyb3VwU2VhcmNoZXIuZmlsdGVyID0gIigmKG9iamVjdENhdGVnb3J5PWdyb3VwKShuYW1lPSRHcm91cE5hbWUpJEZpbHRlcikiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJEdyb3VwU2VhcmNoZXIuRmluZEFsbCgpIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgIyBpZiB3ZSdyZSByZXR1cm5pbmcgZnVsbCBkYXRhIG9iamVjdHMKICAgICAgICAgICAgICAgICAgICBpZiAoJEZ1bGxEYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgY29udmVydC9wcm9jZXNzIHRoZSBMREFQIGZpZWxkcyBmb3IgZWFjaCByZXN1bHQKICAgICAgICAgICAgICAgICAgICAgICAgQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBvdGhlcndpc2Ugd2UncmUganVzdCByZXR1cm5pbmcgdGhlIGdyb3VwIG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJF8ucHJvcGVydGllcy5zYW1hY2NvdW50bmFtZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1OZXRHcm91cE1lbWJlciB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgVGhpcyBmdW5jdGlvbiB1c2VycyBbQURTSV0gYW5kIExEQVAgdG8gcXVlcnkgdGhlIGN1cnJlbnQgQUQgY29udGV4dAogICAgICAgIG9yIHRydXN0ZWQgZG9tYWluIGZvciB1c2VycyBpbiBhIHNwZWNpZmllZCBncm91cC4gSWYgbm8gR3JvdXBOYW1lIGlzCiAgICAgICAgc3BlY2lmaWVkLCBpdCBkZWZhdWx0cyB0byBxdWVyeWluZyB0aGUgIkRvbWFpbiBBZG1pbnMiIGdyb3VwLgogICAgICAgIFRoaXMgaXMgYSByZXBsYWNlbWVudCBmb3IgIm5ldCBncm91cCAnbmFtZScgL2RvbWFpbiIKCiAgICAuUEFSQU1FVEVSIEdyb3VwTmFtZQoKICAgICAgICBUaGUgZ3JvdXAgbmFtZSB0byBxdWVyeSBmb3IgdXNlcnMuCgogICAgLlBBUkFNRVRFUiBTSUQKCiAgICAgICAgVGhlIEdyb3VwIFNJRCB0byBxdWVyeSBmb3IgdXNlcnMuIElmIG5vdCBnaXZlbiwgaXQgZGVmYXVsdHMgdG8gNTEyICJEb21haW4gQWRtaW5zIgoKICAgIC5QQVJBTUVURVIgRmlsdGVyCgogICAgICAgIEEgY3VzdG9taXplZCBsZGFwIGZpbHRlciBzdHJpbmcgdG8gdXNlLCBlLmcuICIoZGVzY3JpcHRpb249KmFkbWluKikiCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byBxdWVyeSBmb3IgZ3JvdXAgdXNlcnMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIEFEU3BhdGgKCiAgICAgICAgVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoLCBlLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiCiAgICAgICAgVXNlZnVsIGZvciBPVSBxdWVyaWVzLgoKICAgIC5QQVJBTUVURVIgRnVsbERhdGEKCiAgICAgICAgU3dpdGNoLiBSZXR1cm5zIGZ1bGwgZGF0YSBvYmplY3RzIGluc3RlYWQgb2YganVzdCBncm91cC91c2Vycy4KCiAgICAuUEFSQU1FVEVSIFJlY3Vyc2UKCiAgICAgICAgU3dpdGNoLiBJZiB0aGUgZ3JvdXAgbWVtYmVyIGlzIGEgZ3JvdXAsIHJlY3Vyc2l2ZWx5IHRyeSB0byBxdWVyeSBpdHMgbWVtYmVycyBhcyB3ZWxsLgoKICAgIC5QQVJBTUVURVIgVXNlTWF0Y2hpbmdSdWxlCgogICAgICAgIFN3aXRjaC4gVXNlIExEQVBfTUFUQ0hJTkdfUlVMRV9JTl9DSEFJTiBpbiB0aGUgTERBUCBzZWFyY2ggcXVlcnkgd2hlbiAtUmVjdXJzZSBpcyBzcGVjaWZpZWQuCiAgICAgICAgTXVjaCBmYXN0ZXIgdGhhbiBtYW51YWwgcmVjdXJzaW9uLCBidXQgZG9lc24ndCByZXZlYWwgY3Jvc3MtZG9tYWluIGdyb3Vwcy4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldEdyb3VwTWVtYmVyCiAgICAgICAgCiAgICAgICAgUmV0dXJucyB0aGUgdXNlcm5hbWVzIHRoYXQgb2YgbWVtYmVycyBvZiB0aGUgIkRvbWFpbiBBZG1pbnMiIGRvbWFpbiBncm91cC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRHcm91cE1lbWJlciAtRG9tYWluIHRlc3RpbmcgLUdyb3VwTmFtZSAiUG93ZXIgVXNlcnMiCiAgICAgICAgCiAgICAgICAgUmV0dXJucyB0aGUgdXNlcm5hbWVzIHRoYXQgb2YgbWVtYmVycyBvZiB0aGUgIlBvd2VyIFVzZXJzIiBncm91cCBpbiB0aGUgJ3Rlc3RpbmcnIGRvbWFpbi4KCiAgICAuTElOSwoKICAgICAgICBodHRwOi8vd3d3LnBvd2Vyc2hlbGxtYWdhemluZS5jb20vMjAxMy8wNS8yMy9wc3RpcC1yZXRyaWV2ZS1ncm91cC1tZW1iZXJzaGlwLW9mLWFuLWFjdGl2ZS1kaXJlY3RvcnktZ3JvdXAtcmVjdXJzaXZlbHkvCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEdyb3VwTmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU0lELAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEZ1bGxEYXRhLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZWN1cnNlLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRVc2VNYXRjaGluZ1J1bGUsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICBiZWdpbiB7CiAgICAgICAgIyBzbyB0aGlzIGlzbid0IHJlcGVhdGVkIGlmIHVzZXJzIGFyZSBwYXNzZWQgb24gdGhlIHBpcGVsaW5lCiAgICAgICAgJEdyb3VwU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1BRFNwYXRoICRBRFNwYXRoIC1QYWdlU2l6ZSAkUGFnZVNpemUKCiAgICAgICAgaWYoISREb21haW5Db250cm9sbGVyKSB7CiAgICAgICAgICAgICREb21haW5Db250cm9sbGVyID0gKChHZXQtTmV0RG9tYWluIC1DcmVkZW50aWFsICRDcmVkZW50aWFsKS5QZGNSb2xlT3duZXIpLk5hbWUKICAgICAgICB9CgogICAgICAgIGlmKCEkRG9tYWluKSB7CiAgICAgICAgICAgICREb21haW4gPSBHZXQtTmV0RG9tYWluIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgfQogICAgfQoKICAgIHByb2Nlc3MgewoKICAgICAgICBpZiAoJEdyb3VwU2VhcmNoZXIpIHsKCiAgICAgICAgICAgIGlmICgkUmVjdXJzZSAtYW5kICRVc2VNYXRjaGluZ1J1bGUpIHsKICAgICAgICAgICAgICAgICMgcmVzb2x2ZSB0aGUgZ3JvdXAgdG8gYSBkaXN0aW5ndWlzaGVkbmFtZQogICAgICAgICAgICAgICAgaWYgKCRHcm91cE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAkR3JvdXAgPSBHZXQtTmV0R3JvdXAgLUdyb3VwTmFtZSAkR3JvdXBOYW1lIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtRnVsbERhdGEgLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZWlmICgkU0lEKSB7CiAgICAgICAgICAgICAgICAgICAgJEdyb3VwID0gR2V0LU5ldEdyb3VwIC1TSUQgJFNJRCAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUZ1bGxEYXRhIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICMgZGVmYXVsdCB0byBkb21haW4gYWRtaW5zCiAgICAgICAgICAgICAgICAgICAgJFNJRCA9IChHZXQtRG9tYWluU0lEIC1Eb21haW4gJERvbWFpbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCkgKyAiLTUxMiIKICAgICAgICAgICAgICAgICAgICAkR3JvdXAgPSBHZXQtTmV0R3JvdXAgLVNJRCAkU0lEIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtRnVsbERhdGEgLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJEdyb3VwRE4gPSAkR3JvdXAuZGlzdGluZ3Vpc2hlZG5hbWUKICAgICAgICAgICAgICAgICRHcm91cEZvdW5kTmFtZSA9ICRHcm91cC5uYW1lCgogICAgICAgICAgICAgICAgaWYgKCRHcm91cEROKSB7CiAgICAgICAgICAgICAgICAgICAgJEdyb3VwU2VhcmNoZXIuZmlsdGVyID0gIigmKHNhbUFjY291bnRUeXBlPTgwNTMwNjM2OCkobWVtYmVyb2Y6MS4yLjg0MC4xMTM1NTYuMS40LjE5NDE6PSRHcm91cEROKSRGaWx0ZXIpIgogICAgICAgICAgICAgICAgICAgICRHcm91cFNlYXJjaGVyLlByb3BlcnRpZXNUb0xvYWQuQWRkUmFuZ2UoKCdkaXN0aW5ndWlzaGVkTmFtZScsJ3NhbWFjY291bnR0eXBlJywnbGFzdGxvZ29uJywnbGFzdGxvZ29udGltZXN0YW1wJywnZHNjb3JlcHJvcGFnYXRpb25kYXRhJywnb2JqZWN0c2lkJywnd2hlbmNyZWF0ZWQnLCdiYWRwYXNzd29yZHRpbWUnLCdhY2NvdW50ZXhwaXJlcycsJ2lzY3JpdGljYWxzeXN0ZW1vYmplY3QnLCduYW1lJywndXNuY2hhbmdlZCcsJ29iamVjdGNhdGVnb3J5JywnZGVzY3JpcHRpb24nLCdjb2RlcGFnZScsJ2luc3RhbmNldHlwZScsJ2NvdW50cnljb2RlJywnZGlzdGluZ3Vpc2hlZG5hbWUnLCdjbicsJ2FkbWluY291bnQnLCdsb2dvbmhvdXJzJywnb2JqZWN0Y2xhc3MnLCdsb2dvbmNvdW50JywndXNuY3JlYXRlZCcsJ3VzZXJhY2NvdW50Y29udHJvbCcsJ29iamVjdGd1aWQnLCdwcmltYXJ5Z3JvdXBpZCcsJ2xhc3Rsb2dvZmYnLCdzYW1hY2NvdW50bmFtZScsJ2JhZHB3ZGNvdW50Jywnd2hlbmNoYW5nZWQnLCdtZW1iZXJvZicsJ3B3ZGxhc3RzZXQnLCdhZHNwYXRoJykpCgogICAgICAgICAgICAgICAgICAgICRNZW1iZXJzID0gJEdyb3VwU2VhcmNoZXIuRmluZEFsbCgpCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwRm91bmROYW1lID0gJEdyb3VwTmFtZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtRXJyb3IgIlVuYWJsZSB0byBmaW5kIEdyb3VwIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgaWYgKCRHcm91cE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAkR3JvdXBTZWFyY2hlci5maWx0ZXIgPSAiKCYob2JqZWN0Q2F0ZWdvcnk9Z3JvdXApKG5hbWU9JEdyb3VwTmFtZSkkRmlsdGVyKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2VpZiAoJFNJRCkgewogICAgICAgICAgICAgICAgICAgICRHcm91cFNlYXJjaGVyLmZpbHRlciA9ICIoJihvYmplY3RDYXRlZ29yeT1ncm91cCkob2JqZWN0U0lEPSRTSUQpJEZpbHRlcikiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAjIGRlZmF1bHQgdG8gZG9tYWluIGFkbWlucwogICAgICAgICAgICAgICAgICAgICRTSUQgPSAoR2V0LURvbWFpblNJRCAtRG9tYWluICREb21haW4gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwpICsgIi01MTIiCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwU2VhcmNoZXIuZmlsdGVyID0gIigmKG9iamVjdENhdGVnb3J5PWdyb3VwKShvYmplY3RTSUQ9JFNJRCkkRmlsdGVyKSIKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkR3JvdXBTZWFyY2hlci5GaW5kQWxsKCkgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoJF8pIC1vciAhKCRfLnByb3BlcnRpZXMpIC1vciAhKCRfLnByb3BlcnRpZXMubmFtZSkpIHsgY29udGludWUgfQoKICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwRm91bmROYW1lID0gJF8ucHJvcGVydGllcy5uYW1lWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJzID0gQCgpCgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJF8ucHJvcGVydGllcy5tZW1iZXIuQ291bnQgLWVxIDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGaW5pc2hlZCA9ICRGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEJvdHRvbSA9IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUb3AgPSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSghJEZpbmlzaGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRvcCA9ICRCb3R0b20gKyAxNDk5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlclJhbmdlPSJtZW1iZXI7cmFuZ2U9JEJvdHRvbS0kVG9wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRCb3R0b20gKz0gMTUwMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cFNlYXJjaGVyLlByb3BlcnRpZXNUb0xvYWQuQ2xlYXIoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt2b2lkXSRHcm91cFNlYXJjaGVyLlByb3BlcnRpZXNUb0xvYWQuQWRkKCIkTWVtYmVyUmFuZ2UiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRSZXN1bHQgPSAkR3JvdXBTZWFyY2hlci5GaW5kT25lKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRSZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRSYW5nZWRQcm9wZXJ0eSA9ICRfLlByb3BlcnRpZXMuUHJvcGVydHlOYW1lcyAtbGlrZSAibWVtYmVyO3JhbmdlPSoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUmVzdWx0cyA9ICRfLlByb3BlcnRpZXMuaXRlbSgkUmFuZ2VkUHJvcGVydHkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFJlc3VsdHMuY291bnQgLWVxIDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRmluaXNoZWQgPSAkVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFJlc3VsdHMgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJzICs9ICRfCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZpbmlzaGVkID0gJFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggW1N5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uTWV0aG9kSW52b2NhdGlvbkV4Y2VwdGlvbl0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRmluaXNoZWQgPSAkVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSAKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVycyA9ICRfLnByb3BlcnRpZXMubWVtYmVyCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IAogICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAkXwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgJE1lbWJlcnMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICMgaWYgd2UncmUgZG9pbmcgdGhlIExEQVBfTUFUQ0hJTkdfUlVMRV9JTl9DSEFJTiByZWN1cnNpb24KICAgICAgICAgICAgICAgIGlmICgkUmVjdXJzZSAtYW5kICRVc2VNYXRjaGluZ1J1bGUpIHsKICAgICAgICAgICAgICAgICAgICAkUHJvcGVydGllcyA9ICRfLlByb3BlcnRpZXMKICAgICAgICAgICAgICAgIH0gCiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZigkRG9tYWluQ29udHJvbGxlcikgewogICAgICAgICAgICAgICAgICAgICAgICAkUmVzdWx0ID0gW2Fkc2ldIkxEQVA6Ly8kRG9tYWluQ29udHJvbGxlci8kXyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRSZXN1bHQgPSBbYWRzaV0iTERBUDovLyRfIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZigkUmVzdWx0KXsKICAgICAgICAgICAgICAgICAgICAgICAgJFByb3BlcnRpZXMgPSAkUmVzdWx0LlByb3BlcnRpZXMKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYoJFByb3BlcnRpZXMpIHsKCiAgICAgICAgICAgICAgICAgICAgJElzR3JvdXAgPSBAKCcyNjg0MzU0NTYnLCcyNjg0MzU0NTcnLCc1MzY4NzA5MTInLCc1MzY4NzA5MTMnKSAtY29udGFpbnMgJFByb3BlcnRpZXMuc2FtYWNjb3VudHR5cGUKCiAgICAgICAgICAgICAgICAgICAgaWYgKCRGdWxsRGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBNZW1iZXIgPSBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwTWVtYmVyID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwRG9tYWluJyAkRG9tYWluCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwTmFtZScgJEdyb3VwRm91bmROYW1lCgogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJETiA9ICRQcm9wZXJ0aWVzLmRpc3Rpbmd1aXNoZWRuYW1lWzBdCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAjIGV4dHJhY3QgdGhlIEZRRE4gZnJvbSB0aGUgRGlzdGluZ3Vpc2hlZCBOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJEb21haW4gPSAkTWVtYmVyRE4uc3ViU3RyaW5nKCRNZW1iZXJETi5JbmRleE9mKCJEQz0iKSkgLXJlcGxhY2UgJ0RDPScsJycgLXJlcGxhY2UgJywnLCcuJwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJETiA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJEb21haW4gPSAkTnVsbAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKCRQcm9wZXJ0aWVzLnNhbWFjY291bnRuYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgZm9yZXN0IHVzZXJzIGhhdmUgdGhlIHNhbUFjY291bnROYW1lIHNldAogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyTmFtZSA9ICRQcm9wZXJ0aWVzLnNhbWFjY291bnRuYW1lWzBdCiAgICAgICAgICAgICAgICAgICAgfSAKICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBleHRlcm5hbCB0cnVzdCB1c2VycyBoYXZlIGEgU0lELCBzbyBjb252ZXJ0IGl0CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyTmFtZSA9IENvbnZlcnQtU2lkVG9OYW1lICRQcm9wZXJ0aWVzLmNuWzBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBpZiB0aGVyZSdzIGEgcHJvYmxlbSBjb250YWN0aW5nIHRoZSBkb21haW4gdG8gcmVzb2x2ZSB0aGUgU0lECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyTmFtZSA9ICRQcm9wZXJ0aWVzLmNuCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYoJFByb3BlcnRpZXMub2JqZWN0U2lkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJTaWQgPSAoKE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXIgJFByb3BlcnRpZXMub2JqZWN0U2lkWzBdLDApLlZhbHVlKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlclNpZCA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAkR3JvdXBNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWVtYmVyRG9tYWluJyAkTWVtYmVyRG9tYWluCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ01lbWJlck5hbWUnICRNZW1iZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ01lbWJlclNpZCcgJE1lbWJlclNpZAogICAgICAgICAgICAgICAgICAgICRHcm91cE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJc0dyb3VwJyAkSXNHcm91cAogICAgICAgICAgICAgICAgICAgICRHcm91cE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNZW1iZXJETicgJE1lbWJlckROCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwTWVtYmVyCgogICAgICAgICAgICAgICAgICAgICMgaWYgd2UncmUgZG9pbmcgbWFudWFsIHJlY3Vyc2lvbgogICAgICAgICAgICAgICAgICAgIGlmICgkUmVjdXJzZSAtYW5kICEkVXNlTWF0Y2hpbmdSdWxlIC1hbmQgJElzR3JvdXAgLWFuZCAkTWVtYmVyTmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZigkRnVsbERhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldC1OZXRHcm91cE1lbWJlciAtRnVsbERhdGEgLURvbWFpbiAkTWVtYmVyRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1Hcm91cE5hbWUgJE1lbWJlck5hbWUgLVJlY3Vyc2UgLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0LU5ldEdyb3VwTWVtYmVyIC1Eb21haW4gJE1lbWJlckRvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtR3JvdXBOYW1lICRNZW1iZXJOYW1lIC1SZWN1cnNlIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtTmV0RmlsZVNlcnZlciB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgUmV0dXJucyBhIGxpc3Qgb2YgYWxsIGZpbGUgc2VydmVycyBleHRyYWN0ZWQgZnJvbSB1c2VyIAogICAgICAgIGhvbWVkaXJlY3RvcnksIHNjcmlwdHBhdGgsIGFuZCBwcm9maWxlcGF0aCBmaWVsZHMuCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byBxdWVyeSBmb3IgdXNlciBmaWxlIHNlcnZlcnMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIFRhcmdldFVzZXJzCgogICAgICAgIEFuIGFycmF5IG9mIHVzZXJzIHRvIHF1ZXJ5IGZvciBmaWxlIHNlcnZlcnMuCgogICAgLlBBUkFNRVRFUiBQYWdlU2l6ZQoKICAgICAgICBUaGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRGaWxlU2VydmVyCiAgICAgICAgCiAgICAgICAgUmV0dXJucyBhY3RpdmUgZmlsZSBzZXJ2ZXJzLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldEZpbGVTZXJ2ZXIgLURvbWFpbiB0ZXN0aW5nCiAgICAgICAgCiAgICAgICAgUmV0dXJucyBhY3RpdmUgZmlsZSBzZXJ2ZXJzIGZvciB0aGUgJ3Rlc3RpbmcnIGRvbWFpbi4KIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFRhcmdldFVzZXJzLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCgogICAgZnVuY3Rpb24gU3BsaXRQYXRoIHsKICAgICAgICAjIHNob3J0IGludGVybmFsIGhlbHBlciB0byBzcGxpdCBVTkMgc2VydmVyIHBhdGhzCiAgICAgICAgcGFyYW0oW1N0cmluZ10kUGF0aCkKCiAgICAgICAgaWYgKCRQYXRoIC1hbmQgKCRQYXRoLnNwbGl0KCJcXCIpLkNvdW50IC1nZSAzKSkgewogICAgICAgICAgICAkVGVtcCA9ICRQYXRoLnNwbGl0KCJcXCIpWzJdCiAgICAgICAgICAgIGlmKCRUZW1wIC1hbmQgKCRUZW1wIC1uZSAnJykpIHsKICAgICAgICAgICAgICAgICRUZW1wCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgR2V0LU5ldFVzZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1QYWdlU2l6ZSAkUGFnZVNpemUgfCBXaGVyZS1PYmplY3QgeyRffSB8IFdoZXJlLU9iamVjdCB7CiAgICAgICAgICAgICMgZmlsdGVyIGZvciBhbnkgdGFyZ2V0IHVzZXJzCiAgICAgICAgICAgIGlmKCRUYXJnZXRVc2VycykgewogICAgICAgICAgICAgICAgJFRhcmdldFVzZXJzIC1NYXRjaCAkXy5zYW1BY2NvdW50TmFtZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgeyAkVHJ1ZSB9IAogICAgICAgIH0gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICMgc3BsaXQgb3V0IGV2ZXJ5IHBvdGVudGlhbCBmaWxlIHNlcnZlciBwYXRoCiAgICAgICAgICAgIGlmKCRfLmhvbWVkaXJlY3RvcnkpIHsKICAgICAgICAgICAgICAgIFNwbGl0UGF0aCgkXy5ob21lZGlyZWN0b3J5KQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCRfLnNjcmlwdHBhdGgpIHsKICAgICAgICAgICAgICAgIFNwbGl0UGF0aCgkXy5zY3JpcHRwYXRoKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCRfLnByb2ZpbGVwYXRoKSB7CiAgICAgICAgICAgICAgICBTcGxpdFBhdGgoJF8ucHJvZmlsZXBhdGgpCiAgICAgICAgICAgIH0KCiAgICAgICAgfSB8IFdoZXJlLU9iamVjdCB7JF99IHwgU29ydC1PYmplY3QgLVVuaXF1ZQp9CgoKZnVuY3Rpb24gR2V0LURGU3NoYXJlIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBSZXR1cm5zIGEgbGlzdCBvZiBhbGwgZmF1bHQtdG9sZXJhbnQgZGlzdHJpYnV0ZWQgZmlsZQogICAgICAgIHN5c3RlbXMgZm9yIGEgZ2l2ZW4gZG9tYWluLgoKICAgIC5QQVJBTUVURVIgVmVyc2lvbgoKICAgICAgICBUaGUgdmVyc2lvbiBvZiBERlMgdG8gcXVlcnkgZm9yIHNlcnZlcnMuCiAgICAgICAgMS92MSwgMi92Miwgb3IgYWxsCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byBxdWVyeSBmb3IgdXNlciBERlMgc2hhcmVzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCwgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LURGU3NoYXJlCgogICAgICAgIFJldHVybnMgYWxsIGRpc3RyaWJ1dGVkIGZpbGUgc3lzdGVtIHNoYXJlcyBmb3IgdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LURGU3NoYXJlIC1Eb21haW4gdGVzdAoKICAgICAgICBSZXR1cm5zIGFsbCBkaXN0cmlidXRlZCBmaWxlIHN5c3RlbSBzaGFyZXMgZm9yIHRoZSAndGVzdCcgZG9tYWluLgojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbU3RyaW5nXQogICAgICAgIFtWYWxpZGF0ZVNldCgiQWxsIiwiVjEiLCIxIiwiVjIiLCIyIildCiAgICAgICAgJFZlcnNpb24gPSAiQWxsIiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwYXRoLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCgogICAgZnVuY3Rpb24gUGFyc2UtUGt0IHsKICAgICAgICBbQ21kbGV0QmluZGluZygpXQogICAgICAgIHBhcmFtKAogICAgICAgICAgICBbYnl0ZVtdXQogICAgICAgICAgICAkUGt0CiAgICAgICAgKQoKICAgICAgICAkYmluID0gJFBrdAogICAgICAgICRibG9iX3ZlcnNpb24gPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGJpblswLi4zXSwwKQogICAgICAgICRibG9iX2VsZW1lbnRfY291bnQgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGJpbls0Li43XSwwKQogICAgICAgICNXcml0ZS1Ib3N0ICJFbGVtZW50IENvdW50OiAiICRibG9iX2VsZW1lbnRfY291bnQKICAgICAgICAkb2Zmc2V0ID0gOAogICAgICAgICNodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2NjMjI3MTQ3LmFzcHgKICAgICAgICAkb2JqZWN0X2xpc3QgPSBAKCkKICAgICAgICBmb3IoJGk9MTsgJGkgLWxlICRibG9iX2VsZW1lbnRfY291bnQ7ICRpKyspewogICAgICAgICAgICAgICAkYmxvYl9uYW1lX3NpemVfc3RhcnQgPSAkb2Zmc2V0CiAgICAgICAgICAgICAgICRibG9iX25hbWVfc2l6ZV9lbmQgPSAkb2Zmc2V0ICsgMQogICAgICAgICAgICAgICAkYmxvYl9uYW1lX3NpemUgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MTYoJGJpblskYmxvYl9uYW1lX3NpemVfc3RhcnQuLiRibG9iX25hbWVfc2l6ZV9lbmRdLDApCiAgICAgICAgICAgICAgICNXcml0ZS1Ib3N0ICJCbG9iIG5hbWUgc2l6ZTogIiAkYmxvYl9uYW1lX3NpemUKICAgICAgICAgICAgICAgJGJsb2JfbmFtZV9zdGFydCA9ICRibG9iX25hbWVfc2l6ZV9lbmQgKyAxCiAgICAgICAgICAgICAgICRibG9iX25hbWVfZW5kID0gJGJsb2JfbmFtZV9zdGFydCArICRibG9iX25hbWVfc2l6ZSAtIDEKICAgICAgICAgICAgICAgJGJsb2JfbmFtZSA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVuaWNvZGUuR2V0U3RyaW5nKCRiaW5bJGJsb2JfbmFtZV9zdGFydC4uJGJsb2JfbmFtZV9lbmRdKQogICAgICAgICAgICAgICAjV3JpdGUtSG9zdCAgIkJsb2IgTmFtZTogIiAkYmxvYl9uYW1lCiAgICAgICAgICAgICAgICRibG9iX2RhdGFfc2l6ZV9zdGFydCA9ICRibG9iX25hbWVfZW5kICsgMQogICAgICAgICAgICAgICAkYmxvYl9kYXRhX3NpemVfZW5kID0gJGJsb2JfZGF0YV9zaXplX3N0YXJ0ICsgMwogICAgICAgICAgICAgICAkYmxvYl9kYXRhX3NpemUgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGJpblskYmxvYl9kYXRhX3NpemVfc3RhcnQuLiRibG9iX2RhdGFfc2l6ZV9lbmRdLDApCiAgICAgICAgICAgICAgICNXcml0ZS1Ib3N0ICAiYmxvYiBkYXRhIHNpemU6ICIgJGJsb2JfZGF0YV9zaXplCiAgICAgICAgICAgICAgICRibG9iX2RhdGFfc3RhcnQgPSAkYmxvYl9kYXRhX3NpemVfZW5kICsgMQogICAgICAgICAgICAgICAkYmxvYl9kYXRhX2VuZCA9ICRibG9iX2RhdGFfc3RhcnQgKyAkYmxvYl9kYXRhX3NpemUgLSAxCiAgICAgICAgICAgICAgICRibG9iX2RhdGEgPSAkYmluWyRibG9iX2RhdGFfc3RhcnQuLiRibG9iX2RhdGFfZW5kXQogICAgICAgICAgICAgICBzd2l0Y2ggLXdpbGRjYXJkICgkYmxvYl9uYW1lKSB7CiAgICAgICAgICAgICAgICAiXHNpdGVyb290IiB7ICB9CiAgICAgICAgICAgICAgICAiXGRvbWFpbnJvb3QqIiB7CiAgICAgICAgICAgICAgICAgICAgIyBQYXJzZSBERlNOYW1lc3BhY2VSb290T3JMaW5rQmxvYiBvYmplY3QuIFN0YXJ0cyB3aXRoIHZhcmlhYmxlIGxlbmd0aCBERlNSb290T3JMaW5rSURCbG9iIHdoaWNoIHdlIHBhcnNlIGZpcnN0Li4uCiAgICAgICAgICAgICAgICAgICAgIyBERlNSb290T3JMaW5rSURCbG9iCiAgICAgICAgICAgICAgICAgICAgJHJvb3Rfb3JfbGlua19ndWlkX3N0YXJ0ID0gMAogICAgICAgICAgICAgICAgICAgICRyb290X29yX2xpbmtfZ3VpZF9lbmQgPSAxNQogICAgICAgICAgICAgICAgICAgICRyb290X29yX2xpbmtfZ3VpZCA9IFtieXRlW11dJGJsb2JfZGF0YVskcm9vdF9vcl9saW5rX2d1aWRfc3RhcnQuLiRyb290X29yX2xpbmtfZ3VpZF9lbmRdCiAgICAgICAgICAgICAgICAgICAgJGd1aWQgPSBOZXctT2JqZWN0IEd1aWQoLCRyb290X29yX2xpbmtfZ3VpZCkgIyBzaG91bGQgbWF0Y2ggJGd1aWRfc3RyCiAgICAgICAgICAgICAgICAgICAgJHByZWZpeF9zaXplX3N0YXJ0ID0gJHJvb3Rfb3JfbGlua19ndWlkX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAkcHJlZml4X3NpemVfZW5kID0gJHByZWZpeF9zaXplX3N0YXJ0ICsgMQogICAgICAgICAgICAgICAgICAgICRwcmVmaXhfc2l6ZSA9IFtiaXRjb252ZXJ0ZXJdOjpUb1VJbnQxNigkYmxvYl9kYXRhWyRwcmVmaXhfc2l6ZV9zdGFydC4uJHByZWZpeF9zaXplX2VuZF0sMCkKICAgICAgICAgICAgICAgICAgICAkcHJlZml4X3N0YXJ0ID0gJHByZWZpeF9zaXplX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAkcHJlZml4X2VuZCA9ICRwcmVmaXhfc3RhcnQgKyAkcHJlZml4X3NpemUgLSAxCiAgICAgICAgICAgICAgICAgICAgJHByZWZpeCA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVuaWNvZGUuR2V0U3RyaW5nKCRibG9iX2RhdGFbJHByZWZpeF9zdGFydC4uJHByZWZpeF9lbmRdKQogICAgICAgICAgICAgICAgICAgICN3cml0ZS1ob3N0ICJQcmVmaXg6ICIgJHByZWZpeAogICAgICAgICAgICAgICAgICAgICRzaG9ydF9wcmVmaXhfc2l6ZV9zdGFydCA9ICRwcmVmaXhfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICRzaG9ydF9wcmVmaXhfc2l6ZV9lbmQgPSAkc2hvcnRfcHJlZml4X3NpemVfc3RhcnQgKyAxCiAgICAgICAgICAgICAgICAgICAgJHNob3J0X3ByZWZpeF9zaXplID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDE2KCRibG9iX2RhdGFbJHNob3J0X3ByZWZpeF9zaXplX3N0YXJ0Li4kc2hvcnRfcHJlZml4X3NpemVfZW5kXSwwKQogICAgICAgICAgICAgICAgICAgICRzaG9ydF9wcmVmaXhfc3RhcnQgPSAkc2hvcnRfcHJlZml4X3NpemVfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICRzaG9ydF9wcmVmaXhfZW5kID0gJHNob3J0X3ByZWZpeF9zdGFydCArICRzaG9ydF9wcmVmaXhfc2l6ZSAtIDEKICAgICAgICAgICAgICAgICAgICAkc2hvcnRfcHJlZml4ID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRTdHJpbmcoJGJsb2JfZGF0YVskc2hvcnRfcHJlZml4X3N0YXJ0Li4kc2hvcnRfcHJlZml4X2VuZF0pCiAgICAgICAgICAgICAgICAgICAgI3dyaXRlLWhvc3QgIlNob3J0IFByZWZpeDogIiAkc2hvcnRfcHJlZml4CiAgICAgICAgICAgICAgICAgICAgJHR5cGVfc3RhcnQgPSAkc2hvcnRfcHJlZml4X2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAkdHlwZV9lbmQgPSAkdHlwZV9zdGFydCArIDMKICAgICAgICAgICAgICAgICAgICAkdHlwZSA9IFtiaXRjb252ZXJ0ZXJdOjpUb1VJbnQzMigkYmxvYl9kYXRhWyR0eXBlX3N0YXJ0Li4kdHlwZV9lbmRdLDApCiAgICAgICAgICAgICAgICAgICAgI3dyaXRlLWhvc3QgJHR5cGUKICAgICAgICAgICAgICAgICAgICAkc3RhdGVfc3RhcnQgPSAkdHlwZV9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgJHN0YXRlX2VuZCA9ICRzdGF0ZV9zdGFydCArIDMKICAgICAgICAgICAgICAgICAgICAkc3RhdGUgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGJsb2JfZGF0YVskc3RhdGVfc3RhcnQuLiRzdGF0ZV9lbmRdLDApCiAgICAgICAgICAgICAgICAgICAgI3dyaXRlLWhvc3QgJHN0YXRlCiAgICAgICAgICAgICAgICAgICAgJGNvbW1lbnRfc2l6ZV9zdGFydCA9ICRzdGF0ZV9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgJGNvbW1lbnRfc2l6ZV9lbmQgPSAkY29tbWVudF9zaXplX3N0YXJ0ICsgMQogICAgICAgICAgICAgICAgICAgICRjb21tZW50X3NpemUgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MTYoJGJsb2JfZGF0YVskY29tbWVudF9zaXplX3N0YXJ0Li4kY29tbWVudF9zaXplX2VuZF0sMCkKICAgICAgICAgICAgICAgICAgICAkY29tbWVudF9zdGFydCA9ICRjb21tZW50X3NpemVfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICRjb21tZW50X2VuZCA9ICRjb21tZW50X3N0YXJ0ICsgJGNvbW1lbnRfc2l6ZSAtIDEKICAgICAgICAgICAgICAgICAgICBpZiAoJGNvbW1lbnRfc2l6ZSAtZ3QgMCkgIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGNvbW1lbnQgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVbmljb2RlLkdldFN0cmluZygkYmxvYl9kYXRhWyRjb21tZW50X3N0YXJ0Li4kY29tbWVudF9lbmRdKQogICAgICAgICAgICAgICAgICAgICAgICAjV3JpdGUtSG9zdCAkY29tbWVudCAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJHByZWZpeF90aW1lc3RhbXBfc3RhcnQgPSAkY29tbWVudF9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgJHByZWZpeF90aW1lc3RhbXBfZW5kID0gJHByZWZpeF90aW1lc3RhbXBfc3RhcnQgKyA3CiAgICAgICAgICAgICAgICAgICAgIyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2NjMjMwMzI0LmFzcHggRklMRVRJTUUKICAgICAgICAgICAgICAgICAgICAkcHJlZml4X3RpbWVzdGFtcCA9ICRibG9iX2RhdGFbJHByZWZpeF90aW1lc3RhbXBfc3RhcnQuLiRwcmVmaXhfdGltZXN0YW1wX2VuZF0gI2R3b3JkIGxvd0RhdGVUaW1lICNkd29yZCBoaWdoZGF0ZXRpbWUKICAgICAgICAgICAgICAgICAgICAkc3RhdGVfdGltZXN0YW1wX3N0YXJ0ID0gJHByZWZpeF90aW1lc3RhbXBfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICRzdGF0ZV90aW1lc3RhbXBfZW5kID0gJHN0YXRlX3RpbWVzdGFtcF9zdGFydCArIDcKICAgICAgICAgICAgICAgICAgICAkc3RhdGVfdGltZXN0YW1wID0gJGJsb2JfZGF0YVskc3RhdGVfdGltZXN0YW1wX3N0YXJ0Li4kc3RhdGVfdGltZXN0YW1wX2VuZF0KICAgICAgICAgICAgICAgICAgICAkY29tbWVudF90aW1lc3RhbXBfc3RhcnQgPSAkc3RhdGVfdGltZXN0YW1wX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAkY29tbWVudF90aW1lc3RhbXBfZW5kID0gJGNvbW1lbnRfdGltZXN0YW1wX3N0YXJ0ICsgNwogICAgICAgICAgICAgICAgICAgICRjb21tZW50X3RpbWVzdGFtcCA9ICRibG9iX2RhdGFbJGNvbW1lbnRfdGltZXN0YW1wX3N0YXJ0Li4kY29tbWVudF90aW1lc3RhbXBfZW5kXQogICAgICAgICAgICAgICAgICAgICR2ZXJzaW9uX3N0YXJ0ID0gJGNvbW1lbnRfdGltZXN0YW1wX2VuZCAgKyAxCiAgICAgICAgICAgICAgICAgICAgJHZlcnNpb25fZW5kID0gJHZlcnNpb25fc3RhcnQgKyAzCiAgICAgICAgICAgICAgICAgICAgJHZlcnNpb24gPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGJsb2JfZGF0YVskdmVyc2lvbl9zdGFydC4uJHZlcnNpb25fZW5kXSwwKQoKICAgICAgICAgICAgICAgICAgICAjd3JpdGUtaG9zdCAkdmVyc2lvbgogICAgICAgICAgICAgICAgICAgIGlmICgkdmVyc2lvbiAtbmUgMykKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICN3cml0ZS1ob3N0ICJlcnJvciIKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICMgUGFyc2UgcmVzdCBvZiBERlNOYW1lc3BhY2VSb290T3JMaW5rQmxvYiBoZXJlCiAgICAgICAgICAgICAgICAgICAgJGRmc190YXJnZXRsaXN0X2Jsb2Jfc2l6ZV9zdGFydCA9ICR2ZXJzaW9uX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAkZGZzX3RhcmdldGxpc3RfYmxvYl9zaXplX2VuZCA9ICRkZnNfdGFyZ2V0bGlzdF9ibG9iX3NpemVfc3RhcnQgKyAzCiAgICAgICAgICAgICAgICAgICAgJGRmc190YXJnZXRsaXN0X2Jsb2Jfc2l6ZSA9IFtiaXRjb252ZXJ0ZXJdOjpUb1VJbnQzMigkYmxvYl9kYXRhWyRkZnNfdGFyZ2V0bGlzdF9ibG9iX3NpemVfc3RhcnQuLiRkZnNfdGFyZ2V0bGlzdF9ibG9iX3NpemVfZW5kXSwwKQogICAgICAgICAgICAgICAgICAgICN3cml0ZS1ob3N0ICRkZnNfdGFyZ2V0bGlzdF9ibG9iX3NpemUKICAgICAgICAgICAgICAgICAgICAkZGZzX3RhcmdldGxpc3RfYmxvYl9zdGFydCA9ICRkZnNfdGFyZ2V0bGlzdF9ibG9iX3NpemVfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICRkZnNfdGFyZ2V0bGlzdF9ibG9iX2VuZCA9ICRkZnNfdGFyZ2V0bGlzdF9ibG9iX3N0YXJ0ICsgJGRmc190YXJnZXRsaXN0X2Jsb2Jfc2l6ZSAtIDEKICAgICAgICAgICAgICAgICAgICAkZGZzX3RhcmdldGxpc3RfYmxvYiA9ICRibG9iX2RhdGFbJGRmc190YXJnZXRsaXN0X2Jsb2Jfc3RhcnQuLiRkZnNfdGFyZ2V0bGlzdF9ibG9iX2VuZF0KICAgICAgICAgICAgICAgICAgICAkcmVzZXJ2ZWRfYmxvYl9zaXplX3N0YXJ0ID0gJGRmc190YXJnZXRsaXN0X2Jsb2JfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICRyZXNlcnZlZF9ibG9iX3NpemVfZW5kID0gJHJlc2VydmVkX2Jsb2Jfc2l6ZV9zdGFydCArIDMKICAgICAgICAgICAgICAgICAgICAkcmVzZXJ2ZWRfYmxvYl9zaXplID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDMyKCRibG9iX2RhdGFbJHJlc2VydmVkX2Jsb2Jfc2l6ZV9zdGFydC4uJHJlc2VydmVkX2Jsb2Jfc2l6ZV9lbmRdLDApCiAgICAgICAgICAgICAgICAgICAgI3dyaXRlLWhvc3QgJHJlc2VydmVkX2Jsb2Jfc2l6ZQogICAgICAgICAgICAgICAgICAgICRyZXNlcnZlZF9ibG9iX3N0YXJ0ID0gJHJlc2VydmVkX2Jsb2Jfc2l6ZV9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgJHJlc2VydmVkX2Jsb2JfZW5kID0gJHJlc2VydmVkX2Jsb2Jfc3RhcnQgKyAkcmVzZXJ2ZWRfYmxvYl9zaXplIC0gMQogICAgICAgICAgICAgICAgICAgICRyZXNlcnZlZF9ibG9iID0gJGJsb2JfZGF0YVskcmVzZXJ2ZWRfYmxvYl9zdGFydC4uJHJlc2VydmVkX2Jsb2JfZW5kXQogICAgICAgICAgICAgICAgICAgICRyZWZlcnJhbF90dGxfc3RhcnQgPSAkcmVzZXJ2ZWRfYmxvYl9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgJHJlZmVycmFsX3R0bF9lbmQgPSAkcmVmZXJyYWxfdHRsX3N0YXJ0ICsgMwogICAgICAgICAgICAgICAgICAgICRyZWZlcnJhbF90dGwgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGJsb2JfZGF0YVskcmVmZXJyYWxfdHRsX3N0YXJ0Li4kcmVmZXJyYWxfdHRsX2VuZF0sMCkKCiAgICAgICAgICAgICAgICAgICAgI1BhcnNlIERGU1RhcmdldExpc3RCbG9iCiAgICAgICAgICAgICAgICAgICAgJHRhcmdldF9jb3VudF9zdGFydCA9IDAKICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X2NvdW50X2VuZCA9ICR0YXJnZXRfY291bnRfc3RhcnQgKyAzCiAgICAgICAgICAgICAgICAgICAgJHRhcmdldF9jb3VudCA9IFtiaXRjb252ZXJ0ZXJdOjpUb1VJbnQzMigkZGZzX3RhcmdldGxpc3RfYmxvYlskdGFyZ2V0X2NvdW50X3N0YXJ0Li4kdGFyZ2V0X2NvdW50X2VuZF0sMCkKICAgICAgICAgICAgICAgICAgICAkdF9vZmZzZXQgPSAkdGFyZ2V0X2NvdW50X2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAjd3JpdGUtaG9zdCAkdGFyZ2V0X2NvdW50CgogICAgICAgICAgICAgICAgICAgIGZvcigkaj0xOyAkaiAtbGUgJHRhcmdldF9jb3VudDsgJGorKyl7CiAgICAgICAgICAgICAgICAgICAgICAgICR0YXJnZXRfZW50cnlfc2l6ZV9zdGFydCA9ICR0X29mZnNldAogICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X2VudHJ5X3NpemVfZW5kID0gJHRhcmdldF9lbnRyeV9zaXplX3N0YXJ0ICsgMwogICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X2VudHJ5X3NpemUgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGRmc190YXJnZXRsaXN0X2Jsb2JbJHRhcmdldF9lbnRyeV9zaXplX3N0YXJ0Li4kdGFyZ2V0X2VudHJ5X3NpemVfZW5kXSwwKQogICAgICAgICAgICAgICAgICAgICAgICAjd3JpdGUtaG9zdCAkdGFyZ2V0X2VudHJ5X3NpemUKICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldF90aW1lX3N0YW1wX3N0YXJ0ID0gJHRhcmdldF9lbnRyeV9zaXplX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldF90aW1lX3N0YW1wX2VuZCA9ICR0YXJnZXRfdGltZV9zdGFtcF9zdGFydCArIDcKICAgICAgICAgICAgICAgICAgICAgICAgIyBGSUxFVElNRSBhZ2FpbiBvciBzcGVjaWFsIGlmIHByaW9yaXR5IHJhbmsgYW5kIHByaW9yaXR5IGNsYXNzIDAKICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldF90aW1lX3N0YW1wID0gJGRmc190YXJnZXRsaXN0X2Jsb2JbJHRhcmdldF90aW1lX3N0YW1wX3N0YXJ0Li4kdGFyZ2V0X3RpbWVfc3RhbXBfZW5kXQogICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X3N0YXRlX3N0YXJ0ID0gJHRhcmdldF90aW1lX3N0YW1wX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldF9zdGF0ZV9lbmQgPSAkdGFyZ2V0X3N0YXRlX3N0YXJ0ICsgMwogICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X3N0YXRlID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDMyKCRkZnNfdGFyZ2V0bGlzdF9ibG9iWyR0YXJnZXRfc3RhdGVfc3RhcnQuLiR0YXJnZXRfc3RhdGVfZW5kXSwwKQogICAgICAgICAgICAgICAgICAgICAgICAjd3JpdGUtaG9zdCAkdGFyZ2V0X3N0YXRlCiAgICAgICAgICAgICAgICAgICAgICAgICR0YXJnZXRfdHlwZV9zdGFydCA9ICR0YXJnZXRfc3RhdGVfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X3R5cGVfZW5kID0gJHRhcmdldF90eXBlX3N0YXJ0ICsgMwogICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X3R5cGUgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGRmc190YXJnZXRsaXN0X2Jsb2JbJHRhcmdldF90eXBlX3N0YXJ0Li4kdGFyZ2V0X3R5cGVfZW5kXSwwKQogICAgICAgICAgICAgICAgICAgICAgICAjd3JpdGUtaG9zdCAkdGFyZ2V0X3R5cGUKICAgICAgICAgICAgICAgICAgICAgICAgJHNlcnZlcl9uYW1lX3NpemVfc3RhcnQgPSAkdGFyZ2V0X3R5cGVfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICAgICAkc2VydmVyX25hbWVfc2l6ZV9lbmQgPSAkc2VydmVyX25hbWVfc2l6ZV9zdGFydCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgJHNlcnZlcl9uYW1lX3NpemUgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MTYoJGRmc190YXJnZXRsaXN0X2Jsb2JbJHNlcnZlcl9uYW1lX3NpemVfc3RhcnQuLiRzZXJ2ZXJfbmFtZV9zaXplX2VuZF0sMCkKICAgICAgICAgICAgICAgICAgICAgICAgI3dyaXRlLWhvc3QgJHNlcnZlcl9uYW1lX3NpemUgCiAgICAgICAgICAgICAgICAgICAgICAgICRzZXJ2ZXJfbmFtZV9zdGFydCA9ICRzZXJ2ZXJfbmFtZV9zaXplX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgJHNlcnZlcl9uYW1lX2VuZCA9ICRzZXJ2ZXJfbmFtZV9zdGFydCArICRzZXJ2ZXJfbmFtZV9zaXplIC0gMQogICAgICAgICAgICAgICAgICAgICAgICAkc2VydmVyX25hbWUgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVbmljb2RlLkdldFN0cmluZygkZGZzX3RhcmdldGxpc3RfYmxvYlskc2VydmVyX25hbWVfc3RhcnQuLiRzZXJ2ZXJfbmFtZV9lbmRdKQogICAgICAgICAgICAgICAgICAgICAgICAjd3JpdGUtaG9zdCAkc2VydmVyX25hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJHNoYXJlX25hbWVfc2l6ZV9zdGFydCA9ICRzZXJ2ZXJfbmFtZV9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICRzaGFyZV9uYW1lX3NpemVfZW5kID0gJHNoYXJlX25hbWVfc2l6ZV9zdGFydCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgJHNoYXJlX25hbWVfc2l6ZSA9IFtiaXRjb252ZXJ0ZXJdOjpUb1VJbnQxNigkZGZzX3RhcmdldGxpc3RfYmxvYlskc2hhcmVfbmFtZV9zaXplX3N0YXJ0Li4kc2hhcmVfbmFtZV9zaXplX2VuZF0sMCkKICAgICAgICAgICAgICAgICAgICAgICAgJHNoYXJlX25hbWVfc3RhcnQgPSAkc2hhcmVfbmFtZV9zaXplX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgJHNoYXJlX25hbWVfZW5kID0gJHNoYXJlX25hbWVfc3RhcnQgKyAkc2hhcmVfbmFtZV9zaXplIC0gMQogICAgICAgICAgICAgICAgICAgICAgICAkc2hhcmVfbmFtZSA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVuaWNvZGUuR2V0U3RyaW5nKCRkZnNfdGFyZ2V0bGlzdF9ibG9iWyRzaGFyZV9uYW1lX3N0YXJ0Li4kc2hhcmVfbmFtZV9lbmRdKQogICAgICAgICAgICAgICAgICAgICAgICAjd3JpdGUtaG9zdCAkc2hhcmVfbmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X2xpc3QgKz0gIlxcJHNlcnZlcl9uYW1lXCRzaGFyZV9uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAkdF9vZmZzZXQgPSAkc2hhcmVfbmFtZV9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICRvZmZzZXQgPSAkYmxvYl9kYXRhX2VuZCArIDEKICAgICAgICAgICAgJGRmc19wa3RfcHJvcGVydGllcyA9IEB7CiAgICAgICAgICAgICAgICAnTmFtZScgPSAkYmxvYl9uYW1lCiAgICAgICAgICAgICAgICAnUHJlZml4JyA9ICRwcmVmaXgKICAgICAgICAgICAgICAgICdUYXJnZXRMaXN0JyA9ICR0YXJnZXRfbGlzdAogICAgICAgICAgICB9CiAgICAgICAgICAgICRvYmplY3RfbGlzdCArPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBQU09iamVjdCAtUHJvcGVydHkgJGRmc19wa3RfcHJvcGVydGllcwogICAgICAgICAgICAkcHJlZml4ID0gJG51bGwKICAgICAgICAgICAgJGJsb2JfbmFtZSA9ICRudWxsCiAgICAgICAgICAgICR0YXJnZXRfbGlzdCA9ICRudWxsCiAgICAgICAgfQoKICAgICAgICAkc2VydmVycyA9IEAoKQogICAgICAgICRvYmplY3RfbGlzdCB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgI3dyaXRlLWhvc3QgJF8uTmFtZTsKICAgICAgICAgICAgI3dyaXRlLWhvc3QgJF8uVGFyZ2V0TGlzdAogICAgICAgICAgICBpZiAoJF8uVGFyZ2V0TGlzdCkgewogICAgICAgICAgICAgICAgJF8uVGFyZ2V0TGlzdCB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAkc2VydmVycyArPSAkXy5zcGxpdCgiXCIpWzJdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICRzZXJ2ZXJzCiAgICB9CgogICAgZnVuY3Rpb24gR2V0LURGU3NoYXJlVjEgewogICAgICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICAgICAgcGFyYW0oCiAgICAgICAgICAgIFtTdHJpbmddCiAgICAgICAgICAgICREb21haW4sCgogICAgICAgICAgICBbU3RyaW5nXQogICAgICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKCiAgICAgICAgICAgIFtTdHJpbmddCiAgICAgICAgICAgICRBRFNwYXRoLAoKICAgICAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldCiAgICAgICAgICAgIFtJbnRdCiAgICAgICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICAgICAkQ3JlZGVudGlhbAogICAgICAgICkKCiAgICAgICAgJERGU3NlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQURTcGF0aCAkQURTcGF0aCAtUGFnZVNpemUgJFBhZ2VTaXplCgogICAgICAgIGlmKCRERlNzZWFyY2hlcikgewogICAgICAgICAgICAkREZTc2hhcmVzID0gQCgpCiAgICAgICAgICAgICRERlNzZWFyY2hlci5maWx0ZXIgPSAiKCYob2JqZWN0Q2xhc3M9ZlREZnMpKSIKCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkREZTU2VhcmNoZXIuRmluZEFsbCgpIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgJFByb3BlcnRpZXMgPSAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgJFJlbW90ZU5hbWVzID0gJFByb3BlcnRpZXMucmVtb3Rlc2VydmVybmFtZQogICAgICAgICAgICAgICAgICAgICRQa3QgPSAkUHJvcGVydGllcy5wa3QKCiAgICAgICAgICAgICAgICAgICAgJERGU3NoYXJlcyArPSAkUmVtb3RlTmFtZXMgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRfLkNvbnRhaW5zKCdcJykgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5IEB7J05hbWUnPSRQcm9wZXJ0aWVzLm5hbWVbMF07J1JlbW90ZVNlcnZlck5hbWUnPSRfLnNwbGl0KCJcIilbMl19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtRGVidWcgIkVycm9yIGluIHBhcnNpbmcgREZTIHNoYXJlIDogJF8iCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYoJHBrdCAtYW5kICRwa3RbMF0pIHsKICAgICAgICAgICAgICAgICAgICBQYXJzZS1Qa3QgJHBrdFswXSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBJZiBhIGZvbGRlciBkb2Vzbid0IGhhdmUgYSByZWRpcmVjdGlvbiBpdCB3aWxsCiAgICAgICAgICAgICAgICAgICAgICAgICMgaGF2ZSBhIHRhcmdldCBsaWtlCiAgICAgICAgICAgICAgICAgICAgICAgICMgXFxudWxsXFRlc3ROYW1lU3BhY2VcZm9sZGVyXC5ERlNGb2xkZXJMaW5rIHNvIHdlCiAgICAgICAgICAgICAgICAgICAgICAgICMgZG8gYWN0dWFsbHkgd2FudCB0byBtYXRjaCBvbiAibnVsbCIgcmF0aGVyIHRoYW4KICAgICAgICAgICAgICAgICAgICAgICAgIyAkbnVsbAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJF8gLW5lICJudWxsIikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5IEB7J05hbWUnPSRQcm9wZXJ0aWVzLm5hbWVbMF07J1JlbW90ZVNlcnZlck5hbWUnPSRffQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkdldC1ERlNzaGFyZVYxIGVycm9yIDogJF8iCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJERGU3NoYXJlcyB8IFNvcnQtT2JqZWN0IC1Qcm9wZXJ0eSAiUmVtb3RlU2VydmVyTmFtZSIKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gR2V0LURGU3NoYXJlVjIgewogICAgICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICAgICAgcGFyYW0oCiAgICAgICAgICAgIFtTdHJpbmddCiAgICAgICAgICAgICREb21haW4sCgogICAgICAgICAgICBbU3RyaW5nXQogICAgICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKCiAgICAgICAgICAgIFtTdHJpbmddCiAgICAgICAgICAgICRBRFNwYXRoLAoKICAgICAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgICAgICBbSW50XQogICAgICAgICAgICAkUGFnZVNpemUgPSAyMDAsCgogICAgICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAgICAgJENyZWRlbnRpYWwKICAgICAgICApCgogICAgICAgICRERlNzZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUFEU3BhdGggJEFEU3BhdGggLVBhZ2VTaXplICRQYWdlU2l6ZQoKICAgICAgICBpZigkREZTc2VhcmNoZXIpIHsKICAgICAgICAgICAgJERGU3NoYXJlcyA9IEAoKQogICAgICAgICAgICAkREZTc2VhcmNoZXIuZmlsdGVyID0gIigmKG9iamVjdENsYXNzPW1zREZTLUxpbmt2MikpIgogICAgICAgICAgICAkREZTU2VhcmNoZXIuUHJvcGVydGllc1RvTG9hZC5BZGRSYW5nZSgoJ21zZGZzLWxpbmtwYXRodjInLCdtc0RGUy1UYXJnZXRMaXN0djInKSkKCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkREZTU2VhcmNoZXIuRmluZEFsbCgpIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgJFByb3BlcnRpZXMgPSAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgJHRhcmdldF9saXN0ID0gJFByb3BlcnRpZXMuJ21zZGZzLXRhcmdldGxpc3R2MidbMF0KICAgICAgICAgICAgICAgICAgICAkeG1sID0gW3htbF1bU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVbmljb2RlLkdldFN0cmluZygkdGFyZ2V0X2xpc3RbMi4uKCR0YXJnZXRfbGlzdC5MZW5ndGgtMSldKQogICAgICAgICAgICAgICAgICAgICRERlNzaGFyZXMgKz0gJHhtbC50YXJnZXRzLkNoaWxkTm9kZXMgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVGFyZ2V0ID0gJF8uSW5uZXJUZXh0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRUYXJnZXQuQ29udGFpbnMoJ1wnKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkREZTcm9vdCA9ICRUYXJnZXQuc3BsaXQoIlwiKVszXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTaGFyZU5hbWUgPSAkUHJvcGVydGllcy4nbXNkZnMtbGlua3BhdGh2MidbMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZXctT2JqZWN0IC1UeXBlTmFtZSBQU09iamVjdCAtUHJvcGVydHkgQHsnTmFtZSc9IiRERlNyb290JFNoYXJlTmFtZSI7J1JlbW90ZVNlcnZlck5hbWUnPSRUYXJnZXQuc3BsaXQoIlwiKVsyXX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1EZWJ1ZyAiRXJyb3IgaW4gcGFyc2luZyB0YXJnZXQgOiAkXyIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJHZXQtREZTc2hhcmVWMiBlcnJvciA6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgICAgICRERlNzaGFyZXMgfCBTb3J0LU9iamVjdCAtVW5pcXVlIC1Qcm9wZXJ0eSAiUmVtb3RlU2VydmVyTmFtZSIKICAgICAgICB9CiAgICB9CgogICAgJERGU3NoYXJlcyA9IEAoKQoKICAgIGlmICggKCRWZXJzaW9uIC1lcSAiYWxsIikgLW9yICgkVmVyc2lvbi5lbmRzV2l0aCgiMSIpKSApIHsKICAgICAgICAkREZTc2hhcmVzICs9IEdldC1ERlNzaGFyZVYxIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQURTcGF0aCAkQURTcGF0aCAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICB9CiAgICBpZiAoICgkVmVyc2lvbiAtZXEgImFsbCIpIC1vciAoJFZlcnNpb24uZW5kc1dpdGgoIjIiKSkgKSB7CiAgICAgICAgJERGU3NoYXJlcyArPSBHZXQtREZTc2hhcmVWMiAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUFEU3BhdGggJEFEU3BhdGggLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgfQoKICAgICRERlNzaGFyZXMgfCBTb3J0LU9iamVjdCAtUHJvcGVydHkgKCJSZW1vdGVTZXJ2ZXJOYW1lIiwiTmFtZSIpIC1VbmlxdWUKfQoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMKIyBHUE8gcmVsYXRlZCBmdW5jdGlvbnMuCiMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCmZ1bmN0aW9uIEdldC1HcHRUbXBsIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBIZWxwZXIgdG8gcGFyc2UgYSBHcHRUbXBsLmluZiBwb2xpY3kgZmlsZSBwYXRoIGludG8gYSBjdXN0b20gb2JqZWN0LgoKICAgIC5QQVJBTUVURVIgR3B0VG1wbFBhdGgKCiAgICAgICAgVGhlIEdwdFRtcGwuaW5mIGZpbGUgcGF0aCBuYW1lIHRvIHBhcnNlLiAKCiAgICAuUEFSQU1FVEVSIFVzZVBTRHJpdmUKCiAgICAgICAgU3dpdGNoLiBNb3VudCB0aGUgdGFyZ2V0IEdwdFRtcGwgZm9sZGVyIHBhdGggYXMgYSB0ZW1wb3JhcnkgUFNEcml2ZS4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1HcHRUbXBsIC1HcHRUbXBsUGF0aCAiXFxkZXYudGVzdGxhYi5sb2NhbFxzeXN2b2xcZGV2LnRlc3RsYWIubG9jYWxcUG9saWNpZXNcezMxQjJGMzQwLTAxNkQtMTFEMi05NDVGLTAwQzA0RkI5ODRGOX1cTUFDSElORVxNaWNyb3NvZnRcV2luZG93cyBOVFxTZWNFZGl0XEdwdFRtcGwuaW5mIgoKICAgICAgICBQYXJzZSB0aGUgZGVmYXVsdCBkb21haW4gcG9saWN5IC5pbmYgZm9yIGRldi50ZXN0bGFiLmxvY2FsCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEdwdFRtcGxQYXRoLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRVc2VQU0RyaXZlCiAgICApCgogICAgYmVnaW4gewogICAgICAgIGlmKCRVc2VQU0RyaXZlKSB7CiAgICAgICAgICAgICMgaWYgd2UncmUgUFNEcml2ZXMsIGNyZWF0ZSBhIHRlbXBvcmFyeSBtb3VudCBwb2ludAogICAgICAgICAgICAkUGFydHMgPSAkR3B0VG1wbFBhdGguc3BsaXQoJ1wnKQogICAgICAgICAgICAkRm9sZGVyUGF0aCA9ICRQYXJ0c1swLi4oJFBhcnRzLmxlbmd0aC0yKV0gLWpvaW4gJ1wnCiAgICAgICAgICAgICRGaWxlUGF0aCA9ICRQYXJ0c1stMV0KICAgICAgICAgICAgJFJhbmREcml2ZSA9ICgiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoiLlRvQ2hhckFycmF5KCkgfCBHZXQtUmFuZG9tIC1Db3VudCA3KSAtam9pbiAnJwogICAgICAgICAgICAKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiTW91bnRpbmcgcGF0aCAkR3B0VG1wbFBhdGggdXNpbmcgYSB0ZW1wIFBTRHJpdmUgYXQgJFJhbmREcml2ZSIKCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkTnVsbCA9IE5ldy1QU0RyaXZlIC1OYW1lICRSYW5kRHJpdmUgLVBTUHJvdmlkZXIgRmlsZVN5c3RlbSAtUm9vdCAkRm9sZGVyUGF0aCAgLUVycm9yQWN0aW9uIFN0b3AKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1EZWJ1ZyAiRXJyb3IgbW91bnRpbmcgcGF0aCAkR3B0VG1wbFBhdGggOiAkXyIKICAgICAgICAgICAgICAgIHJldHVybiAkTnVsbAogICAgICAgICAgICB9CgogICAgICAgICAgICAjIHNvIHdlIGNhbiBjZC9kaXIgdGhlIG5ldyBkcml2ZQogICAgICAgICAgICAkR3B0VG1wbFBhdGggPSAkUmFuZERyaXZlICsgIjpcIiArICRGaWxlUGF0aAogICAgICAgIH0gCiAgICB9CgogICAgcHJvY2VzcyB7CiAgICAgICAgJFNlY3Rpb25OYW1lID0gJycKICAgICAgICAkU2VjdGlvbnNUZW1wID0gQHt9CiAgICAgICAgJFNlY3Rpb25zRmluYWwgPSBAe30KCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiUGFyc2luZyAkR3B0VG1wbFBhdGgiCgogICAgICAgICAgICBHZXQtQ29udGVudCAkR3B0VG1wbFBhdGggLUVycm9yQWN0aW9uIFN0b3AgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICBpZiAoJF8gLW1hdGNoICdcWycpIHsKICAgICAgICAgICAgICAgICAgICAjIHRoaXMgc2lnbmlmaWVzIHRoYXQgd2UncmUgc3RhcnRpbmcgYSBuZXcgc2VjdGlvbgogICAgICAgICAgICAgICAgICAgICRTZWN0aW9uTmFtZSA9ICRfLnRyaW0oJ1tdJykgLXJlcGxhY2UgJyAnLCcnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlaWYoJF8gLW1hdGNoICc9JykgewogICAgICAgICAgICAgICAgICAgICRQYXJ0cyA9ICRfLnNwbGl0KCc9JykKICAgICAgICAgICAgICAgICAgICAkUHJvcGVydHlOYW1lID0gJFBhcnRzWzBdLnRyaW0oKQogICAgICAgICAgICAgICAgICAgICRQcm9wZXJ0eVZhbHVlcyA9ICRQYXJ0c1sxXS50cmltKCkKCiAgICAgICAgICAgICAgICAgICAgaWYoJFByb3BlcnR5VmFsdWVzIC1tYXRjaCAnLCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFByb3BlcnR5VmFsdWVzID0gJFByb3BlcnR5VmFsdWVzLnNwbGl0KCcsJykKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmKCEkU2VjdGlvbnNUZW1wWyRTZWN0aW9uTmFtZV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNlY3Rpb25zVGVtcC5BZGQoJFNlY3Rpb25OYW1lLCBAe30pCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAjIGFkZCB0aGUgcGFyc2VkIHByb3BlcnR5IGludG8gdGhlIHJlbGV2YW50IFNlY3Rpb24gbmFtZQogICAgICAgICAgICAgICAgICAgICRTZWN0aW9uc1RlbXBbJFNlY3Rpb25OYW1lXS5BZGQoICRQcm9wZXJ0eU5hbWUsICRQcm9wZXJ0eVZhbHVlcyApCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEZvckVhY2ggKCRTZWN0aW9uIGluICRTZWN0aW9uc1RlbXAua2V5cykgewogICAgICAgICAgICAgICAgIyB0cmFuc2Zvcm0gZWFjaCBuZXN0ZWQgaGFzaCB0YWJsZSBpbnRvIGEgY3VzdG9tIG9iamVjdAogICAgICAgICAgICAgICAgJFNlY3Rpb25zRmluYWxbJFNlY3Rpb25dID0gTmV3LU9iamVjdCBQU09iamVjdCAtUHJvcGVydHkgJFNlY3Rpb25zVGVtcFskU2VjdGlvbl0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyB0cmFuc2Zvcm0gdGhlIHBhcmVudCBoYXNoIHRhYmxlIGludG8gYSBjdXN0b20gb2JqZWN0CiAgICAgICAgICAgIE5ldy1PYmplY3QgUFNPYmplY3QgLVByb3BlcnR5ICRTZWN0aW9uc0ZpbmFsCiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtRGVidWcgIkVycm9yIHBhcnNpbmcgJEdwdFRtcGxQYXRoIDogJF8iCiAgICAgICAgfQogICAgfQoKICAgIGVuZCB7CiAgICAgICAgaWYoJFVzZVBTRHJpdmUgLWFuZCAkUmFuZERyaXZlKSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlJlbW92aW5nIHRlbXAgUFNEcml2ZSAkUmFuZERyaXZlIgogICAgICAgICAgICBHZXQtUFNEcml2ZSAtTmFtZSAkUmFuZERyaXZlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIHwgUmVtb3ZlLVBTRHJpdmUgLUZvcmNlCiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LUdyb3Vwc1hNTCB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgSGVscGVyIHRvIHBhcnNlIGEgZ3JvdXBzLnhtbCBmaWxlIHBhdGggaW50byBhIGN1c3RvbSBvYmplY3QuCgogICAgLlBBUkFNRVRFUiBHcm91cHNYTUxwYXRoCgogICAgICAgIFRoZSBncm91cHMueG1sIGZpbGUgcGF0aCBuYW1lIHRvIHBhcnNlLiAKCiAgICAuUEFSQU1FVEVSIFJlc29sdmVTaWRzCgogICAgICAgIFN3aXRjaC4gUmVzb2x2ZSBTaWRzIGZyb20gYSBEQyBwb2xpY3kgdG8gb2JqZWN0IG5hbWVzLgoKICAgIC5QQVJBTUVURVIgVXNlUFNEcml2ZQoKICAgICAgICBTd2l0Y2guIE1vdW50IHRoZSB0YXJnZXQgZ3JvdXBzLnhtbCBmb2xkZXIgcGF0aCBhcyBhIHRlbXBvcmFyeSBQU0RyaXZlLgojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcm91cHNYTUxQYXRoLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZXNvbHZlU2lkcywKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVXNlUFNEcml2ZQogICAgKQoKICAgIGJlZ2luIHsKICAgICAgICBpZigkVXNlUFNEcml2ZSkgewogICAgICAgICAgICAjIGlmIHdlJ3JlIFBTRHJpdmVzLCBjcmVhdGUgYSB0ZW1wb3JhcnkgbW91bnQgcG9pbnQKICAgICAgICAgICAgJFBhcnRzID0gJEdyb3Vwc1hNTFBhdGguc3BsaXQoJ1wnKQogICAgICAgICAgICAkRm9sZGVyUGF0aCA9ICRQYXJ0c1swLi4oJFBhcnRzLmxlbmd0aC0yKV0gLWpvaW4gJ1wnCiAgICAgICAgICAgICRGaWxlUGF0aCA9ICRQYXJ0c1stMV0KICAgICAgICAgICAgJFJhbmREcml2ZSA9ICgiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoiLlRvQ2hhckFycmF5KCkgfCBHZXQtUmFuZG9tIC1Db3VudCA3KSAtam9pbiAnJwogICAgICAgICAgICAKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiTW91bnRpbmcgcGF0aCAkR3JvdXBzWE1MUGF0aCB1c2luZyBhIHRlbXAgUFNEcml2ZSBhdCAkUmFuZERyaXZlIgoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICROdWxsID0gTmV3LVBTRHJpdmUgLU5hbWUgJFJhbmREcml2ZSAtUFNQcm92aWRlciBGaWxlU3lzdGVtIC1Sb290ICRGb2xkZXJQYXRoICAtRXJyb3JBY3Rpb24gU3RvcAogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLURlYnVnICJFcnJvciBtb3VudGluZyBwYXRoICRHcm91cHNYTUxQYXRoIDogJF8iCiAgICAgICAgICAgICAgICByZXR1cm4gJE51bGwKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBzbyB3ZSBjYW4gY2QvZGlyIHRoZSBuZXcgZHJpdmUKICAgICAgICAgICAgJEdyb3Vwc1hNTFBhdGggPSAkUmFuZERyaXZlICsgIjpcIiArICRGaWxlUGF0aAogICAgICAgIH0gCiAgICB9CgogICAgcHJvY2VzcyB7CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIFt4bWxdICRHcm91cHNYTUxjb250ZW50ID0gR2V0LUNvbnRlbnQgJEdyb3Vwc1hNTFBhdGggLUVycm9yQWN0aW9uIFN0b3AKCiAgICAgICAgICAgICMgcHJvY2VzcyBhbGwgZ3JvdXAgcHJvcGVydGllcyBpbiB0aGUgWE1MCiAgICAgICAgICAgICRHcm91cHNYTUxjb250ZW50IHwgU2VsZWN0LVhtbCAiLy9Hcm91cCIgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBub2RlIHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICAgICAgICAgICRNZW1iZXJzID0gQCgpCiAgICAgICAgICAgICAgICAkTWVtYmVyT2YgPSBAKCkKCiAgICAgICAgICAgICAgICAjIGV4dHJhY3QgdGhlIGxvY2FsZ3JvdXAgc2lkIGZvciBtZW1iZXJvZgogICAgICAgICAgICAgICAgJExvY2FsU2lkID0gJF8uUHJvcGVydGllcy5Hcm91cFNpZAogICAgICAgICAgICAgICAgaWYoISRMb2NhbFNpZCkgewogICAgICAgICAgICAgICAgICAgIGlmKCRfLlByb3BlcnRpZXMuZ3JvdXBOYW1lIC1tYXRjaCAnQWRtaW5pc3RyYXRvcnMnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbFNpZCA9ICdTLTEtNS0zMi01NDQnCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2VpZigkXy5Qcm9wZXJ0aWVzLmdyb3VwTmFtZSAtbWF0Y2ggJ1JlbW90ZSBEZXNrdG9wJykgewogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWxTaWQgPSAnUy0xLTUtMzItNTU1JwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsU2lkID0gJF8uUHJvcGVydGllcy5ncm91cE5hbWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkTWVtYmVyT2YgPSBAKCRMb2NhbFNpZCkKCiAgICAgICAgICAgICAgICAkXy5Qcm9wZXJ0aWVzLm1lbWJlcnMgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgIyBwcm9jZXNzIGVhY2ggbWVtYmVyIG9mIHRoZSBhYm92ZSBsb2NhbCBncm91cAogICAgICAgICAgICAgICAgICAgICRfIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgTWVtYmVyIHwgV2hlcmUtT2JqZWN0IHsgJF8uYWN0aW9uIC1tYXRjaCAnQUREJyB9IHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJF8uc2lkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVycyArPSAkXy5zaWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMganVzdCBhIHN0cmFpZ2h0IGxvY2FsIGFjY291bnQgbmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlcnMgKz0gJF8ubmFtZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICgkTWVtYmVycyAtb3IgJE1lbWJlcm9mKSB7CiAgICAgICAgICAgICAgICAgICAgIyBleHRyYWN0IG91dCBhbnkvYWxsIGZpbHRlcnMuLi5JIGhhdGUgeW91IEdQUAogICAgICAgICAgICAgICAgICAgICRGaWx0ZXJzID0gJF8uZmlsdGVycyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgJF8gfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBGaWx0ZXIqIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5IEB7J1R5cGUnID0gJF8uTG9jYWxOYW1lOydWYWx1ZScgPSAkXy5uYW1lfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZigkUmVzb2x2ZVNpZHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlcm9mID0gJE1lbWJlcm9mIHwgRm9yRWFjaC1PYmplY3Qge0NvbnZlcnQtU2lkVG9OYW1lICRffQogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVycyA9ICRNZW1iZXJzIHwgRm9yRWFjaC1PYmplY3Qge0NvbnZlcnQtU2lkVG9OYW1lICRffQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYoJE1lbWJlcm9mIC1pc25vdCBbc3lzdGVtLmFycmF5XSkgeyRNZW1iZXJvZiA9IEAoJE1lbWJlcm9mKX0KICAgICAgICAgICAgICAgICAgICBpZigkTWVtYmVycyAtaXNub3QgW3N5c3RlbS5hcnJheV0pIHskTWVtYmVycyA9IEAoJE1lbWJlcnMpfQoKICAgICAgICAgICAgICAgICAgICAkR1BPUHJvcGVydGllcyA9IEB7CiAgICAgICAgICAgICAgICAgICAgICAgICdHUE9EaXNwbGF5TmFtZScgPSAkR1BPRGlzcGxheU5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJ0dQT05hbWUnID0gJEdQT05hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJ0dQT1BhdGgnID0gJEdyb3Vwc1hNTFBhdGgKICAgICAgICAgICAgICAgICAgICAgICAgJ0ZpbHRlcnMnID0gJEZpbHRlcnMKICAgICAgICAgICAgICAgICAgICAgICAgJ01lbWJlck9mJyA9ICRNZW1iZXJvZgogICAgICAgICAgICAgICAgICAgICAgICAnTWVtYmVycycgPSAkTWVtYmVycwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5ICRHUE9Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICBXcml0ZS1EZWJ1ZyAiRXJyb3IgcGFyc2luZyAkR3B0VG1wbFBhdGggOiAkXyIKICAgICAgICB9CiAgICB9CgogICAgZW5kIHsKICAgICAgICBpZigkVXNlUFNEcml2ZSAtYW5kICRSYW5kRHJpdmUpIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiUmVtb3ZpbmcgdGVtcCBQU0RyaXZlICRSYW5kRHJpdmUiCiAgICAgICAgICAgIEdldC1QU0RyaXZlIC1OYW1lICRSYW5kRHJpdmUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgfCBSZW1vdmUtUFNEcml2ZSAtRm9yY2UKICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtTmV0R1BPIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBHZXRzIGEgbGlzdCBvZiBhbGwgY3VycmVudCBHUE9zIGluIGEgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgR1BPbmFtZQoKICAgICAgICBUaGUgR1BPIG5hbWUgdG8gcXVlcnkgZm9yLCB3aWxkY2FyZHMgYWNjZXB0ZWQuICAgCgogICAgLlBBUkFNRVRFUiBEaXNwbGF5TmFtZQoKICAgICAgICBUaGUgR1BPIGRpc3BsYXkgbmFtZSB0byBxdWVyeSBmb3IsIHdpbGRjYXJkcyBhY2NlcHRlZC4gICAKCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBSZXR1cm4gYWxsIEdQTyBvYmplY3RzIGFwcGxpZWQgdG8gYSBnaXZlbiBjb21wdXRlciAoRlFETikuCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byBxdWVyeSBmb3IgR1BPcywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgQURTcGF0aAoKICAgICAgICBUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gKICAgICAgICBlLmcuICJMREFQOi8vY249ezhGRjU5RDI4LTE1RDctNDIyQS1CQ0I3LTJBRTQ1NzI0MTI1QX0sY249cG9saWNpZXMsY249c3lzdGVtLERDPWRldixEQz10ZXN0bGFiLERDPWxvY2FsIgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0R1BPIC1Eb21haW4gdGVzdGxhYi5sb2NhbAogICAgICAgIAogICAgICAgIFJldHVybnMgdGhlIEdQT3MgaW4gdGhlICd0ZXN0bGFiLmxvY2FsJyBkb21haW4uIAojPgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRHUE9uYW1lID0gJyonLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREaXNwbGF5TmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJOYW1lLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCiAgICAgICAgCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQURTcGF0aCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgIGJlZ2luIHsKICAgICAgICAkR1BPU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1BRFNwYXRoICRBRFNwYXRoIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgIH0KCiAgICBwcm9jZXNzIHsKICAgICAgICBpZiAoJEdQT1NlYXJjaGVyKSB7CgogICAgICAgICAgICBpZigkQ29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgICAgICAkR1BPTmFtZXMgPSBAKCkKICAgICAgICAgICAgICAgICRDb21wdXRlcnMgPSBHZXQtTmV0Q29tcHV0ZXIgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtRnVsbERhdGEgLVBhZ2VTaXplICRQYWdlU2l6ZQoKICAgICAgICAgICAgICAgIGlmKCEkQ29tcHV0ZXJzKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgIkNvbXB1dGVyICRDb21wdXRlck5hbWUgaW4gZG9tYWluICckRG9tYWluJyBub3QgZm91bmQhIFRyeSBhIGZ1bGx5IHF1YWxpZmllZCBob3N0IG5hbWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgZ2V0IHRoZSBnaXZlbiBjb21wdXRlcidzIE9VCiAgICAgICAgICAgICAgICAkQ29tcHV0ZXJPVXMgPSBAKCkKICAgICAgICAgICAgICAgIEZvckVhY2goJENvbXB1dGVyIGluICRDb21wdXRlcnMpIHsKICAgICAgICAgICAgICAgICAgICAjIGV4dHJhY3QgYWxsIE9VcyBhIGNvbXB1dGVyIGlzIGEgcGFydCBvZgogICAgICAgICAgICAgICAgICAgICRETiA9ICRDb21wdXRlci5kaXN0aW5ndWlzaGVkbmFtZQoKICAgICAgICAgICAgICAgICAgICAkQ29tcHV0ZXJPVXMgKz0gJEROLnNwbGl0KCIsIikgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRfLnN0YXJ0c3dpdGgoIk9VPSIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRE4uc3Vic3RyaW5nKCRETi5pbmRleG9mKCRfKSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiQ29tcHV0ZXJPVXM6ICRDb21wdXRlck9VcyIKCiAgICAgICAgICAgICAgICAjIGZpbmQgYWxsIHRoZSBHUE9zIGxpbmtlZCB0byB0aGUgY29tcHV0ZXIncyBPVQogICAgICAgICAgICAgICAgRm9yRWFjaCgkQ29tcHV0ZXJPVSBpbiAkQ29tcHV0ZXJPVXMpIHsKICAgICAgICAgICAgICAgICAgICAkR1BPTmFtZXMgKz0gR2V0LU5ldE9VIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQURTcGF0aCAkQ29tcHV0ZXJPVSAtRnVsbERhdGEgLVBhZ2VTaXplICRQYWdlU2l6ZSB8IEZvckVhY2gtT2JqZWN0IHsgCiAgICAgICAgICAgICAgICAgICAgICAgICMgZ2V0IGFueSBHUE8gbGlua3MKICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGUtdmVyYm9zZSAiYmxhaDogJCgkXy5uYW1lKSIKICAgICAgICAgICAgICAgICAgICAgICAgJF8uZ3BsaW5rLnNwbGl0KCJdWyIpIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRfLnN0YXJ0c3dpdGgoIkxEQVAiKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfLnNwbGl0KCI7IilbMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiR1BPTmFtZXM6ICRHUE9OYW1lcyIKCiAgICAgICAgICAgICAgICAjIGZpbmQgYW55IEdQT3MgbGlua2VkIHRvIHRoZSBzaXRlIGZvciB0aGUgZ2l2ZW4gY29tcHV0ZXIKICAgICAgICAgICAgICAgICRDb21wdXRlclNpdGUgPSAoR2V0LVNpdGVOYW1lIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSkuU2l0ZU5hbWUKICAgICAgICAgICAgICAgIGlmKCRDb21wdXRlclNpdGUgLWFuZCAoJENvbXB1dGVyU2l0ZSAtbmUgJ0VSUk9SJykpIHsKICAgICAgICAgICAgICAgICAgICAkR1BPTmFtZXMgKz0gR2V0LU5ldFNpdGUgLVNpdGVOYW1lICRDb21wdXRlclNpdGUgLUZ1bGxEYXRhIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICBpZigkXy5ncGxpbmspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfLmdwbGluay5zcGxpdCgiXVsiKSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJF8uc3RhcnRzd2l0aCgiTERBUCIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfLnNwbGl0KCI7IilbMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJEdQT05hbWVzIHwgV2hlcmUtT2JqZWN0eyRfIC1hbmQgKCRfIC1uZSAnJyl9IHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICAgICAgICAgICAgICAjIHVzZSB0aGUgZ3BsaW5rIGFzIGFuIEFEUyBwYXRoIHRvIGVudW1lcmF0ZSBhbGwgR1BPcyBmb3IgdGhlIGNvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgJEdQT1NlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQURTcGF0aCAkXyAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICAgICAgICAgICAgICAgICAgJEdQT1NlYXJjaGVyLmZpbHRlcj0iKCYob2JqZWN0Q2F0ZWdvcnk9Z3JvdXBQb2xpY3lDb250YWluZXIpKG5hbWU9JEdQT25hbWUpKSIKCiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT1NlYXJjaGVyLkZpbmRBbGwoKSB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE91dCA9IENvbnZlcnQtTERBUFByb3BlcnR5IC1Qcm9wZXJ0aWVzICRfLlByb3BlcnRpZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkT3V0CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICRfCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGlmKCREaXNwbGF5TmFtZSkgewogICAgICAgICAgICAgICAgICAgICRHUE9TZWFyY2hlci5maWx0ZXI9IigmKG9iamVjdENhdGVnb3J5PWdyb3VwUG9saWN5Q29udGFpbmVyKShkaXNwbGF5bmFtZT0kRGlzcGxheU5hbWUpKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRHUE9TZWFyY2hlci5maWx0ZXI9IigmKG9iamVjdENhdGVnb3J5PWdyb3VwUG9saWN5Q29udGFpbmVyKShuYW1lPSRHUE9uYW1lKSkiCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAkR1BPU2VhcmNoZXIuRmluZEFsbCgpIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgY29udmVydC9wcm9jZXNzIHRoZSBMREFQIGZpZWxkcyBmb3IgZWFjaCByZXN1bHQKICAgICAgICAgICAgICAgICAgICAgICAgQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICRfCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBOZXctR1BPSW1tZWRpYXRlVGFzayB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgQnVpbGRzIGFuICdJbW1lZGlhdGUnIHNjaHRhc2sgdG8gcHVzaCBvdXQgdGhyb3VnaCBhIHNwZWNpZmllZCBHUE8uCgogICAgLlBBUkFNRVRFUiBUYXNrTmFtZQoKICAgICAgICBOYW1lIGZvciB0aGUgc2NodGFzayB0byByZWNyZWF0ZS4gUmVxdWlyZWQuCgogICAgLlBBUkFNRVRFUiBDb21tYW5kCgogICAgICAgIFRoZSBjb21tYW5kIHRvIGV4ZWN1dGUgd2l0aCB0aGUgdGFzaywgZGVmYXVsdHMgdG8gJ3Bvd2Vyc2hlbGwnCgogICAgLlBBUkFNRVRFUiBDb21tYW5kQXJndW1lbnRzCgogICAgICAgIFRoZSBhcmd1bWVudHMgdG8gc3VwcGx5IHRvIHRoZSAtQ29tbWFuZCBiZWluZyBsYXVuY2hlZC4KCiAgICAuUEFSQU1FVEVSIFRhc2tEZXNjcmlwdGlvbgoKICAgICAgICBBbiBvcHRpb25hbCBkZXNjcmlwdGlvbiBmb3IgdGhlIHRhc2suCgogICAgLlBBUkFNRVRFUiBUYXNrQXV0aG9yCiAgICAgICAgCiAgICAgICAgVGhlIGRpc3BsYXllZCBhdXRob3Igb2YgdGhlIHRhc2ssIGRlZmF1bHRzIHRvICcnTlQgQVVUSE9SSVRZXFN5c3RlbScKCiAgICAuUEFSQU1FVEVSIFRhc2tNb2RpZmllZERhdGUKICAgIAogICAgICAgIFRoZSBkaXNwbGF5ZWQgbW9kaWZpZWQgZGF0ZSBmb3IgdGhlIHRhc2ssIGRlZmF1bHRzIHRvIDMwIGRheXMgYWdvLgoKICAgIC5QQVJBTUVURVIgR1BPbmFtZQoKICAgICAgICBUaGUgR1BPIG5hbWUgdG8gYnVpbGQgdGhlIHRhc2sgZm9yLgoKICAgIC5QQVJBTUVURVIgR1BPRGlzcGxheU5hbWUKCiAgICAgICAgVGhlIEdQTyBkaXNwbGF5IG5hbWUgdG8gYnVpbGQgdGhlIHRhc2sgZm9yLgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gcXVlcnkgZm9yIHRoZSBHUE9zLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaAogICAgICAgIGUuZy4gIkxEQVA6Ly9jbj17OEZGNTlEMjgtMTVENy00MjJBLUJDQjctMkFFNDU3MjQxMjVBfSxjbj1wb2xpY2llcyxjbj1zeXN0ZW0sREM9ZGV2LERDPXRlc3RsYWIsREM9bG9jYWwiCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTPiBOZXctR1BPSW1tZWRpYXRlVGFzayAtVGFza05hbWUgRGVidWdnaW5nIC1HUE9EaXNwbGF5TmFtZSBTZWN1cmVQb2xpY3kgLUNvbW1hbmRBcmd1bWVudHMgJy1jICIxMjMgfCBPdXQtRmlsZSBDOlxUZW1wXGRlYnVnLnR4dCInIC1Gb3JjZQoKICAgICAgICBDcmVhdGUgYW4gaW1tZWRpYXRlIHNjaHRhc2sgdGhhdCBleGVjdXRlcyB0aGUgc3BlY2lmaWVkIFBvd2VyU2hlbGwgYXJndW1lbnRzIGFuZAogICAgICAgIHB1c2ggaXQgb3V0IHRvIHRoZSAnU2VjdXJlUG9saWN5JyBHUE8sIHNraXBwaW5nIHRoZSBjb25maXJtYXRpb24gcHJvbXB0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTPiBOZXctR1BPSW1tZWRpYXRlVGFzayAtR1BPRGlzcGxheU5hbWUgU2VjdXJlUG9saWN5IC1SZW1vdmUgLUZvcmNlCgogICAgICAgIFJlbW92ZSBhbGwgc2NodGFza3MgZnJvbSB0aGUgJ1NlY3VyZVBvbGljeScgR1BPLCBza2lwcGluZyB0aGUgY29uZmlybWF0aW9uIHByb21wdC4KIz4KICAgIFtDbWRsZXRCaW5kaW5nKERlZmF1bHRQYXJhbWV0ZXJTZXROYW1lID0gJ0NyZWF0ZScpXQogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdDcmVhdGUnLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgICRUYXNrTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0NyZWF0ZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAkQ29tbWFuZCA9ICdwb3dlcnNoZWxsJywKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0NyZWF0ZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAkQ29tbWFuZEFyZ3VtZW50cywKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0NyZWF0ZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAkVGFza0Rlc2NyaXB0aW9uID0gJycsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdDcmVhdGUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJFRhc2tBdXRob3IgPSAnTlQgQVVUSE9SSVRZXFN5c3RlbScsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdDcmVhdGUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJFRhc2tNb2RpZmllZERhdGUgPSAoR2V0LURhdGUgKEdldC1EYXRlKS5BZGREYXlzKC0zMCkgLUZvcm1hdCB1KS50cmltKCJaIiksCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdDcmVhdGUnKV0KICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnUmVtb3ZlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkR1BPbmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0NyZWF0ZScpXQogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdSZW1vdmUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRHUE9EaXNwbGF5TmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0NyZWF0ZScpXQogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdSZW1vdmUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdDcmVhdGUnKV0KICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnUmVtb3ZlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKICAgICAgICAKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnQ3JlYXRlJyldCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ1JlbW92ZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdDcmVhdGUnKV0KICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnUmVtb3ZlJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRm9yY2UsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdSZW1vdmUnKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZW1vdmUsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdDcmVhdGUnKV0KICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnUmVtb3ZlJyldICAgICAgICAKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgICMgYnVpbGQgdGhlIFhNTCBzcGVjIGZvciBvdXIgJ2ltbWVkaWF0ZScgc2NoZWR1bGVkIHRhc2sKICAgICRUYXNrWE1MID0gJzw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9InV0Zi04Ij8+PFNjaGVkdWxlZFRhc2tzIGNsc2lkPSJ7Q0M2M0YyMDAtNzMwOS00YmEwLUIxNTQtQTcxQ0QxMThEQkNDfSI+PEltbWVkaWF0ZVRhc2tWMiBjbHNpZD0iezk3NTZCNTgxLTc2RUMtNDE2OS05QUZDLTBDQThENDNBREI1Rn0iIG5hbWU9IicrJFRhc2tOYW1lKyciIGltYWdlPSIwIiBjaGFuZ2VkPSInKyRUYXNrTW9kaWZpZWREYXRlKyciIHVpZD0ieycrJChbZ3VpZF06Ok5ld0d1aWQoKSkrJ30iIHVzZXJDb250ZXh0PSIwIiByZW1vdmVQb2xpY3k9IjAiPjxQcm9wZXJ0aWVzIGFjdGlvbj0iQyIgbmFtZT0iJyskVGFza05hbWUrJyIgcnVuQXM9Ik5UIEFVVEhPUklUWVxTeXN0ZW0iIGxvZ29uVHlwZT0iUzRVIj48VGFzayB2ZXJzaW9uPSIxLjMiPjxSZWdpc3RyYXRpb25JbmZvPjxBdXRob3I+JyskVGFza0F1dGhvcisnPC9BdXRob3I+PERlc2NyaXB0aW9uPicrJFRhc2tEZXNjcmlwdGlvbisnPC9EZXNjcmlwdGlvbj48L1JlZ2lzdHJhdGlvbkluZm8+PFByaW5jaXBhbHM+PFByaW5jaXBhbCBpZD0iQXV0aG9yIj48VXNlcklkPk5UIEFVVEhPUklUWVxTeXN0ZW08L1VzZXJJZD48UnVuTGV2ZWw+SGlnaGVzdEF2YWlsYWJsZTwvUnVuTGV2ZWw+PExvZ29uVHlwZT5TNFU8L0xvZ29uVHlwZT48L1ByaW5jaXBhbD48L1ByaW5jaXBhbHM+PFNldHRpbmdzPjxJZGxlU2V0dGluZ3M+PER1cmF0aW9uPlBUMTBNPC9EdXJhdGlvbj48V2FpdFRpbWVvdXQ+UFQxSDwvV2FpdFRpbWVvdXQ+PFN0b3BPbklkbGVFbmQ+dHJ1ZTwvU3RvcE9uSWRsZUVuZD48UmVzdGFydE9uSWRsZT5mYWxzZTwvUmVzdGFydE9uSWRsZT48L0lkbGVTZXR0aW5ncz48TXVsdGlwbGVJbnN0YW5jZXNQb2xpY3k+SWdub3JlTmV3PC9NdWx0aXBsZUluc3RhbmNlc1BvbGljeT48RGlzYWxsb3dTdGFydElmT25CYXR0ZXJpZXM+ZmFsc2U8L0Rpc2FsbG93U3RhcnRJZk9uQmF0dGVyaWVzPjxTdG9wSWZHb2luZ09uQmF0dGVyaWVzPnRydWU8L1N0b3BJZkdvaW5nT25CYXR0ZXJpZXM+PEFsbG93SGFyZFRlcm1pbmF0ZT5mYWxzZTwvQWxsb3dIYXJkVGVybWluYXRlPjxTdGFydFdoZW5BdmFpbGFibGU+dHJ1ZTwvU3RhcnRXaGVuQXZhaWxhYmxlPjxBbGxvd1N0YXJ0T25EZW1hbmQ+ZmFsc2U8L0FsbG93U3RhcnRPbkRlbWFuZD48RW5hYmxlZD50cnVlPC9FbmFibGVkPjxIaWRkZW4+dHJ1ZTwvSGlkZGVuPjxFeGVjdXRpb25UaW1lTGltaXQ+UFQwUzwvRXhlY3V0aW9uVGltZUxpbWl0PjxQcmlvcml0eT43PC9Qcmlvcml0eT48RGVsZXRlRXhwaXJlZFRhc2tBZnRlcj5QVDBTPC9EZWxldGVFeHBpcmVkVGFza0FmdGVyPjxSZXN0YXJ0T25GYWlsdXJlPjxJbnRlcnZhbD5QVDE1TTwvSW50ZXJ2YWw+PENvdW50PjM8L0NvdW50PjwvUmVzdGFydE9uRmFpbHVyZT48L1NldHRpbmdzPjxBY3Rpb25zIENvbnRleHQ9IkF1dGhvciI+PEV4ZWM+PENvbW1hbmQ+JyskQ29tbWFuZCsnPC9Db21tYW5kPjxBcmd1bWVudHM+JyskQ29tbWFuZEFyZ3VtZW50cysnPC9Bcmd1bWVudHM+PC9FeGVjPjwvQWN0aW9ucz48VHJpZ2dlcnM+PFRpbWVUcmlnZ2VyPjxTdGFydEJvdW5kYXJ5PiVMb2NhbFRpbWVYbWxFeCU8L1N0YXJ0Qm91bmRhcnk+PEVuZEJvdW5kYXJ5PiVMb2NhbFRpbWVYbWxFeCU8L0VuZEJvdW5kYXJ5PjxFbmFibGVkPnRydWU8L0VuYWJsZWQ+PC9UaW1lVHJpZ2dlcj48L1RyaWdnZXJzPjwvVGFzaz48L1Byb3BlcnRpZXM+PC9JbW1lZGlhdGVUYXNrVjI+PC9TY2hlZHVsZWRUYXNrcz4nCgogICAgaWYgKCEkUFNCb3VuZFBhcmFtZXRlcnNbJ0dQT25hbWUnXSAtYW5kICEkUFNCb3VuZFBhcmFtZXRlcnNbJ0dQT0Rpc3BsYXlOYW1lJ10pIHsKICAgICAgICBXcml0ZS1XYXJuaW5nICdFaXRoZXIgLUdQT05hbWUgb3IgLUdQT0Rpc3BsYXlOYW1lIG11c3QgYmUgc3BlY2lmaWVkJwogICAgICAgIHJldHVybgogICAgfQoKICAgICMgZXVubWVyYXRlIHRoZSBzcGVjaWZpZWQgR1BPKHMpCiAgICAkR1BPcyA9IEdldC1OZXRHUE8gLUdQT25hbWUgJEdQT25hbWUgLURpc3BsYXlOYW1lICRHUE9EaXNwbGF5TmFtZSAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUFEU3BhdGggJEFEU3BhdGggLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgCiAgICAKICAgIGlmKCEkR1BPcykgewogICAgICAgIFdyaXRlLVdhcm5pbmcgJ05vIEdQTyBmb3VuZC4nCiAgICAgICAgcmV0dXJuCiAgICB9CgogICAgJEdQT3MgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgJFByb2Nlc3NlZEdQT05hbWUgPSAkXy5OYW1lCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiVHJ5aW5nIHRvIHdlYXBvbml6ZSBHUE86ICRQcm9jZXNzZWRHUE9OYW1lIgoKICAgICAgICAgICAgIyBtYXAgYSBuZXR3b3JrIGRyaXZlIGFzIE5ldy1QU0RyaXZlL05ldy1JdGVtL2V0Yy4gZG9uJ3QgYWNjZXB0IC1DcmVkZW50aWFsIHByb3Blcmx5IDooCiAgICAgICAgICAgIGlmKCRDcmVkZW50aWFsKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJNYXBwaW5nICckKCRfLmdwY2ZpbGVzeXNwYXRoKScgdG8gbmV0d29yayBkcml2ZSBOOlwiCiAgICAgICAgICAgICAgICAkUGF0aCA9ICRfLmdwY2ZpbGVzeXNwYXRoLlRyaW1FbmQoJ1wnKQogICAgICAgICAgICAgICAgJE5ldCA9IE5ldy1PYmplY3QgLUNvbU9iamVjdCBXU2NyaXB0Lk5ldHdvcmsKICAgICAgICAgICAgICAgICROZXQuTWFwTmV0d29ya0RyaXZlKCJOOiIsICRQYXRoLCAkRmFsc2UsICRDcmVkZW50aWFsLlVzZXJOYW1lLCAkQ3JlZGVudGlhbC5HZXROZXR3b3JrQ3JlZGVudGlhbCgpLlBhc3N3b3JkKQogICAgICAgICAgICAgICAgJFRhc2tQYXRoID0gIk46XE1hY2hpbmVcUHJlZmVyZW5jZXNcU2NoZWR1bGVkVGFza3NcIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJFRhc2tQYXRoID0gJF8uZ3BjZmlsZXN5c3BhdGggKyAiXE1hY2hpbmVcUHJlZmVyZW5jZXNcU2NoZWR1bGVkVGFza3NcIgogICAgICAgICAgICB9CgogICAgICAgICAgICBpZigkUmVtb3ZlKSB7CiAgICAgICAgICAgICAgICBpZighKFRlc3QtUGF0aCAiJFRhc2tQYXRoXFNjaGVkdWxlZFRhc2tzLnhtbCIpKSB7CiAgICAgICAgICAgICAgICAgICAgVGhyb3cgIlNjaGVkdWxlZCB0YXNrIGRvZXNuJ3QgZXhpc3QgYXQgJFRhc2tQYXRoXFNjaGVkdWxlZFRhc2tzLnhtbCIKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoISRGb3JjZSAtYW5kICEkcHNDbWRsZXQuU2hvdWxkQ29udGludWUoJ0RvIHlvdSB3YW50IHRvIGNvbnRpbnVlPycsIlJlbW92aW5nIHNjaHRhc2sgYXQgJFRhc2tQYXRoXFNjaGVkdWxlZFRhc2tzLnhtbCIpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgUmVtb3ZlLUl0ZW0gLVBhdGggIiRUYXNrUGF0aFxTY2hlZHVsZWRUYXNrcy54bWwiIC1Gb3JjZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgaWYgKCEkRm9yY2UgLWFuZCAhJHBzQ21kbGV0LlNob3VsZENvbnRpbnVlKCdEbyB5b3Ugd2FudCB0byBjb250aW51ZT8nLCJDcmVhdGluZyBzY2h0YXNrIGF0ICRUYXNrUGF0aFxTY2hlZHVsZWRUYXNrcy54bWwiKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIGNyZWF0ZSB0aGUgZm9sZGVyIGlmIGl0IGRvZXNuJ3QgZXhpc3QKICAgICAgICAgICAgICAgICROdWxsID0gTmV3LUl0ZW0gLUl0ZW1UeXBlIERpcmVjdG9yeSAtRm9yY2UgLVBhdGggJFRhc2tQYXRoCgogICAgICAgICAgICAgICAgaWYoVGVzdC1QYXRoICIkVGFza1BhdGhcU2NoZWR1bGVkVGFza3MueG1sIikgewogICAgICAgICAgICAgICAgICAgIFRocm93ICJTY2hlZHVsZWQgdGFzayBhbHJlYWR5IGV4aXN0cyBhdCAkVGFza1BhdGhcU2NoZWR1bGVkVGFza3MueG1sICEiCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJFRhc2tYTUwgfCBTZXQtQ29udGVudCAtRW5jb2RpbmcgQVNDSUkgLVBhdGggIiRUYXNrUGF0aFxTY2hlZHVsZWRUYXNrcy54bWwiCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKCRDcmVkZW50aWFsKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJSZW1vdmluZyBtb3VudGVkIGRyaXZlIGF0IE46XCIKICAgICAgICAgICAgICAgICROZXQgPSBOZXctT2JqZWN0IC1Db21PYmplY3QgV1NjcmlwdC5OZXR3b3JrCiAgICAgICAgICAgICAgICAkTmV0LlJlbW92ZU5ldHdvcmtEcml2ZSgiTjoiKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiRXJyb3IgZm9yIEdQTyAkUHJvY2Vzc2VkR1BPTmFtZSA6ICRfIgogICAgICAgICAgICBpZigkQ3JlZGVudGlhbCkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiUmVtb3ZpbmcgbW91bnRlZCBkcml2ZSBhdCBOOlwiCiAgICAgICAgICAgICAgICAkTmV0ID0gTmV3LU9iamVjdCAtQ29tT2JqZWN0IFdTY3JpcHQuTmV0d29yawogICAgICAgICAgICAgICAgJE5ldC5SZW1vdmVOZXR3b3JrRHJpdmUoIk46IikKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1OZXRHUE9Hcm91cCB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgUmV0dXJucyBhbGwgR1BPcyBpbiBhIGRvbWFpbiB0aGF0IHNldCAiUmVzdHJpY3RlZCBHcm91cHMiCiAgICAgICAgb3IgdXNlIGdyb3Vwcy54bWwgb24gb24gdGFyZ2V0IG1hY2hpbmVzLgoKICAgIC5QQVJBTUVURVIgR1BPbmFtZQoKICAgICAgICBUaGUgR1BPIG5hbWUgdG8gcXVlcnkgZm9yLCB3aWxkY2FyZHMgYWNjZXB0ZWQuICAgCgogICAgLlBBUkFNRVRFUiBEaXNwbGF5TmFtZQoKICAgICAgICBUaGUgR1BPIGRpc3BsYXkgbmFtZSB0byBxdWVyeSBmb3IsIHdpbGRjYXJkcyBhY2NlcHRlZC4gICAKCiAgICAuUEFSQU1FVEVSIFJlc29sdmVTaWRzCgogICAgICAgIFN3aXRjaC4gUmVzb2x2ZSBTaWRzIGZyb20gYSBEQyBwb2xpY3kgdG8gb2JqZWN0IG5hbWVzLgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gcXVlcnkgZm9yIEdQT3MsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIEFEU3BhdGgKCiAgICAgICAgVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoCiAgICAgICAgZS5nLiAiTERBUDovL2NuPXs4RkY1OUQyOC0xNUQ3LTQyMkEtQkNCNy0yQUU0NTcyNDEyNUF9LGNuPXBvbGljaWVzLGNuPXN5c3RlbSxEQz1kZXYsREM9dGVzdGxhYixEQz1sb2NhbCIKCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIFVzZVBTRHJpdmUKCiAgICAgICAgU3dpdGNoLiBNb3VudCBhbnkgZm91bmQgcG9saWN5IGZpbGVzIHdpdGggdGVtcG9yYXJ5IFBTRHJpdmVzLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldEdQT0dyb3VwCgogICAgICAgIEdldCBhbGwgR1BPcyB0aGF0IHNldCBsb2NhbCBncm91cHMgb24gdGhlIGN1cnJlbnQgZG9tYWluLgojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkR1BPbmFtZSA9ICcqJywKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRGlzcGxheU5hbWUsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFJlc29sdmVTaWRzLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFVzZVBTRHJpdmUsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMAogICAgKQoKICAgICMgZ2V0IGV2ZXJ5IEdQTyBmcm9tIHRoZSBzcGVjaWZpZWQgZG9tYWluIHdpdGggcmVzdHJpY3RlZCBncm91cHMgc2V0CiAgICBHZXQtTmV0R1BPIC1HUE9OYW1lICRHUE9uYW1lIC1EaXNwbGF5TmFtZSAkR1BPbmFtZSAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUFEU3BhdGggJEFEU3BhdGggLVBhZ2VTaXplICRQYWdlU2l6ZSB8IEZvckVhY2gtT2JqZWN0IHsKCiAgICAgICAgJE1lbWJlcm9mID0gJE51bGwKICAgICAgICAkTWVtYmVycyA9ICROdWxsCiAgICAgICAgJEdQT2Rpc3BsYXlOYW1lID0gJF8uZGlzcGxheW5hbWUKICAgICAgICAkR1BPbmFtZSA9ICRfLm5hbWUKICAgICAgICAkR1BPUGF0aCA9ICRfLmdwY2ZpbGVzeXNwYXRoCgogICAgICAgICRQYXJzZUFyZ3MgPSAgQHsKICAgICAgICAgICAgJ0dwdFRtcGxQYXRoJyA9ICIkR1BPUGF0aFxNQUNISU5FXE1pY3Jvc29mdFxXaW5kb3dzIE5UXFNlY0VkaXRcR3B0VG1wbC5pbmYiCiAgICAgICAgICAgICdVc2VQU0RyaXZlJyA9ICRVc2VQU0RyaXZlCiAgICAgICAgfQoKICAgICAgICAjIHBhcnNlIHRoZSBHcHRUbXBsLmluZiAnUmVzdHJpY3RlZCBHcm91cHMnIGZpbGUgaWYgaXQgZXhpc3RzCiAgICAgICAgJEluZiA9IEdldC1HcHRUbXBsIEBQYXJzZUFyZ3MKCiAgICAgICAgaWYoJEluZi5Hcm91cE1lbWJlcnNoaXApIHsKCiAgICAgICAgICAgICRNZW1iZXJvZiA9ICRJbmYuR3JvdXBNZW1iZXJzaGlwIHwgR2V0LU1lbWJlciAqTWVtYmVyb2YgfCBGb3JFYWNoLU9iamVjdCB7ICRJbmYuR3JvdXBNZW1iZXJzaGlwLigkXy5uYW1lKSB9IHwgRm9yRWFjaC1PYmplY3QgeyAkXy50cmltKCcqJykgfQogICAgICAgICAgICAkTWVtYmVycyA9ICRJbmYuR3JvdXBNZW1iZXJzaGlwIHwgR2V0LU1lbWJlciAqTWVtYmVycyB8IEZvckVhY2gtT2JqZWN0IHsgJEluZi5Hcm91cE1lbWJlcnNoaXAuKCRfLm5hbWUpIH0gfCBGb3JFYWNoLU9iamVjdCB7ICRfLnRyaW0oJyonKSB9CgogICAgICAgICAgICBpZighJE1lbWJlcnMpIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgJE1lbWJlcnNSYXcgPSAkSW5mLkdyb3VwTWVtYmVyc2hpcCB8IEdldC1NZW1iZXIgKk1lbWJlcnMgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBOYW1lCiAgICAgICAgICAgICAgICAgICAgJE1lbWJlcnMgPSAoJE1lbWJlcnNSYXcgLXNwbGl0ICJfXyIpWzBdLnRyaW0oIioiKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICRNZW1iZXJzUmF3ID0gJycKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYoISRNZW1iZXJvZikgewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAkTWVtYmVyb2ZSYXcgPSAkSW5mLkdyb3VwTWVtYmVyc2hpcCB8IEdldC1NZW1iZXIgKk1lbWJlcm9mIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgTmFtZQogICAgICAgICAgICAgICAgICAgICRNZW1iZXJvZiA9ICgkTWVtYmVyb2ZSYXcgLXNwbGl0ICJfXyIpWzBdLnRyaW0oIioiKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICRNZW1iZXJvZiA9ICcnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKCRSZXNvbHZlU2lkcykgewogICAgICAgICAgICAgICAgJE1lbWJlcm9mID0gJE1lbWJlcm9mIHwgRm9yRWFjaC1PYmplY3QgeyBDb252ZXJ0LVNpZFRvTmFtZSAkXyB9CiAgICAgICAgICAgICAgICAkTWVtYmVycyA9ICRNZW1iZXJzIHwgRm9yRWFjaC1PYmplY3QgeyBDb252ZXJ0LVNpZFRvTmFtZSAkXyB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKCRNZW1iZXJvZiAtaXNub3QgW1N5c3RlbS5BcnJheV0pIHskTWVtYmVyb2YgPSBAKCRNZW1iZXJvZil9CiAgICAgICAgICAgIGlmKCRNZW1iZXJzIC1pc25vdCBbU3lzdGVtLkFycmF5XSkgeyRNZW1iZXJzID0gQCgkTWVtYmVycyl9CgogICAgICAgICAgICAkR1BPUHJvcGVydGllcyA9IEB7CiAgICAgICAgICAgICAgICAnR1BPRGlzcGxheU5hbWUnID0gJEdQT0Rpc3BsYXlOYW1lCiAgICAgICAgICAgICAgICAnR1BPTmFtZScgPSAkR1BPTmFtZQogICAgICAgICAgICAgICAgJ0dQT1BhdGgnID0gJEdQT1BhdGgKICAgICAgICAgICAgICAgICdGaWx0ZXJzJyA9ICROdWxsCiAgICAgICAgICAgICAgICAnTWVtYmVyT2YnID0gJE1lbWJlcm9mCiAgICAgICAgICAgICAgICAnTWVtYmVycycgPSAkTWVtYmVycwogICAgICAgICAgICB9CgogICAgICAgICAgICBOZXctT2JqZWN0IC1UeXBlTmFtZSBQU09iamVjdCAtUHJvcGVydHkgJEdQT1Byb3BlcnRpZXMKICAgICAgICB9CgogICAgICAgICRQYXJzZUFyZ3MgPSAgQHsKICAgICAgICAgICAgJ0dyb3Vwc1hNTHBhdGgnID0gIiRHUE9QYXRoXE1BQ0hJTkVcUHJlZmVyZW5jZXNcR3JvdXBzXEdyb3Vwcy54bWwiCiAgICAgICAgICAgICdSZXNvbHZlU2lkcycgPSAkUmVzb2x2ZVNpZHMKICAgICAgICAgICAgJ1VzZVBTRHJpdmUnID0gJFVzZVBTRHJpdmUKICAgICAgICB9CgogICAgICAgIEdldC1Hcm91cHNYTUwgQFBhcnNlQXJncwogICAgfQp9CgoKZnVuY3Rpb24gRmluZC1HUE9Mb2NhdGlvbiB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgVGFrZXMgYSB1c2VyL2dyb3VwIG5hbWUgYW5kIG9wdGlvbmFsIGRvbWFpbiwgYW5kIGRldGVybWluZXMgCiAgICAgICAgdGhlIGNvbXB1dGVycyBpbiB0aGUgZG9tYWluIHRoZSB1c2VyL2dyb3VwIGhhcyBsb2NhbCBhZG1pbiAKICAgICAgICAob3IgUkRQKSByaWdodHMgdG8uCgogICAgICAgIEl0IGRvZXMgdGhpcyBieToKICAgICAgICAgICAgMS4gIHJlc29sdmluZyB0aGUgdXNlci9ncm91cCB0byBpdHMgcHJvcGVyIHNpZAogICAgICAgICAgICAyLiAgZW51bWVyYXRpbmcgYWxsIGdyb3VwcyB0aGUgdXNlci9ncm91cCBpcyBhIGN1cnJlbnQgcGFydCBvZiAKICAgICAgICAgICAgICAgIGFuZCBleHRyYWN0aW5nIGFsbCB0YXJnZXQgU0lEcyB0byBidWlsZCBhIHRhcmdldCBTSUQgbGlzdAogICAgICAgICAgICAzLiAgcHVsbGluZyBhbGwgR1BPcyB0aGF0IHNldCAnUmVzdHJpY3RlZCBHcm91cHMnIGJ5IGNhbGxpbmcKICAgICAgICAgICAgICAgIEdldC1OZXRHUE9Hcm91cAogICAgICAgICAgICA0LiAgbWF0Y2hpbmcgdGhlIHRhcmdldCBzaWQgbGlzdCB0byB0aGUgcXVlcmllZCBHUE8gU0lEIGxpc3QKICAgICAgICAgICAgICAgIHRvIGVudW1lcmF0ZSBhbGwgR1BPIHRoZSB1c2VyIGlzIGVmZmVjdGl2ZWx5IGFwcGxpZWQgd2l0aAogICAgICAgICAgICA1LiAgZW51bWVyYXRpbmcgYWxsIE9VcyBhbmQgc2l0ZXMgYW5kIGFwcGxpY2FibGUgR1BPIEdVSXMgYXJlCiAgICAgICAgICAgICAgICBhcHBsaWVkIHRvIHRocm91Z2ggZ3BsaW5rIGVudW1lcmF0aW5nCiAgICAgICAgICAgIDYuICBxdWVyeWluZyBmb3IgYWxsIGNvbXB1dGVycyB1bmRlciB0aGUgZ2l2ZW4gT1VzIG9yIHNpdGVzCgogICAgLlBBUkFNRVRFUiBVc2VyTmFtZQoKICAgICAgICBBIChzaW5nbGUpIHVzZXIgbmFtZSBuYW1lIHRvIHF1ZXJ5IGZvciBhY2Nlc3MuCgogICAgLlBBUkFNRVRFUiBHcm91cE5hbWUKCiAgICAgICAgQSAoc2luZ2xlKSBncm91cCBuYW1lIG5hbWUgdG8gcXVlcnkgZm9yIGFjY2Vzcy4gCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgT3B0aW9uYWwgZG9tYWluIHRoZSB1c2VyIGV4aXN0cyBpbiBmb3IgcXVlcnlpbmcsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIExvY2FsR3JvdXAKCiAgICAgICAgVGhlIGxvY2FsIGdyb3VwIHRvIGNoZWNrIGFjY2VzcyBhZ2FpbnN0LgogICAgICAgIENhbiBiZSAiQWRtaW5pc3RyYXRvcnMiIChTLTEtNS0zMi01NDQpLCAiUkRQL1JlbW90ZSBEZXNrdG9wIFVzZXJzIiAoUy0xLTUtMzItNTU1KSwKICAgICAgICBvciBhIGN1c3RvbSBsb2NhbCBTSUQuIERlZmF1bHRzIHRvIGxvY2FsICdBZG1pbmlzdHJhdG9ycycuCgogICAgLlBBUkFNRVRFUiBVc2VQU0RyaXZlCgogICAgICAgIFN3aXRjaC4gTW91bnQgYW55IGZvdW5kIHBvbGljeSBmaWxlcyB3aXRoIHRlbXBvcmFyeSBQU0RyaXZlcy4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEZpbmQtR1BPTG9jYXRpb24gLVVzZXJOYW1lIGRmbQogICAgICAgIAogICAgICAgIEZpbmQgYWxsIGNvbXB1dGVycyB0aGF0IGRmbSB1c2VyIGhhcyBsb2NhbCBhZG1pbmlzdHJhdG9yIHJpZ2h0cyB0byBpbiAKICAgICAgICB0aGUgY3VycmVudCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBGaW5kLUdQT0xvY2F0aW9uIC1Vc2VyTmFtZSBkZm0gLURvbWFpbiBkZXYudGVzdGxhYi5sb2NhbAogICAgICAgIAogICAgICAgIEZpbmQgYWxsIGNvbXB1dGVycyB0aGF0IGRmbSB1c2VyIGhhcyBsb2NhbCBhZG1pbmlzdHJhdG9yIHJpZ2h0cyB0byBpbiAKICAgICAgICB0aGUgZGV2LnRlc3RsYWIubG9jYWwgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gRmluZC1HUE9Mb2NhdGlvbiAtVXNlck5hbWUgamFzb24gLUxvY2FsR3JvdXAgUkRQCiAgICAgICAgCiAgICAgICAgRmluZCBhbGwgY29tcHV0ZXJzIHRoYXQgamFzb24gaGFzIGxvY2FsIFJEUCBhY2Nlc3MgcmlnaHRzIHRvIGluIHRoZSBkb21haW4uCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyTmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkR3JvdXBOYW1lLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJExvY2FsR3JvdXAgPSAnQWRtaW5pc3RyYXRvcnMnLAogICAgICAgIAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFVzZVBTRHJpdmUsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMAogICAgKQoKICAgIGlmKCRVc2VyTmFtZSkgewoKICAgICAgICAkVXNlciA9IEdldC1OZXRVc2VyIC1Vc2VyTmFtZSAkVXNlck5hbWUgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgICAgICAkVXNlclNpZCA9ICRVc2VyLm9iamVjdHNpZAoKICAgICAgICBpZighJFVzZXJTaWQpIHsgICAgCiAgICAgICAgICAgIFRocm93ICJVc2VyICckVXNlck5hbWUnIG5vdCBmb3VuZCEiCiAgICAgICAgfQoKICAgICAgICAkVGFyZ2V0U2lkID0gJFVzZXJTaWQKICAgICAgICAkT2JqZWN0U2FtQWNjb3VudE5hbWUgPSAkVXNlci5zYW1hY2NvdW50bmFtZQogICAgICAgICRUYXJnZXRPYmplY3RzID0gJFVzZXJTaWQKICAgIH0KICAgIGVsc2VpZigkR3JvdXBOYW1lKSB7CgogICAgICAgICRHcm91cCA9IEdldC1OZXRHcm91cCAtR3JvdXBOYW1lICRHcm91cE5hbWUgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1GdWxsRGF0YSAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICAgICAgJEdyb3VwU2lkID0gJEdyb3VwLm9iamVjdHNpZAoKICAgICAgICBpZighJEdyb3VwU2lkKSB7ICAgIAogICAgICAgICAgICBUaHJvdyAiR3JvdXAgJyRHcm91cE5hbWUnIG5vdCBmb3VuZCEiCiAgICAgICAgfQoKICAgICAgICAkVGFyZ2V0U2lkID0gJEdyb3VwU2lkCiAgICAgICAgJE9iamVjdFNhbUFjY291bnROYW1lID0gJEdyb3VwLnNhbWFjY291bnRuYW1lCiAgICAgICAgJFRhcmdldE9iamVjdHMgPSAkR3JvdXBTaWQKICAgIH0KICAgIGVsc2UgewogICAgICAgICRUYXJnZXRTaWQgPSAnKicKICAgIH0KCiAgICBpZigkTG9jYWxHcm91cCAtbGlrZSAiKkFkbWluKiIpIHsKICAgICAgICAkTG9jYWxTSUQgPSAnUy0xLTUtMzItNTQ0JwogICAgfQogICAgZWxzZWlmICggKCRMb2NhbEdyb3VwIC1saWtlICIqUkRQKiIpIC1vciAoJExvY2FsR3JvdXAgLWxpa2UgIipSZW1vdGUqIikgKSB7CiAgICAgICAgJExvY2FsU0lEID0gJ1MtMS01LTMyLTU1NScKICAgIH0KICAgIGVsc2VpZiAoJExvY2FsR3JvdXAgLWxpa2UgIlMtMS01LSoiKSB7CiAgICAgICAgJExvY2FsU0lEID0gJExvY2FsR3JvdXAKICAgIH0KICAgIGVsc2UgewogICAgICAgIHRocm93ICJMb2NhbEdyb3VwIG11c3QgYmUgJ0FkbWluaXN0cmF0b3JzJywgJ1JEUCcsIG9yIGEgJ1MtMS01LVgnIHR5cGUgc2lkLiIKICAgIH0KCiAgICBXcml0ZS1WZXJib3NlICJMb2NhbFNpZDogJExvY2FsU0lEIgogICAgV3JpdGUtVmVyYm9zZSAiVGFyZ2V0U2lkOiAkVGFyZ2V0U2lkIgoKICAgIGlmKCRUYXJnZXRTaWQgLW5lICcqJykgewogICAgICAgIGlmKCRUYXJnZXRTaWQgLWlzbm90IFtTeXN0ZW0uQXJyYXldKSB7ICRUYXJnZXRTaWQgPSBAKCRUYXJnZXRTaWQpIH0KCiAgICAgICAgIyB1c2UgdGhlIHRva2VuR3JvdXBzIGFwcHJvYWNoIGZyb20gR2V0LU5ldEdyb3VwIHRvIGdldCBhbGwgZWZmZWN0aXZlCiAgICAgICAgIyAgIHNlY3VyaXR5IFNJRHMgdGhpcyBvYmplY3QgaXMgYSBwYXJ0IG9mCiAgICAgICAgJFRhcmdldFNpZCArPSBHZXQtTmV0R3JvdXAgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1QYWdlU2l6ZSAkUGFnZVNpemUgLVVzZXJOYW1lICRPYmplY3RTYW1BY2NvdW50TmFtZSAtUmF3U2lkcwoKICAgICAgICBpZigkVGFyZ2V0U2lkIC1pc25vdCBbU3lzdGVtLkFycmF5XSkgeyBbU3lzdGVtLkFycmF5XSRUYXJnZXRTaWQgPSBbU3lzdGVtLkFycmF5XUAoJFRhcmdldFNpZCkgfQogICAgfQoKICAgIFdyaXRlLVZlcmJvc2UgIkVmZmVjdGl2ZSB0YXJnZXQgc2lkczogJFRhcmdldFNpZCIKCiAgICAkR1BPR3JvdXBBcmdzID0gIEB7CiAgICAgICAgJ0RvbWFpbicgPSAkRG9tYWluCiAgICAgICAgJ0RvbWFpbkNvbnRyb2xsZXInID0gJERvbWFpbkNvbnRyb2xsZXIKICAgICAgICAnVXNlUFNEcml2ZScgPSAkVXNlUFNEcml2ZQogICAgICAgICdQYWdlU2l6ZScgPSAkUGFnZVNpemUKICAgIH0KCiAgICAjIGdldCBhbGwgR1BPIGdyb3VwcywgYW5kIGZpbHRlciBvbiBvbmVzIHRoYXQgbWF0Y2ggb3VyIHRhcmdldCBTSUQgbGlzdAogICAgIyAgIGFuZCBtYXRjaCB0aGUgdGFyZ2V0IGxvY2FsIHNpZCBtZW1iZXJvZiBsaXN0CiAgICAkR1BPZ3JvdXBzID0gR2V0LU5ldEdQT0dyb3VwIEBHUE9Hcm91cEFyZ3MgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgaWYgKCRfLm1lbWJlcnMpIHsKICAgICAgICAgICAgJF8ubWVtYmVycyA9ICRfLm1lbWJlcnMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgIGlmKCRfIC1tYXRjaCAnXlMtMS0uKicpIHsKICAgICAgICAgICAgICAgICAgICAkXwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgIyBpZiB0aGVyZSBhcmUgYW55IHBsYWluIGdyb3VwIG5hbWVzLCB0cnkgdG8gcmVzb2x2ZSB0aGVtIHRvIHNpZHMKICAgICAgICAgICAgICAgICAgICAoQ29udmVydC1OYW1lVG9TaWQgLU9iamVjdE5hbWUgJF8gLURvbWFpbiAkRG9tYWluKS5TSUQKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSB8IFNvcnQtT2JqZWN0IC1VbmlxdWUKCiAgICAgICAgICAgICMgc3RvcCBQb3dlclNoZWxsIDIuMCdzIHN0cmluZyBzdHVwaWQgdW5ib3hpbmcKICAgICAgICAgICAgaWYoJF8ubWVtYmVycyAtaXNub3QgW1N5c3RlbS5BcnJheV0pIHsgJF8ubWVtYmVycyA9IEAoJF8ubWVtYmVycykgfQogICAgICAgICAgICBpZigkXy5tZW1iZXJvZiAtaXNub3QgW1N5c3RlbS5BcnJheV0pIHsgJF8ubWVtYmVyb2YgPSBAKCRfLm1lbWJlcm9mKSB9CgogICAgICAgICAgICAjIGNoZWNrIGlmIHRoZSBtZW1iZXJvZiBjb250YWlucyB0aGUgc2lkIG9mIHRoZSBsb2NhbCBhY2NvdW50IHdlJ3JlIHNlYXJjaGluZyBmb3IKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAibWVtYmVyb2Y6ICQoJF8ubWVtYmVyb2YpIgogICAgICAgICAgICBpZiAoJF8ubWVtYmVyb2YgLWNvbnRhaW5zICRMb2NhbFNpZCkgewogICAgICAgICAgICAgICAgIyBjaGVjayBpZiB0aGVyZSdzIGFuIG92ZXJsYXAgYmV0d2VlbiB0aGUgbWVtYmVycyBmaWVsZCBhbmQgdGhlIHNldCBvZiB0YXJnZXQgc2lkcwogICAgICAgICAgICAgICAgIyAgIGlmICRUYXJnZXRTaWQgPSAqLCB0aGVuIHJldHVybiBhbGwgcmVzdWx0cwogICAgICAgICAgICAgICAgaWYgKCAoJFRhcmdldFNpZCAtZXEgJyonKSAtb3IgKCRfLm1lbWJlcnMgfCBXaGVyZS1PYmplY3QgeyRffSB8IFdoZXJlLU9iamVjdCB7ICRUYXJnZXRTaWQgLUNvbnRhaW5zICRfIH0pKSB7CiAgICAgICAgICAgICAgICAgICAgJF8KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAkUHJvY2Vzc2VkR1VJRHMgPSBAe30KCiAgICAjIHByb2Nlc3MgdGhlIG1hdGNoZXMgYW5kIGJ1aWxkIHRoZSByZXN1bHQgb2JqZWN0cwogICAgJEdQT2dyb3VwcyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICAkR1BPZ3VpZCA9ICRfLkdQT05hbWUKICAgICAgICAkR1BPTWVtYmVycyA9ICRfLk1lbWJlcnMKCiAgICAgICAgaWYoISRUYXJnZXRPYmplY3RzKSB7CiAgICAgICAgICAgICMgaWYgdGhlICogd2lsZGNhcmQgd2FzIHVzZWQsIHNldCB0aGUgT2JqZWN0RGlzdE5hbWUgYXMgdGhlIEdQTyBtZW1iZXIgc2lkIHNldAogICAgICAgICAgICAkVGFyZ2V0T2JqZWN0cyA9ICRHUE9NZW1iZXJzCiAgICAgICAgfQoKICAgICAgICBpZiggLW5vdCAkUHJvY2Vzc2VkR1VJRHNbJEdQT2d1aWRdICkgewogICAgICAgICAgICAkR1BPbmFtZSA9ICRfLkdQT0Rpc3BsYXlOYW1lCiAgICAgICAgICAgICRGaWx0ZXJzID0gJF8uRmlsdGVycwoKICAgICAgICAgICAgIyBmaW5kIGFueSBPVXMgdGhhdCBoYXZlIHRoaXMgR1VJRCBhcHBsaWVkIGFuZCB0aGVuIHJldHJpZXZlIGFueSBjb21wdXRlcnMgZnJvbSB0aGUgT1UKICAgICAgICAgICAgR2V0LU5ldE9VIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtR1VJRCAkR1BPZ3VpZCAtRnVsbERhdGEgLVBhZ2VTaXplICRQYWdlU2l6ZSB8IEZvckVhY2gtT2JqZWN0IHsKCiAgICAgICAgICAgICAgICBpZigkRmlsdGVycykgewogICAgICAgICAgICAgICAgICAgICMgZmlsdGVyIGZvciBjb21wdXRlciBuYW1lL29yZyB1bml0IGlmIGEgZmlsdGVyIGlzIHNwZWNpZmllZAogICAgICAgICAgICAgICAgICAgICMgICBUT0RPOiBoYW5kbGUgb3RoZXIgZmlsdGVycz8KICAgICAgICAgICAgICAgICAgICAkT1VDb21wdXRlcnMgPSBHZXQtTmV0Q29tcHV0ZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1BRFNwYXRoICRfLkFEU3BhdGggLUZ1bGxEYXRhIC1QYWdlU2l6ZSAkUGFnZVNpemUgfCBXaGVyZS1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAkXy5hZHNwYXRoIC1tYXRjaCAoJEZpbHRlcnMuVmFsdWUpCiAgICAgICAgICAgICAgICAgICAgfSB8IEZvckVhY2gtT2JqZWN0IHsgJF8uZG5zaG9zdG5hbWUgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJE9VQ29tcHV0ZXJzID0gR2V0LU5ldENvbXB1dGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQURTcGF0aCAkXy5BRFNwYXRoIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBGb3JFYWNoICgkVGFyZ2V0U2lkIGluICRUYXJnZXRPYmplY3RzKSB7CgogICAgICAgICAgICAgICAgICAgICRPYmplY3QgPSBHZXQtQURPYmplY3QgLVNJRCAkVGFyZ2V0U2lkIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAkXyAtUGFnZVNpemUgJFBhZ2VTaXplCgogICAgICAgICAgICAgICAgICAgICRJc0dyb3VwID0gQCgnMjY4NDM1NDU2JywnMjY4NDM1NDU3JywnNTM2ODcwOTEyJywnNTM2ODcwOTEzJykgLWNvbnRhaW5zICRPYmplY3Quc2FtYWNjb3VudHR5cGUKCiAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2F0aW9uID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdPYmplY3ROYW1lJyAkT2JqZWN0LnNhbWFjY291bnRuYW1lCiAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2F0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ09iamVjdEROJyAkT2JqZWN0LmRpc3Rpbmd1aXNoZWRuYW1lCiAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2F0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ09iamVjdFNJRCcgJE9iamVjdC5vYmplY3RzaWQKICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYXRpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNHcm91cCcgJElzR3JvdXAKICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYXRpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPbmFtZScgJEdQT25hbWUKICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYXRpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPZ3VpZCcgJEdQT2d1aWQKICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYXRpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29udGFpbmVyTmFtZScgJF8uZGlzdGluZ3Vpc2hlZG5hbWUKICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYXRpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJzJyAkT1VDb21wdXRlcnMKICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYXRpb24KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBmaW5kIGFueSBzaXRlcyB0aGF0IGhhdmUgdGhpcyBHVUlEIGFwcGxpZWQKICAgICAgICAgICAgR2V0LU5ldFNpdGUgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1HVUlEICRHUE9ndWlkIC1QYWdlU2l6ZSAkUGFnZVNpemUgLUZ1bGxEYXRhIHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICAgICAgICAgIEZvckVhY2ggKCRUYXJnZXRTaWQgaW4gJFRhcmdldE9iamVjdHMpIHsKICAgICAgICAgICAgICAgICAgICAkT2JqZWN0ID0gR2V0LUFET2JqZWN0IC1TSUQgJFRhcmdldFNpZCAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgJF8gLVBhZ2VTaXplICRQYWdlU2l6ZQoKICAgICAgICAgICAgICAgICAgICAkSXNHcm91cCA9IEAoJzI2ODQzNTQ1NicsJzI2ODQzNTQ1NycsJzUzNjg3MDkxMicsJzUzNjg3MDkxMycpIC1jb250YWlucyAkT2JqZWN0LnNhbWFjY291bnR0eXBlCgogICAgICAgICAgICAgICAgICAgICRBcHBsaWVkU2l0ZSA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAkQXBwbGllZFNpdGUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnT2JqZWN0TmFtZScgJE9iamVjdC5zYW1hY2NvdW50bmFtZQogICAgICAgICAgICAgICAgICAgICRBcHBsaWVkU2l0ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdPYmplY3RETicgJE9iamVjdC5kaXN0aW5ndWlzaGVkbmFtZQogICAgICAgICAgICAgICAgICAgICRBcHBsaWVkU2l0ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdPYmplY3RTSUQnICRPYmplY3Qub2JqZWN0c2lkCiAgICAgICAgICAgICAgICAgICAgJEFwcGxpZWRTaXRlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzR3JvdXAnICRJc0dyb3VwCiAgICAgICAgICAgICAgICAgICAgJEFwcGxpZWRTaXRlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT25hbWUnICRHUE9uYW1lCiAgICAgICAgICAgICAgICAgICAgJEFwcGxpZWRTaXRlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT2d1aWQnICRHUE9ndWlkCiAgICAgICAgICAgICAgICAgICAgJEFwcGxpZWRTaXRlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbnRhaW5lck5hbWUnICRfLmRpc3Rpbmd1aXNoZWRuYW1lCiAgICAgICAgICAgICAgICAgICAgJEFwcGxpZWRTaXRlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVycycgJF8uc2l0ZW9iamVjdGJsCiAgICAgICAgICAgICAgICAgICAgJEFwcGxpZWRTaXRlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgbWFyayBvZmYgdGhpcyBHUE8gR1VJRCBzbyB3ZSBkb24ndCBwcm9jZXNzIGl0IGFnYWluIGlmIHRoZXJlIGFyZSBkdXBlcwogICAgICAgICAgICAkUHJvY2Vzc2VkR1VJRHNbJEdQT2d1aWRdID0gJFRydWUKICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBGaW5kLUdQT0NvbXB1dGVyQWRtaW4gewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFRha2VzIGEgY29tcHV0ZXIgKG9yIEdQTykgb2JqZWN0IGFuZCBkZXRlcm1pbmVzIHdoYXQgdXNlcnMvZ3JvdXBzIGhhdmUgCiAgICAgICAgYWRtaW5pc3RyYXRpdmUgYWNjZXNzIG92ZXIgaXQuCgogICAgICAgIEludmVyc2Ugb2YgRmluZC1HUE9Mb2NhdGlvbi4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBUaGUgY29tcHV0ZXIgdG8gZGV0ZXJtaW5lIGxvY2FsIGFkbWluaXN0cmF0aXZlIGFjY2VzcyB0by4KCiAgICAuUEFSQU1FVEVSIE9VTmFtZQoKICAgICAgICBPVSBuYW1lIHRvIGRldGVybWluZSB3aG8gaGFzIGxvY2FsIGFkbWluaXNydGF0aXZlIGFjZXNzIHRvIGNvbXB1dGVycwogICAgICAgIHdpdGhpbiBpdC4gCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgT3B0aW9uYWwgZG9tYWluIHRoZSBjb21wdXRlci9PVSBleGlzdHMgaW4sIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIFJlY3Vyc2UKCiAgICAgICAgU3dpdGNoLiBJZiBhIHJldHVybmVkIG1lbWJlciBpcyBhIGdyb3VwLCByZWN1cnNlIGFuZCBnZXQgYWxsIG1lbWJlcnMuCgogICAgLlBBUkFNRVRFUiBMb2NhbEdyb3VwCgogICAgICAgIFRoZSBsb2NhbCBncm91cCB0byBjaGVjayBhY2Nlc3MgYWdhaW5zdC4KICAgICAgICBDYW4gYmUgIkFkbWluaXN0cmF0b3JzIiAoUy0xLTUtMzItNTQ0KSwgIlJEUC9SZW1vdGUgRGVza3RvcCBVc2VycyIgKFMtMS01LTMyLTU1NSksCiAgICAgICAgb3IgYSBjdXN0b20gbG9jYWwgU0lELgogICAgICAgIERlZmF1bHRzIHRvIGxvY2FsICdBZG1pbmlzdHJhdG9ycycuCgogICAgLlBBUkFNRVRFUiBVc2VQU0RyaXZlCgogICAgICAgIFN3aXRjaC4gTW91bnQgYW55IGZvdW5kIHBvbGljeSBmaWxlcyB3aXRoIHRlbXBvcmFyeSBQU0RyaXZlcy4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEZpbmQtR1BPQ29tcHV0ZXJBZG1pbiAtQ29tcHV0ZXJOYW1lIFdJTkRPV1MzLmRldi50ZXN0bGFiLmxvY2FsCiAgICAgICAgCiAgICAgICAgRmluZHMgdXNlcnMgd2hvIGhhdmUgbG9jYWwgYWRtaW4gcmlnaHRzIG92ZXIgV0lORE9XUzMgdGhyb3VnaCBHUE8gY29ycmVsYXRpb24uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBGaW5kLUdQT0NvbXB1dGVyQWRtaW4gLUNvbXB1dGVyTmFtZSBXSU5ET1dTMy5kZXYudGVzdGxhYi5sb2NhbCAtTG9jYWxHcm91cCBSRFAKICAgICAgICAKICAgICAgICBGaW5kcyB1c2VycyB3aG8gaGF2ZSBSRFAgcmlnaHRzIG92ZXIgV0lORE9XUzMgdGhyb3VnaCBHUE8gY29ycmVsYXRpb24uCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlck5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE9VTmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZWN1cnNlLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRMb2NhbEdyb3VwID0gJ0FkbWluaXN0cmF0b3JzJywKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVXNlUFNEcml2ZSwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwCiAgICApCgogICAgcHJvY2VzcyB7CiAgICAKICAgICAgICBpZighJENvbXB1dGVyTmFtZSAtYW5kICEkT1VOYW1lKSB7CiAgICAgICAgICAgIFRocm93ICItQ29tcHV0ZXJOYW1lIG9yIC1PVU5hbWUgbXVzdCBiZSBwcm92aWRlZCIKICAgICAgICB9CgogICAgICAgICRHUE9Hcm91cHMgPSBAKCkKCiAgICAgICAgaWYoJENvbXB1dGVyTmFtZSkgewogICAgICAgICAgICAkQ29tcHV0ZXJzID0gR2V0LU5ldENvbXB1dGVyIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUZ1bGxEYXRhIC1QYWdlU2l6ZSAkUGFnZVNpemUKCiAgICAgICAgICAgIGlmKCEkQ29tcHV0ZXJzKSB7CiAgICAgICAgICAgICAgICB0aHJvdyAiQ29tcHV0ZXIgJENvbXB1dGVyTmFtZSBpbiBkb21haW4gJyREb21haW4nIG5vdCBmb3VuZCEgVHJ5IGEgZnVsbHkgcXVhbGlmaWVkIGhvc3QgbmFtZSIKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgJFRhcmdldE9VcyA9IEAoKQogICAgICAgICAgICBGb3JFYWNoKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJzKSB7CiAgICAgICAgICAgICAgICAjIGV4dHJhY3QgYWxsIE9VcyBhIGNvbXB1dGVyIGlzIGEgcGFydCBvZgogICAgICAgICAgICAgICAgJEROID0gJENvbXB1dGVyLmRpc3Rpbmd1aXNoZWRuYW1lCgogICAgICAgICAgICAgICAgJFRhcmdldE9VcyArPSAkRE4uc3BsaXQoIiwiKSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICBpZigkXy5zdGFydHN3aXRoKCJPVT0iKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkRE4uc3Vic3RyaW5nKCRETi5pbmRleG9mKCRfKSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgZW51bWVyYXRlIGFueSBsaW5rZWQgR1BPcyBmb3IgdGhlIGNvbXB1dGVyJ3Mgc2l0ZQogICAgICAgICAgICAkQ29tcHV0ZXJTaXRlID0gKEdldC1TaXRlTmFtZSAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUpLlNpdGVOYW1lCiAgICAgICAgICAgIGlmKCRDb21wdXRlclNpdGUgLWFuZCAoJENvbXB1dGVyU2l0ZSAtbmUgJ0VSUk9SJykpIHsKICAgICAgICAgICAgICAgICRHUE9Hcm91cHMgKz0gR2V0LU5ldFNpdGUgLVNpdGVOYW1lICRDb21wdXRlclNpdGUgLUZ1bGxEYXRhIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgIGlmKCRfLmdwbGluaykgewogICAgICAgICAgICAgICAgICAgICAgICAkXy5ncGxpbmsuc3BsaXQoIl1bIikgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJF8uc3RhcnRzd2l0aCgiTERBUCIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8uc3BsaXQoIjsiKVswXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAkR1BPR3JvdXBBcmdzID0gIEB7CiAgICAgICAgICAgICAgICAgICAgICAgICdEb21haW4nID0gJERvbWFpbgogICAgICAgICAgICAgICAgICAgICAgICAnRG9tYWluQ29udHJvbGxlcicgPSAkRG9tYWluQ29udHJvbGxlcgogICAgICAgICAgICAgICAgICAgICAgICAnQURTcGF0aCcgPSAkXwogICAgICAgICAgICAgICAgICAgICAgICAnVXNlUFNEcml2ZScgPSAkVXNlUFNEcml2ZQogICAgICAgICAgICAgICAgICAgICAgICAnUGFnZVNpemUnID0gJFBhZ2VTaXplCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAjIGZvciBlYWNoIEdQTyBsaW5rLCBnZXQgYW55IGxvY2FsbHkgc2V0IHVzZXIvZ3JvdXAgU0lEcwogICAgICAgICAgICAgICAgICAgIEdldC1OZXRHUE9Hcm91cCBAR1BPR3JvdXBBcmdzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRUYXJnZXRPVXMgPSBAKCRPVU5hbWUpCiAgICAgICAgfQoKICAgICAgICBXcml0ZS1WZXJib3NlICJUYXJnZXQgT1VzOiAkVGFyZ2V0T1VzIgoKICAgICAgICAkVGFyZ2V0T1VzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CgogICAgICAgICAgICAjIGZvciBlYWNoIE9VIHRoZSBjb21wdXRlciBpcyBhIHBhcnQgb2YsIGdldCB0aGUgZnVsbCBPVSBvYmplY3QKICAgICAgICAgICAgJEdQT2dyb3VwcyArPSBHZXQtTmV0T1UgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1BRFNwYXRoICRfIC1GdWxsRGF0YSAtUGFnZVNpemUgJFBhZ2VTaXplIHwgRm9yRWFjaC1PYmplY3QgeyAKICAgICAgICAgICAgICAgICMgYW5kIHRoZW4gZ2V0IGFueSBHUE8gbGlua3MKICAgICAgICAgICAgICAgIGlmKCRfLmdwbGluaykgewogICAgICAgICAgICAgICAgICAgICRfLmdwbGluay5zcGxpdCgiXVsiKSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRfLnN0YXJ0c3dpdGgoIkxEQVAiKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8uc3BsaXQoIjsiKVswXQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgJEdQT0dyb3VwQXJncyA9ICBAewogICAgICAgICAgICAgICAgICAgICdEb21haW4nID0gJERvbWFpbgogICAgICAgICAgICAgICAgICAgICdEb21haW5Db250cm9sbGVyJyA9ICREb21haW5Db250cm9sbGVyCiAgICAgICAgICAgICAgICAgICAgJ0FEU3BhdGgnID0gJF8KICAgICAgICAgICAgICAgICAgICAnVXNlUFNEcml2ZScgPSAkVXNlUFNEcml2ZQogICAgICAgICAgICAgICAgICAgICdQYWdlU2l6ZScgPSAkUGFnZVNpemUKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAjIGZvciBlYWNoIEdQTyBsaW5rLCBnZXQgYW55IGxvY2FsbHkgc2V0IHVzZXIvZ3JvdXAgU0lEcwogICAgICAgICAgICAgICAgR2V0LU5ldEdQT0dyb3VwIEBHUE9Hcm91cEFyZ3MKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgIyBmb3IgZWFjaCBmb3VuZCBHUE8gZ3JvdXAsIHJlc29sdmUgdGhlIFNJRHMgb2YgdGhlIG1lbWJlcnMKICAgICAgICAkR1BPZ3JvdXBzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICRHUE8gPSAkXwoKICAgICAgICAgICAgaWYgKCRHUE8ubWVtYmVycykgewogICAgICAgICAgICAgICAgJEdQTy5tZW1iZXJzID0gJEdQTy5tZW1iZXJzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgaWYoJF8gLW1hdGNoICdeUy0xLS4qJykgewogICAgICAgICAgICAgICAgICAgICAgICAkXwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBpZiB0aGVyZSBhcmUgYW55IHBsYWluIGdyb3VwIG5hbWVzLCB0cnkgdG8gcmVzb2x2ZSB0aGVtIHRvIHNpZHMKICAgICAgICAgICAgICAgICAgICAgICAgKENvbnZlcnQtTmFtZVRvU2lkIC1PYmplY3ROYW1lICRfIC1Eb21haW4gJERvbWFpbikuU0lECiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSB8IFNvcnQtT2JqZWN0IC1VbmlxdWUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJEdQTy5tZW1iZXJzIHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICAgICAgICAgICMgcmVzb2x2ZSB0aGlzIFNJRCB0byBhIGRvbWFpbiBvYmplY3QKICAgICAgICAgICAgICAgICRPYmplY3QgPSBHZXQtQURPYmplY3QgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1QYWdlU2l6ZSAkUGFnZVNpemUgLVNJRCAkXwoKICAgICAgICAgICAgICAgICRJc0dyb3VwID0gQCgnMjY4NDM1NDU2JywnMjY4NDM1NDU3JywnNTM2ODcwOTEyJywnNTM2ODcwOTEzJykgLWNvbnRhaW5zICRPYmplY3Quc2FtYWNjb3VudHR5cGUKCiAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJBZG1pbiA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckFkbWluIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyTmFtZQogICAgICAgICAgICAgICAgJEdQT0NvbXB1dGVyQWRtaW4gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPRGlzcGxheU5hbWUnICRHUE8uR1BPRGlzcGxheU5hbWUKICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckFkbWluIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT1BhdGgnICRHUE8uR1BPUGF0aAogICAgICAgICAgICAgICAgJEdQT0NvbXB1dGVyQWRtaW4gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnT2JqZWN0TmFtZScgJE9iamVjdC5zYW1hY2NvdW50bmFtZQogICAgICAgICAgICAgICAgJEdQT0NvbXB1dGVyQWRtaW4gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnT2JqZWN0RE4nICRPYmplY3QuZGlzdGluZ3Vpc2hlZG5hbWUKICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckFkbWluIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ09iamVjdFNJRCcgJF8KICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckFkbWluIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzR3JvdXAnICRJc0dyb3VwCiAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJBZG1pbiAKCiAgICAgICAgICAgICAgICAjIGlmIHdlJ3JlIHJlY3Vyc2luZyBhbmQgdGhlIGN1cnJlbnQgcmVzdWx0IG9iamVjdCBpcyBhIGdyb3VwCiAgICAgICAgICAgICAgICBpZigkUmVjdXJzZSAtYW5kICRHUE9Db21wdXRlckFkbWluLmlzR3JvdXApIHsKCiAgICAgICAgICAgICAgICAgICAgR2V0LU5ldEdyb3VwTWVtYmVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtU0lEICRfIC1GdWxsRGF0YSAtUmVjdXJzZSAtUGFnZVNpemUgJFBhZ2VTaXplIHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlckROID0gJF8uZGlzdGluZ3Vpc2hlZE5hbWUKCiAgICAgICAgICAgICAgICAgICAgICAgICMgZXh0cmFjdCB0aGUgRlFETiBmcm9tIHRoZSBEaXN0aW5ndWlzaGVkIE5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlckRvbWFpbiA9ICRNZW1iZXJETi5zdWJTdHJpbmcoJE1lbWJlckROLkluZGV4T2YoIkRDPSIpKSAtcmVwbGFjZSAnREM9JywnJyAtcmVwbGFjZSAnLCcsJy4nCgogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVySXNHcm91cCA9IEAoJzI2ODQzNTQ1NicsJzI2ODQzNTQ1NycsJzUzNjg3MDkxMicsJzUzNjg3MDkxMycpIC1jb250YWlucyAkXy5zYW1hY2NvdW50dHlwZQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRfLnNhbUFjY291bnROYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGZvcmVzdCB1c2VycyBoYXZlIHRoZSBzYW1BY2NvdW50TmFtZSBzZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJOYW1lID0gJF8uc2FtQWNjb3VudE5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgZXh0ZXJuYWwgdHJ1c3QgdXNlcnMgaGF2ZSBhIFNJRCwgc28gY29udmVydCBpdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyTmFtZSA9IENvbnZlcnQtU2lkVG9OYW1lICRfLmNuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBpZiB0aGVyZSdzIGEgcHJvYmxlbSBjb250YWN0aW5nIHRoZSBkb21haW4gdG8gcmVzb2x2ZSB0aGUgU0lECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlck5hbWUgPSAkXy5jbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJBZG1pbiA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0NvbXB1dGVyQWRtaW4gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckFkbWluIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT0Rpc3BsYXlOYW1lJyAkR1BPLkdQT0Rpc3BsYXlOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckFkbWluIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT1BhdGgnICRHUE8uR1BPUGF0aAogICAgICAgICAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJBZG1pbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdPYmplY3ROYW1lJyAkTWVtYmVyTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJBZG1pbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdPYmplY3RETicgJE1lbWJlckROCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckFkbWluIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ09iamVjdFNJRCcgJF8ub2JqZWN0c2lkCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckFkbWluIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzR3JvdXAnICRNZW1iZXJJc0dyb3VwCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckFkbWluIAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1Eb21haW5Qb2xpY3kgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFJldHVybnMgdGhlIGRlZmF1bHQgZG9tYWluIG9yIERDIHBvbGljeSBmb3IgYSBnaXZlbgogICAgICAgIGRvbWFpbiBvciBkb21haW4gY29udHJvbGxlci4KCiAgICAgICAgVGhhbmtzIFNlYW4gTWV0YWNhbGYgKEBweXJvdGVrMykgZm9yIHRoZSBpZGVhIGFuZCBndWlkYW5jZS4KCiAgICAuUEFSQU1FVEVSIFNvdXJjZQoKICAgICAgICBFeHRyYWN0IERvbWFpbiBvciBEQyAoZG9tYWluIGNvbnRyb2xsZXIpIHBvbGljaWVzLgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gcXVlcnkgZm9yIGRlZmF1bHQgcG9saWNpZXMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIFJlc29sdmVTaWRzCgogICAgICAgIFN3aXRjaC4gUmVzb2x2ZSBTaWRzIGZyb20gYSBEQyBwb2xpY3kgdG8gb2JqZWN0IG5hbWVzLgoKICAgIC5QQVJBTUVURVIgVXNlUFNEcml2ZQoKICAgICAgICBTd2l0Y2guIE1vdW50IGFueSBmb3VuZCBwb2xpY3kgZmlsZXMgd2l0aCB0ZW1wb3JhcnkgUFNEcml2ZXMuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtRG9tYWluUG9saWN5CgogICAgICAgIFJldHVybnMgdGhlIGRvbWFpbiBwb2xpY3kgZm9yIHRoZSBjdXJyZW50IGRvbWFpbi4gCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtRG9tYWluUG9saWN5IC1Tb3VyY2UgREMgLURvbWFpbkNvbnRyb2xsZXIgTUFTVEVSLnRlc3RsYWIubG9jYWwKCiAgICAgICAgUmV0dXJucyB0aGUgcG9saWN5IGZvciB0aGUgTUFTVEVSLnRlc3RsYWIubG9jYWwgZG9tYWluIGNvbnRyb2xsZXIuCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbU3RyaW5nXQogICAgICAgIFtWYWxpZGF0ZVNldCgiRG9tYWluIiwiREMiKV0KICAgICAgICAkU291cmNlID0iRG9tYWluIiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZXNvbHZlU2lkcywKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVXNlUFNEcml2ZQogICAgKQoKICAgIGlmKCRTb3VyY2UgLWVxICJEb21haW4iKSB7CiAgICAgICAgIyBxdWVyeSB0aGUgZ2l2ZW4gZG9tYWluIGZvciB0aGUgZGVmYXVsdCBkb21haW4gcG9saWN5IG9iamVjdAogICAgICAgICRHUE8gPSBHZXQtTmV0R1BPIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtR1BPbmFtZSAiezMxQjJGMzQwLTAxNkQtMTFEMi05NDVGLTAwQzA0RkI5ODRGOX0iCiAgICAgICAgCiAgICAgICAgaWYoJEdQTykgewogICAgICAgICAgICAjIGdyYWIgdGhlIEdwdFRtcGwuaW5mIGZpbGUgYW5kIHBhcnNlIGl0CiAgICAgICAgICAgICRHcHRUbXBsUGF0aCA9ICRHUE8uZ3BjZmlsZXN5c3BhdGggKyAiXE1BQ0hJTkVcTWljcm9zb2Z0XFdpbmRvd3MgTlRcU2VjRWRpdFxHcHRUbXBsLmluZiIKCiAgICAgICAgICAgICRQYXJzZUFyZ3MgPSAgQHsKICAgICAgICAgICAgICAgICdHcHRUbXBsUGF0aCcgPSAkR3B0VG1wbFBhdGgKICAgICAgICAgICAgICAgICdVc2VQU0RyaXZlJyA9ICRVc2VQU0RyaXZlCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgcGFyc2UgdGhlIEdwdFRtcGwuaW5mCiAgICAgICAgICAgIEdldC1HcHRUbXBsIEBQYXJzZUFyZ3MKICAgICAgICB9CgogICAgfQogICAgZWxzZWlmKCRTb3VyY2UgLWVxICJEQyIpIHsKICAgICAgICAjIHF1ZXJ5IHRoZSBnaXZlbiBkb21haW4vZGMgZm9yIHRoZSBkZWZhdWx0IGRvbWFpbiBjb250cm9sbGVyIHBvbGljeSBvYmplY3QKICAgICAgICAkR1BPID0gR2V0LU5ldEdQTyAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUdQT25hbWUgIns2QUMxNzg2Qy0wMTZGLTExRDItOTQ1Ri0wMEMwNEZCOTg0Rjl9IgoKICAgICAgICBpZigkR1BPKSB7CiAgICAgICAgICAgICMgZ3JhYiB0aGUgR3B0VG1wbC5pbmYgZmlsZSBhbmQgcGFyc2UgaXQKICAgICAgICAgICAgJEdwdFRtcGxQYXRoID0gJEdQTy5ncGNmaWxlc3lzcGF0aCArICJcTUFDSElORVxNaWNyb3NvZnRcV2luZG93cyBOVFxTZWNFZGl0XEdwdFRtcGwuaW5mIgoKICAgICAgICAgICAgJFBhcnNlQXJncyA9ICBAewogICAgICAgICAgICAgICAgJ0dwdFRtcGxQYXRoJyA9ICRHcHRUbXBsUGF0aAogICAgICAgICAgICAgICAgJ1VzZVBTRHJpdmUnID0gJFVzZVBTRHJpdmUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBwYXJzZSB0aGUgR3B0VG1wbC5pbmYKICAgICAgICAgICAgR2V0LUdwdFRtcGwgQFBhcnNlQXJncyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgIGlmKCRSZXNvbHZlU2lkcykgewogICAgICAgICAgICAgICAgICAgICMgaWYgd2UncmUgcmVzb2x2aW5nIHNpZHMgaW4gUHJpdmlsZWdlUmlnaHRzIHRvIG5hbWVzCiAgICAgICAgICAgICAgICAgICAgJFBvbGljeSA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAkXy5wc29iamVjdC5wcm9wZXJ0aWVzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICBpZiggJF8uTmFtZSAtZXEgJ1ByaXZpbGVnZVJpZ2h0cycpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUHJpdmlsZWdlUmlnaHRzID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBmb3IgZXZlcnkgbmVzdGVkIFNJRCBtZW1iZXIgb2YgUHJpdmlsZWdlUmlnaHRzLCB0cnkgdG8gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjICAgdW5wYWNrIGV2ZXJ5dGhpbmcgYW5kIHJlc29sdmUgdGhlIFNJRHMgYXMgYXBwcm9wcmlhdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfLlZhbHVlLnBzb2JqZWN0LnByb3BlcnRpZXMgfCBGb3JFYWNoLU9iamVjdCB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTaWRzID0gJF8uVmFsdWUgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkXyAtaXNub3QgW1N5c3RlbS5BcnJheV0pIHsgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29udmVydC1TaWRUb05hbWUgJF8gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkXyB8IEZvckVhY2gtT2JqZWN0IHsgQ29udmVydC1TaWRUb05hbWUgJF8gfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLURlYnVnICJFcnJvciByZXNvbHZpbmcgU0lEIDogJF8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRQcml2aWxlZ2VSaWdodHMgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAkXy5OYW1lICRTaWRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFBvbGljeSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQcml2aWxlZ2VSaWdodHMnICRQcml2aWxlZ2VSaWdodHMKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRQb2xpY3kgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAkXy5OYW1lICRfLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJFBvbGljeQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7ICRfIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojCiMgRnVuY3Rpb25zIHRoYXQgZW51bWVyYXRlIGEgc2luZ2xlIGhvc3QsIGVpdGhlciB0aHJvdWdoCiMgV2luTlQsIFdNSSwgcmVtb3RlIHJlZ2lzdHJ5LCBvciBBUEkgY2FsbHMgCiMgKHdpdGggUFNSZWZsZWN0KS4KIwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKZnVuY3Rpb24gR2V0LU5ldExvY2FsR3JvdXAgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEdldHMgYSBsaXN0IG9mIGFsbCBjdXJyZW50IHVzZXJzIGluIGEgc3BlY2lmaWVkIGxvY2FsIGdyb3VwLAogICAgICAgIG9yIHJldHVybnMgdGhlIG5hbWVzIG9mIGFsbCBsb2NhbCBncm91cHMgd2l0aCAtTGlzdEdyb3Vwcy4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBUaGUgaG9zdG5hbWUgb3IgSVAgdG8gcXVlcnkgZm9yIGxvY2FsIGdyb3VwIHVzZXJzLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJGaWxlCgogICAgICAgIEZpbGUgb2YgaG9zdG5hbWVzL0lQcyB0byBxdWVyeSBmb3IgbG9jYWwgZ3JvdXAgdXNlcnMuCgogICAgLlBBUkFNRVRFUiBHcm91cE5hbWUKCiAgICAgICAgVGhlIGxvY2FsIGdyb3VwIG5hbWUgdG8gcXVlcnkgZm9yIHVzZXJzLiBJZiBub3QgZ2l2ZW4sIGl0IGRlZmF1bHRzIHRvICJBZG1pbmlzdHJhdG9ycyIKCiAgICAuUEFSQU1FVEVSIExpc3RHcm91cHMKCiAgICAgICAgU3dpdGNoLiBMaXN0IGFsbCB0aGUgbG9jYWwgZ3JvdXBzIGluc3RlYWQgb2YgdGhlaXIgbWVtYmVycy4KICAgICAgICBPbGQgR2V0LU5ldExvY2FsR3JvdXBzIGZ1bmN0aW9uYWxpdHkuCgogICAgLlBBUkFNRVRFUiBSZWN1cnNlCgogICAgICAgIFN3aXRjaC4gSWYgdGhlIGxvY2FsIG1lbWJlciBtZW1iZXIgaXMgYSBkb21haW4gZ3JvdXAsIHJlY3Vyc2l2ZWx5IHRyeSB0byByZXNvbHZlIGl0cyBtZW1iZXJzIHRvIGdldCBhIGxpc3Qgb2YgZG9tYWluIHVzZXJzIHdobyBjYW4gYWNjZXNzIHRoaXMgbWFjaGluZS4KCiAgICAuUEFSQU1FVEVSIEFQSQoKICAgICAgICBTd2l0Y2guIFVzZSBBUEkgY2FsbHMgaW5zdGVhZCBvZiB0aGUgV2luTlQgc2VydmljZSBwcm92aWRlci4gTGVzcyBpbmZvcm1hdGlvbiwKICAgICAgICBidXQgdGhlIHJlc3VsdHMgYXJlIGZhc3Rlci4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRMb2NhbEdyb3VwCgogICAgICAgIFJldHVybnMgdGhlIHVzZXJuYW1lcyB0aGF0IG9mIG1lbWJlcnMgb2YgbG9jYWxncm91cCAiQWRtaW5pc3RyYXRvcnMiIG9uIHRoZSBsb2NhbCBob3N0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldExvY2FsR3JvdXAgLUNvbXB1dGVyTmFtZSBXSU5ET1dTWFAKCiAgICAgICAgUmV0dXJucyBhbGwgdGhlIGxvY2FsIGFkbWluaXN0cmF0b3IgYWNjb3VudHMgZm9yIFdJTkRPV1NYUAoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldExvY2FsR3JvdXAgLUNvbXB1dGVyTmFtZSBXSU5ET1dTNyAtUmVjdXJzZSAKCiAgICAgICAgUmV0dXJucyBhbGwgZWZmZWN0aXZlIGxvY2FsL2RvbWFpbiB1c2Vycy9ncm91cHMgdGhhdCBjYW4gYWNjZXNzIFdJTkRPV1M3IHdpdGgKICAgICAgICBsb2NhbCBhZG1pbmlzdHJhdGl2ZSBwcml2aWxlZ2VzLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldExvY2FsR3JvdXAgLUNvbXB1dGVyTmFtZSBXSU5ET1dTNyAtTGlzdEdyb3VwcwoKICAgICAgICBSZXR1cm5zIGFsbCBsb2NhbCBncm91cHMgb24gdGhlIFdJTkRPV1M3IGhvc3QuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiAiV0lORE9XUzciLCAiV0lORE9XU1NQIiB8IEdldC1OZXRMb2NhbEdyb3VwIC1BUEkKCiAgICAgICAgUmV0dXJucyBhbGwgbG9jYWwgZ3JvdXBzIG9uIHRoZSB0aGUgcGFzc2VkIGhvc3RzIHVzaW5nIEFQSSBjYWxscyBpbnN0ZWFkIG9mIHRoZQogICAgICAgIFdpbk5UIHNlcnZpY2UgcHJvdmlkZXIuCgogICAgLkxJTksKCiAgICAgICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMTI4ODIyMC9nZXQtYWxsLWxvY2FsLW1lbWJlcnMtYW5kLWdyb3Vwcy1kaXNwbGF5ZWQtdG9nZXRoZXIKICAgICAgICBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvYWE3NzIyMTEoVlMuODUpLmFzcHgKIz4KCiAgICBbQ21kbGV0QmluZGluZyhEZWZhdWx0UGFyYW1ldGVyU2V0TmFtZSA9ICdXaW5OVCcpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0FQSScsIFBvc2l0aW9uPTAsIFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnV2luTlQnLCBQb3NpdGlvbj0wLCBWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJ2xvY2FsaG9zdCcsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdXaW5OVCcpXQogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdBUEknKV0KICAgICAgICBbVmFsaWRhdGVTY3JpcHQoe1Rlc3QtUGF0aCAtUGF0aCAkXyB9KV0KICAgICAgICBbQWxpYXMoJ0hvc3RMaXN0JyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJGaWxlLAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnV2luTlQnKV0KICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnQVBJJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkR3JvdXBOYW1lID0gJ0FkbWluaXN0cmF0b3JzJywKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ1dpbk5UJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkTGlzdEdyb3VwcywKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ1dpbk5UJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUmVjdXJzZSwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0FQSScpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEFQSQogICAgKQoKICAgIHByb2Nlc3MgewoKICAgICAgICAkU2VydmVycyA9IEAoKQoKICAgICAgICAjIGlmIHdlIGhhdmUgYSBob3N0IGxpc3QgcGFzc2VkLCBncmFiIGl0CiAgICAgICAgaWYoJENvbXB1dGVyRmlsZSkgewogICAgICAgICAgICAkU2VydmVycyA9IEdldC1Db250ZW50IC1QYXRoICRDb21wdXRlckZpbGUKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICMgb3RoZXJ3aXNlIGFzc3VtZSBhIHNpbmdsZSBob3N0IG5hbWUKICAgICAgICAgICAgJFNlcnZlcnMgKz0gJENvbXB1dGVyTmFtZSB8IEdldC1OYW1lRmllbGQKICAgICAgICB9CgogICAgICAgICMgcXVlcnkgdGhlIHNwZWNpZmllZCBncm91cCB1c2luZyB0aGUgV0lOTlQgcHJvdmlkZXIsIGFuZAogICAgICAgICMgZXh0cmFjdCBmaWVsZHMgYXMgYXBwcm9wcmlhdGUgZnJvbSB0aGUgcmVzdWx0cwogICAgICAgIEZvckVhY2goJFNlcnZlciBpbiAkU2VydmVycykgewoKICAgICAgICAgICAgaWYoJEFQSSkgewogICAgICAgICAgICAgICAgIyBpZiB3ZSdyZSB1c2luZyB0aGUgTmV0YXBpMzIgTmV0TG9jYWxHcm91cEdldE1lbWJlcnMgQVBJIGNhbGwgdG8KICAgICAgICAgICAgICAgICMgICBnZXQgdGhlIGxvY2FsIGdyb3VwIGluZm9ybWF0aW9uCgogICAgICAgICAgICAgICAgIyBhcmd1bWVudHMgZm9yIE5ldExvY2FsR3JvdXBHZXRNZW1iZXJzCiAgICAgICAgICAgICAgICAkUXVlcnlMZXZlbCA9IDIKICAgICAgICAgICAgICAgICRQdHJJbmZvID0gW0ludFB0cl06Olplcm8KICAgICAgICAgICAgICAgICRFbnRyaWVzUmVhZCA9IDAKICAgICAgICAgICAgICAgICRUb3RhbFJlYWQgPSAwCiAgICAgICAgICAgICAgICAkUmVzdW1lSGFuZGxlID0gMAoKICAgICAgICAgICAgICAgICMgZ2V0IHRoZSBsb2NhbCB1c2VyIGluZm9ybWF0aW9uCiAgICAgICAgICAgICAgICAkUmVzdWx0ID0gJE5ldGFwaTMyOjpOZXRMb2NhbEdyb3VwR2V0TWVtYmVycygkU2VydmVyLCAkR3JvdXBOYW1lLCAkUXVlcnlMZXZlbCwgW3JlZl0kUHRySW5mbywgLTEsIFtyZWZdJEVudHJpZXNSZWFkLCBbcmVmXSRUb3RhbFJlYWQsIFtyZWZdJFJlc3VtZUhhbmRsZSkKCiAgICAgICAgICAgICAgICAjIExvY2F0ZSB0aGUgb2Zmc2V0IG9mIHRoZSBpbml0aWFsIGludFB0cgogICAgICAgICAgICAgICAgJE9mZnNldCA9ICRQdHJJbmZvLlRvSW50NjQoKQoKICAgICAgICAgICAgICAgIFdyaXRlLURlYnVnICJOZXRMb2NhbEdyb3VwR2V0TWVtYmVycyByZXN1bHQgZm9yICRTZXJ2ZXIgOiAkUmVzdWx0IgogICAgICAgICAgICAgICAgJExvY2FsVXNlcnMgPSBAKCkKCiAgICAgICAgICAgICAgICAjIDAgPSBzdWNjZXNzCiAgICAgICAgICAgICAgICBpZiAoKCRSZXN1bHQgLWVxIDApIC1hbmQgKCRPZmZzZXQgLWd0IDApKSB7CgogICAgICAgICAgICAgICAgICAgICMgV29yayBvdXQgaG93IG11dGNoIHRvIGluY3JlbWVudCB0aGUgcG9pbnRlciBieSBmaW5kaW5nIG91dCB0aGUgc2l6ZSBvZiB0aGUgc3RydWN0dXJlCiAgICAgICAgICAgICAgICAgICAgJEluY3JlbWVudCA9ICRMT0NBTEdST1VQX01FTUJFUlNfSU5GT18yOjpHZXRTaXplKCkKCiAgICAgICAgICAgICAgICAgICAgIyBwYXJzZSBhbGwgdGhlIHJlc3VsdCBzdHJ1Y3R1cmVzCiAgICAgICAgICAgICAgICAgICAgZm9yICgkaSA9IDA7ICgkaSAtbHQgJEVudHJpZXNSZWFkKTsgJGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAjIGNyZWF0ZSBhIG5ldyBpbnQgcHRyIGF0IHRoZSBnaXZlbiBvZmZzZXQgYW5kIGNhc3QKICAgICAgICAgICAgICAgICAgICAgICAgIyAgIHRoZSBwb2ludGVyIGFzIG91ciByZXN1bHQgc3RydWN0dXJlCiAgICAgICAgICAgICAgICAgICAgICAgICROZXdJbnRQdHIgPSBOZXctT2JqZWN0IFN5c3RlbS5JbnRwdHIgLUFyZ3VtZW50TGlzdCAkT2Zmc2V0CiAgICAgICAgICAgICAgICAgICAgICAgICRJbmZvID0gJE5ld0ludFB0ciAtYXMgJExPQ0FMR1JPVVBfTUVNQkVSU19JTkZPXzIKCiAgICAgICAgICAgICAgICAgICAgICAgICRTaWRTdHJpbmcgPSAiIgogICAgICAgICAgICAgICAgICAgICAgICAkUmVzdWx0ID0gJEFkdmFwaTMyOjpDb252ZXJ0U2lkVG9TdHJpbmdTaWQoJEluZm8ubGdybWkyX3NpZCwgW3JlZl0kU2lkU3RyaW5nKQogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1EZWJ1ZyAiUmVzdWx0IG9mIENvbnZlcnRTaWRUb1N0cmluZ1NpZDogJFJlc3VsdCIKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRSZXN1bHQgLWVxIDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgZXJyb3IgY29kZXMgLSBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvd2luZG93cy9kZXNrdG9wL21zNjgxMzgyKHY9dnMuODUpLmFzcHgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRFcnIgPSAkS2VybmVsMzI6OkdldExhc3RFcnJvcigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1FcnJvciAiQ29udmVydFNpZFRvU3RyaW5nU2lkIExhc3RFcnJvcjogJEVyciIgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWxVc2VyID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRTZXJ2ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQWNjb3VudE5hbWUnICRJbmZvLmxncm1pMl9kb21haW5hbmRuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWxVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NJRCcgJFNpZFN0cmluZwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJc0dyb3VwID0gJCgkSW5mby5sZ3JtaTJfc2lkdXNhZ2UgLWVxICdTaWRUeXBlR3JvdXAnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJc0dyb3VwJyAkSXNHcm91cAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRPZmZzZXQgPSAkTmV3SW50UHRyLlRvSW50NjQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE9mZnNldCArPSAkSW5jcmVtZW50CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsVXNlcnMgKz0gJExvY2FsVXNlcgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAjIGZyZWUgdXAgdGhlIHJlc3VsdCBidWZmZXIKICAgICAgICAgICAgICAgICAgICAkTnVsbCA9ICROZXRhcGkzMjo6TmV0QXBpQnVmZmVyRnJlZSgkUHRySW5mbykKCiAgICAgICAgICAgICAgICAgICAgIyB0cnkgdG8gZXh0cmFjdCBvdXQgdGhlIG1hY2hpbmUgU0lEIGJ5IHVzaW5nIHRoZSAtNTAwIGFjY291bnQgYXMgYSByZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAkTWFjaGluZVNpZCA9ICRMb2NhbFVzZXJzIHwgV2hlcmUtT2JqZWN0IHskXy5TSUQgLWxpa2UgJyotNTAwJ30KICAgICAgICAgICAgICAgICAgICAkUGFydHMgPSAkTWFjaGluZVNpZC5TSUQuU3BsaXQoJy0nKQogICAgICAgICAgICAgICAgICAgICRNYWNoaW5lU2lkID0gJFBhcnRzWzAuLigkUGFydHMuTGVuZ3RoIC0yKV0gLWpvaW4gJy0nCgogICAgICAgICAgICAgICAgICAgICRMb2NhbFVzZXJzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICBpZigkXy5TSUQgLW1hdGNoICRNYWNoaW5lU2lkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkXyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJc0RvbWFpbicgJEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkXyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJc0RvbWFpbicgJFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkTG9jYWxVc2VycwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoJFJlc3VsdCkgewogICAgICAgICAgICAgICAgICAgICAgICAoNSkgICAgICAgICAgIHtXcml0ZS1EZWJ1ZyAnVGhlIHVzZXIgZG9lcyBub3QgaGF2ZSBhY2Nlc3MgdG8gdGhlIHJlcXVlc3RlZCBpbmZvcm1hdGlvbi4nfQogICAgICAgICAgICAgICAgICAgICAgICAoMTI0KSAgICAgICAgIHtXcml0ZS1EZWJ1ZyAnVGhlIHZhbHVlIHNwZWNpZmllZCBmb3IgdGhlIGxldmVsIHBhcmFtZXRlciBpcyBub3QgdmFsaWQuJ30KICAgICAgICAgICAgICAgICAgICAgICAgKDg3KSAgICAgICAgICB7V3JpdGUtRGVidWcgJ1RoZSBzcGVjaWZpZWQgcGFyYW1ldGVyIGlzIG5vdCB2YWxpZC4nfQogICAgICAgICAgICAgICAgICAgICAgICAoMjM0KSAgICAgICAgIHtXcml0ZS1EZWJ1ZyAnTW9yZSBlbnRyaWVzIGFyZSBhdmFpbGFibGUuIFNwZWNpZnkgYSBsYXJnZSBlbm91Z2ggYnVmZmVyIHRvIHJlY2VpdmUgYWxsIGVudHJpZXMuJ30KICAgICAgICAgICAgICAgICAgICAgICAgKDgpICAgICAgICAgICB7V3JpdGUtRGVidWcgJ0luc3VmZmljaWVudCBtZW1vcnkgaXMgYXZhaWxhYmxlLid9CiAgICAgICAgICAgICAgICAgICAgICAgICgyMzEyKSAgICAgICAge1dyaXRlLURlYnVnICdBIHNlc3Npb24gZG9lcyBub3QgZXhpc3Qgd2l0aCB0aGUgY29tcHV0ZXIgbmFtZS4nfQogICAgICAgICAgICAgICAgICAgICAgICAoMjM1MSkgICAgICAgIHtXcml0ZS1EZWJ1ZyAnVGhlIGNvbXB1dGVyIG5hbWUgaXMgbm90IHZhbGlkLid9CiAgICAgICAgICAgICAgICAgICAgICAgICgyMjIxKSAgICAgICAge1dyaXRlLURlYnVnICdVc2VybmFtZSBub3QgZm91bmQuJ30KICAgICAgICAgICAgICAgICAgICAgICAgKDUzKSAgICAgICAgICB7V3JpdGUtRGVidWcgJ0hvc3RuYW1lIGNvdWxkIG5vdCBiZSBmb3VuZCd9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICMgb3RoZXJ3aXNlIHdlJ3JlIHVzaW5nIHRoZSBXaW5OVCBzZXJ2aWNlIHByb3ZpZGVyCiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIGlmKCRMaXN0R3JvdXBzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgaWYgd2UncmUgbGlzdGluZyB0aGUgZ3JvdXAgbmFtZXMgb24gYSByZW1vdGUgc2VydmVyCiAgICAgICAgICAgICAgICAgICAgICAgICRDb21wdXRlciA9IFtBRFNJXSJXaW5OVDovLyRTZXJ2ZXIsY29tcHV0ZXIiCgogICAgICAgICAgICAgICAgICAgICAgICAkQ29tcHV0ZXIucHNiYXNlLmNoaWxkcmVuIHwgV2hlcmUtT2JqZWN0IHsgJF8ucHNiYXNlLnNjaGVtYUNsYXNzTmFtZSAtZXEgJ2dyb3VwJyB9IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NlcnZlcicgJFNlcnZlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwJyAoJF8ubmFtZVswXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTSUQnICgoTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllciAkXy5vYmplY3RzaWRbMF0sMCkuVmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRGVzY3JpcHRpb24nICgkXy5EZXNjcmlwdGlvblswXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAjIG90aGVyd2lzZSB3ZSdyZSBsaXN0aW5nIHRoZSBncm91cCBtZW1iZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJzID0gQCgkKFtBRFNJXSJXaW5OVDovLyRTZXJ2ZXIvJEdyb3VwTmFtZSxncm91cCIpLnBzYmFzZS5JbnZva2UoJ01lbWJlcnMnKSkKCiAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJzIHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJFNlcnZlcgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRBZHNQYXRoID0gKCRfLkdldFR5cGUoKS5JbnZva2VNZW1iZXIoJ0Fkc3BhdGgnLCAnR2V0UHJvcGVydHknLCAkTnVsbCwgJF8sICROdWxsKSkuUmVwbGFjZSgnV2luTlQ6Ly8nLCAnJykKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIHRyeSB0byB0cmFuc2xhdGUgdGhlIE5UNCBkb21haW4gdG8gYSBGUUROIGlmIHBvc3NpYmxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTmFtZSA9IENvbnZlcnQtQUROYW1lIC1PYmplY3ROYW1lICRBZHNQYXRoIC1JbnB1dFR5cGUgJ05UNCcgLU91dHB1dFR5cGUgJ0Nhbm9uaWNhbCcKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkTmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGUUROID0gJE5hbWUuc3BsaXQoIi8iKVswXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRPYmpOYW1lID0gJEFkc1BhdGguc3BsaXQoIi8iKVstMV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTmFtZSA9ICIkRlFETi8kT2JqTmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSXNEb21haW4gPSAkVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE5hbWUgPSAkQWRzUGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJc0RvbWFpbiA9ICRGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQWNjb3VudE5hbWUnICROYW1lCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJElzRG9tYWluKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB0cmFuc2xhdGUgdGhlIGJpbmFyeSBzaWQgdG8gYSBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NJRCcgKChOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyKCRfLkdldFR5cGUoKS5JbnZva2VNZW1iZXIoJ09iamVjdFNJRCcsICdHZXRQcm9wZXJ0eScsICROdWxsLCAkXywgJE51bGwpLDApKS5WYWx1ZSkKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEZXNjcmlwdGlvbicgIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0Rpc2FibGVkJyAkRmFsc2UKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBjaGVjayBpZiB0aGUgbWVtYmVyIGlzIGEgZ3JvdXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSXNHcm91cCA9ICgkXy5HZXRUeXBlKCkuSW52b2tlTWVtYmVyKCdDbGFzcycsICdHZXRQcm9wZXJ0eScsICROdWxsLCAkXywgJE51bGwpIC1lcSAnZ3JvdXAnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNHcm91cCcgJElzR3JvdXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzRG9tYWluJyAkSXNEb21haW4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJElzR3JvdXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMYXN0TG9naW4nICROdWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMYXN0TG9naW4nICggJF8uR2V0VHlwZSgpLkludm9rZU1lbWJlcignTGFzdExvZ2luJywgJ0dldFByb3BlcnR5JywgJE51bGwsICRfLCAkTnVsbCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMYXN0TG9naW4nICROdWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQd2RMYXN0U2V0JyAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUHdkRXhwaXJlZCcgIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJGbGFncycgIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgcmVwdWxsIHRoaXMgdXNlciBvYmplY3Qgc28gd2UgY2FuIGVuc3VyZSBjb3JyZWN0IGluZm9ybWF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsVXNlciA9ICQoW0FEU0ldICJXaW5OVDovLyRBZHNQYXRoIikKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB0cmFuc2xhdGUgdGhlIGJpbmFyeSBzaWQgdG8gYSBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NJRCcgKChOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyKCRMb2NhbFVzZXIub2JqZWN0U2lkLnZhbHVlLDApKS5WYWx1ZSkKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEZXNjcmlwdGlvbicgKCRMb2NhbFVzZXIuRGVzY3JpcHRpb25bMF0pCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgVUFDIGZsYWdzIG9mIDB4MiBtZWFuIHRoZSBhY2NvdW50IGlzIGRpc2FibGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEaXNhYmxlZCcgJCgoJExvY2FsVXNlci51c2VyRmxhZ3MudmFsdWUgLWJhbmQgMikgLWVxIDIpCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgY2hlY2sgaWYgdGhlIG1lbWJlciBpcyBhIGdyb3VwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJc0dyb3VwJyAoJExvY2FsVXNlci5TY2hlbWFDbGFzc05hbWUgLWxpa2UgJ2dyb3VwJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzRG9tYWluJyAkSXNEb21haW4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJElzR3JvdXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMYXN0TG9naW4nICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMYXN0TG9naW4nICggJExvY2FsVXNlci5MYXN0TG9naW5bMF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMYXN0TG9naW4nICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUHdkTGFzdFNldCcgKCAoR2V0LURhdGUpLkFkZFNlY29uZHMoLSRMb2NhbFVzZXIuUGFzc3dvcmRBZ2VbMF0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUHdkRXhwaXJlZCcgKCAkTG9jYWxVc2VyLlBhc3N3b3JkRXhwaXJlZFswXSAtZXEgJzEnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlckZsYWdzJyAoICRMb2NhbFVzZXIuVXNlckZsYWdzWzBdICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGlmIHRoZSByZXN1bHQgaXMgYSBncm91cCBkb21haW4gb2JqZWN0IGFuZCB3ZSdyZSByZWN1cnNpbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjICAgdHJ5IHRvIHJlc29sdmUgYWxsIHRoZSBncm91cCBtZW1iZXIgcmVzdWx0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFJlY3Vyc2UgLWFuZCAkSXNEb21haW4gLWFuZCAkSXNHcm91cCkgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRlFETiA9ICROYW1lLnNwbGl0KCIvIilbMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBOYW1lID0gJE5hbWUuc3BsaXQoIi8iKVsxXS50cmltKCkKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0LU5ldEdyb3VwTWVtYmVyIC1Hcm91cE5hbWUgJEdyb3VwTmFtZSAtRG9tYWluICRGUUROIC1GdWxsRGF0YSAtUmVjdXJzZSB8IEZvckVhY2gtT2JqZWN0IHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAiJEZRRE4vJCgkXy5Hcm91cE5hbWUpIgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlckROID0gJF8uZGlzdGluZ3Vpc2hlZE5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBleHRyYWN0IHRoZSBGUUROIGZyb20gdGhlIERpc3Rpbmd1aXNoZWQgTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyRG9tYWluID0gJE1lbWJlckROLnN1YlN0cmluZygkTWVtYmVyRE4uSW5kZXhPZigiREM9IikpIC1yZXBsYWNlICdEQz0nLCcnIC1yZXBsYWNlICcsJywnLicKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJJc0dyb3VwID0gQCgnMjY4NDM1NDU2JywnMjY4NDM1NDU3JywnNTM2ODcwOTEyJywnNTM2ODcwOTEzJykgLWNvbnRhaW5zICRfLnNhbWFjY291bnR0eXBlCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJF8uc2FtQWNjb3VudE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgZm9yZXN0IHVzZXJzIGhhdmUgdGhlIHNhbUFjY291bnROYW1lIHNldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlck5hbWUgPSAkXy5zYW1BY2NvdW50TmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGV4dGVybmFsIHRydXN0IHVzZXJzIGhhdmUgYSBTSUQsIHNvIGNvbnZlcnQgaXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyTmFtZSA9IENvbnZlcnQtU2lkVG9OYW1lICRfLmNuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBpZiB0aGVyZSdzIGEgcHJvYmxlbSBjb250YWN0aW5nIHRoZSBkb21haW4gdG8gcmVzb2x2ZSB0aGUgU0lECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJOYW1lID0gJF8uY24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtRGVidWcgIkVycm9yIHJlc29sdmluZyBTSUQgOiAkXyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdBY2NvdW50TmFtZScgIiRNZW1iZXJEb21haW4vJE1lbWJlck5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU0lEJyAkXy5vYmplY3RzaWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEZXNjcmlwdGlvbicgJF8uZGVzY3JpcHRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEaXNhYmxlZCcgJEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNHcm91cCcgJE1lbWJlcklzR3JvdXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJc0RvbWFpbicgJFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMYXN0TG9naW4nICcnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUHdkTGFzdFNldCcgJF8ucHdkTGFzdFNldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1B3ZEV4cGlyZWQnICcnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlckZsYWdzJyAkXy51c2VyQWNjb3VudENvbnRyb2wKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbIV0gRXJyb3I6ICRfIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZmlsdGVyIEdldC1OZXRTaGFyZSB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgVGhpcyBmdW5jdGlvbiB3aWxsIGV4ZWN1dGUgdGhlIE5ldFNoYXJlRW51bSBXaW4zMkFQSSBjYWxsIHRvIHF1ZXJ5CiAgICAgICAgYSBnaXZlbiBob3N0IGZvciBvcGVuIHNoYXJlcy4gVGhpcyBpcyBhIHJlcGxhY2VtZW50IGZvcgogICAgICAgICJuZXQgc2hhcmUgXFxob3N0bmFtZSIKCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBUaGUgaG9zdG5hbWUgdG8gcXVlcnkgZm9yIHNoYXJlcy4gQWxzbyBhY2NlcHRzIElQIGFkZHJlc3Nlcy4KCiAgICAuT1VUUFVUUwoKICAgICAgICBTSEFSRV9JTkZPXzEgc3RydWN0dXJlLiBBIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBTSEFSRV9JTkZPXzEKICAgICAgICByZXN1bHQgc3RydWN0dXJlIHdoaWNoIGluY2x1ZGVzIHRoZSBuYW1lIGFuZCBub3RlIGZvciBlYWNoIHNoYXJlLAogICAgICAgIHdpdGggdGhlIENvbXB1dGVyTmFtZSBhZGRlZC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRTaGFyZQoKICAgICAgICBSZXR1cm5zIGFjdGl2ZSBzaGFyZXMgb24gdGhlIGxvY2FsIGhvc3QuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0U2hhcmUgLUNvbXB1dGVyTmFtZSBzcWxzZXJ2ZXIKCiAgICAgICAgUmV0dXJucyBhY3RpdmUgc2hhcmVzIG9uIHRoZSAnc3Fsc2VydmVyJyBob3N0CgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0Q29tcHV0ZXIgfCBHZXQtTmV0U2hhcmUKCiAgICAgICAgUmV0dXJucyBhbGwgc2hhcmVzIGZvciBhbGwgY29tcHV0ZXJzIGluIHRoZSBkb21haW4uCgogICAgLkxJTksKCiAgICAgICAgaHR0cDovL3d3dy5wb3dlcnNoZWxsbWFnYXppbmUuY29tLzIwMTQvMDkvMjUvZWFzaWx5LWRlZmluaW5nLWVudW1zLXN0cnVjdHMtYW5kLXdpbjMyLWZ1bmN0aW9ucy1pbi1tZW1vcnkvCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnKV0KICAgICAgICBbT2JqZWN0W11dCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJ2xvY2FsaG9zdCcKICAgICkKCiAgICAjIGV4dHJhY3QgdGhlIGNvbXB1dGVyIG5hbWUgZnJvbSB3aGF0ZXZlciBvYmplY3Qgd2FzIHBhc3NlZCBvbiB0aGUgcGlwZWxpbmUKICAgICRDb21wdXRlciA9ICRDb21wdXRlck5hbWUgfCBHZXQtTmFtZUZpZWxkCgogICAgIyBhcmd1bWVudHMgZm9yIE5ldFNoYXJlRW51bQogICAgJFF1ZXJ5TGV2ZWwgPSAxCiAgICAkUHRySW5mbyA9IFtJbnRQdHJdOjpaZXJvCiAgICAkRW50cmllc1JlYWQgPSAwCiAgICAkVG90YWxSZWFkID0gMAogICAgJFJlc3VtZUhhbmRsZSA9IDAKCiAgICAjIGdldCB0aGUgc2hhcmUgaW5mb3JtYXRpb24KICAgICRSZXN1bHQgPSAkTmV0YXBpMzI6Ok5ldFNoYXJlRW51bSgkQ29tcHV0ZXIsICRRdWVyeUxldmVsLCBbcmVmXSRQdHJJbmZvLCAtMSwgW3JlZl0kRW50cmllc1JlYWQsIFtyZWZdJFRvdGFsUmVhZCwgW3JlZl0kUmVzdW1lSGFuZGxlKQoKICAgICMgTG9jYXRlIHRoZSBvZmZzZXQgb2YgdGhlIGluaXRpYWwgaW50UHRyCiAgICAkT2Zmc2V0ID0gJFB0ckluZm8uVG9JbnQ2NCgpCgogICAgV3JpdGUtRGVidWcgIkdldC1OZXRTaGFyZSByZXN1bHQgZm9yICRDb21wdXRlciA6ICRSZXN1bHQiCgogICAgIyAwID0gc3VjY2VzcwogICAgaWYgKCgkUmVzdWx0IC1lcSAwKSAtYW5kICgkT2Zmc2V0IC1ndCAwKSkgewoKICAgICAgICAjIFdvcmsgb3V0IGhvdyBtdXRjaCB0byBpbmNyZW1lbnQgdGhlIHBvaW50ZXIgYnkgZmluZGluZyBvdXQgdGhlIHNpemUgb2YgdGhlIHN0cnVjdHVyZQogICAgICAgICRJbmNyZW1lbnQgPSAkU0hBUkVfSU5GT18xOjpHZXRTaXplKCkKCiAgICAgICAgIyBwYXJzZSBhbGwgdGhlIHJlc3VsdCBzdHJ1Y3R1cmVzCiAgICAgICAgZm9yICgkaSA9IDA7ICgkaSAtbHQgJEVudHJpZXNSZWFkKTsgJGkrKykgewogICAgICAgICAgICAjIGNyZWF0ZSBhIG5ldyBpbnQgcHRyIGF0IHRoZSBnaXZlbiBvZmZzZXQgYW5kIGNhc3QKICAgICAgICAgICAgIyAgIHRoZSBwb2ludGVyIGFzIG91ciByZXN1bHQgc3RydWN0dXJlCiAgICAgICAgICAgICROZXdJbnRQdHIgPSBOZXctT2JqZWN0IFN5c3RlbS5JbnRwdHIgLUFyZ3VtZW50TGlzdCAkT2Zmc2V0CiAgICAgICAgICAgICRJbmZvID0gJE5ld0ludFB0ciAtYXMgJFNIQVJFX0lORk9fMQoKICAgICAgICAgICAgIyByZXR1cm4gYWxsIHRoZSBzZWN0aW9ucyBvZiB0aGUgc3RydWN0dXJlCiAgICAgICAgICAgICRTaGFyZXMgPSAkSW5mbyB8IFNlbGVjdC1PYmplY3QgKgogICAgICAgICAgICAkU2hhcmVzIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgICAgICRPZmZzZXQgPSAkTmV3SW50UHRyLlRvSW50NjQoKQogICAgICAgICAgICAkT2Zmc2V0ICs9ICRJbmNyZW1lbnQKICAgICAgICAgICAgJFNoYXJlcwogICAgICAgIH0KCiAgICAgICAgIyBmcmVlIHVwIHRoZSByZXN1bHQgYnVmZmVyCiAgICAgICAgJE51bGwgPSAkTmV0YXBpMzI6Ok5ldEFwaUJ1ZmZlckZyZWUoJFB0ckluZm8pCiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgc3dpdGNoICgkUmVzdWx0KSB7CiAgICAgICAgICAgICg1KSAgICAgICAgICAge1dyaXRlLURlYnVnICdUaGUgdXNlciBkb2VzIG5vdCBoYXZlIGFjY2VzcyB0byB0aGUgcmVxdWVzdGVkIGluZm9ybWF0aW9uLid9CiAgICAgICAgICAgICgxMjQpICAgICAgICAge1dyaXRlLURlYnVnICdUaGUgdmFsdWUgc3BlY2lmaWVkIGZvciB0aGUgbGV2ZWwgcGFyYW1ldGVyIGlzIG5vdCB2YWxpZC4nfQogICAgICAgICAgICAoODcpICAgICAgICAgIHtXcml0ZS1EZWJ1ZyAnVGhlIHNwZWNpZmllZCBwYXJhbWV0ZXIgaXMgbm90IHZhbGlkLid9CiAgICAgICAgICAgICgyMzQpICAgICAgICAge1dyaXRlLURlYnVnICdNb3JlIGVudHJpZXMgYXJlIGF2YWlsYWJsZS4gU3BlY2lmeSBhIGxhcmdlIGVub3VnaCBidWZmZXIgdG8gcmVjZWl2ZSBhbGwgZW50cmllcy4nfQogICAgICAgICAgICAoOCkgICAgICAgICAgIHtXcml0ZS1EZWJ1ZyAnSW5zdWZmaWNpZW50IG1lbW9yeSBpcyBhdmFpbGFibGUuJ30KICAgICAgICAgICAgKDIzMTIpICAgICAgICB7V3JpdGUtRGVidWcgJ0Egc2Vzc2lvbiBkb2VzIG5vdCBleGlzdCB3aXRoIHRoZSBjb21wdXRlciBuYW1lLid9CiAgICAgICAgICAgICgyMzUxKSAgICAgICAge1dyaXRlLURlYnVnICdUaGUgY29tcHV0ZXIgbmFtZSBpcyBub3QgdmFsaWQuJ30KICAgICAgICAgICAgKDIyMjEpICAgICAgICB7V3JpdGUtRGVidWcgJ1VzZXJuYW1lIG5vdCBmb3VuZC4nfQogICAgICAgICAgICAoNTMpICAgICAgICAgIHtXcml0ZS1EZWJ1ZyAnSG9zdG5hbWUgY291bGQgbm90IGJlIGZvdW5kJ30KICAgICAgICB9CiAgICB9Cn0KCgpmaWx0ZXIgR2V0LU5ldExvZ2dlZG9uIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBUaGlzIGZ1bmN0aW9uIHdpbGwgZXhlY3V0ZSB0aGUgTmV0V2tzdGFVc2VyRW51bSBXaW4zMkFQSSBjYWxsIHRvIHF1ZXJ5CiAgICAgICAgYSBnaXZlbiBob3N0IGZvciBhY3RpdmVseSBsb2dnZWQgb24gdXNlcnMuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlck5hbWUKCiAgICAgICAgVGhlIGhvc3RuYW1lIHRvIHF1ZXJ5IGZvciBsb2dnZWQgb24gdXNlcnMuCgogICAgLk9VVFBVVFMKCiAgICAgICAgV0tTVEFfVVNFUl9JTkZPXzEgc3RydWN0dXJlLiBBIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBXS1NUQV9VU0VSX0lORk9fMQogICAgICAgIHJlc3VsdCBzdHJ1Y3R1cmUgd2hpY2ggaW5jbHVkZXMgdGhlIHVzZXJuYW1lIGFuZCBkb21haW4gb2YgbG9nZ2VkIG9uIHVzZXJzLAogICAgICAgIHdpdGggdGhlIENvbXB1dGVyTmFtZSBhZGRlZC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRMb2dnZWRvbgoKICAgICAgICBSZXR1cm5zIHVzZXJzIGFjdGl2ZWx5IGxvZ2dlZCBvbnRvIHRoZSBsb2NhbCBob3N0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldExvZ2dlZG9uIC1Db21wdXRlck5hbWUgc3Fsc2VydmVyCgogICAgICAgIFJldHVybnMgdXNlcnMgYWN0aXZlbHkgbG9nZ2VkIG9udG8gdGhlICdzcWxzZXJ2ZXInIGhvc3QuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0Q29tcHV0ZXIgfCBHZXQtTmV0TG9nZ2Vkb24KCiAgICAgICAgUmV0dXJucyBhbGwgbG9nZ2VkIG9uIHVzZXJzZSBmb3IgYWxsIGNvbXB1dGVycyBpbiB0aGUgZG9tYWluLgoKICAgIC5MSU5LCgogICAgICAgIGh0dHA6Ly93d3cucG93ZXJzaGVsbG1hZ2F6aW5lLmNvbS8yMDE0LzA5LzI1L2Vhc2lseS1kZWZpbmluZy1lbnVtcy1zdHJ1Y3RzLWFuZC13aW4zMi1mdW5jdGlvbnMtaW4tbWVtb3J5LwojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW09iamVjdFtdXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnCiAgICApCgogICAgIyBleHRyYWN0IHRoZSBjb21wdXRlciBuYW1lIGZyb20gd2hhdGV2ZXIgb2JqZWN0IHdhcyBwYXNzZWQgb24gdGhlIHBpcGVsaW5lCiAgICAkQ29tcHV0ZXIgPSAkQ29tcHV0ZXJOYW1lIHwgR2V0LU5hbWVGaWVsZAoKICAgICMgRGVjbGFyZSB0aGUgcmVmZXJlbmNlIHZhcmlhYmxlcwogICAgJFF1ZXJ5TGV2ZWwgPSAxCiAgICAkUHRySW5mbyA9IFtJbnRQdHJdOjpaZXJvCiAgICAkRW50cmllc1JlYWQgPSAwCiAgICAkVG90YWxSZWFkID0gMAogICAgJFJlc3VtZUhhbmRsZSA9IDAKCiAgICAjIGdldCBsb2dnZWQgb24gdXNlciBpbmZvcm1hdGlvbgogICAgJFJlc3VsdCA9ICROZXRhcGkzMjo6TmV0V2tzdGFVc2VyRW51bSgkQ29tcHV0ZXIsICRRdWVyeUxldmVsLCBbcmVmXSRQdHJJbmZvLCAtMSwgW3JlZl0kRW50cmllc1JlYWQsIFtyZWZdJFRvdGFsUmVhZCwgW3JlZl0kUmVzdW1lSGFuZGxlKQoKICAgICMgTG9jYXRlIHRoZSBvZmZzZXQgb2YgdGhlIGluaXRpYWwgaW50UHRyCiAgICAkT2Zmc2V0ID0gJFB0ckluZm8uVG9JbnQ2NCgpCgogICAgV3JpdGUtRGVidWcgIkdldC1OZXRMb2dnZWRvbiByZXN1bHQgZm9yICRDb21wdXRlciA6ICRSZXN1bHQiCgogICAgIyAwID0gc3VjY2VzcwogICAgaWYgKCgkUmVzdWx0IC1lcSAwKSAtYW5kICgkT2Zmc2V0IC1ndCAwKSkgewoKICAgICAgICAjIFdvcmsgb3V0IGhvdyBtdXRjaCB0byBpbmNyZW1lbnQgdGhlIHBvaW50ZXIgYnkgZmluZGluZyBvdXQgdGhlIHNpemUgb2YgdGhlIHN0cnVjdHVyZQogICAgICAgICRJbmNyZW1lbnQgPSAkV0tTVEFfVVNFUl9JTkZPXzE6OkdldFNpemUoKQoKICAgICAgICAjIHBhcnNlIGFsbCB0aGUgcmVzdWx0IHN0cnVjdHVyZXMKICAgICAgICBmb3IgKCRpID0gMDsgKCRpIC1sdCAkRW50cmllc1JlYWQpOyAkaSsrKSB7CiAgICAgICAgICAgICMgY3JlYXRlIGEgbmV3IGludCBwdHIgYXQgdGhlIGdpdmVuIG9mZnNldCBhbmQgY2FzdAogICAgICAgICAgICAjICAgdGhlIHBvaW50ZXIgYXMgb3VyIHJlc3VsdCBzdHJ1Y3R1cmUKICAgICAgICAgICAgJE5ld0ludFB0ciA9IE5ldy1PYmplY3QgU3lzdGVtLkludHB0ciAtQXJndW1lbnRMaXN0ICRPZmZzZXQKICAgICAgICAgICAgJEluZm8gPSAkTmV3SW50UHRyIC1hcyAkV0tTVEFfVVNFUl9JTkZPXzEKCiAgICAgICAgICAgICMgcmV0dXJuIGFsbCB0aGUgc2VjdGlvbnMgb2YgdGhlIHN0cnVjdHVyZQogICAgICAgICAgICAkTG9nZ2VkT24gPSAkSW5mbyB8IFNlbGVjdC1PYmplY3QgKgogICAgICAgICAgICAkTG9nZ2VkT24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgJE9mZnNldCA9ICROZXdJbnRQdHIuVG9JbnQ2NCgpCiAgICAgICAgICAgICRPZmZzZXQgKz0gJEluY3JlbWVudAogICAgICAgICAgICAkTG9nZ2VkT24KICAgICAgICB9CgogICAgICAgICMgZnJlZSB1cCB0aGUgcmVzdWx0IGJ1ZmZlcgogICAgICAgICROdWxsID0gJE5ldGFwaTMyOjpOZXRBcGlCdWZmZXJGcmVlKCRQdHJJbmZvKQogICAgfQogICAgZWxzZQogICAgewogICAgICAgIHN3aXRjaCAoJFJlc3VsdCkgewogICAgICAgICAgICAoNSkgICAgICAgICAgIHtXcml0ZS1EZWJ1ZyAnVGhlIHVzZXIgZG9lcyBub3QgaGF2ZSBhY2Nlc3MgdG8gdGhlIHJlcXVlc3RlZCBpbmZvcm1hdGlvbi4nfQogICAgICAgICAgICAoMTI0KSAgICAgICAgIHtXcml0ZS1EZWJ1ZyAnVGhlIHZhbHVlIHNwZWNpZmllZCBmb3IgdGhlIGxldmVsIHBhcmFtZXRlciBpcyBub3QgdmFsaWQuJ30KICAgICAgICAgICAgKDg3KSAgICAgICAgICB7V3JpdGUtRGVidWcgJ1RoZSBzcGVjaWZpZWQgcGFyYW1ldGVyIGlzIG5vdCB2YWxpZC4nfQogICAgICAgICAgICAoMjM0KSAgICAgICAgIHtXcml0ZS1EZWJ1ZyAnTW9yZSBlbnRyaWVzIGFyZSBhdmFpbGFibGUuIFNwZWNpZnkgYSBsYXJnZSBlbm91Z2ggYnVmZmVyIHRvIHJlY2VpdmUgYWxsIGVudHJpZXMuJ30KICAgICAgICAgICAgKDgpICAgICAgICAgICB7V3JpdGUtRGVidWcgJ0luc3VmZmljaWVudCBtZW1vcnkgaXMgYXZhaWxhYmxlLid9CiAgICAgICAgICAgICgyMzEyKSAgICAgICAge1dyaXRlLURlYnVnICdBIHNlc3Npb24gZG9lcyBub3QgZXhpc3Qgd2l0aCB0aGUgY29tcHV0ZXIgbmFtZS4nfQogICAgICAgICAgICAoMjM1MSkgICAgICAgIHtXcml0ZS1EZWJ1ZyAnVGhlIGNvbXB1dGVyIG5hbWUgaXMgbm90IHZhbGlkLid9CiAgICAgICAgICAgICgyMjIxKSAgICAgICAge1dyaXRlLURlYnVnICdVc2VybmFtZSBub3QgZm91bmQuJ30KICAgICAgICAgICAgKDUzKSAgICAgICAgICB7V3JpdGUtRGVidWcgJ0hvc3RuYW1lIGNvdWxkIG5vdCBiZSBmb3VuZCd9CiAgICAgICAgfQogICAgfQp9CgoKZmlsdGVyIEdldC1OZXRTZXNzaW9uIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBUaGlzIGZ1bmN0aW9uIHdpbGwgZXhlY3V0ZSB0aGUgTmV0U2Vzc2lvbkVudW0gV2luMzJBUEkgY2FsbCB0byBxdWVyeQogICAgICAgIGEgZ2l2ZW4gaG9zdCBmb3IgYWN0aXZlIHNlc3Npb25zIG9uIHRoZSBob3N0LgogICAgICAgIEhlYXZpbHkgYWRhcHRlZCBmcm9tIGR1bmVkaW5pdGUncyBwb3N0IG9uIHN0YWNrb3ZlcmZsb3cgKHNlZSBMSU5LIGJlbG93KQoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIFRoZSBDb21wdXRlck5hbWUgdG8gcXVlcnkgZm9yIGFjdGl2ZSBzZXNzaW9ucy4KCiAgICAuUEFSQU1FVEVSIFVzZXJOYW1lCgogICAgICAgIFRoZSB1c2VyIG5hbWUgdG8gZmlsdGVyIGZvciBhY3RpdmUgc2Vzc2lvbnMuCgogICAgLk9VVFBVVFMKCiAgICAgICAgU0VTU0lPTl9JTkZPXzEwIHN0cnVjdHVyZS4gQSByZXByZXNlbnRhdGlvbiBvZiB0aGUgU0VTU0lPTl9JTkZPXzEwCiAgICAgICAgcmVzdWx0IHN0cnVjdHVyZSB3aGljaCBpbmNsdWRlcyB0aGUgaG9zdCBhbmQgdXNlcm5hbWUgYXNzb2NpYXRlZAogICAgICAgIHdpdGggYWN0aXZlIHNlc3Npb25zLCB3aXRoIHRoZSBDb21wdXRlck5hbWUgYWRkZWQuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0U2Vzc2lvbgoKICAgICAgICBSZXR1cm5zIGFjdGl2ZSBzZXNzaW9ucyBvbiB0aGUgbG9jYWwgaG9zdC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRTZXNzaW9uIC1Db21wdXRlck5hbWUgc3Fsc2VydmVyCgogICAgICAgIFJldHVybnMgYWN0aXZlIHNlc3Npb25zIG9uIHRoZSAnc3Fsc2VydmVyJyBob3N0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldERvbWFpbkNvbnRyb2xsZXIgfCBHZXQtTmV0U2Vzc2lvbgoKICAgICAgICBSZXR1cm5zIGFjdGl2ZSBzZXNzaW9ucyBvbiBhbGwgZG9tYWluIGNvbnRyb2xsZXJzLgoKICAgIC5MSU5LCgogICAgICAgIGh0dHA6Ly93d3cucG93ZXJzaGVsbG1hZ2F6aW5lLmNvbS8yMDE0LzA5LzI1L2Vhc2lseS1kZWZpbmluZy1lbnVtcy1zdHJ1Y3RzLWFuZC13aW4zMi1mdW5jdGlvbnMtaW4tbWVtb3J5LwojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW09iamVjdFtdXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyTmFtZSA9ICcnCiAgICApCgogICAgIyBleHRyYWN0IHRoZSBjb21wdXRlciBuYW1lIGZyb20gd2hhdGV2ZXIgb2JqZWN0IHdhcyBwYXNzZWQgb24gdGhlIHBpcGVsaW5lCiAgICAkQ29tcHV0ZXIgPSAkQ29tcHV0ZXJOYW1lIHwgR2V0LU5hbWVGaWVsZAoKICAgICMgYXJndW1lbnRzIGZvciBOZXRTZXNzaW9uRW51bQogICAgJFF1ZXJ5TGV2ZWwgPSAxMAogICAgJFB0ckluZm8gPSBbSW50UHRyXTo6WmVybwogICAgJEVudHJpZXNSZWFkID0gMAogICAgJFRvdGFsUmVhZCA9IDAKICAgICRSZXN1bWVIYW5kbGUgPSAwCgogICAgIyBnZXQgc2Vzc2lvbiBpbmZvcm1hdGlvbgogICAgJFJlc3VsdCA9ICROZXRhcGkzMjo6TmV0U2Vzc2lvbkVudW0oJENvbXB1dGVyLCAnJywgJFVzZXJOYW1lLCAkUXVlcnlMZXZlbCwgW3JlZl0kUHRySW5mbywgLTEsIFtyZWZdJEVudHJpZXNSZWFkLCBbcmVmXSRUb3RhbFJlYWQsIFtyZWZdJFJlc3VtZUhhbmRsZSkKCiAgICAjIExvY2F0ZSB0aGUgb2Zmc2V0IG9mIHRoZSBpbml0aWFsIGludFB0cgogICAgJE9mZnNldCA9ICRQdHJJbmZvLlRvSW50NjQoKQoKICAgIFdyaXRlLURlYnVnICJHZXQtTmV0U2Vzc2lvbiByZXN1bHQgZm9yICRDb21wdXRlciA6ICRSZXN1bHQiCgogICAgIyAwID0gc3VjY2VzcwogICAgaWYgKCgkUmVzdWx0IC1lcSAwKSAtYW5kICgkT2Zmc2V0IC1ndCAwKSkgewoKICAgICAgICAjIFdvcmsgb3V0IGhvdyBtdXRjaCB0byBpbmNyZW1lbnQgdGhlIHBvaW50ZXIgYnkgZmluZGluZyBvdXQgdGhlIHNpemUgb2YgdGhlIHN0cnVjdHVyZQogICAgICAgICRJbmNyZW1lbnQgPSAkU0VTU0lPTl9JTkZPXzEwOjpHZXRTaXplKCkKCiAgICAgICAgIyBwYXJzZSBhbGwgdGhlIHJlc3VsdCBzdHJ1Y3R1cmVzCiAgICAgICAgZm9yICgkaSA9IDA7ICgkaSAtbHQgJEVudHJpZXNSZWFkKTsgJGkrKykgewogICAgICAgICAgICAjIGNyZWF0ZSBhIG5ldyBpbnQgcHRyIGF0IHRoZSBnaXZlbiBvZmZzZXQgYW5kIGNhc3QKICAgICAgICAgICAgIyB0aGUgcG9pbnRlciBhcyBvdXIgcmVzdWx0IHN0cnVjdHVyZQogICAgICAgICAgICAkTmV3SW50UHRyID0gTmV3LU9iamVjdCBTeXN0ZW0uSW50cHRyIC1Bcmd1bWVudExpc3QgJE9mZnNldAogICAgICAgICAgICAkSW5mbyA9ICROZXdJbnRQdHIgLWFzICRTRVNTSU9OX0lORk9fMTAKCiAgICAgICAgICAgICMgcmV0dXJuIGFsbCB0aGUgc2VjdGlvbnMgb2YgdGhlIHN0cnVjdHVyZQogICAgICAgICAgICAkU2Vzc2lvbnMgPSAkSW5mbyB8IFNlbGVjdC1PYmplY3QgKgogICAgICAgICAgICAkU2Vzc2lvbnMgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgJE9mZnNldCA9ICROZXdJbnRQdHIuVG9JbnQ2NCgpCiAgICAgICAgICAgICRPZmZzZXQgKz0gJEluY3JlbWVudAogICAgICAgICAgICAkU2Vzc2lvbnMKICAgICAgICB9CiAgICAgICAgIyBmcmVlIHVwIHRoZSByZXN1bHQgYnVmZmVyCiAgICAgICAgJE51bGwgPSAkTmV0YXBpMzI6Ok5ldEFwaUJ1ZmZlckZyZWUoJFB0ckluZm8pCiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgc3dpdGNoICgkUmVzdWx0KSB7CiAgICAgICAgICAgICg1KSAgICAgICAgICAge1dyaXRlLURlYnVnICdUaGUgdXNlciBkb2VzIG5vdCBoYXZlIGFjY2VzcyB0byB0aGUgcmVxdWVzdGVkIGluZm9ybWF0aW9uLid9CiAgICAgICAgICAgICgxMjQpICAgICAgICAge1dyaXRlLURlYnVnICdUaGUgdmFsdWUgc3BlY2lmaWVkIGZvciB0aGUgbGV2ZWwgcGFyYW1ldGVyIGlzIG5vdCB2YWxpZC4nfQogICAgICAgICAgICAoODcpICAgICAgICAgIHtXcml0ZS1EZWJ1ZyAnVGhlIHNwZWNpZmllZCBwYXJhbWV0ZXIgaXMgbm90IHZhbGlkLid9CiAgICAgICAgICAgICgyMzQpICAgICAgICAge1dyaXRlLURlYnVnICdNb3JlIGVudHJpZXMgYXJlIGF2YWlsYWJsZS4gU3BlY2lmeSBhIGxhcmdlIGVub3VnaCBidWZmZXIgdG8gcmVjZWl2ZSBhbGwgZW50cmllcy4nfQogICAgICAgICAgICAoOCkgICAgICAgICAgIHtXcml0ZS1EZWJ1ZyAnSW5zdWZmaWNpZW50IG1lbW9yeSBpcyBhdmFpbGFibGUuJ30KICAgICAgICAgICAgKDIzMTIpICAgICAgICB7V3JpdGUtRGVidWcgJ0Egc2Vzc2lvbiBkb2VzIG5vdCBleGlzdCB3aXRoIHRoZSBjb21wdXRlciBuYW1lLid9CiAgICAgICAgICAgICgyMzUxKSAgICAgICAge1dyaXRlLURlYnVnICdUaGUgY29tcHV0ZXIgbmFtZSBpcyBub3QgdmFsaWQuJ30KICAgICAgICAgICAgKDIyMjEpICAgICAgICB7V3JpdGUtRGVidWcgJ1VzZXJuYW1lIG5vdCBmb3VuZC4nfQogICAgICAgICAgICAoNTMpICAgICAgICAgIHtXcml0ZS1EZWJ1ZyAnSG9zdG5hbWUgY291bGQgbm90IGJlIGZvdW5kJ30KICAgICAgICB9CiAgICB9Cn0KCgpmaWx0ZXIgR2V0LU5ldFJEUFNlc3Npb24gewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFRoaXMgZnVuY3Rpb24gd2lsbCBleGVjdXRlIHRoZSBXVFNFbnVtZXJhdGVTZXNzaW9uc0V4IGFuZCAKICAgICAgICBXVFNRdWVyeVNlc3Npb25JbmZvcm1hdGlvbiBXaW4zMkFQSSBjYWxscyB0byBxdWVyeSBhIGdpdmVuCiAgICAgICAgUkRQIHJlbW90ZSBzZXJ2aWNlIGZvciBhY3RpdmUgc2Vzc2lvbnMgYW5kIG9yaWdpbmF0aW5nIElQcy4KICAgICAgICBUaGlzIGlzIGEgcmVwbGFjZW1lbnQgZm9yIHF3aW5zdGEuCgogICAgICAgIE5vdGU6IG9ubHkgbWVtYmVycyBvZiB0aGUgQWRtaW5pc3RyYXRvcnMgb3IgQWNjb3VudCBPcGVyYXRvcnMgbG9jYWwgZ3JvdXAKICAgICAgICBjYW4gc3VjY2Vzc2Z1bGx5IGV4ZWN1dGUgdGhpcyBmdW5jdGlvbmFsaXR5IG9uIGEgcmVtb3RlIHRhcmdldC4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBUaGUgaG9zdG5hbWUgdG8gcXVlcnkgZm9yIGFjdGl2ZSBSRFAgc2Vzc2lvbnMuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0UkRQU2Vzc2lvbgoKICAgICAgICBSZXR1cm5zIGFjdGl2ZSBSRFAvdGVybWluYWwgc2Vzc2lvbnMgb24gdGhlIGxvY2FsIGhvc3QuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0UkRQU2Vzc2lvbiAtQ29tcHV0ZXJOYW1lICJzcWxzZXJ2ZXIiCgogICAgICAgIFJldHVybnMgYWN0aXZlIFJEUC90ZXJtaW5hbCBzZXNzaW9ucyBvbiB0aGUgJ3NxbHNlcnZlcicgaG9zdC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXREb21haW5Db250cm9sbGVyIHwgR2V0LU5ldFJEUFNlc3Npb24KCiAgICAgICAgUmV0dXJucyBhY3RpdmUgUkRQL3Rlcm1pbmFsIHNlc3Npb25zIG9uIGFsbCBkb21haW4gY29udHJvbGxlcnMuCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnKV0KICAgICAgICBbT2JqZWN0W11dCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJ2xvY2FsaG9zdCcKICAgICkKCiAgICAjIGV4dHJhY3QgdGhlIGNvbXB1dGVyIG5hbWUgZnJvbSB3aGF0ZXZlciBvYmplY3Qgd2FzIHBhc3NlZCBvbiB0aGUgcGlwZWxpbmUKICAgICRDb21wdXRlciA9ICRDb21wdXRlck5hbWUgfCBHZXQtTmFtZUZpZWxkCgogICAgIyBvcGVuIHVwIGEgaGFuZGxlIHRvIHRoZSBSZW1vdGUgRGVza3RvcCBTZXNzaW9uIGhvc3QKICAgICRIYW5kbGUgPSAkV3RzYXBpMzI6OldUU09wZW5TZXJ2ZXJFeCgkQ29tcHV0ZXIpCgogICAgIyBpZiB3ZSBnZXQgYSBub24temVybyBoYW5kbGUgYmFjaywgZXZlcnl0aGluZyB3YXMgc3VjY2Vzc2Z1bAogICAgaWYgKCRIYW5kbGUgLW5lIDApIHsKCiAgICAgICAgV3JpdGUtRGVidWcgIldUU09wZW5TZXJ2ZXJFeCBoYW5kbGU6ICRIYW5kbGUiCgogICAgICAgICMgYXJndW1lbnRzIGZvciBXVFNFbnVtZXJhdGVTZXNzaW9uc0V4CiAgICAgICAgJHBwU2Vzc2lvbkluZm8gPSBbSW50UHRyXTo6WmVybwogICAgICAgICRwQ291bnQgPSAwCiAgICAgICAgCiAgICAgICAgIyBnZXQgaW5mb3JtYXRpb24gb24gYWxsIGN1cnJlbnQgc2Vzc2lvbnMKICAgICAgICAkUmVzdWx0ID0gJFd0c2FwaTMyOjpXVFNFbnVtZXJhdGVTZXNzaW9uc0V4KCRIYW5kbGUsIFtyZWZdMSwgMCwgW3JlZl0kcHBTZXNzaW9uSW5mbywgW3JlZl0kcENvdW50KQoKICAgICAgICAjIExvY2F0ZSB0aGUgb2Zmc2V0IG9mIHRoZSBpbml0aWFsIGludFB0cgogICAgICAgICRPZmZzZXQgPSAkcHBTZXNzaW9uSW5mby5Ub0ludDY0KCkKCiAgICAgICAgV3JpdGUtRGVidWcgIldUU0VudW1lcmF0ZVNlc3Npb25zRXggcmVzdWx0OiAkUmVzdWx0IgogICAgICAgIFdyaXRlLURlYnVnICJwQ291bnQ6ICRwQ291bnQiCgogICAgICAgIGlmICgoJFJlc3VsdCAtbmUgMCkgLWFuZCAoJE9mZnNldCAtZ3QgMCkpIHsKCiAgICAgICAgICAgICMgV29yayBvdXQgaG93IG11dGNoIHRvIGluY3JlbWVudCB0aGUgcG9pbnRlciBieSBmaW5kaW5nIG91dCB0aGUgc2l6ZSBvZiB0aGUgc3RydWN0dXJlCiAgICAgICAgICAgICRJbmNyZW1lbnQgPSAkV1RTX1NFU1NJT05fSU5GT18xOjpHZXRTaXplKCkKCiAgICAgICAgICAgICMgcGFyc2UgYWxsIHRoZSByZXN1bHQgc3RydWN0dXJlcwogICAgICAgICAgICBmb3IgKCRpID0gMDsgKCRpIC1sdCAkcENvdW50KTsgJGkrKykgewogCiAgICAgICAgICAgICAgICAjIGNyZWF0ZSBhIG5ldyBpbnQgcHRyIGF0IHRoZSBnaXZlbiBvZmZzZXQgYW5kIGNhc3QKICAgICAgICAgICAgICAgICMgICB0aGUgcG9pbnRlciBhcyBvdXIgcmVzdWx0IHN0cnVjdHVyZQogICAgICAgICAgICAgICAgJE5ld0ludFB0ciA9IE5ldy1PYmplY3QgU3lzdGVtLkludHB0ciAtQXJndW1lbnRMaXN0ICRPZmZzZXQKICAgICAgICAgICAgICAgICRJbmZvID0gJE5ld0ludFB0ciAtYXMgJFdUU19TRVNTSU9OX0lORk9fMQoKICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uID0gTmV3LU9iamVjdCBQU09iamVjdAoKICAgICAgICAgICAgICAgIGlmICgkSW5mby5wSG9zdE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAkUkRQU2Vzc2lvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRJbmZvLnBIb3N0TmFtZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgIyBpZiBubyBob3N0bmFtZSByZXR1cm5lZCwgdXNlIHRoZSBzcGVjaWZpZWQgaG9zdG5hbWUKICAgICAgICAgICAgICAgICAgICAkUkRQU2Vzc2lvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1Nlc3Npb25OYW1lJyAkSW5mby5wU2Vzc2lvbk5hbWUKCiAgICAgICAgICAgICAgICBpZiAoJCgtbm90ICRJbmZvLnBEb21haW5OYW1lKSAtb3IgKCRJbmZvLnBEb21haW5OYW1lIC1lcSAnJykpIHsKICAgICAgICAgICAgICAgICAgICAjIGlmIGEgZG9tYWluIGlzbid0IHJldHVybmVkIGp1c3QgdXNlIHRoZSB1c2VybmFtZQogICAgICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAiJCgkSW5mby5wVXNlck5hbWUpIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJFJEUFNlc3Npb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlck5hbWUnICIkKCRJbmZvLnBEb21haW5OYW1lKVwkKCRJbmZvLnBVc2VyTmFtZSkiCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJFJEUFNlc3Npb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSUQnICRJbmZvLlNlc3Npb25JRAogICAgICAgICAgICAgICAgJFJEUFNlc3Npb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU3RhdGUnICRJbmZvLlN0YXRlCgogICAgICAgICAgICAgICAgJHBwQnVmZmVyID0gW0ludFB0cl06Olplcm8KICAgICAgICAgICAgICAgICRwQnl0ZXNSZXR1cm5lZCA9IDAKCiAgICAgICAgICAgICAgICAjIHF1ZXJ5IGZvciB0aGUgc291cmNlIGNsaWVudCBJUCB3aXRoIFdUU1F1ZXJ5U2Vzc2lvbkluZm9ybWF0aW9uCiAgICAgICAgICAgICAgICAjICAgaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9hYTM4Mzg2MSh2PXZzLjg1KS5hc3B4CiAgICAgICAgICAgICAgICAkUmVzdWx0MiA9ICRXdHNhcGkzMjo6V1RTUXVlcnlTZXNzaW9uSW5mb3JtYXRpb24oJEhhbmRsZSwgJEluZm8uU2Vzc2lvbklELCAxNCwgW3JlZl0kcHBCdWZmZXIsIFtyZWZdJHBCeXRlc1JldHVybmVkKQoKICAgICAgICAgICAgICAgICRPZmZzZXQyID0gJHBwQnVmZmVyLlRvSW50NjQoKQogICAgICAgICAgICAgICAgJE5ld0ludFB0cjIgPSBOZXctT2JqZWN0IFN5c3RlbS5JbnRwdHIgLUFyZ3VtZW50TGlzdCAkT2Zmc2V0MgogICAgICAgICAgICAgICAgJEluZm8yID0gJE5ld0ludFB0cjIgLWFzICRXVFNfQ0xJRU5UX0FERFJFU1MKCiAgICAgICAgICAgICAgICAkU291cmNlSVAgPSAkSW5mbzIuQWRkcmVzcyAgICAgICAKICAgICAgICAgICAgICAgIGlmKCRTb3VyY2VJUFsyXSAtbmUgMCkgewogICAgICAgICAgICAgICAgICAgICRTb3VyY2VJUCA9IFtTdHJpbmddJFNvdXJjZUlQWzJdKyIuIitbU3RyaW5nXSRTb3VyY2VJUFszXSsiLiIrW1N0cmluZ10kU291cmNlSVBbNF0rIi4iK1tTdHJpbmddJFNvdXJjZUlQWzVdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkU291cmNlSVAgPSAkTnVsbAogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NvdXJjZUlQJyAkU291cmNlSVAKICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uCgogICAgICAgICAgICAgICAgIyBmcmVlIHVwIHRoZSBtZW1vcnkgYnVmZmVyCiAgICAgICAgICAgICAgICAkTnVsbCA9ICRXdHNhcGkzMjo6V1RTRnJlZU1lbW9yeSgkcHBCdWZmZXIpCgogICAgICAgICAgICAgICAgJE9mZnNldCArPSAkSW5jcmVtZW50CiAgICAgICAgICAgIH0KICAgICAgICAgICAgIyBmcmVlIHVwIHRoZSBtZW1vcnkgcmVzdWx0IGJ1ZmZlcgogICAgICAgICAgICAkTnVsbCA9ICRXdHNhcGkzMjo6V1RTRnJlZU1lbW9yeUV4KDIsICRwcFNlc3Npb25JbmZvLCAkcENvdW50KQogICAgICAgIH0KICAgICAgICAjIENsb3NlIG9mZiB0aGUgc2VydmljZSBoYW5kbGUKICAgICAgICAkTnVsbCA9ICRXdHNhcGkzMjo6V1RTQ2xvc2VTZXJ2ZXIoJEhhbmRsZSkKICAgIH0KICAgIGVsc2UgewogICAgICAgICMgb3RoZXJ3aXNlIGl0IGZhaWxlZCAtIGdldCB0aGUgbGFzdCBlcnJvcgogICAgICAgICMgICBlcnJvciBjb2RlcyAtIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS93aW5kb3dzL2Rlc2t0b3AvbXM2ODEzODIodj12cy44NSkuYXNweAogICAgICAgICRFcnIgPSAkS2VybmVsMzI6OkdldExhc3RFcnJvcigpCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiTGFzdEVycm9yOiAkRXJyIgogICAgfQp9CgoKZmlsdGVyIEludm9rZS1DaGVja0xvY2FsQWRtaW5BY2Nlc3Mgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFRoaXMgZnVuY3Rpb24gd2lsbCB1c2UgdGhlIE9wZW5TQ01hbmFnZXJXIFdpbjMyQVBJIGNhbGwgdG8gZXN0YWJsaXNoCiAgICAgICAgYSBoYW5kbGUgdG8gdGhlIHJlbW90ZSBob3N0LiBJZiB0aGlzIHN1Y2NlZWRzLCB0aGUgY3VycmVudCB1c2VyIGNvbnRleHQKICAgICAgICBoYXMgbG9jYWwgYWRtaW5pc3RyYXRvciBhY2VzcyB0byB0aGUgdGFyZ2V0LgoKICAgICAgICBJZGVhIHN0b2xlbiBmcm9tIHRoZSBsb2NhbF9hZG1pbl9zZWFyY2hfZW51bSBwb3N0IG1vZHVsZSBpbiBNZXRhc3Bsb2l0IHdyaXR0ZW4gYnk6CiAgICAgICAgICAgICdCcmFuZG9uIE1jQ2FubiAiemVrbm94IiA8Ym1jY2FublthdF1hY2N1dmFudC5jb20+JwogICAgICAgICAgICAnVGhvbWFzIE1jQ2FydGh5ICJzbWlsaW5ncmFjY29vbiIgPHNtaWxpbmdyYWNjb29uW2F0XWdtYWlsLmNvbT4nCiAgICAgICAgICAgICdSb3ljZSBEYXZpcyAicjNkeSIgPHJkYXZpc1thdF1hY2N1dmFudC5jb20+JwoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIFRoZSBob3N0bmFtZSB0byBxdWVyeSBmb3IgYWN0aXZlIHNlc3Npb25zLgoKICAgIC5PVVRQVVRTCgogICAgICAgICRUcnVlIGlmIHRoZSBjdXJyZW50IHVzZXIgaGFzIGxvY2FsIGFkbWluIGFjY2VzcyB0byB0aGUgaG9zdG5hbWUsICRGYWxzZSBvdGhlcndpc2UKCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1DaGVja0xvY2FsQWRtaW5BY2Nlc3MgLUNvbXB1dGVyTmFtZSBzcWxzZXJ2ZXIKCiAgICAgICAgUmV0dXJucyBhY3RpdmUgc2Vzc2lvbnMgb24gdGhlIGxvY2FsIGhvc3QuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0Q29tcHV0ZXIgfCBJbnZva2UtQ2hlY2tMb2NhbEFkbWluQWNjZXNzCgogICAgICAgIFNlZXMgd2hhdCBtYWNoaW5lcyBpbiB0aGUgZG9tYWluIHRoZSBjdXJyZW50IHVzZXIgaGFzIGFjY2VzcyB0by4KCiAgICAuTElOSwoKICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vcmFwaWQ3L21ldGFzcGxvaXQtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL21vZHVsZXMvcG9zdC93aW5kb3dzL2dhdGhlci9sb2NhbF9hZG1pbl9zZWFyY2hfZW51bS5yYgogICAgICAgIGh0dHA6Ly93d3cucG93ZXJzaGVsbG1hZ2F6aW5lLmNvbS8yMDE0LzA5LzI1L2Vhc2lseS1kZWZpbmluZy1lbnVtcy1zdHJ1Y3RzLWFuZC13aW4zMi1mdW5jdGlvbnMtaW4tbWVtb3J5LwojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW09iamVjdFtdXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnCiAgICApCgogICAgIyBleHRyYWN0IHRoZSBjb21wdXRlciBuYW1lIGZyb20gd2hhdGV2ZXIgb2JqZWN0IHdhcyBwYXNzZWQgb24gdGhlIHBpcGVsaW5lCiAgICAkQ29tcHV0ZXIgPSAkQ29tcHV0ZXJOYW1lIHwgR2V0LU5hbWVGaWVsZAoKICAgICMgMHhGMDAzRiAtIFNDX01BTkFHRVJfQUxMX0FDQ0VTUwogICAgIyAgIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS93aW5kb3dzL2Rlc2t0b3AvbXM2ODU5ODEodj12cy44NSkuYXNweAogICAgJEhhbmRsZSA9ICRBZHZhcGkzMjo6T3BlblNDTWFuYWdlclcoIlxcJENvbXB1dGVyIiwgJ1NlcnZpY2VzQWN0aXZlJywgMHhGMDAzRikKCiAgICBXcml0ZS1EZWJ1ZyAiSW52b2tlLUNoZWNrTG9jYWxBZG1pbkFjY2VzcyBoYW5kbGU6ICRIYW5kbGUiCgogICAgJElzQWRtaW4gPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAkSXNBZG1pbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgoKICAgICMgaWYgd2UgZ2V0IGEgbm9uLXplcm8gaGFuZGxlIGJhY2ssIGV2ZXJ5dGhpbmcgd2FzIHN1Y2Nlc3NmdWwKICAgIGlmICgkSGFuZGxlIC1uZSAwKSB7CiAgICAgICAgIyBDbG9zZSBvZmYgdGhlIHNlcnZpY2UgaGFuZGxlCiAgICAgICAgJE51bGwgPSAkQWR2YXBpMzI6OkNsb3NlU2VydmljZUhhbmRsZSgkSGFuZGxlKQogICAgICAgICRJc0FkbWluIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzQWRtaW4nICRUcnVlCiAgICB9CiAgICBlbHNlIHsKICAgICAgICAjIG90aGVyd2lzZSBpdCBmYWlsZWQgLSBnZXQgdGhlIGxhc3QgZXJyb3IKICAgICAgICAjICAgZXJyb3IgY29kZXMgLSBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvd2luZG93cy9kZXNrdG9wL21zNjgxMzgyKHY9dnMuODUpLmFzcHgKICAgICAgICAkRXJyID0gJEtlcm5lbDMyOjpHZXRMYXN0RXJyb3IoKQogICAgICAgIFdyaXRlLURlYnVnICJJbnZva2UtQ2hlY2tMb2NhbEFkbWluQWNjZXNzIExhc3RFcnJvcjogJEVyciIKICAgICAgICAkSXNBZG1pbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJc0FkbWluJyAkRmFsc2UKICAgIH0KCiAgICAkSXNBZG1pbgp9CgoKZmlsdGVyIEdldC1TaXRlTmFtZSB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgVGhpcyBmdW5jdGlvbiB3aWxsIHVzZSB0aGUgRHNHZXRTaXRlTmFtZSBXaW4zMkFQSSBjYWxsIHRvIGxvb2sgdXAgdGhlCiAgICAgICAgbmFtZSBvZiB0aGUgc2l0ZSB3aGVyZSBhIHNwZWNpZmllZCBjb21wdXRlciByZXNpZGVzLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIFRoZSBob3N0bmFtZSB0byBsb29rIHRoZSBzaXRlIHVwIGZvciwgZGVmYXVsdCB0byBsb2NhbGhvc3QuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtU2l0ZU5hbWUgLUNvbXB1dGVyTmFtZSBXSU5ET1dTMQoKICAgICAgICBSZXR1cm5zIHRoZSBzaXRlIGZvciBXSU5ET1dTMS50ZXN0bGFiLmxvY2FsLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldENvbXB1dGVyIHwgSW52b2tlLUNoZWNrTG9jYWxBZG1pbkFjY2VzcwoKICAgICAgICBSZXR1cm5zIHRoZSBzaXRlcyBmb3IgZXZlcnkgbWFjaGluZSBpbiBBRC4KIz4KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW09iamVjdFtdXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICRFbnY6Q29tcHV0ZXJOYW1lCiAgICApCgogICAgIyBleHRyYWN0IHRoZSBjb21wdXRlciBuYW1lIGZyb20gd2hhdGV2ZXIgb2JqZWN0IHdhcyBwYXNzZWQgb24gdGhlIHBpcGVsaW5lCiAgICAkQ29tcHV0ZXIgPSAkQ29tcHV0ZXJOYW1lIHwgR2V0LU5hbWVGaWVsZAoKICAgICMgaWYgd2UgZ2V0IGFuIElQIGFkZHJlc3MsIHRyeSB0byByZXNvbHZlIHRoZSBJUCB0byBhIGhvc3RuYW1lCiAgICBpZigkQ29tcHV0ZXIgLW1hdGNoICdeKD86WzAtOV17MSwzfVwuKXszfVswLTldezEsM30kJykgewogICAgICAgICRJUEFkZHJlc3MgPSAkQ29tcHV0ZXIKICAgICAgICAkQ29tcHV0ZXIgPSBbU3lzdGVtLk5ldC5EbnNdOjpHZXRIb3N0QnlBZGRyZXNzKCRDb21wdXRlcikKICAgIH0KICAgIGVsc2UgewogICAgICAgICRJUEFkZHJlc3MgPSBAKEdldC1JUEFkZHJlc3MgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXIpWzBdLklQQWRkcmVzcwogICAgfQoKICAgICRQdHJJbmZvID0gW0ludFB0cl06Olplcm8KCiAgICAkUmVzdWx0ID0gJE5ldGFwaTMyOjpEc0dldFNpdGVOYW1lKCRDb21wdXRlciwgW3JlZl0kUHRySW5mbykKICAgIFdyaXRlLURlYnVnICJHZXQtU2l0ZU5hbWUgcmVzdWx0IGZvciAkQ29tcHV0ZXIgOiAkUmVzdWx0IgoKICAgICRDb21wdXRlclNpdGUgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAkQ29tcHV0ZXJTaXRlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAkQ29tcHV0ZXJTaXRlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lQQWRkcmVzcycgJElQQWRkcmVzcwoKICAgIGlmICgkUmVzdWx0IC1lcSAwKSB7CiAgICAgICAgJFNpdGVuYW1lID0gW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6UHRyVG9TdHJpbmdBdXRvKCRQdHJJbmZvKQogICAgICAgICRDb21wdXRlclNpdGUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU2l0ZU5hbWUnICRTaXRlbmFtZQogICAgfQogICAgZWxzZWlmKCRSZXN1bHQgLWVxIDEyMTApIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJDb21wdXRlcm5hbWUgJyRDb21wdXRlcicgaXMgbm90IGluIGEgdmFsaWQgZm9ybS4iCiAgICAgICAgJENvbXB1dGVyU2l0ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTaXRlTmFtZScgJ0VSUk9SJwogICAgfQogICAgZWxzZWlmKCRSZXN1bHQgLWVxIDE5MTkpIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJDb21wdXRlciAnJENvbXB1dGVyJyBpcyBub3QgaW4gYSBzaXRlIgogICAgICAgIAogICAgICAgICRDb21wdXRlclNpdGUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU2l0ZU5hbWUnICROdWxsCiAgICB9CiAgICBlbHNlIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvciIKICAgICAgICAkQ29tcHV0ZXJTaXRlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NpdGVOYW1lJyAnRVJST1InCiAgICB9CgogICAgJE51bGwgPSAkTmV0YXBpMzI6Ok5ldEFwaUJ1ZmZlckZyZWUoJFB0ckluZm8pCiAgICAkQ29tcHV0ZXJTaXRlCn0KCgpmaWx0ZXIgR2V0LUxhc3RMb2dnZWRPbiB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgVGhpcyBmdW5jdGlvbiB1c2VzIHJlbW90ZSByZWdpc3RyeSBmdW5jdGlvbmFsaXR5IHRvIHJldHVybgogICAgICAgIHRoZSBsYXN0IHVzZXIgbG9nZ2VkIG9udG8gYSB0YXJnZXQgbWFjaGluZS4KCiAgICAgICAgTm90ZTogVGhpcyBmdW5jdGlvbiByZXF1aXJlcyBhZG1pbmlzdHJhdGl2ZSByaWdodHMgb24gdGhlCiAgICAgICAgbWFjaGluZSB5b3UncmUgZW51bWVyYXRpbmcuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlck5hbWUKCiAgICAgICAgVGhlIGhvc3RuYW1lIHRvIHF1ZXJ5IGZvciB0aGUgbGFzdCBsb2dnZWQgb24gdXNlci4KICAgICAgICBEZWZhdWx0cyB0byB0aGUgbG9jYWxob3N0LgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3QgZm9yIHRoZSByZW1vdGUgY29ubmVjdGlvbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1MYXN0TG9nZ2VkT24KCiAgICAgICAgUmV0dXJucyB0aGUgbGFzdCB1c2VyIGxvZ2dlZCBvbnRvIHRoZSBsb2NhbCBtYWNoaW5lLgoKICAgIC5FWEFNUExFCiAgICAgICAgCiAgICAgICAgUFMgQzpcPiBHZXQtTGFzdExvZ2dlZE9uIC1Db21wdXRlck5hbWUgV0lORE9XUzEKCiAgICAgICAgUmV0dXJucyB0aGUgbGFzdCB1c2VyIGxvZ2dlZCBvbnRvIFdJTkRPV1MxCgogICAgLkVYQU1QTEUKICAgICAgICAKICAgICAgICBQUyBDOlw+IEdldC1OZXRDb21wdXRlciB8IEdldC1MYXN0TG9nZ2VkT24KCiAgICAgICAgUmV0dXJucyB0aGUgbGFzdCB1c2VyIGxvZ2dlZCBvbnRvIGFsbCBtYWNoaW5lcyBpbiB0aGUgZG9tYWluLgojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW09iamVjdFtdXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgICMgZXh0cmFjdCB0aGUgY29tcHV0ZXIgbmFtZSBmcm9tIHdoYXRldmVyIG9iamVjdCB3YXMgcGFzc2VkIG9uIHRoZSBwaXBlbGluZQogICAgJENvbXB1dGVyID0gJENvbXB1dGVyTmFtZSB8IEdldC1OYW1lRmllbGQKCiAgICAjIEhLRVlfTE9DQUxfTUFDSElORQogICAgJEhLTE0gPSAyMTQ3NDgzNjUwCgogICAgIyB0cnkgdG8gb3BlbiB1cCB0aGUgcmVtb3RlIHJlZ2lzdHJ5IGtleSB0byBncmFiIHRoZSBsYXN0IGxvZ2dlZCBvbiB1c2VyCiAgICB0cnkgewoKICAgICAgICBpZigkQ3JlZGVudGlhbCkgewogICAgICAgICAgICAkUmVnID0gR2V0LVdtaU9iamVjdCAtTGlzdCAnU3RkUmVnUHJvdicgLU5hbWVzcGFjZSByb290XGRlZmF1bHQgLUNvbXB1dGVybmFtZSAkQ29tcHV0ZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRSZWcgPSBHZXQtV21pT2JqZWN0IC1MaXN0ICdTdGRSZWdQcm92JyAtTmFtZXNwYWNlIHJvb3RcZGVmYXVsdCAtQ29tcHV0ZXJuYW1lICRDb21wdXRlciAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQogICAgICAgIH0KCiAgICAgICAgJEtleSA9ICJTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxBdXRoZW50aWNhdGlvblxMb2dvblVJIgogICAgICAgICRWYWx1ZSA9ICJMYXN0TG9nZ2VkT25Vc2VyIgogICAgICAgICRMYXN0VXNlciA9ICRSZWcuR2V0U3RyaW5nVmFsdWUoJEhLTE0sICRLZXksICRWYWx1ZSkuc1ZhbHVlCgogICAgICAgICRMYXN0TG9nZ2VkT24gPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgJExhc3RMb2dnZWRPbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICRMYXN0TG9nZ2VkT24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTGFzdExvZ2dlZE9uJyAkTGFzdFVzZXIKICAgICAgICAkTGFzdExvZ2dlZE9uCiAgICB9CiAgICBjYXRjaCB7CiAgICAgICAgV3JpdGUtV2FybmluZyAiWyFdIEVycm9yIG9wZW5pbmcgcmVtb3RlIHJlZ2lzdHJ5IG9uICRDb21wdXRlci4gUmVtb3RlIHJlZ2lzdHJ5IGxpa2VseSBub3QgZW5hYmxlZC4iCiAgICB9Cn0KCgpmaWx0ZXIgR2V0LUNhY2hlZFJEUENvbm5lY3Rpb24gewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFVzZXMgcmVtb3RlIHJlZ2lzdHJ5IGZ1bmN0aW9uYWxpdHkgdG8gcXVlcnkgYWxsIGVudHJpZXMgZm9yIHRoZQogICAgICAgICJXaW5kb3dzIFJlbW90ZSBEZXNrdG9wIENvbm5lY3Rpb24gQ2xpZW50IiBvbiBhIG1hY2hpbmUsIHNlcGFyYXRlZCBieQogICAgICAgIHVzZXIgYW5kIHRhcmdldCBzZXJ2ZXIuCgogICAgICAgIE5vdGU6IFRoaXMgZnVuY3Rpb24gcmVxdWlyZXMgYWRtaW5pc3RyYXRpdmUgcmlnaHRzIG9uIHRoZQogICAgICAgIG1hY2hpbmUgeW91J3JlIGVudW1lcmF0aW5nLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIFRoZSBob3N0bmFtZSB0byBxdWVyeSBmb3IgUkRQIGNsaWVudCBpbmZvcm1hdGlvbi4KICAgICAgICBEZWZhdWx0cyB0byBsb2NhbGhvc3QuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBmb3IgdGhlIHJlbW90ZSBjb25uZWN0aW9uLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LUNhY2hlZFJEUENvbm5lY3Rpb24KCiAgICAgICAgUmV0dXJucyB0aGUgUkRQIGNvbm5lY3Rpb24gY2xpZW50IGluZm9ybWF0aW9uIGZvciB0aGUgbG9jYWwgbWFjaGluZS4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1DYWNoZWRSRFBDb25uZWN0aW9uIC1Db21wdXRlck5hbWUgV0lORE9XUzIudGVzdGxhYi5sb2NhbAoKICAgICAgICBSZXR1cm5zIHRoZSBSRFAgY29ubmVjdGlvbiBjbGllbnQgaW5mb3JtYXRpb24gZm9yIHRoZSBXSU5ET1dTMi50ZXN0bGFiLmxvY2FsIG1hY2hpbmUKCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1DYWNoZWRSRFBDb25uZWN0aW9uIC1Db21wdXRlck5hbWUgV0lORE9XUzIudGVzdGxhYi5sb2NhbCAtQ3JlZGVudGlhbCAkQ3JlZAoKICAgICAgICBSZXR1cm5zIHRoZSBSRFAgY29ubmVjdGlvbiBjbGllbnQgaW5mb3JtYXRpb24gZm9yIHRoZSBXSU5ET1dTMi50ZXN0bGFiLmxvY2FsIG1hY2hpbmUgdXNpbmcgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldENvbXB1dGVyIHwgR2V0LUNhY2hlZFJEUENvbm5lY3Rpb24KCiAgICAgICAgR2V0IGNhY2hlZCBSRFAgaW5mb3JtYXRpb24gZm9yIGFsbCBtYWNoaW5lcyBpbiB0aGUgZG9tYWluLgojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW09iamVjdFtdXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgICMgZXh0cmFjdCB0aGUgY29tcHV0ZXIgbmFtZSBmcm9tIHdoYXRldmVyIG9iamVjdCB3YXMgcGFzc2VkIG9uIHRoZSBwaXBlbGluZQogICAgJENvbXB1dGVyID0gJENvbXB1dGVyTmFtZSB8IEdldC1OYW1lRmllbGQKCiAgICAjIEhLRVlfVVNFUlMKICAgICRIS1UgPSAyMTQ3NDgzNjUxCgogICAgdHJ5IHsKICAgICAgICBpZigkQ3JlZGVudGlhbCkgewogICAgICAgICAgICAkUmVnID0gR2V0LVdtaU9iamVjdCAtTGlzdCAnU3RkUmVnUHJvdicgLU5hbWVzcGFjZSByb290XGRlZmF1bHQgLUNvbXB1dGVybmFtZSAkQ29tcHV0ZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRSZWcgPSBHZXQtV21pT2JqZWN0IC1MaXN0ICdTdGRSZWdQcm92JyAtTmFtZXNwYWNlIHJvb3RcZGVmYXVsdCAtQ29tcHV0ZXJuYW1lICRDb21wdXRlciAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQogICAgICAgIH0KCiAgICAgICAgIyBleHRyYWN0IG91dCB0aGUgU0lEcyBvZiBkb21haW4gdXNlcnMgaW4gdGhpcyBoaXZlCiAgICAgICAgJFVzZXJTSURzID0gKCRSZWcuRW51bUtleSgkSEtVLCAiIikpLnNOYW1lcyB8ID8geyAkXyAtbWF0Y2ggJ1MtMS01LTIxLVswLTldKy1bMC05XSstWzAtOV0rLVswLTldKyQnIH0KCiAgICAgICAgZm9yZWFjaCAoJFVzZXJTSUQgaW4gJFVzZXJTSURzKSB7CgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJFVzZXJOYW1lID0gQ29udmVydC1TaWRUb05hbWUgJFVzZXJTSUQKCiAgICAgICAgICAgICAgICAjIHB1bGwgb3V0IGFsbCB0aGUgY2FjaGVkIFJEUCBjb25uZWN0aW9ucwogICAgICAgICAgICAgICAgJENvbm5lY3Rpb25LZXlzID0gJFJlZy5FbnVtVmFsdWVzKCRIS1UsIiRVc2VyU0lEXFNvZnR3YXJlXE1pY3Jvc29mdFxUZXJtaW5hbCBTZXJ2ZXIgQ2xpZW50XERlZmF1bHQiKS5zTmFtZXMKCiAgICAgICAgICAgICAgICBmb3JlYWNoICgkQ29ubmVjdGlvbiBpbiAkQ29ubmVjdGlvbktleXMpIHsKICAgICAgICAgICAgICAgICAgICAjIG1ha2Ugc3VyZSB0aGlzIGtleSBpcyBhIGNhY2hlZCBjb25uZWN0aW9uCiAgICAgICAgICAgICAgICAgICAgaWYoJENvbm5lY3Rpb24gLW1hdGNoICdNUlUuKicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFRhcmdldFNlcnZlciA9ICRSZWcuR2V0U3RyaW5nVmFsdWUoJEhLVSwgIiRVc2VyU0lEXFNvZnR3YXJlXE1pY3Jvc29mdFxUZXJtaW5hbCBTZXJ2ZXIgQ2xpZW50XERlZmF1bHQiLCAkQ29ubmVjdGlvbikuc1ZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlck5hbWUnICRVc2VyTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJTSUQnICRVc2VyU0lECiAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVGFyZ2V0U2VydmVyJyAkVGFyZ2V0U2VydmVyCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlcm5hbWVIaW50JyAkTnVsbAogICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICMgcHVsbCBvdXQgYWxsIHRoZSBjYWNoZWQgc2VydmVyIGluZm8gd2l0aCB1c2VybmFtZSBoaW50cwogICAgICAgICAgICAgICAgJFNlcnZlcktleXMgPSAkUmVnLkVudW1LZXkoJEhLVSwiJFVzZXJTSURcU29mdHdhcmVcTWljcm9zb2Z0XFRlcm1pbmFsIFNlcnZlciBDbGllbnRcU2VydmVycyIpLnNOYW1lcwoKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRTZXJ2ZXIgaW4gJFNlcnZlcktleXMpIHsKCiAgICAgICAgICAgICAgICAgICAgJFVzZXJuYW1lSGludCA9ICRSZWcuR2V0U3RyaW5nVmFsdWUoJEhLVSwgIiRVc2VyU0lEXFNvZnR3YXJlXE1pY3Jvc29mdFxUZXJtaW5hbCBTZXJ2ZXIgQ2xpZW50XFNlcnZlcnNcJFNlcnZlciIsICdVc2VybmFtZUhpbnQnKS5zVmFsdWUKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAkVXNlck5hbWUKICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJTSUQnICRVc2VyU0lECiAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdUYXJnZXRTZXJ2ZXInICRTZXJ2ZXIKICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJuYW1lSGludCcgJFVzZXJuYW1lSGludAogICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24gICAKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtRGVidWcgIkVycm9yOiAkXyIKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICB9CiAgICBjYXRjaCB7CiAgICAgICAgV3JpdGUtV2FybmluZyAiRXJyb3IgYWNjZXNzaW5nICRDb21wdXRlciwgbGlrZWx5IGluc3VmZmljaWVudCBwZXJtaXNzaW9ucyBvciBmaXJld2FsbCBydWxlcyBvbiBob3N0OiAkXyIKICAgIH0KfQoKCmZpbHRlciBHZXQtTmV0UHJvY2VzcyB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgR2V0cyBhIGxpc3Qgb2YgcHJvY2Vzc2VzL293bmVycyBvbiBhIHJlbW90ZSBtYWNoaW5lLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIFRoZSBob3N0bmFtZSB0byBxdWVyeSBwcm9jZXNzZXMuIERlZmF1bHRzIHRvIHRoZSBsb2NhbCBob3N0IG5hbWUuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBmb3IgdGhlIHJlbW90ZSBjb25uZWN0aW9uLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldFByb2Nlc3MgLUNvbXB1dGVyTmFtZSBXSU5ET1dTMQogICAgCiAgICAgICAgUmV0dXJucyB0aGUgY3VycmVudCBwcm9jZXNzZXMgZm9yIFdJTkRPV1MxCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnKV0KICAgICAgICBbT2JqZWN0W11dCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gW1N5c3RlbS5OZXQuRG5zXTo6R2V0SG9zdE5hbWUoKSwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICAjIGV4dHJhY3QgdGhlIGNvbXB1dGVyIG5hbWUgZnJvbSB3aGF0ZXZlciBvYmplY3Qgd2FzIHBhc3NlZCBvbiB0aGUgcGlwZWxpbmUKICAgICRDb21wdXRlciA9ICRDb21wdXRlck5hbWUgfCBHZXQtTmFtZUZpZWxkCgogICAgdHJ5IHsKICAgICAgICBpZigkQ3JlZGVudGlhbCkgewogICAgICAgICAgICAkUHJvY2Vzc2VzID0gR2V0LVdNSW9iamVjdCAtQ2xhc3MgV2luMzJfcHJvY2VzcyAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRQcm9jZXNzZXMgPSBHZXQtV01Jb2JqZWN0IC1DbGFzcyBXaW4zMl9wcm9jZXNzIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZQogICAgICAgIH0KCiAgICAgICAgJFByb2Nlc3NlcyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgJE93bmVyID0gJF8uZ2V0b3duZXIoKTsKICAgICAgICAgICAgJFByb2Nlc3MgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICRQcm9jZXNzIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgICAgICRQcm9jZXNzIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1Byb2Nlc3NOYW1lJyAkXy5Qcm9jZXNzTmFtZQogICAgICAgICAgICAkUHJvY2VzcyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQcm9jZXNzSUQnICRfLlByb2Nlc3NJRAogICAgICAgICAgICAkUHJvY2VzcyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEb21haW4nICRPd25lci5Eb21haW4KICAgICAgICAgICAgJFByb2Nlc3MgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlcicgJE93bmVyLlVzZXIKICAgICAgICAgICAgJFByb2Nlc3MgICAgICAgICAgICAgICAgCiAgICAgICAgfQogICAgfQogICAgY2F0Y2ggewogICAgICAgIFdyaXRlLVZlcmJvc2UgIlshXSBFcnJvciBlbnVtZXJhdGluZyByZW1vdGUgcHJvY2Vzc2VzIG9uICRDb21wdXRlciwgYWNjZXNzIGxpa2VseSBkZW5pZWQ6ICRfIgogICAgfQp9CgoKZnVuY3Rpb24gRmluZC1JbnRlcmVzdGluZ0ZpbGUgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFRoaXMgZnVuY3Rpb24gcmVjdXJzaXZlbHkgc2VhcmNoZXMgYSBnaXZlbiBVTkMgcGF0aCBmb3IgZmlsZXMgd2l0aAogICAgICAgIHNwZWNpZmljIGtleXdvcmRzIGluIHRoZSBuYW1lIChkZWZhdWx0IG9mIHBhc3MsIHNlbnNpdGl2ZSwgc2VjcmV0LCBhZG1pbiwKICAgICAgICBsb2dpbiBhbmQgdW5hdHRlbmQqLnhtbCkuIFRoZSBvdXRwdXQgY2FuIGJlIHBpcGVkIG91dCB0byBhIGNzdiB3aXRoIHRoZQogICAgICAgIC1PdXRGaWxlIGZsYWcuIEJ5IGRlZmF1bHQsIGhpZGRlbiBmaWxlcy9mb2xkZXJzIGFyZSBpbmNsdWRlZCBpbiBzZWFyY2ggcmVzdWx0cy4KCiAgICAuUEFSQU1FVEVSIFBhdGgKCiAgICAgICAgVU5DL2xvY2FsIHBhdGggdG8gcmVjdXJzaXZlbHkgc2VhcmNoLgoKICAgIC5QQVJBTUVURVIgVGVybXMKCiAgICAgICAgVGVybXMgdG8gc2VhcmNoIGZvci4KCiAgICAuUEFSQU1FVEVSIE9mZmljZURvY3MKCiAgICAgICAgU3dpdGNoLiBTZWFyY2ggZm9yIG9mZmljZSBkb2N1bWVudHMgKCouZG9jKiwgKi54bHMqLCAqLnBwdCopCgogICAgLlBBUkFNRVRFUiBGcmVzaEVYRXMKCiAgICAgICAgU3dpdGNoLiBGaW5kIC5FWEVzIGFjY2Vzc2VkIHdpdGhpbiB0aGUgbGFzdCB3ZWVrLgoKICAgIC5QQVJBTUVURVIgTGFzdEFjY2Vzc1RpbWUKCiAgICAgICAgT25seSByZXR1cm4gZmlsZXMgd2l0aCBhIExhc3RBY2Nlc3NUaW1lIGdyZWF0ZXIgdGhhbiB0aGlzIGRhdGUgdmFsdWUuCgogICAgLlBBUkFNRVRFUiBMYXN0V3JpdGVUaW1lCgogICAgICAgIE9ubHkgcmV0dXJuIGZpbGVzIHdpdGggYSBMYXN0V3JpdGVUaW1lIGdyZWF0ZXIgdGhhbiB0aGlzIGRhdGUgdmFsdWUuCgogICAgLlBBUkFNRVRFUiBDcmVhdGlvblRpbWUKCiAgICAgICAgT25seSByZXR1cm4gZmlsZXMgd2l0aCBhIENyZWF0aW9uVGltZSBncmVhdGVyIHRoYW4gdGhpcyBkYXRlIHZhbHVlLgoKICAgIC5QQVJBTUVURVIgRXhjbHVkZUZvbGRlcnMKCiAgICAgICAgU3dpdGNoLiBFeGNsdWRlIGZvbGRlcnMgZnJvbSB0aGUgc2VhcmNoIHJlc3VsdHMuCgogICAgLlBBUkFNRVRFUiBFeGNsdWRlSGlkZGVuCgogICAgICAgIFN3aXRjaC4gRXhjbHVkZSBoaWRkZW4gZmlsZXMgYW5kIGZvbGRlcnMgZnJvbSB0aGUgc2VhcmNoIHJlc3VsdHMuCgogICAgLlBBUkFNRVRFUiBDaGVja1dyaXRlQWNjZXNzCgogICAgICAgIFN3aXRjaC4gT25seSByZXR1cm5zIGZpbGVzIHRoZSBjdXJyZW50IHVzZXIgaGFzIHdyaXRlIGFjY2VzcyB0by4KCiAgICAuUEFSQU1FVEVSIE91dEZpbGUKCiAgICAgICAgT3V0cHV0IHJlc3VsdHMgdG8gYSBzcGVjaWZpZWQgY3N2IG91dHB1dCBmaWxlLgoKICAgIC5QQVJBTUVURVIgVXNlUFNEcml2ZQoKICAgICAgICBTd2l0Y2guIE1vdW50IHRhcmdldCByZW1vdGUgcGF0aCB3aXRoIHRlbXBvcmFyeSBQU0RyaXZlcy4KCiAgICAuT1VUUFVUUwoKICAgICAgICBUaGUgZnVsbCBwYXRoLCBvd25lciwgbGFzdGFjY2VzcyB0aW1lLCBsYXN0d3JpdGUgdGltZSwgYW5kIHNpemUgZm9yIGVhY2ggZm91bmQgZmlsZS4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEZpbmQtSW50ZXJlc3RpbmdGaWxlIC1QYXRoIEM6XEJhY2t1cFwKICAgICAgICAKICAgICAgICBSZXR1cm5zIGFueSBmaWxlcyBvbiB0aGUgbG9jYWwgcGF0aCBDOlxCYWNrdXBcIHRoYXQgaGF2ZSB0aGUgZGVmYXVsdAogICAgICAgIHNlYXJjaCB0ZXJtIHNldCBpbiB0aGUgdGl0bGUuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBGaW5kLUludGVyZXN0aW5nRmlsZSAtUGF0aCBcXFdJTkRPV1M3XFVzZXJzXCAtVGVybXMgc2FsYXJpZXMsZW1haWwgLU91dEZpbGUgb3V0LmNzdgogICAgICAgIAogICAgICAgIFJldHVybnMgYW55IGZpbGVzIG9uIHRoZSByZW1vdGUgcGF0aCBcXFdJTkRPV1M3XFVzZXJzXCB0aGF0IGhhdmUgJ3NhbGFyaWVzJwogICAgICAgIG9yICdlbWFpbCcgaW4gdGhlIHRpdGxlLCBhbmQgd3JpdGVzIHRoZSByZXN1bHRzIG91dCB0byBhIGNzdiBmaWxlCiAgICAgICAgbmFtZWQgJ291dC5jc3YnCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBGaW5kLUludGVyZXN0aW5nRmlsZSAtUGF0aCBcXFdJTkRPV1M3XFVzZXJzXCAtTGFzdEFjY2Vzc1RpbWUgKEdldC1EYXRlKS5BZGREYXlzKC03KQoKICAgICAgICBSZXR1cm5zIGFueSBmaWxlcyBvbiB0aGUgcmVtb3RlIHBhdGggXFxXSU5ET1dTN1xVc2Vyc1wgdGhhdCBoYXZlIHRoZSBkZWZhdWx0CiAgICAgICAgc2VhcmNoIHRlcm0gc2V0IGluIHRoZSB0aXRsZSBhbmQgd2VyZSBhY2Nlc3NlZCB3aXRoaW4gdGhlIGxhc3Qgd2Vlay4KCiAgICAuTElOSwogICAgICAgIAogICAgICAgIGh0dHA6Ly93d3cuaGFybWoweS5uZXQvYmxvZy9yZWR0ZWFtaW5nL2ZpbGUtc2VydmVyLXRyaWFnZS1vbi1yZWQtdGVhbS1lbmdhZ2VtZW50cy8KIz4KICAgIAogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkUGF0aCA9ICcuXCcsCgogICAgICAgIFtBbGlhcygnVGVybXMnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFNlYXJjaFRlcm1zID0gQCgncGFzcycsICdzZW5zaXRpdmUnLCAnYWRtaW4nLCAnbG9naW4nLCAnc2VjcmV0JywgJ3VuYXR0ZW5kKi54bWwnLCAnLnZtZGsnLCAnY3JlZHMnLCAnY3JlZGVudGlhbCcsICcuY29uZmlnJyksCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJE9mZmljZURvY3MsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEZyZXNoRVhFcywKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTGFzdEFjY2Vzc1RpbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJExhc3RXcml0ZVRpbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENyZWF0aW9uVGltZSwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRXhjbHVkZUZvbGRlcnMsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEV4Y2x1ZGVIaWRkZW4sCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJENoZWNrV3JpdGVBY2Nlc3MsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE91dEZpbGUsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFVzZVBTRHJpdmUKICAgICkKCiAgICBiZWdpbiB7CgogICAgICAgICRQYXRoICs9IGlmKCEkUGF0aC5FbmRzV2l0aCgnXCcpKSB7IlwifQoKICAgICAgICBpZiAoJENyZWRlbnRpYWwpIHsKICAgICAgICAgICAgJFVzZVBTRHJpdmUgPSAkVHJ1ZQogICAgICAgIH0KCiAgICAgICAgIyBhcHBlbmQgd2lsZGNhcmRzIHRvIHRoZSBmcm9udCBhbmQgYmFjayBvZiBhbGwgc2VhcmNoIHRlcm1zCiAgICAgICAgJFNlYXJjaFRlcm1zID0gJFNlYXJjaFRlcm1zIHwgRm9yRWFjaC1PYmplY3QgeyBpZigkXyAtbm90bWF0Y2ggJ15cKi4qXCokJykgeyIqJCgkXykqIn0gZWxzZXskX30gfQoKICAgICAgICAjIHNlYXJjaCBqdXN0IGZvciBvZmZpY2UgZG9jdW1lbnRzIGlmIHNwZWNpZmllZAogICAgICAgIGlmICgkT2ZmaWNlRG9jcykgewogICAgICAgICAgICAkU2VhcmNoVGVybXMgPSBAKCcqLmRvYycsICcqLmRvY3gnLCAnKi54bHMnLCAnKi54bHN4JywgJyoucHB0JywgJyoucHB0eCcpCiAgICAgICAgfQoKICAgICAgICAjIGZpbmQgLmV4ZSdzIGFjY2Vzc2VkIHdpdGhpbiB0aGUgbGFzdCA3IGRheXMKICAgICAgICBpZigkRnJlc2hFWEVzKSB7CiAgICAgICAgICAgICMgZ2V0IGFuIGFjY2VzcyB0aW1lIGxpbWl0IG9mIDcgZGF5cyBhZ28KICAgICAgICAgICAgJExhc3RBY2Nlc3NUaW1lID0gKEdldC1EYXRlKS5BZGREYXlzKC03KS5Ub1N0cmluZygnTU0vZGQveXl5eScpCiAgICAgICAgICAgICRTZWFyY2hUZXJtcyA9ICcqLmV4ZScKICAgICAgICB9CgogICAgICAgIGlmKCRVc2VQU0RyaXZlKSB7CiAgICAgICAgICAgICMgaWYgd2UncmUgUFNEcml2ZXMsIGNyZWF0ZSBhIHRlbXBvcmFyeSBtb3VudCBwb2ludAoKICAgICAgICAgICAgJFBhcnRzID0gJFBhdGguc3BsaXQoJ1wnKQogICAgICAgICAgICAkRm9sZGVyUGF0aCA9ICRQYXJ0c1swLi4oJFBhcnRzLmxlbmd0aC0yKV0gLWpvaW4gJ1wnCiAgICAgICAgICAgICRGaWxlUGF0aCA9ICRQYXJ0c1stMV0KCiAgICAgICAgICAgICRSYW5kRHJpdmUgPSAoImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6Ii5Ub0NoYXJBcnJheSgpIHwgR2V0LVJhbmRvbSAtQ291bnQgNykgLWpvaW4gJycKICAgICAgICAgICAgCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIk1vdW50aW5nIHBhdGggJyRQYXRoJyB1c2luZyBhIHRlbXAgUFNEcml2ZSBhdCAkUmFuZERyaXZlIgoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICROdWxsID0gTmV3LVBTRHJpdmUgLU5hbWUgJFJhbmREcml2ZSAtUFNQcm92aWRlciBGaWxlU3lzdGVtIC1Sb290ICRGb2xkZXJQYXRoIC1FcnJvckFjdGlvbiBTdG9wCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtRGVidWcgIkVycm9yIG1vdW50aW5nIHBhdGggJyRQYXRoJyA6ICRfIgogICAgICAgICAgICAgICAgcmV0dXJuICROdWxsCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgc28gd2UgY2FuIGNkL2RpciB0aGUgbmV3IGRyaXZlCiAgICAgICAgICAgICRQYXRoID0gIiR7UmFuZERyaXZlfTpcJHtGaWxlUGF0aH0iCiAgICAgICAgfQogICAgfQoKICAgIHByb2Nlc3MgewoKICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gU2VhcmNoIHBhdGggJFBhdGgiCgogICAgICAgIGZ1bmN0aW9uIEludm9rZS1DaGVja1dyaXRlIHsKICAgICAgICAgICAgIyBzaG9ydCBoZWxwZXIgdG8gY2hlY2sgaXMgdGhlIGN1cnJlbnQgdXNlciBjYW4gd3JpdGUgdG8gYSBmaWxlCiAgICAgICAgICAgIFtDbWRsZXRCaW5kaW5nKCldcGFyYW0oW1N0cmluZ10kUGF0aCkKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICRGaWxldGVzdCA9IFtJTy5GSUxFXTo6T3BlbldyaXRlKCRQYXRoKQogICAgICAgICAgICAgICAgJEZpbGV0ZXN0LkNsb3NlKCkKICAgICAgICAgICAgICAgICRUcnVlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAkRXJyb3JbMF0KICAgICAgICAgICAgICAgICRGYWxzZQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAkU2VhcmNoQXJncyA9ICBAewogICAgICAgICAgICAnUGF0aCcgPSAkUGF0aAogICAgICAgICAgICAnUmVjdXJzZScgPSAkVHJ1ZQogICAgICAgICAgICAnRm9yY2UnID0gJCgtbm90ICRFeGNsdWRlSGlkZGVuKQogICAgICAgICAgICAnSW5jbHVkZScgPSAkU2VhcmNoVGVybXMKICAgICAgICAgICAgJ0Vycm9yQWN0aW9uJyA9ICdTaWxlbnRseUNvbnRpbnVlJwogICAgICAgIH0KCiAgICAgICAgR2V0LUNoaWxkSXRlbSBAU2VhcmNoQXJncyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAkXwogICAgICAgICAgICAjIGNoZWNrIGlmIHdlJ3JlIGV4Y2x1ZGluZyBmb2xkZXJzCiAgICAgICAgICAgIGlmKCEkRXhjbHVkZUZvbGRlcnMgLW9yICEkXy5QU0lzQ29udGFpbmVyKSB7JF99CiAgICAgICAgfSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgaWYoJExhc3RBY2Nlc3NUaW1lIC1vciAkTGFzdFdyaXRlVGltZSAtb3IgJENyZWF0aW9uVGltZSkgewogICAgICAgICAgICAgICAgaWYoJExhc3RBY2Nlc3NUaW1lIC1hbmQgKCRfLkxhc3RBY2Nlc3NUaW1lIC1ndCAkTGFzdEFjY2Vzc1RpbWUpKSB7JF99CiAgICAgICAgICAgICAgICBlbHNlaWYoJExhc3RXcml0ZVRpbWUgLWFuZCAoJF8uTGFzdFdyaXRlVGltZSAtZ3QgJExhc3RXcml0ZVRpbWUpKSB7JF99CiAgICAgICAgICAgICAgICBlbHNlaWYoJENyZWF0aW9uVGltZSAtYW5kICgkXy5DcmVhdGlvblRpbWUgLWd0ICRDcmVhdGlvblRpbWUpKSB7JF99CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7JF99CiAgICAgICAgfSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgIyBmaWx0ZXIgZm9yIHdyaXRlIGFjY2VzcyAoaWYgYXBwbGljYWJsZSkKICAgICAgICAgICAgaWYoKC1ub3QgJENoZWNrV3JpdGVBY2Nlc3MpIC1vciAoSW52b2tlLUNoZWNrV3JpdGUgLVBhdGggJF8uRnVsbE5hbWUpKSB7JF99CiAgICAgICAgfSB8IFNlbGVjdC1PYmplY3QgRnVsbE5hbWUsQHtOYW1lPSdPd25lcic7RXhwcmVzc2lvbj17KEdldC1BY2wgJF8uRnVsbE5hbWUpLk93bmVyfX0sTGFzdEFjY2Vzc1RpbWUsTGFzdFdyaXRlVGltZSxDcmVhdGlvblRpbWUsTGVuZ3RoIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAjIGNoZWNrIGlmIHdlJ3JlIG91dHB1dHRpbmcgdG8gdGhlIHBpcGVsaW5lIG9yIGFuIG91dHB1dCBmaWxlCiAgICAgICAgICAgIGlmKCRPdXRGaWxlKSB7RXhwb3J0LVBvd2VyVmlld0NTViAtSW5wdXRPYmplY3QgJF8gLU91dEZpbGUgJE91dEZpbGV9CiAgICAgICAgICAgIGVsc2UgeyRffQogICAgICAgIH0KICAgIH0KCiAgICBlbmQgewogICAgICAgIGlmKCRVc2VQU0RyaXZlIC1hbmQgJFJhbmREcml2ZSkgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJSZW1vdmluZyB0ZW1wIFBTRHJpdmUgJFJhbmREcml2ZSIKICAgICAgICAgICAgR2V0LVBTRHJpdmUgLU5hbWUgJFJhbmREcml2ZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFJlbW92ZS1QU0RyaXZlIC1Gb3JjZQogICAgICAgIH0KICAgIH0KfQoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMKIyAnTWV0YSctZnVuY3Rpb25zIHN0YXJ0IGJlbG93CiMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCmZ1bmN0aW9uIEludm9rZS1UaHJlYWRlZEZ1bmN0aW9uIHsKICAgICMgSGVscGVyIHVzZWQgYnkgYW55IHRocmVhZGVkIGhvc3QgZW51bWVyYXRpb24gZnVuY3Rpb25zCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLE1hbmRhdG9yeT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUsCgogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MSxNYW5kYXRvcnk9JFRydWUpXQogICAgICAgIFtTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlNjcmlwdEJsb2NrXQogICAgICAgICRTY3JpcHRCbG9jaywKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0yKV0KICAgICAgICBbSGFzaHRhYmxlXQogICAgICAgICRTY3JpcHRQYXJhbWV0ZXJzLAoKICAgICAgICBbSW50XQogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwKV0gCiAgICAgICAgJFRocmVhZHMgPSAyMCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkTm9JbXBvcnRzCiAgICApCgogICAgYmVnaW4gewoKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZWJ1ZyddKSB7CiAgICAgICAgICAgICREZWJ1Z1ByZWZlcmVuY2UgPSAnQ29udGludWUnCiAgICAgICAgfQoKICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gVG90YWwgbnVtYmVyIG9mIGhvc3RzOiAkKCRDb21wdXRlck5hbWUuY291bnQpIgoKICAgICAgICAjIEFkYXB0ZWQgZnJvbToKICAgICAgICAjICAgaHR0cDovL3Bvd2Vyc2hlbGwub3JnL3dwL2ZvcnVtcy90b3BpYy9pbnZwa2UtcGFyYWxsZWwtbmVlZC1oZWxwLXRvLWNsb25lLXRoZS1jdXJyZW50LXJ1bnNwYWNlLwogICAgICAgICRTZXNzaW9uU3RhdGUgPSBbU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5SdW5zcGFjZXMuSW5pdGlhbFNlc3Npb25TdGF0ZV06OkNyZWF0ZURlZmF1bHQoKQogICAgICAgICRTZXNzaW9uU3RhdGUuQXBhcnRtZW50U3RhdGUgPSBbU3lzdGVtLlRocmVhZGluZy5UaHJlYWRdOjpDdXJyZW50VGhyZWFkLkdldEFwYXJ0bWVudFN0YXRlKCkKCiAgICAgICAgIyBpbXBvcnQgdGhlIGN1cnJlbnQgc2Vzc2lvbiBzdGF0ZSdzIHZhcmlhYmxlcyBhbmQgZnVuY3Rpb25zIHNvIHRoZSBjaGFpbmVkIFBvd2VyVmlldwogICAgICAgICMgICBmdW5jdGlvbmFsaXR5IGNhbiBiZSB1c2VkIGJ5IHRoZSB0aHJlYWRlZCBibG9ja3MKICAgICAgICBpZighJE5vSW1wb3J0cykgewoKICAgICAgICAgICAgIyBncmFiIGFsbCB0aGUgY3VycmVudCB2YXJpYWJsZXMgZm9yIHRoaXMgcnVuc3BhY2UKICAgICAgICAgICAgJE15VmFycyA9IEdldC1WYXJpYWJsZSAtU2NvcGUgMgoKICAgICAgICAgICAgIyB0aGVzZSBWYXJpYWJsZXMgYXJlIGFkZGVkIGJ5IFJ1bnNwYWNlLk9wZW4oKSBNZXRob2QgYW5kIHByb2R1Y2UgU3RvcCBlcnJvcnMgaWYgeW91IGFkZCB0aGVtIHR3aWNlCiAgICAgICAgICAgICRWb3JiaWRkZW5WYXJzID0gQCgiPyIsImFyZ3MiLCJDb25zb2xlRmlsZU5hbWUiLCJFcnJvciIsIkV4ZWN1dGlvbkNvbnRleHQiLCJmYWxzZSIsIkhPTUUiLCJIb3N0IiwiaW5wdXQiLCJJbnB1dE9iamVjdCIsIk1heGltdW1BbGlhc0NvdW50IiwiTWF4aW11bURyaXZlQ291bnQiLCJNYXhpbXVtRXJyb3JDb3VudCIsIk1heGltdW1GdW5jdGlvbkNvdW50IiwiTWF4aW11bUhpc3RvcnlDb3VudCIsIk1heGltdW1WYXJpYWJsZUNvdW50IiwiTXlJbnZvY2F0aW9uIiwibnVsbCIsIlBJRCIsIlBTQm91bmRQYXJhbWV0ZXJzIiwiUFNDb21tYW5kUGF0aCIsIlBTQ3VsdHVyZSIsIlBTRGVmYXVsdFBhcmFtZXRlclZhbHVlcyIsIlBTSE9NRSIsIlBTU2NyaXB0Um9vdCIsIlBTVUlDdWx0dXJlIiwiUFNWZXJzaW9uVGFibGUiLCJQV0QiLCJTaGVsbElkIiwiU3luY2hyb25pemVkSGFzaCIsInRydWUiKQoKICAgICAgICAgICAgIyBBZGQgVmFyaWFibGVzIGZyb20gUGFyZW50IFNjb3BlIChjdXJyZW50IHJ1bnNwYWNlKSBpbnRvIHRoZSBJbml0aWFsU2Vzc2lvblN0YXRlCiAgICAgICAgICAgIEZvckVhY2goJFZhciBpbiAkTXlWYXJzKSB7CiAgICAgICAgICAgICAgICBpZigkVm9yYmlkZGVuVmFycyAtTm90Q29udGFpbnMgJFZhci5OYW1lKSB7CiAgICAgICAgICAgICAgICAkU2Vzc2lvblN0YXRlLlZhcmlhYmxlcy5BZGQoKE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUnVuc3BhY2VzLlNlc3Npb25TdGF0ZVZhcmlhYmxlRW50cnkgLUFyZ3VtZW50TGlzdCAkVmFyLm5hbWUsJFZhci5WYWx1ZSwkVmFyLmRlc2NyaXB0aW9uLCRWYXIub3B0aW9ucywkVmFyLmF0dHJpYnV0ZXMpKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAjIEFkZCBGdW5jdGlvbnMgZnJvbSBjdXJyZW50IHJ1bnNwYWNlIHRvIHRoZSBJbml0aWFsU2Vzc2lvblN0YXRlCiAgICAgICAgICAgIEZvckVhY2goJEZ1bmN0aW9uIGluIChHZXQtQ2hpbGRJdGVtIEZ1bmN0aW9uOikpIHsKICAgICAgICAgICAgICAgICRTZXNzaW9uU3RhdGUuQ29tbWFuZHMuQWRkKChOZXctT2JqZWN0IC1UeXBlTmFtZSBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlJ1bnNwYWNlcy5TZXNzaW9uU3RhdGVGdW5jdGlvbkVudHJ5IC1Bcmd1bWVudExpc3QgJEZ1bmN0aW9uLk5hbWUsICRGdW5jdGlvbi5EZWZpbml0aW9uKSkKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgIyB0aHJlYWRpbmcgYWRhcHRlZCBmcm9tCiAgICAgICAgIyBodHRwczovL2dpdGh1Yi5jb20vZGFya29wZXJhdG9yL1Bvc2gtU2VjTW9kL2Jsb2IvbWFzdGVyL0Rpc2NvdmVyeS9EaXNjb3ZlcnkucHNtMSNMNDA3CiAgICAgICAgIyAgIFRoYW5rcyBDYXJsb3MhCgogICAgICAgICMgY3JlYXRlIGEgcG9vbCBvZiBtYXhUaHJlYWQgcnVuc3BhY2VzCiAgICAgICAgJFBvb2wgPSBbcnVuc3BhY2VmYWN0b3J5XTo6Q3JlYXRlUnVuc3BhY2VQb29sKDEsICRUaHJlYWRzLCAkU2Vzc2lvblN0YXRlLCAkSG9zdCkKICAgICAgICAkUG9vbC5PcGVuKCkKCiAgICAgICAgJEpvYnMgPSBAKCkKICAgICAgICAkUFMgPSBAKCkKICAgICAgICAkV2FpdCA9IEAoKQoKICAgICAgICAkQ291bnRlciA9IDAKICAgIH0KCiAgICBwcm9jZXNzIHsKCiAgICAgICAgRm9yRWFjaCAoJENvbXB1dGVyIGluICRDb21wdXRlck5hbWUpIHsKCiAgICAgICAgICAgICMgbWFrZSBzdXJlIHdlIGdldCBhIHNlcnZlciBuYW1lCiAgICAgICAgICAgIGlmICgkQ29tcHV0ZXIgLW5lICcnKSB7CiAgICAgICAgICAgICAgICAjIFdyaXRlLVZlcmJvc2UgIlsqXSBFbnVtZXJhdGluZyBzZXJ2ZXIgJENvbXB1dGVyICgkKCRDb3VudGVyKzEpIG9mICQoJENvbXB1dGVyTmFtZS5jb3VudCkpIgoKICAgICAgICAgICAgICAgIFdoaWxlICgkKCRQb29sLkdldEF2YWlsYWJsZVJ1bnNwYWNlcygpKSAtbGUgMCkgewogICAgICAgICAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1NaWxsaVNlY29uZHMgNTAwCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIyBjcmVhdGUgYSAicG93ZXJzaGVsbCBwaXBlbGluZSBydW5uZXIiCiAgICAgICAgICAgICAgICAkUFMgKz0gW3Bvd2Vyc2hlbGxdOjpjcmVhdGUoKQoKICAgICAgICAgICAgICAgICRQU1skQ291bnRlcl0ucnVuc3BhY2Vwb29sID0gJFBvb2wKCiAgICAgICAgICAgICAgICAjIGFkZCB0aGUgc2NyaXB0IGJsb2NrICsgYXJndW1lbnRzCiAgICAgICAgICAgICAgICAkTnVsbCA9ICRQU1skQ291bnRlcl0uQWRkU2NyaXB0KCRTY3JpcHRCbG9jaykuQWRkUGFyYW1ldGVyKCdDb21wdXRlck5hbWUnLCAkQ29tcHV0ZXIpCiAgICAgICAgICAgICAgICBpZigkU2NyaXB0UGFyYW1ldGVycykgewogICAgICAgICAgICAgICAgICAgIEZvckVhY2ggKCRQYXJhbSBpbiAkU2NyaXB0UGFyYW1ldGVycy5HZXRFbnVtZXJhdG9yKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE51bGwgPSAkUFNbJENvdW50ZXJdLkFkZFBhcmFtZXRlcigkUGFyYW0uTmFtZSwgJFBhcmFtLlZhbHVlKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAjIHN0YXJ0IGpvYgogICAgICAgICAgICAgICAgJEpvYnMgKz0gJFBTWyRDb3VudGVyXS5CZWdpbkludm9rZSgpOwoKICAgICAgICAgICAgICAgICMgc3RvcmUgd2FpdCBoYW5kbGVzIGZvciBXYWl0Rm9yQWxsIGNhbGwKICAgICAgICAgICAgICAgICRXYWl0ICs9ICRKb2JzWyRDb3VudGVyXS5Bc3luY1dhaXRIYW5kbGUKICAgICAgICAgICAgfQogICAgICAgICAgICAkQ291bnRlciA9ICRDb3VudGVyICsgMQogICAgICAgIH0KICAgIH0KCiAgICBlbmQgewoKICAgICAgICBXcml0ZS1WZXJib3NlICJXYWl0aW5nIGZvciBzY2FubmluZyB0aHJlYWRzIHRvIGZpbmlzaC4uLiIKCiAgICAgICAgJFdhaXRUaW1lb3V0ID0gR2V0LURhdGUKCiAgICAgICAgIyBzZXQgYSA2MCBzZWNvbmQgdGltZW91dCBmb3IgdGhlIHNjYW5uaW5nIHRocmVhZHMKICAgICAgICB3aGlsZSAoJCgkSm9icyB8IFdoZXJlLU9iamVjdCB7JF8uSXNDb21wbGV0ZWQgLWVxICRGYWxzZX0pLmNvdW50IC1ndCAwIC1vciAkKCQoJChHZXQtRGF0ZSkgLSAkV2FpdFRpbWVvdXQpLnRvdGFsU2Vjb25kcykgLWd0IDYwKSB7CiAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtTWlsbGlTZWNvbmRzIDUwMAogICAgICAgICAgICB9CgogICAgICAgICMgZW5kIGFzeW5jIGNhbGwKICAgICAgICBmb3IgKCR5ID0gMDsgJHkgLWx0ICRDb3VudGVyOyAkeSsrKSB7CgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgIyBjb21wbGV0ZSBhc3luYyBqb2IKICAgICAgICAgICAgICAgICRQU1skeV0uRW5kSW52b2tlKCRKb2JzWyR5XSkKCiAgICAgICAgICAgIH0gY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiZXJyb3I6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGZpbmFsbHkgewogICAgICAgICAgICAgICAgJFBTWyR5XS5EaXNwb3NlKCkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICAkUG9vbC5EaXNwb3NlKCkKICAgICAgICBXcml0ZS1WZXJib3NlICJBbGwgdGhyZWFkcyBjb21wbGV0ZWQhIgogICAgfQp9CgoKZnVuY3Rpb24gSW52b2tlLVVzZXJIdW50ZXIgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEZpbmRzIHdoaWNoIG1hY2hpbmVzIHVzZXJzIG9mIGEgc3BlY2lmaWVkIGdyb3VwIGFyZSBsb2dnZWQgaW50by4KCiAgICAgICAgQXV0aG9yOiBAaGFybWoweQogICAgICAgIExpY2Vuc2U6IEJTRCAzLUNsYXVzZQoKICAgIC5ERVNDUklQVElPTgoKICAgICAgICBUaGlzIGZ1bmN0aW9uIGZpbmRzIHRoZSBsb2NhbCBkb21haW4gbmFtZSBmb3IgYSBob3N0IHVzaW5nIEdldC1OZXREb21haW4sCiAgICAgICAgcXVlcmllcyB0aGUgZG9tYWluIGZvciB1c2VycyBvZiBhIHNwZWNpZmllZCBncm91cCAoZGVmYXVsdCAiZG9tYWluIGFkbWlucyIpCiAgICAgICAgd2l0aCBHZXQtTmV0R3JvdXBNZW1iZXIgb3IgcmVhZHMgaW4gYSB0YXJnZXQgdXNlciBsaXN0LCBxdWVyaWVzIHRoZSBkb21haW4gZm9yIGFsbAogICAgICAgIGFjdGl2ZSBtYWNoaW5lcyB3aXRoIEdldC1OZXRDb21wdXRlciBvciByZWFkcyBpbiBhIHByZS1wb3B1bGF0ZWQgaG9zdCBsaXN0LAogICAgICAgIHJhbmRvbWx5IHNodWZmbGVzIHRoZSB0YXJnZXQgbGlzdCwgdGhlbiBmb3IgZWFjaCBzZXJ2ZXIgaXQgZ2V0cyBhIGxpc3Qgb2YKICAgICAgICBhY3RpdmUgdXNlcnMgd2l0aCBHZXQtTmV0U2Vzc2lvbi9HZXQtTmV0TG9nZ2Vkb24uIFRoZSBmb3VuZCB1c2VyIGxpc3QgaXMgY29tcGFyZWQKICAgICAgICBhZ2FpbnN0IHRoZSB0YXJnZXQgbGlzdCwgYW5kIGEgc3RhdHVzIG1lc3NhZ2UgaXMgZGlzcGxheWVkIGZvciBhbnkgaGl0cy4KICAgICAgICBUaGUgZmxhZyAtQ2hlY2tBY2Nlc3Mgd2lsbCBjaGVjayBlYWNoIHBvc2l0aXZlIGhvc3QgdG8gc2VlIGlmIHRoZSBjdXJyZW50CiAgICAgICAgdXNlciBoYXMgbG9jYWwgYWRtaW4gYWNjZXNzIHRvIHRoZSBtYWNoaW5lLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIEhvc3QgYXJyYXkgdG8gZW51bWVyYXRlLCBwYXNzYWJsZSBvbiB0aGUgcGlwZWxpbmUuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckZpbGUKCiAgICAgICAgRmlsZSBvZiBob3N0bmFtZXMvSVBzIHRvIHNlYXJjaC4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyRmlsdGVyCgogICAgICAgIEhvc3QgZmlsdGVyIG5hbWUgdG8gcXVlcnkgQUQgZm9yLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckFEU3BhdGgKCiAgICAgICAgVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoIGZvciBob3N0cywgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCiAgICAuUEFSQU1FVEVSIFVuY29uc3RyYWluZWQKCiAgICAgICAgU3dpdGNoLiBPbmx5IGVudW1lcmF0ZSBjb21wdXRlcnMgdGhhdCBoYXZlIHVuY29uc3RyYWluZWQgZGVsZWdhdGlvbi4KCiAgICAuUEFSQU1FVEVSIEdyb3VwTmFtZQoKICAgICAgICBHcm91cCBuYW1lIHRvIHF1ZXJ5IGZvciB0YXJnZXQgdXNlcnMuCgogICAgLlBBUkFNRVRFUiBUYXJnZXRTZXJ2ZXIKCiAgICAgICAgSHVudCBmb3IgdXNlcnMgd2hvIGFyZSBlZmZlY3RpdmUgbG9jYWwgYWRtaW5zIG9uIGEgdGFyZ2V0IHNlcnZlci4KCiAgICAuUEFSQU1FVEVSIFVzZXJOYW1lCgogICAgICAgIFNwZWNpZmljIHVzZXJuYW1lIHRvIHNlYXJjaCBmb3IuCgogICAgLlBBUkFNRVRFUiBVc2VyRmlsdGVyCgogICAgICAgIEEgY3VzdG9taXplZCBsZGFwIGZpbHRlciBzdHJpbmcgdG8gdXNlIGZvciB1c2VyIGVudW1lcmF0aW9uLCBlLmcuICIoZGVzY3JpcHRpb249KmFkbWluKikiCgogICAgLlBBUkFNRVRFUiBVc2VyQURTcGF0aAoKICAgICAgICBUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2ggZm9yIHVzZXJzLCBlLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiCiAgICAgICAgVXNlZnVsIGZvciBPVSBxdWVyaWVzLgoKICAgIC5QQVJBTUVURVIgVXNlckZpbGUKCiAgICAgICAgRmlsZSBvZiB1c2VybmFtZXMgdG8gc2VhcmNoIGZvci4KCiAgICAuUEFSQU1FVEVSIEFkbWluQ291bnQKCiAgICAgICAgU3dpdGNoLiBIdW50IGZvciB1c2VycyB3aXRoIGFkbWluQ291bnQ9MS4KCiAgICAuUEFSQU1FVEVSIEFsbG93RGVsZWdhdGlvbgoKICAgICAgICBTd2l0Y2guIFJldHVybiB1c2VyIGFjY291bnRzIHRoYXQgYXJlIG5vdCBtYXJrZWQgYXMgJ3NlbnNpdGl2ZSBhbmQgbm90IGFsbG93ZWQgZm9yIGRlbGVnYXRpb24nCgogICAgLlBBUkFNRVRFUiBTdG9wT25TdWNjZXNzCgogICAgICAgIFN3aXRjaC4gU3RvcCBodW50aW5nIGFmdGVyIGZpbmRpbmcgYWZ0ZXIgZmluZGluZyBhIHRhcmdldCB1c2VyLgoKICAgIC5QQVJBTUVURVIgTm9QaW5nCgogICAgICAgIERvbid0IHBpbmcgZWFjaCBob3N0IHRvIGVuc3VyZSBpdCdzIHVwIGJlZm9yZSBlbnVtZXJhdGluZy4KCiAgICAuUEFSQU1FVEVSIENoZWNrQWNjZXNzCgogICAgICAgIFN3aXRjaC4gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgdXNlciBoYXMgbG9jYWwgYWRtaW4gYWNjZXNzIHRvIGZvdW5kIG1hY2hpbmVzLgoKICAgIC5QQVJBTUVURVIgRGVsYXkKCiAgICAgICAgRGVsYXkgYmV0d2VlbiBlbnVtZXJhdGluZyBob3N0cywgZGVmYXVsdHMgdG8gMAoKICAgIC5QQVJBTUVURVIgSml0dGVyCgogICAgICAgIEppdHRlciBmb3IgdGhlIGhvc3QgZGVsYXksIGRlZmF1bHRzIHRvICsvLSAwLjMKCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBEb21haW4gZm9yIHF1ZXJ5IGZvciBtYWNoaW5lcywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgU2hvd0FsbAoKICAgICAgICBTd2l0Y2guIFJldHVybiBhbGwgdXNlciBsb2NhdGlvbiByZXN1bHRzLCBpLmUuIEludm9rZS1Vc2VyVmlldyBmdW5jdGlvbmFsaXR5LgoKICAgIC5QQVJBTUVURVIgU2VhcmNoRm9yZXN0CgogICAgICAgIFN3aXRjaC4gU2VhcmNoIGFsbCBkb21haW5zIGluIHRoZSBmb3Jlc3QgZm9yIHRhcmdldCB1c2VycyBpbnN0ZWFkIG9mIGp1c3QKICAgICAgICBhIHNpbmdsZSBkb21haW4uCgogICAgLlBBUkFNRVRFUiBTdGVhbHRoCgogICAgICAgIFN3aXRjaC4gT25seSBlbnVtZXJhdGUgc2Vzc2lvbnMgZnJvbSBjb25ub25seSB1c2VkIHRhcmdldCBzZXJ2ZXJzLgoKICAgIC5QQVJBTUVURVIgU3RlYWx0aFNvdXJjZQoKICAgICAgICBUaGUgc291cmNlIG9mIHRhcmdldCBzZXJ2ZXJzIHRvIHVzZSwgJ0RGUycgKGRpc3RyaWJ1dGVkIGZpbGUgc2VydmVycyksCiAgICAgICAgJ0RDJyAoZG9tYWluIGNvbnRyb2xsZXJzKSwgJ0ZpbGUnIChmaWxlIHNlcnZlcnMpLCBvciAnQWxsJwoKICAgIC5QQVJBTUVURVIgRm9yZWlnblVzZXJzCgogICAgICAgIFN3aXRjaC4gT25seSByZXR1cm4gcmVzdWx0cyB0aGF0IGFyZSBub3QgcGFydCBvZiBzZWFyY2hlZCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBUaHJlYWRzCgogICAgICAgIFRoZSBtYXhpbXVtIGNvbmN1cnJlbnQgdGhyZWFkcyB0byBleGVjdXRlLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gSW52b2tlLVVzZXJIdW50ZXIgLUNoZWNrQWNjZXNzCgogICAgICAgIEZpbmRzIG1hY2hpbmVzIG9uIHRoZSBsb2NhbCBkb21haW4gd2hlcmUgZG9tYWluIGFkbWlucyBhcmUgbG9nZ2VkIGludG8KICAgICAgICBhbmQgY2hlY2tzIGlmIHRoZSBjdXJyZW50IHVzZXIgaGFzIGxvY2FsIGFkbWluaXN0cmF0b3IgYWNjZXNzLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gSW52b2tlLVVzZXJIdW50ZXIgLURvbWFpbiAndGVzdGluZycKCiAgICAgICAgRmluZHMgbWFjaGluZXMgb24gdGhlICd0ZXN0aW5nJyBkb21haW4gd2hlcmUgZG9tYWluIGFkbWlucyBhcmUgbG9nZ2VkIGludG8uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBJbnZva2UtVXNlckh1bnRlciAtVGhyZWFkcyAyMAoKICAgICAgICBNdWx0aS10aHJlYWRlZCB1c2VyIGh1bnRpbmcsIHJlcGxhY2VzIEludm9rZS1Vc2VySHVudGVyVGhyZWFkZWQuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBJbnZva2UtVXNlckh1bnRlciAtVXNlckZpbGUgdXNlcnMudHh0IC1Db21wdXRlckZpbGUgaG9zdHMudHh0CgogICAgICAgIEZpbmRzIG1hY2hpbmVzIGluIGhvc3RzLnR4dCB3aGVyZSBhbnkgbWVtYmVycyBvZiB1c2Vycy50eHQgYXJlIGxvZ2dlZCBpbgogICAgICAgIG9yIGhhdmUgc2Vzc2lvbnMuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBJbnZva2UtVXNlckh1bnRlciAtR3JvdXBOYW1lICJQb3dlciBVc2VycyIgLURlbGF5IDYwCgogICAgICAgIEZpbmQgbWFjaGluZXMgb24gdGhlIGRvbWFpbiB3aGVyZSBtZW1iZXJzIG9mIHRoZSAiUG93ZXIgVXNlcnMiIGdyb3VwcyBhcmUKICAgICAgICBsb2dnZWQgaW50byB3aXRoIGEgNjAgc2Vjb25kICgrLy0gKi4zKSByYW5kb21pemVkIGRlbGF5IGJldHdlZW4KICAgICAgICB0b3VjaGluZyBlYWNoIGhvc3QuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBJbnZva2UtVXNlckh1bnRlciAtVGFyZ2V0U2VydmVyIEZJTEVTRVJWRVIKCiAgICAgICAgUXVlcnkgRklMRVNFUlZFUiBmb3IgdXNlcmVzIHdobyBhcmUgZWZmZWN0aXZlIGxvY2FsIGFkbWluaXN0cmF0b3JzIHVzaW5nCiAgICAgICAgR2V0LU5ldExvY2FsR3JvdXAgLVJlY3Vyc2UsIGFuZCBodW50IGZvciB0aGF0IHVzZXIgc2V0IG9uIHRoZSBuZXR3b3JrLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gSW52b2tlLVVzZXJIdW50ZXIgLVNlYXJjaEZvcmVzdAoKICAgICAgICBGaW5kIGFsbCBtYWNoaW5lcyBpbiB0aGUgY3VycmVudCBmb3Jlc3Qgd2hlcmUgZG9tYWluIGFkbWlucyBhcmUgbG9nZ2VkIGluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gSW52b2tlLVVzZXJIdW50ZXIgLVN0ZWFsdGgKCiAgICAgICAgRXhlY3V0ZXMgb2xkIEludm9rZS1TdGVhbHRoVXNlckh1bnRlciBmdW5jdGlvbmFsaXR5LCBlbnVtZXJhdGluZyBjb21tb25seQogICAgICAgIHVzZWQgc2VydmVycyBhbmQgY2hlY2tpbmcganVzdCBzZXNzaW9ucyBmb3IgZWFjaC4KCiAgICAuTElOSwogICAgICAgIGh0dHA6Ly9ibG9nLmhhcm1qMHkubmV0CiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MCxWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0cycpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lLAoKICAgICAgICBbVmFsaWRhdGVTY3JpcHQoe1Rlc3QtUGF0aCAtUGF0aCAkXyB9KV0KICAgICAgICBbQWxpYXMoJ0hvc3RMaXN0JyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJGaWxlLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckZpbHRlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJBRFNwYXRoLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRVbmNvbnN0cmFpbmVkLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcm91cE5hbWUgPSAnRG9tYWluIEFkbWlucycsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRhcmdldFNlcnZlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlck5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJGaWx0ZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJBRFNwYXRoLAoKICAgICAgICBbVmFsaWRhdGVTY3JpcHQoe1Rlc3QtUGF0aCAtUGF0aCAkXyB9KV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyRmlsZSwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkQWRtaW5Db3VudCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkQWxsb3dEZWxlZ2F0aW9uLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRDaGVja0FjY2VzcywKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU3RvcE9uU3VjY2VzcywKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkTm9QaW5nLAoKICAgICAgICBbVUludDMyXQogICAgICAgICREZWxheSA9IDAsCgogICAgICAgIFtEb3VibGVdCiAgICAgICAgJEppdHRlciA9IC4zLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFNob3dBbGwsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFNlYXJjaEZvcmVzdCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU3RlYWx0aCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbVmFsaWRhdGVTZXQoIkRGUyIsIkRDIiwiRmlsZSIsIkFsbCIpXQogICAgICAgICRTdGVhbHRoU291cmNlID0iQWxsIiwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRm9yZWlnblVzZXJzLAoKICAgICAgICBbSW50XQogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwKV0KICAgICAgICAkVGhyZWFkcwogICAgKQoKICAgIGJlZ2luIHsKCiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRGVidWcnXSkgewogICAgICAgICAgICAkRGVidWdQcmVmZXJlbmNlID0gJ0NvbnRpbnVlJwogICAgICAgIH0KCiAgICAgICAgIyByYW5kb20gb2JqZWN0IGZvciBkZWxheQogICAgICAgICRSYW5kTm8gPSBOZXctT2JqZWN0IFN5c3RlbS5SYW5kb20KCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFJ1bm5pbmcgSW52b2tlLVVzZXJIdW50ZXIgd2l0aCBkZWxheSBvZiAkRGVsYXkiCgogICAgICAgICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAgICAgIwogICAgICAgICMgRmlyc3Qgd2UgYnVpbGQgdGhlIGhvc3QgdGFyZ2V0IHNldAogICAgICAgICMKICAgICAgICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKICAgICAgICBpZigkQ29tcHV0ZXJGaWxlKSB7CiAgICAgICAgICAgICMgaWYgd2UncmUgdXNpbmcgYSBob3N0IGxpc3QsIHJlYWQgdGhlIHRhcmdldHMgaW4gYW5kIGFkZCB0aGVtIHRvIHRoZSB0YXJnZXQgbGlzdAogICAgICAgICAgICAkQ29tcHV0ZXJOYW1lID0gR2V0LUNvbnRlbnQgLVBhdGggJENvbXB1dGVyRmlsZQogICAgICAgIH0KCiAgICAgICAgaWYoISRDb21wdXRlck5hbWUpIHsgCiAgICAgICAgICAgIFtBcnJheV0kQ29tcHV0ZXJOYW1lID0gQCgpCgogICAgICAgICAgICBpZigkRG9tYWluKSB7CiAgICAgICAgICAgICAgICAkVGFyZ2V0RG9tYWlucyA9IEAoJERvbWFpbikKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYoJFNlYXJjaEZvcmVzdCkgewogICAgICAgICAgICAgICAgIyBnZXQgQUxMIHRoZSBkb21haW5zIGluIHRoZSBmb3Jlc3QgdG8gc2VhcmNoCiAgICAgICAgICAgICAgICAkVGFyZ2V0RG9tYWlucyA9IEdldC1OZXRGb3Jlc3REb21haW4gfCBGb3JFYWNoLU9iamVjdCB7ICRfLk5hbWUgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgIyB1c2UgdGhlIGxvY2FsIGRvbWFpbgogICAgICAgICAgICAgICAgJFRhcmdldERvbWFpbnMgPSBAKCAoR2V0LU5ldERvbWFpbikubmFtZSApCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGlmKCRTdGVhbHRoKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJTdGVhbHRoIG1vZGUhIEVudW1lcmF0aW5nIGNvbW1vbmx5IHVzZWQgc2VydmVycyIKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlN0ZWFsdGggc291cmNlOiAkU3RlYWx0aFNvdXJjZSIKCiAgICAgICAgICAgICAgICBGb3JFYWNoICgkRG9tYWluIGluICRUYXJnZXREb21haW5zKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCgkU3RlYWx0aFNvdXJjZSAtZXEgIkZpbGUiKSAtb3IgKCRTdGVhbHRoU291cmNlIC1lcSAiQWxsIikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFF1ZXJ5aW5nIGRvbWFpbiAkRG9tYWluIGZvciBGaWxlIFNlcnZlcnMuLi4iCiAgICAgICAgICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgKz0gR2V0LU5ldEZpbGVTZXJ2ZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICgoJFN0ZWFsdGhTb3VyY2UgLWVxICJERlMiKSAtb3IgKCRTdGVhbHRoU291cmNlIC1lcSAiQWxsIikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFF1ZXJ5aW5nIGRvbWFpbiAkRG9tYWluIGZvciBERlMgU2VydmVycy4uLiIKICAgICAgICAgICAgICAgICAgICAgICAgJENvbXB1dGVyTmFtZSArPSBHZXQtREZTc2hhcmUgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIHwgRm9yRWFjaC1PYmplY3QgeyRfLlJlbW90ZVNlcnZlck5hbWV9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICgoJFN0ZWFsdGhTb3VyY2UgLWVxICJEQyIpIC1vciAoJFN0ZWFsdGhTb3VyY2UgLWVxICJBbGwiKSkgewogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gUXVlcnlpbmcgZG9tYWluICREb21haW4gZm9yIERvbWFpbiBDb250cm9sbGVycy4uLiIKICAgICAgICAgICAgICAgICAgICAgICAgJENvbXB1dGVyTmFtZSArPSBHZXQtTmV0RG9tYWluQ29udHJvbGxlciAtTERBUCAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgfCBGb3JFYWNoLU9iamVjdCB7ICRfLmRuc2hvc3RuYW1lfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIEZvckVhY2ggKCREb21haW4gaW4gJFRhcmdldERvbWFpbnMpIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gUXVlcnlpbmcgZG9tYWluICREb21haW4gZm9yIGhvc3RzIgoKICAgICAgICAgICAgICAgICAgICAkQXJndW1lbnRzID0gQHsKICAgICAgICAgICAgICAgICAgICAgICAgJ0RvbWFpbicgPSAkRG9tYWluCiAgICAgICAgICAgICAgICAgICAgICAgICdEb21haW5Db250cm9sbGVyJyA9ICREb21haW5Db250cm9sbGVyCiAgICAgICAgICAgICAgICAgICAgICAgICdBRFNwYXRoJyA9ICRBRFNwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICdGaWx0ZXInID0gJENvbXB1dGVyRmlsdGVyCiAgICAgICAgICAgICAgICAgICAgICAgICdVbmNvbnN0cmFpbmVkJyA9ICRVbmNvbnN0cmFpbmVkCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAkQ29tcHV0ZXJOYW1lICs9IEdldC1OZXRDb21wdXRlciBAQXJndW1lbnRzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgcmVtb3ZlIGFueSBudWxsIHRhcmdldCBob3N0cywgdW5pcXVpZnkgdGhlIGxpc3QgYW5kIHNodWZmbGUgaXQKICAgICAgICAgICAgJENvbXB1dGVyTmFtZSA9ICRDb21wdXRlck5hbWUgfCBXaGVyZS1PYmplY3QgeyAkXyB9IHwgU29ydC1PYmplY3QgLVVuaXF1ZSB8IFNvcnQtT2JqZWN0IHsgR2V0LVJhbmRvbSB9CiAgICAgICAgICAgIGlmKCQoJENvbXB1dGVyTmFtZS5Db3VudCkgLWVxIDApIHsKICAgICAgICAgICAgICAgIHRocm93ICJObyBob3N0cyBmb3VuZCEiCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAgICAgIwogICAgICAgICMgTm93IHdlIGJ1aWxkIHRoZSB1c2VyIHRhcmdldCBzZXQKICAgICAgICAjCiAgICAgICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCiAgICAgICAgIyB1c2VycyB3ZSdyZSBnb2luZyB0byBiZSBzZWFyY2hpbmcgZm9yCiAgICAgICAgJFRhcmdldFVzZXJzID0gQCgpCgogICAgICAgICMgZ2V0IHRoZSBjdXJyZW50IHVzZXIgc28gd2UgY2FuIGlnbm9yZSBpdCBpbiB0aGUgcmVzdWx0cwogICAgICAgICRDdXJyZW50VXNlciA9IChbRW52aXJvbm1lbnRdOjpVc2VyTmFtZSkudG9Mb3dlcigpCgogICAgICAgICMgaWYgd2UncmUgc2hvd2luZyBhbGwgcmVzdWx0cywgc2tpcCB1c2VybmFtZSBlbnVtZXJhdGlvbgogICAgICAgIGlmKCRTaG93QWxsIC1vciAkRm9yZWlnblVzZXJzKSB7CiAgICAgICAgICAgICRVc2VyID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAkVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNZW1iZXJEb21haW4nICROdWxsCiAgICAgICAgICAgICRVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ01lbWJlck5hbWUnICcqJwogICAgICAgICAgICAkVGFyZ2V0VXNlcnMgPSBAKCRVc2VyKQoKICAgICAgICAgICAgaWYoJEZvcmVpZ25Vc2VycykgewogICAgICAgICAgICAgICAgIyBpZiB3ZSdyZSBzZWFyY2hpbmcgZm9yIHVzZXIgcmVzdWx0cyBub3QgaW4gdGhlIHByaW1hcnkgZG9tYWluCiAgICAgICAgICAgICAgICAka3JidGd0TmFtZSA9IENvbnZlcnQtQUROYW1lIC1PYmplY3ROYW1lICJrcmJ0Z3RAJCgkRG9tYWluKSIgLUlucHV0VHlwZSBTaW1wbGUgLU91dHB1dFR5cGUgTlQ0CiAgICAgICAgICAgICAgICAkRG9tYWluU2hvcnROYW1lID0gJGtyYnRndE5hbWUuc3BsaXQoIlwiKVswXQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICMgaWYgd2Ugd2FudCB0byBodW50IGZvciB0aGUgZWZmZWN0aXZlIGRvbWFpbiB1c2VycyB3aG8gY2FuIGFjY2VzcyBhIHRhcmdldCBzZXJ2ZXIKICAgICAgICBlbHNlaWYoJFRhcmdldFNlcnZlcikgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJRdWVyeWluZyB0YXJnZXQgc2VydmVyICckVGFyZ2V0U2VydmVyJyBmb3IgbG9jYWwgdXNlcnMiCiAgICAgICAgICAgICRUYXJnZXRVc2VycyA9IEdldC1OZXRMb2NhbEdyb3VwICRUYXJnZXRTZXJ2ZXIgLVJlY3Vyc2UgfCBXaGVyZS1PYmplY3Qgeygtbm90ICRfLklzR3JvdXApIC1hbmQgJF8uSXNEb21haW4gfSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICRVc2VyID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgJFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWVtYmVyRG9tYWluJyAoJF8uQWNjb3VudE5hbWUpLnNwbGl0KCIvIilbMF0udG9Mb3dlcigpIAogICAgICAgICAgICAgICAgJFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWVtYmVyTmFtZScgKCRfLkFjY291bnROYW1lKS5zcGxpdCgiLyIpWzFdLnRvTG93ZXIoKSAKICAgICAgICAgICAgICAgICRVc2VyCiAgICAgICAgICAgIH0gIHwgV2hlcmUtT2JqZWN0IHskX30KICAgICAgICB9CiAgICAgICAgIyBpZiB3ZSBnZXQgYSBzcGVjaWZpYyB1c2VybmFtZSwgb25seSB1c2UgdGhhdAogICAgICAgIGVsc2VpZigkVXNlck5hbWUpIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFVzaW5nIHRhcmdldCB1c2VyICckVXNlck5hbWUnLi4uIgogICAgICAgICAgICAkVXNlciA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgaWYoJFRhcmdldERvbWFpbnMpIHsKICAgICAgICAgICAgICAgICRVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ01lbWJlckRvbWFpbicgJFRhcmdldERvbWFpbnNbMF0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ01lbWJlckRvbWFpbicgJE51bGwKICAgICAgICAgICAgfQogICAgICAgICAgICAkVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNZW1iZXJOYW1lJyAkVXNlck5hbWUuVG9Mb3dlcigpCiAgICAgICAgICAgICRUYXJnZXRVc2VycyA9IEAoJFVzZXIpCiAgICAgICAgfQogICAgICAgICMgcmVhZCBpbiBhIHRhcmdldCB1c2VyIGxpc3QgaWYgd2UgaGF2ZSBvbmUKICAgICAgICBlbHNlaWYoJFVzZXJGaWxlKSB7CiAgICAgICAgICAgICRUYXJnZXRVc2VycyA9IEdldC1Db250ZW50IC1QYXRoICRVc2VyRmlsZSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICRVc2VyID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgaWYoJFRhcmdldERvbWFpbnMpIHsKICAgICAgICAgICAgICAgICAgICAkVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNZW1iZXJEb21haW4nICRUYXJnZXREb21haW5zWzBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNZW1iZXJEb21haW4nICROdWxsCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNZW1iZXJOYW1lJyAkXwogICAgICAgICAgICAgICAgJFVzZXIKICAgICAgICAgICAgfSAgfCBXaGVyZS1PYmplY3QgeyRffQogICAgICAgIH0KICAgICAgICBlbHNlaWYoJFVzZXJBRFNwYXRoIC1vciAkVXNlckZpbHRlciAtb3IgJEFkbWluQ291bnQpIHsKICAgICAgICAgICAgRm9yRWFjaCAoJERvbWFpbiBpbiAkVGFyZ2V0RG9tYWlucykgewoKICAgICAgICAgICAgICAgICRBcmd1bWVudHMgPSBAewogICAgICAgICAgICAgICAgICAgICdEb21haW4nID0gJERvbWFpbgogICAgICAgICAgICAgICAgICAgICdEb21haW5Db250cm9sbGVyJyA9ICREb21haW5Db250cm9sbGVyCiAgICAgICAgICAgICAgICAgICAgJ0FEU3BhdGgnID0gJFVzZXJBRFNwYXRoCiAgICAgICAgICAgICAgICAgICAgJ0ZpbHRlcicgPSAkVXNlckZpbHRlcgogICAgICAgICAgICAgICAgICAgICdBZG1pbkNvdW50JyA9ICRBZG1pbkNvdW50CiAgICAgICAgICAgICAgICAgICAgJ0FsbG93RGVsZWdhdGlvbicgPSAkQWxsb3dEZWxlZ2F0aW9uCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFF1ZXJ5aW5nIGRvbWFpbiAkRG9tYWluIGZvciB1c2VycyIKICAgICAgICAgICAgICAgICRUYXJnZXRVc2VycyArPSBHZXQtTmV0VXNlciBAQXJndW1lbnRzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRVc2VyID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICRVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ01lbWJlckRvbWFpbicgJERvbWFpbgogICAgICAgICAgICAgICAgICAgICRVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ01lbWJlck5hbWUnICRfLnNhbWFjY291bnRuYW1lCiAgICAgICAgICAgICAgICAgICAgJFVzZXIKICAgICAgICAgICAgICAgIH0gIHwgV2hlcmUtT2JqZWN0IHskX30KCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIEZvckVhY2ggKCREb21haW4gaW4gJFRhcmdldERvbWFpbnMpIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBRdWVyeWluZyBkb21haW4gJERvbWFpbiBmb3IgdXNlcnMgb2YgZ3JvdXAgJyRHcm91cE5hbWUnIgogICAgICAgICAgICAgICAgJFRhcmdldFVzZXJzICs9IEdldC1OZXRHcm91cE1lbWJlciAtR3JvdXBOYW1lICRHcm91cE5hbWUgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICgoICgtbm90ICRTaG93QWxsKSAtYW5kICgtbm90ICRGb3JlaWduVXNlcnMpICkgLWFuZCAoKCEkVGFyZ2V0VXNlcnMpIC1vciAoJFRhcmdldFVzZXJzLkNvdW50IC1lcSAwKSkpIHsKICAgICAgICAgICAgdGhyb3cgIlshXSBObyB1c2VycyBmb3VuZCB0byBzZWFyY2ggZm9yISIKICAgICAgICB9CgogICAgICAgICMgc2NyaXB0IGJsb2NrIHRoYXQgZW51bWVyYXRlcyBhIHNlcnZlcgogICAgICAgICRIb3N0RW51bUJsb2NrID0gewogICAgICAgICAgICBwYXJhbSgkQ29tcHV0ZXJOYW1lLCAkUGluZywgJFRhcmdldFVzZXJzLCAkQ3VycmVudFVzZXIsICRTdGVhbHRoLCAkRG9tYWluU2hvcnROYW1lKQoKICAgICAgICAgICAgIyBvcHRpb25hbGx5IGNoZWNrIGlmIHRoZSBzZXJ2ZXIgaXMgdXAgZmlyc3QKICAgICAgICAgICAgJFVwID0gJFRydWUKICAgICAgICAgICAgaWYoJFBpbmcpIHsKICAgICAgICAgICAgICAgICRVcCA9IFRlc3QtQ29ubmVjdGlvbiAtQ291bnQgMSAtUXVpZXQgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJFVwKSB7CiAgICAgICAgICAgICAgICBpZighJERvbWFpblNob3J0TmFtZSkgewogICAgICAgICAgICAgICAgICAgICMgaWYgd2UncmUgbm90IHNlYXJjaGluZyBmb3IgZm9yZWlnbiB1c2VycywgY2hlY2sgc2Vzc2lvbiBpbmZvcm1hdGlvbgogICAgICAgICAgICAgICAgICAgICRTZXNzaW9ucyA9IEdldC1OZXRTZXNzaW9uIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZQogICAgICAgICAgICAgICAgICAgIEZvckVhY2ggKCRTZXNzaW9uIGluICRTZXNzaW9ucykgewogICAgICAgICAgICAgICAgICAgICAgICAkVXNlck5hbWUgPSAkU2Vzc2lvbi5zZXNpMTBfdXNlcm5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJENOYW1lID0gJFNlc3Npb24uc2VzaTEwX2NuYW1lCgogICAgICAgICAgICAgICAgICAgICAgICBpZigkQ05hbWUgLWFuZCAkQ05hbWUuU3RhcnRzV2l0aCgiXFwiKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJENOYW1lID0gJENOYW1lLlRyaW1TdGFydCgiXCIpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICMgbWFrZSBzdXJlIHdlIGhhdmUgYSByZXN1bHQKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCgkVXNlck5hbWUpIC1hbmQgKCRVc2VyTmFtZS50cmltKCkgLW5lICcnKSAtYW5kICghKCRVc2VyTmFtZSAtbWF0Y2ggJEN1cnJlbnRVc2VyKSkpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVGFyZ2V0VXNlcnMgfCBXaGVyZS1PYmplY3QgeyRVc2VyTmFtZSAtbGlrZSAkXy5NZW1iZXJOYW1lfSB8IEZvckVhY2gtT2JqZWN0IHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJElQQWRkcmVzcyA9IEAoR2V0LUlQQWRkcmVzcyAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUpWzBdLklQQWRkcmVzcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZFVzZXIgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyRG9tYWluJyAkXy5NZW1iZXJEb21haW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAkVXNlck5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSVBBZGRyZXNzJyAkSVBBZGRyZXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTZXNzaW9uRnJvbScgJENOYW1lCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgc2VlIGlmIHdlJ3JlIGNoZWNraW5nIHRvIHNlZSBpZiB3ZSBoYXZlIGxvY2FsIGFkbWluIGFjY2VzcyBvbiB0aGlzIG1hY2hpbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJENoZWNrQWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRBZG1pbiA9IEludm9rZS1DaGVja0xvY2FsQWRtaW5BY2Nlc3MgLUNvbXB1dGVyTmFtZSAkQ05hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMb2NhbEFkbWluJyAkQWRtaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTG9jYWxBZG1pbicgJE51bGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kVXNlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYoISRTdGVhbHRoKSB7CiAgICAgICAgICAgICAgICAgICAgIyBpZiB3ZSdyZSBub3QgJ3N0ZWFsdGh5JywgZW51bWVyYXRlIGxvZ2dlZG9uIHVzZXJzIGFzIHdlbGwKICAgICAgICAgICAgICAgICAgICAkTG9nZ2VkT24gPSBHZXQtTmV0TG9nZ2Vkb24gLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgRm9yRWFjaCAoJFVzZXIgaW4gJExvZ2dlZE9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyTmFtZSA9ICRVc2VyLndrdWkxX3VzZXJuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICMgVE9ETzogdHJhbnNsYXRlIGRvbWFpbiB0byBhdXRob3JhdGF0aXZlIG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgIyAgIHRoZW4gbWF0Y2ggZG9tYWluIG5hbWUgPwogICAgICAgICAgICAgICAgICAgICAgICAkVXNlckRvbWFpbiA9ICRVc2VyLndrdWkxX2xvZ29uX2RvbWFpbgoKICAgICAgICAgICAgICAgICAgICAgICAgIyBtYWtlIHN1cmUgd2V0IGhhdmUgYSByZXN1bHQKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCgkVXNlck5hbWUpIC1hbmQgKCRVc2VyTmFtZS50cmltKCkgLW5lICcnKSkgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUYXJnZXRVc2VycyB8IFdoZXJlLU9iamVjdCB7JFVzZXJOYW1lIC1saWtlICRfLk1lbWJlck5hbWV9IHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUHJvY2VlZCA9ICRUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJERvbWFpblNob3J0TmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJERvbWFpblNob3J0TmFtZS5Ub0xvd2VyKCkgLW5lICRVc2VyRG9tYWluLlRvTG93ZXIoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFByb2NlZWQgPSAkVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFByb2NlZWQgPSAkRmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkUHJvY2VlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSVBBZGRyZXNzID0gQChHZXQtSVBBZGRyZXNzIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSlbMF0uSVBBZGRyZXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZFVzZXIgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlckRvbWFpbicgJFVzZXJEb21haW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyTmFtZScgJFVzZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSVBBZGRyZXNzJyAkSVBBZGRyZXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU2Vzc2lvbkZyb20nICROdWxsCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIHNlZSBpZiB3ZSdyZSBjaGVja2luZyB0byBzZWUgaWYgd2UgaGF2ZSBsb2NhbCBhZG1pbiBhY2Nlc3Mgb24gdGhpcyBtYWNoaW5lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkQ2hlY2tBY2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRBZG1pbiA9IEludm9rZS1DaGVja0xvY2FsQWRtaW5BY2Nlc3MgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0xvY2FsQWRtaW4nICRBZG1pbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMb2NhbEFkbWluJyAkTnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZFVzZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgfQoKICAgIHByb2Nlc3MgewoKICAgICAgICBpZigkVGhyZWFkcykgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJVc2luZyB0aHJlYWRpbmcgd2l0aCB0aHJlYWRzID0gJFRocmVhZHMiCgogICAgICAgICAgICAjIGlmIHdlJ3JlIHVzaW5nIHRocmVhZGluZywga2ljayBvZmYgdGhlIHNjcmlwdCBibG9jayB3aXRoIEludm9rZS1UaHJlYWRlZEZ1bmN0aW9uCiAgICAgICAgICAgICRTY3JpcHRQYXJhbXMgPSBAewogICAgICAgICAgICAgICAgJ1BpbmcnID0gJCgtbm90ICROb1BpbmcpCiAgICAgICAgICAgICAgICAnVGFyZ2V0VXNlcnMnID0gJFRhcmdldFVzZXJzCiAgICAgICAgICAgICAgICAnQ3VycmVudFVzZXInID0gJEN1cnJlbnRVc2VyCiAgICAgICAgICAgICAgICAnU3RlYWx0aCcgPSAkU3RlYWx0aAogICAgICAgICAgICAgICAgJ0RvbWFpblNob3J0TmFtZScgPSAkRG9tYWluU2hvcnROYW1lCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMga2ljayBvZmYgdGhlIHRocmVhZGVkIHNjcmlwdCBibG9jayArIGFyZ3VtZW50cyAKICAgICAgICAgICAgSW52b2tlLVRocmVhZGVkRnVuY3Rpb24gLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1TY3JpcHRCbG9jayAkSG9zdEVudW1CbG9jayAtU2NyaXB0UGFyYW1ldGVycyAkU2NyaXB0UGFyYW1zIC1UaHJlYWRzICRUaHJlYWRzCiAgICAgICAgfQoKICAgICAgICBlbHNlIHsKICAgICAgICAgICAgaWYoLW5vdCAkTm9QaW5nIC1hbmQgKCRDb21wdXRlck5hbWUuY291bnQgLW5lIDEpKSB7CiAgICAgICAgICAgICAgICAjIHBpbmcgYWxsIGhvc3RzIGluIHBhcmFsbGVsCiAgICAgICAgICAgICAgICAkUGluZyA9IHtwYXJhbSgkQ29tcHV0ZXJOYW1lKSBpZihUZXN0LUNvbm5lY3Rpb24gLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1Db3VudCAxIC1RdWlldCAtRXJyb3JBY3Rpb24gU3RvcCl7JENvbXB1dGVyTmFtZX19CiAgICAgICAgICAgICAgICAkQ29tcHV0ZXJOYW1lID0gSW52b2tlLVRocmVhZGVkRnVuY3Rpb24gLU5vSW1wb3J0cyAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLVNjcmlwdEJsb2NrICRQaW5nIC1UaHJlYWRzIDEwMAogICAgICAgICAgICB9CgogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gVG90YWwgbnVtYmVyIG9mIGFjdGl2ZSBob3N0czogJCgkQ29tcHV0ZXJOYW1lLmNvdW50KSIKICAgICAgICAgICAgJENvdW50ZXIgPSAwCgogICAgICAgICAgICBGb3JFYWNoICgkQ29tcHV0ZXIgaW4gJENvbXB1dGVyTmFtZSkgewoKICAgICAgICAgICAgICAgICRDb3VudGVyID0gJENvdW50ZXIgKyAxCgogICAgICAgICAgICAgICAgIyBzbGVlcCBmb3Igb3VyIHNlbWktcmFuZG9taXplZCBpbnRlcnZhbAogICAgICAgICAgICAgICAgU3RhcnQtU2xlZXAgLVNlY29uZHMgJFJhbmROby5OZXh0KCgxLSRKaXR0ZXIpKiREZWxheSwgKDErJEppdHRlcikqJERlbGF5KQoKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBFbnVtZXJhdGluZyBzZXJ2ZXIgJENvbXB1dGVyICgkQ291bnRlciBvZiAkKCRDb21wdXRlck5hbWUuY291bnQpKSIKICAgICAgICAgICAgICAgICRSZXN1bHQgPSBJbnZva2UtQ29tbWFuZCAtU2NyaXB0QmxvY2sgJEhvc3RFbnVtQmxvY2sgLUFyZ3VtZW50TGlzdCAkQ29tcHV0ZXIsICRGYWxzZSwgJFRhcmdldFVzZXJzLCAkQ3VycmVudFVzZXIsICRTdGVhbHRoLCAkRG9tYWluU2hvcnROYW1lCiAgICAgICAgICAgICAgICAkUmVzdWx0CgogICAgICAgICAgICAgICAgaWYoJFJlc3VsdCAtYW5kICRTdG9wT25TdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFRhcmdldCB1c2VyIGZvdW5kLCByZXR1cm5pbmcgZWFybHkiCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgfQp9CgoKZnVuY3Rpb24gSW52b2tlLVN0ZWFsdGhVc2VySHVudGVyIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uPTAsVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdHMnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSwKCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHtUZXN0LVBhdGggLVBhdGggJF8gfSldCiAgICAgICAgW0FsaWFzKCdIb3N0TGlzdCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyRmlsZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJGaWx0ZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyQURTcGF0aCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkR3JvdXBOYW1lID0gJ0RvbWFpbiBBZG1pbnMnLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRUYXJnZXRTZXJ2ZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJOYW1lLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyRmlsdGVyLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyQURTcGF0aCwKCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHtUZXN0LVBhdGggLVBhdGggJF8gfSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlckZpbGUsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJENoZWNrQWNjZXNzLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRTdG9wT25TdWNjZXNzLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICROb1BpbmcsCgogICAgICAgIFtVSW50MzJdCiAgICAgICAgJERlbGF5ID0gMCwKCiAgICAgICAgW0RvdWJsZV0KICAgICAgICAkSml0dGVyID0gLjMsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU2hvd0FsbCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU2VhcmNoRm9yZXN0LAoKICAgICAgICBbU3RyaW5nXQogICAgICAgIFtWYWxpZGF0ZVNldCgiREZTIiwiREMiLCJGaWxlIiwiQWxsIildCiAgICAgICAgJFN0ZWFsdGhTb3VyY2UgPSJBbGwiCiAgICApCiAgICAjIGtpY2sgb2ZmIEludm9rZS1Vc2VySHVudGVyIHdpdGggc3RlYWx0aCBvcHRpb25zCiAgICBJbnZva2UtVXNlckh1bnRlciAtU3RlYWx0aCBAUFNCb3VuZFBhcmFtZXRlcnMKfQoKCmZ1bmN0aW9uIEludm9rZS1Qcm9jZXNzSHVudGVyIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBRdWVyeSB0aGUgcHJvY2VzcyBsaXN0cyBvZiByZW1vdGUgbWFjaGluZXMsIHNlYXJjaGluZyBmb3IKICAgICAgICBwcm9jZXNzZXMgd2l0aCBhIHNwZWNpZmljIG5hbWUgb3Igb3duZWQgYnkgYSBzcGVjaWZpYyB1c2VyLgogICAgICAgIFRoYW5rcyB0byBAcGF1bGJyYW5kYXUgZm9yIHRoZSBhcHByb2FjaCBpZGVhLgogICAgICAgIAogICAgICAgIEF1dGhvcjogQGhhcm1qMHkKICAgICAgICBMaWNlbnNlOiBCU0QgMy1DbGF1c2UKCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBIb3N0IGFycmF5IHRvIGVudW1lcmF0ZSwgcGFzc2FibGUgb24gdGhlIHBpcGVsaW5lLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJGaWxlCgogICAgICAgIEZpbGUgb2YgaG9zdG5hbWVzL0lQcyB0byBzZWFyY2guCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckZpbHRlcgoKICAgICAgICBIb3N0IGZpbHRlciBuYW1lIHRvIHF1ZXJ5IEFEIGZvciwgd2lsZGNhcmRzIGFjY2VwdGVkLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCBmb3IgaG9zdHMsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBQcm9jZXNzTmFtZQoKICAgICAgICBUaGUgbmFtZSBvZiB0aGUgcHJvY2VzcyB0byBodW50LCBvciBhIGNvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIG5hbWVzLgoKICAgIC5QQVJBTUVURVIgR3JvdXBOYW1lCgogICAgICAgIEdyb3VwIG5hbWUgdG8gcXVlcnkgZm9yIHRhcmdldCB1c2Vycy4KCiAgICAuUEFSQU1FVEVSIFRhcmdldFNlcnZlcgoKICAgICAgICBIdW50IGZvciB1c2VycyB3aG8gYXJlIGVmZmVjdGl2ZSBsb2NhbCBhZG1pbnMgb24gYSB0YXJnZXQgc2VydmVyLgoKICAgIC5QQVJBTUVURVIgVXNlck5hbWUKCiAgICAgICAgU3BlY2lmaWMgdXNlcm5hbWUgdG8gc2VhcmNoIGZvci4KCiAgICAuUEFSQU1FVEVSIFVzZXJGaWx0ZXIKCiAgICAgICAgQSBjdXN0b21pemVkIGxkYXAgZmlsdGVyIHN0cmluZyB0byB1c2UgZm9yIHVzZXIgZW51bWVyYXRpb24sIGUuZy4gIihkZXNjcmlwdGlvbj0qYWRtaW4qKSIKCiAgICAuUEFSQU1FVEVSIFVzZXJBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCBmb3IgdXNlcnMsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBVc2VyRmlsZQoKICAgICAgICBGaWxlIG9mIHVzZXJuYW1lcyB0byBzZWFyY2ggZm9yLgoKICAgIC5QQVJBTUVURVIgU3RvcE9uU3VjY2VzcwoKICAgICAgICBTd2l0Y2guIFN0b3AgaHVudGluZyBhZnRlciBmaW5kaW5nIGFmdGVyIGZpbmRpbmcgYSB0YXJnZXQgdXNlci9wcm9jZXNzLgoKICAgIC5QQVJBTUVURVIgTm9QaW5nCgogICAgICAgIFN3aXRjaC4gRG9uJ3QgcGluZyBlYWNoIGhvc3QgdG8gZW5zdXJlIGl0J3MgdXAgYmVmb3JlIGVudW1lcmF0aW5nLgoKICAgIC5QQVJBTUVURVIgRGVsYXkKCiAgICAgICAgRGVsYXkgYmV0d2VlbiBlbnVtZXJhdGluZyBob3N0cywgZGVmYXVsdHMgdG8gMAoKICAgIC5QQVJBTUVURVIgSml0dGVyCgogICAgICAgIEppdHRlciBmb3IgdGhlIGhvc3QgZGVsYXksIGRlZmF1bHRzIHRvICsvLSAwLjMKCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBEb21haW4gZm9yIHF1ZXJ5IGZvciBtYWNoaW5lcywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgU2hvd0FsbAoKICAgICAgICBTd2l0Y2guIFJldHVybiBhbGwgdXNlciBsb2NhdGlvbiByZXN1bHRzLgoKICAgIC5QQVJBTUVURVIgU2VhcmNoRm9yZXN0CgogICAgICAgIFN3aXRjaC4gU2VhcmNoIGFsbCBkb21haW5zIGluIHRoZSBmb3Jlc3QgZm9yIHRhcmdldCB1c2VycyBpbnN0ZWFkIG9mIGp1c3QKICAgICAgICBhIHNpbmdsZSBkb21haW4uCgogICAgLlBBUkFNRVRFUiBUaHJlYWRzCgogICAgICAgIFRoZSBtYXhpbXVtIGNvbmN1cnJlbnQgdGhyZWFkcyB0byBleGVjdXRlLgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBtYWNoaW5lL2RvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1Qcm9jZXNzSHVudGVyIC1Eb21haW4gJ3Rlc3RpbmcnCiAgICAgICAgCiAgICAgICAgRmluZHMgbWFjaGluZXMgb24gdGhlICd0ZXN0aW5nJyBkb21haW4gd2hlcmUgZG9tYWluIGFkbWlucyBoYXZlIGEKICAgICAgICBydW5uaW5nIHByb2Nlc3MuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBJbnZva2UtUHJvY2Vzc0h1bnRlciAtVGhyZWFkcyAyMAoKICAgICAgICBNdWx0aS10aHJlYWRlZCBwcm9jZXNzIGh1bnRpbmcsIHJlcGxhY2VzIEludm9rZS1Qcm9jZXNzSHVudGVyVGhyZWFkZWQuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBJbnZva2UtUHJvY2Vzc0h1bnRlciAtVXNlckZpbGUgdXNlcnMudHh0IC1Db21wdXRlckZpbGUgaG9zdHMudHh0CiAgICAgICAgCiAgICAgICAgRmluZHMgbWFjaGluZXMgaW4gaG9zdHMudHh0IHdoZXJlIGFueSBtZW1iZXJzIG9mIHVzZXJzLnR4dCBoYXZlIHJ1bm5pbmcKICAgICAgICBwcm9jZXNzZXMuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBJbnZva2UtUHJvY2Vzc0h1bnRlciAtR3JvdXBOYW1lICJQb3dlciBVc2VycyIgLURlbGF5IDYwCiAgICAgICAgCiAgICAgICAgRmluZCBtYWNoaW5lcyBvbiB0aGUgZG9tYWluIHdoZXJlIG1lbWJlcnMgb2YgdGhlICJQb3dlciBVc2VycyIgZ3JvdXBzIGhhdmUKICAgICAgICBydW5uaW5nIHByb2Nlc3NlcyB3aXRoIGEgNjAgc2Vjb25kICgrLy0gKi4zKSByYW5kb21pemVkIGRlbGF5IGJldHdlZW4KICAgICAgICB0b3VjaGluZyBlYWNoIGhvc3QuCgogICAgLkxJTksKCiAgICAgICAgaHR0cDovL2Jsb2cuaGFybWoweS5uZXQKIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3RzJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUsCgogICAgICAgIFtWYWxpZGF0ZVNjcmlwdCh7VGVzdC1QYXRoIC1QYXRoICRfIH0pXQogICAgICAgIFtBbGlhcygnSG9zdExpc3QnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckZpbGUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyRmlsdGVyLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckFEU3BhdGgsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFByb2Nlc3NOYW1lLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcm91cE5hbWUgPSAnRG9tYWluIEFkbWlucycsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRhcmdldFNlcnZlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlck5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJGaWx0ZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJBRFNwYXRoLAoKICAgICAgICBbVmFsaWRhdGVTY3JpcHQoe1Rlc3QtUGF0aCAtUGF0aCAkXyB9KV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyRmlsZSwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU3RvcE9uU3VjY2VzcywKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkTm9QaW5nLAoKICAgICAgICBbVUludDMyXQogICAgICAgICREZWxheSA9IDAsCgogICAgICAgIFtEb3VibGVdCiAgICAgICAgJEppdHRlciA9IC4zLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFNob3dBbGwsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFNlYXJjaEZvcmVzdCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRUaHJlYWRzLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgIGJlZ2luIHsKCiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRGVidWcnXSkgewogICAgICAgICAgICAkRGVidWdQcmVmZXJlbmNlID0gJ0NvbnRpbnVlJwogICAgICAgIH0KCiAgICAgICAgIyByYW5kb20gb2JqZWN0IGZvciBkZWxheQogICAgICAgICRSYW5kTm8gPSBOZXctT2JqZWN0IFN5c3RlbS5SYW5kb20KCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFJ1bm5pbmcgSW52b2tlLVByb2Nlc3NIdW50ZXIgd2l0aCBkZWxheSBvZiAkRGVsYXkiCgogICAgICAgICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAgICAgIwogICAgICAgICMgRmlyc3Qgd2UgYnVpbGQgdGhlIGhvc3QgdGFyZ2V0IHNldAogICAgICAgICMKICAgICAgICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKICAgICAgICAjIGlmIHdlJ3JlIHVzaW5nIGEgaG9zdCBsaXN0LCByZWFkIHRoZSB0YXJnZXRzIGluIGFuZCBhZGQgdGhlbSB0byB0aGUgdGFyZ2V0IGxpc3QKICAgICAgICBpZigkQ29tcHV0ZXJGaWxlKSB7CiAgICAgICAgICAgICRDb21wdXRlck5hbWUgPSBHZXQtQ29udGVudCAtUGF0aCAkQ29tcHV0ZXJGaWxlCiAgICAgICAgfQoKICAgICAgICBpZighJENvbXB1dGVyTmFtZSkgeyAKICAgICAgICAgICAgW2FycmF5XSRDb21wdXRlck5hbWUgPSBAKCkKCiAgICAgICAgICAgIGlmKCREb21haW4pIHsKICAgICAgICAgICAgICAgICRUYXJnZXREb21haW5zID0gQCgkRG9tYWluKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZigkU2VhcmNoRm9yZXN0KSB7CiAgICAgICAgICAgICAgICAjIGdldCBBTEwgdGhlIGRvbWFpbnMgaW4gdGhlIGZvcmVzdCB0byBzZWFyY2gKICAgICAgICAgICAgICAgICRUYXJnZXREb21haW5zID0gR2V0LU5ldEZvcmVzdERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCB8IEZvckVhY2gtT2JqZWN0IHsgJF8uTmFtZSB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAjIHVzZSB0aGUgbG9jYWwgZG9tYWluCiAgICAgICAgICAgICAgICAkVGFyZ2V0RG9tYWlucyA9IEAoIChHZXQtTmV0RG9tYWluIC1Eb21haW4gJERvbWFpbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCkubmFtZSApCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEZvckVhY2ggKCREb21haW4gaW4gJFRhcmdldERvbWFpbnMpIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBRdWVyeWluZyBkb21haW4gJERvbWFpbiBmb3IgaG9zdHMiCiAgICAgICAgICAgICAgICAkQ29tcHV0ZXJOYW1lICs9IEdldC1OZXRDb21wdXRlciAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUZpbHRlciAkQ29tcHV0ZXJGaWx0ZXIgLUFEU3BhdGggJENvbXB1dGVyQURTcGF0aAogICAgICAgICAgICB9CiAgICAgICAgCiAgICAgICAgICAgICMgcmVtb3ZlIGFueSBudWxsIHRhcmdldCBob3N0cywgdW5pcXVpZnkgdGhlIGxpc3QgYW5kIHNodWZmbGUgaXQKICAgICAgICAgICAgJENvbXB1dGVyTmFtZSA9ICRDb21wdXRlck5hbWUgfCBXaGVyZS1PYmplY3QgeyAkXyB9IHwgU29ydC1PYmplY3QgLVVuaXF1ZSB8IFNvcnQtT2JqZWN0IHsgR2V0LVJhbmRvbSB9CiAgICAgICAgICAgIGlmKCQoJENvbXB1dGVyTmFtZS5Db3VudCkgLWVxIDApIHsKICAgICAgICAgICAgICAgIHRocm93ICJObyBob3N0cyBmb3VuZCEiCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAgICAgIwogICAgICAgICMgTm93IHdlIGJ1aWxkIHRoZSB1c2VyIHRhcmdldCBzZXQKICAgICAgICAjCiAgICAgICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCiAgICAgICAgaWYoISRQcm9jZXNzTmFtZSkgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJObyBwcm9jZXNzIG5hbWUgc3BlY2lmaWVkLCBidWlsZGluZyBhIHRhcmdldCB1c2VyIHNldCIKCiAgICAgICAgICAgICMgdXNlcnMgd2UncmUgZ29pbmcgdG8gYmUgc2VhcmNoaW5nIGZvcgogICAgICAgICAgICAkVGFyZ2V0VXNlcnMgPSBAKCkKCiAgICAgICAgICAgICMgaWYgd2Ugd2FudCB0byBodW50IGZvciB0aGUgZWZmZWN0aXZlIGRvbWFpbiB1c2VycyB3aG8gY2FuIGFjY2VzcyBhIHRhcmdldCBzZXJ2ZXIKICAgICAgICAgICAgaWYoJFRhcmdldFNlcnZlcikgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiUXVlcnlpbmcgdGFyZ2V0IHNlcnZlciAnJFRhcmdldFNlcnZlcicgZm9yIGxvY2FsIHVzZXJzIgogICAgICAgICAgICAgICAgJFRhcmdldFVzZXJzID0gR2V0LU5ldExvY2FsR3JvdXAgJFRhcmdldFNlcnZlciAtUmVjdXJzZSB8IFdoZXJlLU9iamVjdCB7KC1ub3QgJF8uSXNHcm91cCkgLWFuZCAkXy5Jc0RvbWFpbiB9IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICgkXy5BY2NvdW50TmFtZSkuc3BsaXQoIi8iKVsxXS50b0xvd2VyKCkKICAgICAgICAgICAgICAgIH0gIHwgV2hlcmUtT2JqZWN0IHskX30KICAgICAgICAgICAgfQogICAgICAgICAgICAjIGlmIHdlIGdldCBhIHNwZWNpZmljIHVzZXJuYW1lLCBvbmx5IHVzZSB0aGF0CiAgICAgICAgICAgIGVsc2VpZigkVXNlck5hbWUpIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBVc2luZyB0YXJnZXQgdXNlciAnJFVzZXJOYW1lJy4uLiIKICAgICAgICAgICAgICAgICRUYXJnZXRVc2VycyA9IEAoICRVc2VyTmFtZS5Ub0xvd2VyKCkgKQogICAgICAgICAgICB9CiAgICAgICAgICAgICMgcmVhZCBpbiBhIHRhcmdldCB1c2VyIGxpc3QgaWYgd2UgaGF2ZSBvbmUKICAgICAgICAgICAgZWxzZWlmKCRVc2VyRmlsZSkgewogICAgICAgICAgICAgICAgJFRhcmdldFVzZXJzID0gR2V0LUNvbnRlbnQgLVBhdGggJFVzZXJGaWxlIHwgV2hlcmUtT2JqZWN0IHskX30KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYoJFVzZXJBRFNwYXRoIC1vciAkVXNlckZpbHRlcikgewogICAgICAgICAgICAgICAgRm9yRWFjaCAoJERvbWFpbiBpbiAkVGFyZ2V0RG9tYWlucykgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBRdWVyeWluZyBkb21haW4gJERvbWFpbiBmb3IgdXNlcnMiCiAgICAgICAgICAgICAgICAgICAgJFRhcmdldFVzZXJzICs9IEdldC1OZXRVc2VyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQURTcGF0aCAkVXNlckFEU3BhdGggLUZpbHRlciAkVXNlckZpbHRlciB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgJF8uc2FtYWNjb3VudG5hbWUKICAgICAgICAgICAgICAgICAgICB9ICB8IFdoZXJlLU9iamVjdCB7JF99CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBGb3JFYWNoICgkRG9tYWluIGluICRUYXJnZXREb21haW5zKSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFF1ZXJ5aW5nIGRvbWFpbiAkRG9tYWluIGZvciB1c2VycyBvZiBncm91cCAnJEdyb3VwTmFtZSciCiAgICAgICAgICAgICAgICAgICAgJFRhcmdldFVzZXJzICs9IEdldC1OZXRHcm91cE1lbWJlciAtR3JvdXBOYW1lICRHcm91cE5hbWUgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICRfLk1lbWJlck5hbWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgoLW5vdCAkU2hvd0FsbCkgLWFuZCAoKCEkVGFyZ2V0VXNlcnMpIC1vciAoJFRhcmdldFVzZXJzLkNvdW50IC1lcSAwKSkpIHsKICAgICAgICAgICAgICAgIHRocm93ICJbIV0gTm8gdXNlcnMgZm91bmQgdG8gc2VhcmNoIGZvciEiCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICMgc2NyaXB0IGJsb2NrIHRoYXQgZW51bWVyYXRlcyBhIHNlcnZlcgogICAgICAgICRIb3N0RW51bUJsb2NrID0gewogICAgICAgICAgICBwYXJhbSgkQ29tcHV0ZXJOYW1lLCAkUGluZywgJFByb2Nlc3NOYW1lLCAkVGFyZ2V0VXNlcnMsICRDcmVkZW50aWFsKQoKICAgICAgICAgICAgIyBvcHRpb25hbGx5IGNoZWNrIGlmIHRoZSBzZXJ2ZXIgaXMgdXAgZmlyc3QKICAgICAgICAgICAgJFVwID0gJFRydWUKICAgICAgICAgICAgaWYoJFBpbmcpIHsKICAgICAgICAgICAgICAgICRVcCA9IFRlc3QtQ29ubmVjdGlvbiAtQ291bnQgMSAtUXVpZXQgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJFVwKSB7CiAgICAgICAgICAgICAgICAjIHRyeSB0byBlbnVtZXJhdGUgYWxsIGFjdGl2ZSBwcm9jZXNzZXMgb24gdGhlIHJlbW90ZSBob3N0CiAgICAgICAgICAgICAgICAjIGFuZCBzZWFyY2ggZm9yIGEgc3BlY2lmaWMgcHJvY2VzcyBuYW1lCiAgICAgICAgICAgICAgICAkUHJvY2Vzc2VzID0gR2V0LU5ldFByb2Nlc3MgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlCgogICAgICAgICAgICAgICAgRm9yRWFjaCAoJFByb2Nlc3MgaW4gJFByb2Nlc3NlcykgewogICAgICAgICAgICAgICAgICAgICMgaWYgd2UncmUgaHVudGluZyBmb3IgYSBwcm9jZXNzIG5hbWUgb3IgY29tbWEtc2VwYXJhdGVkIG5hbWVzCiAgICAgICAgICAgICAgICAgICAgaWYoJFByb2Nlc3NOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRQcm9jZXNzTmFtZS5zcGxpdCgiLCIpIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRQcm9jZXNzLlByb2Nlc3NOYW1lIC1tYXRjaCAkXykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRQcm9jZXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIyBpZiB0aGUgc2Vzc2lvbiB1c2VyIGlzIGluIHRoZSB0YXJnZXQgbGlzdCwgZGlzcGxheSBzb21lIG91dHB1dAogICAgICAgICAgICAgICAgICAgIGVsc2VpZiAoJFRhcmdldFVzZXJzIC1jb250YWlucyAkUHJvY2Vzcy5Vc2VyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRQcm9jZXNzCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgIH0KCiAgICBwcm9jZXNzIHsKCiAgICAgICAgaWYoJFRocmVhZHMpIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiVXNpbmcgdGhyZWFkaW5nIHdpdGggdGhyZWFkcyA9ICRUaHJlYWRzIgoKICAgICAgICAgICAgIyBpZiB3ZSdyZSB1c2luZyB0aHJlYWRpbmcsIGtpY2sgb2ZmIHRoZSBzY3JpcHQgYmxvY2sgd2l0aCBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbgogICAgICAgICAgICAkU2NyaXB0UGFyYW1zID0gQHsKICAgICAgICAgICAgICAgICdQaW5nJyA9ICQoLW5vdCAkTm9QaW5nKQogICAgICAgICAgICAgICAgJ1Byb2Nlc3NOYW1lJyA9ICRQcm9jZXNzTmFtZQogICAgICAgICAgICAgICAgJ1RhcmdldFVzZXJzJyA9ICRUYXJnZXRVc2VycwogICAgICAgICAgICAgICAgJ0NyZWRlbnRpYWwnID0gJENyZWRlbnRpYWwKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBraWNrIG9mZiB0aGUgdGhyZWFkZWQgc2NyaXB0IGJsb2NrICsgYXJndW1lbnRzIAogICAgICAgICAgICBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbiAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1TY3JpcHRQYXJhbWV0ZXJzICRTY3JpcHRQYXJhbXMgLVRocmVhZHMgJFRocmVhZHMKICAgICAgICB9CgogICAgICAgIGVsc2UgewogICAgICAgICAgICBpZigtbm90ICROb1BpbmcgLWFuZCAoJENvbXB1dGVyTmFtZS5jb3VudCAtbmUgMSkpIHsKICAgICAgICAgICAgICAgICMgcGluZyBhbGwgaG9zdHMgaW4gcGFyYWxsZWwKICAgICAgICAgICAgICAgICRQaW5nID0ge3BhcmFtKCRDb21wdXRlck5hbWUpIGlmKFRlc3QtQ29ubmVjdGlvbiAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLUNvdW50IDEgLVF1aWV0IC1FcnJvckFjdGlvbiBTdG9wKXskQ29tcHV0ZXJOYW1lfX0KICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgPSBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbiAtTm9JbXBvcnRzIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSAtU2NyaXB0QmxvY2sgJFBpbmcgLVRocmVhZHMgMTAwCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBUb3RhbCBudW1iZXIgb2YgYWN0aXZlIGhvc3RzOiAkKCRDb21wdXRlck5hbWUuY291bnQpIgogICAgICAgICAgICAkQ291bnRlciA9IDAKCiAgICAgICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CgogICAgICAgICAgICAgICAgJENvdW50ZXIgPSAkQ291bnRlciArIDEKCiAgICAgICAgICAgICAgICAjIHNsZWVwIGZvciBvdXIgc2VtaS1yYW5kb21pemVkIGludGVydmFsCiAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkUmFuZE5vLk5leHQoKDEtJEppdHRlcikqJERlbGF5LCAoMSskSml0dGVyKSokRGVsYXkpCgogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIEVudW1lcmF0aW5nIHNlcnZlciAkQ29tcHV0ZXIgKCRDb3VudGVyIG9mICQoJENvbXB1dGVyTmFtZS5jb3VudCkpIgogICAgICAgICAgICAgICAgJFJlc3VsdCA9IEludm9rZS1Db21tYW5kIC1TY3JpcHRCbG9jayAkSG9zdEVudW1CbG9jayAtQXJndW1lbnRMaXN0ICRDb21wdXRlciwgJEZhbHNlLCAkUHJvY2Vzc05hbWUsICRUYXJnZXRVc2VycywgJENyZWRlbnRpYWwKICAgICAgICAgICAgICAgICRSZXN1bHQKCiAgICAgICAgICAgICAgICBpZigkUmVzdWx0IC1hbmQgJFN0b3BPblN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gVGFyZ2V0IHVzZXIvcHJvY2VzcyBmb3VuZCwgcmV0dXJuaW5nIGVhcmx5IgogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gSW52b2tlLUV2ZW50SHVudGVyIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBRdWVyaWVzIGFsbCBkb21haW4gY29udHJvbGxlcnMgb24gdGhlIG5ldHdvcmsgZm9yIGFjY291bnQKICAgICAgICBsb2dvbiBldmVudHMgKElEIDQ2MjQpIGFuZCBUR1QgcmVxdWVzdCBldmVudHMgKElEIDQ3NjgpLAogICAgICAgIHNlYXJjaGluZyBmb3IgdGFyZ2V0IHVzZXJzLgoKICAgICAgICBOb3RlOiBEb21haW4gQWRtaW4gKG9yIGVxdWl2KSByaWdodHMgYXJlIG5lZWRlZCB0byBxdWVyeQogICAgICAgIHRoaXMgaW5mb3JtYXRpb24gZnJvbSB0aGUgRENzLgoKICAgICAgICBBdXRob3I6IEBzaXhkdWIsIEBoYXJtajB5CiAgICAgICAgTGljZW5zZTogQlNEIDMtQ2xhdXNlCgogICAgLlBBUkFNRVRFUiBDb21wdXRlck5hbWUKCiAgICAgICAgSG9zdCBhcnJheSB0byBlbnVtZXJhdGUsIHBhc3NhYmxlIG9uIHRoZSBwaXBlbGluZS4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyRmlsZQoKICAgICAgICBGaWxlIG9mIGhvc3RuYW1lcy9JUHMgdG8gc2VhcmNoLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJGaWx0ZXIKCiAgICAgICAgSG9zdCBmaWx0ZXIgbmFtZSB0byBxdWVyeSBBRCBmb3IsIHdpbGRjYXJkcyBhY2NlcHRlZC4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyQURTcGF0aAoKICAgICAgICBUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2ggZm9yIGhvc3RzLCBlLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiCiAgICAgICAgVXNlZnVsIGZvciBPVSBxdWVyaWVzLgoKICAgIC5QQVJBTUVURVIgR3JvdXBOYW1lCgogICAgICAgIEdyb3VwIG5hbWUgdG8gcXVlcnkgZm9yIHRhcmdldCB1c2Vycy4KCiAgICAuUEFSQU1FVEVSIFRhcmdldFNlcnZlcgoKICAgICAgICBIdW50IGZvciB1c2VycyB3aG8gYXJlIGVmZmVjdGl2ZSBsb2NhbCBhZG1pbnMgb24gYSB0YXJnZXQgc2VydmVyLgoKICAgIC5QQVJBTUVURVIgVXNlck5hbWUKCiAgICAgICAgU3BlY2lmaWMgdXNlcm5hbWUgdG8gc2VhcmNoIGZvci4KCiAgICAuUEFSQU1FVEVSIFVzZXJGaWx0ZXIKCiAgICAgICAgQSBjdXN0b21pemVkIGxkYXAgZmlsdGVyIHN0cmluZyB0byB1c2UgZm9yIHVzZXIgZW51bWVyYXRpb24sIGUuZy4gIihkZXNjcmlwdGlvbj0qYWRtaW4qKSIKCiAgICAuUEFSQU1FVEVSIFVzZXJBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCBmb3IgdXNlcnMsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBVc2VyRmlsZQoKICAgICAgICBGaWxlIG9mIHVzZXJuYW1lcyB0byBzZWFyY2ggZm9yLgoKICAgIC5QQVJBTUVURVIgTm9QaW5nCgogICAgICAgIERvbid0IHBpbmcgZWFjaCBob3N0IHRvIGVuc3VyZSBpdCdzIHVwIGJlZm9yZSBlbnVtZXJhdGluZy4KCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBEb21haW4gZm9yIHF1ZXJ5IGZvciBtYWNoaW5lcywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgU2VhcmNoRGF5cwoKICAgICAgICBOdW1iZXIgb2YgZGF5cyBiYWNrIHRvIHNlYXJjaCBsb2dzIGZvci4gRGVmYXVsdCAzLgoKICAgIC5QQVJBTUVURVIgU2VhcmNoRm9yZXN0CgogICAgICAgIFN3aXRjaC4gU2VhcmNoIGFsbCBkb21haW5zIGluIHRoZSBmb3Jlc3QgZm9yIHRhcmdldCB1c2VycyBpbnN0ZWFkIG9mIGp1c3QKICAgICAgICBhIHNpbmdsZSBkb21haW4uCgogICAgLlBBUkFNRVRFUiBUaHJlYWRzCgogICAgICAgIFRoZSBtYXhpbXVtIGNvbmN1cnJlbnQgdGhyZWFkcyB0byBleGVjdXRlLgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBJbnZva2UtRXZlbnRIdW50ZXIKCiAgICAuTElOSwoKICAgICAgICBodHRwOi8vYmxvZy5oYXJtajB5Lm5ldAojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uPTAsVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdHMnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSwKCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHtUZXN0LVBhdGggLVBhdGggJF8gfSldCiAgICAgICAgW0FsaWFzKCdIb3N0TGlzdCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyRmlsZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJGaWx0ZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyQURTcGF0aCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkR3JvdXBOYW1lID0gJ0RvbWFpbiBBZG1pbnMnLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRUYXJnZXRTZXJ2ZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJOYW1lLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyRmlsdGVyLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyQURTcGF0aCwKCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHtUZXN0LVBhdGggLVBhdGggJF8gfSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlckZpbGUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKCiAgICAgICAgW0ludDMyXQogICAgICAgICRTZWFyY2hEYXlzID0gMywKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU2VhcmNoRm9yZXN0LAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFRocmVhZHMsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCgogICAgYmVnaW4gewoKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZWJ1ZyddKSB7CiAgICAgICAgICAgICREZWJ1Z1ByZWZlcmVuY2UgPSAnQ29udGludWUnCiAgICAgICAgfQoKICAgICAgICAjIHJhbmRvbSBvYmplY3QgZm9yIGRlbGF5CiAgICAgICAgJFJhbmRObyA9IE5ldy1PYmplY3QgU3lzdGVtLlJhbmRvbQoKICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gUnVubmluZyBJbnZva2UtRXZlbnRIdW50ZXIiCgogICAgICAgIGlmKCREb21haW4pIHsKICAgICAgICAgICAgJFRhcmdldERvbWFpbnMgPSBAKCREb21haW4pCiAgICAgICAgfQogICAgICAgIGVsc2VpZigkU2VhcmNoRm9yZXN0KSB7CiAgICAgICAgICAgICMgZ2V0IEFMTCB0aGUgZG9tYWlucyBpbiB0aGUgZm9yZXN0IHRvIHNlYXJjaAogICAgICAgICAgICAkVGFyZ2V0RG9tYWlucyA9IEdldC1OZXRGb3Jlc3REb21haW4gfCBGb3JFYWNoLU9iamVjdCB7ICRfLk5hbWUgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgIyB1c2UgdGhlIGxvY2FsIGRvbWFpbgogICAgICAgICAgICAkVGFyZ2V0RG9tYWlucyA9IEAoIChHZXQtTmV0RG9tYWluIC1DcmVkZW50aWFsICRDcmVkZW50aWFsKS5uYW1lICkKICAgICAgICB9CgogICAgICAgICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAgICAgIwogICAgICAgICMgRmlyc3Qgd2UgYnVpbGQgdGhlIGhvc3QgdGFyZ2V0IHNldAogICAgICAgICMKICAgICAgICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKICAgICAgICBpZighJENvbXB1dGVyTmFtZSkgeyAKICAgICAgICAgICAgIyBpZiB3ZSdyZSB1c2luZyBhIGhvc3QgbGlzdCwgcmVhZCB0aGUgdGFyZ2V0cyBpbiBhbmQgYWRkIHRoZW0gdG8gdGhlIHRhcmdldCBsaXN0CiAgICAgICAgICAgIGlmKCRDb21wdXRlckZpbGUpIHsKICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgPSBHZXQtQ29udGVudCAtUGF0aCAkQ29tcHV0ZXJGaWxlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZWlmKCRDb21wdXRlckZpbHRlciAtb3IgJENvbXB1dGVyQURTcGF0aCkgewogICAgICAgICAgICAgICAgW2FycmF5XSRDb21wdXRlck5hbWUgPSBAKCkKICAgICAgICAgICAgICAgIEZvckVhY2ggKCREb21haW4gaW4gJFRhcmdldERvbWFpbnMpIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gUXVlcnlpbmcgZG9tYWluICREb21haW4gZm9yIGhvc3RzIgogICAgICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgKz0gR2V0LU5ldENvbXB1dGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtRmlsdGVyICRDb21wdXRlckZpbHRlciAtQURTcGF0aCAkQ29tcHV0ZXJBRFNwYXRoCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAjIGlmIGEgY29tcHV0ZXIgc3BlY2lmaWVyIGlzbid0IGdpdmVuLCB0cnkgdG8gZW51bWVyYXRlIGFsbCBkb21haW4gY29udHJvbGxlcnMKICAgICAgICAgICAgICAgIFthcnJheV0kQ29tcHV0ZXJOYW1lID0gQCgpCiAgICAgICAgICAgICAgICBGb3JFYWNoICgkRG9tYWluIGluICRUYXJnZXREb21haW5zKSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFF1ZXJ5aW5nIGRvbWFpbiAkRG9tYWluIGZvciBkb21haW4gY29udHJvbGxlcnMiCiAgICAgICAgICAgICAgICAgICAgJENvbXB1dGVyTmFtZSArPSBHZXQtTmV0RG9tYWluQ29udHJvbGxlciAtTERBUCAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgfCBGb3JFYWNoLU9iamVjdCB7ICRfLmRuc2hvc3RuYW1lfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAjIHJlbW92ZSBhbnkgbnVsbCB0YXJnZXQgaG9zdHMsIHVuaXF1aWZ5IHRoZSBsaXN0IGFuZCBzaHVmZmxlIGl0CiAgICAgICAgICAgICRDb21wdXRlck5hbWUgPSAkQ29tcHV0ZXJOYW1lIHwgV2hlcmUtT2JqZWN0IHsgJF8gfSB8IFNvcnQtT2JqZWN0IC1VbmlxdWUgfCBTb3J0LU9iamVjdCB7IEdldC1SYW5kb20gfQogICAgICAgICAgICBpZigkKCRDb21wdXRlck5hbWUuQ291bnQpIC1lcSAwKSB7CiAgICAgICAgICAgICAgICB0aHJvdyAiTm8gaG9zdHMgZm91bmQhIgogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgICAgICMKICAgICAgICAjIE5vdyB3ZSBidWlsZCB0aGUgdXNlciB0YXJnZXQgc2V0CiAgICAgICAgIwogICAgICAgICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgogICAgICAgICMgdXNlcnMgd2UncmUgZ29pbmcgdG8gYmUgc2VhcmNoaW5nIGZvcgogICAgICAgICRUYXJnZXRVc2VycyA9IEAoKQoKICAgICAgICAjIGlmIHdlIHdhbnQgdG8gaHVudCBmb3IgdGhlIGVmZmVjdGl2ZSBkb21haW4gdXNlcnMgd2hvIGNhbiBhY2Nlc3MgYSB0YXJnZXQgc2VydmVyCiAgICAgICAgaWYoJFRhcmdldFNlcnZlcikgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJRdWVyeWluZyB0YXJnZXQgc2VydmVyICckVGFyZ2V0U2VydmVyJyBmb3IgbG9jYWwgdXNlcnMiCiAgICAgICAgICAgICRUYXJnZXRVc2VycyA9IEdldC1OZXRMb2NhbEdyb3VwICRUYXJnZXRTZXJ2ZXIgLVJlY3Vyc2UgfCBXaGVyZS1PYmplY3Qgeygtbm90ICRfLklzR3JvdXApIC1hbmQgJF8uSXNEb21haW4gfSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICgkXy5BY2NvdW50TmFtZSkuc3BsaXQoIi8iKVsxXS50b0xvd2VyKCkKICAgICAgICAgICAgfSAgfCBXaGVyZS1PYmplY3QgeyRffQogICAgICAgIH0KICAgICAgICAjIGlmIHdlIGdldCBhIHNwZWNpZmljIHVzZXJuYW1lLCBvbmx5IHVzZSB0aGF0CiAgICAgICAgZWxzZWlmKCRVc2VyTmFtZSkgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gVXNpbmcgdGFyZ2V0IHVzZXIgJyRVc2VyTmFtZScuLi4iCiAgICAgICAgICAgICRUYXJnZXRVc2VycyA9IEAoICRVc2VyTmFtZS5Ub0xvd2VyKCkgKQogICAgICAgIH0KICAgICAgICAjIHJlYWQgaW4gYSB0YXJnZXQgdXNlciBsaXN0IGlmIHdlIGhhdmUgb25lCiAgICAgICAgZWxzZWlmKCRVc2VyRmlsZSkgewogICAgICAgICAgICAkVGFyZ2V0VXNlcnMgPSBHZXQtQ29udGVudCAtUGF0aCAkVXNlckZpbGUgfCBXaGVyZS1PYmplY3QgeyRffQogICAgICAgIH0KICAgICAgICBlbHNlaWYoJFVzZXJBRFNwYXRoIC1vciAkVXNlckZpbHRlcikgewogICAgICAgICAgICBGb3JFYWNoICgkRG9tYWluIGluICRUYXJnZXREb21haW5zKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gUXVlcnlpbmcgZG9tYWluICREb21haW4gZm9yIHVzZXJzIgogICAgICAgICAgICAgICAgJFRhcmdldFVzZXJzICs9IEdldC1OZXRVc2VyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQURTcGF0aCAkVXNlckFEU3BhdGggLUZpbHRlciAkVXNlckZpbHRlciB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAkXy5zYW1hY2NvdW50bmFtZQogICAgICAgICAgICAgICAgfSAgfCBXaGVyZS1PYmplY3QgeyRffQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBGb3JFYWNoICgkRG9tYWluIGluICRUYXJnZXREb21haW5zKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gUXVlcnlpbmcgZG9tYWluICREb21haW4gZm9yIHVzZXJzIG9mIGdyb3VwICckR3JvdXBOYW1lJyIKICAgICAgICAgICAgICAgICRUYXJnZXRVc2VycyArPSBHZXQtTmV0R3JvdXBNZW1iZXIgLUdyb3VwTmFtZSAkR3JvdXBOYW1lIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAkXy5NZW1iZXJOYW1lCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICgoKCEkVGFyZ2V0VXNlcnMpIC1vciAoJFRhcmdldFVzZXJzLkNvdW50IC1lcSAwKSkpIHsKICAgICAgICAgICAgdGhyb3cgIlshXSBObyB1c2VycyBmb3VuZCB0byBzZWFyY2ggZm9yISIKICAgICAgICB9CgogICAgICAgICMgc2NyaXB0IGJsb2NrIHRoYXQgZW51bWVyYXRlcyBhIHNlcnZlcgogICAgICAgICRIb3N0RW51bUJsb2NrID0gewogICAgICAgICAgICBwYXJhbSgkQ29tcHV0ZXJOYW1lLCAkUGluZywgJFRhcmdldFVzZXJzLCAkU2VhcmNoRGF5cywgJENyZWRlbnRpYWwpCgogICAgICAgICAgICAjIG9wdGlvbmFsbHkgY2hlY2sgaWYgdGhlIHNlcnZlciBpcyB1cCBmaXJzdAogICAgICAgICAgICAkVXAgPSAkVHJ1ZQogICAgICAgICAgICBpZigkUGluZykgewogICAgICAgICAgICAgICAgJFVwID0gVGVzdC1Db25uZWN0aW9uIC1Db3VudCAxIC1RdWlldCAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUKICAgICAgICAgICAgfQogICAgICAgICAgICBpZigkVXApIHsKICAgICAgICAgICAgICAgICMgdHJ5IHRvIGVudW1lcmF0ZQogICAgICAgICAgICAgICAgaWYoJENyZWRlbnRpYWwpIHsKICAgICAgICAgICAgICAgICAgICBHZXQtVXNlckV2ZW50IC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSAtRXZlbnRUeXBlICdhbGwnIC1EYXRlU3RhcnQgKFtEYXRlVGltZV06OlRvZGF5LkFkZERheXMoLSRTZWFyY2hEYXlzKSkgfCBXaGVyZS1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAjIGZpbHRlciBmb3IgdGhlIHRhcmdldCB1c2VyIHNldAogICAgICAgICAgICAgICAgICAgICAgICAkVGFyZ2V0VXNlcnMgLWNvbnRhaW5zICRfLlVzZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgR2V0LVVzZXJFdmVudCAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUV2ZW50VHlwZSAnYWxsJyAtRGF0ZVN0YXJ0IChbRGF0ZVRpbWVdOjpUb2RheS5BZGREYXlzKC0kU2VhcmNoRGF5cykpIHwgV2hlcmUtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBmaWx0ZXIgZm9yIHRoZSB0YXJnZXQgdXNlciBzZXQKICAgICAgICAgICAgICAgICAgICAgICAgJFRhcmdldFVzZXJzIC1jb250YWlucyAkXy5Vc2VyTmFtZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICB9CgogICAgcHJvY2VzcyB7CgogICAgICAgIGlmKCRUaHJlYWRzKSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlVzaW5nIHRocmVhZGluZyB3aXRoIHRocmVhZHMgPSAkVGhyZWFkcyIKCiAgICAgICAgICAgICMgaWYgd2UncmUgdXNpbmcgdGhyZWFkaW5nLCBraWNrIG9mZiB0aGUgc2NyaXB0IGJsb2NrIHdpdGggSW52b2tlLVRocmVhZGVkRnVuY3Rpb24KICAgICAgICAgICAgJFNjcmlwdFBhcmFtcyA9IEB7CiAgICAgICAgICAgICAgICAnUGluZycgPSAkKC1ub3QgJE5vUGluZykKICAgICAgICAgICAgICAgICdUYXJnZXRVc2VycycgPSAkVGFyZ2V0VXNlcnMKICAgICAgICAgICAgICAgICdTZWFyY2hEYXlzJyA9ICRTZWFyY2hEYXlzCiAgICAgICAgICAgICAgICAnQ3JlZGVudGlhbCcgPSAkQ3JlZGVudGlhbAogICAgICAgICAgICB9CgogICAgICAgICAgICAjIGtpY2sgb2ZmIHRoZSB0aHJlYWRlZCBzY3JpcHQgYmxvY2sgKyBhcmd1bWVudHMgCiAgICAgICAgICAgIEludm9rZS1UaHJlYWRlZEZ1bmN0aW9uIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSAtU2NyaXB0QmxvY2sgJEhvc3RFbnVtQmxvY2sgLVNjcmlwdFBhcmFtZXRlcnMgJFNjcmlwdFBhcmFtcyAtVGhyZWFkcyAkVGhyZWFkcwogICAgICAgIH0KCiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGlmKC1ub3QgJE5vUGluZyAtYW5kICgkQ29tcHV0ZXJOYW1lLmNvdW50IC1uZSAxKSkgewogICAgICAgICAgICAgICAgIyBwaW5nIGFsbCBob3N0cyBpbiBwYXJhbGxlbAogICAgICAgICAgICAgICAgJFBpbmcgPSB7cGFyYW0oJENvbXB1dGVyTmFtZSkgaWYoVGVzdC1Db25uZWN0aW9uIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSAtQ291bnQgMSAtUXVpZXQgLUVycm9yQWN0aW9uIFN0b3ApeyRDb21wdXRlck5hbWV9fQogICAgICAgICAgICAgICAgJENvbXB1dGVyTmFtZSA9IEludm9rZS1UaHJlYWRlZEZ1bmN0aW9uIC1Ob0ltcG9ydHMgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1TY3JpcHRCbG9jayAkUGluZyAtVGhyZWFkcyAxMDAKICAgICAgICAgICAgfQoKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFRvdGFsIG51bWJlciBvZiBhY3RpdmUgaG9zdHM6ICQoJENvbXB1dGVyTmFtZS5jb3VudCkiCiAgICAgICAgICAgICRDb3VudGVyID0gMAoKICAgICAgICAgICAgRm9yRWFjaCAoJENvbXB1dGVyIGluICRDb21wdXRlck5hbWUpIHsKCiAgICAgICAgICAgICAgICAkQ291bnRlciA9ICRDb3VudGVyICsgMQoKICAgICAgICAgICAgICAgICMgc2xlZXAgZm9yIG91ciBzZW1pLXJhbmRvbWl6ZWQgaW50ZXJ2YWwKICAgICAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzICRSYW5kTm8uTmV4dCgoMS0kSml0dGVyKSokRGVsYXksICgxKyRKaXR0ZXIpKiREZWxheSkKCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gRW51bWVyYXRpbmcgc2VydmVyICRDb21wdXRlciAoJENvdW50ZXIgb2YgJCgkQ29tcHV0ZXJOYW1lLmNvdW50KSkiCiAgICAgICAgICAgICAgICBJbnZva2UtQ29tbWFuZCAtU2NyaXB0QmxvY2sgJEhvc3RFbnVtQmxvY2sgLUFyZ3VtZW50TGlzdCAkQ29tcHV0ZXIsICQoLW5vdCAkTm9QaW5nKSwgJFRhcmdldFVzZXJzLCAkU2VhcmNoRGF5cywgJENyZWRlbnRpYWwKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICB9Cn0KCgpmdW5jdGlvbiBJbnZva2UtU2hhcmVGaW5kZXIgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFRoaXMgZnVuY3Rpb24gZmluZHMgdGhlIGxvY2FsIGRvbWFpbiBuYW1lIGZvciBhIGhvc3QgdXNpbmcgR2V0LU5ldERvbWFpbiwKICAgICAgICBxdWVyaWVzIHRoZSBkb21haW4gZm9yIGFsbCBhY3RpdmUgbWFjaGluZXMgd2l0aCBHZXQtTmV0Q29tcHV0ZXIsIHRoZW4gZm9yCiAgICAgICAgZWFjaCBzZXJ2ZXIgaXQgbGlzdHMgb2YgYWN0aXZlIHNoYXJlcyB3aXRoIEdldC1OZXRTaGFyZS4gTm9uLXN0YW5kYXJkIHNoYXJlcwogICAgICAgIGNhbiBiZSBmaWx0ZXJlZCBvdXQgd2l0aCAtRXhjbHVkZSogZmxhZ3MuCgogICAgICAgIEF1dGhvcjogQGhhcm1qMHkKICAgICAgICBMaWNlbnNlOiBCU0QgMy1DbGF1c2UKCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBIb3N0IGFycmF5IHRvIGVudW1lcmF0ZSwgcGFzc2FibGUgb24gdGhlIHBpcGVsaW5lLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJGaWxlCgogICAgICAgIEZpbGUgb2YgaG9zdG5hbWVzL0lQcyB0byBzZWFyY2guCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckZpbHRlcgoKICAgICAgICBIb3N0IGZpbHRlciBuYW1lIHRvIHF1ZXJ5IEFEIGZvciwgd2lsZGNhcmRzIGFjY2VwdGVkLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCBmb3IgaG9zdHMsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBFeGNsdWRlU3RhbmRhcmQKCiAgICAgICAgU3dpdGNoLiBFeGNsdWRlIHN0YW5kYXJkIHNoYXJlcyBmcm9tIGRpc3BsYXkgKEMkLCBJUEMkLCBwcmludCQgZXRjLikKCiAgICAuUEFSQU1FVEVSIEV4Y2x1ZGVQcmludAoKICAgICAgICBTd2l0Y2guIEV4Y2x1ZGUgdGhlIHByaW50JCBzaGFyZS4KCiAgICAuUEFSQU1FVEVSIEV4Y2x1ZGVJUEMKCiAgICAgICAgU3dpdGNoLiBFeGNsdWRlIHRoZSBJUEMkIHNoYXJlLgoKICAgIC5QQVJBTUVURVIgQ2hlY2tTaGFyZUFjY2VzcwoKICAgICAgICBTd2l0Y2guIE9ubHkgZGlzcGxheSBmb3VuZCBzaGFyZXMgdGhhdCB0aGUgbG9jYWwgdXNlciBoYXMgYWNjZXNzIHRvLgoKICAgIC5QQVJBTUVURVIgQ2hlY2tBZG1pbgoKICAgICAgICBTd2l0Y2guIE9ubHkgZGlzcGxheSBBRE1JTiQgc2hhcmVzIHRoZSBsb2NhbCB1c2VyIGhhcyBhY2Nlc3MgdG8uCgogICAgLlBBUkFNRVRFUiBOb1BpbmcKCiAgICAgICAgU3dpdGNoLiBEb24ndCBwaW5nIGVhY2ggaG9zdCB0byBlbnN1cmUgaXQncyB1cCBiZWZvcmUgZW51bWVyYXRpbmcuCgogICAgLlBBUkFNRVRFUiBEZWxheQoKICAgICAgICBEZWxheSBiZXR3ZWVuIGVudW1lcmF0aW5nIGhvc3RzLCBkZWZhdWx0cyB0byAwLgoKICAgIC5QQVJBTUVURVIgSml0dGVyCgogICAgICAgIEppdHRlciBmb3IgdGhlIGhvc3QgZGVsYXksIGRlZmF1bHRzIHRvICsvLSAwLjMuCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgRG9tYWluIHRvIHF1ZXJ5IGZvciBtYWNoaW5lcywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgU2VhcmNoRm9yZXN0CgogICAgICAgIFN3aXRjaC4gU2VhcmNoIGFsbCBkb21haW5zIGluIHRoZSBmb3Jlc3QgZm9yIHRhcmdldCB1c2VycyBpbnN0ZWFkIG9mIGp1c3QKICAgICAgICBhIHNpbmdsZSBkb21haW4uCgogICAgLlBBUkFNRVRFUiBUaHJlYWRzCgogICAgICAgIFRoZSBtYXhpbXVtIGNvbmN1cnJlbnQgdGhyZWFkcyB0byBleGVjdXRlLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gSW52b2tlLVNoYXJlRmluZGVyIC1FeGNsdWRlU3RhbmRhcmQKCiAgICAgICAgRmluZCBub24tc3RhbmRhcmQgc2hhcmVzIG9uIHRoZSBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBJbnZva2UtU2hhcmVGaW5kZXIgLVRocmVhZHMgMjAKCiAgICAgICAgTXVsdGktdGhyZWFkZWQgc2hhcmUgZmluZGluZywgcmVwbGFjZXMgSW52b2tlLVNoYXJlRmluZGVyVGhyZWFkZWQuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBJbnZva2UtU2hhcmVGaW5kZXIgLURlbGF5IDYwCgogICAgICAgIEZpbmQgc2hhcmVzIG9uIHRoZSBkb21haW4gd2l0aCBhIDYwIHNlY29uZCAoKy8tICouMykKICAgICAgICByYW5kb21pemVkIGRlbGF5IGJldHdlZW4gdG91Y2hpbmcgZWFjaCBob3N0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gSW52b2tlLVNoYXJlRmluZGVyIC1Db21wdXRlckZpbGUgaG9zdHMudHh0CgogICAgICAgIEZpbmQgc2hhcmVzIGZvciBtYWNoaW5lcyBpbiB0aGUgc3BlY2lmaWVkIGhvc3RzIGZpbGUuCgogICAgLkxJTksKICAgIGh0dHA6Ly9ibG9nLmhhcm1qMHkubmV0CiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MCxWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0cycpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lLAoKICAgICAgICBbVmFsaWRhdGVTY3JpcHQoe1Rlc3QtUGF0aCAtUGF0aCAkXyB9KV0KICAgICAgICBbQWxpYXMoJ0hvc3RMaXN0JyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJGaWxlLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckZpbHRlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJBRFNwYXRoLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRFeGNsdWRlU3RhbmRhcmQsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEV4Y2x1ZGVQcmludCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRXhjbHVkZUlQQywKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkTm9QaW5nLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRDaGVja1NoYXJlQWNjZXNzLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRDaGVja0FkbWluLAoKICAgICAgICBbVUludDMyXQogICAgICAgICREZWxheSA9IDAsCgogICAgICAgIFtEb3VibGVdCiAgICAgICAgJEppdHRlciA9IC4zLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCiAKICAgICAgICBbU3dpdGNoXQogICAgICAgICRTZWFyY2hGb3Jlc3QsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkVGhyZWFkcwogICAgKQoKICAgIGJlZ2luIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZWJ1ZyddKSB7CiAgICAgICAgICAgICREZWJ1Z1ByZWZlcmVuY2UgPSAnQ29udGludWUnCiAgICAgICAgfQoKICAgICAgICAjIHJhbmRvbSBvYmplY3QgZm9yIGRlbGF5CiAgICAgICAgJFJhbmRObyA9IE5ldy1PYmplY3QgU3lzdGVtLlJhbmRvbQoKICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gUnVubmluZyBJbnZva2UtU2hhcmVGaW5kZXIgd2l0aCBkZWxheSBvZiAkRGVsYXkiCgogICAgICAgICMgZmlndXJlIG91dCB0aGUgc2hhcmVzIHdlIHdhbnQgdG8gaWdub3JlCiAgICAgICAgW1N0cmluZ1tdXSAkRXhjbHVkZWRTaGFyZXMgPSBAKCcnKQoKICAgICAgICBpZiAoJEV4Y2x1ZGVQcmludCkgewogICAgICAgICAgICAkRXhjbHVkZWRTaGFyZXMgPSAkRXhjbHVkZWRTaGFyZXMgKyAiUFJJTlQkIgogICAgICAgIH0KICAgICAgICBpZiAoJEV4Y2x1ZGVJUEMpIHsKICAgICAgICAgICAgJEV4Y2x1ZGVkU2hhcmVzID0gJEV4Y2x1ZGVkU2hhcmVzICsgIklQQyQiCiAgICAgICAgfQogICAgICAgIGlmICgkRXhjbHVkZVN0YW5kYXJkKSB7CiAgICAgICAgICAgICRFeGNsdWRlZFNoYXJlcyA9IEAoJycsICJBRE1JTiQiLCAiSVBDJCIsICJDJCIsICJQUklOVCQiKQogICAgICAgIH0KCiAgICAgICAgIyBpZiB3ZSdyZSB1c2luZyBhIGhvc3QgZmlsZSBsaXN0LCByZWFkIHRoZSB0YXJnZXRzIGluIGFuZCBhZGQgdGhlbSB0byB0aGUgdGFyZ2V0IGxpc3QKICAgICAgICBpZigkQ29tcHV0ZXJGaWxlKSB7CiAgICAgICAgICAgICRDb21wdXRlck5hbWUgPSBHZXQtQ29udGVudCAtUGF0aCAkQ29tcHV0ZXJGaWxlCiAgICAgICAgfQoKICAgICAgICBpZighJENvbXB1dGVyTmFtZSkgeyAKICAgICAgICAgICAgW2FycmF5XSRDb21wdXRlck5hbWUgPSBAKCkKCiAgICAgICAgICAgIGlmKCREb21haW4pIHsKICAgICAgICAgICAgICAgICRUYXJnZXREb21haW5zID0gQCgkRG9tYWluKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZigkU2VhcmNoRm9yZXN0KSB7CiAgICAgICAgICAgICAgICAjIGdldCBBTEwgdGhlIGRvbWFpbnMgaW4gdGhlIGZvcmVzdCB0byBzZWFyY2gKICAgICAgICAgICAgICAgICRUYXJnZXREb21haW5zID0gR2V0LU5ldEZvcmVzdERvbWFpbiB8IEZvckVhY2gtT2JqZWN0IHsgJF8uTmFtZSB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAjIHVzZSB0aGUgbG9jYWwgZG9tYWluCiAgICAgICAgICAgICAgICAkVGFyZ2V0RG9tYWlucyA9IEAoIChHZXQtTmV0RG9tYWluKS5uYW1lICkKICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIEZvckVhY2ggKCREb21haW4gaW4gJFRhcmdldERvbWFpbnMpIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBRdWVyeWluZyBkb21haW4gJERvbWFpbiBmb3IgaG9zdHMiCiAgICAgICAgICAgICAgICAkQ29tcHV0ZXJOYW1lICs9IEdldC1OZXRDb21wdXRlciAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUZpbHRlciAkQ29tcHV0ZXJGaWx0ZXIgLUFEU3BhdGggJENvbXB1dGVyQURTcGF0aAogICAgICAgICAgICB9CiAgICAgICAgCiAgICAgICAgICAgICMgcmVtb3ZlIGFueSBudWxsIHRhcmdldCBob3N0cywgdW5pcXVpZnkgdGhlIGxpc3QgYW5kIHNodWZmbGUgaXQKICAgICAgICAgICAgJENvbXB1dGVyTmFtZSA9ICRDb21wdXRlck5hbWUgfCBXaGVyZS1PYmplY3QgeyAkXyB9IHwgU29ydC1PYmplY3QgLVVuaXF1ZSB8IFNvcnQtT2JqZWN0IHsgR2V0LVJhbmRvbSB9CiAgICAgICAgICAgIGlmKCQoJENvbXB1dGVyTmFtZS5jb3VudCkgLWVxIDApIHsKICAgICAgICAgICAgICAgIHRocm93ICJObyBob3N0cyBmb3VuZCEiCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICMgc2NyaXB0IGJsb2NrIHRoYXQgZW51bWVyYXRlcyBhIHNlcnZlcgogICAgICAgICRIb3N0RW51bUJsb2NrID0gewogICAgICAgICAgICBwYXJhbSgkQ29tcHV0ZXJOYW1lLCAkUGluZywgJENoZWNrU2hhcmVBY2Nlc3MsICRFeGNsdWRlZFNoYXJlcywgJENoZWNrQWRtaW4pCgogICAgICAgICAgICAjIG9wdGlvbmFsbHkgY2hlY2sgaWYgdGhlIHNlcnZlciBpcyB1cCBmaXJzdAogICAgICAgICAgICAkVXAgPSAkVHJ1ZQogICAgICAgICAgICBpZigkUGluZykgewogICAgICAgICAgICAgICAgJFVwID0gVGVzdC1Db25uZWN0aW9uIC1Db3VudCAxIC1RdWlldCAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUKICAgICAgICAgICAgfQogICAgICAgICAgICBpZigkVXApIHsKICAgICAgICAgICAgICAgICMgZ2V0IHRoZSBzaGFyZXMgZm9yIHRoaXMgaG9zdCBhbmQgY2hlY2sgd2hhdCB3ZSBmaW5kCiAgICAgICAgICAgICAgICAkU2hhcmVzID0gR2V0LU5ldFNoYXJlIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZQogICAgICAgICAgICAgICAgRm9yRWFjaCAoJFNoYXJlIGluICRTaGFyZXMpIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1EZWJ1ZyAiWypdIFNlcnZlciBzaGFyZTogJFNoYXJlIgogICAgICAgICAgICAgICAgICAgICROZXROYW1lID0gJFNoYXJlLnNoaTFfbmV0bmFtZQogICAgICAgICAgICAgICAgICAgICRSZW1hcmsgPSAkU2hhcmUuc2hpMV9yZW1hcmsKICAgICAgICAgICAgICAgICAgICAkUGF0aCA9ICdcXCcrJENvbXB1dGVyTmFtZSsnXCcrJE5ldE5hbWUKCiAgICAgICAgICAgICAgICAgICAgIyBtYWtlIHN1cmUgd2UgZ2V0IGEgcmVhbCBzaGFyZSBuYW1lIGJhY2sKICAgICAgICAgICAgICAgICAgICBpZiAoKCROZXROYW1lKSAtYW5kICgkTmV0TmFtZS50cmltKCkgLW5lICcnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAjIGlmIHdlJ3JlIGp1c3QgY2hlY2tpbmcgZm9yIGFjY2VzcyB0byBBRE1JTiQKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJENoZWNrQWRtaW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCROZXROYW1lLlRvVXBwZXIoKSAtZXEgIkFETUlOJCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTnVsbCA9IFtJTy5EaXJlY3RvcnldOjpHZXRGaWxlcygkUGF0aCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcJENvbXB1dGVyTmFtZVwkTmV0TmFtZSBgdC0gJFJlbWFyayIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1EZWJ1ZyAiRXJyb3IgYWNjZXNzaW5nIHBhdGggJFBhdGggOiAkXyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIyBza2lwIHRoaXMgc2hhcmUgaWYgaXQncyBpbiB0aGUgZXhjbHVkZSBsaXN0CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VpZiAoJEV4Y2x1ZGVkU2hhcmVzIC1Ob3RDb250YWlucyAkTmV0TmFtZS5Ub1VwcGVyKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgc2VlIGlmIHdlIHdhbnQgdG8gY2hlY2sgYWNjZXNzIHRvIHRoaXMgc2hhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRDaGVja1NoYXJlQWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBjaGVjayBpZiB0aGUgdXNlciBoYXMgYWNjZXNzIHRvIHRoaXMgcGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICROdWxsID0gW0lPLkRpcmVjdG9yeV06OkdldEZpbGVzKCRQYXRoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFwkQ29tcHV0ZXJOYW1lXCROZXROYW1lIGB0LSAkUmVtYXJrIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLURlYnVnICJFcnJvciBhY2Nlc3NpbmcgcGF0aCAkUGF0aCA6ICRfIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXCRDb21wdXRlck5hbWVcJE5ldE5hbWUgYHQtICRSZW1hcmsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgfQoKICAgIHByb2Nlc3MgewoKICAgICAgICBpZigkVGhyZWFkcykgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJVc2luZyB0aHJlYWRpbmcgd2l0aCB0aHJlYWRzID0gJFRocmVhZHMiCgogICAgICAgICAgICAjIGlmIHdlJ3JlIHVzaW5nIHRocmVhZGluZywga2ljayBvZmYgdGhlIHNjcmlwdCBibG9jayB3aXRoIEludm9rZS1UaHJlYWRlZEZ1bmN0aW9uCiAgICAgICAgICAgICRTY3JpcHRQYXJhbXMgPSBAewogICAgICAgICAgICAgICAgJ1BpbmcnID0gJCgtbm90ICROb1BpbmcpCiAgICAgICAgICAgICAgICAnQ2hlY2tTaGFyZUFjY2VzcycgPSAkQ2hlY2tTaGFyZUFjY2VzcwogICAgICAgICAgICAgICAgJ0V4Y2x1ZGVkU2hhcmVzJyA9ICRFeGNsdWRlZFNoYXJlcwogICAgICAgICAgICAgICAgJ0NoZWNrQWRtaW4nID0gJENoZWNrQWRtaW4KICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBraWNrIG9mZiB0aGUgdGhyZWFkZWQgc2NyaXB0IGJsb2NrICsgYXJndW1lbnRzIAogICAgICAgICAgICBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbiAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1TY3JpcHRQYXJhbWV0ZXJzICRTY3JpcHRQYXJhbXMgLVRocmVhZHMgJFRocmVhZHMKICAgICAgICB9CgogICAgICAgIGVsc2UgewogICAgICAgICAgICBpZigtbm90ICROb1BpbmcgLWFuZCAoJENvbXB1dGVyTmFtZS5jb3VudCAtbmUgMSkpIHsKICAgICAgICAgICAgICAgICMgcGluZyBhbGwgaG9zdHMgaW4gcGFyYWxsZWwKICAgICAgICAgICAgICAgICRQaW5nID0ge3BhcmFtKCRDb21wdXRlck5hbWUpIGlmKFRlc3QtQ29ubmVjdGlvbiAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLUNvdW50IDEgLVF1aWV0IC1FcnJvckFjdGlvbiBTdG9wKXskQ29tcHV0ZXJOYW1lfX0KICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgPSBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbiAtTm9JbXBvcnRzIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSAtU2NyaXB0QmxvY2sgJFBpbmcgLVRocmVhZHMgMTAwCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBUb3RhbCBudW1iZXIgb2YgYWN0aXZlIGhvc3RzOiAkKCRDb21wdXRlck5hbWUuY291bnQpIgogICAgICAgICAgICAkQ291bnRlciA9IDAKCiAgICAgICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CgogICAgICAgICAgICAgICAgJENvdW50ZXIgPSAkQ291bnRlciArIDEKCiAgICAgICAgICAgICAgICAjIHNsZWVwIGZvciBvdXIgc2VtaS1yYW5kb21pemVkIGludGVydmFsCiAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkUmFuZE5vLk5leHQoKDEtJEppdHRlcikqJERlbGF5LCAoMSskSml0dGVyKSokRGVsYXkpCgogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIEVudW1lcmF0aW5nIHNlcnZlciAkQ29tcHV0ZXIgKCRDb3VudGVyIG9mICQoJENvbXB1dGVyTmFtZS5jb3VudCkpIgogICAgICAgICAgICAgICAgSW52b2tlLUNvbW1hbmQgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1Bcmd1bWVudExpc3QgJENvbXB1dGVyLCAkRmFsc2UsICRDaGVja1NoYXJlQWNjZXNzLCAkRXhjbHVkZWRTaGFyZXMsICRDaGVja0FkbWluCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICB9Cn0KCgpmdW5jdGlvbiBJbnZva2UtRmlsZUZpbmRlciB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgRmluZHMgc2Vuc2l0aXZlIGZpbGVzIG9uIHRoZSBkb21haW4uCgogICAgICAgIEF1dGhvcjogQGhhcm1qMHkKICAgICAgICBMaWNlbnNlOiBCU0QgMy1DbGF1c2UKCiAgICAuREVTQ1JJUFRJT04KCiAgICAgICAgVGhpcyBmdW5jdGlvbiBmaW5kcyB0aGUgbG9jYWwgZG9tYWluIG5hbWUgZm9yIGEgaG9zdCB1c2luZyBHZXQtTmV0RG9tYWluLAogICAgICAgIHF1ZXJpZXMgdGhlIGRvbWFpbiBmb3IgYWxsIGFjdGl2ZSBtYWNoaW5lcyB3aXRoIEdldC1OZXRDb21wdXRlciwgZ3JhYnMKICAgICAgICB0aGUgcmVhZGFibGUgc2hhcmVzIGZvciBlYWNoIHNlcnZlciwgYW5kIHJlY3Vyc2l2ZWx5IHNlYXJjaGVzIGV2ZXJ5CiAgICAgICAgc2hhcmUgZm9yIGZpbGVzIHdpdGggc3BlY2lmaWMga2V5d29yZHMgaW4gdGhlIG5hbWUuCiAgICAgICAgSWYgYSBzaGFyZSBsaXN0IGlzIHBhc3NlZCwgRVZFUlkgc2hhcmUgaXMgZW51bWVyYXRlZCByZWdhcmRsZXNzIG9mCiAgICAgICAgb3RoZXIgb3B0aW9ucy4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBIb3N0IGFycmF5IHRvIGVudW1lcmF0ZSwgcGFzc2FibGUgb24gdGhlIHBpcGVsaW5lLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJGaWxlCgogICAgICAgIEZpbGUgb2YgaG9zdG5hbWVzL0lQcyB0byBzZWFyY2guCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckZpbHRlcgoKICAgICAgICBIb3N0IGZpbHRlciBuYW1lIHRvIHF1ZXJ5IEFEIGZvciwgd2lsZGNhcmRzIGFjY2VwdGVkLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCBmb3IgaG9zdHMsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBTaGFyZUxpc3QKCiAgICAgICAgTGlzdCBpZiBcXEhPU1Rcc2hhcmVzIHRvIHNlYXJjaCB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgVGVybXMKCiAgICAgICAgVGVybXMgdG8gc2VhcmNoIGZvci4KCiAgICAuUEFSQU1FVEVSIE9mZmljZURvY3MKCiAgICAgICAgU3dpdGNoLiBTZWFyY2ggZm9yIG9mZmljZSBkb2N1bWVudHMgKCouZG9jKiwgKi54bHMqLCAqLnBwdCopCgogICAgLlBBUkFNRVRFUiBGcmVzaEVYRXMKCiAgICAgICAgU3dpdGNoLiBGaW5kIC5FWEVzIGFjY2Vzc2VkIHdpdGhpbiB0aGUgbGFzdCB3ZWVrLgoKICAgIC5QQVJBTUVURVIgTGFzdEFjY2Vzc1RpbWUKCiAgICAgICAgT25seSByZXR1cm4gZmlsZXMgd2l0aCBhIExhc3RBY2Nlc3NUaW1lIGdyZWF0ZXIgdGhhbiB0aGlzIGRhdGUgdmFsdWUuCgogICAgLlBBUkFNRVRFUiBMYXN0V3JpdGVUaW1lCgogICAgICAgIE9ubHkgcmV0dXJuIGZpbGVzIHdpdGggYSBMYXN0V3JpdGVUaW1lIGdyZWF0ZXIgdGhhbiB0aGlzIGRhdGUgdmFsdWUuCgogICAgLlBBUkFNRVRFUiBDcmVhdGlvblRpbWUKCiAgICAgICAgT25seSByZXR1cm4gZmlsZXMgd2l0aCBhIENyZWF0aW9uRGF0ZSBncmVhdGVyIHRoYW4gdGhpcyBkYXRlIHZhbHVlLgoKICAgIC5QQVJBTUVURVIgSW5jbHVkZUMKCiAgICAgICAgU3dpdGNoLiBJbmNsdWRlIGFueSBDJCBzaGFyZXMgaW4gcmVjdXJzaXZlIHNlYXJjaGluZyAoZGVmYXVsdCBpZ25vcmUpLgoKICAgIC5QQVJBTUVURVIgSW5jbHVkZUFkbWluCgogICAgICAgIFN3aXRjaC4gSW5jbHVkZSBhbnkgQURNSU4kIHNoYXJlcyBpbiByZWN1cnNpdmUgc2VhcmNoaW5nIChkZWZhdWx0IGlnbm9yZSkuCgogICAgLlBBUkFNRVRFUiBFeGNsdWRlRm9sZGVycwoKICAgICAgICBTd2l0Y2guIEV4Y2x1ZGUgZm9sZGVycyBmcm9tIHRoZSBzZWFyY2ggcmVzdWx0cy4KCiAgICAuUEFSQU1FVEVSIEV4Y2x1ZGVIaWRkZW4KCiAgICAgICAgU3dpdGNoLiBFeGNsdWRlIGhpZGRlbiBmaWxlcyBhbmQgZm9sZGVycyBmcm9tIHRoZSBzZWFyY2ggcmVzdWx0cy4KCiAgICAuUEFSQU1FVEVSIENoZWNrV3JpdGVBY2Nlc3MKCiAgICAgICAgU3dpdGNoLiBPbmx5IHJldHVybnMgZmlsZXMgdGhlIGN1cnJlbnQgdXNlciBoYXMgd3JpdGUgYWNjZXNzIHRvLgoKICAgIC5QQVJBTUVURVIgT3V0RmlsZQoKICAgICAgICBPdXRwdXQgcmVzdWx0cyB0byBhIHNwZWNpZmllZCBjc3Ygb3V0cHV0IGZpbGUuCgogICAgLlBBUkFNRVRFUiBOb0Nsb2JiZXIKCiAgICAgICAgU3dpdGNoLiBEb24ndCBvdmVyd3JpdGUgYW55IGV4aXN0aW5nIG91dHB1dCBmaWxlLgoKICAgIC5QQVJBTUVURVIgTm9QaW5nCgogICAgICAgIFN3aXRjaC4gRG9uJ3QgcGluZyBlYWNoIGhvc3QgdG8gZW5zdXJlIGl0J3MgdXAgYmVmb3JlIGVudW1lcmF0aW5nLgoKICAgIC5QQVJBTUVURVIgRGVsYXkKCiAgICAgICAgRGVsYXkgYmV0d2VlbiBlbnVtZXJhdGluZyBob3N0cywgZGVmYXVsdHMgdG8gMAoKICAgIC5QQVJBTUVURVIgSml0dGVyCgogICAgICAgIEppdHRlciBmb3IgdGhlIGhvc3QgZGVsYXksIGRlZmF1bHRzIHRvICsvLSAwLjMKCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBEb21haW4gdG8gcXVlcnkgZm9yIG1hY2hpbmVzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBTZWFyY2hGb3Jlc3QKCiAgICAgICAgU2VhcmNoIGFsbCBkb21haW5zIGluIHRoZSBmb3Jlc3QgZm9yIHRhcmdldCB1c2VycyBpbnN0ZWFkIG9mIGp1c3QKICAgICAgICBhIHNpbmdsZSBkb21haW4uCgogICAgLlBBUkFNRVRFUiBTZWFyY2hTWVNWT0wKCiAgICAgICAgU3dpdGNoLiBTZWFyY2ggZm9yIGxvZ2luIHNjcmlwdHMgb24gdGhlIFNZU1ZPTCBvZiB0aGUgcHJpbWFyeSBEQ3MgZm9yIGVhY2ggc3BlY2lmaWVkIGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIFRocmVhZHMKCiAgICAgICAgVGhlIG1heGltdW0gY29uY3VycmVudCB0aHJlYWRzIHRvIGV4ZWN1dGUuCgogICAgLlBBUkFNRVRFUiBVc2VQU0RyaXZlCgogICAgICAgIFN3aXRjaC4gTW91bnQgdGFyZ2V0IHJlbW90ZSBwYXRoIHdpdGggdGVtcG9yYXJ5IFBTRHJpdmVzLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gSW52b2tlLUZpbGVGaW5kZXIKCiAgICAgICAgRmluZCByZWFkYWJsZSBmaWxlcyBvbiB0aGUgZG9tYWluIHdpdGggJ3Bhc3MnLCAnc2Vuc2l0aXZlJywKICAgICAgICAnc2VjcmV0JywgJ2FkbWluJywgJ2xvZ2luJywgb3IgJ3VuYXR0ZW5kKi54bWwnIGluIHRoZSBuYW1lLAoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gSW52b2tlLUZpbGVGaW5kZXIgLURvbWFpbiB0ZXN0aW5nCgogICAgICAgIEZpbmQgcmVhZGFibGUgZmlsZXMgb24gdGhlICd0ZXN0aW5nJyBkb21haW4gd2l0aCAncGFzcycsICdzZW5zaXRpdmUnLAogICAgICAgICdzZWNyZXQnLCAnYWRtaW4nLCAnbG9naW4nLCBvciAndW5hdHRlbmQqLnhtbCcgaW4gdGhlIG5hbWUsCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBJbnZva2UtRmlsZUZpbmRlciAtSW5jbHVkZUMKCiAgICAgICAgRmluZCByZWFkYWJsZSBmaWxlcyBvbiB0aGUgZG9tYWluIHdpdGggJ3Bhc3MnLCAnc2Vuc2l0aXZlJywKICAgICAgICAnc2VjcmV0JywgJ2FkbWluJywgJ2xvZ2luJyBvciAndW5hdHRlbmQqLnhtbCcgaW4gdGhlIG5hbWUsCiAgICAgICAgaW5jbHVkaW5nIEMkIHNoYXJlcy4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1GaWxlRmluZGVyIC1TaGFyZUxpc3Qgc2hhcmVzLnR4dCAtVGVybXMgYWNjb3VudHMsc3NuIC1PdXRGaWxlIG91dC5jc3YKCiAgICAgICAgRW51bWVyYXRlIGEgc3BlY2lmaWVkIHNoYXJlIGxpc3QgZm9yIGZpbGVzIHdpdGggJ2FjY291bnRzJyBvcgogICAgICAgICdzc24nIGluIHRoZSBuYW1lLCBhbmQgd3JpdGUgZXZlcnl0aGluZyB0byAib3V0LmNzdiIKCiAgICAuTElOSwogICAgICAgIGh0dHA6Ly93d3cuaGFybWoweS5uZXQvYmxvZy9yZWR0ZWFtaW5nL2ZpbGUtc2VydmVyLXRyaWFnZS1vbi1yZWQtdGVhbS1lbmdhZ2VtZW50cy8KCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MCxWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0cycpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lLAoKICAgICAgICBbVmFsaWRhdGVTY3JpcHQoe1Rlc3QtUGF0aCAtUGF0aCAkXyB9KV0KICAgICAgICBbQWxpYXMoJ0hvc3RMaXN0JyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJGaWxlLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckZpbHRlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJBRFNwYXRoLAoKICAgICAgICBbVmFsaWRhdGVTY3JpcHQoe1Rlc3QtUGF0aCAtUGF0aCAkXyB9KV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTaGFyZUxpc3QsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJE9mZmljZURvY3MsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEZyZXNoRVhFcywKCiAgICAgICAgW0FsaWFzKCdUZXJtcycpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkU2VhcmNoVGVybXMsIAoKICAgICAgICBbVmFsaWRhdGVTY3JpcHQoe1Rlc3QtUGF0aCAtUGF0aCAkXyB9KV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRUZXJtTGlzdCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTGFzdEFjY2Vzc1RpbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJExhc3RXcml0ZVRpbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENyZWF0aW9uVGltZSwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkSW5jbHVkZUMsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEluY2x1ZGVBZG1pbiwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRXhjbHVkZUZvbGRlcnMsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEV4Y2x1ZGVIaWRkZW4sCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJENoZWNrV3JpdGVBY2Nlc3MsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE91dEZpbGUsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJE5vQ2xvYmJlciwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkTm9QaW5nLAoKICAgICAgICBbVUludDMyXQogICAgICAgICREZWxheSA9IDAsCgogICAgICAgIFtEb3VibGVdCiAgICAgICAgJEppdHRlciA9IC4zLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCiAgICAgICAgCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU2VhcmNoRm9yZXN0LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRTZWFyY2hTWVNWT0wsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkVGhyZWFkcywKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVXNlUFNEcml2ZQogICAgKQoKICAgIGJlZ2luIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZWJ1ZyddKSB7CiAgICAgICAgICAgICREZWJ1Z1ByZWZlcmVuY2UgPSAnQ29udGludWUnCiAgICAgICAgfQoKICAgICAgICAjIHJhbmRvbSBvYmplY3QgZm9yIGRlbGF5CiAgICAgICAgJFJhbmRObyA9IE5ldy1PYmplY3QgU3lzdGVtLlJhbmRvbQoKICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gUnVubmluZyBJbnZva2UtRmlsZUZpbmRlciB3aXRoIGRlbGF5IG9mICREZWxheSIKCiAgICAgICAgJFNoYXJlcyA9IEAoKQoKICAgICAgICAjIGZpZ3VyZSBvdXQgdGhlIHNoYXJlcyB3ZSB3YW50IHRvIGlnbm9yZQogICAgICAgIFtTdHJpbmdbXV0gJEV4Y2x1ZGVkU2hhcmVzID0gQCgiQyQiLCAiQURNSU4kIikKCiAgICAgICAgIyBzZWUgaWYgd2UncmUgc3BlY2lmaWNhbGx5IGluY2x1ZGluZyBhbnkgb2YgdGhlIG5vcm1hbGx5IGV4Y2x1ZGVkIHNldHMKICAgICAgICBpZiAoJEluY2x1ZGVDKSB7CiAgICAgICAgICAgIGlmICgkSW5jbHVkZUFkbWluKSB7CiAgICAgICAgICAgICAgICAkRXhjbHVkZWRTaGFyZXMgPSBAKCkKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRFeGNsdWRlZFNoYXJlcyA9IEAoIkFETUlOJCIpCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICgkSW5jbHVkZUFkbWluKSB7CiAgICAgICAgICAgIGlmICgkSW5jbHVkZUMpIHsKICAgICAgICAgICAgICAgICRFeGNsdWRlZFNoYXJlcyA9IEAoKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJEV4Y2x1ZGVkU2hhcmVzID0gQCgiQyQiKQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAjIGRlbGV0ZSBhbnkgZXhpc3Rpbmcgb3V0cHV0IGZpbGUgaWYgaXQgYWxyZWFkeSBleGlzdHMKICAgICAgICBpZighJE5vQ2xvYmJlcikgewogICAgICAgICAgICBpZiAoJE91dEZpbGUgLWFuZCAoVGVzdC1QYXRoIC1QYXRoICRPdXRGaWxlKSkgeyBSZW1vdmUtSXRlbSAtUGF0aCAkT3V0RmlsZSB9CiAgICAgICAgfQoKICAgICAgICAjIGlmIHRoZXJlJ3MgYSBzZXQgb2YgdGVybXMgc3BlY2lmaWVkIHRvIHNlYXJjaCBmb3IKICAgICAgICBpZiAoJFRlcm1MaXN0KSB7CiAgICAgICAgICAgIEZvckVhY2ggKCRUZXJtIGluIEdldC1Db250ZW50IC1QYXRoICRUZXJtTGlzdCkgewogICAgICAgICAgICAgICAgaWYgKCgkVGVybSAtbmUgJE51bGwpIC1hbmQgKCRUZXJtLnRyaW0oKSAtbmUgJycpKSB7CiAgICAgICAgICAgICAgICAgICAgJFNlYXJjaFRlcm1zICs9ICRUZXJtCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICMgaWYgd2UncmUgaGFyZC1wYXNzZWQgYSBzZXQgb2Ygc2hhcmVzCiAgICAgICAgaWYoJFNoYXJlTGlzdCkgewogICAgICAgICAgICBGb3JFYWNoICgkSXRlbSBpbiBHZXQtQ29udGVudCAtUGF0aCAkU2hhcmVMaXN0KSB7CiAgICAgICAgICAgICAgICBpZiAoKCRJdGVtIC1uZSAkTnVsbCkgLWFuZCAoJEl0ZW0udHJpbSgpIC1uZSAnJykpIHsKICAgICAgICAgICAgICAgICAgICAjIGV4Y2x1ZGUgYW55ICJbdGFiXS0gY29tbWFudHMiLCBpLmUuIHRoZSBvdXRwdXQgZnJvbSBJbnZva2UtU2hhcmVGaW5kZXIKICAgICAgICAgICAgICAgICAgICAkU2hhcmUgPSAkSXRlbS5TcGxpdCgiYHQiKVswXQogICAgICAgICAgICAgICAgICAgICRTaGFyZXMgKz0gJFNoYXJlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICMgaWYgd2UncmUgdXNpbmcgYSBob3N0IGZpbGUgbGlzdCwgcmVhZCB0aGUgdGFyZ2V0cyBpbiBhbmQgYWRkIHRoZW0gdG8gdGhlIHRhcmdldCBsaXN0CiAgICAgICAgICAgIGlmKCRDb21wdXRlckZpbGUpIHsKICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgPSBHZXQtQ29udGVudCAtUGF0aCAkQ29tcHV0ZXJGaWxlCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKCEkQ29tcHV0ZXJOYW1lKSB7CgogICAgICAgICAgICAgICAgaWYoJERvbWFpbikgewogICAgICAgICAgICAgICAgICAgICRUYXJnZXREb21haW5zID0gQCgkRG9tYWluKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZWlmKCRTZWFyY2hGb3Jlc3QpIHsKICAgICAgICAgICAgICAgICAgICAjIGdldCBBTEwgdGhlIGRvbWFpbnMgaW4gdGhlIGZvcmVzdCB0byBzZWFyY2gKICAgICAgICAgICAgICAgICAgICAkVGFyZ2V0RG9tYWlucyA9IEdldC1OZXRGb3Jlc3REb21haW4gfCBGb3JFYWNoLU9iamVjdCB7ICRfLk5hbWUgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgIyB1c2UgdGhlIGxvY2FsIGRvbWFpbgogICAgICAgICAgICAgICAgICAgICRUYXJnZXREb21haW5zID0gQCggKEdldC1OZXREb21haW4pLm5hbWUgKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmKCRTZWFyY2hTWVNWT0wpIHsKICAgICAgICAgICAgICAgICAgICBGb3JFYWNoICgkRG9tYWluIGluICRUYXJnZXREb21haW5zKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICREQ1NlYXJjaFBhdGggPSAiXFwkRG9tYWluXFNZU1ZPTFwiCiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBBZGRpbmcgc2hhcmUgc2VhcmNoIHBhdGggJERDU2VhcmNoUGF0aCIKICAgICAgICAgICAgICAgICAgICAgICAgJFNoYXJlcyArPSAkRENTZWFyY2hQYXRoCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmKCEkU2VhcmNoVGVybXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBzZWFyY2ggZm9yIGludGVyZXN0aW5nIHNjcmlwdHMgb24gU1lTVk9MCiAgICAgICAgICAgICAgICAgICAgICAgICRTZWFyY2hUZXJtcyA9IEAoJy52YnMnLCAnLmJhdCcsICcucHMxJykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBbYXJyYXldJENvbXB1dGVyTmFtZSA9IEAoKQoKICAgICAgICAgICAgICAgICAgICBGb3JFYWNoICgkRG9tYWluIGluICRUYXJnZXREb21haW5zKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBRdWVyeWluZyBkb21haW4gJERvbWFpbiBmb3IgaG9zdHMiCiAgICAgICAgICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgKz0gR2V0LU5ldENvbXB1dGVyIC1GaWx0ZXIgJENvbXB1dGVyRmlsdGVyIC1BRFNwYXRoICRDb21wdXRlckFEU3BhdGggLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAjIHJlbW92ZSBhbnkgbnVsbCB0YXJnZXQgaG9zdHMsIHVuaXF1aWZ5IHRoZSBsaXN0IGFuZCBzaHVmZmxlIGl0CiAgICAgICAgICAgICAgICAgICAgJENvbXB1dGVyTmFtZSA9ICRDb21wdXRlck5hbWUgfCBXaGVyZS1PYmplY3QgeyAkXyB9IHwgU29ydC1PYmplY3QgLVVuaXF1ZSB8IFNvcnQtT2JqZWN0IHsgR2V0LVJhbmRvbSB9CiAgICAgICAgICAgICAgICAgICAgaWYoJCgkQ29tcHV0ZXJOYW1lLkNvdW50KSAtZXEgMCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyAiTm8gaG9zdHMgZm91bmQhIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgIyBzY3JpcHQgYmxvY2sgdGhhdCBlbnVtZXJhdGVzIHNoYXJlcyBhbmQgZmlsZXMgb24gYSBzZXJ2ZXIKICAgICAgICAkSG9zdEVudW1CbG9jayA9IHsKICAgICAgICAgICAgcGFyYW0oJENvbXB1dGVyTmFtZSwgJFBpbmcsICRFeGNsdWRlZFNoYXJlcywgJFNlYXJjaFRlcm1zLCAkRXhjbHVkZUZvbGRlcnMsICRPZmZpY2VEb2NzLCAkRXhjbHVkZUhpZGRlbiwgJEZyZXNoRVhFcywgJENoZWNrV3JpdGVBY2Nlc3MsICRPdXRGaWxlLCAkVXNlUFNEcml2ZSkKCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkNvbXB1dGVyTmFtZTogJENvbXB1dGVyTmFtZSIKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXhjbHVkZWRTaGFyZXM6ICRFeGNsdWRlZFNoYXJlcyIKICAgICAgICAgICAgJFNlYXJjaFNoYXJlcyA9IEAoKQoKICAgICAgICAgICAgaWYoJENvbXB1dGVyTmFtZS5TdGFydHNXaXRoKCJcXCIpKSB7CiAgICAgICAgICAgICAgICAjIGlmIGEgc2hhcmUgaXMgcGFzc2VkIGFzIHRoZSBzZXJ2ZXIKICAgICAgICAgICAgICAgICRTZWFyY2hTaGFyZXMgKz0gJENvbXB1dGVyTmFtZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgIyBpZiB3ZSdyZSBlbnVtZXJhdGluZyB0aGUgc2hhcmVzIG9uIHRoZSB0YXJnZXQgc2VydmVyIGZpcnN0CiAgICAgICAgICAgICAgICAkVXAgPSAkVHJ1ZQogICAgICAgICAgICAgICAgaWYoJFBpbmcpIHsKICAgICAgICAgICAgICAgICAgICAkVXAgPSBUZXN0LUNvbm5lY3Rpb24gLUNvdW50IDEgLVF1aWV0IC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYoJFVwKSB7CiAgICAgICAgICAgICAgICAgICAgIyBnZXQgdGhlIHNoYXJlcyBmb3IgdGhpcyBob3N0IGFuZCBkaXNwbGF5IHdoYXQgd2UgZmluZAogICAgICAgICAgICAgICAgICAgICRTaGFyZXMgPSBHZXQtTmV0U2hhcmUgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgRm9yRWFjaCAoJFNoYXJlIGluICRTaGFyZXMpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICROZXROYW1lID0gJFNoYXJlLnNoaTFfbmV0bmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkUGF0aCA9ICdcXCcrJENvbXB1dGVyTmFtZSsnXCcrJE5ldE5hbWUKCiAgICAgICAgICAgICAgICAgICAgICAgICMgbWFrZSBzdXJlIHdlIGdldCBhIHJlYWwgc2hhcmUgbmFtZSBiYWNrCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoJE5ldE5hbWUpIC1hbmQgKCROZXROYW1lLnRyaW0oKSAtbmUgJycpKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBza2lwIHRoaXMgc2hhcmUgaWYgaXQncyBpbiB0aGUgZXhjbHVkZSBsaXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJEV4Y2x1ZGVkU2hhcmVzIC1Ob3RDb250YWlucyAkTmV0TmFtZS5Ub1VwcGVyKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGNoZWNrIGlmIHRoZSB1c2VyIGhhcyBhY2Nlc3MgdG8gdGhpcyBwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE51bGwgPSBbSU8uRGlyZWN0b3J5XTo6R2V0RmlsZXMoJFBhdGgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTZWFyY2hTaGFyZXMgKz0gJFBhdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1EZWJ1ZyAiWyFdIE5vIGFjY2VzcyB0byAkUGF0aCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEZvckVhY2goJFNoYXJlIGluICRTZWFyY2hTaGFyZXMpIHsKICAgICAgICAgICAgICAgICRTZWFyY2hBcmdzID0gIEB7CiAgICAgICAgICAgICAgICAgICAgJ1BhdGgnID0gJFNoYXJlCiAgICAgICAgICAgICAgICAgICAgJ1NlYXJjaFRlcm1zJyA9ICRTZWFyY2hUZXJtcwogICAgICAgICAgICAgICAgICAgICdPZmZpY2VEb2NzJyA9ICRPZmZpY2VEb2NzCiAgICAgICAgICAgICAgICAgICAgJ0ZyZXNoRVhFcycgPSAkRnJlc2hFWEVzCiAgICAgICAgICAgICAgICAgICAgJ0xhc3RBY2Nlc3NUaW1lJyA9ICRMYXN0QWNjZXNzVGltZQogICAgICAgICAgICAgICAgICAgICdMYXN0V3JpdGVUaW1lJyA9ICRMYXN0V3JpdGVUaW1lCiAgICAgICAgICAgICAgICAgICAgJ0NyZWF0aW9uVGltZScgPSAkQ3JlYXRpb25UaW1lCiAgICAgICAgICAgICAgICAgICAgJ0V4Y2x1ZGVGb2xkZXJzJyA9ICRFeGNsdWRlRm9sZGVycwogICAgICAgICAgICAgICAgICAgICdFeGNsdWRlSGlkZGVuJyA9ICRFeGNsdWRlSGlkZGVuCiAgICAgICAgICAgICAgICAgICAgJ0NoZWNrV3JpdGVBY2Nlc3MnID0gJENoZWNrV3JpdGVBY2Nlc3MKICAgICAgICAgICAgICAgICAgICAnT3V0RmlsZScgPSAkT3V0RmlsZQogICAgICAgICAgICAgICAgICAgICdVc2VQU0RyaXZlJyA9ICRVc2VQU0RyaXZlCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgRmluZC1JbnRlcmVzdGluZ0ZpbGUgQFNlYXJjaEFyZ3MKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBwcm9jZXNzIHsKCiAgICAgICAgaWYoJFRocmVhZHMpIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiVXNpbmcgdGhyZWFkaW5nIHdpdGggdGhyZWFkcyA9ICRUaHJlYWRzIgoKICAgICAgICAgICAgIyBpZiB3ZSdyZSB1c2luZyB0aHJlYWRpbmcsIGtpY2sgb2ZmIHRoZSBzY3JpcHQgYmxvY2sgd2l0aCBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbgogICAgICAgICAgICAkU2NyaXB0UGFyYW1zID0gQHsKICAgICAgICAgICAgICAgICdQaW5nJyA9ICQoLW5vdCAkTm9QaW5nKQogICAgICAgICAgICAgICAgJ0V4Y2x1ZGVkU2hhcmVzJyA9ICRFeGNsdWRlZFNoYXJlcwogICAgICAgICAgICAgICAgJ1NlYXJjaFRlcm1zJyA9ICRTZWFyY2hUZXJtcwogICAgICAgICAgICAgICAgJ0V4Y2x1ZGVGb2xkZXJzJyA9ICRFeGNsdWRlRm9sZGVycwogICAgICAgICAgICAgICAgJ09mZmljZURvY3MnID0gJE9mZmljZURvY3MKICAgICAgICAgICAgICAgICdFeGNsdWRlSGlkZGVuJyA9ICRFeGNsdWRlSGlkZGVuCiAgICAgICAgICAgICAgICAnRnJlc2hFWEVzJyA9ICRGcmVzaEVYRXMKICAgICAgICAgICAgICAgICdDaGVja1dyaXRlQWNjZXNzJyA9ICRDaGVja1dyaXRlQWNjZXNzCiAgICAgICAgICAgICAgICAnT3V0RmlsZScgPSAkT3V0RmlsZQogICAgICAgICAgICAgICAgJ1VzZVBTRHJpdmUnID0gJFVzZVBTRHJpdmUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBraWNrIG9mZiB0aGUgdGhyZWFkZWQgc2NyaXB0IGJsb2NrICsgYXJndW1lbnRzIAogICAgICAgICAgICBpZigkU2hhcmVzKSB7CiAgICAgICAgICAgICAgICAjIHBhc3MgdGhlIHNoYXJlcyBhcyB0aGUgaG9zdHMgc28gdGhlIHRocmVhZGVkIGZ1bmN0aW9uIGNvZGUgZG9lc24ndCBoYXZlIHRvIGJlIGhhY2tlZCB1cAogICAgICAgICAgICAgICAgSW52b2tlLVRocmVhZGVkRnVuY3Rpb24gLUNvbXB1dGVyTmFtZSAkU2hhcmVzIC1TY3JpcHRCbG9jayAkSG9zdEVudW1CbG9jayAtU2NyaXB0UGFyYW1ldGVycyAkU2NyaXB0UGFyYW1zIC1UaHJlYWRzICRUaHJlYWRzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbiAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1TY3JpcHRQYXJhbWV0ZXJzICRTY3JpcHRQYXJhbXMgLVRocmVhZHMgJFRocmVhZHMKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGlmKCRTaGFyZXMpewogICAgICAgICAgICAgICAgJENvbXB1dGVyTmFtZSA9ICRTaGFyZXMKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYoLW5vdCAkTm9QaW5nIC1hbmQgKCRDb21wdXRlck5hbWUuY291bnQgLWd0IDEpKSB7CiAgICAgICAgICAgICAgICAjIHBpbmcgYWxsIGhvc3RzIGluIHBhcmFsbGVsCiAgICAgICAgICAgICAgICAkUGluZyA9IHtwYXJhbSgkQ29tcHV0ZXJOYW1lKSBpZihUZXN0LUNvbm5lY3Rpb24gLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1Db3VudCAxIC1RdWlldCAtRXJyb3JBY3Rpb24gU3RvcCl7JENvbXB1dGVyTmFtZX19CiAgICAgICAgICAgICAgICAkQ29tcHV0ZXJOYW1lID0gSW52b2tlLVRocmVhZGVkRnVuY3Rpb24gLU5vSW1wb3J0cyAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLVNjcmlwdEJsb2NrICRQaW5nIC1UaHJlYWRzIDEwMAogICAgICAgICAgICB9CgogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gVG90YWwgbnVtYmVyIG9mIGFjdGl2ZSBob3N0czogJCgkQ29tcHV0ZXJOYW1lLmNvdW50KSIKICAgICAgICAgICAgJENvdW50ZXIgPSAwCgogICAgICAgICAgICAkQ29tcHV0ZXJOYW1lIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJDb21wdXRlcjogJF8iCiAgICAgICAgICAgICAgICAkQ291bnRlciA9ICRDb3VudGVyICsgMQoKICAgICAgICAgICAgICAgICMgc2xlZXAgZm9yIG91ciBzZW1pLXJhbmRvbWl6ZWQgaW50ZXJ2YWwKICAgICAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzICRSYW5kTm8uTmV4dCgoMS0kSml0dGVyKSokRGVsYXksICgxKyRKaXR0ZXIpKiREZWxheSkKCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gRW51bWVyYXRpbmcgc2VydmVyICRfICgkQ291bnRlciBvZiAkKCRDb21wdXRlck5hbWUuY291bnQpKSIKCiAgICAgICAgICAgICAgICBJbnZva2UtQ29tbWFuZCAtU2NyaXB0QmxvY2sgJEhvc3RFbnVtQmxvY2sgLUFyZ3VtZW50TGlzdCAkXywgJEZhbHNlLCAkRXhjbHVkZWRTaGFyZXMsICRTZWFyY2hUZXJtcywgJEV4Y2x1ZGVGb2xkZXJzLCAkT2ZmaWNlRG9jcywgJEV4Y2x1ZGVIaWRkZW4sICRGcmVzaEVYRXMsICRDaGVja1dyaXRlQWNjZXNzLCAkT3V0RmlsZSwgJFVzZVBTRHJpdmUgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBGaW5kLUxvY2FsQWRtaW5BY2Nlc3Mgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEZpbmRzIG1hY2hpbmVzIG9uIHRoZSBsb2NhbCBkb21haW4gd2hlcmUgdGhlIGN1cnJlbnQgdXNlciBoYXMKICAgICAgICBsb2NhbCBhZG1pbmlzdHJhdG9yIGFjY2Vzcy4gVXNlcyBtdWx0aXRocmVhZGluZyB0bwogICAgICAgIHNwZWVkIHVwIGVudW1lcmF0aW9uLgoKICAgICAgICBBdXRob3I6IEBoYXJtajB5CiAgICAgICAgTGljZW5zZTogQlNEIDMtQ2xhdXNlCgogICAgLkRFU0NSSVBUSU9OCgogICAgICAgIFRoaXMgZnVuY3Rpb24gZmluZHMgdGhlIGxvY2FsIGRvbWFpbiBuYW1lIGZvciBhIGhvc3QgdXNpbmcgR2V0LU5ldERvbWFpbiwKICAgICAgICBxdWVyaWVzIHRoZSBkb21haW4gZm9yIGFsbCBhY3RpdmUgbWFjaGluZXMgd2l0aCBHZXQtTmV0Q29tcHV0ZXIsIHRoZW4gZm9yCiAgICAgICAgZWFjaCBzZXJ2ZXIgaXQgY2hlY2tzIGlmIHRoZSBjdXJyZW50IHVzZXIgaGFzIGxvY2FsIGFkbWluaXN0cmF0b3IKICAgICAgICBhY2Nlc3MgdXNpbmcgSW52b2tlLUNoZWNrTG9jYWxBZG1pbkFjY2Vzcy4KCiAgICAgICAgSWRlYSBzdG9sZW4gZnJvbSB0aGUgbG9jYWxfYWRtaW5fc2VhcmNoX2VudW0gcG9zdCBtb2R1bGUgaW4KICAgICAgICBNZXRhc3Bsb2l0IHdyaXR0ZW4gYnk6CiAgICAgICAgICAgICdCcmFuZG9uIE1jQ2FubiAiemVrbm94IiA8Ym1jY2FublthdF1hY2N1dmFudC5jb20+JwogICAgICAgICAgICAnVGhvbWFzIE1jQ2FydGh5ICJzbWlsaW5ncmFjY29vbiIgPHNtaWxpbmdyYWNjb29uW2F0XWdtYWlsLmNvbT4nCiAgICAgICAgICAgICdSb3ljZSBEYXZpcyAicjNkeSIgPHJkYXZpc1thdF1hY2N1dmFudC5jb20+JwoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIEhvc3QgYXJyYXkgdG8gZW51bWVyYXRlLCBwYXNzYWJsZSBvbiB0aGUgcGlwZWxpbmUuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckZpbGUKCiAgICAgICAgRmlsZSBvZiBob3N0bmFtZXMvSVBzIHRvIHNlYXJjaC4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyRmlsdGVyCgogICAgICAgIEhvc3QgZmlsdGVyIG5hbWUgdG8gcXVlcnkgQUQgZm9yLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckFEU3BhdGgKCiAgICAgICAgVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoIGZvciBob3N0cywgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCiAgICAuUEFSQU1FVEVSIE5vUGluZwoKICAgICAgICBTd2l0Y2guIERvbid0IHBpbmcgZWFjaCBob3N0IHRvIGVuc3VyZSBpdCdzIHVwIGJlZm9yZSBlbnVtZXJhdGluZy4KCiAgICAuUEFSQU1FVEVSIERlbGF5CgogICAgICAgIERlbGF5IGJldHdlZW4gZW51bWVyYXRpbmcgaG9zdHMsIGRlZmF1bHRzIHRvIDAKCiAgICAuUEFSQU1FVEVSIEppdHRlcgoKICAgICAgICBKaXR0ZXIgZm9yIHRoZSBob3N0IGRlbGF5LCBkZWZhdWx0cyB0byArLy0gMC4zCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgRG9tYWluIHRvIHF1ZXJ5IGZvciBtYWNoaW5lcywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgogICAgCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIFNlYXJjaEZvcmVzdAoKICAgICAgICBTd2l0Y2guIFNlYXJjaCBhbGwgZG9tYWlucyBpbiB0aGUgZm9yZXN0IGZvciB0YXJnZXQgdXNlcnMgaW5zdGVhZCBvZiBqdXN0CiAgICAgICAgYSBzaW5nbGUgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgVGhyZWFkcwoKICAgICAgICBUaGUgbWF4aW11bSBjb25jdXJyZW50IHRocmVhZHMgdG8gZXhlY3V0ZS4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEZpbmQtTG9jYWxBZG1pbkFjY2VzcwoKICAgICAgICBGaW5kIG1hY2hpbmVzIG9uIHRoZSBsb2NhbCBkb21haW4gd2hlcmUgdGhlIGN1cnJlbnQgdXNlciBoYXMgbG9jYWwKICAgICAgICBhZG1pbmlzdHJhdG9yIGFjY2Vzcy4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEZpbmQtTG9jYWxBZG1pbkFjY2VzcyAtVGhyZWFkcyAxMAoKICAgICAgICBNdWx0aS10aHJlYWRlZCBhY2Nlc3MgaHVudGluZywgcmVwbGFjZXMgRmluZC1Mb2NhbEFkbWluQWNjZXNzVGhyZWFkZWQuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBGaW5kLUxvY2FsQWRtaW5BY2Nlc3MgLURvbWFpbiB0ZXN0aW5nCgogICAgICAgIEZpbmQgbWFjaGluZXMgb24gdGhlICd0ZXN0aW5nJyBkb21haW4gd2hlcmUgdGhlIGN1cnJlbnQgdXNlciBoYXMKICAgICAgICBsb2NhbCBhZG1pbmlzdHJhdG9yIGFjY2Vzcy4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEZpbmQtTG9jYWxBZG1pbkFjY2VzcyAtQ29tcHV0ZXJGaWxlIGhvc3RzLnR4dAoKICAgICAgICBGaW5kIHdoaWNoIG1hY2hpbmVzIGluIHRoZSBob3N0IGxpc3QgdGhlIGN1cnJlbnQgdXNlciBoYXMgbG9jYWwKICAgICAgICBhZG1pbmlzdHJhdG9yIGFjY2Vzcy4KCiAgICAuTElOSwoKICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vcmFwaWQ3L21ldGFzcGxvaXQtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL21vZHVsZXMvcG9zdC93aW5kb3dzL2dhdGhlci9sb2NhbF9hZG1pbl9zZWFyY2hfZW51bS5yYgogICAgICAgIGh0dHA6Ly93d3cuaGFybWoweS5uZXQvYmxvZy9wZW5ldGVzdGluZy9maW5kaW5nLWxvY2FsLWFkbWluLXdpdGgtdGhlLXZlaWwtZnJhbWV3b3JrLwojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uPTAsVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdHMnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSwKCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHtUZXN0LVBhdGggLVBhdGggJF8gfSldCiAgICAgICAgW0FsaWFzKCdIb3N0TGlzdCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyRmlsZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJGaWx0ZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyQURTcGF0aCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkTm9QaW5nLAoKICAgICAgICBbVUludDMyXQogICAgICAgICREZWxheSA9IDAsCgogICAgICAgIFtEb3VibGVdCiAgICAgICAgJEppdHRlciA9IC4zLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFNlYXJjaEZvcmVzdCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRUaHJlYWRzCiAgICApCgogICAgYmVnaW4gewogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RlYnVnJ10pIHsKICAgICAgICAgICAgJERlYnVnUHJlZmVyZW5jZSA9ICdDb250aW51ZScKICAgICAgICB9CgogICAgICAgICMgcmFuZG9tIG9iamVjdCBmb3IgZGVsYXkKICAgICAgICAkUmFuZE5vID0gTmV3LU9iamVjdCBTeXN0ZW0uUmFuZG9tCgogICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBSdW5uaW5nIEZpbmQtTG9jYWxBZG1pbkFjY2VzcyB3aXRoIGRlbGF5IG9mICREZWxheSIKCiAgICAgICAgIyBpZiB3ZSdyZSB1c2luZyBhIGhvc3QgbGlzdCwgcmVhZCB0aGUgdGFyZ2V0cyBpbiBhbmQgYWRkIHRoZW0gdG8gdGhlIHRhcmdldCBsaXN0CiAgICAgICAgaWYoJENvbXB1dGVyRmlsZSkgewogICAgICAgICAgICAkQ29tcHV0ZXJOYW1lID0gR2V0LUNvbnRlbnQgLVBhdGggJENvbXB1dGVyRmlsZQogICAgICAgIH0KCiAgICAgICAgaWYoISRDb21wdXRlck5hbWUpIHsKICAgICAgICAgICAgW2FycmF5XSRDb21wdXRlck5hbWUgPSBAKCkKCiAgICAgICAgICAgIGlmKCREb21haW4pIHsKICAgICAgICAgICAgICAgICRUYXJnZXREb21haW5zID0gQCgkRG9tYWluKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZigkU2VhcmNoRm9yZXN0KSB7CiAgICAgICAgICAgICAgICAjIGdldCBBTEwgdGhlIGRvbWFpbnMgaW4gdGhlIGZvcmVzdCB0byBzZWFyY2gKICAgICAgICAgICAgICAgICRUYXJnZXREb21haW5zID0gR2V0LU5ldEZvcmVzdERvbWFpbiB8IEZvckVhY2gtT2JqZWN0IHsgJF8uTmFtZSB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAjIHVzZSB0aGUgbG9jYWwgZG9tYWluCiAgICAgICAgICAgICAgICAkVGFyZ2V0RG9tYWlucyA9IEAoIChHZXQtTmV0RG9tYWluKS5uYW1lICkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgRm9yRWFjaCAoJERvbWFpbiBpbiAkVGFyZ2V0RG9tYWlucykgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFF1ZXJ5aW5nIGRvbWFpbiAkRG9tYWluIGZvciBob3N0cyIKICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgKz0gR2V0LU5ldENvbXB1dGVyIC1GaWx0ZXIgJENvbXB1dGVyRmlsdGVyIC1BRFNwYXRoICRDb21wdXRlckFEU3BhdGggLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyCiAgICAgICAgICAgIH0KICAgICAgICAKICAgICAgICAgICAgIyByZW1vdmUgYW55IG51bGwgdGFyZ2V0IGhvc3RzLCB1bmlxdWlmeSB0aGUgbGlzdCBhbmQgc2h1ZmZsZSBpdAogICAgICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJENvbXB1dGVyTmFtZSB8IFdoZXJlLU9iamVjdCB7ICRfIH0gfCBTb3J0LU9iamVjdCAtVW5pcXVlIHwgU29ydC1PYmplY3QgeyBHZXQtUmFuZG9tIH0KICAgICAgICAgICAgaWYoJCgkQ29tcHV0ZXJOYW1lLkNvdW50KSAtZXEgMCkgewogICAgICAgICAgICAgICAgdGhyb3cgIk5vIGhvc3RzIGZvdW5kISIKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgIyBzY3JpcHQgYmxvY2sgdGhhdCBlbnVtZXJhdGVzIGEgc2VydmVyCiAgICAgICAgJEhvc3RFbnVtQmxvY2sgPSB7CiAgICAgICAgICAgIHBhcmFtKCRDb21wdXRlck5hbWUsICRQaW5nKQoKICAgICAgICAgICAgJFVwID0gJFRydWUKICAgICAgICAgICAgaWYoJFBpbmcpIHsKICAgICAgICAgICAgICAgICRVcCA9IFRlc3QtQ29ubmVjdGlvbiAtQ291bnQgMSAtUXVpZXQgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJFVwKSB7CiAgICAgICAgICAgICAgICAjIGNoZWNrIGlmIHRoZSBjdXJyZW50IHVzZXIgaGFzIGxvY2FsIGFkbWluIGFjY2VzcyB0byB0aGlzIHNlcnZlcgogICAgICAgICAgICAgICAgJEFjY2VzcyA9IEludm9rZS1DaGVja0xvY2FsQWRtaW5BY2Nlc3MgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgICAgICBpZiAoJEFjY2VzcykgewogICAgICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICB9CgogICAgcHJvY2VzcyB7CgogICAgICAgIGlmKCRUaHJlYWRzKSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlVzaW5nIHRocmVhZGluZyB3aXRoIHRocmVhZHMgPSAkVGhyZWFkcyIKCiAgICAgICAgICAgICMgaWYgd2UncmUgdXNpbmcgdGhyZWFkaW5nLCBraWNrIG9mZiB0aGUgc2NyaXB0IGJsb2NrIHdpdGggSW52b2tlLVRocmVhZGVkRnVuY3Rpb24KICAgICAgICAgICAgJFNjcmlwdFBhcmFtcyA9IEB7CiAgICAgICAgICAgICAgICAnUGluZycgPSAkKC1ub3QgJE5vUGluZykKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBraWNrIG9mZiB0aGUgdGhyZWFkZWQgc2NyaXB0IGJsb2NrICsgYXJndW1lbnRzIAogICAgICAgICAgICBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbiAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1TY3JpcHRQYXJhbWV0ZXJzICRTY3JpcHRQYXJhbXMgLVRocmVhZHMgJFRocmVhZHMKICAgICAgICB9CgogICAgICAgIGVsc2UgewogICAgICAgICAgICBpZigtbm90ICROb1BpbmcgLWFuZCAoJENvbXB1dGVyTmFtZS5jb3VudCAtbmUgMSkpIHsKICAgICAgICAgICAgICAgICMgcGluZyBhbGwgaG9zdHMgaW4gcGFyYWxsZWwKICAgICAgICAgICAgICAgICRQaW5nID0ge3BhcmFtKCRDb21wdXRlck5hbWUpIGlmKFRlc3QtQ29ubmVjdGlvbiAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLUNvdW50IDEgLVF1aWV0IC1FcnJvckFjdGlvbiBTdG9wKXskQ29tcHV0ZXJOYW1lfX0KICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgPSBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbiAtTm9JbXBvcnRzIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSAtU2NyaXB0QmxvY2sgJFBpbmcgLVRocmVhZHMgMTAwCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBUb3RhbCBudW1iZXIgb2YgYWN0aXZlIGhvc3RzOiAkKCRDb21wdXRlck5hbWUuY291bnQpIgogICAgICAgICAgICAkQ291bnRlciA9IDAKCiAgICAgICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CgogICAgICAgICAgICAgICAgJENvdW50ZXIgPSAkQ291bnRlciArIDEKCiAgICAgICAgICAgICAgICAjIHNsZWVwIGZvciBvdXIgc2VtaS1yYW5kb21pemVkIGludGVydmFsCiAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkUmFuZE5vLk5leHQoKDEtJEppdHRlcikqJERlbGF5LCAoMSskSml0dGVyKSokRGVsYXkpCgogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIEVudW1lcmF0aW5nIHNlcnZlciAkQ29tcHV0ZXIgKCRDb3VudGVyIG9mICQoJENvbXB1dGVyTmFtZS5jb3VudCkpIgogICAgICAgICAgICAgICAgSW52b2tlLUNvbW1hbmQgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1Bcmd1bWVudExpc3QgJENvbXB1dGVyLCAkRmFsc2UKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1FeHBsb2l0YWJsZVN5c3RlbSB7CjwjCiAgICAuU3lub3BzaXMKCiAgICAgICAgVGhpcyBtb2R1bGUgd2lsbCBxdWVyeSBBY3RpdmUgRGlyZWN0b3J5IGZvciB0aGUgaG9zdG5hbWUsIE9TIHZlcnNpb24sIGFuZCBzZXJ2aWNlIHBhY2sgbGV2ZWwgIAogICAgICAgIGZvciBlYWNoIGNvbXB1dGVyIGFjY291bnQuICBUaGF0IGluZm9ybWF0aW9uIGlzIHRoZW4gY3Jvc3MtcmVmZXJlbmNlZCBhZ2FpbnN0IGEgbGlzdCBvZiBjb21tb24KICAgICAgICBNZXRhc3Bsb2l0IGV4cGxvaXRzIHRoYXQgY2FuIGJlIHVzZWQgZHVyaW5nIHBlbmV0cmF0aW9uIHRlc3RpbmcuCgogICAgLkRFU0NSSVBUSU9OCgogICAgICAgIFRoaXMgbW9kdWxlIHdpbGwgcXVlcnkgQWN0aXZlIERpcmVjdG9yeSBmb3IgdGhlIGhvc3RuYW1lLCBPUyB2ZXJzaW9uLCBhbmQgc2VydmljZSBwYWNrIGxldmVsICAKICAgICAgICBmb3IgZWFjaCBjb21wdXRlciBhY2NvdW50LiAgVGhhdCBpbmZvcm1hdGlvbiBpcyB0aGVuIGNyb3NzLXJlZmVyZW5jZWQgYWdhaW5zdCBhIGxpc3Qgb2YgY29tbW9uCiAgICAgICAgTWV0YXNwbG9pdCBleHBsb2l0cyB0aGF0IGNhbiBiZSB1c2VkIGR1cmluZyBwZW5ldHJhdGlvbiB0ZXN0aW5nLiAgVGhlIHNjcmlwdCBmaWx0ZXJzIG91dCBkaXNhYmxlZAogICAgICAgIGRvbWFpbiBjb21wdXRlcnMgYW5kIHByb3ZpZGVzIHRoZSBjb21wdXRlcidzIGxhc3QgbG9nb24gdGltZSB0byBoZWxwIGRldGVybWluZSBpZiBpdCdzIGJlZW4gCiAgICAgICAgZGVjb21taXNzaW9uZWQuICBBbHNvLCBzaW5jZSB0aGUgc2NyaXB0IHVzZXMgZGF0YSB0YWJsZXMgdG8gb3V0cHV0IGFmZmVjdGVkIHN5c3RlbXMgdGhlIHJlc3VsdHMKICAgICAgICBjYW4gYmUgZWFzaWx5IHBpcGVkIHRvIG90aGVyIGNvbW1hbmRzIHN1Y2ggYXMgdGVzdC1jb25uZWN0aW9uIG9yIGEgRXhwb3J0LUNzdi4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBSZXR1cm4gY29tcHV0ZXJzIHdpdGggYSBzcGVjaWZpYyBuYW1lLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgogICAgLlBBUkFNRVRFUiBTUE4KCiAgICAgICAgUmV0dXJuIGNvbXB1dGVycyB3aXRoIGEgc3BlY2lmaWMgc2VydmljZSBwcmluY2lwYWwgbmFtZSwgd2lsZGNhcmRzIGFjY2VwdGVkLgoKICAgIC5QQVJBTUVURVIgT3BlcmF0aW5nU3lzdGVtCgogICAgICAgIFJldHVybiBjb21wdXRlcnMgd2l0aCBhIHNwZWNpZmljIG9wZXJhdGluZyBzeXN0ZW0sIHdpbGRjYXJkcyBhY2NlcHRlZC4KCiAgICAuUEFSQU1FVEVSIFNlcnZpY2VQYWNrCgogICAgICAgIFJldHVybiBjb21wdXRlcnMgd2l0aCBhIHNwZWNpZmljIHNlcnZpY2UgcGFjaywgd2lsZGNhcmRzIGFjY2VwdGVkLgoKICAgIC5QQVJBTUVURVIgRmlsdGVyCgogICAgICAgIEEgY3VzdG9taXplZCBsZGFwIGZpbHRlciBzdHJpbmcgdG8gdXNlLCBlLmcuICIoZGVzY3JpcHRpb249KmFkbWluKikiCgogICAgLlBBUkFNRVRFUiBQaW5nCgogICAgICAgIFN3aXRjaC4gUGluZyBlYWNoIGhvc3QgdG8gZW5zdXJlIGl0J3MgdXAgYmVmb3JlIGVudW1lcmF0aW5nLgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gcXVlcnkgZm9yIGNvbXB1dGVycywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgQURTcGF0aAoKICAgICAgICBUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBVbmNvbnN0cmFpbmVkCgogICAgICAgIFN3aXRjaC4gUmV0dXJuIGNvbXB1dGVyIG9iamVjdHMgdGhhdCBoYXZlIHVuY29uc3RyYWluZWQgZGVsZWdhdGlvbi4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCiAgICAgICAKICAgICAgICBUaGUgZXhhbXBsZSBiZWxvdyBzaG93cyB0aGUgc3RhbmRhcmQgY29tbWFuZCB1c2FnZS4gIERpc2FibGVkIHN5c3RlbSBhcmUgZXhjbHVkZWQgYnkgZGVmYXVsdCwgYnV0CiAgICAgICAgdGhlICJMYXN0TGdvbiIgY29sdW1uIGNhbiBiZSB1c2VkIHRvIGRldGVybWluZSB3aGljaCBzeXN0ZW1zIGFyZSBsaXZlLiAgVXN1YWxseSwgaWYgYSBzeXN0ZW0gaGFzbid0IAogICAgICAgIGxvZ2dlZCBvbiBmb3IgdHdvIG9yIG1vcmUgd2Vla3MgaXQncyBiZWVuIGRlY29tbWlzc2lvbmVkLiAgICAgIAogICAgICAgIFBTIEM6XD4gR2V0LUV4cGxvaXRhYmxlU3lzdGVtIC1Eb21haW5Db250cm9sbGVyIDE5Mi4xNjguMS4xIC1DcmVkZW50aWFsIGRlbW8uY29tXHVzZXIgfCBGb3JtYXQtVGFibGUgLUF1dG9TaXplCiAgICAgICAgWypdIEdyYWJiaW5nIGNvbXB1dGVyIGFjY291bnRzIGZyb20gQWN0aXZlIERpcmVjdG9yeS4uLgogICAgICAgIFsqXSBMb2FkaW5nIGV4cGxvaXQgbGlzdCBmb3IgY3JpdGljYWwgbWlzc2luZyBwYXRjaGVzLi4uCiAgICAgICAgWypdIENoZWNraW5nIGNvbXB1dGVycyBmb3IgdnVsbmVyYWJsZSBPUyBhbmQgU1AgbGV2ZWxzLi4uCiAgICAgICAgWytdIEZvdW5kIDUgcG90ZW50aWFsbHkgdnVsbmVyYWJsZSBzeXN0ZW1zIQogICAgICAgIENvbXB1dGVyTmFtZSAgICAgICAgICBPcGVyYXRpbmdTeXN0ZW0gICAgICAgICBTZXJ2aWNlUGFjayAgICBMYXN0TG9nb24gICAgICAgICAgICBNc2ZNb2R1bGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENWRSAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAtLS0tLS0tLS0tLS0gICAgICAgICAgLS0tLS0tLS0tLS0tLS0tICAgICAgICAgLS0tLS0tLS0tLS0gICAgLS0tLS0tLS0tICAgICAgICAgICAgLS0tLS0tLS0tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLS0gICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgQURTLmRlbW8uY29tICAgICAgICAgIFdpbmRvd3MgU2VydmVyIDIwMDMgICAgIFNlcnZpY2UgUGFjayAyIDQvOC8yMDE1IDU6NDY6NTIgUE0gIGV4cGxvaXQvd2luZG93cy9kY2VycGMvbXMwN18wMjlfbXNkbnNfem9uZW5hbWUgaHR0cDovL3d3dy5jdmVkZXRhaWxzLi4uLgogICAgICAgIEFEUy5kZW1vLmNvbSAgICAgICAgICBXaW5kb3dzIFNlcnZlciAyMDAzICAgICBTZXJ2aWNlIFBhY2sgMiA0LzgvMjAxNSA1OjQ2OjUyIFBNICBleHBsb2l0L3dpbmRvd3Mvc21iL21zMDhfMDY3X25ldGFwaSAgICAgICAgICAgIGh0dHA6Ly93d3cuY3ZlZGV0YWlscy4uLi4KICAgICAgICBBRFMuZGVtby5jb20gICAgICAgICAgV2luZG93cyBTZXJ2ZXIgMjAwMyAgICAgU2VydmljZSBQYWNrIDIgNC84LzIwMTUgNTo0Njo1MiBQTSAgZXhwbG9pdC93aW5kb3dzL3NtYi9tczEwXzA2MV9zcG9vbHNzICAgICAgICAgICBodHRwOi8vd3d3LmN2ZWRldGFpbHMuLi4uCiAgICAgICAgTFZBLmRlbW8uY29tICAgICAgICAgIFdpbmRvd3MgU2VydmVyIDIwMDMgICAgIFNlcnZpY2UgUGFjayAyIDQvOC8yMDE1IDE6NDQ6NDYgUE0gIGV4cGxvaXQvd2luZG93cy9kY2VycGMvbXMwN18wMjlfbXNkbnNfem9uZW5hbWUgaHR0cDovL3d3dy5jdmVkZXRhaWxzLi4uLgogICAgICAgIExWQS5kZW1vLmNvbSAgICAgICAgICBXaW5kb3dzIFNlcnZlciAyMDAzICAgICBTZXJ2aWNlIFBhY2sgMiA0LzgvMjAxNSAxOjQ0OjQ2IFBNICBleHBsb2l0L3dpbmRvd3Mvc21iL21zMDhfMDY3X25ldGFwaSAgICAgICAgICAgIGh0dHA6Ly93d3cuY3ZlZGV0YWlscy4uLi4KICAgICAgICBMVkEuZGVtby5jb20gICAgICAgICAgV2luZG93cyBTZXJ2ZXIgMjAwMyAgICAgU2VydmljZSBQYWNrIDIgNC84LzIwMTUgMTo0NDo0NiBQTSAgZXhwbG9pdC93aW5kb3dzL3NtYi9tczEwXzA2MV9zcG9vbHNzICAgICAgICAgICBodHRwOi8vd3d3LmN2ZWRldGFpbHMuLi4uCiAgICAgICAgYXNzZXNzLXhwcHJvLmRlbW8uY29tIFdpbmRvd3MgWFAgUHJvZmVzc2lvbmFsIFNlcnZpY2UgUGFjayAzIDQvMS8yMDE0IDExOjExOjU0IEFNIGV4cGxvaXQvd2luZG93cy9zbWIvbXMwOF8wNjdfbmV0YXBpICAgICAgICAgICAgaHR0cDovL3d3dy5jdmVkZXRhaWxzLi4uLgogICAgICAgIGFzc2Vzcy14cHByby5kZW1vLmNvbSBXaW5kb3dzIFhQIFByb2Zlc3Npb25hbCBTZXJ2aWNlIFBhY2sgMyA0LzEvMjAxNCAxMToxMTo1NCBBTSBleHBsb2l0L3dpbmRvd3Mvc21iL21zMTBfMDYxX3Nwb29sc3MgICAgICAgICAgIGh0dHA6Ly93d3cuY3ZlZGV0YWlscy4uLi4KICAgICAgICBIVkEuZGVtby5jb20gICAgICAgICAgV2luZG93cyBTZXJ2ZXIgMjAwMyAgICAgU2VydmljZSBQYWNrIDIgMTEvNS8yMDEzIDk6MTY6MzEgUE0gZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA3XzAyOV9tc2Ruc196b25lbmFtZSBodHRwOi8vd3d3LmN2ZWRldGFpbHMuLi4uCiAgICAgICAgSFZBLmRlbW8uY29tICAgICAgICAgIFdpbmRvd3MgU2VydmVyIDIwMDMgICAgIFNlcnZpY2UgUGFjayAyIDExLzUvMjAxMyA5OjE2OjMxIFBNIGV4cGxvaXQvd2luZG93cy9zbWIvbXMwOF8wNjdfbmV0YXBpICAgICAgICAgICAgaHR0cDovL3d3dy5jdmVkZXRhaWxzLi4uLgogICAgICAgIEhWQS5kZW1vLmNvbSAgICAgICAgICBXaW5kb3dzIFNlcnZlciAyMDAzICAgICBTZXJ2aWNlIFBhY2sgMiAxMS81LzIwMTMgOToxNjozMSBQTSBleHBsb2l0L3dpbmRvd3Mvc21iL21zMTBfMDYxX3Nwb29sc3MgICAgICAgICAgIGh0dHA6Ly93d3cuY3ZlZGV0YWlscy4uLi4KICAgICAgICBEQjEuZGVtby5jb20gICAgICAgICAgV2luZG93cyBTZXJ2ZXIgMjAwMyAgICAgU2VydmljZSBQYWNrIDIgMy8yMi8yMDEyIDU6MDU6MzQgUE0gZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA3XzAyOV9tc2Ruc196b25lbmFtZSBodHRwOi8vd3d3LmN2ZWRldGFpbHMuLi4uCiAgICAgICAgREIxLmRlbW8uY29tICAgICAgICAgIFdpbmRvd3MgU2VydmVyIDIwMDMgICAgIFNlcnZpY2UgUGFjayAyIDMvMjIvMjAxMiA1OjA1OjM0IFBNIGV4cGxvaXQvd2luZG93cy9zbWIvbXMwOF8wNjdfbmV0YXBpICAgICAgICAgICAgaHR0cDovL3d3dy5jdmVkZXRhaWxzLi4uLgogICAgICAgIERCMS5kZW1vLmNvbSAgICAgICAgICBXaW5kb3dzIFNlcnZlciAyMDAzICAgICBTZXJ2aWNlIFBhY2sgMiAzLzIyLzIwMTIgNTowNTozNCBQTSBleHBsb2l0L3dpbmRvd3Mvc21iL21zMTBfMDYxX3Nwb29sc3MgICAgICAgICAgIGh0dHA6Ly93d3cuY3ZlZGV0YWlscy4uLi4gICAgICAgICAgICAgICAgICAgICAKCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1FeHBsb2l0YWJsZVN5c3RlbSB8IEV4cG9ydC1Dc3YgYzpcdGVtcFxvdXRwdXQuY3N2IC1Ob1R5cGVJbmZvcm1hdGlvbgoKICAgICAgICBIb3cgdG8gd3JpdGUgdGhlIG91dHB1dCB0byBhIGNzdiBmaWxlLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LUV4cGxvaXRhYmxlU3lzdGVtIC1Eb21haW4gdGVzdGxhYi5sb2NhbCAtUGluZwoKICAgICAgICBSZXR1cm4gYSBzZXQgb2YgbGl2ZSBob3N0cyBmcm9tIHRoZSB0ZXN0bGFiLmxvY2FsIGRvbWFpbgoKICAgICAuTElOSwogICAgICAgCiAgICAgICBodHRwOi8vd3d3Lm5ldHNwaS5jb20KICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9udWxsYmluZC9Qb3dlcnNoZWxsZXJ5L2Jsb2IvbWFzdGVyL1N0YWJsZS1pc2gvQURTL0dldC1FeHBsb2l0YWJsZVN5c3RlbXMucHNtMQogICAgICAgCiAgICAgLk5PVEVTCiAgICAgICAKICAgICAgIEF1dGhvcjogIFNjb3R0IFN1dGhlcmxhbmQgLSAyMDE1LCBOZXRTUEkKICAgICAgICAgICAgICAgIE1vZGlmaWNhdGlvbnMgdG8gaW50ZWdyYXRlIGludG8gUG93ZXJWaWV3IGJ5IEBoYXJtajB5CiAgICAgICBWZXJzaW9uOiBHZXQtRXhwbG9pdGFibGVTeXN0ZW0ucHNtMSB2MS4xCiAgICAgICBDb21tZW50czogVGhlIHRlY2huaXF1ZSB1c2VkIHRvIHF1ZXJ5IExEQVAgd2FzIGJhc2VkIG9uIHRoZSAiR2V0LUF1ZGl0RFNDb21wdXRlckFjY291bnQiIAogICAgICAgZnVuY3Rpb24gZm91bmQgaW4gQ2Fyb2xzIFBlcmV6J3MgUG9zaFNlYy1Nb2QgcHJvamVjdC4gIFRoZSBnZW5lcmFsIGlkZWEgaXMgYmFzZWQgb2ZmIG9mICAKICAgICAgIFdpbGwgU2Nocm9lZGVyJ3MgIkludm9rZS1GaW5kVnVsblN5c3RlbXMiIGZ1bmN0aW9uIGZyb20gdGhlIFBvd2VyVmlldyB0b29sa2l0LgojPgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlck5hbWUgPSAnKicsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNQTiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkT3BlcmF0aW5nU3lzdGVtID0gJyonLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2aWNlUGFjayA9ICcqJywKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRmlsdGVyLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRQaW5nLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFVuY29uc3RyYWluZWQsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICBXcml0ZS1WZXJib3NlICJbKl0gR3JhYmJpbmcgY29tcHV0ZXIgYWNjb3VudHMgZnJvbSBBY3RpdmUgRGlyZWN0b3J5Li4uIgoKICAgICMgQ3JlYXRlIGRhdGEgdGFibGUgZm9yIGhvc3RuYW1lcywgb3MsIGFuZCBzZXJ2aWNlIHBhY2tzIGZyb20gTERBUAogICAgJFRhYmxlQWRzQ29tcHV0ZXJzID0gTmV3LU9iamVjdCBTeXN0ZW0uRGF0YS5EYXRhVGFibGUgCiAgICAkTnVsbCA9ICRUYWJsZUFkc0NvbXB1dGVycy5Db2x1bW5zLkFkZCgnSG9zdG5hbWUnKSAgICAgICAKICAgICROdWxsID0gJFRhYmxlQWRzQ29tcHV0ZXJzLkNvbHVtbnMuQWRkKCdPcGVyYXRpbmdTeXN0ZW0nKQogICAgJE51bGwgPSAkVGFibGVBZHNDb21wdXRlcnMuQ29sdW1ucy5BZGQoJ1NlcnZpY2VQYWNrJykKICAgICROdWxsID0gJFRhYmxlQWRzQ29tcHV0ZXJzLkNvbHVtbnMuQWRkKCdMYXN0TG9nb24nKQoKICAgIEdldC1OZXRDb21wdXRlciAtRnVsbERhdGEgQFBTQm91bmRQYXJhbWV0ZXJzIHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICAkQ3VycmVudEhvc3QgPSAkXy5kbnNob3N0bmFtZQogICAgICAgICRDdXJyZW50T3MgPSAkXy5vcGVyYXRpbmdzeXN0ZW0KICAgICAgICAkQ3VycmVudFNwID0gJF8ub3BlcmF0aW5nc3lzdGVtc2VydmljZXBhY2sKICAgICAgICAkQ3VycmVudExhc3QgPSAkXy5sYXN0bG9nb24KICAgICAgICAkQ3VycmVudFVhYyA9ICRfLnVzZXJhY2NvdW50Y29udHJvbAoKICAgICAgICAkQ3VycmVudFVhY0JpbiA9IFtjb252ZXJ0XTo6VG9TdHJpbmcoJF8udXNlcmFjY291bnRjb250cm9sLDIpCgogICAgICAgICMgQ2hlY2sgdGhlIDJuZCB0byBsYXN0IHZhbHVlIHRvIGRldGVybWluZSBpZiBpdHMgZGlzYWJsZWQKICAgICAgICAkRGlzYWJsZU9mZnNldCA9ICRDdXJyZW50VWFjQmluLkxlbmd0aCAtIDIKICAgICAgICAkQ3VycmVudERpc2FibGVkID0gJEN1cnJlbnRVYWNCaW4uU3Vic3RyaW5nKCREaXNhYmxlT2Zmc2V0LDEpCgogICAgICAgICMgQWRkIGNvbXB1dGVyIHRvIGxpc3QgaWYgaXQncyBlbmFibGVkCiAgICAgICAgaWYgKCRDdXJyZW50RGlzYWJsZWQgIC1lcSAwKSB7CiAgICAgICAgICAgICMgQWRkIGRvbWFpbiBjb21wdXRlciB0byBkYXRhIHRhYmxlCiAgICAgICAgICAgICROdWxsID0gJFRhYmxlQWRzQ29tcHV0ZXJzLlJvd3MuQWRkKCRDdXJyZW50SG9zdCwkQ3VycmVudE9TLCRDdXJyZW50U1AsJEN1cnJlbnRMYXN0KQogICAgICAgIH0KICAgIH0KCiAgICAjIFN0YXR1cyB1c2VyICAgICAgICAKICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBMb2FkaW5nIGV4cGxvaXQgbGlzdCBmb3IgY3JpdGljYWwgbWlzc2luZyBwYXRjaGVzLi4uIgoKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgIyBTZXR1cCBkYXRhIHRhYmxlIGZvciBsaXN0IG9mIG1zZiBleHBsb2l0cwogICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgIyBDcmVhdGUgZGF0YSB0YWJsZSBmb3IgbGlzdCBvZiBwYXRjaGVzIGxldmVscyB3aXRoIGEgTVNGIGV4cGxvaXQKICAgICRUYWJsZUV4cGxvaXRzID0gTmV3LU9iamVjdCBTeXN0ZW0uRGF0YS5EYXRhVGFibGUgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLkNvbHVtbnMuQWRkKCdPcGVyYXRpbmdTeXN0ZW0nKSAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuQ29sdW1ucy5BZGQoJ1NlcnZpY2VQYWNrJykKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuQ29sdW1ucy5BZGQoJ01zZk1vZHVsZScpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuQ29sdW1ucy5BZGQoJ0NWRScpCiAgICAKICAgICMgQWRkIGV4cGxvaXRzIHRvIGRhdGEgdGFibGUKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgNyIsIiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMxMF8wNjFfc3Bvb2xzcyIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMTAtMjcyOSIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDAiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczAzXzAyNl9kY29tIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwMy0wMzUyLyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDAiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA1XzAxN19tc21xIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNS0wMDU5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIlNlcnZlciBQYWNrIDEiLCJleHBsb2l0L3dpbmRvd3MvaWlzL21zMDNfMDA3X250ZGxsX3dlYmRhdiIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDMtMDEwOSIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDAiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL3dpbnMvbXMwNF8wNDVfd2lucyIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDQtMTA4MC8iKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAwIiwiU2VydmljZSBQYWNrIDIiLCJleHBsb2l0L3dpbmRvd3MvZGNlcnBjL21zMDNfMDI2X2Rjb20iLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDAzLTAzNTIvIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIlNlcnZpY2UgUGFjayAyIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA1XzAxN19tc21xIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNS0wMDU5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIlNlcnZpY2UgUGFjayAyIiwiZXhwbG9pdC93aW5kb3dzL2lpcy9tczAzXzAwN19udGRsbF93ZWJkYXYiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDAzLTAxMDkiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAwIiwiU2VydmljZSBQYWNrIDIiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDRfMDExX2xzYXNzIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwMy0wNTMzLyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDAiLCJTZXJ2aWNlIFBhY2sgMiIsImV4cGxvaXQvd2luZG93cy93aW5zL21zMDRfMDQ1X3dpbnMiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA0LTEwODAvIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIlNlcnZpY2UgUGFjayAzIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczAzXzAyNl9kY29tIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwMy0wMzUyLyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDAiLCJTZXJ2aWNlIFBhY2sgMyIsImV4cGxvaXQvd2luZG93cy9kY2VycGMvbXMwNV8wMTdfbXNtcSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDUtMDA1OSIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDAiLCJTZXJ2aWNlIFBhY2sgMyIsImV4cGxvaXQvd2luZG93cy9paXMvbXMwM18wMDdfbnRkbGxfd2ViZGF2IiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwMy0wMTA5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIlNlcnZpY2UgUGFjayAzIiwiZXhwbG9pdC93aW5kb3dzL3dpbnMvbXMwNF8wNDVfd2lucyIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDQtMTA4MC8iKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAwIiwiU2VydmljZSBQYWNrIDQiLCJleHBsb2l0L3dpbmRvd3MvZGNlcnBjL21zMDNfMDI2X2Rjb20iLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDAzLTAzNTIvIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIlNlcnZpY2UgUGFjayA0IiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA1XzAxN19tc21xIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNS0wMDU5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIlNlcnZpY2UgUGFjayA0IiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA3XzAyOV9tc2Ruc196b25lbmFtZSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDctMTc0OCIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDAiLCJTZXJ2aWNlIFBhY2sgNCIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwNF8wMTFfbHNhc3MiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDAzLTA1MzMvIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIlNlcnZpY2UgUGFjayA0IiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA2XzA0MF9uZXRhcGkiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA2LTM0MzkiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAwIiwiU2VydmljZSBQYWNrIDQiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDZfMDY2X253YXBpIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNi00Njg4IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIlNlcnZpY2UgUGFjayA0IiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA2XzA3MF93a3NzdmMiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA2LTQ2OTEiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAwIiwiU2VydmljZSBQYWNrIDQiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDhfMDY3X25ldGFwaSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDgtNDI1MCIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDAiLCJTZXJ2aWNlIFBhY2sgNCIsImV4cGxvaXQvd2luZG93cy93aW5zL21zMDRfMDQ1X3dpbnMiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA0LTEwODAvIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIiIsImV4cGxvaXQvd2luZG93cy9kY2VycGMvbXMwM18wMjZfZGNvbSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDMtMDM1Mi8iKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAwIiwiIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA1XzAxN19tc21xIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNS0wMDU5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIiIsImV4cGxvaXQvd2luZG93cy9paXMvbXMwM18wMDdfbnRkbGxfd2ViZGF2IiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwMy0wMTA5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwNV8wMzlfcG5wIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNS0xOTgzIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIiIsImV4cGxvaXQvd2luZG93cy93aW5zL21zMDRfMDQ1X3dpbnMiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA0LTEwODAvIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMyIsIlNlcnZlciBQYWNrIDEiLCJleHBsb2l0L3dpbmRvd3MvZGNlcnBjL21zMDdfMDI5X21zZG5zX3pvbmVuYW1lIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNy0xNzQ4IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMyIsIlNlcnZlciBQYWNrIDEiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDZfMDQwX25ldGFwaSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDYtMzQzOSIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDMiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA2XzA2Nl9ud2FwaSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDYtNDY4OCIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDMiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA4XzA2N19uZXRhcGkiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA4LTQyNTAiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAzIiwiU2VydmVyIFBhY2sgMSIsImV4cGxvaXQvd2luZG93cy93aW5zL21zMDRfMDQ1X3dpbnMiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA0LTEwODAvIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMyIsIlNlcnZpY2UgUGFjayAyIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA3XzAyOV9tc2Ruc196b25lbmFtZSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDctMTc0OCIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDMiLCJTZXJ2aWNlIFBhY2sgMiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwOF8wNjdfbmV0YXBpIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwOC00MjUwIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMyIsIlNlcnZpY2UgUGFjayAyIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczEwXzA2MV9zcG9vbHNzIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAxMC0yNzI5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMyIsIiIsImV4cGxvaXQvd2luZG93cy9kY2VycGMvbXMwM18wMjZfZGNvbSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDMtMDM1Mi8iKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAzIiwiIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA2XzA0MF9uZXRhcGkiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA2LTM0MzkiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAzIiwiIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA4XzA2N19uZXRhcGkiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA4LTQyNTAiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAzIiwiIiwiZXhwbG9pdC93aW5kb3dzL3dpbnMvbXMwNF8wNDVfd2lucyIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDQtMTA4MC8iKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAzIFIyIiwiIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczAzXzAyNl9kY29tIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwMy0wMzUyLyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDMgUjIiLCIiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDRfMDExX2xzYXNzIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwMy0wNTMzLyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDMgUjIiLCIiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDZfMDQwX25ldGFwaSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDYtMzQzOSIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDMgUjIiLCIiLCJleHBsb2l0L3dpbmRvd3Mvd2lucy9tczA0XzA0NV93aW5zIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNC0xMDgwLyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDgiLCJTZXJ2aWNlIFBhY2sgMiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwOV8wNTBfc21iMl9uZWdvdGlhdGVfZnVuY19pbmRleCIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDktMzEwMyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDgiLCJTZXJ2aWNlIFBhY2sgMiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMxMF8wNjFfc3Bvb2xzcyIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMTAtMjcyOSIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDgiLCIiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDhfMDY3X25ldGFwaSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDgtNDI1MCIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDgiLCIiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDlfMDUwX3NtYjJfbmVnb3RpYXRlX2Z1bmNfaW5kZXgiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA5LTMxMDMiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDA4IiwiIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczEwXzA2MV9zcG9vbHNzIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAxMC0yNzI5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwOCBSMiIsIiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMxMF8wNjFfc3Bvb2xzcyIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMTAtMjcyOSIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgVmlzdGEiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA4XzA2N19uZXRhcGkiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA4LTQyNTAiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFZpc3RhIiwiU2VydmVyIFBhY2sgMSIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwOV8wNTBfc21iMl9uZWdvdGlhdGVfZnVuY19pbmRleCIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDktMzEwMyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgVmlzdGEiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczEwXzA2MV9zcG9vbHNzIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAxMC0yNzI5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBWaXN0YSIsIlNlcnZpY2UgUGFjayAyIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA5XzA1MF9zbWIyX25lZ290aWF0ZV9mdW5jX2luZGV4IiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwOS0zMTAzIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBWaXN0YSIsIlNlcnZpY2UgUGFjayAyIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczEwXzA2MV9zcG9vbHNzIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAxMC0yNzI5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBWaXN0YSIsIiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwOF8wNjdfbmV0YXBpIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwOC00MjUwIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBWaXN0YSIsIiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwOV8wNTBfc21iMl9uZWdvdGlhdGVfZnVuY19pbmRleCIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDktMzEwMyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgWFAiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczAzXzAyNl9kY29tIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwMy0wMzUyLyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgWFAiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA1XzAxN19tc21xIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNS0wMDU5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBYUCIsIlNlcnZlciBQYWNrIDEiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDRfMDExX2xzYXNzIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwMy0wNTMzLyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgWFAiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA1XzAzOV9wbnAiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA1LTE5ODMiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFhQIiwiU2VydmVyIFBhY2sgMSIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwNl8wNDBfbmV0YXBpIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNi0zNDM5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBYUCIsIlNlcnZpY2UgUGFjayAyIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA1XzAxN19tc21xIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNS0wMDU5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBYUCIsIlNlcnZpY2UgUGFjayAyIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA2XzA0MF9uZXRhcGkiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA2LTM0MzkiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFhQIiwiU2VydmljZSBQYWNrIDIiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDZfMDY2X253YXBpIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNi00Njg4IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBYUCIsIlNlcnZpY2UgUGFjayAyIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA2XzA3MF93a3NzdmMiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA2LTQ2OTEiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFhQIiwiU2VydmljZSBQYWNrIDIiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDhfMDY3X25ldGFwaSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDgtNDI1MCIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgWFAiLCJTZXJ2aWNlIFBhY2sgMiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMxMF8wNjFfc3Bvb2xzcyIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMTAtMjcyOSIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgWFAiLCJTZXJ2aWNlIFBhY2sgMyIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwOF8wNjdfbmV0YXBpIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwOC00MjUwIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBYUCIsIlNlcnZpY2UgUGFjayAzIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczEwXzA2MV9zcG9vbHNzIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAxMC0yNzI5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBYUCIsIiIsImV4cGxvaXQvd2luZG93cy9kY2VycGMvbXMwM18wMjZfZGNvbSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDMtMDM1Mi8iKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFhQIiwiIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA1XzAxN19tc21xIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNS0wMDU5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBYUCIsIiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwNl8wNDBfbmV0YXBpIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNi0zNDM5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBYUCIsIiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwOF8wNjdfbmV0YXBpIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwOC00MjUwIikgIAoKICAgICMgU3RhdHVzIHVzZXIgICAgICAgIAogICAgV3JpdGUtVmVyYm9zZSAiWypdIENoZWNraW5nIGNvbXB1dGVycyBmb3IgdnVsbmVyYWJsZSBPUyBhbmQgU1AgbGV2ZWxzLi4uIgoKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgIyBTZXR1cCBkYXRhIHRhYmxlIHRvIHN0b3JlIHZ1bG5lcmFibGUgc3lzdGVtcwogICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgIyBDcmVhdGUgZGF0YSB0YWJsZSB0byBob3VzZSB2dWxuZXJhYmxlIHNlcnZlciBsaXN0CiAgICAkVGFibGVWdWxuQ29tcHV0ZXJzID0gTmV3LU9iamVjdCBTeXN0ZW0uRGF0YS5EYXRhVGFibGUgCiAgICAkTnVsbCA9ICRUYWJsZVZ1bG5Db21wdXRlcnMuQ29sdW1ucy5BZGQoJ0NvbXB1dGVyTmFtZScpCiAgICAkTnVsbCA9ICRUYWJsZVZ1bG5Db21wdXRlcnMuQ29sdW1ucy5BZGQoJ09wZXJhdGluZ1N5c3RlbScpCiAgICAkTnVsbCA9ICRUYWJsZVZ1bG5Db21wdXRlcnMuQ29sdW1ucy5BZGQoJ1NlcnZpY2VQYWNrJykKICAgICROdWxsID0gJFRhYmxlVnVsbkNvbXB1dGVycy5Db2x1bW5zLkFkZCgnTGFzdExvZ29uJykKICAgICROdWxsID0gJFRhYmxlVnVsbkNvbXB1dGVycy5Db2x1bW5zLkFkZCgnTXNmTW9kdWxlJykKICAgICROdWxsID0gJFRhYmxlVnVsbkNvbXB1dGVycy5Db2x1bW5zLkFkZCgnQ1ZFJykKCiAgICAjIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIGV4cGxvaXQKICAgICRUYWJsZUV4cGxvaXRzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgIAogICAgICAgICRFeHBsb2l0T1MgPSAkXy5PcGVyYXRpbmdTeXN0ZW0KICAgICAgICAkRXhwbG9pdFNQID0gJF8uU2VydmljZVBhY2sKICAgICAgICAkRXhwbG9pdE1zZiA9ICRfLk1zZk1vZHVsZQogICAgICAgICRFeHBsb2l0Q1ZFID0gJF8uQ1ZFCgogICAgICAgICMgSXRlcmF0ZSB0aHJvdWdoIGVhY2ggQURTIGNvbXB1dGVyCiAgICAgICAgJFRhYmxlQWRzQ29tcHV0ZXJzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAKICAgICAgICAgICAgJEFkc0hvc3RuYW1lID0gJF8uSG9zdG5hbWUKICAgICAgICAgICAgJEFkc09TID0gJF8uT3BlcmF0aW5nU3lzdGVtCiAgICAgICAgICAgICRBZHNTUCA9ICRfLlNlcnZpY2VQYWNrICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgJEFkc0xhc3QgPSAkXy5MYXN0TG9nb24KICAgICAgICAgICAgCiAgICAgICAgICAgICMgQWRkIGV4cGxvaXRhYmxlIHN5c3RlbXMgdG8gdnVsIGNvbXB1dGVycyBkYXRhIHRhYmxlCiAgICAgICAgICAgIGlmICgkQWRzT1MgLWxpa2UgIiRFeHBsb2l0T1MqIiAtYW5kICRBZHNTUCAtbGlrZSAiJEV4cGxvaXRTUCIgKSB7ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgQWRkIGRvbWFpbiBjb21wdXRlciB0byBkYXRhIHRhYmxlICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICROdWxsID0gJFRhYmxlVnVsbkNvbXB1dGVycy5Sb3dzLkFkZCgkQWRzSG9zdG5hbWUsJEFkc09TLCRBZHNTUCwkQWRzTGFzdCwkRXhwbG9pdE1zZiwkRXhwbG9pdENWRSkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIAogICAgIyBEaXNwbGF5IHJlc3VsdHMKICAgICRWdWxuQ29tcHV0ZXIgPSAkVGFibGVWdWxuQ29tcHV0ZXJzIHwgU2VsZWN0LU9iamVjdCBDb21wdXRlck5hbWUgLVVuaXF1ZSB8IE1lYXN1cmUtT2JqZWN0CiAgICAkVnVsbkNvbXB1dGVyQ291bnQgPSAkVnVsbkNvbXB1dGVyLkNvdW50CgogICAgaWYgKCRWdWxuQ29tcHV0ZXIuQ291bnQgLWd0IDApIHsKICAgICAgICAjIFJldHVybiB2dWxuZXJhYmxlIHNlcnZlciBsaXN0IG9yZGVyIHdpdGggc29tZSBoYWNrIGRhdGUgY2FzdGluZwogICAgICAgIFdyaXRlLVZlcmJvc2UgIlsrXSBGb3VuZCAkVnVsbkNvbXB1dGVyQ291bnQgcG90ZW50aWFsbHkgdnVsbmVyYWJsZSBzeXN0ZW1zISIKICAgICAgICAkVGFibGVWdWxuQ29tcHV0ZXJzIHwgU29ydC1PYmplY3QgeyAkXy5sYXN0bG9nb24gLWFzIFtkYXRldGltZV19IC1EZXNjZW5kaW5nCiAgICB9CiAgICBlbHNlIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJbLV0gTm8gdnVsbmVyYWJsZSBzeXN0ZW1zIHdlcmUgZm91bmQuIgogICAgfQp9CgoKZnVuY3Rpb24gSW52b2tlLUVudW1lcmF0ZUxvY2FsQWRtaW4gewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFRoaXMgZnVuY3Rpb24gcXVlcmllcyB0aGUgZG9tYWluIGZvciBhbGwgYWN0aXZlIG1hY2hpbmVzIHdpdGgKICAgICAgICBHZXQtTmV0Q29tcHV0ZXIsIHRoZW4gZm9yIGVhY2ggc2VydmVyIGl0IHF1ZXJpZXMgdGhlIGxvY2FsCiAgICAgICAgQWRtaW5pc3RyYXRvcnMgd2l0aCBHZXQtTmV0TG9jYWxHcm91cC4KCiAgICAgICAgQXV0aG9yOiBAaGFybWoweQogICAgICAgIExpY2Vuc2U6IEJTRCAzLUNsYXVzZQoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIEhvc3QgYXJyYXkgdG8gZW51bWVyYXRlLCBwYXNzYWJsZSBvbiB0aGUgcGlwZWxpbmUuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckZpbGUKCiAgICAgICAgRmlsZSBvZiBob3N0bmFtZXMvSVBzIHRvIHNlYXJjaC4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyRmlsdGVyCgogICAgICAgIEhvc3QgZmlsdGVyIG5hbWUgdG8gcXVlcnkgQUQgZm9yLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckFEU3BhdGgKCiAgICAgICAgVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoIGZvciBob3N0cywgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCiAgICAuUEFSQU1FVEVSIE5vUGluZwoKICAgICAgICBTd2l0Y2guIERvbid0IHBpbmcgZWFjaCBob3N0IHRvIGVuc3VyZSBpdCdzIHVwIGJlZm9yZSBlbnVtZXJhdGluZy4KCiAgICAuUEFSQU1FVEVSIERlbGF5CgogICAgICAgIERlbGF5IGJldHdlZW4gZW51bWVyYXRpbmcgaG9zdHMsIGRlZmF1bHRzIHRvIDAKCiAgICAuUEFSQU1FVEVSIEppdHRlcgoKICAgICAgICBKaXR0ZXIgZm9yIHRoZSBob3N0IGRlbGF5LCBkZWZhdWx0cyB0byArLy0gMC4zCgogICAgLlBBUkFNRVRFUiBPdXRGaWxlCgogICAgICAgIE91dHB1dCByZXN1bHRzIHRvIGEgc3BlY2lmaWVkIGNzdiBvdXRwdXQgZmlsZS4KCiAgICAuUEFSQU1FVEVSIE5vQ2xvYmJlcgoKICAgICAgICBTd2l0Y2guIERvbid0IG92ZXJ3cml0ZSBhbnkgZXhpc3Rpbmcgb3V0cHV0IGZpbGUuCgogICAgLlBBUkFNRVRFUiBUcnVzdEdyb3VwcwoKICAgICAgICBTd2l0Y2guIE9ubHkgcmV0dXJuIHJlc3VsdHMgdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhlIGxvY2FsIG1hY2hpbmUKICAgICAgICBvciB0aGUgbWFjaGluZSdzIGRvbWFpbi4gT2xkIEludm9rZS1FbnVtZXJhdGVMb2NhbFRydXN0R3JvdXAKICAgICAgICBmdW5jdGlvbmFsaXR5LgogICAgCiAgICAuUEFSQU1FVEVSIERvbWFpbk9ubHkKCiAgICAgICAgU3dpdGNoLiBPbmx5IHJldHVybiBkb21haW4gKG5vbi1sb2NhbCkgcmVzdWx0cyAgCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgRG9tYWluIHRvIHF1ZXJ5IGZvciBtYWNoaW5lcywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgogICAgCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIFNlYXJjaEZvcmVzdAoKICAgICAgICBTd2l0Y2guIFNlYXJjaCBhbGwgZG9tYWlucyBpbiB0aGUgZm9yZXN0IGZvciB0YXJnZXQgdXNlcnMgaW5zdGVhZCBvZiBqdXN0CiAgICAgICAgYSBzaW5nbGUgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgQVBJCgogICAgICAgIFN3aXRjaC4gVXNlIEFQSSBjYWxscyBpbnN0ZWFkIG9mIHRoZSBXaW5OVCBzZXJ2aWNlIHByb3ZpZGVyLiBMZXNzIGluZm9ybWF0aW9uLAogICAgICAgIGJ1dCB0aGUgcmVzdWx0cyBhcmUgZmFzdGVyLgoKICAgIC5QQVJBTUVURVIgVGhyZWFkcwoKICAgICAgICBUaGUgbWF4aW11bSBjb25jdXJyZW50IHRocmVhZHMgdG8gZXhlY3V0ZS4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1FbnVtZXJhdGVMb2NhbEFkbWluCgogICAgICAgIEVudW1lcmF0ZXMgdGhlIG1lbWJlcnMgb2YgbG9jYWwgYWRtaW5pc3RyYXRvcnMgZm9yIGFsbCBtYWNoaW5lcwogICAgICAgIGluIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1FbnVtZXJhdGVMb2NhbEFkbWluIC1UaHJlYWRzIDEwCgogICAgICAgIFRocmVhZGVkIGxvY2FsIGFkbWluIGVudW1lcmF0aW9uLCByZXBsYWNlcyBJbnZva2UtRW51bWVyYXRlTG9jYWxBZG1pblRocmVhZGVkCgogICAgLkxJTksKCiAgICAgICAgaHR0cDovL2Jsb2cuaGFybWoweS5uZXQvCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MCxWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0cycpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lLAoKICAgICAgICBbVmFsaWRhdGVTY3JpcHQoe1Rlc3QtUGF0aCAtUGF0aCAkXyB9KV0KICAgICAgICBbQWxpYXMoJ0hvc3RMaXN0JyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJGaWxlLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckZpbHRlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJBRFNwYXRoLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICROb1BpbmcsCgogICAgICAgIFtVSW50MzJdCiAgICAgICAgJERlbGF5ID0gMCwKCiAgICAgICAgW0RvdWJsZV0KICAgICAgICAkSml0dGVyID0gLjMsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE91dEZpbGUsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJE5vQ2xvYmJlciwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVHJ1c3RHcm91cHMsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJERvbWFpbk9ubHksCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU2VhcmNoRm9yZXN0LAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFRocmVhZHMsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEFQSQogICAgKQoKICAgIGJlZ2luIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZWJ1ZyddKSB7CiAgICAgICAgICAgICREZWJ1Z1ByZWZlcmVuY2UgPSAnQ29udGludWUnCiAgICAgICAgfQoKICAgICAgICAjIHJhbmRvbSBvYmplY3QgZm9yIGRlbGF5CiAgICAgICAgJFJhbmRObyA9IE5ldy1PYmplY3QgU3lzdGVtLlJhbmRvbQoKICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gUnVubmluZyBJbnZva2UtRW51bWVyYXRlTG9jYWxBZG1pbiB3aXRoIGRlbGF5IG9mICREZWxheSIKCiAgICAgICAgIyBpZiB3ZSdyZSB1c2luZyBhIGhvc3QgbGlzdCwgcmVhZCB0aGUgdGFyZ2V0cyBpbiBhbmQgYWRkIHRoZW0gdG8gdGhlIHRhcmdldCBsaXN0CiAgICAgICAgaWYoJENvbXB1dGVyRmlsZSkgewogICAgICAgICAgICAkQ29tcHV0ZXJOYW1lID0gR2V0LUNvbnRlbnQgLVBhdGggJENvbXB1dGVyRmlsZQogICAgICAgIH0KCiAgICAgICAgaWYoISRDb21wdXRlck5hbWUpIHsgCiAgICAgICAgICAgIFthcnJheV0kQ29tcHV0ZXJOYW1lID0gQCgpCgogICAgICAgICAgICBpZigkRG9tYWluKSB7CiAgICAgICAgICAgICAgICAkVGFyZ2V0RG9tYWlucyA9IEAoJERvbWFpbikKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYoJFNlYXJjaEZvcmVzdCkgewogICAgICAgICAgICAgICAgIyBnZXQgQUxMIHRoZSBkb21haW5zIGluIHRoZSBmb3Jlc3QgdG8gc2VhcmNoCiAgICAgICAgICAgICAgICAkVGFyZ2V0RG9tYWlucyA9IEdldC1OZXRGb3Jlc3REb21haW4gfCBGb3JFYWNoLU9iamVjdCB7ICRfLk5hbWUgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgIyB1c2UgdGhlIGxvY2FsIGRvbWFpbgogICAgICAgICAgICAgICAgJFRhcmdldERvbWFpbnMgPSBAKCAoR2V0LU5ldERvbWFpbikubmFtZSApCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEZvckVhY2ggKCREb21haW4gaW4gJFRhcmdldERvbWFpbnMpIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBRdWVyeWluZyBkb21haW4gJERvbWFpbiBmb3IgaG9zdHMiCiAgICAgICAgICAgICAgICAkQ29tcHV0ZXJOYW1lICs9IEdldC1OZXRDb21wdXRlciAtRmlsdGVyICRDb21wdXRlckZpbHRlciAtQURTcGF0aCAkQ29tcHV0ZXJBRFNwYXRoIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlcgogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAjIHJlbW92ZSBhbnkgbnVsbCB0YXJnZXQgaG9zdHMsIHVuaXF1aWZ5IHRoZSBsaXN0IGFuZCBzaHVmZmxlIGl0CiAgICAgICAgICAgICRDb21wdXRlck5hbWUgPSAkQ29tcHV0ZXJOYW1lIHwgV2hlcmUtT2JqZWN0IHsgJF8gfSB8IFNvcnQtT2JqZWN0IC1VbmlxdWUgfCBTb3J0LU9iamVjdCB7IEdldC1SYW5kb20gfQogICAgICAgICAgICBpZigkKCRDb21wdXRlck5hbWUuQ291bnQpIC1lcSAwKSB7CiAgICAgICAgICAgICAgICB0aHJvdyAiTm8gaG9zdHMgZm91bmQhIgogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAjIGRlbGV0ZSBhbnkgZXhpc3Rpbmcgb3V0cHV0IGZpbGUgaWYgaXQgYWxyZWFkeSBleGlzdHMKICAgICAgICBpZighJE5vQ2xvYmJlcikgewogICAgICAgICAgICBpZiAoJE91dEZpbGUgLWFuZCAoVGVzdC1QYXRoIC1QYXRoICRPdXRGaWxlKSkgeyBSZW1vdmUtSXRlbSAtUGF0aCAkT3V0RmlsZSB9CiAgICAgICAgfQoKICAgICAgICBpZigkVHJ1c3RHcm91cHMpIHsKICAgICAgICAgICAgCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkRldGVybWluaW5nIGRvbWFpbiB0cnVzdCBncm91cHMiCgogICAgICAgICAgICAjIGZpbmQgYWxsIGdyb3VwIG5hbWVzIHRoYXQgaGF2ZSBvbmUgb3IgbW9yZSB1c2VycyBpbiBhbm90aGVyIGRvbWFpbgogICAgICAgICAgICAkVHJ1c3RHcm91cE5hbWVzID0gRmluZC1Gb3JlaWduR3JvdXAgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIHwgRm9yRWFjaC1PYmplY3QgeyAkXy5Hcm91cE5hbWUgfSB8IFNvcnQtT2JqZWN0IC1VbmlxdWUKCiAgICAgICAgICAgICRUcnVzdEdyb3Vwc1NJRHMgPSAkVHJ1c3RHcm91cE5hbWVzIHwgRm9yRWFjaC1PYmplY3QgeyAKICAgICAgICAgICAgICAgICMgaWdub3JlIHRoZSBidWlsdGluIGFkbWluaXN0cmF0b3JzIGdyb3VwIGZvciBhIERDIChTLTEtNS0zMi01NDQpCiAgICAgICAgICAgICAgICAjIFRPRE86IGlnbm9yZSBhbGwgZGVmYXVsdCBidWlsdCBpbiBzaWRzPwogICAgICAgICAgICAgICAgR2V0LU5ldEdyb3VwIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtR3JvdXBOYW1lICRfIC1GdWxsRGF0YSB8IFdoZXJlLU9iamVjdCB7ICRfLm9iamVjdHNpZCAtbm90bWF0Y2ggIlMtMS01LTMyLTU0NCIgfSB8IEZvckVhY2gtT2JqZWN0IHsgJF8ub2JqZWN0c2lkIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBxdWVyeSBmb3IgdGhlIHByaW1hcnkgZG9tYWluIGNvbnRyb2xsZXIgc28gd2UgY2FuIGV4dHJhY3QgdGhlIGRvbWFpbiBTSUQgZm9yIGZpbHRlcmluZwogICAgICAgICAgICAkRG9tYWluU0lEID0gR2V0LURvbWFpblNJRCAtRG9tYWluICREb21haW4KICAgICAgICB9CgogICAgICAgICMgc2NyaXB0IGJsb2NrIHRoYXQgZW51bWVyYXRlcyBhIHNlcnZlcgogICAgICAgICRIb3N0RW51bUJsb2NrID0gewogICAgICAgICAgICBwYXJhbSgkQ29tcHV0ZXJOYW1lLCAkUGluZywgJE91dEZpbGUsICREb21haW5TSUQsICRUcnVzdEdyb3Vwc1NJRHMsICRBUEksICREb21haW5Pbmx5KQoKICAgICAgICAgICAgIyBvcHRpb25hbGx5IGNoZWNrIGlmIHRoZSBzZXJ2ZXIgaXMgdXAgZmlyc3QKICAgICAgICAgICAgJFVwID0gJFRydWUKICAgICAgICAgICAgaWYoJFBpbmcpIHsKICAgICAgICAgICAgICAgICRVcCA9IFRlc3QtQ29ubmVjdGlvbiAtQ291bnQgMSAtUXVpZXQgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJFVwKSB7CiAgICAgICAgICAgICAgICAjIGdyYWIgdGhlIHVzZXJzIGZvciB0aGUgbG9jYWwgYWRtaW5zIG9uIHRoaXMgc2VydmVyCiAgICAgICAgICAgICAgICBpZigkQVBJKSB7CiAgICAgICAgICAgICAgICAgICAgJExvY2FsQWRtaW5zID0gR2V0LU5ldExvY2FsR3JvdXAgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1BUEkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRMb2NhbEFkbWlucyA9IEdldC1OZXRMb2NhbEdyb3VwIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICMgaWYgd2UganVzdCB3YW50IHRvIHJldHVybiBjcm9zcy10cnVzdCB1c2VycwogICAgICAgICAgICAgICAgaWYoJERvbWFpblNJRCkgewogICAgICAgICAgICAgICAgICAgICMgZ2V0IHRoZSBsb2NhbCBtYWNoaW5lIFNJRAogICAgICAgICAgICAgICAgICAgICRMb2NhbFNJRCA9ICgkTG9jYWxBZG1pbnMgfCBXaGVyZS1PYmplY3QgeyAkXy5TSUQgLW1hdGNoICcuKi01MDAkJyB9KS5TSUQgLXJlcGxhY2UgIi01MDAkIgogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkxvY2FsU2lkIGZvciAkQ29tcHV0ZXJOYW1lIDogJExvY2FsU0lEIgogICAgICAgICAgICAgICAgICAgICMgZmlsdGVyIG91dCBhY2NvdW50cyB0aGF0IGJlZ2luIHdpdGggdGhlIG1hY2hpbmUgU0lEIGFuZCBkb21haW4gU0lECiAgICAgICAgICAgICAgICAgICAgIyAgIGJ1dCBwcmVzZXJ2ZSBhbnkgZ3JvdXBzIHRoYXQgaGF2ZSB1c2VycyBhY3Jvc3MgYSB0cnVzdCAoJFRydXN0R3JvdXBTSURTKQogICAgICAgICAgICAgICAgICAgICRMb2NhbEFkbWlucyA9ICRMb2NhbEFkbWlucyB8IFdoZXJlLU9iamVjdCB7ICgkVHJ1c3RHcm91cHNTSURzIC1jb250YWlucyAkXy5TSUQpIC1vciAoKC1ub3QgJF8uU0lELnN0YXJ0c1dpdGgoJExvY2FsU0lEKSkgLWFuZCAoLW5vdCAkXy5TSUQuc3RhcnRzV2l0aCgkRG9tYWluU0lEKSkpIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZigkRG9tYWluT25seSkgewogICAgICAgICAgICAgICAgICAgICRMb2NhbEFkbWlucyA9ICRMb2NhbEFkbWlucyB8IFdoZXJlLU9iamVjdCB7JF8uSXNEb21haW59CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYoJExvY2FsQWRtaW5zIC1hbmQgKCRMb2NhbEFkbWlucy5MZW5ndGggLW5lIDApKSB7CiAgICAgICAgICAgICAgICAgICAgIyBvdXRwdXQgdGhlIHJlc3VsdHMgdG8gYSBjc3YgaWYgc3BlY2lmaWVkCiAgICAgICAgICAgICAgICAgICAgaWYoJE91dEZpbGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsQWRtaW5zIHwgRXhwb3J0LVBvd2VyVmlld0NTViAtT3V0RmlsZSAkT3V0RmlsZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBvdGhlcndpc2UgcmV0dXJuIHRoZSB1c2VyIG9iamVjdHMKICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsQWRtaW5zCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWyFdIE5vIHVzZXJzIHJldHVybmVkIGZyb20gJENvbXB1dGVyTmFtZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBwcm9jZXNzIHsKCiAgICAgICAgaWYoJFRocmVhZHMpIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiVXNpbmcgdGhyZWFkaW5nIHdpdGggdGhyZWFkcyA9ICRUaHJlYWRzIgoKICAgICAgICAgICAgIyBpZiB3ZSdyZSB1c2luZyB0aHJlYWRpbmcsIGtpY2sgb2ZmIHRoZSBzY3JpcHQgYmxvY2sgd2l0aCBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbgogICAgICAgICAgICAkU2NyaXB0UGFyYW1zID0gQHsKICAgICAgICAgICAgICAgICdQaW5nJyA9ICQoLW5vdCAkTm9QaW5nKQogICAgICAgICAgICAgICAgJ091dEZpbGUnID0gJE91dEZpbGUKICAgICAgICAgICAgICAgICdEb21haW5TSUQnID0gJERvbWFpblNJRAogICAgICAgICAgICAgICAgJ1RydXN0R3JvdXBzU0lEcycgPSAkVHJ1c3RHcm91cHNTSURzCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMga2ljayBvZmYgdGhlIHRocmVhZGVkIHNjcmlwdCBibG9jayArIGFyZ3VtZW50cwogICAgICAgICAgICBpZigkQVBJKSB7CiAgICAgICAgICAgICAgICAkU2NyaXB0UGFyYW1zWydBUEknXSA9ICRUcnVlCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKCREb21haW5Pbmx5KSB7CiAgICAgICAgICAgICAgICAkU2NyaXB0UGFyYW1zWydEb21haW5Pbmx5J10gPSAkVHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgIAogICAgICAgICAgICBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbiAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1TY3JpcHRQYXJhbWV0ZXJzICRTY3JpcHRQYXJhbXMgLVRocmVhZHMgJFRocmVhZHMKICAgICAgICB9CgogICAgICAgIGVsc2UgewogICAgICAgICAgICBpZigtbm90ICROb1BpbmcgLWFuZCAoJENvbXB1dGVyTmFtZS5jb3VudCAtbmUgMSkpIHsKICAgICAgICAgICAgICAgICMgcGluZyBhbGwgaG9zdHMgaW4gcGFyYWxsZWwKICAgICAgICAgICAgICAgICRQaW5nID0ge3BhcmFtKCRDb21wdXRlck5hbWUpIGlmKFRlc3QtQ29ubmVjdGlvbiAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLUNvdW50IDEgLVF1aWV0IC1FcnJvckFjdGlvbiBTdG9wKXskQ29tcHV0ZXJOYW1lfX0KICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgPSBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbiAtTm9JbXBvcnRzIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSAtU2NyaXB0QmxvY2sgJFBpbmcgLVRocmVhZHMgMTAwCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBUb3RhbCBudW1iZXIgb2YgYWN0aXZlIGhvc3RzOiAkKCRDb21wdXRlck5hbWUuY291bnQpIgogICAgICAgICAgICAkQ291bnRlciA9IDAKCiAgICAgICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CgogICAgICAgICAgICAgICAgJENvdW50ZXIgPSAkQ291bnRlciArIDEKCiAgICAgICAgICAgICAgICAjIHNsZWVwIGZvciBvdXIgc2VtaS1yYW5kb21pemVkIGludGVydmFsCiAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkUmFuZE5vLk5leHQoKDEtJEppdHRlcikqJERlbGF5LCAoMSskSml0dGVyKSokRGVsYXkpCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gRW51bWVyYXRpbmcgc2VydmVyICRDb21wdXRlciAoJENvdW50ZXIgb2YgJCgkQ29tcHV0ZXJOYW1lLmNvdW50KSkiCgogICAgICAgICAgICAgICAgJFNjcmlwdEFyZ3MgPSBAKCRDb21wdXRlciwgJEZhbHNlLCAkT3V0RmlsZSwgJERvbWFpblNJRCwgJFRydXN0R3JvdXBzU0lEcywgJEFQSSwgJERvbWFpbk9ubHkpCgogICAgICAgICAgICAgICAgSW52b2tlLUNvbW1hbmQgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1Bcmd1bWVudExpc3QgJFNjcmlwdEFyZ3MKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMKIyBEb21haW4gdHJ1c3QgZnVuY3Rpb25zIGJlbG93LgojCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpmdW5jdGlvbiBHZXQtTmV0RG9tYWluVHJ1c3Qgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFJldHVybiBhbGwgZG9tYWluIHRydXN0cyBmb3IgdGhlIGN1cnJlbnQgZG9tYWluIG9yCiAgICAgICAgYSBzcGVjaWZpZWQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gd2hvc2UgdHJ1c3RzIHRvIGVudW1lcmF0ZSwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgTERBUAoKICAgICAgICBTd2l0Y2guIFVzZSBMREFQIHF1ZXJpZXMgdG8gZW51bWVyYXRlIHRoZSB0cnVzdHMgaW5zdGVhZCBvZiBkaXJlY3QgZG9tYWluIGNvbm5lY3Rpb25zLiAKICAgICAgICBNb3JlIGxpa2VseSB0byBnZXQgYXJvdW5kIG5ldHdvcmsgc2VnbWVudGF0aW9uLCBidXQgbm90IGFzIGFjY3VyYXRlLgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldERvbWFpblRydXN0CgogICAgICAgIFJldHVybiBkb21haW4gdHJ1c3RzIGZvciB0aGUgY3VycmVudCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0RG9tYWluVHJ1c3QgLURvbWFpbiAicHJvZC50ZXN0bGFiLmxvY2FsIgoKICAgICAgICBSZXR1cm4gZG9tYWluIHRydXN0cyBmb3IgdGhlICJwcm9kLnRlc3RsYWIubG9jYWwiIGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXREb21haW5UcnVzdCAtRG9tYWluICJwcm9kLnRlc3RsYWIubG9jYWwiIC1Eb21haW5Db250cm9sbGVyICJQUklNQVJZLnRlc3RsYWIubG9jYWwiCgogICAgICAgIFJldHVybiBkb21haW4gdHJ1c3RzIGZvciB0aGUgInByb2QudGVzdGxhYi5sb2NhbCIgZG9tYWluLCByZWZsZWN0aW5nCiAgICAgICAgcXVlcmllcyB0aHJvdWdoIHRoZSAiUHJpbWFyeS50ZXN0bGFiLmxvY2FsIiBkb21haW4gY29udHJvbGxlcgojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uPTAsVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkTERBUCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgIHByb2Nlc3MgewoKICAgICAgICBpZighJERvbWFpbikgewogICAgICAgICAgICAkRG9tYWluID0gKEdldC1OZXREb21haW4gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwpLk5hbWUKICAgICAgICB9CgogICAgICAgIGlmKCRMREFQIC1vciAkRG9tYWluQ29udHJvbGxlcikgewoKICAgICAgICAgICAgJFRydXN0U2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1QYWdlU2l6ZSAkUGFnZVNpemUKCiAgICAgICAgICAgIGlmKCRUcnVzdFNlYXJjaGVyKSB7CgogICAgICAgICAgICAgICAgJFRydXN0U2VhcmNoZXIuZmlsdGVyID0gJygmKG9iamVjdENsYXNzPXRydXN0ZWREb21haW4pKScKCiAgICAgICAgICAgICAgICAkVHJ1c3RTZWFyY2hlci5GaW5kQWxsKCkgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAkUHJvcHMgPSAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0ID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICRUcnVzdEF0dHJpYiA9IFN3aXRjaCAoJFByb3BzLnRydXN0YXR0cmlidXRlcykKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAxIHsgIm5vbl90cmFuc2l0aXZlIiB9CiAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAyIHsgInVwbGV2ZWxfb25seSIgfQogICAgICAgICAgICAgICAgICAgICAgICAweDAwNCB7ICJxdWFyYW50aW5lZF9kb21haW4iIH0KICAgICAgICAgICAgICAgICAgICAgICAgMHgwMDggeyAiZm9yZXN0X3RyYW5zaXRpdmUiIH0KICAgICAgICAgICAgICAgICAgICAgICAgMHgwMTAgeyAiY3Jvc3Nfb3JnYW5pemF0aW9uIiB9CiAgICAgICAgICAgICAgICAgICAgICAgIDB4MDIwIHsgIndpdGhpbl9mb3Jlc3QiIH0KICAgICAgICAgICAgICAgICAgICAgICAgMHgwNDAgeyAidHJlYXRfYXNfZXh0ZXJuYWwiIH0KICAgICAgICAgICAgICAgICAgICAgICAgMHgwODAgeyAidHJ1c3RfdXNlc19yYzRfZW5jcnlwdGlvbiIgfQogICAgICAgICAgICAgICAgICAgICAgICAweDEwMCB7ICJ0cnVzdF91c2VzX2Flc19rZXlzIiB9CiAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHQgeyAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIlVua25vd24gdHJ1c3QgYXR0cmlidXRlOiAkKCRQcm9wcy50cnVzdGF0dHJpYnV0ZXMpIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIkKCRQcm9wcy50cnVzdGF0dHJpYnV0ZXMpIjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkRGlyZWN0aW9uID0gU3dpdGNoICgkUHJvcHMudHJ1c3RkaXJlY3Rpb24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgMCB7ICJEaXNhYmxlZCIgfQogICAgICAgICAgICAgICAgICAgICAgICAxIHsgIkluYm91bmQiIH0KICAgICAgICAgICAgICAgICAgICAgICAgMiB7ICJPdXRib3VuZCIgfQogICAgICAgICAgICAgICAgICAgICAgICAzIHsgIkJpZGlyZWN0aW9uYWwiIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJE9iamVjdEd1aWQgPSBOZXctT2JqZWN0IEd1aWQgQCgsJFByb3BzLm9iamVjdGd1aWRbMF0pCiAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NvdXJjZU5hbWUnICREb21haW4KICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVGFyZ2V0TmFtZScgJFByb3BzLm5hbWVbMF0KICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnT2JqZWN0R3VpZCcgInskT2JqZWN0R3VpZH0iCiAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RydXN0VHlwZScgIiRUcnVzdEF0dHJpYiIKICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVHJ1c3REaXJlY3Rpb24nICIkRGlyZWN0aW9uIgogICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBlbHNlIHsKICAgICAgICAgICAgIyBpZiB3ZSdyZSB1c2luZyBkaXJlY3QgZG9tYWluIGNvbm5lY3Rpb25zCiAgICAgICAgICAgICRGb3VuZERvbWFpbiA9IEdldC1OZXREb21haW4gLURvbWFpbiAkRG9tYWluIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgICAgIAogICAgICAgICAgICBpZigkRm91bmREb21haW4pIHsKICAgICAgICAgICAgICAgICRGb3VuZERvbWFpbi5HZXRBbGxUcnVzdFJlbGF0aW9uc2hpcHMoKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LU5ldEZvcmVzdFRydXN0IHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBSZXR1cm4gYWxsIHRydXN0cyBmb3IgdGhlIGN1cnJlbnQgZm9yZXN0LgoKICAgIC5QQVJBTUVURVIgRm9yZXN0CgogICAgICAgIFJldHVybiB0cnVzdHMgZm9yIHRoZSBzcGVjaWZpZWQgZm9yZXN0LgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0Rm9yZXN0VHJ1c3QKCiAgICAgICAgUmV0dXJuIGN1cnJlbnQgZm9yZXN0IHRydXN0cy4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRGb3Jlc3RUcnVzdCAtRm9yZXN0ICJ0ZXN0IgoKICAgICAgICBSZXR1cm4gdHJ1c3RzIGZvciB0aGUgInRlc3QiIGZvcmVzdC4KIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRGb3Jlc3QsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCgogICAgcHJvY2VzcyB7CiAgICAgICAgJEZvdW5kRm9yZXN0ID0gR2V0LU5ldEZvcmVzdCAtRm9yZXN0ICRGb3Jlc3QgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKCiAgICAgICAgaWYoJEZvdW5kRm9yZXN0KSB7CiAgICAgICAgICAgICRGb3VuZEZvcmVzdC5HZXRBbGxUcnVzdFJlbGF0aW9uc2hpcHMoKQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEZpbmQtRm9yZWlnblVzZXIgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEVudW1lcmF0ZXMgdXNlcnMgd2hvIGFyZSBpbiBncm91cHMgb3V0c2lkZSBvZiB0aGVpcgogICAgICAgIHByaW5jaXBhbCBkb21haW4uIFRoZSAtUmVjdXJzZSBvcHRpb24gd2lsbCB0cnkgdG8gbWFwIGFsbCAKICAgICAgICB0cmFuc2l0aXZlIGRvbWFpbiB0cnVzdCByZWxhdGlvbnNoaXBzIGFuZCBlbnVtZXJhdGUgYWxsIAogICAgICAgIHVzZXJzIHdobyBhcmUgaW4gZ3JvdXBzIG91dHNpZGUgb2YgdGhlaXIgcHJpbmNpcGFsIGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIFVzZXJOYW1lCgogICAgICAgIFVzZXJuYW1lIHRvIGZpbHRlciByZXN1bHRzIGZvciwgd2lsZGNhcmRzIGFjY2VwdGVkLgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIERvbWFpbiB0byBxdWVyeSBmb3IgdXNlcnMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIExEQVAKCiAgICAgICAgU3dpdGNoLiBVc2UgTERBUCBxdWVyaWVzIHRvIGVudW1lcmF0ZSB0aGUgdHJ1c3RzIGluc3RlYWQgb2YgZGlyZWN0IGRvbWFpbiBjb25uZWN0aW9ucy4KICAgICAgICBNb3JlIGxpa2VseSB0byBnZXQgYXJvdW5kIG5ldHdvcmsgc2VnbWVudGF0aW9uLCBidXQgbm90IGFzIGFjY3VyYXRlLgoKICAgIC5QQVJBTUVURVIgUmVjdXJzZQoKICAgICAgICBTd2l0Y2guIEVudW1lcmF0ZSBhbGwgdXNlciB0cnVzdCBncm91cHMgZnJvbSBhbGwgcmVhY2hhYmxlIGRvbWFpbnMgcmVjdXJzaXZlbHkuCgogICAgLlBBUkFNRVRFUiBQYWdlU2l6ZQoKICAgICAgICBUaGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgogICAgLkxJTksKCiAgICAgICAgaHR0cDovL2Jsb2cuaGFybWoweS5uZXQvCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJOYW1lLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJExEQVAsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFJlY3Vyc2UsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMAogICAgKQoKICAgIGZ1bmN0aW9uIEdldC1Gb3JlaWduVXNlciB7CiAgICAgICAgIyBoZWxwZXIgdXNlZCB0byBlbnVtZXJhdGUgdXNlcnMgd2hvIGFyZSBpbiBncm91cHMgb3V0c2lkZSBvZiB0aGVpciBwcmluY2lwYWwgZG9tYWluCiAgICAgICAgcGFyYW0oCiAgICAgICAgICAgIFtTdHJpbmddCiAgICAgICAgICAgICRVc2VyTmFtZSwKCiAgICAgICAgICAgIFtTdHJpbmddCiAgICAgICAgICAgICREb21haW4sCgogICAgICAgICAgICBbU3RyaW5nXQogICAgICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKCiAgICAgICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICAgICAgW0ludF0KICAgICAgICAgICAgJFBhZ2VTaXplID0gMjAwCiAgICAgICAgKQoKICAgICAgICBpZiAoJERvbWFpbikgewogICAgICAgICAgICAjIGdldCB0aGUgZG9tYWluIG5hbWUgaW50byBkaXN0aW5ndWlzaGVkIGZvcm0KICAgICAgICAgICAgJERpc3Rpbmd1aXNoZWREb21haW5OYW1lID0gIkRDPSIgKyAkRG9tYWluIC1yZXBsYWNlICdcLicsJyxEQz0nCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkRGlzdGluZ3Vpc2hlZERvbWFpbk5hbWUgPSBbU3RyaW5nXSAoW2Fkc2ldJycpLmRpc3Rpbmd1aXNoZWRuYW1lCiAgICAgICAgICAgICREb21haW4gPSAkRGlzdGluZ3Vpc2hlZERvbWFpbk5hbWUgLXJlcGxhY2UgJ0RDPScsJycgLXJlcGxhY2UgJywnLCcuJwogICAgICAgIH0KCiAgICAgICAgR2V0LU5ldFVzZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1Vc2VyTmFtZSAkVXNlck5hbWUgLVBhZ2VTaXplICRQYWdlU2l6ZSB8IFdoZXJlLU9iamVjdCB7JF8ubWVtYmVyb2Z9IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICBGb3JFYWNoICgkTWVtYmVyc2hpcCBpbiAkXy5tZW1iZXJvZikgewogICAgICAgICAgICAgICAgJEluZGV4ID0gJE1lbWJlcnNoaXAuSW5kZXhPZigiREM9IikKICAgICAgICAgICAgICAgIGlmKCRJbmRleCkgewogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICRHcm91cERvbWFpbiA9ICQoJE1lbWJlcnNoaXAuc3Vic3RyaW5nKCRJbmRleCkpIC1yZXBsYWNlICdEQz0nLCcnIC1yZXBsYWNlICcsJywnLicKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZiAoJEdyb3VwRG9tYWluLkNvbXBhcmVUbygkRG9tYWluKSkgewogICAgICAgICAgICAgICAgICAgICAgICAjIGlmIHRoZSBncm91cCBkb21haW4gZG9lc24ndCBtYXRjaCB0aGUgdXNlciBkb21haW4sIG91dHB1dAogICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBOYW1lID0gJE1lbWJlcnNoaXAuc3BsaXQoIiwiKVswXS5zcGxpdCgiPSIpWzFdCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3JlaWduVXNlciA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Vc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJEb21haW4nICREb21haW4KICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Vc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAkXy5zYW1hY2NvdW50bmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnblVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBEb21haW4nICRHcm91cERvbWFpbgogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnblVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBOYW1lJyAkR3JvdXBOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3JlaWduVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cEROJyAkTWVtYmVyc2hpcAogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnblVzZXIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgaWYgKCRSZWN1cnNlKSB7CiAgICAgICAgIyBnZXQgYWxsIHJlY2hhYmxlIGRvbWFpbnMgaW4gdGhlIHRydXN0IG1lc2ggYW5kIHVuaXF1aWZ5IHRoZW0KICAgICAgICBpZigkTERBUCAtb3IgJERvbWFpbkNvbnRyb2xsZXIpIHsKICAgICAgICAgICAgJERvbWFpblRydXN0cyA9IEludm9rZS1NYXBEb21haW5UcnVzdCAtTERBUCAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtUGFnZVNpemUgJFBhZ2VTaXplIHwgRm9yRWFjaC1PYmplY3QgeyAkXy5Tb3VyY2VEb21haW4gfSB8IFNvcnQtT2JqZWN0IC1VbmlxdWUKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICREb21haW5UcnVzdHMgPSBJbnZva2UtTWFwRG9tYWluVHJ1c3QgLVBhZ2VTaXplICRQYWdlU2l6ZSB8IEZvckVhY2gtT2JqZWN0IHsgJF8uU291cmNlRG9tYWluIH0gfCBTb3J0LU9iamVjdCAtVW5pcXVlCiAgICAgICAgfQoKICAgICAgICBGb3JFYWNoKCREb21haW5UcnVzdCBpbiAkRG9tYWluVHJ1c3RzKSB7CiAgICAgICAgICAgICMgZ2V0IHRoZSB0cnVzdCBncm91cHMgZm9yIGVhY2ggZG9tYWluIGluIHRoZSB0cnVzdCBtZXNoCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkVudW1lcmF0aW5nIHRydXN0IGdyb3VwcyBpbiBkb21haW4gJERvbWFpblRydXN0IgogICAgICAgICAgICBHZXQtRm9yZWlnblVzZXIgLURvbWFpbiAkRG9tYWluVHJ1c3QgLVVzZXJOYW1lICRVc2VyTmFtZSAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICAgICAgfQogICAgfQogICAgZWxzZSB7CiAgICAgICAgR2V0LUZvcmVpZ25Vc2VyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtVXNlck5hbWUgJFVzZXJOYW1lIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgIH0KfQoKCmZ1bmN0aW9uIEZpbmQtRm9yZWlnbkdyb3VwIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBFbnVtZXJhdGVzIGFsbCB0aGUgbWVtYmVycyBvZiBhIGdpdmVuIGRvbWFpbidzIGdyb3VwcwogICAgICAgIGFuZCBmaW5kcyB1c2VycyB0aGF0IGFyZSBub3QgaW4gdGhlIHF1ZXJpZWQgZG9tYWluLgogICAgICAgIFRoZSAtUmVjdXJzZSBmbGFnIHdpbGwgcGVyZm9ybSB0aGlzIGVudW1lcmF0aW9uIGZvciBhbGwKICAgICAgICBlYWNoYWJsZSBkb21haW4gdHJ1c3RzLgoKICAgIC5QQVJBTUVURVIgR3JvdXBOYW1lCgogICAgICAgIEdyb3VwbmFtZSB0byBmaWx0ZXIgcmVzdWx0cyBmb3IsIHdpbGRjYXJkcyBhY2NlcHRlZC4KCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBEb21haW4gdG8gcXVlcnkgZm9yIGdyb3VwcywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgTERBUAoKICAgICAgICBTd2l0Y2guIFVzZSBMREFQIHF1ZXJpZXMgdG8gZW51bWVyYXRlIHRoZSB0cnVzdHMgaW5zdGVhZCBvZiBkaXJlY3QgZG9tYWluIGNvbm5lY3Rpb25zLgogICAgICAgIE1vcmUgbGlrZWx5IHRvIGdldCBhcm91bmQgbmV0d29yayBzZWdtZW50YXRpb24sIGJ1dCBub3QgYXMgYWNjdXJhdGUuCgogICAgLlBBUkFNRVRFUiBSZWN1cnNlCgogICAgICAgIFN3aXRjaC4gRW51bWVyYXRlIGFsbCBncm91cCB0cnVzdCB1c2VycyBmcm9tIGFsbCByZWFjaGFibGUgZG9tYWlucyByZWN1cnNpdmVseS4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuTElOSwoKICAgICAgICBodHRwOi8vYmxvZy5oYXJtajB5Lm5ldC8KIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkR3JvdXBOYW1lID0gJyonLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJExEQVAsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFJlY3Vyc2UsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMAogICAgKQoKICAgIGZ1bmN0aW9uIEdldC1Gb3JlaWduR3JvdXAgewogICAgICAgIHBhcmFtKAogICAgICAgICAgICBbU3RyaW5nXQogICAgICAgICAgICAkR3JvdXBOYW1lID0gJyonLAoKICAgICAgICAgICAgW1N0cmluZ10KICAgICAgICAgICAgJERvbWFpbiwKCiAgICAgICAgICAgIFtTdHJpbmddCiAgICAgICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgICAgICBbSW50XQogICAgICAgICAgICAkUGFnZVNpemUgPSAyMDAKICAgICAgICApCgogICAgICAgIGlmKC1ub3QgJERvbWFpbikgewogICAgICAgICAgICAkRG9tYWluID0gKEdldC1OZXREb21haW4pLk5hbWUKICAgICAgICB9CgogICAgICAgICREb21haW5ETiA9ICJEQz0kKCREb21haW4uUmVwbGFjZSgnLicsICcsREM9JykpIgogICAgICAgIFdyaXRlLVZlcmJvc2UgIkRvbWFpbkROOiAkRG9tYWluRE4iCgogICAgICAgICMgc3RhbmRhcmQgZ3JvdXAgbmFtZXMgdG8gaWdub3JlCiAgICAgICAgJEV4Y2x1ZGVHcm91cHMgPSBAKCJVc2VycyIsICJEb21haW4gVXNlcnMiLCAiR3Vlc3RzIikKCiAgICAgICAgIyBnZXQgYWxsIHRoZSBncm91cG5hbWVzIGZvciB0aGUgZ2l2ZW4gZG9tYWluCiAgICAgICAgR2V0LU5ldEdyb3VwIC1Hcm91cE5hbWUgJEdyb3VwTmFtZSAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUZ1bGxEYXRhIC1QYWdlU2l6ZSAkUGFnZVNpemUgfCBXaGVyZS1PYmplY3QgeyRfLm1lbWJlcn0gfCBXaGVyZS1PYmplY3QgewogICAgICAgICAgICAjIGV4Y2x1ZGUgY29tbW9uIGxhcmdlIGdyb3VwcwogICAgICAgICAgICAtbm90ICgkRXhjbHVkZUdyb3VwcyAtY29udGFpbnMgJF8uc2FtYWNjb3VudG5hbWUpIH0gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICRHcm91cE5hbWUgPSAkXy5zYW1BY2NvdW50TmFtZQoKICAgICAgICAgICAgICAgICRfLm1lbWJlciB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAjIGZpbHRlciBmb3IgZm9yZWlnbiBTSURzIGluIHRoZSBjbiBmaWVsZCBmb3IgdXNlcnMgaW4gYW5vdGhlciBkb21haW4sCiAgICAgICAgICAgICAgICAgICAgIyAgIG9yIGlmIHRoZSBETiBkb2Vzbid0IGVuZCB3aXRoIHRoZSBwcm9wZXIgRE4gZm9yIHRoZSBxdWVyaWVkIGRvbWFpbiAgCiAgICAgICAgICAgICAgICAgICAgaWYgKCgkXyAtbWF0Y2ggJ0NOPVMtMS01LTIxLiotLionKSAtb3IgKCREb21haW5ETiAtbmUgKCRfLnN1YnN0cmluZygkXy5JbmRleE9mKCJEQz0iKSkpKSkgewoKICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJEb21haW4gPSAkXy5zdWJTdHJpbmcoJF8uSW5kZXhPZigiREM9IikpIC1yZXBsYWNlICdEQz0nLCcnIC1yZXBsYWNlICcsJywnLicKICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJOYW1lID0gJF8uc3BsaXQoIiwiKVswXS5zcGxpdCgiPSIpWzFdCgogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnbkdyb3VwVXNlciA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Hcm91cFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBEb21haW4nICREb21haW4KICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Hcm91cFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBOYW1lJyAkR3JvdXBOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3JlaWduR3JvdXBVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJEb21haW4nICRVc2VyRG9tYWluCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3JlaWduR3JvdXBVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAkVXNlck5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Hcm91cFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlckROJyAkXwogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnbkdyb3VwVXNlcgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgaWYgKCRSZWN1cnNlKSB7CiAgICAgICAgIyBnZXQgYWxsIHJlY2hhYmxlIGRvbWFpbnMgaW4gdGhlIHRydXN0IG1lc2ggYW5kIHVuaXF1aWZ5IHRoZW0KICAgICAgICBpZigkTERBUCAtb3IgJERvbWFpbkNvbnRyb2xsZXIpIHsKICAgICAgICAgICAgJERvbWFpblRydXN0cyA9IEludm9rZS1NYXBEb21haW5UcnVzdCAtTERBUCAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtUGFnZVNpemUgJFBhZ2VTaXplIHwgRm9yRWFjaC1PYmplY3QgeyAkXy5Tb3VyY2VEb21haW4gfSB8IFNvcnQtT2JqZWN0IC1VbmlxdWUKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICREb21haW5UcnVzdHMgPSBJbnZva2UtTWFwRG9tYWluVHJ1c3QgLVBhZ2VTaXplICRQYWdlU2l6ZSB8IEZvckVhY2gtT2JqZWN0IHsgJF8uU291cmNlRG9tYWluIH0gfCBTb3J0LU9iamVjdCAtVW5pcXVlCiAgICAgICAgfQoKICAgICAgICBGb3JFYWNoKCREb21haW5UcnVzdCBpbiAkRG9tYWluVHJ1c3RzKSB7CiAgICAgICAgICAgICMgZ2V0IHRoZSB0cnVzdCBncm91cHMgZm9yIGVhY2ggZG9tYWluIGluIHRoZSB0cnVzdCBtZXNoCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkVudW1lcmF0aW5nIHRydXN0IGdyb3VwcyBpbiBkb21haW4gJERvbWFpblRydXN0IgogICAgICAgICAgICBHZXQtRm9yZWlnbkdyb3VwIC1Hcm91cE5hbWUgJEdyb3VwTmFtZSAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgICAgIH0KICAgIH0KICAgIGVsc2UgewogICAgICAgIEdldC1Gb3JlaWduR3JvdXAgLUdyb3VwTmFtZSAkR3JvdXBOYW1lIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICB9Cn0KCgpmdW5jdGlvbiBGaW5kLU1hbmFnZWRTZWN1cml0eUdyb3VwIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBUaGlzIGZ1bmN0aW9uIHJldHJpZXZlcyBhbGwgc2VjdXJpdHkgZ3JvdXBzIGluIHRoZSBkb21haW4gYW5kIGlkZW50aWZpZXMgb25lcyB0aGF0CiAgICAgICAgaGF2ZSBhIG1hbmFnZXIgc2V0LiBJdCBhbHNvIGRldGVybWluZXMgd2hldGhlciB0aGUgbWFuYWdlciBoYXMgdGhlIGFiaWxpdHkgdG8gYWRkCiAgICAgICAgb3IgcmVtb3ZlIG1lbWJlcnMgZnJvbSB0aGUgZ3JvdXAuCgogICAgICAgIEF1dGhvcjogU3R1YXJ0IE1vcmdhbiAoQHVrc3R1ZnVzKSA8c3R1YXJ0Lm1vcmdhbkBtd3JpbmZvc2VjdXJpdHkuY29tPgogICAgICAgIExpY2Vuc2U6IEJTRCAzLUNsYXVzZQoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gRmluZC1NYW5hZ2VkU2VjdXJpdHlHcm91cCB8IEV4cG9ydC1Qb3dlclZpZXdDU1YgLU5vVHlwZUluZm9ybWF0aW9uIGdyb3VwLW1hbmFnZXJzLmNzdgoKICAgICAgICBTdG9yZSBhIGxpc3Qgb2YgYWxsIHNlY3VyaXR5IGdyb3VwcyB3aXRoIG1hbmFnZXJzIGluIGdyb3VwLW1hbmFnZXJzLmNzdgoKICAgIC5ERVNDUklQVElPTgoKICAgICAgICBBdXRob3JpdHkgdG8gbWFuaXB1bGF0ZSB0aGUgZ3JvdXAgbWVtYmVyc2hpcCBvZiBBRCBzZWN1cml0eSBncm91cHMgYW5kIGRpc3RyaWJ1dGlvbiBncm91cHMgCiAgICAgICAgY2FuIGJlIGRlbGVnYXRlZCB0byBub24tYWRtaW5pc3RyYXRvcnMgYnkgc2V0dGluZyB0aGUgJ21hbmFnZWRCeScgYXR0cmlidXRlLiBUaGlzIGlzIHR5cGljYWxseQogICAgICAgIHVzZWQgdG8gZGVsZWdhdGUgbWFuYWdlbWVudCBhdXRob3JpdHkgdG8gZGlzdHJpYnV0aW9uIGdyb3VwcywgYnV0IFdpbmRvd3Mgc3VwcG9ydHMgc2VjdXJpdHkgZ3JvdXBzCiAgICAgICAgYmVpbmcgbWFuYWdlZCBpbiB0aGUgc2FtZSB3YXkuCgogICAgICAgIFRoaXMgZnVuY3Rpb24gc2VhcmNoZXMgZm9yIEFEIGdyb3VwcyB3aGljaCBoYXZlIGEgZ3JvdXAgbWFuYWdlciBzZXQsIGFuZCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhhdAogICAgICAgIHVzZXIgY2FuIG1hbmlwdWxhdGUgZ3JvdXAgbWVtYmVyc2hpcC4gVGhpcyBjb3VsZCBiZSBhIHVzZWZ1bCBtZXRob2Qgb2YgaG9yaXpvbnRhbCBwcml2aWxlZ2UKICAgICAgICBlc2NhbGF0aW9uLCBlc3BlY2lhbGx5IGlmIHRoZSBtYW5hZ2VyIGNhbiBtYW5pcHVsYXRlIHRoZSBtZW1iZXJzaGlwIG9mIGEgcHJpdmlsZWdlZCBncm91cC4KCiAgICAuTElOSwoKICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbEVtcGlyZS9FbXBpcmUvcHVsbC8xMTkKCiM+CgogICAgIyBHbyB0aHJvdWdoIHRoZSBsaXN0IG9mIHNlY3VyaXR5IGdyb3VwcyBvbiB0aGUgZG9tYWluIGFuZCBpZGVudGlmeSB0aG9zZSB3aG8gaGF2ZSBhIG1hbmFnZXIKICAgIEdldC1OZXRHcm91cCAtRnVsbERhdGEgLUZpbHRlciAnKCYobWFuYWdlZEJ5PSopKGdyb3VwVHlwZToxLjIuODQwLjExMzU1Ni4xLjQuODAzOj0yMTQ3NDgzNjQ4KSknIHwgU2VsZWN0LU9iamVjdCAtVW5pcXVlIGRpc3Rpbmd1aXNoZWROYW1lLG1hbmFnZWRCeSxjbiB8IEZvckVhY2gtT2JqZWN0IHsKCiAgICAgICAgIyBSZXRyaWV2ZSB0aGUgb2JqZWN0IHRoYXQgdGhlIG1hbmFnZWRCeSBETiByZWZlcnMgdG8KICAgICAgICAkZ3JvdXBfbWFuYWdlciA9IEdldC1BRE9iamVjdCAtQURTUGF0aCAkXy5tYW5hZ2VkQnkgfCBTZWxlY3QtT2JqZWN0IGNuLGRpc3Rpbmd1aXNoZWRuYW1lLG5hbWUsc2FtYWNjb3VudHR5cGUsc2FtYWNjb3VudG5hbWUKCiAgICAgICAgIyBDcmVhdGUgYSByZXN1bHRzIG9iamVjdCB0byBzdG9yZSBvdXIgZmluZGluZ3MKICAgICAgICAkcmVzdWx0c19vYmplY3QgPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBQU09iamVjdCAtUHJvcGVydHkgQHsKICAgICAgICAgICAgJ0dyb3VwQ04nID0gJF8uY24KICAgICAgICAgICAgJ0dyb3VwRE4nID0gJF8uZGlzdGluZ3Vpc2hlZG5hbWUKICAgICAgICAgICAgJ01hbmFnZXJDTicgPSAkZ3JvdXBfbWFuYWdlci5jbgogICAgICAgICAgICAnTWFuYWdlckROJyA9ICRncm91cF9tYW5hZ2VyLmRpc3Rpbmd1aXNoZWROYW1lCiAgICAgICAgICAgICdNYW5hZ2VyU0FOJyA9ICRncm91cF9tYW5hZ2VyLnNhbWFjY291bnRuYW1lCiAgICAgICAgICAgICdNYW5hZ2VyVHlwZScgPSAnJwogICAgICAgICAgICAnQ2FuTWFuYWdlcldyaXRlJyA9ICRGQUxTRQogICAgICAgIH0KCiAgICAgICAgIyBEZXRlcm1pbmUgd2hldGhlciB0aGUgbWFuYWdlciBpcyBhIHVzZXIgb3IgYSBncm91cAogICAgICAgIGlmICgkZ3JvdXBfbWFuYWdlci5zYW1hY2NvdW50dHlwZSAtZXEgMHgxMDAwMDAwMCkgewogICAgICAgICAgICAkcmVzdWx0c19vYmplY3QuTWFuYWdlclR5cGUgPSAnR3JvdXAnCiAgICAgICAgfSBlbHNlaWYgKCRncm91cF9tYW5hZ2VyLnNhbWFjY291bnR0eXBlIC1lcSAweDMwMDAwMDAwKSB7CiAgICAgICAgICAgICRyZXN1bHRzX29iamVjdC5NYW5hZ2VyVHlwZSA9ICdVc2VyJwogICAgICAgIH0KCiAgICAgICAgIyBGaW5kIHRoZSBBQ0xzIHRoYXQgcmVsYXRlIHRvIHRoZSBhYmlsaXR5IHRvIHdyaXRlIHRvIHRoZSBncm91cAogICAgICAgICR4YWNsID0gR2V0LU9iamVjdEFjbCAtQURTUGF0aCAkXy5kaXN0aW5ndWlzaGVkbmFtZSAtUmlnaHRzIFdyaXRlTWVtYmVycwoKICAgICAgICAjIERvdWJsZS1jaGVjayB0aGF0IHRoZSBtYW5hZ2VyCiAgICAgICAgaWYgKCR4YWNsLk9iamVjdFR5cGUgLWVxICdiZjk2NzljMC0wZGU2LTExZDAtYTI4NS0wMGFhMDAzMDQ5ZTInIC1hbmQgJHhhY2wuQWNjZXNzQ29udHJvbFR5cGUgLWVxICdBbGxvdycgLWFuZCAkeGFjbC5JZGVudGl0eVJlZmVyZW5jZS5WYWx1ZS5Db250YWlucygkZ3JvdXBfbWFuYWdlci5zYW1hY2NvdW50bmFtZSkpIHsKICAgICAgICAgICAgJHJlc3VsdHNfb2JqZWN0LkNhbk1hbmFnZXJXcml0ZSA9ICRUUlVFCiAgICAgICAgfQogICAgICAgICRyZXN1bHRzX29iamVjdAogICAgfQp9CgoKZnVuY3Rpb24gSW52b2tlLU1hcERvbWFpblRydXN0IHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBUaGlzIGZ1bmN0aW9uIGdldHMgYWxsIHRydXN0cyBmb3IgdGhlIGN1cnJlbnQgZG9tYWluLAogICAgICAgIGFuZCB0cmllcyB0byBnZXQgYWxsIHRydXN0cyBmb3IgZWFjaCBkb21haW4gaXQgZmluZHMuCgogICAgLlBBUkFNRVRFUiBMREFQCgogICAgICAgIFN3aXRjaC4gVXNlIExEQVAgcXVlcmllcyB0byBlbnVtZXJhdGUgdGhlIHRydXN0cyBpbnN0ZWFkIG9mIGRpcmVjdCBkb21haW4gY29ubmVjdGlvbnMuCiAgICAgICAgTW9yZSBsaWtlbHkgdG8gZ2V0IGFyb3VuZCBuZXR3b3JrIHNlZ21lbnRhdGlvbiwgYnV0IG5vdCBhcyBhY2N1cmF0ZS4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gSW52b2tlLU1hcERvbWFpblRydXN0IHwgRXhwb3J0LUNTViAtTm9UeXBlSW5mb3JtYXRpb24gdHJ1c3RzLmNzdgogICAgICAgIAogICAgICAgIE1hcCBhbGwgcmVhY2hhYmxlIGRvbWFpbiB0cnVzdHMgYW5kIG91dHB1dCBldmVyeXRoaW5nIHRvIGEgLmNzdiBmaWxlLgoKICAgIC5MSU5LCgogICAgICAgIGh0dHA6Ly9ibG9nLmhhcm1qMHkubmV0LwojPgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJExEQVAsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKCiAgICApCgogICAgIyBrZWVwIHRyYWNrIG9mIGRvbWFpbnMgc2VlbiBzbyB3ZSBkb24ndCBoaXQgaW5maW5pdGUgcmVjdXJzaW9uCiAgICAkU2VlbkRvbWFpbnMgPSBAe30KCiAgICAjIG91ciBkb21haW4gc3RhdHVzIHRyYWNrZXIKICAgICREb21haW5zID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuU3RhY2sKCiAgICAjIGdldCB0aGUgY3VycmVudCBkb21haW4gYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2sKICAgICRDdXJyZW50RG9tYWluID0gKEdldC1OZXREb21haW4gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwpLk5hbWUKICAgICREb21haW5zLnB1c2goJEN1cnJlbnREb21haW4pCgogICAgd2hpbGUoJERvbWFpbnMuQ291bnQgLW5lIDApIHsKCiAgICAgICAgJERvbWFpbiA9ICREb21haW5zLlBvcCgpCgogICAgICAgICMgaWYgd2UgaGF2ZW4ndCBzZWVuIHRoaXMgZG9tYWluIGJlZm9yZQogICAgICAgIGlmICgkRG9tYWluIC1hbmQgKCREb21haW4uVHJpbSgpIC1uZSAiIikgLWFuZCAoLW5vdCAkU2VlbkRvbWFpbnMuQ29udGFpbnNLZXkoJERvbWFpbikpKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFbnVtZXJhdGluZyB0cnVzdHMgZm9yIGRvbWFpbiAnJERvbWFpbiciCgogICAgICAgICAgICAjIG1hcmsgaXQgYXMgc2VlbiBpbiBvdXIgbGlzdAogICAgICAgICAgICAkTnVsbCA9ICRTZWVuRG9tYWlucy5hZGQoJERvbWFpbiwgIiIpCgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgIyBnZXQgYWxsIHRoZSB0cnVzdHMgZm9yIHRoaXMgZG9tYWluCiAgICAgICAgICAgICAgICBpZigkTERBUCAtb3IgJERvbWFpbkNvbnRyb2xsZXIpIHsKICAgICAgICAgICAgICAgICAgICAkVHJ1c3RzID0gR2V0LU5ldERvbWFpblRydXN0IC1Eb21haW4gJERvbWFpbiAtTERBUCAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtUGFnZVNpemUgJFBhZ2VTaXplIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkVHJ1c3RzID0gR2V0LU5ldERvbWFpblRydXN0IC1Eb21haW4gJERvbWFpbiAtUGFnZVNpemUgJFBhZ2VTaXplIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYoJFRydXN0cyAtaXNub3QgW3N5c3RlbS5hcnJheV0pIHsKICAgICAgICAgICAgICAgICAgICAkVHJ1c3RzID0gQCgkVHJ1c3RzKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICMgZ2V0IGFueSBmb3Jlc3QgdHJ1c3RzLCBpZiB0aGV5IGV4aXN0CiAgICAgICAgICAgICAgICAkVHJ1c3RzICs9IEdldC1OZXRGb3Jlc3RUcnVzdCAtRm9yZXN0ICREb21haW4gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKCiAgICAgICAgICAgICAgICBpZiAoJFRydXN0cykgewoKICAgICAgICAgICAgICAgICAgICAjIGVudW1lcmF0ZSBlYWNoIHRydXN0IGZvdW5kCiAgICAgICAgICAgICAgICAgICAgRm9yRWFjaCAoJFRydXN0IGluICRUcnVzdHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNvdXJjZURvbWFpbiA9ICRUcnVzdC5Tb3VyY2VOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRUYXJnZXREb21haW4gPSAkVHJ1c3QuVGFyZ2V0TmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkVHJ1c3RUeXBlID0gJFRydXN0LlRydXN0VHlwZQogICAgICAgICAgICAgICAgICAgICAgICAkVHJ1c3REaXJlY3Rpb24gPSAkVHJ1c3QuVHJ1c3REaXJlY3Rpb24KCiAgICAgICAgICAgICAgICAgICAgICAgICMgbWFrZSBzdXJlIHdlIHByb2Nlc3MgdGhlIHRhcmdldAogICAgICAgICAgICAgICAgICAgICAgICAkTnVsbCA9ICREb21haW5zLnB1c2goJFRhcmdldERvbWFpbikKCiAgICAgICAgICAgICAgICAgICAgICAgICMgYnVpbGQgdGhlIG5pY2VseS1wYXJzYWJsZSBjdXN0b20gb3V0cHV0IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTb3VyY2VEb21haW4nICIkU291cmNlRG9tYWluIgogICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVGFyZ2V0RG9tYWluJyAiJFRhcmdldERvbWFpbiIKICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RydXN0VHlwZScgIiRUcnVzdFR5cGUiCiAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdUcnVzdERpcmVjdGlvbicgIiRUcnVzdERpcmVjdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIlshXSBFcnJvcjogJF8iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojCiMgRXhwb3NlIHRoZSBXaW4zMkFQSSBmdW5jdGlvbnMgYW5kIGRhdGFzdHJ1Y3R1cmVzIGJlbG93CiMgdXNpbmcgUFNSZWZsZWN0LiAKIyBXYXJuaW5nOiBPbmNlIHRoZXNlIGFyZSBleGVjdXRlZCwgdGhleSBhcmUgYmFrZWQgaW4gCiMgYW5kIGNhbid0IGJlIGNoYW5nZWQgd2hpbGUgdGhlIHNjcmlwdCBpcyBydW5uaW5nIQojCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgokTW9kID0gTmV3LUluTWVtb3J5TW9kdWxlIC1Nb2R1bGVOYW1lIFdpbjMyCgojIGFsbCBvZiB0aGUgV2luMzIgQVBJIGZ1bmN0aW9ucyB3ZSBuZWVkCiRGdW5jdGlvbkRlZmluaXRpb25zID0gQCgKICAgIChmdW5jIG5ldGFwaTMyIE5ldFNoYXJlRW51bSAoW0ludF0pIEAoW1N0cmluZ10sIFtJbnRdLCBbSW50UHRyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnRdLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpKSksCiAgICAoZnVuYyBuZXRhcGkzMiBOZXRXa3N0YVVzZXJFbnVtIChbSW50XSkgQChbU3RyaW5nXSwgW0ludF0sIFtJbnRQdHJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludF0sIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCkpKSwKICAgIChmdW5jIG5ldGFwaTMyIE5ldFNlc3Npb25FbnVtIChbSW50XSkgQChbU3RyaW5nXSwgW1N0cmluZ10sIFtTdHJpbmddLCBbSW50XSwgW0ludFB0cl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50XSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSkpLAogICAgKGZ1bmMgbmV0YXBpMzIgTmV0TG9jYWxHcm91cEdldE1lbWJlcnMgKFtJbnRdKSBAKFtTdHJpbmddLCBbU3RyaW5nXSwgW0ludF0sIFtJbnRQdHJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludF0sIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCkpKSwKICAgIChmdW5jIG5ldGFwaTMyIERzR2V0U2l0ZU5hbWUgKFtJbnRdKSBAKFtTdHJpbmddLCBbSW50UHRyXS5NYWtlQnlSZWZUeXBlKCkpKSwKICAgIChmdW5jIG5ldGFwaTMyIE5ldEFwaUJ1ZmZlckZyZWUgKFtJbnRdKSBAKFtJbnRQdHJdKSksCiAgICAoZnVuYyBhZHZhcGkzMiBDb252ZXJ0U2lkVG9TdHJpbmdTaWQgKFtJbnRdKSBAKFtJbnRQdHJdLCBbU3RyaW5nXS5NYWtlQnlSZWZUeXBlKCkpKSwKICAgIChmdW5jIGFkdmFwaTMyIE9wZW5TQ01hbmFnZXJXIChbSW50UHRyXSkgQChbU3RyaW5nXSwgW1N0cmluZ10sIFtJbnRdKSksCiAgICAoZnVuYyBhZHZhcGkzMiBDbG9zZVNlcnZpY2VIYW5kbGUgKFtJbnRdKSBAKFtJbnRQdHJdKSksCiAgICAoZnVuYyB3dHNhcGkzMiBXVFNPcGVuU2VydmVyRXggKFtJbnRQdHJdKSBAKFtTdHJpbmddKSksCiAgICAoZnVuYyB3dHNhcGkzMiBXVFNFbnVtZXJhdGVTZXNzaW9uc0V4IChbSW50XSkgQChbSW50UHRyXSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnRdLCBbSW50UHRyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpKSksCiAgICAoZnVuYyB3dHNhcGkzMiBXVFNRdWVyeVNlc3Npb25JbmZvcm1hdGlvbiAoW0ludF0pIEAoW0ludFB0cl0sIFtJbnRdLCBbSW50XSwgW0ludFB0cl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSkpLAogICAgKGZ1bmMgd3RzYXBpMzIgV1RTRnJlZU1lbW9yeUV4IChbSW50XSkgQChbSW50MzJdLCBbSW50UHRyXSwgW0ludDMyXSkpLAogICAgKGZ1bmMgd3RzYXBpMzIgV1RTRnJlZU1lbW9yeSAoW0ludF0pIEAoW0ludFB0cl0pKSwKICAgIChmdW5jIHd0c2FwaTMyIFdUU0Nsb3NlU2VydmVyIChbSW50XSkgQChbSW50UHRyXSkpLAogICAgKGZ1bmMga2VybmVsMzIgR2V0TGFzdEVycm9yIChbSW50XSkgQCgpKQopCgojIGVudW0gdXNlZCBieSAkV1RTX1NFU1NJT05fSU5GT18xIGJlbG93CiRXVFNDb25uZWN0U3RhdGUgPSBwc2VudW0gJE1vZCBXVFNfQ09OTkVDVFNUQVRFX0NMQVNTIFVJbnQxNiBAewogICAgQWN0aXZlICAgICAgID0gICAgMAogICAgQ29ubmVjdGVkICAgID0gICAgMQogICAgQ29ubmVjdFF1ZXJ5ID0gICAgMgogICAgU2hhZG93ICAgICAgID0gICAgMwogICAgRGlzY29ubmVjdGVkID0gICAgNAogICAgSWRsZSAgICAgICAgID0gICAgNQogICAgTGlzdGVuICAgICAgID0gICAgNgogICAgUmVzZXQgICAgICAgID0gICAgNwogICAgRG93biAgICAgICAgID0gICAgOAogICAgSW5pdCAgICAgICAgID0gICAgOQp9CgojIHRoZSBXVFNFbnVtZXJhdGVTZXNzaW9uc0V4IHJlc3VsdCBzdHJ1Y3R1cmUKJFdUU19TRVNTSU9OX0lORk9fMSA9IHN0cnVjdCAkTW9kIFdUU19TRVNTSU9OX0lORk9fMSBAewogICAgRXhlY0VudklkID0gZmllbGQgMCBVSW50MzIKICAgIFN0YXRlID0gZmllbGQgMSAkV1RTQ29ubmVjdFN0YXRlCiAgICBTZXNzaW9uSWQgPSBmaWVsZCAyIFVJbnQzMgogICAgcFNlc3Npb25OYW1lID0gZmllbGQgMyBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQogICAgcEhvc3ROYW1lID0gZmllbGQgNCBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQogICAgcFVzZXJOYW1lID0gZmllbGQgNSBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQogICAgcERvbWFpbk5hbWUgPSBmaWVsZCA2IFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBwRmFybU5hbWUgPSBmaWVsZCA3IFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCn0KCiMgdGhlIHBhcnRpY3VsYXIgV1RTUXVlcnlTZXNzaW9uSW5mb3JtYXRpb24gcmVzdWx0IHN0cnVjdHVyZQokV1RTX0NMSUVOVF9BRERSRVNTID0gc3RydWN0ICRtb2QgV1RTX0NMSUVOVF9BRERSRVNTIEB7CiAgICBBZGRyZXNzRmFtaWx5ID0gZmllbGQgMCBVSW50MzIKICAgIEFkZHJlc3MgPSBmaWVsZCAxIEJ5dGVbXSAtTWFyc2hhbEFzIEAoJ0J5VmFsQXJyYXknLCAyMCkKfQoKIyB0aGUgTmV0U2hhcmVFbnVtIHJlc3VsdCBzdHJ1Y3R1cmUKJFNIQVJFX0lORk9fMSA9IHN0cnVjdCAkTW9kIFNIQVJFX0lORk9fMSBAewogICAgc2hpMV9uZXRuYW1lID0gZmllbGQgMCBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQogICAgc2hpMV90eXBlID0gZmllbGQgMSBVSW50MzIKICAgIHNoaTFfcmVtYXJrID0gZmllbGQgMiBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQp9CgojIHRoZSBOZXRXa3N0YVVzZXJFbnVtIHJlc3VsdCBzdHJ1Y3R1cmUKJFdLU1RBX1VTRVJfSU5GT18xID0gc3RydWN0ICRNb2QgV0tTVEFfVVNFUl9JTkZPXzEgQHsKICAgIHdrdWkxX3VzZXJuYW1lID0gZmllbGQgMCBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQogICAgd2t1aTFfbG9nb25fZG9tYWluID0gZmllbGQgMSBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQogICAgd2t1aTFfb3RoX2RvbWFpbnMgPSBmaWVsZCAyIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICB3a3VpMV9sb2dvbl9zZXJ2ZXIgPSBmaWVsZCAzIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCn0KCiMgdGhlIE5ldFNlc3Npb25FbnVtIHJlc3VsdCBzdHJ1Y3R1cmUKJFNFU1NJT05fSU5GT18xMCA9IHN0cnVjdCAkTW9kIFNFU1NJT05fSU5GT18xMCBAewogICAgc2VzaTEwX2NuYW1lID0gZmllbGQgMCBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQogICAgc2VzaTEwX3VzZXJuYW1lID0gZmllbGQgMSBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQogICAgc2VzaTEwX3RpbWUgPSBmaWVsZCAyIFVJbnQzMgogICAgc2VzaTEwX2lkbGVfdGltZSA9IGZpZWxkIDMgVUludDMyCn0KCiMgZW51bSB1c2VkIGJ5ICRMT0NBTEdST1VQX01FTUJFUlNfSU5GT18yIGJlbG93CiRTSURfTkFNRV9VU0UgPSBwc2VudW0gJE1vZCBTSURfTkFNRV9VU0UgVUludDE2IEB7CiAgICBTaWRUeXBlVXNlciAgICAgICAgICAgICA9IDEKICAgIFNpZFR5cGVHcm91cCAgICAgICAgICAgID0gMgogICAgU2lkVHlwZURvbWFpbiAgICAgICAgICAgPSAzCiAgICBTaWRUeXBlQWxpYXMgICAgICAgICAgICA9IDQKICAgIFNpZFR5cGVXZWxsS25vd25Hcm91cCAgID0gNQogICAgU2lkVHlwZURlbGV0ZWRBY2NvdW50ICAgPSA2CiAgICBTaWRUeXBlSW52YWxpZCAgICAgICAgICA9IDcKICAgIFNpZFR5cGVVbmtub3duICAgICAgICAgID0gOAogICAgU2lkVHlwZUNvbXB1dGVyICAgICAgICAgPSA5Cn0KCiMgdGhlIE5ldExvY2FsR3JvdXBHZXRNZW1iZXJzIHJlc3VsdCBzdHJ1Y3R1cmUKJExPQ0FMR1JPVVBfTUVNQkVSU19JTkZPXzIgPSBzdHJ1Y3QgJE1vZCBMT0NBTEdST1VQX01FTUJFUlNfSU5GT18yIEB7CiAgICBsZ3JtaTJfc2lkID0gZmllbGQgMCBJbnRQdHIKICAgIGxncm1pMl9zaWR1c2FnZSA9IGZpZWxkIDEgJFNJRF9OQU1FX1VTRQogICAgbGdybWkyX2RvbWFpbmFuZG5hbWUgPSBmaWVsZCAyIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCn0KCgokVHlwZXMgPSAkRnVuY3Rpb25EZWZpbml0aW9ucyB8IEFkZC1XaW4zMlR5cGUgLU1vZHVsZSAkTW9kIC1OYW1lc3BhY2UgJ1dpbjMyJwokTmV0YXBpMzIgPSAkVHlwZXNbJ25ldGFwaTMyJ10KJEFkdmFwaTMyID0gJFR5cGVzWydhZHZhcGkzMiddCiRLZXJuZWwzMiA9ICRUeXBlc1sna2VybmVsMzInXQokV3RzYXBpMzIgPSAkVHlwZXNbJ3d0c2FwaTMyJ10K
