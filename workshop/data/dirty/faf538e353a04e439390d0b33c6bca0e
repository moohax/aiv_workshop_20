Trigger-AntiVirus.ps1,caad72a6ad19d380ed9a7f4ddbf4edea,Scan result is 32768. IsMalware: 1,w6/Cu8K/ZnVuY3Rpb24gVHJpZ2dlci1BbnRpVmlydXN7CgogICAgPCMKICAgICAgICAuU1lOT1BTSVMKICAgICAgICBGdW5jdGlvbiB1c2VkIHRvIHRyaWdnZXIgYW4gYW50aXZpcnVzIGFsZXJ0LgoKICAgICAgICAuREVTQ1JJUFRJT04KICAgICAgICBFeHBpcmltZW50YWwgZnVuY3Rpb24gdGhhdCB0cmlnZ2VycyBhbiBhbnRpdmlydXMgcmVhY3Rpb24gdXNpbmcgdGhlICdFSUNBUiB0ZXN0IHN0cmluZycuIENhbiBiZSB1c2VkIGZvciBzb2NpYWwgZW5naW5lZXJpbmcuIE1vc3QgY29tbW9ubHkgdXNlZCBhcyBhIHRvb2wgdG8gc2xvdyB0aGUgcmVhY3Rpb24gdGltZSBvZiBhbnRpdmlydXMgYXBwbGljYXRpb25zLgoKICAgICAgICAuUEFSQU1FVEVSIENsZWFuCiAgICAgICAgWW91IHNob3VsZCBhbHdheXMgY2xlYW4gdXAgeW91ciBtZXNzZXMsIHRoaXMgaXMgYSBkZWZhdWx0LiBTb21lIGFudGl2aXJ1cyBtYXkgYXV0byBjbGVhbiBhbnl3YXksIGJ1dCBhZ2Fpbi4uLm5vIG1lc3Nlcy4KCiAgICAgICAgLlBBUkFNRVRFUiBDb21tb24KICAgICAgICBBIHN3aXRjaCB0byBzcGVjaWZ5IHRoZSB1c2Ugb2YgY29tbW9uIGluZmVjdGlvbiBwb2ludHMgYXMgYSBwbGFjZSB0byBpbmplY3QgdGhlIHRlc3Qgc3RyaW5nLgoKICAgICAgICAuUEFSQU1FVEVSIExpbWl0CiAgICAgICAgQW4gaW50ZWdlciB1c2VkIHRvIHNwZWNpZnkgdGhlIG1heGltdW0gbnVtYmVyIG9mIGluamVjdGlvbnMKICAgIAogICAgICAgIC5QQVJBTUVURVIgTWluCiAgICAgICAgQW4gaW50ZWdlciB1c2VkIHRvIHNwZWNpZnkgdGhlIHNtYWxsZXN0IG51bWJlciBvZiBzZWNvbmRzIHRvIHdhaXQgYmV0d2VlbiBpbmplY3Rpb25zLgoKICAgICAgICAuUEFSQU1FVEVSIE1heAogICAgICAgIEFuIGludGVnZXIgdXNlZCB0byBzcGVjaWZ5IHRoZSBsYXJnZXN0IG51bWJlciBvZiBzZWNvbmRzIHRvIHdhaXQgYmV0d2VlbiBpbmplY3Rpb25zLgoKICAgICAgICAuUEFSQU1FVEVSIFBhdGgKICAgICAgICBBIHN0cmluZyBzcGVjaWZ5aW5nIGEgZGlyZWN0b3J5IHRvIGluamVjdCB0aGUgdGVzdCBzdHJpbmcgdG8uCgogICAgICAgIC5DUkVESVRTCiAgICAgICAgTG9nb2lMYWIgKENoYWQgQmF4dGVyKQoKICAgICAgICAuTElOSwogICAgICAgIGh0dHBzOi8vd3d3LmdpdGh1Yi5jb20vTG9nb2lMYWIvQVYtU3RyZXNzZXIKCiAgICAjPgoKICAgICRFcnJvckFjdGlvblByZWZlcmVuY2UgPSAiQ29udGludWUiCgogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JEZhbHNlLFBvc2l0aW9uPTApXQogICAgICAgIFtzd2l0Y2hdJENsZWFuLAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSRGYWxzZSxQb3NpdGlvbj0xKV0KICAgICAgICBbc3dpdGNoXSRDb21tb24sCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JEZhbHNlLFBvc2l0aW9uPTIpXQogICAgICAgIFtpbnRdJExpbWl0LAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSRUcnVlLFBvc2l0aW9uPTMpXQogICAgICAgIFtpbnRdJE1heCwKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSxQb3NpdGlvbj00KV0KICAgICAgICBbaW50XSRNaW4sCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JEZhbHNlLFBvc2l0aW9uPTUpXQogICAgICAgIFtzdHJpbmddJFBhdGgKICAgICkKCiAgICAjU2V0IHVwIGNvbW1vbiBwYXRocy4KICAgICRjb21tb25wYXRocyA9ICIkZW52OkFQUERBVEEiLCAiJGVudjpURU1QIiwgIiRlbnY6SE9NRVBBVEgiCiAgICAKICAgICNFSUNBUiBzdHJpbmcgc3RvcmVkIGFzIGJhc2U2NC4uLndoeT8uLiBiZWNhdXNlIGlmIGl0IGlzIHBsYWluIHRleHQgQVYgd2lsbCB0cmlnZ2VyIG9uIHRoaXMgbGluZS4KICAgICRiYXNlNjQgPSAnV0FBMUFFOEFJUUJRQUNVQVFBQkJBRkFBV3dBMEFGd0FVQUJhQUZnQU5RQTBBQ2dBVUFCZUFDa0FOd0JEQUVNQUtRQTNBSDBBSkFCRkFFa0FRd0JCQUZJQUxRQlRBRlFBUVFCT0FFUUFRUUJTQUVRQUxRQkJBRTRBVkFCSkFGWUFTUUJTQUZVQVV3QXRBRlFBUlFCVEFGUUFMUUJHQUVrQVRBQkZBQ0VBSkFCSUFDc0FTQUFxQUE9PScKICAgIAogICAgI0xvYWQgRUlDQVIgc3RyaW5nIHRvIG1lbW9yeS4KICAgICRlaWNhciA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVuaWNvZGUuR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJGJhc2U2NCkpOwoKICAgICNEZWZhdWx0IENsZWFuIHBhcmFtZXRlciB0byB0cnVlLnsKICAgIGlmKCRDbGVhbiAtZXEgJG51bGwpewogICAgICAgICRDbGVhbiA9ICR0cnVlCiAgICB9CiAgICAjfQoKICAgICNEZWZhdWx0IExpbWl0IHBhcmFtZXRlciB0byAxLiBJZiBMaW1pdCBpcyAwIHRocm93IGVycm9yLnsKICAgIGlmKCRMaW1pdCAtZXEgJG51bGwpewogICAgICAgICRMaW1pdCA9IDEKICAgIH0KICAgIGlmKCRMaW1pdCAtZXEgMCl7CiAgICAgICAgdGhyb3cgIkxpbWl0IGNhbm5vdCBiZSB6ZXJvISIKICAgICAgICBleGl0CiAgICB9CiAgICAjfQoKICAgICNNYWtlIHN1cmUgZWl0aGVyIFBhdGggb3IgQ29tbW9uIGFyZSBzcGVjaWZpZWQuCiAgICBpZigkUGF0aCAtZXEgJG51bGwgLWFuZCAoJENvbW1vbiAtZXEgJGZhbHNlIC1vciAkQ29tbW9uIC1lcSAkbnVsbCkpewogICAgICAgIHRocm93ICJQbGVhc2UgdXNlIGNvbW1vbiBwYXRocywgb3Igc3BlY2lmeSBhIHBhdGghIgogICAgICAgIGV4aXQKICAgIH0KCiAgICAjSWYgdGhlIHVzZXIgY2hvb3NlcyBjb21tb24gcGF0aHMsIHVzZSB0aGVtCiAgICBpZigkQ29tbW9uKXsKICAgICAgICBpZigkUGF0aCAtbmUgJG51bGwpewogICAgICAgICAgICBpZihUZXN0LVBhdGggJFBhdGgpewogICAgICAgICAgICAgICAgJGNvbW1vbnBhdGhzICs9ICRQYXRoCiAgICAgICAgICAgICAgICAkaSA9IDAKICAgICAgICAgICAgICAgIHdoaWxlKCRpIC1sdCAkTGltaXQpewogICAgICAgICAgICAgICAgICAgIGZvcmVhY2goJHBsYWNlIGluICRjb21tb25wYXRocyl7CiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXJ0LVNsZWVwIChHZXQtUmFuZG9tIC1NYXhpbXVtICRNYXggLU1pbmltdW0gJE1pbikKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGkgLWd0IDAgLWFuZCAkQ2xlYW4gLWVxICR0cnVlKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlbW92ZS1JdGVtIC1QYXRoICIkcGxhY2VcJG5hbWUudG1wIiAtRm9yY2UgfCBPdXQtTnVsbAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICRuYW1lID0gTmV3LVJhbmRvbQogICAgICAgICAgICAgICAgICAgICAgICBOZXctSXRlbSAtUGF0aCAiJHBsYWNlXCRuYW1lLnRtcCIgLUl0ZW1UeXBlIEZpbGUgLUZvcmNlCiAgICAgICAgICAgICAgICAgICAgICAgIFNldC1Db250ZW50IC1QYXRoICIkcGxhY2VcJG5hbWUudG1wIiAtVmFsdWUgJGVpY2FyIC1Gb3JjZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgdGhyb3cgIiRQYXRoIGlzIG5vdCBhIHZhbGlkIHBhdGghIgogICAgICAgICAgICAgICAgJGkgPSAwCiAgICAgICAgICAgICAgICB3aGlsZSgkaSAtbHQgJExpbWl0KXsKICAgICAgICAgICAgICAgICAgICBmb3JlYWNoKCRwbGFjZSBpbiAkY29tbW9ucGF0aHMpewogICAgICAgICAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAoR2V0LVJhbmRvbSAtTWF4aW11bSAkTWF4IC1NaW5pbXVtICRNaW4pCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRpIC1ndCAwIC1hbmQgJENsZWFuIC1lcSAkdHJ1ZSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZW1vdmUtSXRlbSAtUGF0aCAiJHBsYWNlXCRuYW1lLnRtcCIgLUZvcmNlIHwgT3V0LU51bGwKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAkbmFtZSA9IE5ldy1SYW5kb20KICAgICAgICAgICAgICAgICAgICAgICAgTmV3LUl0ZW0gLVBhdGggIiRwbGFjZVwkbmFtZS50bXAiIC1JdGVtVHlwZSBGaWxlIC1Gb3JjZQogICAgICAgICAgICAgICAgICAgICAgICBTZXQtQ29udGVudCAtUGF0aCAiJHBsYWNlXCRuYW1lLnRtcCIgLVZhbHVlICRlaWNhciAtRm9yY2UKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZXsKICAgICAgICAgICAgJGkgPSAwCiAgICAgICAgICAgIHdoaWxlKCRpIC1sdCAkTGltaXQpewogICAgICAgICAgICAgICAgZm9yZWFjaCgkcGxhY2UgaW4gJGNvbW1vbnBhdGhzKXsKICAgICAgICAgICAgICAgICAgICBpZigkaSAtZ3QgMCAtYW5kICRDbGVhbiAtZXEgJHRydWUpewogICAgICAgICAgICAgICAgICAgICAgICBSZW1vdmUtSXRlbSAtUGF0aCAiJHBsYWNlXCRuYW1lLnRtcCIgLUZvcmNlIHwgT3V0LU51bGwKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgU3RhcnQtU2xlZXAgKEdldC1SYW5kb20gLU1heGltdW0gJE1heCAtTWluaW11bSAkTWluKQogICAgICAgICAgICAgICAgICAgICRuYW1lID0gTmV3LVJhbmRvbQogICAgICAgICAgICAgICAgICAgIE5ldy1JdGVtIC1QYXRoICIkcGxhY2VcJG5hbWUudG1wIiAtSXRlbVR5cGUgRmlsZSAtRm9yY2UKICAgICAgICAgICAgICAgICAgICBTZXQtQ29udGVudCAtUGF0aCAiJHBsYWNlXCRuYW1lLnRtcCIgLVZhbHVlICRlaWNhciAtRm9yY2UKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgICNJZiB0aGUgdXNlciBkb2Vzbid0IGNob29zZSBjb21tb24gcGF0aHMsIHVzZSB0aGUgcGF0aCBzcGVjaWZpZWQuCiAgICBlbHNlewogICAgICAgIGlmKFRlc3QtUGF0aCAkUGF0aCl7CiAgICAgICAgICAgIHdoaWxlKCRpIC1sdCAkTGltaXQpewogICAgICAgICAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAoR2V0LVJhbmRvbSAtTWF4aW11bSAkTWF4IC1NaW5pbXVtICRNaW4pCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRpIC1ndCAwIC1hbmQgJENsZWFuIC1lcSAkdHJ1ZSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZW1vdmUtSXRlbSAtUGF0aCAiJFBhdGhcJG5hbWUudG1wIiAtRm9yY2UgfCBPdXQtTnVsbAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICRuYW1lID0gTmV3LVJhbmRvbQogICAgICAgICAgICAgICAgICAgICAgICBOZXctSXRlbSAtUGF0aCAiJFBhdGhcJG5hbWUudG1wIiAtSXRlbVR5cGUgRmlsZSAtRm9yY2UKICAgICAgICAgICAgICAgICAgICAgICAgU2V0LUNvbnRlbnQgLVBhdGggIiRQYXRoXCRuYW1lLnRtcCIgLVZhbHVlICRlaWNhciAtRm9yY2UKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlewogICAgICAgICAgICB0aHJvdyAiJFBhdGggaXMgbm90IGEgdmFsaWQgcGF0aCEiCiAgICB9Cn0KfQ==
