bindk.ps1,13e340b4d2048774528cdc8d7a76399a,Scan result is 32768. IsMalware: 1,ZnVuY3Rpb24gSW52b2tlLVNoZWxsY29kZQp7CjwjCi5TWU5PUFNJUwoKSW5qZWN0IHNoZWxsY29kZSBpbnRvIHRoZSBwcm9jZXNzIElEIG9mIHlvdXIgY2hvb3Npbmcgb3Igd2l0aGluIHRoZSBjb250ZXh0IG9mIHRoZSBydW5uaW5nIFBvd2VyU2hlbGwgcHJvY2Vzcy4KClBvd2VyU3Bsb2l0IEZ1bmN0aW9uOiBJbnZva2UtU2hlbGxjb2RlCkF1dGhvcjogTWF0dGhldyBHcmFlYmVyIChAbWF0dGlmZXN0YXRpb24pCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZQpSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IE5vbmUKT3B0aW9uYWwgRGVwZW5kZW5jaWVzOiBOb25lCiAKLkRFU0NSSVBUSU9OCgpQb3J0aW9ucyBvZiB0aGlzIHByb2plY3Qgd2FzIGJhc2VkIHVwb24gc3lyaW5nZS5jIHYxLjIgd3JpdHRlbiBieSBTcGVuY2VyIE1jSW50eXJlCgpQb3dlclNoZWxsIGV4cGVjdHMgc2hlbGxjb2RlIHRvIGJlIGluIHRoZSBmb3JtIDB4WFgsMHhYWCwweFhYLiBUbyBnZW5lcmF0ZSB5b3VyIHNoZWxsY29kZSBpbiB0aGlzIGZvcm0sIHlvdSBjYW4gdXNlIHRoaXMgY29tbWFuZCBmcm9tIHdpdGhpbiBCYWNrdHJhY2sgKFRoYW5rcywgTWF0dCBhbmQgZzB0bTFsayk6Cgptc2ZwYXlsb2FkIHdpbmRvd3MvZXhlYyBDTUQ9ImNtZCAvayBjYWxjIiBFWElURlVOQz10aHJlYWQgQyB8IHNlZCAnMSw2ZDtzL1siO10vL2c7cy9cXC8sMC9nJyB8IHRyIC1kICdcbicgfCBjdXQgLWMyLSAKCk1ha2Ugc3VyZSB0byBzcGVjaWZ5ICd0aHJlYWQnIGZvciB5b3VyIGV4aXQgcHJvY2Vzcy4gQWxzbywgZG9uJ3QgYm90aGVyIGVuY29kaW5nIHlvdXIgc2hlbGxjb2RlLiBJdCdzIGVudGlyZWx5IHVubmVjZXNzYXJ5LgogCi5QQVJBTUVURVIgUHJvY2Vzc0lECgpQcm9jZXNzIElEIG9mIHRoZSBwcm9jZXNzIHlvdSB3YW50IHRvIGluamVjdCBzaGVsbGNvZGUgaW50by4KCi5QQVJBTUVURVIgU2hlbGxjb2RlCgpTcGVjaWZpZXMgYW4gb3B0aW9uYWwgc2hlbGxjb2RlIHBhc3NlZCBpbiBhcyBhIGJ5dGUgYXJyYXkKCi5QQVJBTUVURVIgTGlzdE1ldGFzcGxvaXRQYXlsb2FkcwoKTGlzdHMgYWxsIG9mIHRoZSBhdmFpbGFibGUgTWV0YXNwbG9pdCBwYXlsb2FkcyB0aGF0IEludm9rZS1TaGVsbGNvZGUgc3VwcG9ydHMKCi5QQVJBTUVURVIgTGhvc3QKClNwZWNpZmllcyB0aGUgSVAgYWRkcmVzcyBvZiB0aGUgYXR0YWNrIG1hY2hpbmUgd2FpdGluZyB0byByZWNlaXZlIHRoZSByZXZlcnNlIHNoZWxsCgouUEFSQU1FVEVSIExwb3J0CiAKU3BlY2lmaWVzIHRoZSBwb3J0IG9mIHRoZSBhdHRhY2sgbWFjaGluZSB3YWl0aW5nIHRvIHJlY2VpdmUgdGhlIHJldmVyc2Ugc2hlbGwKCi5QQVJBTUVURVIgUGF5bG9hZAoKU3BlY2lmaWVzIHRoZSBtZXRhc3Bsb2l0IHBheWxvYWQgdG8gdXNlLiBDdXJyZW50bHksIG9ubHkgJ3dpbmRvd3MvbWV0ZXJwcmV0ZXIvcmV2ZXJzZV9odHRwJyBhbmQgJ3dpbmRvd3MvbWV0ZXJwcmV0ZXIvcmV2ZXJzZV9odHRwcycgcGF5bG9hZHMgYXJlIHN1cHBvcnRlZC4KCi5QQVJBTUVURVIgVXNlckFnZW50CgpPcHRpb25hbGx5IHNwZWNpZmllcyB0aGUgdXNlciBhZ2VudCB0byB1c2Ugd2hlbiB1c2luZyBtZXRlcnByZXRlciBodHRwIG9yIGh0dHBzIHBheWxvYWRzCgouUEFSQU1FVEVSIFByb3h5CgpPcHRpb25hbGx5IHNwZWNpZmllcyB3aGV0aGVyIHRvIHV0aWxpemUgdGhlIHByb3h5IHNldHRpbmdzIG9uIHRoZSBtYWNoaW5lLgoKLlBBUkFNRVRFUiBMZWdhY3kKCk9wdGlvbmFsbHkgc3BlY2lmaWVzIHdoZXRoZXIgdG8gdXRpbGl6ZSB0aGUgb2xkZXIgbWV0ZXJwcmV0ZXIgaGFuZGxlciAiSU5JVE0iLiBUaGlzIHdpbGwgbGlrZWx5IGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4gCgouUEFSQU1FVEVSIEZvcmNlCgpJbmplY3RzIHNoZWxsY29kZSB3aXRob3V0IHByb21wdGluZyBmb3IgY29uZmlybWF0aW9uLiBCeSBkZWZhdWx0LCBJbnZva2UtU2hlbGxjb2RlIHByb21wdHMgZm9yIGNvbmZpcm1hdGlvbiBiZWZvcmUgcGVyZm9ybWluZyBhbnkgbWFsaWNpb3VzIGFjdC4KCi5FWEFNUExFCgpDOlxQUz4gSW52b2tlLVNoZWxsY29kZSAtUHJvY2Vzc0lkIDQyNzQKCkRlc2NyaXB0aW9uCi0tLS0tLS0tLS0tCkluamVjdCBzaGVsbGNvZGUgaW50byBwcm9jZXNzIElEIDQyNzQuCgouRVhBTVBMRQoKQzpcUFM+IEludm9rZS1TaGVsbGNvZGUKCkRlc2NyaXB0aW9uCi0tLS0tLS0tLS0tCkluamVjdCBzaGVsbGNvZGUgaW50byB0aGUgcnVubmluZyBpbnN0YW5jZSBvZiBQb3dlclNoZWxsLgoKLkVYQU1QTEUKCkM6XFBTPiBTdGFydC1Qcm9jZXNzIEM6XFdpbmRvd3NcU3lzV09XNjRcbm90ZXBhZC5leGUgLVdpbmRvd1N0eWxlIEhpZGRlbgpDOlxQUz4gJFByb2MgPSBHZXQtUHJvY2VzcyBub3RlcGFkCkM6XFBTPiBJbnZva2UtU2hlbGxjb2RlIC1Qcm9jZXNzSWQgJFByb2MuSWQgLVBheWxvYWQgd2luZG93cy9tZXRlcnByZXRlci9yZXZlcnNlX2h0dHBzIC1MaG9zdCAxOTIuMTY4LjMwLjEyOSAtTHBvcnQgNDQzIC1WZXJib3NlCgpWRVJCT1NFOiBSZXF1ZXN0aW5nIG1ldGVycHJldGVyIHBheWxvYWQgZnJvbSBodHRwczovLzE5Mi4xNjguMzAuMTI5OjQ0My9JTklUTQpWRVJCT1NFOiBJbmplY3Rpbmcgc2hlbGxjb2RlIGludG8gUElEOiA0MDA0ClZFUkJPU0U6IEluamVjdGluZyBpbnRvIGEgV293NjQgcHJvY2Vzcy4KVkVSQk9TRTogVXNpbmcgMzItYml0IHNoZWxsY29kZS4KVkVSQk9TRTogU2hlbGxjb2RlIG1lbW9yeSByZXNlcnZlZCBhdCAweDAzQkUwMDAwClZFUkJPU0U6IEVtaXR0aW5nIDMyLWJpdCBhc3NlbWJseSBjYWxsIHN0dWIuClZFUkJPU0U6IFRocmVhZCBjYWxsIHN0dWIgbWVtb3J5IHJlc2VydmVkIGF0IDB4MDAxQjAwMDAKVkVSQk9TRTogU2hlbGxjb2RlIGluamVjdGlvbiBjb21wbGV0ZSEKCkRlc2NyaXB0aW9uCi0tLS0tLS0tLS0tCkVzdGFibGlzaGVzIGEgcmV2ZXJzZSBodHRwcyBtZXRlcnByZXRlciBwYXlsb2FkIGZyb20gd2l0aGluIHRoZSBoaWRkZW4gbm90ZXBhZCBwcm9jZXNzLiBBIG11bHRpLWhhbmRsZXIgd2FzIHNldCB1cCB3aXRoIHRoZSBmb2xsb3dpbmcgb3B0aW9uczoKClBheWxvYWQgb3B0aW9ucyAod2luZG93cy9tZXRlcnByZXRlci9yZXZlcnNlX2h0dHBzKToKCk5hbWUgICAgICBDdXJyZW50IFNldHRpbmcgIFJlcXVpcmVkICBEZXNjcmlwdGlvbgotLS0tICAgICAgLS0tLS0tLS0tLS0tLS0tICAtLS0tLS0tLSAgLS0tLS0tLS0tLS0KRVhJVEZVTkMgIHRocmVhZCAgICAgICAgICAgeWVzICAgICAgIEV4aXQgdGVjaG5pcXVlOiBzZWgsIHRocmVhZCwgcHJvY2Vzcywgbm9uZQpMSE9TVCAgICAgMTkyLjE2OC4zMC4xMjkgICB5ZXMgICAgICAgVGhlIGxvY2FsIGxpc3RlbmVyIGhvc3RuYW1lCkxQT1JUICAgICA0NDMgICAgICAgICAgICAgIHllcyAgICAgICBUaGUgbG9jYWwgbGlzdGVuZXIgcG9ydAoKLkVYQU1QTEUKCkM6XFBTPiBJbnZva2UtU2hlbGxjb2RlIC1QYXlsb2FkIHdpbmRvd3MvbWV0ZXJwcmV0ZXIvcmV2ZXJzZV9odHRwcyAtTGhvc3QgMTkyLjE2OC4zMC4xMjkgLUxwb3J0IDgwCgpEZXNjcmlwdGlvbgotLS0tLS0tLS0tLQpFc3RhYmxpc2hlcyBhIHJldmVyc2UgaHR0cCBtZXRlcnByZXRlciBwYXlsb2FkIGZyb20gd2l0aGluIHRoZSBydW5uaW5nIFB3ZXJTaGVsbCBwcm9jZXNzLiBBIG11bHRpLWhhbmRsZXIgd2FzIHNldCB1cCB3aXRoIHRoZSBmb2xsb3dpbmcgb3B0aW9uczoKClBheWxvYWQgb3B0aW9ucyAod2luZG93cy9tZXRlcnByZXRlci9yZXZlcnNlX2h0dHApOgoKTmFtZSAgICAgIEN1cnJlbnQgU2V0dGluZyAgUmVxdWlyZWQgIERlc2NyaXB0aW9uCi0tLS0gICAgICAtLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tICAtLS0tLS0tLS0tLQpFWElURlVOQyAgdGhyZWFkICAgICAgICAgICB5ZXMgICAgICAgRXhpdCB0ZWNobmlxdWU6IHNlaCwgdGhyZWFkLCBwcm9jZXNzLCBub25lCkxIT1NUICAgICAxOTIuMTY4LjMwLjEyOSAgIHllcyAgICAgICBUaGUgbG9jYWwgbGlzdGVuZXIgaG9zdG5hbWUKTFBPUlQgICAgIDgwICAgICAgICAgICAgICAgeWVzICAgICAgIFRoZSBsb2NhbCBsaXN0ZW5lciBwb3J0CgouRVhBTVBMRQoKQzpcUFM+IEludm9rZS1TaGVsbGNvZGUgLVNoZWxsY29kZSBAKDB4OTAsMHg5MCwweEMzKQogICAgCkRlc2NyaXB0aW9uCi0tLS0tLS0tLS0tCk92ZXJyaWRlcyB0aGUgc2hlbGxjb2RlIGluY2x1ZGVkIGluIHRoZSBzY3JpcHQgd2l0aCBjdXN0b20gc2hlbGxjb2RlIC0gMHg5MCAoTk9QKSwgMHg5MCAoTk9QKSwgMHhDMyAoUkVUKQpXYXJuaW5nOiBUaGlzIHNjcmlwdCBoYXMgbm8gd2F5IHRvIHZhbGlkYXRlIHRoYXQgeW91ciBzaGVsbGNvZGUgaXMgMzIgdnMuIDY0LWJpdCEKICAgIAouRVhBTVBMRQoKQzpcUFM+IEludm9rZS1TaGVsbGNvZGUgLUxpc3RNZXRhc3Bsb2l0UGF5bG9hZHMKICAgIApQYXlsb2FkcwotLS0tLS0tLQp3aW5kb3dzL21ldGVycHJldGVyL3JldmVyc2VfaHR0cAp3aW5kb3dzL21ldGVycHJldGVyL3JldmVyc2VfaHR0cHMKCi5OT1RFUwoKVXNlIHRoZSAnLVZlcmJvc2UnIG9wdGlvbiB0byBwcmludCBkZXRhaWxlZCBpbmZvcm1hdGlvbi4KClBsYWNlIHlvdXIgZ2VuZXJhdGVkIHNoZWxsY29kZSBpbiAkU2hlbGxjb2RlMzIgYW5kICRTaGVsbGNvZGU2NCB2YXJpYWJsZXMgb3IgcGFzcyBpdCBpbiBhcyBhIGJ5dGUgYXJyYXkgdmlhIHRoZSAnLVNoZWxsY29kZScgcGFyYW1ldGVyCgpCaWcgdGhhbmtzIHRvIE9pc2luICh4MG4pIEdyZWhhbiAoQG9pc2luZykgZm9yIGFuc3dlcmluZyBhbGwgbXkgb2JzY3VyZSBxdWVzdGlvbnMgYXQgdGhlIGRyb3Agb2YgYSBoYXQgLSBodHRwOi8vd3d3Lm5pdm90Lm9yZy8KCi5MSU5LCgpodHRwOi8vd3d3LmV4cGxvaXQtbW9uZGF5LmNvbQojPgoKW0NtZGxldEJpbmRpbmcoIERlZmF1bHRQYXJhbWV0ZXJTZXROYW1lID0gJ1J1bkxvY2FsJywgU3VwcG9ydHNTaG91bGRQcm9jZXNzID0gJFRydWUgLCBDb25maXJtSW1wYWN0ID0gJ0hpZ2gnKV0gUGFyYW0gKAogICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgIFtVSW50MTZdCiAgICAkUHJvY2Vzc0lELAogICAgCiAgICBbUGFyYW1ldGVyKCBQYXJhbWV0ZXJTZXROYW1lID0gJ1J1bkxvY2FsJyApXQogICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgIFtCeXRlW11dCiAgICAkU2hlbGxjb2RlLAogICAgCiAgICBbUGFyYW1ldGVyKCBQYXJhbWV0ZXJTZXROYW1lID0gJ01ldGFzcGxvaXQnICldCiAgICBbVmFsaWRhdGVTZXQoICd3aW5kb3dzL21ldGVycHJldGVyL3JldmVyc2VfaHR0cCcsCiAgICAgICAgICAgICAgICAgICd3aW5kb3dzL21ldGVycHJldGVyL3JldmVyc2VfaHR0cHMnLAogICAgICAgICAgICAgICAgICBJZ25vcmVDYXNlID0gJFRydWUgKV0KICAgIFtTdHJpbmddCiAgICAkUGF5bG9hZCA9ICd3aW5kb3dzL21ldGVycHJldGVyL3JldmVyc2VfaHR0cCcsCiAgICAKICAgIFtQYXJhbWV0ZXIoIFBhcmFtZXRlclNldE5hbWUgPSAnTGlzdFBheWxvYWRzJyApXQogICAgW1N3aXRjaF0KICAgICRMaXN0TWV0YXNwbG9pdFBheWxvYWRzLAogICAgCiAgICBbUGFyYW1ldGVyKCBNYW5kYXRvcnkgPSAkVHJ1ZSwKICAgICAgICAgICAgICAgIFBhcmFtZXRlclNldE5hbWUgPSAnTWV0YXNwbG9pdCcgKV0KICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICBbU3RyaW5nXQogICAgJExob3N0ID0gJzEyNy4wLjAuMScsCiAgICAKICAgIFtQYXJhbWV0ZXIoIE1hbmRhdG9yeSA9ICRUcnVlLAogICAgICAgICAgICAgICAgUGFyYW1ldGVyU2V0TmFtZSA9ICdNZXRhc3Bsb2l0JyApXQogICAgW1ZhbGlkYXRlUmFuZ2UoIDEsNjU1MzUgKV0KICAgIFtJbnRdCiAgICAkTHBvcnQgPSA4NDQzLAogICAgCiAgICBbUGFyYW1ldGVyKCBQYXJhbWV0ZXJTZXROYW1lID0gJ01ldGFzcGxvaXQnICldCiAgICBbVmFsaWRhdGVOb3ROdWxsKCldCiAgICBbU3RyaW5nXQogICAgJFVzZXJBZ2VudCA9IChHZXQtSXRlbVByb3BlcnR5IC1QYXRoICdIS0NVOlxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxJbnRlcm5ldCBTZXR0aW5ncycpLidVc2VyIEFnZW50JywKCiAgICBbUGFyYW1ldGVyKCBQYXJhbWV0ZXJTZXROYW1lID0gJ01ldGFzcGxvaXQnICldCiAgICBbVmFsaWRhdGVOb3ROdWxsKCldCiAgICBbU3dpdGNoXQogICAgJExlZ2FjeSA9ICRGYWxzZSwKCiAgICBbUGFyYW1ldGVyKCBQYXJhbWV0ZXJTZXROYW1lID0gJ01ldGFzcGxvaXQnICldCiAgICBbVmFsaWRhdGVOb3ROdWxsKCldCiAgICBbU3dpdGNoXQogICAgJFByb3h5ID0gJEZhbHNlLAogICAgCiAgICBbU3dpdGNoXQogICAgJEZvcmNlID0gJEZhbHNlCikKCiAgICBTZXQtU3RyaWN0TW9kZSAtVmVyc2lvbiAyLjAKICAgIAogICAgIyBMaXN0IGFsbCBhdmFpbGFibGUgTWV0YXNwbG9pdCBwYXlsb2FkcyBhbmQgZXhpdCB0aGUgZnVuY3Rpb24KICAgIGlmICgkUHNDbWRsZXQuUGFyYW1ldGVyU2V0TmFtZSAtZXEgJ0xpc3RQYXlsb2FkcycpCiAgICB7CiAgICAgICAgJEF2YWlsYWJsZVBheWxvYWRzID0gKEdldC1Db21tYW5kIEludm9rZS1TaGVsbGNvZGUpLlBhcmFtZXRlcnNbJ1BheWxvYWQnXS5BdHRyaWJ1dGVzIHwKICAgICAgICAgICAgV2hlcmUtT2JqZWN0IHskXy5UeXBlSWQgLWVxIFtTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlZhbGlkYXRlU2V0QXR0cmlidXRlXX0KICAgIAogICAgICAgIGZvcmVhY2ggKCRQYXlsb2FkIGluICRBdmFpbGFibGVQYXlsb2Fkcy5WYWxpZFZhbHVlcykKICAgICAgICB7CiAgICAgICAgICAgIE5ldy1PYmplY3QgUFNPYmplY3QgLVByb3BlcnR5IEB7IFBheWxvYWRzID0gJFBheWxvYWQgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICBSZXR1cm4KICAgIH0KCiAgICBpZiAoICRQU0JvdW5kUGFyYW1ldGVyc1snUHJvY2Vzc0lEJ10gKQogICAgewogICAgICAgICMgRW5zdXJlIGEgdmFsaWQgcHJvY2VzcyBJRCB3YXMgcHJvdmlkZWQKICAgICAgICAjIFRoaXMgY291bGQgaGF2ZSBiZWVuIHZhbGlkYXRlZCB2aWEgJ1ZhbGlkYXRlU2NyaXB0JyBidXQgdGhlIGVycm9yIGdlbmVyYXRlZCB3aXRoIEdldC1Qcm9jZXNzIGlzIG1vcmUgZGVzY3JpcHRpdmUKICAgICAgICBHZXQtUHJvY2VzcyAtSWQgJFByb2Nlc3NJRCAtRXJyb3JBY3Rpb24gU3RvcCB8IE91dC1OdWxsCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIExvY2FsOkdldC1EZWxlZ2F0ZVR5cGUKICAgIHsKICAgICAgICBQYXJhbQogICAgICAgICgKICAgICAgICAgICAgW091dHB1dFR5cGUoW1R5cGVdKV0KICAgICAgICAgICAgCiAgICAgICAgICAgIFtQYXJhbWV0ZXIoIFBvc2l0aW9uID0gMCldCiAgICAgICAgICAgIFtUeXBlW11dCiAgICAgICAgICAgICRQYXJhbWV0ZXJzID0gKE5ldy1PYmplY3QgVHlwZVtdKDApKSwKICAgICAgICAgICAgCiAgICAgICAgICAgIFtQYXJhbWV0ZXIoIFBvc2l0aW9uID0gMSApXQogICAgICAgICAgICBbVHlwZV0KICAgICAgICAgICAgJFJldHVyblR5cGUgPSBbVm9pZF0KICAgICAgICApCgogICAgICAgICREb21haW4gPSBbQXBwRG9tYWluXTo6Q3VycmVudERvbWFpbgogICAgICAgICREeW5Bc3NlbWJseSA9IE5ldy1PYmplY3QgU3lzdGVtLlJlZmxlY3Rpb24uQXNzZW1ibHlOYW1lKCdSZWZsZWN0ZWREZWxlZ2F0ZScpCiAgICAgICAgJEFzc2VtYmx5QnVpbGRlciA9ICREb21haW4uRGVmaW5lRHluYW1pY0Fzc2VtYmx5KCREeW5Bc3NlbWJseSwgW1N5c3RlbS5SZWZsZWN0aW9uLkVtaXQuQXNzZW1ibHlCdWlsZGVyQWNjZXNzXTo6UnVuKQogICAgICAgICRNb2R1bGVCdWlsZGVyID0gJEFzc2VtYmx5QnVpbGRlci5EZWZpbmVEeW5hbWljTW9kdWxlKCdJbk1lbW9yeU1vZHVsZScsICRmYWxzZSkKICAgICAgICAkVHlwZUJ1aWxkZXIgPSAkTW9kdWxlQnVpbGRlci5EZWZpbmVUeXBlKCdNeURlbGVnYXRlVHlwZScsICdDbGFzcywgUHVibGljLCBTZWFsZWQsIEFuc2lDbGFzcywgQXV0b0NsYXNzJywgW1N5c3RlbS5NdWx0aWNhc3REZWxlZ2F0ZV0pCiAgICAgICAgJENvbnN0cnVjdG9yQnVpbGRlciA9ICRUeXBlQnVpbGRlci5EZWZpbmVDb25zdHJ1Y3RvcignUlRTcGVjaWFsTmFtZSwgSGlkZUJ5U2lnLCBQdWJsaWMnLCBbU3lzdGVtLlJlZmxlY3Rpb24uQ2FsbGluZ0NvbnZlbnRpb25zXTo6U3RhbmRhcmQsICRQYXJhbWV0ZXJzKQogICAgICAgICRDb25zdHJ1Y3RvckJ1aWxkZXIuU2V0SW1wbGVtZW50YXRpb25GbGFncygnUnVudGltZSwgTWFuYWdlZCcpCiAgICAgICAgJE1ldGhvZEJ1aWxkZXIgPSAkVHlwZUJ1aWxkZXIuRGVmaW5lTWV0aG9kKCdJbnZva2UnLCAnUHVibGljLCBIaWRlQnlTaWcsIE5ld1Nsb3QsIFZpcnR1YWwnLCAkUmV0dXJuVHlwZSwgJFBhcmFtZXRlcnMpCiAgICAgICAgJE1ldGhvZEJ1aWxkZXIuU2V0SW1wbGVtZW50YXRpb25GbGFncygnUnVudGltZSwgTWFuYWdlZCcpCiAgICAgICAgCiAgICAgICAgV3JpdGUtT3V0cHV0ICRUeXBlQnVpbGRlci5DcmVhdGVUeXBlKCkKICAgIH0KCiAgICBmdW5jdGlvbiBMb2NhbDpHZXQtUHJvY0FkZHJlc3MKICAgIHsKICAgICAgICBQYXJhbQogICAgICAgICgKICAgICAgICAgICAgW091dHB1dFR5cGUoW0ludFB0cl0pXQogICAgICAgIAogICAgICAgICAgICBbUGFyYW1ldGVyKCBQb3NpdGlvbiA9IDAsIE1hbmRhdG9yeSA9ICRUcnVlICldCiAgICAgICAgICAgIFtTdHJpbmddCiAgICAgICAgICAgICRNb2R1bGUsCiAgICAgICAgICAgIAogICAgICAgICAgICBbUGFyYW1ldGVyKCBQb3NpdGlvbiA9IDEsIE1hbmRhdG9yeSA9ICRUcnVlICldCiAgICAgICAgICAgIFtTdHJpbmddCiAgICAgICAgICAgICRQcm9jZWR1cmUKICAgICAgICApCgogICAgICAgICMgR2V0IGEgcmVmZXJlbmNlIHRvIFN5c3RlbS5kbGwgaW4gdGhlIEdBQwogICAgICAgICRTeXN0ZW1Bc3NlbWJseSA9IFtBcHBEb21haW5dOjpDdXJyZW50RG9tYWluLkdldEFzc2VtYmxpZXMoKSB8CiAgICAgICAgICAgIFdoZXJlLU9iamVjdCB7ICRfLkdsb2JhbEFzc2VtYmx5Q2FjaGUgLUFuZCAkXy5Mb2NhdGlvbi5TcGxpdCgnXFwnKVstMV0uRXF1YWxzKCdTeXN0ZW0uZGxsJykgfQogICAgICAgICRVbnNhZmVOYXRpdmVNZXRob2RzID0gJFN5c3RlbUFzc2VtYmx5LkdldFR5cGUoJ01pY3Jvc29mdC5XaW4zMi5VbnNhZmVOYXRpdmVNZXRob2RzJykKICAgICAgICAjIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgR2V0TW9kdWxlSGFuZGxlIGFuZCBHZXRQcm9jQWRkcmVzcyBtZXRob2RzCiAgICAgICAgJEdldE1vZHVsZUhhbmRsZSA9ICRVbnNhZmVOYXRpdmVNZXRob2RzLkdldE1ldGhvZCgnR2V0TW9kdWxlSGFuZGxlJykKICAgICAgICAkR2V0UHJvY0FkZHJlc3MgPSAkVW5zYWZlTmF0aXZlTWV0aG9kcy5HZXRNZXRob2QoJ0dldFByb2NBZGRyZXNzJykKICAgICAgICAjIEdldCBhIGhhbmRsZSB0byB0aGUgbW9kdWxlIHNwZWNpZmllZAogICAgICAgICRLZXJuMzJIYW5kbGUgPSAkR2V0TW9kdWxlSGFuZGxlLkludm9rZSgkbnVsbCwgQCgkTW9kdWxlKSkKICAgICAgICAkdG1wUHRyID0gTmV3LU9iamVjdCBJbnRQdHIKICAgICAgICAkSGFuZGxlUmVmID0gTmV3LU9iamVjdCBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuSGFuZGxlUmVmKCR0bXBQdHIsICRLZXJuMzJIYW5kbGUpCiAgICAgICAgCiAgICAgICAgIyBSZXR1cm4gdGhlIGFkZHJlc3Mgb2YgdGhlIGZ1bmN0aW9uCiAgICAgICAgV3JpdGUtT3V0cHV0ICRHZXRQcm9jQWRkcmVzcy5JbnZva2UoJG51bGwsIEAoW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5IYW5kbGVSZWZdJEhhbmRsZVJlZiwgJFByb2NlZHVyZSkpCiAgICB9CgogICAgIyBFbWl0cyBhIHNoZWxsY29kZSBzdHViIHRoYXQgd2hlbiBpbmplY3RlZCB3aWxsIGNyZWF0ZSBhIHRocmVhZCBhbmQgcGFzcyBleGVjdXRpb24gdG8gdGhlIG1haW4gc2hlbGxjb2RlIHBheWxvYWQKICAgIGZ1bmN0aW9uIExvY2FsOkVtaXQtQ2FsbFRocmVhZFN0dWIgKFtJbnRQdHJdICRCYXNlQWRkciwgW0ludFB0cl0gJEV4aXRUaHJlYWRBZGRyLCBbSW50XSAkQXJjaGl0ZWN0dXJlKQogICAgewogICAgICAgICRJbnRTaXplUHRyID0gJEFyY2hpdGVjdHVyZSAvIDgKCiAgICAgICAgZnVuY3Rpb24gTG9jYWw6Q29udmVydFRvLUxpdHRsZUVuZGlhbiAoW0ludFB0cl0gJEFkZHJlc3MpCiAgICAgICAgewogICAgICAgICAgICAkTGl0dGxlRW5kaWFuQnl0ZUFycmF5ID0gTmV3LU9iamVjdCBCeXRlW10oMCkKICAgICAgICAgICAgJEFkZHJlc3MuVG9TdHJpbmcoIlgkKCRJbnRTaXplUHRyKjIpIikgLXNwbGl0ICcoW0EtRjAtOV17Mn0pJyB8IEZvckVhY2gtT2JqZWN0IHsgaWYgKCRfKSB7ICRMaXR0bGVFbmRpYW5CeXRlQXJyYXkgKz0gW0J5dGVdICgnMHh7MH0nIC1mICRfKSB9IH0KICAgICAgICAgICAgW1N5c3RlbS5BcnJheV06OlJldmVyc2UoJExpdHRsZUVuZGlhbkJ5dGVBcnJheSkKICAgICAgICAgICAgCiAgICAgICAgICAgIFdyaXRlLU91dHB1dCAkTGl0dGxlRW5kaWFuQnl0ZUFycmF5CiAgICAgICAgfQogICAgICAgIAogICAgICAgICRDYWxsU3R1YiA9IE5ldy1PYmplY3QgQnl0ZVtdKDApCiAgICAgICAgCiAgICAgICAgaWYgKCRJbnRTaXplUHRyIC1lcSA4KQogICAgICAgIHsKICAgICAgICAgICAgW0J5dGVbXV0gJENhbGxTdHViID0gMHg0OCwweEI4ICAgICAgICAgICAgICAgICAgICAgICMgTU9WICAgUVdPUkQgUkFYLCAmc2hlbGxjb2RlCiAgICAgICAgICAgICRDYWxsU3R1YiArPSBDb252ZXJ0VG8tTGl0dGxlRW5kaWFuICRCYXNlQWRkciAgICAgICAjICZzaGVsbGNvZGUKICAgICAgICAgICAgJENhbGxTdHViICs9IDB4RkYsMHhEMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ0FMTCAgUkFYCiAgICAgICAgICAgICRDYWxsU3R1YiArPSAweDZBLDB4MDAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFBVU0ggIEJZVEUgMAogICAgICAgICAgICAkQ2FsbFN0dWIgKz0gMHg0OCwweEI4ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBNT1YgICBRV09SRCBSQVgsICZFeGl0VGhyZWFkCiAgICAgICAgICAgICRDYWxsU3R1YiArPSBDb252ZXJ0VG8tTGl0dGxlRW5kaWFuICRFeGl0VGhyZWFkQWRkciAjICZFeGl0VGhyZWFkCiAgICAgICAgICAgICRDYWxsU3R1YiArPSAweEZGLDB4RDAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIENBTEwgIFJBWAogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBbQnl0ZVtdXSAkQ2FsbFN0dWIgPSAweEI4ICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBNT1YgICBEV09SRCBFQVgsICZzaGVsbGNvZGUKICAgICAgICAgICAgJENhbGxTdHViICs9IENvbnZlcnRUby1MaXR0bGVFbmRpYW4gJEJhc2VBZGRyICAgICAgICMgJnNoZWxsY29kZQogICAgICAgICAgICAkQ2FsbFN0dWIgKz0gMHhGRiwweEQwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDQUxMICBFQVgKICAgICAgICAgICAgJENhbGxTdHViICs9IDB4NkEsMHgwMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgUFVTSCAgQllURSAwCiAgICAgICAgICAgICRDYWxsU3R1YiArPSAweEI4ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIE1PViAgIERXT1JEIEVBWCwgJkV4aXRUaHJlYWQKICAgICAgICAgICAgJENhbGxTdHViICs9IENvbnZlcnRUby1MaXR0bGVFbmRpYW4gJEV4aXRUaHJlYWRBZGRyICMgJkV4aXRUaHJlYWQKICAgICAgICAgICAgJENhbGxTdHViICs9IDB4RkYsMHhEMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ0FMTCAgRUFYCiAgICAgICAgfQogICAgICAgIAogICAgICAgIFdyaXRlLU91dHB1dCAkQ2FsbFN0dWIKICAgIH0KCiAgICBmdW5jdGlvbiBMb2NhbDpJbmplY3QtUmVtb3RlU2hlbGxjb2RlIChbSW50XSAkUHJvY2Vzc0lEKQogICAgewogICAgICAgICMgT3BlbiBhIGhhbmRsZSB0byB0aGUgcHJvY2VzcyB5b3Ugd2FudCB0byBpbmplY3QgaW50bwogICAgICAgICRoUHJvY2VzcyA9ICRPcGVuUHJvY2Vzcy5JbnZva2UoMHgwMDFGMEZGRiwgJGZhbHNlLCAkUHJvY2Vzc0lEKSAjIFByb2Nlc3NBY2Nlc3NGbGFncy5BbGwgKDB4MDAxRjBGRkYpCiAgICAgICAgCiAgICAgICAgaWYgKCEkaFByb2Nlc3MpCiAgICAgICAgewogICAgICAgICAgICBUaHJvdyAiVW5hYmxlIHRvIG9wZW4gYSBwcm9jZXNzIGhhbmRsZSBmb3IgUElEOiAkUHJvY2Vzc0lEIgogICAgICAgIH0KCiAgICAgICAgJElzV293NjQgPSAkZmFsc2UKCiAgICAgICAgaWYgKCQ2NGJpdENQVSkgIyBPbmx5IHBlcmZvcm0gdGhlc2VzIGNoZWNrcyBpZiBDUFUgaXMgNjQtYml0CiAgICAgICAgewogICAgICAgICAgICAjIERldGVybWluZSBpcyB0aGUgcHJvY2VzcyBzcGVjaWZpZWQgaXMgMzIgb3IgNjQgYml0CiAgICAgICAgICAgICRJc1dvdzY0UHJvY2Vzcy5JbnZva2UoJGhQcm9jZXNzLCBbUmVmXSAkSXNXb3c2NCkgfCBPdXQtTnVsbAogICAgICAgICAgICAKICAgICAgICAgICAgaWYgKCghJElzV293NjQpIC1hbmQgJFBvd2VyU2hlbGwzMmJpdCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgVGhyb3cgJ1VuYWJsZSB0byBpbmplY3QgNjQtYml0IHNoZWxsY29kZSBmcm9tIHdpdGhpbiAzMi1iaXQgUG93ZXJzaGVsbC4gVXNlIHRoZSA2NC1iaXQgdmVyc2lvbiBvZiBQb3dlcnNoZWxsIGlmIHlvdSB3YW50IHRoaXMgdG8gd29yay4nCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZWlmICgkSXNXb3c2NCkgIyAzMi1iaXQgV293NjQgcHJvY2VzcwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoJFNoZWxsY29kZTMyLkxlbmd0aCAtZXEgMCkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBUaHJvdyAnTm8gc2hlbGxjb2RlIHdhcyBwbGFjZWQgaW4gdGhlICRTaGVsbGNvZGUzMiB2YXJpYWJsZSEnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICRTaGVsbGNvZGUgPSAkU2hlbGxjb2RlMzIKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJ0luamVjdGluZyBpbnRvIGEgV293NjQgcHJvY2Vzcy4nCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICdVc2luZyAzMi1iaXQgc2hlbGxjb2RlLicKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlICMgNjQtYml0IHByb2Nlc3MKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaWYgKCRTaGVsbGNvZGU2NC5MZW5ndGggLWVxIDApCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgVGhyb3cgJ05vIHNoZWxsY29kZSB3YXMgcGxhY2VkIGluIHRoZSAkU2hlbGxjb2RlNjQgdmFyaWFibGUhJwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkU2hlbGxjb2RlID0gJFNoZWxsY29kZTY0CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICdVc2luZyA2NC1iaXQgc2hlbGxjb2RlLicKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlICMgMzItYml0IENQVQogICAgICAgIHsKICAgICAgICAgICAgaWYgKCRTaGVsbGNvZGUzMi5MZW5ndGggLWVxIDApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIFRocm93ICdObyBzaGVsbGNvZGUgd2FzIHBsYWNlZCBpbiB0aGUgJFNoZWxsY29kZTMyIHZhcmlhYmxlIScKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgJFNoZWxsY29kZSA9ICRTaGVsbGNvZGUzMgogICAgICAgICAgICBXcml0ZS1WZXJib3NlICdVc2luZyAzMi1iaXQgc2hlbGxjb2RlLicKICAgICAgICB9CgogICAgICAgICMgUmVzZXJ2ZSBhbmQgY29tbWl0IGVub3VnaCBtZW1vcnkgaW4gcmVtb3RlIHByb2Nlc3MgdG8gaG9sZCB0aGUgc2hlbGxjb2RlCiAgICAgICAgJFJlbW90ZU1lbUFkZHIgPSAkVmlydHVhbEFsbG9jRXguSW52b2tlKCRoUHJvY2VzcywgW0ludFB0cl06Olplcm8sICRTaGVsbGNvZGUuTGVuZ3RoICsgMSwgMHgzMDAwLCAweDQwKSAjIChSZXNlcnZlfENvbW1pdCwgUldYKQogICAgICAgIAogICAgICAgIGlmICghJFJlbW90ZU1lbUFkZHIpCiAgICAgICAgewogICAgICAgICAgICBUaHJvdyAiVW5hYmxlIHRvIGFsbG9jYXRlIHNoZWxsY29kZSBtZW1vcnkgaW4gUElEOiAkUHJvY2Vzc0lEIgogICAgICAgIH0KICAgICAgICAKICAgICAgICBXcml0ZS1WZXJib3NlICJTaGVsbGNvZGUgbWVtb3J5IHJlc2VydmVkIGF0IDB4JCgkUmVtb3RlTWVtQWRkci5Ub1N0cmluZygiWCQoW0ludFB0cl06OlNpemUqMikiKSkiCgogICAgICAgICMgQ29weSBzaGVsbGNvZGUgaW50byB0aGUgcHJldmlvdXNseSBhbGxvY2F0ZWQgbWVtb3J5CiAgICAgICAgJFdyaXRlUHJvY2Vzc01lbW9yeS5JbnZva2UoJGhQcm9jZXNzLCAkUmVtb3RlTWVtQWRkciwgJFNoZWxsY29kZSwgJFNoZWxsY29kZS5MZW5ndGgsIFtSZWZdIDApIHwgT3V0LU51bGwKCiAgICAgICAgIyBHZXQgYWRkcmVzcyBvZiBFeGl0VGhyZWFkIGZ1bmN0aW9uCiAgICAgICAgJEV4aXRUaHJlYWRBZGRyID0gR2V0LVByb2NBZGRyZXNzIGtlcm5lbDMyLmRsbCBFeGl0VGhyZWFkCgogICAgICAgIGlmICgkSXNXb3c2NCkKICAgICAgICB7CiAgICAgICAgICAgICMgQnVpbGQgMzItYml0IGlubGluZSBhc3NlbWJseSBzdHViIHRvIGNhbGwgdGhlIHNoZWxsY29kZSB1cG9uIGNyZWF0aW9uIG9mIGEgcmVtb3RlIHRocmVhZC4KICAgICAgICAgICAgJENhbGxTdHViID0gRW1pdC1DYWxsVGhyZWFkU3R1YiAkUmVtb3RlTWVtQWRkciAkRXhpdFRocmVhZEFkZHIgMzIKICAgICAgICAgICAgCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJ0VtaXR0aW5nIDMyLWJpdCBhc3NlbWJseSBjYWxsIHN0dWIuJwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICAjIEJ1aWxkIDY0LWJpdCBpbmxpbmUgYXNzZW1ibHkgc3R1YiB0byBjYWxsIHRoZSBzaGVsbGNvZGUgdXBvbiBjcmVhdGlvbiBvZiBhIHJlbW90ZSB0aHJlYWQuCiAgICAgICAgICAgICRDYWxsU3R1YiA9IEVtaXQtQ2FsbFRocmVhZFN0dWIgJFJlbW90ZU1lbUFkZHIgJEV4aXRUaHJlYWRBZGRyIDY0CiAgICAgICAgICAgIAogICAgICAgICAgICBXcml0ZS1WZXJib3NlICdFbWl0dGluZyA2NC1iaXQgYXNzZW1ibHkgY2FsbCBzdHViLicKICAgICAgICB9CgogICAgICAgICMgQWxsb2NhdGUgaW5saW5lIGFzc2VtYmx5IHN0dWIKICAgICAgICAkUmVtb3RlU3R1YkFkZHIgPSAkVmlydHVhbEFsbG9jRXguSW52b2tlKCRoUHJvY2VzcywgW0ludFB0cl06Olplcm8sICRDYWxsU3R1Yi5MZW5ndGgsIDB4MzAwMCwgMHg0MCkgIyAoUmVzZXJ2ZXxDb21taXQsIFJXWCkKICAgICAgICAKICAgICAgICBpZiAoISRSZW1vdGVTdHViQWRkcikKICAgICAgICB7CiAgICAgICAgICAgIFRocm93ICJVbmFibGUgdG8gYWxsb2NhdGUgdGhyZWFkIGNhbGwgc3R1YiBtZW1vcnkgaW4gUElEOiAkUHJvY2Vzc0lEIgogICAgICAgIH0KICAgICAgICAKICAgICAgICBXcml0ZS1WZXJib3NlICJUaHJlYWQgY2FsbCBzdHViIG1lbW9yeSByZXNlcnZlZCBhdCAweCQoJFJlbW90ZVN0dWJBZGRyLlRvU3RyaW5nKCJYJChbSW50UHRyXTo6U2l6ZSoyKSIpKSIKCiAgICAgICAgIyBXcml0ZSAzMi1iaXQgYXNzZW1ibHkgc3R1YiB0byByZW1vdGUgcHJvY2VzcyBtZW1vcnkgc3BhY2UKICAgICAgICAkV3JpdGVQcm9jZXNzTWVtb3J5Lkludm9rZSgkaFByb2Nlc3MsICRSZW1vdGVTdHViQWRkciwgJENhbGxTdHViLCAkQ2FsbFN0dWIuTGVuZ3RoLCBbUmVmXSAwKSB8IE91dC1OdWxsCgogICAgICAgICMgRXhlY3V0ZSBzaGVsbGNvZGUgYXMgYSByZW1vdGUgdGhyZWFkCiAgICAgICAgJFRocmVhZEhhbmRsZSA9ICRDcmVhdGVSZW1vdGVUaHJlYWQuSW52b2tlKCRoUHJvY2VzcywgW0ludFB0cl06Olplcm8sIDAsICRSZW1vdGVTdHViQWRkciwgJFJlbW90ZU1lbUFkZHIsIDAsIFtJbnRQdHJdOjpaZXJvKQogICAgICAgIAogICAgICAgIGlmICghJFRocmVhZEhhbmRsZSkKICAgICAgICB7CiAgICAgICAgICAgIFRocm93ICJVbmFibGUgdG8gbGF1bmNoIHJlbW90ZSB0aHJlYWQgaW4gUElEOiAkUHJvY2Vzc0lEIgogICAgICAgIH0KCiAgICAgICAgIyBDbG9zZSBwcm9jZXNzIGhhbmRsZQogICAgICAgICRDbG9zZUhhbmRsZS5JbnZva2UoJGhQcm9jZXNzKSB8IE91dC1OdWxsCgogICAgICAgIFdyaXRlLVZlcmJvc2UgJ1NoZWxsY29kZSBpbmplY3Rpb24gY29tcGxldGUhJwogICAgfQoKICAgIGZ1bmN0aW9uIExvY2FsOkluamVjdC1Mb2NhbFNoZWxsY29kZQogICAgewogICAgICAgIGlmICgkUG93ZXJTaGVsbDMyYml0KSB7CiAgICAgICAgICAgIGlmICgkU2hlbGxjb2RlMzIuTGVuZ3RoIC1lcSAwKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBUaHJvdyAnTm8gc2hlbGxjb2RlIHdhcyBwbGFjZWQgaW4gdGhlICRTaGVsbGNvZGUzMiB2YXJpYWJsZSEnCiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgJFNoZWxsY29kZSA9ICRTaGVsbGNvZGUzMgogICAgICAgICAgICBXcml0ZS1WZXJib3NlICdVc2luZyAzMi1iaXQgc2hlbGxjb2RlLicKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgaWYgKCRTaGVsbGNvZGU2NC5MZW5ndGggLWVxIDApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIFRocm93ICdObyBzaGVsbGNvZGUgd2FzIHBsYWNlZCBpbiB0aGUgJFNoZWxsY29kZTY0IHZhcmlhYmxlIScKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAkU2hlbGxjb2RlID0gJFNoZWxsY29kZTY0CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJ1VzaW5nIDY0LWJpdCBzaGVsbGNvZGUuJwogICAgICAgIH0KICAgIAogICAgICAgICMgQWxsb2NhdGUgUldYIG1lbW9yeSBmb3IgdGhlIHNoZWxsY29kZQogICAgICAgICRCYXNlQWRkcmVzcyA9ICRWaXJ0dWFsQWxsb2MuSW52b2tlKFtJbnRQdHJdOjpaZXJvLCAkU2hlbGxjb2RlLkxlbmd0aCArIDEsIDB4MzAwMCwgMHg0MCkgIyAoUmVzZXJ2ZXxDb21taXQsIFJXWCkKICAgICAgICBpZiAoISRCYXNlQWRkcmVzcykKICAgICAgICB7CiAgICAgICAgICAgIFRocm93ICJVbmFibGUgdG8gYWxsb2NhdGUgc2hlbGxjb2RlIG1lbW9yeSBpbiBQSUQ6ICRQcm9jZXNzSUQiCiAgICAgICAgfQogICAgICAgIAogICAgICAgIFdyaXRlLVZlcmJvc2UgIlNoZWxsY29kZSBtZW1vcnkgcmVzZXJ2ZWQgYXQgMHgkKCRCYXNlQWRkcmVzcy5Ub1N0cmluZygiWCQoW0ludFB0cl06OlNpemUqMikiKSkiCgogICAgICAgICMgQ29weSBzaGVsbGNvZGUgdG8gUldYIGJ1ZmZlcgogICAgICAgIFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkNvcHkoJFNoZWxsY29kZSwgMCwgJEJhc2VBZGRyZXNzLCAkU2hlbGxjb2RlLkxlbmd0aCkKICAgICAgICAKICAgICAgICAjIEdldCBhZGRyZXNzIG9mIEV4aXRUaHJlYWQgZnVuY3Rpb24KICAgICAgICAkRXhpdFRocmVhZEFkZHIgPSBHZXQtUHJvY0FkZHJlc3Mga2VybmVsMzIuZGxsIEV4aXRUaHJlYWQKICAgICAgICAKICAgICAgICBpZiAoJFBvd2VyU2hlbGwzMmJpdCkKICAgICAgICB7CiAgICAgICAgICAgICRDYWxsU3R1YiA9IEVtaXQtQ2FsbFRocmVhZFN0dWIgJEJhc2VBZGRyZXNzICRFeGl0VGhyZWFkQWRkciAzMgogICAgICAgICAgICAKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnRW1pdHRpbmcgMzItYml0IGFzc2VtYmx5IGNhbGwgc3R1Yi4nCiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgICRDYWxsU3R1YiA9IEVtaXQtQ2FsbFRocmVhZFN0dWIgJEJhc2VBZGRyZXNzICRFeGl0VGhyZWFkQWRkciA2NAogICAgICAgICAgICAKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnRW1pdHRpbmcgNjQtYml0IGFzc2VtYmx5IGNhbGwgc3R1Yi4nCiAgICAgICAgfQoKICAgICAgICAjIEFsbG9jYXRlIFJXWCBtZW1vcnkgZm9yIHRoZSB0aHJlYWQgY2FsbCBzdHViCiAgICAgICAgJENhbGxTdHViQWRkcmVzcyA9ICRWaXJ0dWFsQWxsb2MuSW52b2tlKFtJbnRQdHJdOjpaZXJvLCAkQ2FsbFN0dWIuTGVuZ3RoICsgMSwgMHgzMDAwLCAweDQwKSAjIChSZXNlcnZlfENvbW1pdCwgUldYKQogICAgICAgIGlmICghJENhbGxTdHViQWRkcmVzcykKICAgICAgICB7CiAgICAgICAgICAgIFRocm93ICJVbmFibGUgdG8gYWxsb2NhdGUgdGhyZWFkIGNhbGwgc3R1Yi4iCiAgICAgICAgfQogICAgICAgIAogICAgICAgIFdyaXRlLVZlcmJvc2UgIlRocmVhZCBjYWxsIHN0dWIgbWVtb3J5IHJlc2VydmVkIGF0IDB4JCgkQ2FsbFN0dWJBZGRyZXNzLlRvU3RyaW5nKCJYJChbSW50UHRyXTo6U2l6ZSoyKSIpKSIKCiAgICAgICAgIyBDb3B5IGNhbGwgc3R1YiB0byBSV1ggYnVmZmVyCiAgICAgICAgW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6Q29weSgkQ2FsbFN0dWIsIDAsICRDYWxsU3R1YkFkZHJlc3MsICRDYWxsU3R1Yi5MZW5ndGgpCgogICAgICAgICMgTGF1bmNoIHNoZWxsY29kZSBpbiBpdCdzIG93biB0aHJlYWQKICAgICAgICAkVGhyZWFkSGFuZGxlID0gJENyZWF0ZVRocmVhZC5JbnZva2UoW0ludFB0cl06Olplcm8sIDAsICRDYWxsU3R1YkFkZHJlc3MsICRCYXNlQWRkcmVzcywgMCwgW0ludFB0cl06Olplcm8pCiAgICAgICAgaWYgKCEkVGhyZWFkSGFuZGxlKQogICAgICAgIHsKICAgICAgICAgICAgVGhyb3cgIlVuYWJsZSB0byBsYXVuY2ggdGhyZWFkLiIKICAgICAgICB9CgogICAgICAgICMgV2FpdCBmb3Igc2hlbGxjb2RlIHRocmVhZCB0byB0ZXJtaW5hdGUKICAgICAgICAkV2FpdEZvclNpbmdsZU9iamVjdC5JbnZva2UoJFRocmVhZEhhbmRsZSwgMHhGRkZGRkZGRikgfCBPdXQtTnVsbAogICAgICAgIAogICAgICAgICRWaXJ0dWFsRnJlZS5JbnZva2UoJENhbGxTdHViQWRkcmVzcywgJENhbGxTdHViLkxlbmd0aCArIDEsIDB4ODAwMCkgfCBPdXQtTnVsbCAjIE1FTV9SRUxFQVNFICgweDgwMDApCiAgICAgICAgJFZpcnR1YWxGcmVlLkludm9rZSgkQmFzZUFkZHJlc3MsICRTaGVsbGNvZGUuTGVuZ3RoICsgMSwgMHg4MDAwKSB8IE91dC1OdWxsICMgTUVNX1JFTEVBU0UgKDB4ODAwMCkKCiAgICAgICAgV3JpdGUtVmVyYm9zZSAnU2hlbGxjb2RlIGluamVjdGlvbiBjb21wbGV0ZSEnCiAgICB9CgogICAgIyBBIHZhbGlkIHBvaW50ZXIgdG8gSXNXb3c2NFByb2Nlc3Mgd2lsbCBiZSByZXR1cm5lZCBpZiBDUFUgaXMgNjQtYml0CiAgICAkSXNXb3c2NFByb2Nlc3NBZGRyID0gR2V0LVByb2NBZGRyZXNzIGtlcm5lbDMyLmRsbCBJc1dvdzY0UHJvY2VzcwogICAgaWYgKCRJc1dvdzY0UHJvY2Vzc0FkZHIpCiAgICB7CiAgICAgICAgJElzV293NjRQcm9jZXNzRGVsZWdhdGUgPSBHZXQtRGVsZWdhdGVUeXBlIEAoW0ludFB0cl0sIFtCb29sXS5NYWtlQnlSZWZUeXBlKCkpIChbQm9vbF0pCiAgICAgICAgJElzV293NjRQcm9jZXNzID0gW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0RGVsZWdhdGVGb3JGdW5jdGlvblBvaW50ZXIoJElzV293NjRQcm9jZXNzQWRkciwgJElzV293NjRQcm9jZXNzRGVsZWdhdGUpCiAgICAgICAgCiAgICAgICAgJDY0Yml0Q1BVID0gJHRydWUKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICAkNjRiaXRDUFUgPSAkZmFsc2UKICAgIH0KCiAgICBpZiAoW0ludFB0cl06OlNpemUgLWVxIDQpCiAgICB7CiAgICAgICAgJFBvd2VyU2hlbGwzMmJpdCA9ICR0cnVlCiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgJFBvd2VyU2hlbGwzMmJpdCA9ICRmYWxzZQogICAgfQoKICAgIGlmICgkUHNDbWRsZXQuUGFyYW1ldGVyU2V0TmFtZSAtZXEgJ01ldGFzcGxvaXQnKQogICAgewogICAgICAgIGlmICghJFBvd2VyU2hlbGwzMmJpdCkgewogICAgICAgICAgICAjIFRoZSBjdXJyZW50bHkgc3VwcG9ydGVkIE1ldGFzcGxvaXQgcGF5bG9hZHMgYXJlIDMyLWJpdC4gVGhpcyBibG9jayBvZiBjb2RlIGltcGxlbWVudHMgdGhlIGxvZ2ljIHRvIGV4ZWN1dGUgdGhpcyBzY3JpcHQgZnJvbSAzMi1iaXQgUG93ZXJTaGVsbAogICAgICAgICAgICAjIEdldCB0aGlzIHNjcmlwdCdzIGNvbnRlbnRzIGFuZCBwYXNzIGl0IHRvIDMyLWJpdCBwb3dlcnNoZWxsIHdpdGggdGhlIHNhbWUgcGFyYW1ldGVycyBwYXNzZWQgdG8gdGhpcyBmdW5jdGlvbgoKICAgICAgICAgICAgIyBQdWxsIG91dCBqdXN0IHRoZSBjb250ZW50IG9mIHRoZSB0aGlzIHNjcmlwdCdzIGludm9jYXRpb24uCiAgICAgICAgICAgICRSb290SW52b2NhdGlvbiA9ICRNeUludm9jYXRpb24uTGluZQoKICAgICAgICAgICAgJFJlc3BvbnNlID0gJFRydWUKICAgICAgICAKICAgICAgICAgICAgaWYgKCAkRm9yY2UgLW9yICggJFJlc3BvbnNlID0gJHBzQ21kbGV0LlNob3VsZENvbnRpbnVlKCAiRG8geW91IHdhbnQgdG8gbGF1bmNoIHRoZSBwYXlsb2FkIGZyb20geDg2IFBvd2Vyc2hlbGw/IiwKICAgICAgICAgICAgICAgICAgICJBdHRlbXB0IHRvIGV4ZWN1dGUgMzItYml0IHNoZWxsY29kZSBmcm9tIDY0LWJpdCBQb3dlcnNoZWxsLiBOb3RlOiBUaGlzIHByb2Nlc3MgdGFrZXMgYWJvdXQgb25lIG1pbnV0ZS4gQmUgcGF0aWVudCEgWW91IHdpbGwgYWxzbyBzZWUgc29tZSBhcnRpZmFjdHMgb2YgdGhlIHNjcmlwdCBsb2FkaW5nIGluIHRoZSBvdGhlciBwcm9jZXNzLiIgKSApICkgeyB9CiAgICAgICAgCiAgICAgICAgICAgIGlmICggISRSZXNwb25zZSApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICMgVXNlciBvcHRlZCBub3QgdG8gbGF1bmNoIHRoZSAzMi1iaXQgcGF5bG9hZCBmcm9tIDMyLWJpdCBQb3dlclNoZWxsLiBFeGl0IGZ1bmN0aW9uCiAgICAgICAgICAgICAgICBSZXR1cm4KICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBTaW5jZSB0aGUgc2hlbGxjb2RlIHdpbGwgcnVuIGluIGEgbm9uaW50ZXJhY3RpdmUgaW5zdGFuY2Ugb2YgUG93ZXJTaGVsbCwgbWFrZSBzdXJlIHRoZSAtRm9yY2Ugc3dpdGNoIGlzIGluY2x1ZGVkIHNvIHRoYXQgdGhlcmUgaXMgbm8gd2FybmluZyBwcm9tcHQuCiAgICAgICAgICAgIGlmICgkTXlJbnZvY2F0aW9uLkJvdW5kUGFyYW1ldGVyc1snRm9yY2UnXSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXhlY3V0aW5nIHRoZSBmb2xsb3dpbmcgZnJvbSAzMi1iaXQgUG93ZXJTaGVsbDogJFJvb3RJbnZvY2F0aW9uIgogICAgICAgICAgICAgICAgJENvbW1hbmQgPSAiZnVuY3Rpb24gJCgkTXlJbnZvY2F0aW9uLkludm9jYXRpb25OYW1lKSB7YG4iICsgJE15SW52b2NhdGlvbi5NeUNvbW1hbmQuU2NyaXB0QmxvY2sgKyAiYG59YG4kKCRSb290SW52b2NhdGlvbilgbmBuIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXhlY3V0aW5nIHRoZSBmb2xsb3dpbmcgZnJvbSAzMi1iaXQgUG93ZXJTaGVsbDogJFJvb3RJbnZvY2F0aW9uIC1Gb3JjZSIKICAgICAgICAgICAgICAgICRDb21tYW5kID0gImZ1bmN0aW9uICQoJE15SW52b2NhdGlvbi5JbnZvY2F0aW9uTmFtZSkge2BuIiArICRNeUludm9jYXRpb24uTXlDb21tYW5kLlNjcmlwdEJsb2NrICsgImBufWBuJCgkUm9vdEludm9jYXRpb24pIC1Gb3JjZWBuYG4iCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRDb21tYW5kQnl0ZXMgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpBc2NpaS5HZXRCeXRlcygkQ29tbWFuZCkKICAgICAgICAgICAgJEVuY29kZWRDb21tYW5kID0gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZygkQ29tbWFuZEJ5dGVzKQoKICAgICAgICAgICAgJEV4ZWN1dGUgPSAnJENvbW1hbmQnICsgIiB8ICRFbnY6d2luZGlyXFN5c1dPVzY0XFdpbmRvd3NQb3dlclNoZWxsXHYxLjBccG93ZXJzaGVsbC5leGUgLU5vUHJvZmlsZSAtQ29tbWFuZCAtIgogICAgICAgICAgICBJbnZva2UtRXhwcmVzc2lvbiAtQ29tbWFuZCAkRXhlY3V0ZSB8IE91dC1OdWxsCgogICAgICAgICAgICAjIEV4aXQgdGhlIHNjcmlwdCBzaW5jZSB0aGUgc2hlbGxjb2RlIHdpbGwgYmUgcnVubmluZyBmcm9tIHg4NiBQb3dlclNoZWxsCiAgICAgICAgICAgIFJldHVybgogICAgICAgIH0KICAgICAgICAKICAgICAgICAkUmVzcG9uc2UgPSAkVHJ1ZQogICAgICAgIAogICAgICAgIGlmICggJEZvcmNlIC1vciAoICRSZXNwb25zZSA9ICRwc0NtZGxldC5TaG91bGRDb250aW51ZSggIkRvIHlvdSBrbm93IHdoYXQgeW91J3JlIGRvaW5nPyIsCiAgICAgICAgICAgICAgICJBYm91dCB0byBkb3dubG9hZCBNZXRhc3Bsb2l0IHBheWxvYWQgJyQoJFBheWxvYWQpJyBMSE9TVD0kKCRMaG9zdCksIExQT1JUPSQoJExwb3J0KSIgKSApICkgeyB9CiAgICAgICAgCiAgICAgICAgaWYgKCAhJFJlc3BvbnNlICkKICAgICAgICB7CiAgICAgICAgICAgICMgVXNlciBvcHRlZCBub3QgdG8gY2Fycnkgb3V0IGRvd25sb2FkIG9mIE1ldGFzcGxvaXQgcGF5bG9hZC4gRXhpdCBmdW5jdGlvbgogICAgICAgICAgICBSZXR1cm4KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgc3dpdGNoICgkUGF5bG9hZCkKICAgICAgICB7CiAgICAgICAgICAgICd3aW5kb3dzL21ldGVycHJldGVyL3JldmVyc2VfaHR0cCcKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJFNTTCA9ICcnCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgICd3aW5kb3dzL21ldGVycHJldGVyL3JldmVyc2VfaHR0cHMnCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRTU0wgPSAncycKICAgICAgICAgICAgICAgICMgQWNjZXB0IGludmFsaWQgY2VydGlmaWNhdGVzCiAgICAgICAgICAgICAgICBbU3lzdGVtLk5ldC5TZXJ2aWNlUG9pbnRNYW5hZ2VyXTo6U2VydmVyQ2VydGlmaWNhdGVWYWxpZGF0aW9uQ2FsbGJhY2sgPSB7JFRydWV9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYgKCRMZWdhY3kpIAogICAgICAgIHsKICAgICAgICAgICAgIyBPbGQgTWV0ZXJwcmV0ZXIgaGFuZGxlciBleHBlY3RzICdJTklUTScgaW4gdGhlIFVSSSBpbiBvcmRlciB0byBpbml0aWF0ZSBzdGFnZSAwCiAgICAgICAgICAgICRSZXF1ZXN0ID0gImh0dHAkKCRTU0wpOi8vJCgkTGhvc3QpOiQoJExwb3J0KS9JTklUTSIKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiUmVxdWVzdGluZyBtZXRlcnByZXRlciBwYXlsb2FkIGZyb20gJFJlcXVlc3QiCiAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICMgR2VuZXJhdGUgYSBVUkkgdGhhdCBwYXNzZXMgdGhlIHRlc3QKICAgICAgICAgICAgJENoYXJBcnJheSA9IDQ4Li41NyArIDY1Li45MCArIDk3Li4xMjIgfCBGb3JFYWNoLU9iamVjdCB7W0NoYXJdJF99CiAgICAgICAgICAgICRTdW1UZXN0ID0gJEZhbHNlCgogICAgICAgICAgICB3aGlsZSAoJFN1bVRlc3QgLWVxICRGYWxzZSkgCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRHZW5lcmF0ZWRVcmkgPSAkQ2hhckFycmF5IHwgR2V0LVJhbmRvbSAtQ291bnQgNAogICAgICAgICAgICAgICAgJFN1bVRlc3QgPSAoKFtpbnRbXV0gJEdlbmVyYXRlZFVyaSB8IE1lYXN1cmUtT2JqZWN0IC1TdW0pLlN1bSAlIDB4MTAwIC1lcSA5MikKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJFJlcXVlc3RVcmkgPSAtam9pbiAkR2VuZXJhdGVkVXJpCgogICAgICAgICAgICAkUmVxdWVzdCA9ICJodHRwJCgkU1NMKTovLyQoJExob3N0KTokKCRMcG9ydCkvJCgkUmVxdWVzdFVyaSkiIAogICAgICAgIH0KICAgICAgICAgICAKICAgICAgICAkVXJpID0gTmV3LU9iamVjdCBVcmkoJFJlcXVlc3QpCiAgICAgICAgJFdlYkNsaWVudCA9IE5ldy1PYmplY3QgU3lzdGVtLk5ldC5XZWJDbGllbnQKICAgICAgICAkV2ViQ2xpZW50LkhlYWRlcnMuQWRkKCd1c2VyLWFnZW50JywgIiRVc2VyQWdlbnQiKQogICAgICAgIAogICAgICAgIGlmICgkUHJveHkpCiAgICAgICAgewogICAgICAgICAgICAkV2ViUHJveHlPYmplY3QgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuV2ViUHJveHkKICAgICAgICAgICAgJFByb3h5QWRkcmVzcyA9IChHZXQtSXRlbVByb3BlcnR5IC1QYXRoICdIS0NVOlxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxJbnRlcm5ldCBTZXR0aW5ncycpLlByb3h5U2VydmVyCiAgICAgICAgICAgIAogICAgICAgICAgICAjIGlmIHRoZXJlIGlzIG5vIHByb3h5IHNldCwgdGhlbiBjb250aW51ZSB3aXRob3V0IGl0CiAgICAgICAgICAgIGlmICgkUHJveHlBZGRyZXNzKSAKICAgICAgICAgICAgewogICAgICAgICAgICAKICAgICAgICAgICAgICAgICRXZWJQcm94eU9iamVjdC5BZGRyZXNzID0gJFByb3h5QWRkcmVzcwogICAgICAgICAgICAgICAgJFdlYlByb3h5T2JqZWN0LlVzZURlZmF1bHRDcmVkZW50aWFscyA9ICRUcnVlCiAgICAgICAgICAgICAgICAkV2ViQ2xpZW50T2JqZWN0LlByb3h5ID0gJFdlYlByb3h5T2JqZWN0CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHRyeQogICAgICAgIHsKICAgICAgICAgICAgW0J5dGVbXV0gJFNoZWxsY29kZTMyID0gJFdlYkNsaWVudC5Eb3dubG9hZERhdGEoJFVyaSkKICAgICAgICB9CiAgICAgICAgY2F0Y2gKICAgICAgICB7CiAgICAgICAgICAgIFRocm93ICIkKCRFcnJvclswXS5FeGNlcHRpb24uSW5uZXJFeGNlcHRpb24uSW5uZXJFeGNlcHRpb24uTWVzc2FnZSkiCiAgICAgICAgfQogICAgICAgIFtCeXRlW11dICRTaGVsbGNvZGU2NCA9ICRTaGVsbGNvZGUzMgoKICAgIH0KICAgIGVsc2VpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTaGVsbGNvZGUnXSkKICAgIHsKICAgICAgICAjIFVzZXJzIHBhc3NpbmcgaW4gc2hlbGxjb2RlICB0aHJvdWdoIHRoZSAnLVNoZWxsY29kZScgcGFyYW1ldGVyIGFyZSByZXNwb25zaWJsZSBmb3IgZW5zdXJpbmcgaXQgdGFyZ2V0cwogICAgICAgICMgdGhlIGNvcnJlY3QgYXJjaGl0ZWNodHVyZSAtIHg4NiB2cy4geDY0LiBUaGlzIHNjcmlwdCBoYXMgbm8gd2F5IHRvIHZhbGlkYXRlIHdoYXQgeW91IHByb3ZpZGUgaXQuCiAgICAgICAgW0J5dGVbXV0gJFNoZWxsY29kZTMyID0gJFNoZWxsY29kZQogICAgICAgIFtCeXRlW11dICRTaGVsbGNvZGU2NCA9ICRTaGVsbGNvZGUzMgogICAgfQogICAgZWxzZQogICAgewogICAgICAgICMgUG9wIGEgY2FsYy4uLiBvciB3aGF0ZXZlciBzaGVsbGNvZGUgeW91IGRlY2lkZSB0byBwbGFjZSBpbiBoZXJlCiAgICAgICAgIyBJIHNpbmNlcmVseSBob3BlIHlvdSB0cnVzdCB0aGF0IHRoaXMgc2hlbGxjb2RlIGFjdHVhbGx5IHBvcHMgYSBjYWxjLi4uCiAgICAgICAgIyBJbnNlcnQgeW91ciBzaGVsbGNvZGUgaGVyZSBpbiB0aGUgZm9yIDB4WFgsMHhYWCwuLi4KICAgICAgICAjIDMyLWJpdCBwYXlsb2FkCiAgICAgICAgIyBtc2ZwYXlsb2FkIHdpbmRvd3MvZXhlYyBDTUQ9ImNtZCAvayBjYWxjIiBFWElURlVOQz10aHJlYWQKICAgICAgICAKW0J5dGVbXV0gJHNoZWxsY29kZTMyID0gMHhmYywweGU4LDB4ODIsMHgwLDB4MCwweDAsMHg2MCwweDg5LDB4ZTUsMHgzMQokc2hlbGxjb2RlMzIgKz0gMHhjMCwweDY0LDB4OGIsMHg1MCwweDMwLDB4OGIsMHg1MiwweGMsMHg4YiwweDUyCiRzaGVsbGNvZGUzMiArPSAweDE0LDB4OGIsMHg3MiwweDI4LDB4ZiwweGI3LDB4NGEsMHgyNiwweDMxLDB4ZmYKJHNoZWxsY29kZTMyICs9IDB4YWMsMHgzYywweDYxLDB4N2MsMHgyLDB4MmMsMHgyMCwweGMxLDB4Y2YsMHhkCiRzaGVsbGNvZGUzMiArPSAweDEsMHhjNywweGUyLDB4ZjIsMHg1MiwweDU3LDB4OGIsMHg1MiwweDEwLDB4OGIKJHNoZWxsY29kZTMyICs9IDB4NGEsMHgzYywweDhiLDB4NGMsMHgxMSwweDc4LDB4ZTMsMHg0OCwweDEsMHhkMQokc2hlbGxjb2RlMzIgKz0gMHg1MSwweDhiLDB4NTksMHgyMCwweDEsMHhkMywweDhiLDB4NDksMHgxOCwweGUzCiRzaGVsbGNvZGUzMiArPSAweDNhLDB4NDksMHg4YiwweDM0LDB4OGIsMHgxLDB4ZDYsMHgzMSwweGZmLDB4YWMKJHNoZWxsY29kZTMyICs9IDB4YzEsMHhjZiwweGQsMHgxLDB4YzcsMHgzOCwweGUwLDB4NzUsMHhmNiwweDMKJHNoZWxsY29kZTMyICs9IDB4N2QsMHhmOCwweDNiLDB4N2QsMHgyNCwweDc1LDB4ZTQsMHg1OCwweDhiLDB4NTgKJHNoZWxsY29kZTMyICs9IDB4MjQsMHgxLDB4ZDMsMHg2NiwweDhiLDB4YywweDRiLDB4OGIsMHg1OCwweDFjCiRzaGVsbGNvZGUzMiArPSAweDEsMHhkMywweDhiLDB4NCwweDhiLDB4MSwweGQwLDB4ODksMHg0NCwweDI0CiRzaGVsbGNvZGUzMiArPSAweDI0LDB4NWIsMHg1YiwweDYxLDB4NTksMHg1YSwweDUxLDB4ZmYsMHhlMCwweDVmCiRzaGVsbGNvZGUzMiArPSAweDVmLDB4NWEsMHg4YiwweDEyLDB4ZWIsMHg4ZCwweDVkLDB4NjgsMHgzMywweDMyCiRzaGVsbGNvZGUzMiArPSAweDAsMHgwLDB4NjgsMHg3NywweDczLDB4MzIsMHg1ZiwweDU0LDB4NjgsMHg0Ywokc2hlbGxjb2RlMzIgKz0gMHg3NywweDI2LDB4NywweGZmLDB4ZDUsMHhiOCwweDkwLDB4MSwweDAsMHgwCiRzaGVsbGNvZGUzMiArPSAweDI5LDB4YzQsMHg1NCwweDUwLDB4NjgsMHgyOSwweDgwLDB4NmIsMHgwLDB4ZmYKJHNoZWxsY29kZTMyICs9IDB4ZDUsMHg1MCwweDUwLDB4NTAsMHg1MCwweDQwLDB4NTAsMHg0MCwweDUwLDB4NjgKJHNoZWxsY29kZTMyICs9IDB4ZWEsMHhmLDB4ZGYsMHhlMCwweGZmLDB4ZDUsMHg5NywweDMxLDB4ZGIsMHg1Mwokc2hlbGxjb2RlMzIgKz0gMHg2OCwweDIsMHgwLDB4MTAsMHhlMSwweDg5LDB4ZTYsMHg2YSwweDEwLDB4NTYKJHNoZWxsY29kZTMyICs9IDB4NTcsMHg2OCwweGMyLDB4ZGIsMHgzNywweDY3LDB4ZmYsMHhkNSwweDZhLDB4MQokc2hlbGxjb2RlMzIgKz0gMHg1NCwweDY4LDB4MiwweDMwLDB4MCwweDAsMHg2OCwweGZmLDB4ZmYsMHgwCiRzaGVsbGNvZGUzMiArPSAweDAsMHg1NywweDY4LDB4ZjEsMHhhMiwweDc3LDB4MjksMHhmZiwweGQ1LDB4NTMKJHNoZWxsY29kZTMyICs9IDB4NTcsMHg2OCwweGI3LDB4ZTksMHgzOCwweGZmLDB4ZmYsMHhkNSwweDUzLDB4ZTgKJHNoZWxsY29kZTMyICs9IDB4MWEsMHgwLDB4MCwweDAsMHg4YiwweDQ0LDB4MjQsMHg0LDB4OGIsMHg0MAokc2hlbGxjb2RlMzIgKz0gMHg0LDB4OGIsMHg0MCwweDQsMHgyZCwweGEsMHhiLDB4YywweGQsMHg3NAokc2hlbGxjb2RlMzIgKz0gMHgzLDB4MzEsMHhjMCwweDQwLDB4ODksMHg0NSwweDU0LDB4YzIsMHgyMCwweDAKJHNoZWxsY29kZTMyICs9IDB4NTMsMHg1MywweDU3LDB4NjgsMHg5NCwweGFjLDB4YmUsMHgzMywweGZmLDB4ZDUKJHNoZWxsY29kZTMyICs9IDB4ODMsMHg3YywweDI0LDB4NCwweDAsMHg3NSwweGNmLDB4NDAsMHg3NSwweDYKJHNoZWxsY29kZTMyICs9IDB4NTMsMHg1MywweGViLDB4ZTgsMHg3NCwweGM2LDB4NDgsMHg1NywweDk3LDB4NjgKJHNoZWxsY29kZTMyICs9IDB4NzUsMHg2ZSwweDRkLDB4NjEsMHhmZiwweGQ1LDB4NmEsMHgwLDB4NmEsMHg0CiRzaGVsbGNvZGUzMiArPSAweDU2LDB4NTcsMHg2OCwweDIsMHhkOSwweGM4LDB4NWYsMHhmZiwweGQ1LDB4OGIKJHNoZWxsY29kZTMyICs9IDB4MzYsMHg2YSwweDQwLDB4NjgsMHgwLDB4MTAsMHgwLDB4MCwweDU2LDB4NmEKJHNoZWxsY29kZTMyICs9IDB4MCwweDY4LDB4NTgsMHhhNCwweDUzLDB4ZTUsMHhmZiwweGQ1LDB4OTMsMHg1Mwokc2hlbGxjb2RlMzIgKz0gMHg2YSwweDAsMHg1NiwweDUzLDB4NTcsMHg2OCwweDIsMHhkOSwweGM4LDB4NWYKJHNoZWxsY29kZTMyICs9IDB4ZmYsMHhkNSwweDEsMHhjMywweDI5LDB4YzYsMHg3NSwweGVlLDB4YzMKCiAgICAgICAgIyA2NC1iaXQgcGF5bG9hZAogICAgICAgICMgbXNmcGF5bG9hZCB3aW5kb3dzL3g2NC9leGVjIENNRD0iY2FsYyIgRVhJVEZVTkM9dGhyZWFkCiAgICAgICAgW0J5dGVbXV0gJFNoZWxsY29kZTY0ID0gMHg0OCwweDMxLDB4YzksMHg0OCwweDgxLDB4ZTksMHhjMywweGZmLDB4ZmYsMHhmZgokU2hlbGxjb2RlNjQgKz0gMHg0OCwweDhkLDB4NSwweGVmLDB4ZmYsMHhmZiwweGZmLDB4NDgsMHhiYiwweDhiCiRTaGVsbGNvZGU2NCArPSAweDEsMHg4NCwweDljLDB4MzUsMHg1ZSwweDQ2LDB4NjAsMHg0OCwweDMxLDB4NTgKJFNoZWxsY29kZTY0ICs9IDB4MjcsMHg0OCwweDJkLDB4ZjgsMHhmZiwweGZmLDB4ZmYsMHhlMiwweGY0LDB4NzcKJFNoZWxsY29kZTY0ICs9IDB4NDksMHg1LDB4NzgsMHhjNSwweGExLDB4YjksMHg5ZiwweDYzLDB4Y2QsMHg4NAokU2hlbGxjb2RlNjQgKz0gMHg5YywweDM1LDB4MWYsMHgxNywweDIxLDB4ZGIsMHg1MywweGQ1LDB4Y2EsMHg3ZAokU2hlbGxjb2RlNjQgKz0gMHg2ZiwweDk0LDB4NSwweGMzLDB4OGEsMHhkNiwweGZjLDB4N2QsMHhkNSwweDE0CiRTaGVsbGNvZGU2NCArPSAweDc4LDB4YzMsMHg4YSwweGQ2LDB4YmMsMHg3ZCwweGQ1LDB4MzQsMHgzMCwweGMzCiRTaGVsbGNvZGU2NCArPSAweGUsMHgzMywweGQ2LDB4N2YsMHgxMywweDc3LDB4YTksMHhjMywweDMwLDB4NDQKJFNoZWxsY29kZTY0ICs9IDB4MzAsMHg5LDB4M2YsMHgzYSwweDYyLDB4YTcsMHgyMSwweGM1LDB4NWQsMHhmYwokU2hlbGxjb2RlNjQgKz0gMHg1MywweDcsMHg2MSwweDRhLDB4ZTMsMHg2OSwweGNlLDB4NzQsMHhmLDB4ZQokU2hlbGxjb2RlNjQgKz0gMHhlYiwweGQ5LDB4MjEsMHhmLDB4ZGUsMHg5LDB4MTYsMHg0NywweGIwLDB4ZWQKJFNoZWxsY29kZTY0ICs9IDB4ODAsMHhmYywweDg0LDB4M2UsMHg1YywweDQ5LDB4ZTUsMHhmOSwweDEsMHg4NAokU2hlbGxjb2RlNjQgKz0gMHg5YywweGJlLDB4ZGUsMHhjZSwweDYwLDB4OGIsMHgxLDB4Y2MsMHgxOSwweGY1CiRTaGVsbGNvZGU2NCArPSAweDJhLDB4MjEsMHgyOCwweDhhLDB4ZDEsMHhkNCwweDE3LDB4N2QsMHg0NiwweDIKJFNoZWxsY29kZTY0ICs9IDB4ZWIsMHhjYiwweDIxLDB4Y2QsMHg5ZCwweGU1LDB4YmQsMHgxMCwweDI4LDB4NzQKJFNoZWxsY29kZTY0ICs9IDB4YzgsMHhjNSwweDE3LDB4MSwweGQ2LDB4ZSwweDYxLDB4NWQsMHg0YywweGI1CiRTaGVsbGNvZGU2NCArPSAweDU1LDB4N2QsMHg2ZiwweDg2LDB4Y2MsMHhjYSwweGMwLDB4NGQsMHg5MSwweDc0CiRTaGVsbGNvZGU2NCArPSAweDVmLDB4ODcsMHg1OCwweDZiLDB4NzQsMHg3NSwweGQwLDB4MzYsMHgxMiwweDYyCiRTaGVsbGNvZGU2NCArPSAweDY4LDB4Y2UsMHgzOCwweDU1LDB4ZTksMHhlZCwweDYsMHgyLDB4ZWIsMHhjYgokU2hlbGxjb2RlNjQgKz0gMHgyNSwweGNkLDB4OWQsMHhlNSwweDM4LDB4NywweGViLDB4ODcsMHg0OSwweGMwCiRTaGVsbGNvZGU2NCArPSAweDE3LDB4NzUsMHg0MiwweGYsMHg2MSwweDViLDB4NDAsMHhmLDB4OTgsMHhiZAokU2hlbGxjb2RlNjQgKz0gMHgxNiwweDQ3LDB4YjAsMHhjYSwweDU5LDB4YzUsMHhjNCwweDZiLDB4NywweDFjCiRTaGVsbGNvZGU2NCArPSAweDIxLDB4ZDMsMHg0MCwweGRkLDB4ZGQsMHg2ZiwweDE2LDB4YzUsMHg4YywweGFiCiRTaGVsbGNvZGU2NCArPSAweDQwLDB4ZDYsMHg2MywweGQ1LDB4NiwweDcsMHgzOSwweGQxLDB4NDksMHhmCiRTaGVsbGNvZGU2NCArPSAweDhlLDB4ZGMsMHgxNSwweGI5LDB4OWYsMHg3NCwweDVjLDB4Y2QsMHgyMiwweDQyCiRTaGVsbGNvZGU2NCArPSAweDJkLDB4NzQsMHgzZiwweGI4LDB4MzMsMHg4NCwweDljLDB4NzQsMHg4LDB4ZgokU2hlbGxjb2RlNjQgKz0gMHhlOSwweDZkLDB4NDksMHg1LDB4NzAsMHg5NSwweDVmLDB4NDYsMHg2MCwweGMyCiRTaGVsbGNvZGU2NCArPSAweDg4LDB4NjEsMHhkNCwweDQsMHg5ZSwweDE2LDB4MzAsMHhjMiwweGM2LDB4NDAKJFNoZWxsY29kZTY0ICs9IDB4OWUsMHgzNSwweDRmLDB4MWEsMHgyMSwweGRmLDB4NDgsMHhkLDB4NzgsMHg3OQokU2hlbGxjb2RlNjQgKz0gMHhkNywweGI3LDB4MjEsMHgzMSwweDRkLDB4ZjMsMHhiYSwweDMyLDB4YTEsMHg5MwokU2hlbGxjb2RlNjQgKz0gMHgyYywweDIsMHhlYiwweGVjLDB4OWQsMHgzNCwweDVlLDB4NDYsMHgzOSwweGNhCiRTaGVsbGNvZGU2NCArPSAweGJiLDB4YWQsMHgxYywweDVlLDB4NWUsMHhiOSwweGI1LDB4ZTEsMHgzLDB4ZGQKJFNoZWxsY29kZTY0ICs9IDB4Y2MsMHg2NSwweDEzLDB4NzcsMHhhOSwweGM2LDB4MzAsMHg0NCwweGQ0LDB4Y2EKJFNoZWxsY29kZTY0ICs9IDB4OWUsMHhlLDB4ZTksMHg0OSwweDQwLDB4M2UsMHg3NiwweDNhLDB4ODEsMHhhNgokU2hlbGxjb2RlNjQgKz0gMHg5ZiwweDVlLDB4NDksMHhkLDB4NWIsMHg1ZiwweDRlLDB4NywweDM4LDB4YzcKJFNoZWxsY29kZTY0ICs9IDB4ODgsMHg2NiwweGQ0LDB4YmMsMHhhNywweDcsMHhkYSwweDQ5LDB4ZGEsMHhiMwokU2hlbGxjb2RlNjQgKz0gMHhmYiwweGNhLDB4OGIsMHhlLDB4NTEsMHg1OSwweDQ5LDB4ZCwweDY1LDB4NzQKJFNoZWxsY29kZTY0ICs9IDB4ZTQsMHhmMSwweDg5LDB4YjMsMHhmZSwweDdiLDB4NDksMHg3OCwweDZmLDB4ODYKJFNoZWxsY29kZTY0ICs9IDB4MjgsMHhiYSwweGQzLDB4Y2MsMHgxNSwweGNjLDB4MWYsMHhmYywweDE0LDB4NjcKJFNoZWxsY29kZTY0ICs9IDB4M2EsMHg2NSwweDYzLDB4ZTAsMHgxNiwweGNmLDB4OTksMHhjMywweDg4LDB4NDMKJFNoZWxsY29kZTY0ICs9IDB4ZGQsMHg4ZiwweDJiLDB4MjgsMHgyZCwweGVhLDB4ZmUsMHg1MSwweGQ0LDB4YjQKJFNoZWxsY29kZTY0ICs9IDB4OWEsMHhmNiwweDYyLDB4OGIsMHgxLDB4Y2MsMHgxZiwweGQ5LDB4NGUsMHhlCiRTaGVsbGNvZGU2NCArPSAweGU5LDB4NjksMHg0YywweGI1LDB4NTUsMHg1ZiwweDVhLDB4NywweDM4LDB4YzMKJFNoZWxsY29kZTY0ICs9IDB4ODgsMHg3ZCwweGRkLDB4OGYsMHg1YywweDlmLDB4YTgsMHhkNCwweGZlLDB4NTEKJFNoZWxsY29kZTY0ICs9IDB4ZDQsMHhiNiwweDlhLDB4NjYsMHgzZSwweDIsMHhmNywweGVlLDB4ZGMsMHg3NAokU2hlbGxjb2RlNjQgKz0gMHg3LDB4MmUsMHg2MCwweDliLDB4MSwweDg0LDB4ZGQsMHg2ZCwweDE2LDB4Y2YKJFNoZWxsY29kZTY0ICs9IDB4OTIsMHhjMywweDMwLDB4NGQsMHhkZCwweDhmLDB4NiwweGUyLDB4MzMsMHg2ZQokU2hlbGxjb2RlNjQgKz0gMHhmZSwweDUxLDB4ZDQsMHhiYywweDlkLDB4ZiwweGU5LDB4NGMsMHg0YywweGI1CiRTaGVsbGNvZGU2NCArPSAweDU1LDB4N2MsMHhkNywweGI2LDB4MjgsMHgyLDB4ZGIsMHhjYywweDE1LDB4Y2MKJFNoZWxsY29kZTY0ICs9IDB4MWYsMHhmYywweDYyLDB4NTIsMHhjOSwweGRiLDB4NjMsMHhlMCwweDE2LDB4NDcKJFNoZWxsY29kZTY0ICs9IDB4YTMsMHhjMywweDI4LDB4NDIsMHhkNCwweGIwLDB4YTgsMHgzMywweDgxLDB4Y2EKJFNoZWxsY29kZTY0ICs9IDB4ZmUsMHg2MywweGM0LDB4MzUsMHg1ZSwweDQ2LDB4NjAKICAgIH0KCiAgICBpZiAoICRQU0JvdW5kUGFyYW1ldGVyc1snUHJvY2Vzc0lEJ10gKQogICAgewogICAgICAgICMgSW5qZWN0IHNoZWxsY29kZSBpbnRvIHRoZSBzcGVjaWZpZWQgcHJvY2VzcyBJRAogICAgICAgICRPcGVuUHJvY2Vzc0FkZHIgPSBHZXQtUHJvY0FkZHJlc3Mga2VybmVsMzIuZGxsIE9wZW5Qcm9jZXNzCiAgICAgICAgJE9wZW5Qcm9jZXNzRGVsZWdhdGUgPSBHZXQtRGVsZWdhdGVUeXBlIEAoW1VJbnQzMl0sIFtCb29sXSwgW1VJbnQzMl0pIChbSW50UHRyXSkKICAgICAgICAkT3BlblByb2Nlc3MgPSBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXREZWxlZ2F0ZUZvckZ1bmN0aW9uUG9pbnRlcigkT3BlblByb2Nlc3NBZGRyLCAkT3BlblByb2Nlc3NEZWxlZ2F0ZSkKICAgICAgICAkVmlydHVhbEFsbG9jRXhBZGRyID0gR2V0LVByb2NBZGRyZXNzIGtlcm5lbDMyLmRsbCBWaXJ0dWFsQWxsb2NFeAogICAgICAgICRWaXJ0dWFsQWxsb2NFeERlbGVnYXRlID0gR2V0LURlbGVnYXRlVHlwZSBAKFtJbnRQdHJdLCBbSW50UHRyXSwgW1VpbnQzMl0sIFtVSW50MzJdLCBbVUludDMyXSkgKFtJbnRQdHJdKQogICAgICAgICRWaXJ0dWFsQWxsb2NFeCA9IFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldERlbGVnYXRlRm9yRnVuY3Rpb25Qb2ludGVyKCRWaXJ0dWFsQWxsb2NFeEFkZHIsICRWaXJ0dWFsQWxsb2NFeERlbGVnYXRlKQogICAgICAgICRXcml0ZVByb2Nlc3NNZW1vcnlBZGRyID0gR2V0LVByb2NBZGRyZXNzIGtlcm5lbDMyLmRsbCBXcml0ZVByb2Nlc3NNZW1vcnkKICAgICAgICAkV3JpdGVQcm9jZXNzTWVtb3J5RGVsZWdhdGUgPSBHZXQtRGVsZWdhdGVUeXBlIEAoW0ludFB0cl0sIFtJbnRQdHJdLCBbQnl0ZVtdXSwgW1VJbnQzMl0sIFtVSW50MzJdLk1ha2VCeVJlZlR5cGUoKSkgKFtCb29sXSkKICAgICAgICAkV3JpdGVQcm9jZXNzTWVtb3J5ID0gW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0RGVsZWdhdGVGb3JGdW5jdGlvblBvaW50ZXIoJFdyaXRlUHJvY2Vzc01lbW9yeUFkZHIsICRXcml0ZVByb2Nlc3NNZW1vcnlEZWxlZ2F0ZSkKICAgICAgICAkQ3JlYXRlUmVtb3RlVGhyZWFkQWRkciA9IEdldC1Qcm9jQWRkcmVzcyBrZXJuZWwzMi5kbGwgQ3JlYXRlUmVtb3RlVGhyZWFkCiAgICAgICAgJENyZWF0ZVJlbW90ZVRocmVhZERlbGVnYXRlID0gR2V0LURlbGVnYXRlVHlwZSBAKFtJbnRQdHJdLCBbSW50UHRyXSwgW1VJbnQzMl0sIFtJbnRQdHJdLCBbSW50UHRyXSwgW1VJbnQzMl0sIFtJbnRQdHJdKSAoW0ludFB0cl0pCiAgICAgICAgJENyZWF0ZVJlbW90ZVRocmVhZCA9IFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldERlbGVnYXRlRm9yRnVuY3Rpb25Qb2ludGVyKCRDcmVhdGVSZW1vdGVUaHJlYWRBZGRyLCAkQ3JlYXRlUmVtb3RlVGhyZWFkRGVsZWdhdGUpCiAgICAgICAgJENsb3NlSGFuZGxlQWRkciA9IEdldC1Qcm9jQWRkcmVzcyBrZXJuZWwzMi5kbGwgQ2xvc2VIYW5kbGUKICAgICAgICAkQ2xvc2VIYW5kbGVEZWxlZ2F0ZSA9IEdldC1EZWxlZ2F0ZVR5cGUgQChbSW50UHRyXSkgKFtCb29sXSkKICAgICAgICAkQ2xvc2VIYW5kbGUgPSBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXREZWxlZ2F0ZUZvckZ1bmN0aW9uUG9pbnRlcigkQ2xvc2VIYW5kbGVBZGRyLCAkQ2xvc2VIYW5kbGVEZWxlZ2F0ZSkKICAgIAogICAgICAgIFdyaXRlLVZlcmJvc2UgIkluamVjdGluZyBzaGVsbGNvZGUgaW50byBQSUQ6ICRQcm9jZXNzSWQiCiAgICAgICAgCiAgICAgICAgaWYgKCAkRm9yY2UgLW9yICRwc0NtZGxldC5TaG91bGRDb250aW51ZSggJ0RvIHlvdSB3aXNoIHRvIGNhcnJ5IG91dCB5b3VyIGV2aWwgcGxhbnM/JywKICAgICAgICAgICAgICAgICAiSW5qZWN0aW5nIHNoZWxsY29kZSBpbmplY3RpbmcgaW50byAkKChHZXQtUHJvY2VzcyAtSWQgJFByb2Nlc3NJZCkuUHJvY2Vzc05hbWUpICgkUHJvY2Vzc0lkKSEiICkgKQogICAgICAgIHsKICAgICAgICAgICAgSW5qZWN0LVJlbW90ZVNoZWxsY29kZSAkUHJvY2Vzc0lkCiAgICAgICAgfQogICAgfQogICAgZWxzZQogICAgewogICAgICAgICMgSW5qZWN0IHNoZWxsY29kZSBpbnRvIHRoZSBjdXJyZW50bHkgcnVubmluZyBQb3dlclNoZWxsIHByb2Nlc3MKICAgICAgICAkVmlydHVhbEFsbG9jQWRkciA9IEdldC1Qcm9jQWRkcmVzcyBrZXJuZWwzMi5kbGwgVmlydHVhbEFsbG9jCiAgICAgICAgJFZpcnR1YWxBbGxvY0RlbGVnYXRlID0gR2V0LURlbGVnYXRlVHlwZSBAKFtJbnRQdHJdLCBbVUludDMyXSwgW1VJbnQzMl0sIFtVSW50MzJdKSAoW0ludFB0cl0pCiAgICAgICAgJFZpcnR1YWxBbGxvYyA9IFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldERlbGVnYXRlRm9yRnVuY3Rpb25Qb2ludGVyKCRWaXJ0dWFsQWxsb2NBZGRyLCAkVmlydHVhbEFsbG9jRGVsZWdhdGUpCiAgICAgICAgJFZpcnR1YWxGcmVlQWRkciA9IEdldC1Qcm9jQWRkcmVzcyBrZXJuZWwzMi5kbGwgVmlydHVhbEZyZWUKICAgICAgICAkVmlydHVhbEZyZWVEZWxlZ2F0ZSA9IEdldC1EZWxlZ2F0ZVR5cGUgQChbSW50UHRyXSwgW1VpbnQzMl0sIFtVSW50MzJdKSAoW0Jvb2xdKQogICAgICAgICRWaXJ0dWFsRnJlZSA9IFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldERlbGVnYXRlRm9yRnVuY3Rpb25Qb2ludGVyKCRWaXJ0dWFsRnJlZUFkZHIsICRWaXJ0dWFsRnJlZURlbGVnYXRlKQogICAgICAgICRDcmVhdGVUaHJlYWRBZGRyID0gR2V0LVByb2NBZGRyZXNzIGtlcm5lbDMyLmRsbCBDcmVhdGVUaHJlYWQKICAgICAgICAkQ3JlYXRlVGhyZWFkRGVsZWdhdGUgPSBHZXQtRGVsZWdhdGVUeXBlIEAoW0ludFB0cl0sIFtVSW50MzJdLCBbSW50UHRyXSwgW0ludFB0cl0sIFtVSW50MzJdLCBbSW50UHRyXSkgKFtJbnRQdHJdKQogICAgICAgICRDcmVhdGVUaHJlYWQgPSBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXREZWxlZ2F0ZUZvckZ1bmN0aW9uUG9pbnRlcigkQ3JlYXRlVGhyZWFkQWRkciwgJENyZWF0ZVRocmVhZERlbGVnYXRlKQogICAgICAgICRXYWl0Rm9yU2luZ2xlT2JqZWN0QWRkciA9IEdldC1Qcm9jQWRkcmVzcyBrZXJuZWwzMi5kbGwgV2FpdEZvclNpbmdsZU9iamVjdAogICAgICAgICRXYWl0Rm9yU2luZ2xlT2JqZWN0RGVsZWdhdGUgPSBHZXQtRGVsZWdhdGVUeXBlIEAoW0ludFB0cl0sIFtJbnQzMl0pIChbSW50XSkKICAgICAgICAkV2FpdEZvclNpbmdsZU9iamVjdCA9IFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldERlbGVnYXRlRm9yRnVuY3Rpb25Qb2ludGVyKCRXYWl0Rm9yU2luZ2xlT2JqZWN0QWRkciwgJFdhaXRGb3JTaW5nbGVPYmplY3REZWxlZ2F0ZSkKICAgICAgICAKICAgICAgICBXcml0ZS1WZXJib3NlICJJbmplY3Rpbmcgc2hlbGxjb2RlIGludG8gUG93ZXJTaGVsbCIKICAgICAgICAKICAgICAgICBpZiAoICRGb3JjZSAtb3IgJHBzQ21kbGV0LlNob3VsZENvbnRpbnVlKCAnRG8geW91IHdpc2ggdG8gY2Fycnkgb3V0IHlvdXIgZXZpbCBwbGFucz8nLAogICAgICAgICAgICAgICAgICJJbmplY3Rpbmcgc2hlbGxjb2RlIGludG8gdGhlIHJ1bm5pbmcgUG93ZXJTaGVsbCBwcm9jZXNzISIgKSApCiAgICAgICAgewogICAgICAgICAgICBJbmplY3QtTG9jYWxTaGVsbGNvZGUKICAgICAgICB9CiAgICB9ICAgCn0K
