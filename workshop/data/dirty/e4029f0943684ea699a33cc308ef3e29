powerview.ps1,d2a43d1499576131616c264a0a8f9b1c,Scan result is 32768. IsMalware: 1,I3JlcXVpcmVzIC12ZXJzaW9uIDIKCjwjCgogICAgUG93ZXJTcGxvaXQgRmlsZTogUG93ZXJWaWV3LnBzMQogICAgQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpCiAgICBMaWNlbnNlOiBCU0QgMy1DbGF1c2UKICAgIFJlcXVpcmVkIERlcGVuZGVuY2llczogTm9uZQogICAgT3B0aW9uYWwgRGVwZW5kZW5jaWVzOiBOb25lCgojPgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIwojIFBTUmVmbGVjdCBjb2RlIGZvciBXaW5kb3dzIEFQSSBhY2Nlc3MKIyBBdXRob3I6IEBtYXR0aWZlc3RhdGlvbgojICAgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL21hdHRpZmVzdGF0aW9uL1BTUmVmbGVjdC9tYXN0ZXIvUFNSZWZsZWN0LnBzbTEKIwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKZnVuY3Rpb24gTmV3LUluTWVtb3J5TW9kdWxlCnsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBDcmVhdGVzIGFuIGluLW1lbW9yeSBhc3NlbWJseSBhbmQgbW9kdWxlCgogICAgICAgIEF1dGhvcjogTWF0dGhldyBHcmFlYmVyIChAbWF0dGlmZXN0YXRpb24pCiAgICAgICAgTGljZW5zZTogQlNEIDMtQ2xhdXNlCiAgICAgICAgUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBOb25lCiAgICAgICAgT3B0aW9uYWwgRGVwZW5kZW5jaWVzOiBOb25lCgogICAgLkRFU0NSSVBUSU9OCgogICAgICAgIFdoZW4gZGVmaW5pbmcgY3VzdG9tIGVudW1zLCBzdHJ1Y3RzLCBhbmQgdW5tYW5hZ2VkIGZ1bmN0aW9ucywgaXQgaXMKICAgICAgICBuZWNlc3NhcnkgdG8gYXNzb2NpYXRlIHRvIGFuIGFzc2VtYmx5IG1vZHVsZS4gVGhpcyBoZWxwZXIgZnVuY3Rpb24KICAgICAgICBjcmVhdGVzIGFuIGluLW1lbW9yeSBtb2R1bGUgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHRoZSAnZW51bScsCiAgICAgICAgJ3N0cnVjdCcsIGFuZCBBZGQtV2luMzJUeXBlIGZ1bmN0aW9ucy4KCiAgICAuUEFSQU1FVEVSIE1vZHVsZU5hbWUKCiAgICAgICAgU3BlY2lmaWVzIHRoZSBkZXNpcmVkIG5hbWUgZm9yIHRoZSBpbi1tZW1vcnkgYXNzZW1ibHkgYW5kIG1vZHVsZS4gSWYKICAgICAgICBNb2R1bGVOYW1lIGlzIG5vdCBwcm92aWRlZCwgaXQgd2lsbCBkZWZhdWx0IHRvIGEgR1VJRC4KCiAgICAuRVhBTVBMRQoKICAgICAgICAkTW9kdWxlID0gTmV3LUluTWVtb3J5TW9kdWxlIC1Nb2R1bGVOYW1lIFdpbjMyCiM+CgogICAgUGFyYW0KICAgICgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRNb2R1bGVOYW1lID0gW0d1aWRdOjpOZXdHdWlkKCkuVG9TdHJpbmcoKQogICAgKQoKICAgICRMb2FkZWRBc3NlbWJsaWVzID0gW0FwcERvbWFpbl06OkN1cnJlbnREb21haW4uR2V0QXNzZW1ibGllcygpCgogICAgRm9yRWFjaCAoJEFzc2VtYmx5IGluICRMb2FkZWRBc3NlbWJsaWVzKSB7CiAgICAgICAgaWYgKCRBc3NlbWJseS5GdWxsTmFtZSAtYW5kICgkQXNzZW1ibHkuRnVsbE5hbWUuU3BsaXQoJywnKVswXSAtZXEgJE1vZHVsZU5hbWUpKSB7CiAgICAgICAgICAgIHJldHVybiAkQXNzZW1ibHkKICAgICAgICB9CiAgICB9CgogICAgJER5bkFzc2VtYmx5ID0gTmV3LU9iamVjdCBSZWZsZWN0aW9uLkFzc2VtYmx5TmFtZSgkTW9kdWxlTmFtZSkKICAgICREb21haW4gPSBbQXBwRG9tYWluXTo6Q3VycmVudERvbWFpbgogICAgJEFzc2VtYmx5QnVpbGRlciA9ICREb21haW4uRGVmaW5lRHluYW1pY0Fzc2VtYmx5KCREeW5Bc3NlbWJseSwgJ1J1bicpCiAgICAkTW9kdWxlQnVpbGRlciA9ICRBc3NlbWJseUJ1aWxkZXIuRGVmaW5lRHluYW1pY01vZHVsZSgkTW9kdWxlTmFtZSwgJEZhbHNlKQoKICAgIHJldHVybiAkTW9kdWxlQnVpbGRlcgp9CgoKIyBBIGhlbHBlciBmdW5jdGlvbiB1c2VkIHRvIHJlZHVjZSB0eXBpbmcgd2hpbGUgZGVmaW5pbmcgZnVuY3Rpb24KIyBwcm90b3R5cGVzIGZvciBBZGQtV2luMzJUeXBlLgpmdW5jdGlvbiBmdW5jCnsKICAgIFBhcmFtCiAgICAoCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREbGxOYW1lLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMSwgTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZ1bmN0aW9uTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDIsIE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbVHlwZV0KICAgICAgICAkUmV0dXJuVHlwZSwKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDMpXQogICAgICAgIFtUeXBlW11dCiAgICAgICAgJFBhcmFtZXRlclR5cGVzLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gNCldCiAgICAgICAgW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkNhbGxpbmdDb252ZW50aW9uXQogICAgICAgICROYXRpdmVDYWxsaW5nQ29udmVudGlvbiwKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDUpXQogICAgICAgIFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5DaGFyU2V0XQogICAgICAgICRDaGFyc2V0LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRTZXRMYXN0RXJyb3IKICAgICkKCiAgICAkUHJvcGVydGllcyA9IEB7CiAgICAgICAgRGxsTmFtZSA9ICREbGxOYW1lCiAgICAgICAgRnVuY3Rpb25OYW1lID0gJEZ1bmN0aW9uTmFtZQogICAgICAgIFJldHVyblR5cGUgPSAkUmV0dXJuVHlwZQogICAgfQoKICAgIGlmICgkUGFyYW1ldGVyVHlwZXMpIHsgJFByb3BlcnRpZXNbJ1BhcmFtZXRlclR5cGVzJ10gPSAkUGFyYW1ldGVyVHlwZXMgfQogICAgaWYgKCROYXRpdmVDYWxsaW5nQ29udmVudGlvbikgeyAkUHJvcGVydGllc1snTmF0aXZlQ2FsbGluZ0NvbnZlbnRpb24nXSA9ICROYXRpdmVDYWxsaW5nQ29udmVudGlvbiB9CiAgICBpZiAoJENoYXJzZXQpIHsgJFByb3BlcnRpZXNbJ0NoYXJzZXQnXSA9ICRDaGFyc2V0IH0KICAgIGlmICgkU2V0TGFzdEVycm9yKSB7ICRQcm9wZXJ0aWVzWydTZXRMYXN0RXJyb3InXSA9ICRTZXRMYXN0RXJyb3IgfQoKICAgIE5ldy1PYmplY3QgUFNPYmplY3QgLVByb3BlcnR5ICRQcm9wZXJ0aWVzCn0KCgpmdW5jdGlvbiBBZGQtV2luMzJUeXBlCnsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBDcmVhdGVzIGEgLk5FVCB0eXBlIGZvciBhbiB1bm1hbmFnZWQgV2luMzIgZnVuY3Rpb24uCgogICAgICAgIEF1dGhvcjogTWF0dGhldyBHcmFlYmVyIChAbWF0dGlmZXN0YXRpb24pCiAgICAgICAgTGljZW5zZTogQlNEIDMtQ2xhdXNlCiAgICAgICAgUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBOb25lCiAgICAgICAgT3B0aW9uYWwgRGVwZW5kZW5jaWVzOiBmdW5jCgogICAgLkRFU0NSSVBUSU9OCgogICAgICAgIEFkZC1XaW4zMlR5cGUgZW5hYmxlcyB5b3UgdG8gZWFzaWx5IGludGVyYWN0IHdpdGggdW5tYW5hZ2VkIChpLmUuCiAgICAgICAgV2luMzIgdW5tYW5hZ2VkKSBmdW5jdGlvbnMgaW4gUG93ZXJTaGVsbC4gQWZ0ZXIgcHJvdmlkaW5nCiAgICAgICAgQWRkLVdpbjMyVHlwZSB3aXRoIGEgZnVuY3Rpb24gc2lnbmF0dXJlLCBhIC5ORVQgdHlwZSBpcyBjcmVhdGVkCiAgICAgICAgdXNpbmcgcmVmbGVjdGlvbiAoaS5lLiBjc2MuZXhlIGlzIG5ldmVyIGNhbGxlZCBsaWtlIHdpdGggQWRkLVR5cGUpLgoKICAgICAgICBUaGUgJ2Z1bmMnIGhlbHBlciBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byByZWR1Y2UgdHlwaW5nIHdoZW4gZGVmaW5pbmcKICAgICAgICBtdWx0aXBsZSBmdW5jdGlvbiBkZWZpbml0aW9ucy4KCiAgICAuUEFSQU1FVEVSIERsbE5hbWUKCiAgICAgICAgVGhlIG5hbWUgb2YgdGhlIERMTC4KCiAgICAuUEFSQU1FVEVSIEZ1bmN0aW9uTmFtZQoKICAgICAgICBUaGUgbmFtZSBvZiB0aGUgdGFyZ2V0IGZ1bmN0aW9uLgoKICAgIC5QQVJBTUVURVIgUmV0dXJuVHlwZQoKICAgICAgICBUaGUgcmV0dXJuIHR5cGUgb2YgdGhlIGZ1bmN0aW9uLgoKICAgIC5QQVJBTUVURVIgUGFyYW1ldGVyVHlwZXMKCiAgICAgICAgVGhlIGZ1bmN0aW9uIHBhcmFtZXRlcnMuCgogICAgLlBBUkFNRVRFUiBOYXRpdmVDYWxsaW5nQ29udmVudGlvbgoKICAgICAgICBTcGVjaWZpZXMgdGhlIG5hdGl2ZSBjYWxsaW5nIGNvbnZlbnRpb24gb2YgdGhlIGZ1bmN0aW9uLiBEZWZhdWx0cyB0bwogICAgICAgIHN0ZGNhbGwuCgogICAgLlBBUkFNRVRFUiBDaGFyc2V0CgogICAgICAgIElmIHlvdSBuZWVkIHRvIGV4cGxpY2l0bHkgY2FsbCBhbiAnQScgb3IgJ1cnIFdpbjMyIGZ1bmN0aW9uLCB5b3UgY2FuCiAgICAgICAgc3BlY2lmeSB0aGUgY2hhcmFjdGVyIHNldC4KCiAgICAuUEFSQU1FVEVSIFNldExhc3RFcnJvcgoKICAgICAgICBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY2FsbGVlIGNhbGxzIHRoZSBTZXRMYXN0RXJyb3IgV2luMzIgQVBJCiAgICAgICAgZnVuY3Rpb24gYmVmb3JlIHJldHVybmluZyBmcm9tIHRoZSBhdHRyaWJ1dGVkIG1ldGhvZC4KCiAgICAuUEFSQU1FVEVSIE1vZHVsZQoKICAgICAgICBUaGUgaW4tbWVtb3J5IG1vZHVsZSB0aGF0IHdpbGwgaG9zdCB0aGUgZnVuY3Rpb25zLiBVc2UKICAgICAgICBOZXctSW5NZW1vcnlNb2R1bGUgdG8gZGVmaW5lIGFuIGluLW1lbW9yeSBtb2R1bGUuCgogICAgLlBBUkFNRVRFUiBOYW1lc3BhY2UKCiAgICAgICAgQW4gb3B0aW9uYWwgbmFtZXNwYWNlIHRvIHByZXBlbmQgdG8gdGhlIHR5cGUuIEFkZC1XaW4zMlR5cGUgZGVmYXVsdHMKICAgICAgICB0byBhIG5hbWVzcGFjZSBjb25zaXN0aW5nIG9ubHkgb2YgdGhlIG5hbWUgb2YgdGhlIERMTC4KCiAgICAuRVhBTVBMRQoKICAgICAgICAkTW9kID0gTmV3LUluTWVtb3J5TW9kdWxlIC1Nb2R1bGVOYW1lIFdpbjMyCgogICAgICAgICRGdW5jdGlvbkRlZmluaXRpb25zID0gQCgKICAgICAgICAgIChmdW5jIGtlcm5lbDMyIEdldFByb2NBZGRyZXNzIChbSW50UHRyXSkgQChbSW50UHRyXSwgW1N0cmluZ10pIC1DaGFyc2V0IEFuc2kgLVNldExhc3RFcnJvciksCiAgICAgICAgICAoZnVuYyBrZXJuZWwzMiBHZXRNb2R1bGVIYW5kbGUgKFtJbnRwdHJdKSBAKFtTdHJpbmddKSAtU2V0TGFzdEVycm9yKSwKICAgICAgICAgIChmdW5jIG50ZGxsIFJ0bEdldEN1cnJlbnRQZWIgKFtJbnRQdHJdKSBAKCkpCiAgICAgICAgKQoKICAgICAgICAkVHlwZXMgPSAkRnVuY3Rpb25EZWZpbml0aW9ucyB8IEFkZC1XaW4zMlR5cGUgLU1vZHVsZSAkTW9kIC1OYW1lc3BhY2UgJ1dpbjMyJwogICAgICAgICRLZXJuZWwzMiA9ICRUeXBlc1sna2VybmVsMzInXQogICAgICAgICROdGRsbCA9ICRUeXBlc1snbnRkbGwnXQogICAgICAgICROdGRsbDo6UnRsR2V0Q3VycmVudFBlYigpCiAgICAgICAgJG50ZGxsYmFzZSA9ICRLZXJuZWwzMjo6R2V0TW9kdWxlSGFuZGxlKCdudGRsbCcpCiAgICAgICAgJEtlcm5lbDMyOjpHZXRQcm9jQWRkcmVzcygkbnRkbGxiYXNlLCAnUnRsR2V0Q3VycmVudFBlYicpCgogICAgLk5PVEVTCgogICAgICAgIEluc3BpcmVkIGJ5IExlZSBIb2xtZXMnIEludm9rZS1XaW5kb3dzQXBpIGh0dHA6Ly9wb3NoY29kZS5vcmcvMjE4OQoKICAgICAgICBXaGVuIGRlZmluaW5nIG11bHRpcGxlIGZ1bmN0aW9uIHByb3RvdHlwZXMsIGl0IGlzIGlkZWFsIHRvIHByb3ZpZGUKICAgICAgICBBZGQtV2luMzJUeXBlIHdpdGggYW4gYXJyYXkgb2YgZnVuY3Rpb24gc2lnbmF0dXJlcy4gVGhhdCB3YXksIHRoZXkKICAgICAgICBhcmUgYWxsIGluY29ycG9yYXRlZCBpbnRvIHRoZSBzYW1lIGluLW1lbW9yeSBtb2R1bGUuCiM+CgogICAgW091dHB1dFR5cGUoW0hhc2h0YWJsZV0pXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREbGxOYW1lLAoKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZ1bmN0aW9uTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbVHlwZV0KICAgICAgICAkUmV0dXJuVHlwZSwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtUeXBlW11dCiAgICAgICAgJFBhcmFtZXRlclR5cGVzLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkNhbGxpbmdDb252ZW50aW9uXQogICAgICAgICROYXRpdmVDYWxsaW5nQ29udmVudGlvbiA9IFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5DYWxsaW5nQ29udmVudGlvbl06OlN0ZENhbGwsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuQ2hhclNldF0KICAgICAgICAkQ2hhcnNldCA9IFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5DaGFyU2V0XTo6QXV0bywKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFNldExhc3RFcnJvciwKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHsoJF8gLWlzIFtSZWZsZWN0aW9uLkVtaXQuTW9kdWxlQnVpbGRlcl0pIC1vciAoJF8gLWlzIFtSZWZsZWN0aW9uLkFzc2VtYmx5XSl9KV0KICAgICAgICAkTW9kdWxlLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsKCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTmFtZXNwYWNlID0gJycKICAgICkKCiAgICBCRUdJTgogICAgewogICAgICAgICRUeXBlSGFzaCA9IEB7fQogICAgfQoKICAgIFBST0NFU1MKICAgIHsKICAgICAgICBpZiAoJE1vZHVsZSAtaXMgW1JlZmxlY3Rpb24uQXNzZW1ibHldKQogICAgICAgIHsKICAgICAgICAgICAgaWYgKCROYW1lc3BhY2UpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRUeXBlSGFzaFskRGxsTmFtZV0gPSAkTW9kdWxlLkdldFR5cGUoIiROYW1lc3BhY2UuJERsbE5hbWUiKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJFR5cGVIYXNoWyREbGxOYW1lXSA9ICRNb2R1bGUuR2V0VHlwZSgkRGxsTmFtZSkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICAjIERlZmluZSBvbmUgdHlwZSBmb3IgZWFjaCBETEwKICAgICAgICAgICAgaWYgKCEkVHlwZUhhc2guQ29udGFpbnNLZXkoJERsbE5hbWUpKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoJE5hbWVzcGFjZSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAkVHlwZUhhc2hbJERsbE5hbWVdID0gJE1vZHVsZS5EZWZpbmVUeXBlKCIkTmFtZXNwYWNlLiREbGxOYW1lIiwgJ1B1YmxpYyxCZWZvcmVGaWVsZEluaXQnKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICRUeXBlSGFzaFskRGxsTmFtZV0gPSAkTW9kdWxlLkRlZmluZVR5cGUoJERsbE5hbWUsICdQdWJsaWMsQmVmb3JlRmllbGRJbml0JykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgJE1ldGhvZCA9ICRUeXBlSGFzaFskRGxsTmFtZV0uRGVmaW5lTWV0aG9kKAogICAgICAgICAgICAgICAgJEZ1bmN0aW9uTmFtZSwKICAgICAgICAgICAgICAgICdQdWJsaWMsU3RhdGljLFBpbnZva2VJbXBsJywKICAgICAgICAgICAgICAgICRSZXR1cm5UeXBlLAogICAgICAgICAgICAgICAgJFBhcmFtZXRlclR5cGVzKQoKICAgICAgICAgICAgIyBNYWtlIGVhY2ggQnlSZWYgcGFyYW1ldGVyIGFuIE91dCBwYXJhbWV0ZXIKICAgICAgICAgICAgJGkgPSAxCiAgICAgICAgICAgIEZvckVhY2goJFBhcmFtZXRlciBpbiAkUGFyYW1ldGVyVHlwZXMpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmICgkUGFyYW1ldGVyLklzQnlSZWYpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgW3ZvaWRdICRNZXRob2QuRGVmaW5lUGFyYW1ldGVyKCRpLCAnT3V0JywgJE51bGwpCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJGkrKwogICAgICAgICAgICB9CgogICAgICAgICAgICAkRGxsSW1wb3J0ID0gW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkRsbEltcG9ydEF0dHJpYnV0ZV0KICAgICAgICAgICAgJFNldExhc3RFcnJvckZpZWxkID0gJERsbEltcG9ydC5HZXRGaWVsZCgnU2V0TGFzdEVycm9yJykKICAgICAgICAgICAgJENhbGxpbmdDb252ZW50aW9uRmllbGQgPSAkRGxsSW1wb3J0LkdldEZpZWxkKCdDYWxsaW5nQ29udmVudGlvbicpCiAgICAgICAgICAgICRDaGFyc2V0RmllbGQgPSAkRGxsSW1wb3J0LkdldEZpZWxkKCdDaGFyU2V0JykKICAgICAgICAgICAgaWYgKCRTZXRMYXN0RXJyb3IpIHsgJFNMRVZhbHVlID0gJFRydWUgfSBlbHNlIHsgJFNMRVZhbHVlID0gJEZhbHNlIH0KCiAgICAgICAgICAgICMgRXF1aXZhbGVudCB0byBDIyB2ZXJzaW9uIG9mIFtEbGxJbXBvcnQoRGxsTmFtZSldCiAgICAgICAgICAgICRDb25zdHJ1Y3RvciA9IFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5EbGxJbXBvcnRBdHRyaWJ1dGVdLkdldENvbnN0cnVjdG9yKFtTdHJpbmddKQogICAgICAgICAgICAkRGxsSW1wb3J0QXR0cmlidXRlID0gTmV3LU9iamVjdCBSZWZsZWN0aW9uLkVtaXQuQ3VzdG9tQXR0cmlidXRlQnVpbGRlcigkQ29uc3RydWN0b3IsCiAgICAgICAgICAgICAgICAkRGxsTmFtZSwgW1JlZmxlY3Rpb24uUHJvcGVydHlJbmZvW11dIEAoKSwgW09iamVjdFtdXSBAKCksCiAgICAgICAgICAgICAgICBbUmVmbGVjdGlvbi5GaWVsZEluZm9bXV0gQCgkU2V0TGFzdEVycm9yRmllbGQsICRDYWxsaW5nQ29udmVudGlvbkZpZWxkLCAkQ2hhcnNldEZpZWxkKSwKICAgICAgICAgICAgICAgIFtPYmplY3RbXV0gQCgkU0xFVmFsdWUsIChbUnVudGltZS5JbnRlcm9wU2VydmljZXMuQ2FsbGluZ0NvbnZlbnRpb25dICROYXRpdmVDYWxsaW5nQ29udmVudGlvbiksIChbUnVudGltZS5JbnRlcm9wU2VydmljZXMuQ2hhclNldF0gJENoYXJzZXQpKSkKCiAgICAgICAgICAgICRNZXRob2QuU2V0Q3VzdG9tQXR0cmlidXRlKCREbGxJbXBvcnRBdHRyaWJ1dGUpCiAgICAgICAgfQogICAgfQoKICAgIEVORAogICAgewogICAgICAgIGlmICgkTW9kdWxlIC1pcyBbUmVmbGVjdGlvbi5Bc3NlbWJseV0pCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gJFR5cGVIYXNoCiAgICAgICAgfQoKICAgICAgICAkUmV0dXJuVHlwZXMgPSBAe30KCiAgICAgICAgRm9yRWFjaCAoJEtleSBpbiAkVHlwZUhhc2guS2V5cykKICAgICAgICB7CiAgICAgICAgICAgICRUeXBlID0gJFR5cGVIYXNoWyRLZXldLkNyZWF0ZVR5cGUoKQoKICAgICAgICAgICAgJFJldHVyblR5cGVzWyRLZXldID0gJFR5cGUKICAgICAgICB9CgogICAgICAgIHJldHVybiAkUmV0dXJuVHlwZXMKICAgIH0KfQoKCmZ1bmN0aW9uIHBzZW51bQp7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgQ3JlYXRlcyBhbiBpbi1tZW1vcnkgZW51bWVyYXRpb24gZm9yIHVzZSBpbiB5b3VyIFBvd2VyU2hlbGwgc2Vzc2lvbi4KCiAgICAgICAgQXV0aG9yOiBNYXR0aGV3IEdyYWViZXIgKEBtYXR0aWZlc3RhdGlvbikKICAgICAgICBMaWNlbnNlOiBCU0QgMy1DbGF1c2UKICAgICAgICBSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IE5vbmUKICAgICAgICBPcHRpb25hbCBEZXBlbmRlbmNpZXM6IE5vbmUKICAgICAKICAgIC5ERVNDUklQVElPTgoKICAgICAgICBUaGUgJ3BzZW51bScgZnVuY3Rpb24gZmFjaWxpdGF0ZXMgdGhlIGNyZWF0aW9uIG9mIGVudW1zIGVudGlyZWx5IGluCiAgICAgICAgbWVtb3J5IHVzaW5nIGFzIGNsb3NlIHRvIGEgIkMgc3R5bGUiIGFzIFBvd2VyU2hlbGwgd2lsbCBhbGxvdy4KCiAgICAuUEFSQU1FVEVSIE1vZHVsZQoKICAgICAgICBUaGUgaW4tbWVtb3J5IG1vZHVsZSB0aGF0IHdpbGwgaG9zdCB0aGUgZW51bS4gVXNlCiAgICAgICAgTmV3LUluTWVtb3J5TW9kdWxlIHRvIGRlZmluZSBhbiBpbi1tZW1vcnkgbW9kdWxlLgoKICAgIC5QQVJBTUVURVIgRnVsbE5hbWUKCiAgICAgICAgVGhlIGZ1bGx5LXF1YWxpZmllZCBuYW1lIG9mIHRoZSBlbnVtLgoKICAgIC5QQVJBTUVURVIgVHlwZQoKICAgICAgICBUaGUgdHlwZSBvZiBlYWNoIGVudW0gZWxlbWVudC4KCiAgICAuUEFSQU1FVEVSIEVudW1FbGVtZW50cwoKICAgICAgICBBIGhhc2h0YWJsZSBvZiBlbnVtIGVsZW1lbnRzLgoKICAgIC5QQVJBTUVURVIgQml0ZmllbGQKCiAgICAgICAgU3BlY2lmaWVzIHRoYXQgdGhlIGVudW0gc2hvdWxkIGJlIHRyZWF0ZWQgYXMgYSBiaXRmaWVsZC4KCiAgICAuRVhBTVBMRQoKICAgICAgICAkTW9kID0gTmV3LUluTWVtb3J5TW9kdWxlIC1Nb2R1bGVOYW1lIFdpbjMyCgogICAgICAgICRJbWFnZVN1YnN5c3RlbSA9IHBzZW51bSAkTW9kIFBFLklNQUdFX1NVQlNZU1RFTSBVSW50MTYgQHsKICAgICAgICAgICAgVU5LTk9XTiA9ICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICBOQVRJVkUgPSAgICAgICAgICAgICAgICAgICAxICMgSW1hZ2UgZG9lc24ndCByZXF1aXJlIGEgc3Vic3lzdGVtLgogICAgICAgICAgICBXSU5ET1dTX0dVSSA9ICAgICAgICAgICAgICAyICMgSW1hZ2UgcnVucyBpbiB0aGUgV2luZG93cyBHVUkgc3Vic3lzdGVtLgogICAgICAgICAgICBXSU5ET1dTX0NVSSA9ICAgICAgICAgICAgICAzICMgSW1hZ2UgcnVucyBpbiB0aGUgV2luZG93cyBjaGFyYWN0ZXIgc3Vic3lzdGVtLgogICAgICAgICAgICBPUzJfQ1VJID0gICAgICAgICAgICAgICAgICA1ICMgSW1hZ2UgcnVucyBpbiB0aGUgT1MvMiBjaGFyYWN0ZXIgc3Vic3lzdGVtLgogICAgICAgICAgICBQT1NJWF9DVUkgPSAgICAgICAgICAgICAgICA3ICMgSW1hZ2UgcnVucyBpbiB0aGUgUG9zaXggY2hhcmFjdGVyIHN1YnN5c3RlbS4KICAgICAgICAgICAgTkFUSVZFX1dJTkRPV1MgPSAgICAgICAgICAgOCAjIEltYWdlIGlzIGEgbmF0aXZlIFdpbjl4IGRyaXZlci4KICAgICAgICAgICAgV0lORE9XU19DRV9HVUkgPSAgICAgICAgICAgOSAjIEltYWdlIHJ1bnMgaW4gdGhlIFdpbmRvd3MgQ0Ugc3Vic3lzdGVtLgogICAgICAgICAgICBFRklfQVBQTElDQVRJT04gPSAgICAgICAgICAxMAogICAgICAgICAgICBFRklfQk9PVF9TRVJWSUNFX0RSSVZFUiA9ICAxMQogICAgICAgICAgICBFRklfUlVOVElNRV9EUklWRVIgPSAgICAgICAxMgogICAgICAgICAgICBFRklfUk9NID0gICAgICAgICAgICAgICAgICAxMwogICAgICAgICAgICBYQk9YID0gICAgICAgICAgICAgICAgICAgICAxNAogICAgICAgICAgICBXSU5ET1dTX0JPT1RfQVBQTElDQVRJT04gPSAxNgogICAgICAgIH0KCiAgICAuTk9URVMKCiAgICAgICAgUG93ZXJTaGVsbCBwdXJpc3RzIG1heSBkaXNhZ3JlZSB3aXRoIHRoZSBuYW1pbmcgb2YgdGhpcyBmdW5jdGlvbiBidXQKICAgICAgICBhZ2FpbiwgdGhpcyB3YXMgZGV2ZWxvcGVkIGluIHN1Y2ggYSB3YXkgc28gYXMgdG8gZW11bGF0ZSBhICJDIHN0eWxlIgogICAgICAgIGRlZmluaXRpb24gYXMgY2xvc2VseSBhcyBwb3NzaWJsZS4gU29ycnksIEknbSBub3QgZ29pbmcgdG8gbmFtZSBpdAogICAgICAgIE5ldy1FbnVtLiA6UAojPgoKICAgIFtPdXRwdXRUeXBlKFtUeXBlXSldCiAgICBQYXJhbQogICAgKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHsoJF8gLWlzIFtSZWZsZWN0aW9uLkVtaXQuTW9kdWxlQnVpbGRlcl0pIC1vciAoJF8gLWlzIFtSZWZsZWN0aW9uLkFzc2VtYmx5XSl9KV0KICAgICAgICAkTW9kdWxlLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMSwgTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRnVsbE5hbWUsCgogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAyLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1R5cGVdCiAgICAgICAgJFR5cGUsCgogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAzLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbSGFzaHRhYmxlXQogICAgICAgICRFbnVtRWxlbWVudHMsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEJpdGZpZWxkCiAgICApCgogICAgaWYgKCRNb2R1bGUgLWlzIFtSZWZsZWN0aW9uLkFzc2VtYmx5XSkKICAgIHsKICAgICAgICByZXR1cm4gKCRNb2R1bGUuR2V0VHlwZSgkRnVsbE5hbWUpKQogICAgfQoKICAgICRFbnVtVHlwZSA9ICRUeXBlIC1hcyBbVHlwZV0KCiAgICAkRW51bUJ1aWxkZXIgPSAkTW9kdWxlLkRlZmluZUVudW0oJEZ1bGxOYW1lLCAnUHVibGljJywgJEVudW1UeXBlKQoKICAgIGlmICgkQml0ZmllbGQpCiAgICB7CiAgICAgICAgJEZsYWdzQ29uc3RydWN0b3IgPSBbRmxhZ3NBdHRyaWJ1dGVdLkdldENvbnN0cnVjdG9yKEAoKSkKICAgICAgICAkRmxhZ3NDdXN0b21BdHRyaWJ1dGUgPSBOZXctT2JqZWN0IFJlZmxlY3Rpb24uRW1pdC5DdXN0b21BdHRyaWJ1dGVCdWlsZGVyKCRGbGFnc0NvbnN0cnVjdG9yLCBAKCkpCiAgICAgICAgJEVudW1CdWlsZGVyLlNldEN1c3RvbUF0dHJpYnV0ZSgkRmxhZ3NDdXN0b21BdHRyaWJ1dGUpCiAgICB9CgogICAgRm9yRWFjaCAoJEtleSBpbiAkRW51bUVsZW1lbnRzLktleXMpCiAgICB7CiAgICAgICAgIyBBcHBseSB0aGUgc3BlY2lmaWVkIGVudW0gdHlwZSB0byBlYWNoIGVsZW1lbnQKICAgICAgICAkTnVsbCA9ICRFbnVtQnVpbGRlci5EZWZpbmVMaXRlcmFsKCRLZXksICRFbnVtRWxlbWVudHNbJEtleV0gLWFzICRFbnVtVHlwZSkKICAgIH0KCiAgICAkRW51bUJ1aWxkZXIuQ3JlYXRlVHlwZSgpCn0KCgojIEEgaGVscGVyIGZ1bmN0aW9uIHVzZWQgdG8gcmVkdWNlIHR5cGluZyB3aGlsZSBkZWZpbmluZyBzdHJ1Y3QKIyBmaWVsZHMuCmZ1bmN0aW9uIGZpZWxkCnsKICAgIFBhcmFtCiAgICAoCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbVUludDE2XQogICAgICAgICRQb3NpdGlvbiwKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDEsIE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbVHlwZV0KICAgICAgICAkVHlwZSwKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDIpXQogICAgICAgIFtVSW50MTZdCiAgICAgICAgJE9mZnNldCwKCiAgICAgICAgW09iamVjdFtdXQogICAgICAgICRNYXJzaGFsQXMKICAgICkKCiAgICBAewogICAgICAgIFBvc2l0aW9uID0gJFBvc2l0aW9uCiAgICAgICAgVHlwZSA9ICRUeXBlIC1hcyBbVHlwZV0KICAgICAgICBPZmZzZXQgPSAkT2Zmc2V0CiAgICAgICAgTWFyc2hhbEFzID0gJE1hcnNoYWxBcwogICAgfQp9CgoKZnVuY3Rpb24gc3RydWN0CnsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBDcmVhdGVzIGFuIGluLW1lbW9yeSBzdHJ1Y3QgZm9yIHVzZSBpbiB5b3VyIFBvd2VyU2hlbGwgc2Vzc2lvbi4KCiAgICAgICAgQXV0aG9yOiBNYXR0aGV3IEdyYWViZXIgKEBtYXR0aWZlc3RhdGlvbikKICAgICAgICBMaWNlbnNlOiBCU0QgMy1DbGF1c2UKICAgICAgICBSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IE5vbmUKICAgICAgICBPcHRpb25hbCBEZXBlbmRlbmNpZXM6IGZpZWxkCgogICAgLkRFU0NSSVBUSU9OCgogICAgICAgIFRoZSAnc3RydWN0JyBmdW5jdGlvbiBmYWNpbGl0YXRlcyB0aGUgY3JlYXRpb24gb2Ygc3RydWN0cyBlbnRpcmVseSBpbgogICAgICAgIG1lbW9yeSB1c2luZyBhcyBjbG9zZSB0byBhICJDIHN0eWxlIiBhcyBQb3dlclNoZWxsIHdpbGwgYWxsb3cuIFN0cnVjdAogICAgICAgIGZpZWxkcyBhcmUgc3BlY2lmaWVkIHVzaW5nIGEgaGFzaHRhYmxlIHdoZXJlIGVhY2ggZmllbGQgb2YgdGhlIHN0cnVjdAogICAgICAgIGlzIGNvbXByb3NlZCBvZiB0aGUgb3JkZXIgaW4gd2hpY2ggaXQgc2hvdWxkIGJlIGRlZmluZWQsIGl0cyAuTkVUCiAgICAgICAgdHlwZSwgYW5kIG9wdGlvbmFsbHksIGl0cyBvZmZzZXQgYW5kIHNwZWNpYWwgbWFyc2hhbGluZyBhdHRyaWJ1dGVzLgoKICAgICAgICBPbmUgb2YgdGhlIGZlYXR1cmVzIG9mICdzdHJ1Y3QnIGlzIHRoYXQgYWZ0ZXIgeW91ciBzdHJ1Y3QgaXMgZGVmaW5lZCwKICAgICAgICBpdCB3aWxsIGNvbWUgd2l0aCBhIGJ1aWx0LWluIEdldFNpemUgbWV0aG9kIGFzIHdlbGwgYXMgYW4gZXhwbGljaXQKICAgICAgICBjb252ZXJ0ZXIgc28gdGhhdCB5b3UgY2FuIGVhc2lseSBjYXN0IGFuIEludFB0ciB0byB0aGUgc3RydWN0IHdpdGhvdXQKICAgICAgICByZWx5aW5nIHVwb24gY2FsbGluZyBTaXplT2YgYW5kL29yIFB0clRvU3RydWN0dXJlIGluIHRoZSBNYXJzaGFsCiAgICAgICAgY2xhc3MuCgogICAgLlBBUkFNRVRFUiBNb2R1bGUKCiAgICAgICAgVGhlIGluLW1lbW9yeSBtb2R1bGUgdGhhdCB3aWxsIGhvc3QgdGhlIHN0cnVjdC4gVXNlCiAgICAgICAgTmV3LUluTWVtb3J5TW9kdWxlIHRvIGRlZmluZSBhbiBpbi1tZW1vcnkgbW9kdWxlLgoKICAgIC5QQVJBTUVURVIgRnVsbE5hbWUKCiAgICAgICAgVGhlIGZ1bGx5LXF1YWxpZmllZCBuYW1lIG9mIHRoZSBzdHJ1Y3QuCgogICAgLlBBUkFNRVRFUiBTdHJ1Y3RGaWVsZHMKCiAgICAgICAgQSBoYXNodGFibGUgb2YgZmllbGRzLiBVc2UgdGhlICdmaWVsZCcgaGVscGVyIGZ1bmN0aW9uIHRvIGVhc2UKICAgICAgICBkZWZpbmluZyBlYWNoIGZpZWxkLgoKICAgIC5QQVJBTUVURVIgUGFja2luZ1NpemUKCiAgICAgICAgU3BlY2lmaWVzIHRoZSBtZW1vcnkgYWxpZ25tZW50IG9mIGZpZWxkcy4KCiAgICAuUEFSQU1FVEVSIEV4cGxpY2l0TGF5b3V0CgogICAgICAgIEluZGljYXRlcyB0aGF0IGFuIGV4cGxpY2l0IG9mZnNldCBmb3IgZWFjaCBmaWVsZCB3aWxsIGJlIHNwZWNpZmllZC4KCiAgICAuRVhBTVBMRQoKICAgICAgICAkTW9kID0gTmV3LUluTWVtb3J5TW9kdWxlIC1Nb2R1bGVOYW1lIFdpbjMyCgogICAgICAgICRJbWFnZURvc1NpZ25hdHVyZSA9IHBzZW51bSAkTW9kIFBFLklNQUdFX0RPU19TSUdOQVRVUkUgVUludDE2IEB7CiAgICAgICAgICAgIERPU19TSUdOQVRVUkUgPSAgICAweDVBNEQKICAgICAgICAgICAgT1MyX1NJR05BVFVSRSA9ICAgIDB4NDU0RQogICAgICAgICAgICBPUzJfU0lHTkFUVVJFX0xFID0gMHg0NTRDCiAgICAgICAgICAgIFZYRF9TSUdOQVRVUkUgPSAgICAweDQ1NEMKICAgICAgICB9CgogICAgICAgICRJbWFnZURvc0hlYWRlciA9IHN0cnVjdCAkTW9kIFBFLklNQUdFX0RPU19IRUFERVIgQHsKICAgICAgICAgICAgZV9tYWdpYyA9ICAgIGZpZWxkIDAgJEltYWdlRG9zU2lnbmF0dXJlCiAgICAgICAgICAgIGVfY2JscCA9ICAgICBmaWVsZCAxIFVJbnQxNgogICAgICAgICAgICBlX2NwID0gICAgICAgZmllbGQgMiBVSW50MTYKICAgICAgICAgICAgZV9jcmxjID0gICAgIGZpZWxkIDMgVUludDE2CiAgICAgICAgICAgIGVfY3BhcmhkciA9ICBmaWVsZCA0IFVJbnQxNgogICAgICAgICAgICBlX21pbmFsbG9jID0gZmllbGQgNSBVSW50MTYKICAgICAgICAgICAgZV9tYXhhbGxvYyA9IGZpZWxkIDYgVUludDE2CiAgICAgICAgICAgIGVfc3MgPSAgICAgICBmaWVsZCA3IFVJbnQxNgogICAgICAgICAgICBlX3NwID0gICAgICAgZmllbGQgOCBVSW50MTYKICAgICAgICAgICAgZV9jc3VtID0gICAgIGZpZWxkIDkgVUludDE2CiAgICAgICAgICAgIGVfaXAgPSAgICAgICBmaWVsZCAxMCBVSW50MTYKICAgICAgICAgICAgZV9jcyA9ICAgICAgIGZpZWxkIDExIFVJbnQxNgogICAgICAgICAgICBlX2xmYXJsYyA9ICAgZmllbGQgMTIgVUludDE2CiAgICAgICAgICAgIGVfb3ZubyA9ICAgICBmaWVsZCAxMyBVSW50MTYKICAgICAgICAgICAgZV9yZXMgPSAgICAgIGZpZWxkIDE0IFVJbnQxNltdIC1NYXJzaGFsQXMgQCgnQnlWYWxBcnJheScsIDQpCiAgICAgICAgICAgIGVfb2VtaWQgPSAgICBmaWVsZCAxNSBVSW50MTYKICAgICAgICAgICAgZV9vZW1pbmZvID0gIGZpZWxkIDE2IFVJbnQxNgogICAgICAgICAgICBlX3JlczIgPSAgICAgZmllbGQgMTcgVUludDE2W10gLU1hcnNoYWxBcyBAKCdCeVZhbEFycmF5JywgMTApCiAgICAgICAgICAgIGVfbGZhbmV3ID0gICBmaWVsZCAxOCBJbnQzMgogICAgICAgIH0KCiAgICAgICAgIyBFeGFtcGxlIG9mIHVzaW5nIGFuIGV4cGxpY2l0IGxheW91dCBpbiBvcmRlciB0byBjcmVhdGUgYSB1bmlvbi4KICAgICAgICAkVGVzdFVuaW9uID0gc3RydWN0ICRNb2QgVGVzdFVuaW9uIEB7CiAgICAgICAgICAgIGZpZWxkMSA9IGZpZWxkIDAgVUludDMyIDAKICAgICAgICAgICAgZmllbGQyID0gZmllbGQgMSBJbnRQdHIgMAogICAgICAgIH0gLUV4cGxpY2l0TGF5b3V0CgogICAgLk5PVEVTCgogICAgICAgIFBvd2VyU2hlbGwgcHVyaXN0cyBtYXkgZGlzYWdyZWUgd2l0aCB0aGUgbmFtaW5nIG9mIHRoaXMgZnVuY3Rpb24gYnV0CiAgICAgICAgYWdhaW4sIHRoaXMgd2FzIGRldmVsb3BlZCBpbiBzdWNoIGEgd2F5IHNvIGFzIHRvIGVtdWxhdGUgYSAiQyBzdHlsZSIKICAgICAgICBkZWZpbml0aW9uIGFzIGNsb3NlbHkgYXMgcG9zc2libGUuIFNvcnJ5LCBJJ20gbm90IGdvaW5nIHRvIG5hbWUgaXQKICAgICAgICBOZXctU3RydWN0LiA6UAojPgoKICAgIFtPdXRwdXRUeXBlKFtUeXBlXSldCiAgICBQYXJhbQogICAgKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAxLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHsoJF8gLWlzIFtSZWZsZWN0aW9uLkVtaXQuTW9kdWxlQnVpbGRlcl0pIC1vciAoJF8gLWlzIFtSZWZsZWN0aW9uLkFzc2VtYmx5XSl9KV0KICAgICAgICAkTW9kdWxlLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMiwgTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRnVsbE5hbWUsCgogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAzLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbSGFzaHRhYmxlXQogICAgICAgICRTdHJ1Y3RGaWVsZHMsCgogICAgICAgIFtSZWZsZWN0aW9uLkVtaXQuUGFja2luZ1NpemVdCiAgICAgICAgJFBhY2tpbmdTaXplID0gW1JlZmxlY3Rpb24uRW1pdC5QYWNraW5nU2l6ZV06OlVuc3BlY2lmaWVkLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRFeHBsaWNpdExheW91dAogICAgKQoKICAgIGlmICgkTW9kdWxlIC1pcyBbUmVmbGVjdGlvbi5Bc3NlbWJseV0pCiAgICB7CiAgICAgICAgcmV0dXJuICgkTW9kdWxlLkdldFR5cGUoJEZ1bGxOYW1lKSkKICAgIH0KCiAgICBbUmVmbGVjdGlvbi5UeXBlQXR0cmlidXRlc10gJFN0cnVjdEF0dHJpYnV0ZXMgPSAnQW5zaUNsYXNzLAogICAgICAgIENsYXNzLAogICAgICAgIFB1YmxpYywKICAgICAgICBTZWFsZWQsCiAgICAgICAgQmVmb3JlRmllbGRJbml0JwoKICAgIGlmICgkRXhwbGljaXRMYXlvdXQpCiAgICB7CiAgICAgICAgJFN0cnVjdEF0dHJpYnV0ZXMgPSAkU3RydWN0QXR0cmlidXRlcyAtYm9yIFtSZWZsZWN0aW9uLlR5cGVBdHRyaWJ1dGVzXTo6RXhwbGljaXRMYXlvdXQKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICAkU3RydWN0QXR0cmlidXRlcyA9ICRTdHJ1Y3RBdHRyaWJ1dGVzIC1ib3IgW1JlZmxlY3Rpb24uVHlwZUF0dHJpYnV0ZXNdOjpTZXF1ZW50aWFsTGF5b3V0CiAgICB9CgogICAgJFN0cnVjdEJ1aWxkZXIgPSAkTW9kdWxlLkRlZmluZVR5cGUoJEZ1bGxOYW1lLCAkU3RydWN0QXR0cmlidXRlcywgW1ZhbHVlVHlwZV0sICRQYWNraW5nU2l6ZSkKICAgICRDb25zdHJ1Y3RvckluZm8gPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbEFzQXR0cmlidXRlXS5HZXRDb25zdHJ1Y3RvcnMoKVswXQogICAgJFNpemVDb25zdCA9IEAoW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxBc0F0dHJpYnV0ZV0uR2V0RmllbGQoJ1NpemVDb25zdCcpKQoKICAgICRGaWVsZHMgPSBOZXctT2JqZWN0IEhhc2h0YWJsZVtdKCRTdHJ1Y3RGaWVsZHMuQ291bnQpCgogICAgIyBTb3J0IGVhY2ggZmllbGQgYWNjb3JkaW5nIHRvIHRoZSBvcmRlcnMgc3BlY2lmaWVkCiAgICAjIFVuZm9ydHVuYXRlbHksIFBTdjIgZG9lc24ndCBoYXZlIHRoZSBsdXh1cnkgb2YgdGhlCiAgICAjIGhhc2h0YWJsZSBbT3JkZXJlZF0gYWNjZWxlcmF0b3IuCiAgICBGb3JFYWNoICgkRmllbGQgaW4gJFN0cnVjdEZpZWxkcy5LZXlzKQogICAgewogICAgICAgICRJbmRleCA9ICRTdHJ1Y3RGaWVsZHNbJEZpZWxkXVsnUG9zaXRpb24nXQogICAgICAgICRGaWVsZHNbJEluZGV4XSA9IEB7RmllbGROYW1lID0gJEZpZWxkOyBQcm9wZXJ0aWVzID0gJFN0cnVjdEZpZWxkc1skRmllbGRdfQogICAgfQoKICAgIEZvckVhY2ggKCRGaWVsZCBpbiAkRmllbGRzKQogICAgewogICAgICAgICRGaWVsZE5hbWUgPSAkRmllbGRbJ0ZpZWxkTmFtZSddCiAgICAgICAgJEZpZWxkUHJvcCA9ICRGaWVsZFsnUHJvcGVydGllcyddCgogICAgICAgICRPZmZzZXQgPSAkRmllbGRQcm9wWydPZmZzZXQnXQogICAgICAgICRUeXBlID0gJEZpZWxkUHJvcFsnVHlwZSddCiAgICAgICAgJE1hcnNoYWxBcyA9ICRGaWVsZFByb3BbJ01hcnNoYWxBcyddCgogICAgICAgICROZXdGaWVsZCA9ICRTdHJ1Y3RCdWlsZGVyLkRlZmluZUZpZWxkKCRGaWVsZE5hbWUsICRUeXBlLCAnUHVibGljJykKCiAgICAgICAgaWYgKCRNYXJzaGFsQXMpCiAgICAgICAgewogICAgICAgICAgICAkVW5tYW5hZ2VkVHlwZSA9ICRNYXJzaGFsQXNbMF0gLWFzIChbUnVudGltZS5JbnRlcm9wU2VydmljZXMuVW5tYW5hZ2VkVHlwZV0pCiAgICAgICAgICAgIGlmICgkTWFyc2hhbEFzWzFdKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAkU2l6ZSA9ICRNYXJzaGFsQXNbMV0KICAgICAgICAgICAgICAgICRBdHRyaWJCdWlsZGVyID0gTmV3LU9iamVjdCBSZWZsZWN0aW9uLkVtaXQuQ3VzdG9tQXR0cmlidXRlQnVpbGRlcigkQ29uc3RydWN0b3JJbmZvLAogICAgICAgICAgICAgICAgICAgICRVbm1hbmFnZWRUeXBlLCAkU2l6ZUNvbnN0LCBAKCRTaXplKSkKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRBdHRyaWJCdWlsZGVyID0gTmV3LU9iamVjdCBSZWZsZWN0aW9uLkVtaXQuQ3VzdG9tQXR0cmlidXRlQnVpbGRlcigkQ29uc3RydWN0b3JJbmZvLCBbT2JqZWN0W11dIEAoJFVubWFuYWdlZFR5cGUpKQogICAgICAgICAgICB9CgogICAgICAgICAgICAkTmV3RmllbGQuU2V0Q3VzdG9tQXR0cmlidXRlKCRBdHRyaWJCdWlsZGVyKQogICAgICAgIH0KCiAgICAgICAgaWYgKCRFeHBsaWNpdExheW91dCkgeyAkTmV3RmllbGQuU2V0T2Zmc2V0KCRPZmZzZXQpIH0KICAgIH0KCiAgICAjIE1ha2UgdGhlIHN0cnVjdCBhd2FyZSBvZiBpdHMgb3duIHNpemUuCiAgICAjIE5vIG1vcmUgaGF2aW5nIHRvIGNhbGwgW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpTaXplT2YhCiAgICAkU2l6ZU1ldGhvZCA9ICRTdHJ1Y3RCdWlsZGVyLkRlZmluZU1ldGhvZCgnR2V0U2l6ZScsCiAgICAgICAgJ1B1YmxpYywgU3RhdGljJywKICAgICAgICBbSW50XSwKICAgICAgICBbVHlwZVtdXSBAKCkpCiAgICAkSUxHZW5lcmF0b3IgPSAkU2l6ZU1ldGhvZC5HZXRJTEdlbmVyYXRvcigpCiAgICAjIFRoYW5rcyBmb3IgdGhlIGhlbHAsIEphc29uIFNoaXJrIQogICAgJElMR2VuZXJhdG9yLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6TGR0b2tlbiwgJFN0cnVjdEJ1aWxkZXIpCiAgICAkSUxHZW5lcmF0b3IuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpDYWxsLAogICAgICAgIFtUeXBlXS5HZXRNZXRob2QoJ0dldFR5cGVGcm9tSGFuZGxlJykpCiAgICAkSUxHZW5lcmF0b3IuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpDYWxsLAogICAgICAgIFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXS5HZXRNZXRob2QoJ1NpemVPZicsIFtUeXBlW11dIEAoW1R5cGVdKSkpCiAgICAkSUxHZW5lcmF0b3IuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpSZXQpCgogICAgIyBBbGxvdyBmb3IgZXhwbGljaXQgY2FzdGluZyBmcm9tIGFuIEludFB0cgogICAgIyBObyBtb3JlIGhhdmluZyB0byBjYWxsIFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6UHRyVG9TdHJ1Y3R1cmUhCiAgICAkSW1wbGljaXRDb252ZXJ0ZXIgPSAkU3RydWN0QnVpbGRlci5EZWZpbmVNZXRob2QoJ29wX0ltcGxpY2l0JywKICAgICAgICAnUHJpdmF0ZVNjb3BlLCBQdWJsaWMsIFN0YXRpYywgSGlkZUJ5U2lnLCBTcGVjaWFsTmFtZScsCiAgICAgICAgJFN0cnVjdEJ1aWxkZXIsCiAgICAgICAgW1R5cGVbXV0gQChbSW50UHRyXSkpCiAgICAkSUxHZW5lcmF0b3IyID0gJEltcGxpY2l0Q29udmVydGVyLkdldElMR2VuZXJhdG9yKCkKICAgICRJTEdlbmVyYXRvcjIuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpOb3ApCiAgICAkSUxHZW5lcmF0b3IyLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6TGRhcmdfMCkKICAgICRJTEdlbmVyYXRvcjIuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpMZHRva2VuLCAkU3RydWN0QnVpbGRlcikKICAgICRJTEdlbmVyYXRvcjIuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpDYWxsLAogICAgICAgIFtUeXBlXS5HZXRNZXRob2QoJ0dldFR5cGVGcm9tSGFuZGxlJykpCiAgICAkSUxHZW5lcmF0b3IyLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6Q2FsbCwKICAgICAgICBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF0uR2V0TWV0aG9kKCdQdHJUb1N0cnVjdHVyZScsIFtUeXBlW11dIEAoW0ludFB0cl0sIFtUeXBlXSkpKQogICAgJElMR2VuZXJhdG9yMi5FbWl0KFtSZWZsZWN0aW9uLkVtaXQuT3BDb2Rlc106OlVuYm94X0FueSwgJFN0cnVjdEJ1aWxkZXIpCiAgICAkSUxHZW5lcmF0b3IyLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6UmV0KQoKICAgICRTdHJ1Y3RCdWlsZGVyLkNyZWF0ZVR5cGUoKQp9CgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIwojIE1pc2MuIGhlbHBlcnMKIwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKZmlsdGVyIEdldC1JbmlDb250ZW50IHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBUaGlzIGhlbHBlciBwYXJzZXMgYW4gLmluaSBmaWxlIGludG8gYSBwcm9wZXIgUG93ZXJTaGVsbCBvYmplY3QuCiAgICAgICAgCiAgICAgICAgQXV0aG9yOiAnVGhlIFNjcmlwdGluZyBHdXlzJwogICAgICAgIExpbms6IGh0dHBzOi8vYmxvZ3MudGVjaG5ldC5taWNyb3NvZnQuY29tL2hleXNjcmlwdGluZ2d1eS8yMDExLzA4LzIwL3VzZS1wb3dlcnNoZWxsLXRvLXdvcmstd2l0aC1hbnktaW5pLWZpbGUvCgogICAgLkxJTksKCiAgICAgICAgaHR0cHM6Ly9ibG9ncy50ZWNobmV0Lm1pY3Jvc29mdC5jb20vaGV5c2NyaXB0aW5nZ3V5LzIwMTEvMDgvMjAvdXNlLXBvd2Vyc2hlbGwtdG8td29yay13aXRoLWFueS1pbmktZmlsZS8KIz4KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JFRydWUpXQogICAgICAgIFtBbGlhcygnRnVsbE5hbWUnKV0KICAgICAgICBbVmFsaWRhdGVTY3JpcHQoeyBUZXN0LVBhdGggLVBhdGggJF8gfSldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRQYXRoCiAgICApCgogICAgRm9yRWFjaCgkVGFyZ2V0UGF0aCBpbiAkUGF0aCkgewogICAgICAgICRJbmlPYmplY3QgPSBAe30KICAgICAgICBTd2l0Y2ggLVJlZ2V4IC1GaWxlICRUYXJnZXRQYXRoIHsKICAgICAgICAgICAgIl5cWyguKylcXSIgIyBTZWN0aW9uCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRTZWN0aW9uID0gJG1hdGNoZXNbMV0uVHJpbSgpCiAgICAgICAgICAgICAgICAkSW5pT2JqZWN0WyRTZWN0aW9uXSA9IEB7fQogICAgICAgICAgICAgICAgJENvbW1lbnRDb3VudCA9IDAKICAgICAgICAgICAgfQogICAgICAgICAgICAiXig7LiopJCIgIyBDb21tZW50CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRWYWx1ZSA9ICRtYXRjaGVzWzFdLlRyaW0oKQogICAgICAgICAgICAgICAgJENvbW1lbnRDb3VudCA9ICRDb21tZW50Q291bnQgKyAxCiAgICAgICAgICAgICAgICAkTmFtZSA9ICdDb21tZW50JyArICRDb21tZW50Q291bnQKICAgICAgICAgICAgICAgICRJbmlPYmplY3RbJFNlY3Rpb25dWyROYW1lXSA9ICRWYWx1ZQogICAgICAgICAgICB9IAogICAgICAgICAgICAiKC4rPylccyo9KC4qKSIgIyBLZXkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJE5hbWUsICRWYWx1ZSA9ICRtYXRjaGVzWzEuLjJdCiAgICAgICAgICAgICAgICAkTmFtZSA9ICROYW1lLlRyaW0oKQogICAgICAgICAgICAgICAgJFZhbHVlcyA9ICRWYWx1ZS5zcGxpdCgnLCcpIHwgRm9yRWFjaC1PYmplY3QgeyRfLlRyaW0oKX0KICAgICAgICAgICAgICAgIGlmKCRWYWx1ZXMgLWlzbm90IFtTeXN0ZW0uQXJyYXldKSB7JFZhbHVlcyA9IEAoJFZhbHVlcyl9CiAgICAgICAgICAgICAgICAkSW5pT2JqZWN0WyRTZWN0aW9uXVskTmFtZV0gPSAkVmFsdWVzCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgJEluaU9iamVjdAogICAgfQp9CgpmaWx0ZXIgRXhwb3J0LVBvd2VyVmlld0NTViB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgVGhpcyBoZWxwZXIgZXhwb3J0cyBhbiAtSW5wdXRPYmplY3QgdG8gYSAuY3N2IGluIGEgdGhyZWFkLXNhZmUgbWFubmVyCiAgICAgICAgdXNpbmcgYSBtdXRleC4gVGhpcyBpcyBzbyB0aGUgdmFyaW91cyBtdWx0aS10aHJlYWRlZCBmdW5jdGlvbnMgaW4KICAgICAgICBQb3dlclZpZXcgaGFzIGEgdGhyZWFkLXNhZmUgd2F5IHRvIGV4cG9ydCBvdXRwdXQgdG8gdGhlIHNhbWUgZmlsZS4KICAgICAgICAKICAgICAgICBCYXNlZCBwYXJ0aWFsbHkgb24gRG1pdHJ5IFNvdG5pa292J3MgRXhwb3J0LUNTViBjb2RlCiAgICAgICAgICAgIGF0IGh0dHA6Ly9wb3NoY29kZS5vcmcvMTU5MAoKICAgIC5MSU5LCgogICAgICAgIGh0dHA6Ly9wb3NoY29kZS5vcmcvMTU5MAogICAgICAgIGh0dHA6Ly9kbWl0cnlzb3RuaWtvdi53b3JkcHJlc3MuY29tLzIwMTAvMDEvMTkvRXhwb3J0LUNzdi1hcHBlbmQvCiM+CiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JFRydWUpXQogICAgICAgIFtTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTT2JqZWN0W11dCiAgICAgICAgJElucHV0T2JqZWN0LAoKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgUG9zaXRpb249MCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgICRPdXRGaWxlCiAgICApCgogICAgJE9iamVjdENTViA9ICRJbnB1dE9iamVjdCB8IENvbnZlcnRUby1Dc3YgLU5vVHlwZUluZm9ybWF0aW9uCgogICAgIyBtdXRleCBzbyB0aHJlYWRlZCBjb2RlIGRvZXNuJ3Qgc3RvbXAgb24gdGhlIG91dHB1dCBmaWxlCiAgICAkTXV0ZXggPSBOZXctT2JqZWN0IFN5c3RlbS5UaHJlYWRpbmcuTXV0ZXggJEZhbHNlLCdDU1ZNdXRleCc7CiAgICAkTnVsbCA9ICRNdXRleC5XYWl0T25lKCkKCiAgICBpZiAoVGVzdC1QYXRoIC1QYXRoICRPdXRGaWxlKSB7CiAgICAgICAgIyBoYWNrIHRvIHNraXAgdGhlIGZpcnN0IGxpbmUgb2Ygb3V0cHV0IGlmIHRoZSBmaWxlIGFscmVhZHkgZXhpc3RzCiAgICAgICAgJE9iamVjdENTViB8IEZvckVhY2gtT2JqZWN0IHsgJFN0YXJ0PSRUcnVlIH17IGlmICgkU3RhcnQpIHskU3RhcnQ9JEZhbHNlfSBlbHNlIHskX30gfSB8IE91dC1GaWxlIC1FbmNvZGluZyAnQVNDSUknIC1BcHBlbmQgLUZpbGVQYXRoICRPdXRGaWxlCiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkT2JqZWN0Q1NWIHwgT3V0LUZpbGUgLUVuY29kaW5nICdBU0NJSScgLUFwcGVuZCAtRmlsZVBhdGggJE91dEZpbGUKICAgIH0KCiAgICAkTXV0ZXguUmVsZWFzZU11dGV4KCkKfQoKCmZpbHRlciBHZXQtSVBBZGRyZXNzIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBSZXNvbHZlcyBhIGdpdmVuIGhvc3RlbmFtZSB0byBpdHMgYXNzb2NpYXRlZCBJUHY0IGFkZHJlc3MuIAogICAgICAgIElmIG5vIGhvc3RuYW1lIGlzIHByb3ZpZGVkLCBpdCBkZWZhdWx0cyB0byByZXR1cm5pbmcKICAgICAgICB0aGUgSVAgYWRkcmVzcyBvZiB0aGUgbG9jYWxob3N0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LUlQQWRkcmVzcyAtQ29tcHV0ZXJOYW1lIFNFUlZFUgogICAgICAgIAogICAgICAgIFJldHVybiB0aGUgSVB2NCBhZGRyZXNzIG9mICdTRVJWRVInCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtQ29udGVudCAuXGhvc3RuYW1lcy50eHQgfCBHZXQtSVBBZGRyZXNzCgogICAgICAgIEdldCB0aGUgSVAgYWRkcmVzc2VzIG9mIGFsbCBob3N0bmFtZXMgaW4gYW4gaW5wdXQgZmlsZS4KIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLCBWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICRFbnY6Q29tcHV0ZXJOYW1lCiAgICApCgogICAgdHJ5IHsKICAgICAgICAjIGV4dHJhY3QgdGhlIGNvbXB1dGVyIG5hbWUgZnJvbSB3aGF0ZXZlciBvYmplY3Qgd2FzIHBhc3NlZCBvbiB0aGUgcGlwZWxpbmUKICAgICAgICAkQ29tcHV0ZXIgPSAkQ29tcHV0ZXJOYW1lIHwgR2V0LU5hbWVGaWVsZAoKICAgICAgICAjIGdldCB0aGUgSVAgcmVzb2x1dGlvbiBvZiB0aGlzIHNwZWNpZmllZCBob3N0bmFtZQogICAgICAgIEAoKFtOZXQuRG5zXTo6R2V0SG9zdEVudHJ5KCRDb21wdXRlcikpLkFkZHJlc3NMaXN0KSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgaWYgKCRfLkFkZHJlc3NGYW1pbHkgLWVxICdJbnRlck5ldHdvcmsnKSB7CiAgICAgICAgICAgICAgICAkT3V0ID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJUEFkZHJlc3MnICRfLklQQWRkcmVzc1RvU3RyaW5nCiAgICAgICAgICAgICAgICAkT3V0CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBjYXRjaCB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAnQ291bGQgbm90IHJlc29sdmUgaG9zdCB0byBhbiBJUCBBZGRyZXNzLicKICAgIH0KfQoKCmZpbHRlciBDb252ZXJ0LU5hbWVUb1NpZCB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgQ29udmVydHMgYSBnaXZlbiB1c2VyL2dyb3VwIG5hbWUgdG8gYSBzZWN1cml0eSBpZGVudGlmaWVyIChTSUQpLgoKICAgIC5QQVJBTUVURVIgT2JqZWN0TmFtZQoKICAgICAgICBUaGUgdXNlci9ncm91cCBuYW1lIHRvIGNvbnZlcnQsIGNhbiBiZSAndXNlcicgb3IgJ0RPTUFJTlx1c2VyJyBmb3JtYXQuCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgU3BlY2lmaWMgZG9tYWluIGZvciB0aGUgZ2l2ZW4gdXNlciBhY2NvdW50LCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBDb252ZXJ0LU5hbWVUb1NpZCAnREVWXGRmbScKIz4KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgW0FsaWFzKCdOYW1lJyldCiAgICAgICAgJE9iamVjdE5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbgogICAgKQoKICAgICRPYmplY3ROYW1lID0gJE9iamVjdE5hbWUgLVJlcGxhY2UgIi8iLCJcIgogICAgCiAgICBpZigkT2JqZWN0TmFtZS5Db250YWlucygiXCIpKSB7CiAgICAgICAgIyBpZiB3ZSBnZXQgYSBET01BSU5cdXNlciBmb3JtYXQsIGF1dG8gY29udmVydCBpdAogICAgICAgICREb21haW4gPSAkT2JqZWN0TmFtZS5TcGxpdCgiXCIpWzBdCiAgICAgICAgJE9iamVjdE5hbWUgPSAkT2JqZWN0TmFtZS5TcGxpdCgiXCIpWzFdCiAgICB9CiAgICBlbHNlaWYoLW5vdCAkRG9tYWluKSB7CiAgICAgICAgJERvbWFpbiA9IChHZXQtTmV0RG9tYWluKS5OYW1lCiAgICB9CgogICAgdHJ5IHsKICAgICAgICAkT2JqID0gKE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5OVEFjY291bnQoJERvbWFpbiwgJE9iamVjdE5hbWUpKQogICAgICAgICRTSUQgPSAkT2JqLlRyYW5zbGF0ZShbU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXJdKS5WYWx1ZQogICAgICAgIAogICAgICAgICRPdXQgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdPYmplY3ROYW1lJyAkT2JqZWN0TmFtZQogICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU0lEJyAkU0lECiAgICAgICAgJE91dAogICAgfQogICAgY2F0Y2ggewogICAgICAgIFdyaXRlLVZlcmJvc2UgIkludmFsaWQgb2JqZWN0L25hbWU6ICREb21haW5cJE9iamVjdE5hbWUiCiAgICAgICAgJE51bGwKICAgIH0KfQoKCmZpbHRlciBDb252ZXJ0LVNpZFRvTmFtZSB7CjwjCiAgICAuU1lOT1BTSVMKICAgIAogICAgICAgIENvbnZlcnRzIGEgc2VjdXJpdHkgaWRlbnRpZmllciAoU0lEKSB0byBhIGdyb3VwL3VzZXIgbmFtZS4KCiAgICAuUEFSQU1FVEVSIFNJRAogICAgCiAgICAgICAgVGhlIFNJRCB0byBjb252ZXJ0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gQ29udmVydC1TaWRUb05hbWUgUy0xLTUtMjEtMjYyMDg5MTgyOS0yNDExMjYxNDk3LTE3NzM4NTMwODgtMTEwNQojPgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbVmFsaWRhdGVQYXR0ZXJuKCdeUy0xLS4qJyldCiAgICAgICAgJFNJRAogICAgKQoKICAgIHRyeSB7CiAgICAgICAgJFNJRDIgPSAkU0lELnRyaW0oJyonKQoKICAgICAgICAjIHRyeSB0byByZXNvbHZlIGFueSBidWlsdC1pbiBTSURzIGZpcnN0CiAgICAgICAgIyAgIGZyb20gaHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20vZW4tdXMva2IvMjQzMzMwCiAgICAgICAgU3dpdGNoICgkU0lEMikgewogICAgICAgICAgICAnUy0xLTAnICAgICAgICAgeyAnTnVsbCBBdXRob3JpdHknIH0KICAgICAgICAgICAgJ1MtMS0wLTAnICAgICAgIHsgJ05vYm9keScgfQogICAgICAgICAgICAnUy0xLTEnICAgICAgICAgeyAnV29ybGQgQXV0aG9yaXR5JyB9CiAgICAgICAgICAgICdTLTEtMS0wJyAgICAgICB7ICdFdmVyeW9uZScgfQogICAgICAgICAgICAnUy0xLTInICAgICAgICAgeyAnTG9jYWwgQXV0aG9yaXR5JyB9CiAgICAgICAgICAgICdTLTEtMi0wJyAgICAgICB7ICdMb2NhbCcgfQogICAgICAgICAgICAnUy0xLTItMScgICAgICAgeyAnQ29uc29sZSBMb2dvbiAnIH0KICAgICAgICAgICAgJ1MtMS0zJyAgICAgICAgIHsgJ0NyZWF0b3IgQXV0aG9yaXR5JyB9CiAgICAgICAgICAgICdTLTEtMy0wJyAgICAgICB7ICdDcmVhdG9yIE93bmVyJyB9CiAgICAgICAgICAgICdTLTEtMy0xJyAgICAgICB7ICdDcmVhdG9yIEdyb3VwJyB9CiAgICAgICAgICAgICdTLTEtMy0yJyAgICAgICB7ICdDcmVhdG9yIE93bmVyIFNlcnZlcicgfQogICAgICAgICAgICAnUy0xLTMtMycgICAgICAgeyAnQ3JlYXRvciBHcm91cCBTZXJ2ZXInIH0KICAgICAgICAgICAgJ1MtMS0zLTQnICAgICAgIHsgJ093bmVyIFJpZ2h0cycgfQogICAgICAgICAgICAnUy0xLTQnICAgICAgICAgeyAnTm9uLXVuaXF1ZSBBdXRob3JpdHknIH0KICAgICAgICAgICAgJ1MtMS01JyAgICAgICAgIHsgJ05UIEF1dGhvcml0eScgfQogICAgICAgICAgICAnUy0xLTUtMScgICAgICAgeyAnRGlhbHVwJyB9CiAgICAgICAgICAgICdTLTEtNS0yJyAgICAgICB7ICdOZXR3b3JrJyB9CiAgICAgICAgICAgICdTLTEtNS0zJyAgICAgICB7ICdCYXRjaCcgfQogICAgICAgICAgICAnUy0xLTUtNCcgICAgICAgeyAnSW50ZXJhY3RpdmUnIH0KICAgICAgICAgICAgJ1MtMS01LTYnICAgICAgIHsgJ1NlcnZpY2UnIH0KICAgICAgICAgICAgJ1MtMS01LTcnICAgICAgIHsgJ0Fub255bW91cycgfQogICAgICAgICAgICAnUy0xLTUtOCcgICAgICAgeyAnUHJveHknIH0KICAgICAgICAgICAgJ1MtMS01LTknICAgICAgIHsgJ0VudGVycHJpc2UgRG9tYWluIENvbnRyb2xsZXJzJyB9CiAgICAgICAgICAgICdTLTEtNS0xMCcgICAgICB7ICdQcmluY2lwYWwgU2VsZicgfQogICAgICAgICAgICAnUy0xLTUtMTEnICAgICAgeyAnQXV0aGVudGljYXRlZCBVc2VycycgfQogICAgICAgICAgICAnUy0xLTUtMTInICAgICAgeyAnUmVzdHJpY3RlZCBDb2RlJyB9CiAgICAgICAgICAgICdTLTEtNS0xMycgICAgICB7ICdUZXJtaW5hbCBTZXJ2ZXIgVXNlcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTE0JyAgICAgIHsgJ1JlbW90ZSBJbnRlcmFjdGl2ZSBMb2dvbicgfQogICAgICAgICAgICAnUy0xLTUtMTUnICAgICAgeyAnVGhpcyBPcmdhbml6YXRpb24gJyB9CiAgICAgICAgICAgICdTLTEtNS0xNycgICAgICB7ICdUaGlzIE9yZ2FuaXphdGlvbiAnIH0KICAgICAgICAgICAgJ1MtMS01LTE4JyAgICAgIHsgJ0xvY2FsIFN5c3RlbScgfQogICAgICAgICAgICAnUy0xLTUtMTknICAgICAgeyAnTlQgQXV0aG9yaXR5JyB9CiAgICAgICAgICAgICdTLTEtNS0yMCcgICAgICB7ICdOVCBBdXRob3JpdHknIH0KICAgICAgICAgICAgJ1MtMS01LTgwLTAnICAgIHsgJ0FsbCBTZXJ2aWNlcyAnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU0NCcgIHsgJ0JVSUxUSU5cQWRtaW5pc3RyYXRvcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU0NScgIHsgJ0JVSUxUSU5cVXNlcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU0NicgIHsgJ0JVSUxUSU5cR3Vlc3RzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NDcnICB7ICdCVUlMVElOXFBvd2VyIFVzZXJzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NDgnICB7ICdCVUlMVElOXEFjY291bnQgT3BlcmF0b3JzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NDknICB7ICdCVUlMVElOXFNlcnZlciBPcGVyYXRvcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU1MCcgIHsgJ0JVSUxUSU5cUHJpbnQgT3BlcmF0b3JzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NTEnICB7ICdCVUlMVElOXEJhY2t1cCBPcGVyYXRvcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU1MicgIHsgJ0JVSUxUSU5cUmVwbGljYXRvcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU1NCcgIHsgJ0JVSUxUSU5cUHJlLVdpbmRvd3MgMjAwMCBDb21wYXRpYmxlIEFjY2VzcycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTU1JyAgeyAnQlVJTFRJTlxSZW1vdGUgRGVza3RvcCBVc2VycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTU2JyAgeyAnQlVJTFRJTlxOZXR3b3JrIENvbmZpZ3VyYXRpb24gT3BlcmF0b3JzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NTcnICB7ICdCVUlMVElOXEluY29taW5nIEZvcmVzdCBUcnVzdCBCdWlsZGVycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTU4JyAgeyAnQlVJTFRJTlxQZXJmb3JtYW5jZSBNb25pdG9yIFVzZXJzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NTknICB7ICdCVUlMVElOXFBlcmZvcm1hbmNlIExvZyBVc2VycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTYwJyAgeyAnQlVJTFRJTlxXaW5kb3dzIEF1dGhvcml6YXRpb24gQWNjZXNzIEdyb3VwJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NjEnICB7ICdCVUlMVElOXFRlcm1pbmFsIFNlcnZlciBMaWNlbnNlIFNlcnZlcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU2MicgIHsgJ0JVSUxUSU5cRGlzdHJpYnV0ZWQgQ09NIFVzZXJzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NjknICB7ICdCVUlMVElOXENyeXB0b2dyYXBoaWMgT3BlcmF0b3JzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NzMnICB7ICdCVUlMVElOXEV2ZW50IExvZyBSZWFkZXJzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NzQnICB7ICdCVUlMVElOXENlcnRpZmljYXRlIFNlcnZpY2UgRENPTSBBY2Nlc3MnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU3NScgIHsgJ0JVSUxUSU5cUkRTIFJlbW90ZSBBY2Nlc3MgU2VydmVycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTc2JyAgeyAnQlVJTFRJTlxSRFMgRW5kcG9pbnQgU2VydmVycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTc3JyAgeyAnQlVJTFRJTlxSRFMgTWFuYWdlbWVudCBTZXJ2ZXJzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NzgnICB7ICdCVUlMVElOXEh5cGVyLVYgQWRtaW5pc3RyYXRvcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU3OScgIHsgJ0JVSUxUSU5cQWNjZXNzIENvbnRyb2wgQXNzaXN0YW5jZSBPcGVyYXRvcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU4MCcgIHsgJ0JVSUxUSU5cQWNjZXNzIENvbnRyb2wgQXNzaXN0YW5jZSBPcGVyYXRvcnMnIH0KICAgICAgICAgICAgRGVmYXVsdCB7IAogICAgICAgICAgICAgICAgJE9iaiA9IChOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyKCRTSUQyKSkKICAgICAgICAgICAgICAgICRPYmouVHJhbnNsYXRlKCBbU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5OVEFjY291bnRdKS5WYWx1ZQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgY2F0Y2ggewogICAgICAgIFdyaXRlLVZlcmJvc2UgIkludmFsaWQgU0lEOiAkU0lEIgogICAgICAgICRTSUQKICAgIH0KfQoKCmZpbHRlciBDb252ZXJ0LUFETmFtZSB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgQ29udmVydHMgdXNlci9ncm91cCBuYW1lcyBmcm9tIE5UNCAoRE9NQUlOXHVzZXIpIG9yIGRvbWFpblNpbXBsZSAodXNlckBkb21haW4uY29tKQogICAgICAgIHRvIGNhbm9uaWNhbCBmb3JtYXQgKGRvbWFpbi5jb20vVXNlcnMvdXNlcikgb3IgTlQ0LgoKICAgICAgICBCYXNlZCBvbiBCaWxsIFN0ZXdhcnQncyBjb2RlIGZyb20gdGhpcyBhcnRpY2xlOiAKICAgICAgICAgICAgaHR0cDovL3dpbmRvd3NpdHByby5jb20vYWN0aXZlLWRpcmVjdG9yeS90cmFuc2xhdGluZy1hY3RpdmUtZGlyZWN0b3J5LW9iamVjdC1uYW1lcy1iZXR3ZWVuLWZvcm1hdHMKCiAgICAuUEFSQU1FVEVSIE9iamVjdE5hbWUKCiAgICAgICAgVGhlIHVzZXIvZ3JvdXAgbmFtZSB0byBjb252ZXJ0LgoKICAgIC5QQVJBTUVURVIgSW5wdXRUeXBlCgogICAgICAgIFRoZSBJbnB1dFR5cGUgb2YgdGhlIHVzZXIvZ3JvdXAgbmFtZSAoIk5UNCIsIlNpbXBsZSIsIkNhbm9uaWNhbCIpLgoKICAgIC5QQVJBTUVURVIgT3V0cHV0VHlwZQoKICAgICAgICBUaGUgT3V0cHV0VHlwZSBvZiB0aGUgdXNlci9ncm91cCBuYW1lICgiTlQ0IiwiU2ltcGxlIiwiQ2Fub25pY2FsIikuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBDb252ZXJ0LUFETmFtZSAtT2JqZWN0TmFtZSAiZGV2XGRmbSIKICAgICAgICAKICAgICAgICBSZXR1cm5zICJkZXYudGVzdGxhYi5sb2NhbC9Vc2Vycy9EYXZlIgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gQ29udmVydC1TaWRUb05hbWUgIlMtLi4uIiB8IENvbnZlcnQtQUROYW1lCiAgICAgICAgCiAgICAgICAgUmV0dXJucyB0aGUgY2Fub25pY2FsIG5hbWUgZm9yIHRoZSByZXNvbHZlZCBTSUQuCgogICAgLkxJTksKCiAgICAgICAgaHR0cDovL3dpbmRvd3NpdHByby5jb20vYWN0aXZlLWRpcmVjdG9yeS90cmFuc2xhdGluZy1hY3RpdmUtZGlyZWN0b3J5LW9iamVjdC1uYW1lcy1iZXR3ZWVuLWZvcm1hdHMKIz4KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE9iamVjdE5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlU2V0KCJOVDQiLCJTaW1wbGUiLCJDYW5vbmljYWwiKV0KICAgICAgICAkSW5wdXRUeXBlLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgIFtWYWxpZGF0ZVNldCgiTlQ0IiwiU2ltcGxlIiwiQ2Fub25pY2FsIildCiAgICAgICAgJE91dHB1dFR5cGUKICAgICkKCiAgICAkTmFtZVR5cGVzID0gQHsKICAgICAgICAnQ2Fub25pY2FsJyA9IDIKICAgICAgICAnTlQ0JyAgICAgICA9IDMKICAgICAgICAnU2ltcGxlJyAgICA9IDUKICAgIH0KCiAgICBpZigtbm90ICRQU0JvdW5kUGFyYW1ldGVyc1snSW5wdXRUeXBlJ10pIHsKICAgICAgICBpZiggKCRPYmplY3ROYW1lLnNwbGl0KCcvJykpLkNvdW50IC1lcSAyICkgewogICAgICAgICAgICAkT2JqZWN0TmFtZSA9ICRPYmplY3ROYW1lLnJlcGxhY2UoJy8nLCAnXCcpCiAgICAgICAgfQoKICAgICAgICBpZigkT2JqZWN0TmFtZSAtbWF0Y2ggIl5bQS1aYS16XStcXFtBLVphLXogXSsiKSB7CiAgICAgICAgICAgICRJbnB1dFR5cGUgPSAnTlQ0JwogICAgICAgIH0KICAgICAgICBlbHNlaWYoJE9iamVjdE5hbWUgLW1hdGNoICJeW0EtWmEteiBdK0BbQS1aYS16XC5dKyIpIHsKICAgICAgICAgICAgJElucHV0VHlwZSA9ICdTaW1wbGUnCiAgICAgICAgfQogICAgICAgIGVsc2VpZigkT2JqZWN0TmFtZSAtbWF0Y2ggIl5bQS1aYS16XC5dKy9bQS1aYS16XSsvW0EtWmEtei8gXSsiKSB7CiAgICAgICAgICAgICRJbnB1dFR5cGUgPSAnQ2Fub25pY2FsJwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiQ2FuIG5vdCBpZGVudGlmeSBJblR5cGUgZm9yICRPYmplY3ROYW1lIgogICAgICAgICAgICByZXR1cm4gJE9iamVjdE5hbWUKICAgICAgICB9CiAgICB9CiAgICBlbHNlaWYoJElucHV0VHlwZSAtZXEgJ05UNCcpIHsKICAgICAgICAkT2JqZWN0TmFtZSA9ICRPYmplY3ROYW1lLnJlcGxhY2UoJy8nLCAnXCcpCiAgICB9CgogICAgaWYoLW5vdCAkUFNCb3VuZFBhcmFtZXRlcnNbJ091dHB1dFR5cGUnXSkgewogICAgICAgICRPdXRwdXRUeXBlID0gU3dpdGNoKCRJbnB1dFR5cGUpIHsKICAgICAgICAgICAgJ05UNCcgeydDYW5vbmljYWwnfQogICAgICAgICAgICAnU2ltcGxlJyB7J05UNCd9CiAgICAgICAgICAgICdDYW5vbmljYWwnIHsnTlQ0J30KICAgICAgICB9CiAgICB9CgogICAgIyB0cnkgdG8gZXh0cmFjdCB0aGUgZG9tYWluIGZyb20gdGhlIGdpdmVuIGZvcm1hdAogICAgJERvbWFpbiA9IFN3aXRjaCgkSW5wdXRUeXBlKSB7CiAgICAgICAgJ05UNCcgeyAkT2JqZWN0TmFtZS5zcGxpdCgiXCIpWzBdIH0KICAgICAgICAnU2ltcGxlJyB7ICRPYmplY3ROYW1lLnNwbGl0KCJAIilbMV0gfQogICAgICAgICdDYW5vbmljYWwnIHsgJE9iamVjdE5hbWUuc3BsaXQoIi8iKVswXSB9CiAgICB9CgogICAgIyBBY2Nlc3NvciBmdW5jdGlvbnMgdG8gc2ltcGxpZnkgY2FsbHMgdG8gTmFtZVRyYW5zbGF0ZQogICAgZnVuY3Rpb24gSW52b2tlLU1ldGhvZChbX19Db21PYmplY3RdICRPYmplY3QsIFtTdHJpbmddICRNZXRob2QsICRQYXJhbWV0ZXJzKSB7CiAgICAgICAgJE91dHB1dCA9ICRPYmplY3QuR2V0VHlwZSgpLkludm9rZU1lbWJlcigkTWV0aG9kLCAiSW52b2tlTWV0aG9kIiwgJE51bGwsICRPYmplY3QsICRQYXJhbWV0ZXJzKQogICAgICAgIGlmICggJE91dHB1dCApIHsgJE91dHB1dCB9CiAgICB9CiAgICBmdW5jdGlvbiBTZXQtUHJvcGVydHkoW19fQ29tT2JqZWN0XSAkT2JqZWN0LCBbU3RyaW5nXSAkUHJvcGVydHksICRQYXJhbWV0ZXJzKSB7CiAgICAgICAgW1ZvaWRdICRPYmplY3QuR2V0VHlwZSgpLkludm9rZU1lbWJlcigkUHJvcGVydHksICJTZXRQcm9wZXJ0eSIsICROdWxsLCAkT2JqZWN0LCAkUGFyYW1ldGVycykKICAgIH0KCiAgICAkVHJhbnNsYXRlID0gTmV3LU9iamVjdCAtQ29tT2JqZWN0IE5hbWVUcmFuc2xhdGUKCiAgICB0cnkgewogICAgICAgIEludm9rZS1NZXRob2QgJFRyYW5zbGF0ZSAiSW5pdCIgKDEsICREb21haW4pCiAgICB9CiAgICBjYXRjaCBbU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5NZXRob2RJbnZvY2F0aW9uRXhjZXB0aW9uXSB7IAogICAgICAgIFdyaXRlLVZlcmJvc2UgIkVycm9yIHdpdGggdHJhbnNsYXRlIGluaXQgaW4gQ29udmVydC1BRE5hbWU6ICRfIgogICAgfQoKICAgIFNldC1Qcm9wZXJ0eSAkVHJhbnNsYXRlICJDaGFzZVJlZmVycmFsIiAoMHg2MCkKCiAgICB0cnkgewogICAgICAgIEludm9rZS1NZXRob2QgJFRyYW5zbGF0ZSAiU2V0IiAoJE5hbWVUeXBlc1skSW5wdXRUeXBlXSwgJE9iamVjdE5hbWUpCiAgICAgICAgKEludm9rZS1NZXRob2QgJFRyYW5zbGF0ZSAiR2V0IiAoJE5hbWVUeXBlc1skT3V0cHV0VHlwZV0pKQogICAgfQogICAgY2F0Y2ggW1N5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uTWV0aG9kSW52b2NhdGlvbkV4Y2VwdGlvbl0gewogICAgICAgIFdyaXRlLVZlcmJvc2UgIkVycm9yIHdpdGggdHJhbnNsYXRlIFNldC9HZXQgaW4gQ29udmVydC1BRE5hbWU6ICRfIgogICAgfQp9CgoKZnVuY3Rpb24gQ29udmVydEZyb20tVUFDVmFsdWUgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIENvbnZlcnRzIGEgVUFDIGludCB2YWx1ZSB0byBodW1hbiByZWFkYWJsZSBmb3JtLgoKICAgIC5QQVJBTUVURVIgVmFsdWUKCiAgICAgICAgVGhlIGludCBVQUMgdmFsdWUgdG8gY29udmVydC4KCiAgICAuUEFSQU1FVEVSIFNob3dBbGwKCiAgICAgICAgU2hvdyBhbGwgVUFDIHZhbHVlcywgd2l0aCBhICsgaW5kaWNhdGluZyB0aGUgdmFsdWUgaXMgY3VycmVudGx5IHNldC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IENvbnZlcnRGcm9tLVVBQ1ZhbHVlIC1WYWx1ZSA2NjE3NgoKICAgICAgICBDb252ZXJ0IHRoZSBVQUMgdmFsdWUgNjYxNzYgdG8gaHVtYW4gcmVhZGFibGUgZm9ybWF0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldFVzZXIgamFzb24gfCBzZWxlY3QgdXNlcmFjY291bnRjb250cm9sIHwgQ29udmVydEZyb20tVUFDVmFsdWUKCiAgICAgICAgQ29udmVydCB0aGUgVUFDIHZhbHVlIGZvciAnamFzb24nIHRvIGh1bWFuIHJlYWRhYmxlIGZvcm1hdC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRVc2VyIGphc29uIHwgc2VsZWN0IHVzZXJhY2NvdW50Y29udHJvbCB8IENvbnZlcnRGcm9tLVVBQ1ZhbHVlIC1TaG93QWxsCgogICAgICAgIENvbnZlcnQgdGhlIFVBQyB2YWx1ZSBmb3IgJ2phc29uJyB0byBodW1hbiByZWFkYWJsZSBmb3JtYXQsIHNob3dpbmcgYWxsCiAgICAgICAgcG9zc2libGUgVUFDIHZhbHVlcy4KIz4KICAgIAogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgJFZhbHVlLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRTaG93QWxsCiAgICApCgogICAgYmVnaW4gewogICAgICAgICMgdmFsdWVzIGZyb20gaHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20vZW4tdXMva2IvMzA1MTQ0CiAgICAgICAgJFVBQ1ZhbHVlcyA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkLk9yZGVyZWREaWN0aW9uYXJ5CiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIlNDUklQVCIsIDEpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIkFDQ09VTlRESVNBQkxFIiwgMikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiSE9NRURJUl9SRVFVSVJFRCIsIDgpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIkxPQ0tPVVQiLCAxNikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiUEFTU1dEX05PVFJFUUQiLCAzMikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiUEFTU1dEX0NBTlRfQ0hBTkdFIiwgNjQpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIkVOQ1JZUFRFRF9URVhUX1BXRF9BTExPV0VEIiwgMTI4KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJURU1QX0RVUExJQ0FURV9BQ0NPVU5UIiwgMjU2KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJOT1JNQUxfQUNDT1VOVCIsIDUxMikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiSU5URVJET01BSU5fVFJVU1RfQUNDT1VOVCIsIDIwNDgpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIldPUktTVEFUSU9OX1RSVVNUX0FDQ09VTlQiLCA0MDk2KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJTRVJWRVJfVFJVU1RfQUNDT1VOVCIsIDgxOTIpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIkRPTlRfRVhQSVJFX1BBU1NXT1JEIiwgNjU1MzYpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIk1OU19MT0dPTl9BQ0NPVU5UIiwgMTMxMDcyKQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJTTUFSVENBUkRfUkVRVUlSRUQiLCAyNjIxNDQpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIlRSVVNURURfRk9SX0RFTEVHQVRJT04iLCA1MjQyODgpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIk5PVF9ERUxFR0FURUQiLCAxMDQ4NTc2KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJVU0VfREVTX0tFWV9PTkxZIiwgMjA5NzE1MikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiRE9OVF9SRVFfUFJFQVVUSCIsIDQxOTQzMDQpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIlBBU1NXT1JEX0VYUElSRUQiLCA4Mzg4NjA4KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJUUlVTVEVEX1RPX0FVVEhfRk9SX0RFTEVHQVRJT04iLCAxNjc3NzIxNikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiUEFSVElBTF9TRUNSRVRTX0FDQ09VTlQiLCA2NzEwODg2NCkKICAgIH0KCiAgICBwcm9jZXNzIHsKCiAgICAgICAgJFJlc3VsdFVBQ1ZhbHVlcyA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkLk9yZGVyZWREaWN0aW9uYXJ5CgogICAgICAgIGlmKCRWYWx1ZSAtaXMgW0ludF0pIHsKICAgICAgICAgICAgJEludFZhbHVlID0gJFZhbHVlCiAgICAgICAgfQogICAgICAgIGVsc2VpZiAoJFZhbHVlIC1pcyBbUFNDdXN0b21PYmplY3RdKSB7CiAgICAgICAgICAgIGlmKCRWYWx1ZS51c2VyYWNjb3VudGNvbnRyb2wpIHsKICAgICAgICAgICAgICAgICRJbnRWYWx1ZSA9ICRWYWx1ZS51c2VyYWNjb3VudGNvbnRyb2wKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiSW52YWxpZCBvYmplY3QgaW5wdXQgZm9yIC1WYWx1ZSA6ICRWYWx1ZSIKICAgICAgICAgICAgcmV0dXJuICROdWxsIAogICAgICAgIH0KCiAgICAgICAgaWYoJFNob3dBbGwpIHsKICAgICAgICAgICAgZm9yZWFjaCAoJFVBQ1ZhbHVlIGluICRVQUNWYWx1ZXMuR2V0RW51bWVyYXRvcigpKSB7CiAgICAgICAgICAgICAgICBpZiggKCRJbnRWYWx1ZSAtYmFuZCAkVUFDVmFsdWUuVmFsdWUpIC1lcSAkVUFDVmFsdWUuVmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAkUmVzdWx0VUFDVmFsdWVzLkFkZCgkVUFDVmFsdWUuTmFtZSwgIiQoJFVBQ1ZhbHVlLlZhbHVlKSsiKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJFJlc3VsdFVBQ1ZhbHVlcy5BZGQoJFVBQ1ZhbHVlLk5hbWUsICIkKCRVQUNWYWx1ZS5WYWx1ZSkiKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBmb3JlYWNoICgkVUFDVmFsdWUgaW4gJFVBQ1ZhbHVlcy5HZXRFbnVtZXJhdG9yKCkpIHsKICAgICAgICAgICAgICAgIGlmKCAoJEludFZhbHVlIC1iYW5kICRVQUNWYWx1ZS5WYWx1ZSkgLWVxICRVQUNWYWx1ZS5WYWx1ZSkgewogICAgICAgICAgICAgICAgICAgICRSZXN1bHRVQUNWYWx1ZXMuQWRkKCRVQUNWYWx1ZS5OYW1lLCAiJCgkVUFDVmFsdWUuVmFsdWUpIikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAkUmVzdWx0VUFDVmFsdWVzCiAgICB9Cn0KCgpmaWx0ZXIgR2V0LVByb3h5IHsKPCMKICAgIC5TWU5PUFNJUwogICAgCiAgICAgICAgRW51bWVyYXRlcyB0aGUgcHJveHkgc2VydmVyIGFuZCBXUEFEIGNvbmVudHMgZm9yIHRoZSBjdXJyZW50IHVzZXIuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlck5hbWUKCiAgICAgICAgVGhlIGNvbXB1dGVybmFtZSB0byBlbnVtZXJhdGUgcHJveHkgc2V0dGluZ3Mgb24sIGRlZmF1bHRzIHRvIGxvY2FsIGhvc3QuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtUHJveHkgCiAgICAgICAgCiAgICAgICAgUmV0dXJucyB0aGUgY3VycmVudCBwcm94eSBzZXR0aW5ncy4KIz4KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJEVOVjpDT01QVVRFUk5BTUUKICAgICkKCiAgICB0cnkgewogICAgICAgICRSZWcgPSBbTWljcm9zb2Z0LldpbjMyLlJlZ2lzdHJ5S2V5XTo6T3BlblJlbW90ZUJhc2VLZXkoJ0N1cnJlbnRVc2VyJywgJENvbXB1dGVyTmFtZSkKICAgICAgICAkUmVnS2V5ID0gJFJlZy5PcGVuU3Via2V5KCJTT0ZUV0FSRVxcTWljcm9zb2Z0XFxXaW5kb3dzXFxDdXJyZW50VmVyc2lvblxcSW50ZXJuZXQgU2V0dGluZ3MiKQogICAgICAgICRQcm94eVNlcnZlciA9ICRSZWdLZXkuR2V0VmFsdWUoJ1Byb3h5U2VydmVyJykKICAgICAgICAkQXV0b0NvbmZpZ1VSTCA9ICRSZWdLZXkuR2V0VmFsdWUoJ0F1dG9Db25maWdVUkwnKQoKICAgICAgICAkV3BhZCA9ICIiCiAgICAgICAgaWYoJEF1dG9Db25maWdVUkwgLWFuZCAoJEF1dG9Db25maWdVUkwgLW5lICIiKSkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJFdwYWQgPSAoTmV3LU9iamVjdCBOZXQuV2ViY2xpZW50KS5Eb3dubG9hZFN0cmluZygkQXV0b0NvbmZpZ1VSTCkKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJFcnJvciBjb25uZWN0aW5nIHRvIEF1dG9Db25maWdVUkwgOiAkQXV0b0NvbmZpZ1VSTCIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICBpZigkUHJveHlTZXJ2ZXIgLW9yICRBdXRvQ29uZmlnVXJsKSB7CgogICAgICAgICAgICAkUHJvcGVydGllcyA9IEB7CiAgICAgICAgICAgICAgICAnUHJveHlTZXJ2ZXInID0gJFByb3h5U2VydmVyCiAgICAgICAgICAgICAgICAnQXV0b0NvbmZpZ1VSTCcgPSAkQXV0b0NvbmZpZ1VSTAogICAgICAgICAgICAgICAgJ1dwYWQnID0gJFdwYWQKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5ICRQcm9wZXJ0aWVzCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJObyBwcm94eSBzZXR0aW5ncyBmb3VuZCBmb3IgJENvbXB1dGVyTmFtZSIKICAgICAgICB9CiAgICB9CiAgICBjYXRjaCB7CiAgICAgICAgV3JpdGUtV2FybmluZyAiRXJyb3IgZW51bWVyYXRpbmcgcHJveHkgc2V0dGluZ3MgZm9yICRDb21wdXRlck5hbWUgOiAkXyIKICAgIH0KfQoKCmZ1bmN0aW9uIFJlcXVlc3QtU1BOVGlja2V0IHsKPCMKICAgIC5TWU5PUFNJUwogICAgCiAgICAgICAgUmVxdWVzdCB0aGUga2VyYmVyb3MgdGlja2V0IGZvciBhIHNwZWNpZmllZCBzZXJ2aWNlIHByaW5jaXBhbCBuYW1lIChTUE4pLgoKICAgIC5QQVJBTUVURVIgU1BOCgogICAgICAgIFRoZSBzZXJ2aWNlIHByaW5jaXBhbCBuYW1lIHRvIHJlcXVlc3QgdGhlIHRpY2tldCBmb3IuIFJlcXVpcmVkLgoKICAgIC5QQVJBTUVURVIgRW5jUGFydAoKICAgICAgICBTd2l0Y2guIFJldHVybiB0aGUgZW5jcnlwdGVkIHBvcnRpb24gb2YgdGhlIHRpY2tldCAoY2lwaGVyKS4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IFJlcXVlc3QtU1BOVGlja2V0IC1TUE4gIkhUVFAvd2ViLnRlc3RsYWIubG9jYWwiCgogICAgICAgIFJlcXVlc3QgYSBrZXJiZXJvcyBzZXJ2aWNlIHRpY2tldCBmb3IgdGhlIHNwZWNpZmllZCBTUE4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBSZXF1ZXN0LVNQTlRpY2tldCAtU1BOICJIVFRQL3dlYi50ZXN0bGFiLmxvY2FsIiAtRW5jUGFydAoKICAgICAgICBSZXF1ZXN0IGEga2VyYmVyb3Mgc2VydmljZSB0aWNrZXQgZm9yIHRoZSBzcGVjaWZpZWQgU1BOIGFuZCByZXR1cm4gdGhlIGVuY3J5cHRlZCBwb3J0aW9uIG9mIHRoZSB0aWNrZXQuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiAiSFRUUC93ZWIxLnRlc3RsYWIubG9jYWwiLCJIVFRQL3dlYjIudGVzdGxhYi5sb2NhbCIgfCBSZXF1ZXN0LVNQTlRpY2tldAoKICAgICAgICBSZXF1ZXN0IGtlcmJlcm9zIHNlcnZpY2UgdGlja2V0cyBmb3IgYWxsIFNQTnMgcGFzc2VkIG9uIHRoZSBwaXBlbGluZS4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRVc2VyIC1TUE4gfCBSZXF1ZXN0LVNQTlRpY2tldAoKICAgICAgICBSZXF1ZXN0IGtlcmJlcm9zIHNlcnZpY2UgdGlja2V0cyBmb3IgYWxsIHVzZXJzIHdpdGggbm9uLW51bGwgU1BOcy4KIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlKV0KICAgICAgICBbUFNPYmplY3RbXV0KICAgICAgICAkVXNlcnMsCgogICAgICAgIFtBbGlhcygnRW5jcnlwdGVkUGFydCcpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEVuY1BhcnQKICAgICkKCiAgICBiZWdpbiB7CiAgICAgICAgQWRkLVR5cGUgLUFzc2VtYmx5TmFtZSBTeXN0ZW0uSWRlbnRpdHlNb2RlbAogICAgfQoKICAgIHByb2Nlc3MgewogICAgICAgIEZvckVhY2goJFVzZXIgaW4gJFVzZXJzKSB7CiAgICAgICAgICAgIGlmKCRVc2VyLlNhbUFjY291bnROYW1lIC1uZSAna3JidGd0JykgewogICAgICAgICAgICAgICAgJFVzZXJTUE4gPSAkVXNlci5TZXJ2aWNlUHJpbmNpcGFsTmFtZQogICAgICAgICAgICAgICAgaWYgKCEkRW5jUGFydCkgewogICAgICAgICAgICAgICAgICAgIE5ldy1PYmplY3QgU3lzdGVtLklkZW50aXR5TW9kZWwuVG9rZW5zLktlcmJlcm9zUmVxdWVzdG9yU2VjdXJpdHlUb2tlbiAtQXJndW1lbnRMaXN0ICRVc2VyU1BOCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkVGlja2V0ID0gTmV3LU9iamVjdCBTeXN0ZW0uSWRlbnRpdHlNb2RlbC5Ub2tlbnMuS2VyYmVyb3NSZXF1ZXN0b3JTZWN1cml0eVRva2VuIC1Bcmd1bWVudExpc3QgJFVzZXJTUE4KICAgICAgICAgICAgICAgICAgICAkVGlja2V0Qnl0ZVN0cmVhbSA9ICRUaWNrZXQuR2V0UmVxdWVzdCgpCiAgICAgICAgICAgICAgICAgICAgaWYgKCRUaWNrZXRCeXRlU3RyZWFtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRUaWNrZXRIZXhTdHJlYW0gPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRUaWNrZXRCeXRlU3RyZWFtKSAtcmVwbGFjZSAiLSIKICAgICAgICAgICAgICAgICAgICAgICAgW1N5c3RlbS5Db2xsZWN0aW9ucy5BcnJheUxpc3RdJFBhcnRzID0gKCRUaWNrZXRIZXhTdHJlYW0gLXJlcGxhY2UgJ14oLio/KTA0ODIwLi4uKC4qKScsJyQyJykgLVNwbGl0ICJBNDgyMDEiCiAgICAgICAgICAgICAgICAgICAgICAgICRQYXJ0cy5SZW1vdmVBdCgkUGFydHMuQ291bnQgLSAxKQogICAgICAgICAgICAgICAgICAgICAgICAkSGFzaCA9ICRQYXJ0cyAtam9pbiAnQTQ4MjAxJwogICAgICAgICAgICAgICAgICAgICAgICAkSGFzaCA9ICRIYXNoLkluc2VydCgzMiwgJyQnKQogICAgICAgICAgICAgICAgICAgICAgICAkT3V0ID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NhbUFjY291bnROYW1lJyAkVXNlci5TYW1BY2NvdW50TmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NlcnZpY2VQcmluY2lwYWxOYW1lJyAkVGlja2V0LlNlcnZpY2VQcmluY2lwYWxOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSGFzaCcgImAka3JiNXRnc2AkdW5rbm93bjokSGFzaCIKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICRPdXQKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtUGF0aEFjbCB7CjwjCiAgICAuU1lOT1BTSVMKICAgIAogICAgICAgIEVudW1lcmF0ZXMgdGhlIEFDTCBmb3IgYSBnaXZlbiBmaWxlIHBhdGguCgogICAgLlBBUkFNRVRFUiBQYXRoCgogICAgICAgIFRoZSBsb2NhbC9yZW1vdGUgcGF0aCB0byBlbnVtZXJhdGUgdGhlIEFDTHMgZm9yLgoKICAgIC5QQVJBTUVURVIgUmVjdXJzZQogICAgICAgIAogICAgICAgIElmIGFueSBBQ0wgcmVzdWx0cyBhcmUgZ3JvdXBzLCByZWN1cnNlIGFuZCByZXRyaWV2ZSB1c2VyIG1lbWJlcnNoaXAuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtUGF0aEFjbCAiXFxTRVJWRVJcU2hhcmVcIiAKICAgICAgICAKICAgICAgICBSZXR1cm5zIEFDTHMgZm9yIHRoZSBnaXZlbiBVTkMgc2hhcmUuCiM+CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRQYXRoLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZWN1cnNlCiAgICApCgogICAgYmVnaW4gewoKICAgICAgICBmdW5jdGlvbiBDb252ZXJ0LUZpbGVSaWdodCB7CgogICAgICAgICAgICAjIEZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yODAyOTg3Mi9yZXRyaWV2aW5nLXNlY3VyaXR5LWRlc2NyaXB0b3ItYW5kLWdldHRpbmctbnVtYmVyLWZvci1maWxlc3lzdGVtcmlnaHRzCgogICAgICAgICAgICBbQ21kbGV0QmluZGluZygpXQogICAgICAgICAgICBwYXJhbSgKICAgICAgICAgICAgICAgIFtJbnRdCiAgICAgICAgICAgICAgICAkRlNSCiAgICAgICAgICAgICkKCiAgICAgICAgICAgICRBY2Nlc3NNYXNrID0gQHsKICAgICAgICAgICAgICBbdWludDMyXScweDgwMDAwMDAwJyA9ICdHZW5lcmljUmVhZCcKICAgICAgICAgICAgICBbdWludDMyXScweDQwMDAwMDAwJyA9ICdHZW5lcmljV3JpdGUnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgyMDAwMDAwMCcgPSAnR2VuZXJpY0V4ZWN1dGUnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgxMDAwMDAwMCcgPSAnR2VuZXJpY0FsbCcKICAgICAgICAgICAgICBbdWludDMyXScweDAyMDAwMDAwJyA9ICdNYXhpbXVtQWxsb3dlZCcKICAgICAgICAgICAgICBbdWludDMyXScweDAxMDAwMDAwJyA9ICdBY2Nlc3NTeXN0ZW1TZWN1cml0eScKICAgICAgICAgICAgICBbdWludDMyXScweDAwMTAwMDAwJyA9ICdTeW5jaHJvbml6ZScKICAgICAgICAgICAgICBbdWludDMyXScweDAwMDgwMDAwJyA9ICdXcml0ZU93bmVyJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwNDAwMDAnID0gJ1dyaXRlREFDJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMjAwMDAnID0gJ1JlYWRDb250cm9sJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMTAwMDAnID0gJ0RlbGV0ZScKICAgICAgICAgICAgICBbdWludDMyXScweDAwMDAwMTAwJyA9ICdXcml0ZUF0dHJpYnV0ZXMnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDA4MCcgPSAnUmVhZEF0dHJpYnV0ZXMnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDA0MCcgPSAnRGVsZXRlQ2hpbGQnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDAyMCcgPSAnRXhlY3V0ZS9UcmF2ZXJzZScKICAgICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDEwJyA9ICdXcml0ZUV4dGVuZGVkQXR0cmlidXRlcycKICAgICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDA4JyA9ICdSZWFkRXh0ZW5kZWRBdHRyaWJ1dGVzJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMDQnID0gJ0FwcGVuZERhdGEvQWRkU3ViZGlyZWN0b3J5JwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMDInID0gJ1dyaXRlRGF0YS9BZGRGaWxlJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMDEnID0gJ1JlYWREYXRhL0xpc3REaXJlY3RvcnknCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRTaW1wbGVQZXJtaXNzaW9ucyA9IEB7CiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgxZjAxZmYnID0gJ0Z1bGxDb250cm9sJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDMwMWJmJyA9ICdNb2RpZnknCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMjAwYTknID0gJ1JlYWRBbmRFeGVjdXRlJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDIwMTlmJyA9ICdSZWFkQW5kV3JpdGUnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMjAwODknID0gJ1JlYWQnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAxMTYnID0gJ1dyaXRlJwogICAgICAgICAgICB9CgogICAgICAgICAgICAkUGVybWlzc2lvbnMgPSBAKCkKCiAgICAgICAgICAgICMgZ2V0IHNpbXBsZSBwZXJtaXNzaW9uCiAgICAgICAgICAgICRQZXJtaXNzaW9ucyArPSAkU2ltcGxlUGVybWlzc2lvbnMuS2V5cyB8ICAlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCgkRlNSIC1iYW5kICRfKSAtZXEgJF8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU2ltcGxlUGVybWlzc2lvbnNbJF9dCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZTUiA9ICRGU1IgLWJhbmQgKC1ub3QgJF8pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgZ2V0IHJlbWFpbmluZyBleHRlbmRlZCBwZXJtaXNzaW9ucwogICAgICAgICAgICAkUGVybWlzc2lvbnMgKz0gJEFjY2Vzc01hc2suS2V5cyB8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHsgJEZTUiAtYmFuZCAkXyB9IHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICUgeyAkQWNjZXNzTWFza1skX10gfQoKICAgICAgICAgICAgKCRQZXJtaXNzaW9ucyB8ID97JF99KSAtam9pbiAiLCIKICAgICAgICB9CiAgICB9CgogICAgcHJvY2VzcyB7CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgICRBQ0wgPSBHZXQtQWNsIC1QYXRoICRQYXRoCgogICAgICAgICAgICAkQUNMLkdldEFjY2Vzc1J1bGVzKCR0cnVlLCR0cnVlLFtTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllcl0pIHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICAgICAgICAgICROYW1lcyA9IEAoKQogICAgICAgICAgICAgICAgaWYgKCRfLklkZW50aXR5UmVmZXJlbmNlIC1tYXRjaCAnXlMtMS01LTIxLVswLTldKy1bMC05XSstWzAtOV0rLVswLTldKycpIHsKICAgICAgICAgICAgICAgICAgICAkT2JqZWN0ID0gR2V0LUFET2JqZWN0IC1TSUQgJF8uSWRlbnRpdHlSZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAkTmFtZXMgPSBAKCkKICAgICAgICAgICAgICAgICAgICAkU0lEcyA9IEAoJE9iamVjdC5vYmplY3RzaWQpCgogICAgICAgICAgICAgICAgICAgIGlmICgkUmVjdXJzZSAtYW5kIChAKCcyNjg0MzU0NTYnLCcyNjg0MzU0NTcnLCc1MzY4NzA5MTInLCc1MzY4NzA5MTMnKSAtY29udGFpbnMgJE9iamVjdC5zYW1BY2NvdW50VHlwZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNJRHMgKz0gR2V0LU5ldEdyb3VwTWVtYmVyIC1TSUQgJE9iamVjdC5vYmplY3RzaWQgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBNZW1iZXJTaWQKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICRTSURzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAkTmFtZXMgKz0gLEAoJF8sIChDb252ZXJ0LVNpZFRvTmFtZSAkXykpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJE5hbWVzICs9ICxAKCRfLklkZW50aXR5UmVmZXJlbmNlLlZhbHVlLCAoQ29udmVydC1TaWRUb05hbWUgJF8uSWRlbnRpdHlSZWZlcmVuY2UuVmFsdWUpKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIEZvckVhY2goJE5hbWUgaW4gJE5hbWVzKSB7CiAgICAgICAgICAgICAgICAgICAgJE91dCA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1BhdGgnICRQYXRoCiAgICAgICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdGaWxlU3lzdGVtUmlnaHRzJyAoQ29udmVydC1GaWxlUmlnaHQgLUZTUiAkXy5GaWxlU3lzdGVtUmlnaHRzLnZhbHVlX18pCiAgICAgICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJZGVudGl0eVJlZmVyZW5jZScgJE5hbWVbMV0KICAgICAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lkZW50aXR5U0lEJyAkTmFtZVswXQogICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQWNjZXNzQ29udHJvbFR5cGUnICRfLkFjY2Vzc0NvbnRyb2xUeXBlCiAgICAgICAgICAgICAgICAgICAgJE91dAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtV2FybmluZyAkXwogICAgICAgIH0KICAgIH0KfQoKCmZpbHRlciBHZXQtTmFtZUZpZWxkIHsKPCMKICAgIC5TWU5PUFNJUwogICAgCiAgICAgICAgSGVscGVyIHRoYXQgYXR0ZW1wdHMgdG8gZXh0cmFjdCBhcHByb3ByaWF0ZSBmaWVsZCBuYW1lcyBmcm9tCiAgICAgICAgcGFzc2VkIGNvbXB1dGVyIG9iamVjdHMuCgogICAgLlBBUkFNRVRFUiBPYmplY3QKCiAgICAgICAgVGhlIHBhc3NlZCBvYmplY3QgdG8gZXh0cmFjdCBuYW1lIGZpZWxkcyBmcm9tLgoKICAgIC5QQVJBTUVURVIgRG5zSG9zdE5hbWUKICAgICAgICAKICAgICAgICBBIERuc0hvc3ROYW1lIHRvIGV4dHJhY3QgdGhyb3VnaCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lLgoKICAgIC5QQVJBTUVURVIgTmFtZQogICAgICAgIAogICAgICAgIEEgTmFtZSB0byBleHRyYWN0IHRocm91Z2ggVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZS4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRDb21wdXRlciAtRnVsbERhdGEgfCBHZXQtTmFtZUZpZWxkCiM+CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtPYmplY3RdCiAgICAgICAgJE9iamVjdCwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERuc0hvc3ROYW1lLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTmFtZQogICAgKQoKICAgIGlmKCRQU0JvdW5kUGFyYW1ldGVyc1snRG5zSG9zdE5hbWUnXSkgewogICAgICAgICREbnNIb3N0TmFtZQogICAgfQogICAgZWxzZWlmKCRQU0JvdW5kUGFyYW1ldGVyc1snTmFtZSddKSB7CiAgICAgICAgJE5hbWUKICAgIH0KICAgIGVsc2VpZigkT2JqZWN0KSB7CiAgICAgICAgaWYgKCBbYm9vbF0oJE9iamVjdC5QU29iamVjdC5Qcm9wZXJ0aWVzLm5hbWUgLW1hdGNoICJkbnNob3N0bmFtZSIpICkgewogICAgICAgICAgICAjIG9iamVjdHMgZnJvbSBHZXQtTmV0Q29tcHV0ZXIKICAgICAgICAgICAgJE9iamVjdC5kbnNob3N0bmFtZQogICAgICAgIH0KICAgICAgICBlbHNlaWYgKCBbYm9vbF0oJE9iamVjdC5QU29iamVjdC5Qcm9wZXJ0aWVzLm5hbWUgLW1hdGNoICJuYW1lIikgKSB7CiAgICAgICAgICAgICMgb2JqZWN0cyBmcm9tIEdldC1OZXREb21haW5Db250cm9sbGVyCiAgICAgICAgICAgICRPYmplY3QubmFtZQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgIyBzdHJpbmdzIGFuZCBjYXRjaCBhbGxzCiAgICAgICAgICAgICRPYmplY3QKICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICByZXR1cm4gJE51bGwKICAgIH0KfQoKCmZ1bmN0aW9uIENvbnZlcnQtTERBUFByb3BlcnR5IHsKPCMKICAgIC5TWU5PUFNJUwogICAgCiAgICAgICAgSGVscGVyIHRoYXQgY29udmVydHMgc3BlY2lmaWMgTERBUCBwcm9wZXJ0eSByZXN1bHQgZmllbGRzLgogICAgICAgIFVzZWQgYnkgc2V2ZXJhbCBvZiB0aGUgR2V0LU5ldCogZnVuY3Rpb24uCgogICAgLlBBUkFNRVRFUiBQcm9wZXJ0aWVzCgogICAgICAgIFByb3BlcnRpZXMgb2JqZWN0IHRvIGV4dHJhY3Qgb3V0IExEQVAgZmllbGRzIGZvciBkaXNwbGF5LgojPgogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgICRQcm9wZXJ0aWVzCiAgICApCgogICAgJE9iamVjdFByb3BlcnRpZXMgPSBAe30KCiAgICAkUHJvcGVydGllcy5Qcm9wZXJ0eU5hbWVzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgIGlmICgoJF8gLWVxICJvYmplY3RzaWQiKSAtb3IgKCRfIC1lcSAic2lkaGlzdG9yeSIpKSB7CiAgICAgICAgICAgICMgY29udmVydCB0aGUgU0lEIHRvIGEgc3RyaW5nCiAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9IChOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyKCRQcm9wZXJ0aWVzWyRfXVswXSwwKSkuVmFsdWUKICAgICAgICB9CiAgICAgICAgZWxzZWlmKCRfIC1lcSAib2JqZWN0Z3VpZCIpIHsKICAgICAgICAgICAgIyBjb252ZXJ0IHRoZSBHVUlEIHRvIGEgc3RyaW5nCiAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9IChOZXctT2JqZWN0IEd1aWQgKCwkUHJvcGVydGllc1skX11bMF0pKS5HdWlkCiAgICAgICAgfQogICAgICAgIGVsc2VpZiggKCRfIC1lcSAibGFzdGxvZ29uIikgLW9yICgkXyAtZXEgImxhc3Rsb2dvbnRpbWVzdGFtcCIpIC1vciAoJF8gLWVxICJwd2RsYXN0c2V0IikgLW9yICgkXyAtZXEgImxhc3Rsb2dvZmYiKSAtb3IgKCRfIC1lcSAiYmFkUGFzc3dvcmRUaW1lIikgKSB7CiAgICAgICAgICAgICMgY29udmVydCB0aW1lc3RhbXBzCiAgICAgICAgICAgIGlmICgkUHJvcGVydGllc1skX11bMF0gLWlzIFtTeXN0ZW0uTWFyc2hhbEJ5UmVmT2JqZWN0XSkgewogICAgICAgICAgICAgICAgIyBpZiB3ZSBoYXZlIGEgU3lzdGVtLl9fQ29tT2JqZWN0CiAgICAgICAgICAgICAgICAkVGVtcCA9ICRQcm9wZXJ0aWVzWyRfXVswXQogICAgICAgICAgICAgICAgW0ludDMyXSRIaWdoID0gJFRlbXAuR2V0VHlwZSgpLkludm9rZU1lbWJlcigiSGlnaFBhcnQiLCBbU3lzdGVtLlJlZmxlY3Rpb24uQmluZGluZ0ZsYWdzXTo6R2V0UHJvcGVydHksICRudWxsLCAkVGVtcCwgJG51bGwpCiAgICAgICAgICAgICAgICBbSW50MzJdJExvdyAgPSAkVGVtcC5HZXRUeXBlKCkuSW52b2tlTWVtYmVyKCJMb3dQYXJ0IiwgIFtTeXN0ZW0uUmVmbGVjdGlvbi5CaW5kaW5nRmxhZ3NdOjpHZXRQcm9wZXJ0eSwgJG51bGwsICRUZW1wLCAkbnVsbCkKICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9IChbZGF0ZXRpbWVdOjpGcm9tRmlsZVRpbWUoW0ludDY0XSgiMHh7MDp4OH17MTp4OH0iIC1mICRIaWdoLCAkTG93KSkpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkT2JqZWN0UHJvcGVydGllc1skX10gPSAoW2RhdGV0aW1lXTo6RnJvbUZpbGVUaW1lKCgkUHJvcGVydGllc1skX11bMF0pKSkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlaWYoJFByb3BlcnRpZXNbJF9dWzBdIC1pcyBbU3lzdGVtLk1hcnNoYWxCeVJlZk9iamVjdF0pIHsKICAgICAgICAgICAgIyB0cnkgdG8gY29udmVydCBtaXNjIGNvbSBvYmplY3RzCiAgICAgICAgICAgICRQcm9wID0gJFByb3BlcnRpZXNbJF9dCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkVGVtcCA9ICRQcm9wWyRfXVswXQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAkXwogICAgICAgICAgICAgICAgW0ludDMyXSRIaWdoID0gJFRlbXAuR2V0VHlwZSgpLkludm9rZU1lbWJlcigiSGlnaFBhcnQiLCBbU3lzdGVtLlJlZmxlY3Rpb24uQmluZGluZ0ZsYWdzXTo6R2V0UHJvcGVydHksICRudWxsLCAkVGVtcCwgJG51bGwpCiAgICAgICAgICAgICAgICBbSW50MzJdJExvdyAgPSAkVGVtcC5HZXRUeXBlKCkuSW52b2tlTWVtYmVyKCJMb3dQYXJ0IiwgIFtTeXN0ZW0uUmVmbGVjdGlvbi5CaW5kaW5nRmxhZ3NdOjpHZXRQcm9wZXJ0eSwgJG51bGwsICRUZW1wLCAkbnVsbCkKICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9IFtJbnQ2NF0oIjB4ezA6eDh9ezE6eDh9IiAtZiAkSGlnaCwgJExvdykKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAkT2JqZWN0UHJvcGVydGllc1skX10gPSAkUHJvcFskX10KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlaWYoJFByb3BlcnRpZXNbJF9dLmNvdW50IC1lcSAxKSB7CiAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9ICRQcm9wZXJ0aWVzWyRfXVswXQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJE9iamVjdFByb3BlcnRpZXNbJF9dID0gJFByb3BlcnRpZXNbJF9dCiAgICAgICAgfQogICAgfQoKICAgIE5ldy1PYmplY3QgLVR5cGVOYW1lIFBTT2JqZWN0IC1Qcm9wZXJ0eSAkT2JqZWN0UHJvcGVydGllcwp9CgoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMKIyBEb21haW4gaW5mbyBmdW5jdGlvbnMgYmVsb3cuCiMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCmZpbHRlciBHZXQtRG9tYWluU2VhcmNoZXIgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEhlbHBlciB1c2VkIGJ5IHZhcmlvdXMgZnVuY3Rpb25zIHRoYXQgdGFrZXMgYW4gQURTcGF0aCBhbmQKICAgICAgICBkb21haW4gc3BlY2lmaWVyIGFuZCBidWlsZHMgdGhlIGNvcnJlY3QgQURTSSBzZWFyY2hlciBvYmplY3QuCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byB1c2UgZm9yIHRoZSBxdWVyeSwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgQURTcGF0aAoKICAgICAgICBUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBBRFNwcmVmaXgKCiAgICAgICAgUHJlZml4IHRvIHNldCBmb3IgdGhlIHNlYXJjaGVyIChsaWtlICJDTj1TaXRlcyxDTj1Db25maWd1cmF0aW9uIikKCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gdGVzdGxhYi5sb2NhbAoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gdGVzdGxhYi5sb2NhbCAtRG9tYWluQ29udHJvbGxlciBTRUNPTkRBUlkuZGV2LnRlc3RsYWIubG9jYWwKIz4KCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3ByZWZpeCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgIGlmKC1ub3QgJENyZWRlbnRpYWwpIHsKICAgICAgICBpZigtbm90ICREb21haW4pIHsKICAgICAgICAgICAgJERvbWFpbiA9IChHZXQtTmV0RG9tYWluKS5uYW1lCiAgICAgICAgfQogICAgICAgIGVsc2VpZigtbm90ICREb21haW5Db250cm9sbGVyKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAjIGlmIHRoZXJlJ3Mgbm8gLURvbWFpbkNvbnRyb2xsZXIgc3BlY2lmaWVkLCB0cnkgdG8gcHVsbCB0aGUgcHJpbWFyeSBEQyB0byByZWZsZWN0IHF1ZXJpZXMgdGhyb3VnaAogICAgICAgICAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIgPSAoKEdldC1OZXREb21haW4pLlBkY1JvbGVPd25lcikuTmFtZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIHRocm93ICJHZXQtRG9tYWluU2VhcmNoZXI6IEVycm9yIGluIHJldHJpZXZpbmcgUERDIGZvciBjdXJyZW50IGRvbWFpbiIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGVsc2VpZiAoLW5vdCAkRG9tYWluQ29udHJvbGxlcikgewogICAgICAgICMgaWYgYSBEQyBpc24ndCBzcGVjaWZpZWQKICAgICAgICB0cnkgewogICAgICAgICAgICAkRG9tYWluQ29udHJvbGxlciA9ICgoR2V0LU5ldERvbWFpbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCkuUGRjUm9sZU93bmVyKS5OYW1lCiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgdGhyb3cgIkdldC1Eb21haW5TZWFyY2hlcjogRXJyb3IgaW4gcmV0cmlldmluZyBQREMgZm9yIGN1cnJlbnQgZG9tYWluIgogICAgICAgIH0KCiAgICAgICAgaWYoISREb21haW5Db250cm9sbGVyKSB7CiAgICAgICAgICAgIHRocm93ICJHZXQtRG9tYWluU2VhcmNoZXI6IEVycm9yIGluIHJldHJpZXZpbmcgUERDIGZvciBjdXJyZW50IGRvbWFpbiIKICAgICAgICB9CiAgICB9CgogICAgJFNlYXJjaFN0cmluZyA9ICJMREFQOi8vIgoKICAgIGlmKCREb21haW5Db250cm9sbGVyKSB7CiAgICAgICAgJFNlYXJjaFN0cmluZyArPSAkRG9tYWluQ29udHJvbGxlcgogICAgICAgIGlmKCREb21haW4pewogICAgICAgICAgICAkU2VhcmNoU3RyaW5nICs9ICcvJwogICAgICAgIH0KICAgIH0KCiAgICBpZigkQURTcHJlZml4KSB7CiAgICAgICAgJFNlYXJjaFN0cmluZyArPSAkQURTcHJlZml4ICsgJywnCiAgICB9CgogICAgaWYoJEFEU3BhdGgpIHsKICAgICAgICBpZigkQURTcGF0aCAtTWF0Y2ggJ15HQzovLycpIHsKICAgICAgICAgICAgIyBpZiB3ZSdyZSBzZWFyY2hpbmcgdGhlIGdsb2JhbCBjYXRhbG9nCiAgICAgICAgICAgICRETiA9ICRBZHNQYXRoLlRvVXBwZXIoKS5UcmltKCcvJykKICAgICAgICAgICAgJFNlYXJjaFN0cmluZyA9ICcnCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBpZigkQURTcGF0aCAtbWF0Y2ggJ15MREFQOi8vJykgewogICAgICAgICAgICAgICAgaWYoJEFEU3BhdGggLW1hdGNoICJMREFQOi8vLisvLisiKSB7CiAgICAgICAgICAgICAgICAgICAgJFNlYXJjaFN0cmluZyA9ICcnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkQURTcGF0aCA9ICRBRFNwYXRoLlN1YnN0cmluZyg3KQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICRETiA9ICRBRFNwYXRoCiAgICAgICAgfQogICAgfQogICAgZWxzZSB7CiAgICAgICAgaWYoJERvbWFpbiAtYW5kICgkRG9tYWluLlRyaW0oKSAtbmUgIiIpKSB7CiAgICAgICAgICAgICRETiA9ICJEQz0kKCREb21haW4uUmVwbGFjZSgnLicsICcsREM9JykpIgogICAgICAgIH0KICAgIH0KCiAgICAkU2VhcmNoU3RyaW5nICs9ICRETgogICAgV3JpdGUtVmVyYm9zZSAiR2V0LURvbWFpblNlYXJjaGVyIHNlYXJjaCBzdHJpbmc6ICRTZWFyY2hTdHJpbmciCgogICAgaWYoJENyZWRlbnRpYWwpIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJVc2luZyBhbHRlcm5hdGUgY3JlZGVudGlhbHMgZm9yIExEQVAgY29ubmVjdGlvbiIKICAgICAgICAkRG9tYWluT2JqZWN0ID0gTmV3LU9iamVjdCBEaXJlY3RvcnlTZXJ2aWNlcy5EaXJlY3RvcnlFbnRyeSgkU2VhcmNoU3RyaW5nLCAkQ3JlZGVudGlhbC5Vc2VyTmFtZSwgJENyZWRlbnRpYWwuR2V0TmV0d29ya0NyZWRlbnRpYWwoKS5QYXNzd29yZCkKICAgICAgICAkU2VhcmNoZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5EaXJlY3RvcnlTZWFyY2hlcigkRG9tYWluT2JqZWN0KQogICAgfQogICAgZWxzZSB7CiAgICAgICAgJFNlYXJjaGVyID0gTmV3LU9iamVjdCBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuRGlyZWN0b3J5U2VhcmNoZXIoW0FEU0ldJFNlYXJjaFN0cmluZykKICAgIH0KCiAgICAkU2VhcmNoZXIuUGFnZVNpemUgPSAkUGFnZVNpemUKICAgICRTZWFyY2hlci5DYWNoZVJlc3VsdHMgPSAkRmFsc2UKICAgICRTZWFyY2hlcgp9CgoKZmlsdGVyIENvbnZlcnQtRE5TUmVjb3JkIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgIERlY29kZXMgYSBiaW5hcnkgRE5TIHJlY29yZC4KCiAgICAgICBBZGFwdGVkL3BvcnRlZCBmcm9tIE1pY2hhZWwgQi4gU21pdGgncyBjb2RlIGF0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9tbWVzc2Fuby9Qb3dlclNoZWxsL21hc3Rlci9kbnMtZHVtcC5wczEKCiAgICAuUEFSQU1FVEVSIEROU1JlY29yZAoKICAgICAgICBUaGUgZG9tYWluIHRvIHF1ZXJ5IGZvciB6b25lcywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5MSU5LCgogICAgICAgIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9tbWVzc2Fuby9Qb3dlclNoZWxsL21hc3Rlci9kbnMtZHVtcC5wczEKIz4KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MCwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kVHJ1ZSwgTWFuZGF0b3J5PSRUcnVlKV0KICAgICAgICBbQnl0ZVtdXQogICAgICAgICRETlNSZWNvcmQKICAgICkKCiAgICBmdW5jdGlvbiBHZXQtTmFtZSB7CiAgICAgICAgIyBtb2RpZmllZCBkZWNvZGVOYW1lIGZyb20gaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL21tZXNzYW5vL1Bvd2VyU2hlbGwvbWFzdGVyL2Rucy1kdW1wLnBzMQogICAgICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICAgICAgcGFyYW0oCiAgICAgICAgICAgIFtCeXRlW11dCiAgICAgICAgICAgICRSYXcKICAgICAgICApCgogICAgICAgIFtJbnRdJExlbmd0aCA9ICRSYXdbMF0KICAgICAgICBbSW50XSRTZWdtZW50cyA9ICRSYXdbMV0KICAgICAgICBbSW50XSRJbmRleCA9ICAyCiAgICAgICAgW1N0cmluZ10kTmFtZSAgPSAiIgoKICAgICAgICB3aGlsZSAoJFNlZ21lbnRzLS0gLWd0IDApCiAgICAgICAgewogICAgICAgICAgICBbSW50XSRTZWdtZW50TGVuZ3RoID0gJFJhd1skSW5kZXgrK10KICAgICAgICAgICAgd2hpbGUgKCRTZWdtZW50TGVuZ3RoLS0gLWd0IDApIHsKICAgICAgICAgICAgICAgICROYW1lICs9IFtDaGFyXSRSYXdbJEluZGV4KytdCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJE5hbWUgKz0gIi4iCiAgICAgICAgfQogICAgICAgICROYW1lCiAgICB9CgogICAgJFJEYXRhTGVuID0gW0JpdENvbnZlcnRlcl06OlRvVUludDE2KCRETlNSZWNvcmQsIDApCiAgICAkUkRhdGFUeXBlID0gW0JpdENvbnZlcnRlcl06OlRvVUludDE2KCRETlNSZWNvcmQsIDIpCiAgICAkVXBkYXRlZEF0U2VyaWFsID0gW0JpdENvbnZlcnRlcl06OlRvVUludDMyKCRETlNSZWNvcmQsIDgpCgogICAgJFRUTFJhdyA9ICRETlNSZWNvcmRbMTIuLjE1XQogICAgIyByZXZlcnNlIGZvciBiaWcgZW5kaWFuCiAgICAkTnVsbCA9IFthcnJheV06OlJldmVyc2UoJFRUTFJhdykKICAgICRUVEwgPSBbQml0Q29udmVydGVyXTo6VG9VSW50MzIoJFRUTFJhdywgMCkKCiAgICAkQWdlID0gW0JpdENvbnZlcnRlcl06OlRvVUludDMyKCRETlNSZWNvcmQsIDIwKQogICAgaWYoJEFnZSAtbmUgMCkgewogICAgICAgICRUaW1lU3RhbXAgPSAoKEdldC1EYXRlIC1ZZWFyIDE2MDEgLU1vbnRoIDEgLURheSAxIC1Ib3VyIDAgLU1pbnV0ZSAwIC1TZWNvbmQgMCkuQWRkSG91cnMoJGFnZSkpLlRvU3RyaW5nKCkKICAgIH0KICAgIGVsc2UgewogICAgICAgICRUaW1lU3RhbXAgPSAiW3N0YXRpY10iCiAgICB9CgogICAgJEROU1JlY29yZE9iamVjdCA9IE5ldy1PYmplY3QgUFNPYmplY3QKCiAgICBpZigkUkRhdGFUeXBlIC1lcSAxKSB7CiAgICAgICAgJElQID0gInswfS57MX0uezJ9LnszfSIgLWYgJEROU1JlY29yZFsyNF0sICRETlNSZWNvcmRbMjVdLCAkRE5TUmVjb3JkWzI2XSwgJEROU1JlY29yZFsyN10KICAgICAgICAkRGF0YSA9ICRJUAogICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ0EnCiAgICB9CgogICAgZWxzZWlmKCRSRGF0YVR5cGUgLWVxIDIpIHsKICAgICAgICAkTlNOYW1lID0gR2V0LU5hbWUgJEROU1JlY29yZFsyNC4uJEROU1JlY29yZC5sZW5ndGhdCiAgICAgICAgJERhdGEgPSAkTlNOYW1lCiAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZWNvcmRUeXBlJyAnTlMnCiAgICB9CgogICAgZWxzZWlmKCRSRGF0YVR5cGUgLWVxIDUpIHsKICAgICAgICAkQWxpYXMgPSBHZXQtTmFtZSAkRE5TUmVjb3JkWzI0Li4kRE5TUmVjb3JkLmxlbmd0aF0KICAgICAgICAkRGF0YSA9ICRBbGlhcwogICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ0NOQU1FJwogICAgfQoKICAgIGVsc2VpZigkUkRhdGFUeXBlIC1lcSA2KSB7CiAgICAgICAgIyBUT0RPOiBob3cgdG8gaW1wbGVtZW50IHByb3Blcmx5PyBuZXN0ZWQgb2JqZWN0PwogICAgICAgICREYXRhID0gJChbU3lzdGVtLkNvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZygkRE5TUmVjb3JkWzI0Li4kRE5TUmVjb3JkLmxlbmd0aF0pKQogICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ1NPQScKICAgIH0KCiAgICBlbHNlaWYoJFJEYXRhVHlwZSAtZXEgMTIpIHsKICAgICAgICAkUHRyID0gR2V0LU5hbWUgJEROU1JlY29yZFsyNC4uJEROU1JlY29yZC5sZW5ndGhdCiAgICAgICAgJERhdGEgPSAkUHRyCiAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZWNvcmRUeXBlJyAnUFRSJwogICAgfQoKICAgIGVsc2VpZigkUkRhdGFUeXBlIC1lcSAxMykgewogICAgICAgICMgVE9ETzogaG93IHRvIGltcGxlbWVudCBwcm9wZXJseT8gbmVzdGVkIG9iamVjdD8KICAgICAgICAkRGF0YSA9ICQoW1N5c3RlbS5Db252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoJEROU1JlY29yZFsyNC4uJEROU1JlY29yZC5sZW5ndGhdKSkKICAgICAgICAkRE5TUmVjb3JkT2JqZWN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1JlY29yZFR5cGUnICdISU5GTycKICAgIH0KCiAgICBlbHNlaWYoJFJEYXRhVHlwZSAtZXEgMTUpIHsKICAgICAgICAjIFRPRE86IGhvdyB0byBpbXBsZW1lbnQgcHJvcGVybHk/IG5lc3RlZCBvYmplY3Q/CiAgICAgICAgJERhdGEgPSAkKFtTeXN0ZW0uQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRETlNSZWNvcmRbMjQuLiRETlNSZWNvcmQubGVuZ3RoXSkpCiAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZWNvcmRUeXBlJyAnTVgnCiAgICB9CgogICAgZWxzZWlmKCRSRGF0YVR5cGUgLWVxIDE2KSB7CgogICAgICAgIFtzdHJpbmddJFRYVCAgPSAiIgogICAgICAgIFtpbnRdJFNlZ21lbnRMZW5ndGggPSAkRE5TUmVjb3JkWzI0XQogICAgICAgICRJbmRleCA9IDI1CiAgICAgICAgd2hpbGUgKCRTZWdtZW50TGVuZ3RoLS0gLWd0IDApIHsKICAgICAgICAgICAgJFRYVCArPSBbY2hhcl0kRE5TUmVjb3JkWyRpbmRleCsrXQogICAgICAgIH0KCiAgICAgICAgJERhdGEgPSAkVFhUCiAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZWNvcmRUeXBlJyAnVFhUJwogICAgfQoKICAgIGVsc2VpZigkUkRhdGFUeXBlIC1lcSAyOCkgewogICAgICAgICMgVE9ETzogaG93IHRvIGltcGxlbWVudCBwcm9wZXJseT8gbmVzdGVkIG9iamVjdD8KICAgICAgICAkRGF0YSA9ICQoW1N5c3RlbS5Db252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoJEROU1JlY29yZFsyNC4uJEROU1JlY29yZC5sZW5ndGhdKSkKICAgICAgICAkRE5TUmVjb3JkT2JqZWN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1JlY29yZFR5cGUnICdBQUFBJwogICAgfQoKICAgIGVsc2VpZigkUkRhdGFUeXBlIC1lcSAzMykgewogICAgICAgICMgVE9ETzogaG93IHRvIGltcGxlbWVudCBwcm9wZXJseT8gbmVzdGVkIG9iamVjdD8KICAgICAgICAkRGF0YSA9ICQoW1N5c3RlbS5Db252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoJEROU1JlY29yZFsyNC4uJEROU1JlY29yZC5sZW5ndGhdKSkKICAgICAgICAkRE5TUmVjb3JkT2JqZWN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1JlY29yZFR5cGUnICdTUlYnCiAgICB9CgogICAgZWxzZSB7CiAgICAgICAgJERhdGEgPSAkKFtTeXN0ZW0uQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRETlNSZWNvcmRbMjQuLiRETlNSZWNvcmQubGVuZ3RoXSkpCiAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZWNvcmRUeXBlJyAnVU5LTk9XTicKICAgIH0KCiAgICAkRE5TUmVjb3JkT2JqZWN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VwZGF0ZWRBdFNlcmlhbCcgJFVwZGF0ZWRBdFNlcmlhbAogICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdUVEwnICRUVEwKICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQWdlJyAkQWdlCiAgICAkRE5TUmVjb3JkT2JqZWN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RpbWVTdGFtcCcgJFRpbWVTdGFtcAogICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEYXRhJyAkRGF0YQogICAgJEROU1JlY29yZE9iamVjdAp9CgoKZmlsdGVyIEdldC1ETlNab25lIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgIEVudW1lcmF0ZXMgdGhlIEFjdGl2ZSBEaXJlY3RvcnkgRE5TIHpvbmVzIGZvciBhIGdpdmVuIGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBUaGUgZG9tYWluIHRvIHF1ZXJ5IGZvciB6b25lcywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBGdWxsRGF0YQoKICAgICAgICBTd2l0Y2guIFJldHVybiBmdWxsIGNvbXB1dGVyIG9iamVjdHMgaW5zdGVhZCBvZiBqdXN0IHN5c3RlbSBuYW1lcyAodGhlIGRlZmF1bHQpLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LUROU1pvbmUKCiAgICAgICAgUmV0cmlldmVzIHRoZSBETlMgem9uZXMgZm9yIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1ETlNab25lIC1Eb21haW4gZGV2LnRlc3RsYWIubG9jYWwgLURvbWFpbkNvbnRyb2xsZXIgcHJpbWFyeS50ZXN0bGFiLmxvY2FsCgogICAgICAgIFJldHJpZXZlcyB0aGUgRE5TIHpvbmVzIGZvciB0aGUgZGV2LnRlc3RsYWIubG9jYWwgZG9tYWluLCByZWZsZWN0aW5nIHRoZSBMREFQIHF1ZXJpZXMKICAgICAgICB0aHJvdWdoIHRoZSBwcmltYXJ5LnRlc3RsYWIubG9jYWwgZG9tYWluIGNvbnRyb2xsZXIuCiM+CgogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLCBWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEZ1bGxEYXRhCiAgICApCgogICAgJEROU1NlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtUGFnZVNpemUgJFBhZ2VTaXplIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAkRE5TU2VhcmNoZXIuZmlsdGVyPSIob2JqZWN0Q2xhc3M9ZG5zWm9uZSkiCgogICAgaWYoJEROU1NlYXJjaGVyKSB7CiAgICAgICAgJFJlc3VsdHMgPSAkRE5TU2VhcmNoZXIuRmluZEFsbCgpCiAgICAgICAgJFJlc3VsdHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgIyBjb252ZXJ0L3Byb2Nlc3MgdGhlIExEQVAgZmllbGRzIGZvciBlYWNoIHJlc3VsdAogICAgICAgICAgICAkUHJvcGVydGllcyA9IENvbnZlcnQtTERBUFByb3BlcnR5IC1Qcm9wZXJ0aWVzICRfLlByb3BlcnRpZXMKICAgICAgICAgICAgJFByb3BlcnRpZXMgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnWm9uZU5hbWUnICRQcm9wZXJ0aWVzLm5hbWUKCiAgICAgICAgICAgIGlmICgkRnVsbERhdGEpIHsKICAgICAgICAgICAgICAgICRQcm9wZXJ0aWVzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkUHJvcGVydGllcyB8IFNlbGVjdC1PYmplY3QgWm9uZU5hbWUsZGlzdGluZ3Vpc2hlZG5hbWUsd2hlbmNyZWF0ZWQsd2hlbmNoYW5nZWQKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAkUmVzdWx0cy5kaXNwb3NlKCkKICAgICAgICAkRE5TU2VhcmNoZXIuZGlzcG9zZSgpCiAgICB9CgogICAgJEROU1NlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtUGFnZVNpemUgJFBhZ2VTaXplIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1BRFNwcmVmaXggIkNOPU1pY3Jvc29mdEROUyxEQz1Eb21haW5EbnNab25lcyIKICAgICRETlNTZWFyY2hlci5maWx0ZXI9IihvYmplY3RDbGFzcz1kbnNab25lKSIKCiAgICBpZigkRE5TU2VhcmNoZXIpIHsKICAgICAgICAkUmVzdWx0cyA9ICRETlNTZWFyY2hlci5GaW5kQWxsKCkKICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAjIGNvbnZlcnQvcHJvY2VzcyB0aGUgTERBUCBmaWVsZHMgZm9yIGVhY2ggcmVzdWx0CiAgICAgICAgICAgICRQcm9wZXJ0aWVzID0gQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAkUHJvcGVydGllcyB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdab25lTmFtZScgJFByb3BlcnRpZXMubmFtZQoKICAgICAgICAgICAgaWYgKCRGdWxsRGF0YSkgewogICAgICAgICAgICAgICAgJFByb3BlcnRpZXMKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRQcm9wZXJ0aWVzIHwgU2VsZWN0LU9iamVjdCBab25lTmFtZSxkaXN0aW5ndWlzaGVkbmFtZSx3aGVuY3JlYXRlZCx3aGVuY2hhbmdlZAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICRSZXN1bHRzLmRpc3Bvc2UoKQogICAgICAgICRETlNTZWFyY2hlci5kaXNwb3NlKCkKICAgIH0KfQoKCmZpbHRlciBHZXQtRE5TUmVjb3JkIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgIEVudW1lcmF0ZXMgdGhlIEFjdGl2ZSBEaXJlY3RvcnkgRE5TIHJlY29yZHMgZm9yIGEgZ2l2ZW4gem9uZS4KCiAgICAuUEFSQU1FVEVSIFpvbmVOYW1lCgogICAgICAgIFRoZSB6b25lIHRvIHF1ZXJ5IGZvciByZWNvcmRzICh3aGljaCBjYW4gYmUgZW51bWVhcnRlZCB3aXRoIEdldC1ETlNab25lKS4gUmVxdWlyZWQuCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byBxdWVyeSBmb3Igem9uZXMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LUROU1JlY29yZCAtWm9uZU5hbWUgdGVzdGxhYi5sb2NhbAoKICAgICAgICBSZXRyaWV2ZSBhbGwgcmVjb3JkcyBmb3IgdGhlIHRlc3RsYWIubG9jYWwgem9uZS4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1ETlNab25lIHwgR2V0LUROU1JlY29yZAoKICAgICAgICBSZXRyaWV2ZSBhbGwgcmVjb3JkcyBmb3IgYWxsIHpvbmVzIGluIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1ETlNab25lIC1Eb21haW4gZGV2LnRlc3RsYWIubG9jYWwgfCBHZXQtRE5TUmVjb3JkIC1Eb21haW4gZGV2LnRlc3RsYWIubG9jYWwKCiAgICAgICAgUmV0cmlldmUgYWxsIHJlY29yZHMgZm9yIGFsbCB6b25lcyBpbiB0aGUgZGV2LnRlc3RsYWIubG9jYWwgZG9tYWluLgojPgoKICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MCwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kVHJ1ZSwgTWFuZGF0b3J5PSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRab25lTmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICAkRE5TU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1QYWdlU2l6ZSAkUGFnZVNpemUgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUFEU3ByZWZpeCAiREM9JCgkWm9uZU5hbWUpLENOPU1pY3Jvc29mdEROUyxEQz1Eb21haW5EbnNab25lcyIKICAgICRETlNTZWFyY2hlci5maWx0ZXI9IihvYmplY3RDbGFzcz1kbnNOb2RlKSIKCiAgICBpZigkRE5TU2VhcmNoZXIpIHsKICAgICAgICAkUmVzdWx0cyA9ICRETlNTZWFyY2hlci5GaW5kQWxsKCkKICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgIyBjb252ZXJ0L3Byb2Nlc3MgdGhlIExEQVAgZmllbGRzIGZvciBlYWNoIHJlc3VsdAogICAgICAgICAgICAgICAgJFByb3BlcnRpZXMgPSBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzIHwgU2VsZWN0LU9iamVjdCBuYW1lLGRpc3Rpbmd1aXNoZWRuYW1lLGRuc3JlY29yZCx3aGVuY3JlYXRlZCx3aGVuY2hhbmdlZAogICAgICAgICAgICAgICAgJFByb3BlcnRpZXMgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnWm9uZU5hbWUnICRab25lTmFtZQoKICAgICAgICAgICAgICAgICMgY29udmVydCB0aGUgcmVjb3JkIGFuZCBleHRyYWN0IHRoZSBwcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICBpZiAoJFByb3BlcnRpZXMuZG5zcmVjb3JkIC1pcyBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLlJlc3VsdFByb3BlcnR5VmFsdWVDb2xsZWN0aW9uXSkgewogICAgICAgICAgICAgICAgICAgICMgVE9ETzogaGFuZGxlIG11bHRpcGxlIG5lc3RlZCByZWNvcmRzIHByb3Blcmx5PwogICAgICAgICAgICAgICAgICAgICRSZWNvcmQgPSBDb252ZXJ0LUROU1JlY29yZCAtRE5TUmVjb3JkICRQcm9wZXJ0aWVzLmRuc3JlY29yZFswXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJFJlY29yZCA9IENvbnZlcnQtRE5TUmVjb3JkIC1ETlNSZWNvcmQgJFByb3BlcnRpZXMuZG5zcmVjb3JkCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYoJFJlY29yZCkgewogICAgICAgICAgICAgICAgICAgICRSZWNvcmQucHNvYmplY3QucHJvcGVydGllcyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgJFByb3BlcnRpZXMgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAkXy5OYW1lICRfLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRQcm9wZXJ0aWVzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiRVJST1I6ICRfIgogICAgICAgICAgICAgICAgJFByb3BlcnRpZXMKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAkUmVzdWx0cy5kaXNwb3NlKCkKICAgICAgICAkRE5TU2VhcmNoZXIuZGlzcG9zZSgpCiAgICB9Cn0KCgpmaWx0ZXIgR2V0LU5ldERvbWFpbiB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgUmV0dXJucyBhIGdpdmVuIGRvbWFpbiBvYmplY3QuCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiBuYW1lIHRvIHF1ZXJ5IGZvciwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0RG9tYWluIC1Eb21haW4gdGVzdGxhYi5sb2NhbAoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gInRlc3RsYWIubG9jYWwiIHwgR2V0LU5ldERvbWFpbgoKICAgIC5MSU5LCgogICAgICAgIGh0dHA6Ly9zb2NpYWwudGVjaG5ldC5taWNyb3NvZnQuY29tL0ZvcnVtcy9zY3JpcHRjZW50ZXIvZW4tVVMvMGM1YjNmODMtZTUyOC00ZDQ5LTkyYTQtZGVlMzFmNGI0ODFjL2ZpbmRpbmctdGhlLWRuLW9mLXRoZS10aGUtZG9tYWluLXdpdGhvdXQtYWRtb2R1bGUtaW4tcG93ZXJzaGVsbD9mb3J1bT1JVENHCiM+CgogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgIGlmKCRDcmVkZW50aWFsKSB7CiAgICAgICAgCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiVXNpbmcgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzIGZvciBHZXQtTmV0RG9tYWluIgoKICAgICAgICBpZighJERvbWFpbikgewogICAgICAgICAgICAjIGlmIG5vIGRvbWFpbiBpcyBzdXBwbGllZCwgZXh0cmFjdCB0aGUgbG9nb24gZG9tYWluIGZyb20gdGhlIFBTQ3JlZGVudGlhbCBwYXNzZWQKICAgICAgICAgICAgJERvbWFpbiA9ICRDcmVkZW50aWFsLkdldE5ldHdvcmtDcmVkZW50aWFsKCkuRG9tYWluCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkV4dHJhY3RlZCBkb21haW4gJyREb21haW4nIGZyb20gLUNyZWRlbnRpYWwiCiAgICAgICAgfQogICAKICAgICAgICAkRG9tYWluQ29udGV4dCA9IE5ldy1PYmplY3QgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5EaXJlY3RvcnlDb250ZXh0KCdEb21haW4nLCAkRG9tYWluLCAkQ3JlZGVudGlhbC5Vc2VyTmFtZSwgJENyZWRlbnRpYWwuR2V0TmV0d29ya0NyZWRlbnRpYWwoKS5QYXNzd29yZCkKICAgICAgICAKICAgICAgICB0cnkgewogICAgICAgICAgICBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5Eb21haW5dOjpHZXREb21haW4oJERvbWFpbkNvbnRleHQpCiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiVGhlIHNwZWNpZmllZCBkb21haW4gZG9lcyAnJERvbWFpbicgbm90IGV4aXN0LCBjb3VsZCBub3QgYmUgY29udGFjdGVkLCB0aGVyZSBpc24ndCBhbiBleGlzdGluZyB0cnVzdCwgb3IgdGhlIHNwZWNpZmllZCBjcmVkZW50aWFscyBhcmUgaW52YWxpZC4iCiAgICAgICAgICAgICROdWxsCiAgICAgICAgfQogICAgfQogICAgZWxzZWlmKCREb21haW4pIHsKICAgICAgICAkRG9tYWluQ29udGV4dCA9IE5ldy1PYmplY3QgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5EaXJlY3RvcnlDb250ZXh0KCdEb21haW4nLCAkRG9tYWluKQogICAgICAgIHRyeSB7CiAgICAgICAgICAgIFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkRvbWFpbl06OkdldERvbWFpbigkRG9tYWluQ29udGV4dCkKICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJUaGUgc3BlY2lmaWVkIGRvbWFpbiAnJERvbWFpbicgZG9lcyBub3QgZXhpc3QsIGNvdWxkIG5vdCBiZSBjb250YWN0ZWQsIG9yIHRoZXJlIGlzbid0IGFuIGV4aXN0aW5nIHRydXN0LiIKICAgICAgICAgICAgJE51bGwKICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5Eb21haW5dOjpHZXRDdXJyZW50RG9tYWluKCkKICAgIH0KfQoKCmZpbHRlciBHZXQtTmV0Rm9yZXN0IHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBSZXR1cm5zIGEgZ2l2ZW4gZm9yZXN0IG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIEZvcmVzdAoKICAgICAgICBUaGUgZm9yZXN0IG5hbWUgdG8gcXVlcnkgZm9yLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQogICAgCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0Rm9yZXN0IC1Gb3Jlc3QgZXh0ZXJuYWwuZG9tYWluCgogICAgLkVYQU1QTEUKICAgIAogICAgICAgIFBTIEM6XD4gImV4dGVybmFsLmRvbWFpbiIgfCBHZXQtTmV0Rm9yZXN0CiM+CgogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRm9yZXN0LAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgIGlmKCRDcmVkZW50aWFsKSB7CiAgICAgICAgCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiVXNpbmcgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzIGZvciBHZXQtTmV0Rm9yZXN0IgoKICAgICAgICBpZighJEZvcmVzdCkgewogICAgICAgICAgICAjIGlmIG5vIGRvbWFpbiBpcyBzdXBwbGllZCwgZXh0cmFjdCB0aGUgbG9nb24gZG9tYWluIGZyb20gdGhlIFBTQ3JlZGVudGlhbCBwYXNzZWQKICAgICAgICAgICAgJEZvcmVzdCA9ICRDcmVkZW50aWFsLkdldE5ldHdvcmtDcmVkZW50aWFsKCkuRG9tYWluCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkV4dHJhY3RlZCBkb21haW4gJyRGb3Jlc3QnIGZyb20gLUNyZWRlbnRpYWwiCiAgICAgICAgfQogICAKICAgICAgICAkRm9yZXN0Q29udGV4dCA9IE5ldy1PYmplY3QgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5EaXJlY3RvcnlDb250ZXh0KCdGb3Jlc3QnLCAkRm9yZXN0LCAkQ3JlZGVudGlhbC5Vc2VyTmFtZSwgJENyZWRlbnRpYWwuR2V0TmV0d29ya0NyZWRlbnRpYWwoKS5QYXNzd29yZCkKICAgICAgICAKICAgICAgICB0cnkgewogICAgICAgICAgICAkRm9yZXN0T2JqZWN0ID0gW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRm9yZXN0XTo6R2V0Rm9yZXN0KCRGb3Jlc3RDb250ZXh0KQogICAgICAgIH0KICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlRoZSBzcGVjaWZpZWQgZm9yZXN0ICckRm9yZXN0JyBkb2VzIG5vdCBleGlzdCwgY291bGQgbm90IGJlIGNvbnRhY3RlZCwgdGhlcmUgaXNuJ3QgYW4gZXhpc3RpbmcgdHJ1c3QsIG9yIHRoZSBzcGVjaWZpZWQgY3JlZGVudGlhbHMgYXJlIGludmFsaWQuIgogICAgICAgICAgICAkTnVsbAogICAgICAgIH0KICAgIH0KICAgIGVsc2VpZigkRm9yZXN0KSB7CiAgICAgICAgJEZvcmVzdENvbnRleHQgPSBOZXctT2JqZWN0IFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRGlyZWN0b3J5Q29udGV4dCgnRm9yZXN0JywgJEZvcmVzdCkKICAgICAgICB0cnkgewogICAgICAgICAgICAkRm9yZXN0T2JqZWN0ID0gW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRm9yZXN0XTo6R2V0Rm9yZXN0KCRGb3Jlc3RDb250ZXh0KQogICAgICAgIH0KICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlRoZSBzcGVjaWZpZWQgZm9yZXN0ICckRm9yZXN0JyBkb2VzIG5vdCBleGlzdCwgY291bGQgbm90IGJlIGNvbnRhY3RlZCwgb3IgdGhlcmUgaXNuJ3QgYW4gZXhpc3RpbmcgdHJ1c3QuIgogICAgICAgICAgICByZXR1cm4gJE51bGwKICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAjIG90aGVyd2lzZSB1c2UgdGhlIGN1cnJlbnQgZm9yZXN0CiAgICAgICAgJEZvcmVzdE9iamVjdCA9IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkZvcmVzdF06OkdldEN1cnJlbnRGb3Jlc3QoKQogICAgfQoKICAgIGlmKCRGb3Jlc3RPYmplY3QpIHsKICAgICAgICAjIGdldCB0aGUgU0lEIG9mIHRoZSBmb3Jlc3Qgcm9vdAogICAgICAgICRGb3Jlc3RTaWQgPSAoTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLk5UQWNjb3VudCgkRm9yZXN0T2JqZWN0LlJvb3REb21haW4sImtyYnRndCIpKS5UcmFuc2xhdGUoW1N5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyXSkuVmFsdWUKICAgICAgICAkUGFydHMgPSAkRm9yZXN0U2lkIC1TcGxpdCAiLSIKICAgICAgICAkRm9yZXN0U2lkID0gJFBhcnRzWzAuLiQoJFBhcnRzLmxlbmd0aC0yKV0gLWpvaW4gIi0iCiAgICAgICAgJEZvcmVzdE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdSb290RG9tYWluU2lkJyAkRm9yZXN0U2lkCiAgICAgICAgJEZvcmVzdE9iamVjdAogICAgfQp9CgoKZmlsdGVyIEdldC1OZXRGb3Jlc3REb21haW4gewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFJldHVybiBhbGwgZG9tYWlucyBmb3IgYSBnaXZlbiBmb3Jlc3QuCgogICAgLlBBUkFNRVRFUiBGb3Jlc3QKCiAgICAgICAgVGhlIGZvcmVzdCBuYW1lIHRvIHF1ZXJ5IGRvbWFpbiBmb3IuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRGb3Jlc3REb21haW4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRGb3Jlc3REb21haW4gLUZvcmVzdCBleHRlcm5hbC5sb2NhbAojPgoKICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZvcmVzdCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICAkRm9yZXN0T2JqZWN0ID0gR2V0LU5ldEZvcmVzdCAtRm9yZXN0ICRGb3Jlc3QgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKCiAgICBpZigkRm9yZXN0T2JqZWN0KSB7CiAgICAgICAgJEZvcmVzdE9iamVjdC5Eb21haW5zCiAgICB9Cn0KCgpmaWx0ZXIgR2V0LU5ldEZvcmVzdENhdGFsb2cgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFJldHVybiBhbGwgZ2xvYmFsIGNhdGFsb2dzIGZvciBhIGdpdmVuIGZvcmVzdC4KCiAgICAuUEFSQU1FVEVSIEZvcmVzdAoKICAgICAgICBUaGUgZm9yZXN0IG5hbWUgdG8gcXVlcnkgZG9tYWluIGZvci4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldEZvcmVzdENhdGFsb2cKIz4KICAgIAogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRm9yZXN0LAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgICRGb3Jlc3RPYmplY3QgPSBHZXQtTmV0Rm9yZXN0IC1Gb3Jlc3QgJEZvcmVzdCAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAoKICAgIGlmKCRGb3Jlc3RPYmplY3QpIHsKICAgICAgICAkRm9yZXN0T2JqZWN0LkZpbmRBbGxHbG9iYWxDYXRhbG9ncygpCiAgICB9Cn0KCgpmaWx0ZXIgR2V0LU5ldERvbWFpbkNvbnRyb2xsZXIgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFJldHVybiB0aGUgY3VycmVudCBkb21haW4gY29udHJvbGxlcnMgZm9yIHRoZSBhY3RpdmUgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gcXVlcnkgZm9yIGRvbWFpbiBjb250cm9sbGVycywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgTERBUAoKICAgICAgICBTd2l0Y2guIFVzZSBMREFQIHF1ZXJpZXMgdG8gZGV0ZXJtaW5lIHRoZSBkb21haW4gY29udHJvbGxlcnMuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXREb21haW5Db250cm9sbGVyIC1Eb21haW4gJ3Rlc3QubG9jYWwnCiAgICAgICAgCiAgICAgICAgRGV0ZXJtaW5lIHRoZSBkb21haW4gY29udHJvbGxlcnMgZm9yICd0ZXN0LmxvY2FsJy4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXREb21haW5Db250cm9sbGVyIC1Eb21haW4gJ3Rlc3QubG9jYWwnIC1MREFQCgogICAgICAgIERldGVybWluZSB0aGUgZG9tYWluIGNvbnRyb2xsZXJzIGZvciAndGVzdC5sb2NhbCcgdXNpbmcgTERBUCBxdWVyaWVzLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gJ3Rlc3QubG9jYWwnIHwgR2V0LU5ldERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRGV0ZXJtaW5lIHRoZSBkb21haW4gY29udHJvbGxlcnMgZm9yICd0ZXN0LmxvY2FsJy4KIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRMREFQLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgIGlmKCRMREFQIC1vciAkRG9tYWluQ29udHJvbGxlcikgewogICAgICAgICMgZmlsdGVyIHN0cmluZyB0byByZXR1cm4gYWxsIGRvbWFpbiBjb250cm9sbGVycwogICAgICAgIEdldC1OZXRDb21wdXRlciAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUZ1bGxEYXRhIC1GaWx0ZXIgJyh1c2VyQWNjb3VudENvbnRyb2w6MS4yLjg0MC4xMTM1NTYuMS40LjgwMzo9ODE5MiknCiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkRm91bmREb21haW4gPSBHZXQtTmV0RG9tYWluIC1Eb21haW4gJERvbWFpbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgIGlmKCRGb3VuZERvbWFpbikgewogICAgICAgICAgICAkRm91bmRkb21haW4uRG9tYWluQ29udHJvbGxlcnMKICAgICAgICB9CiAgICB9Cn0KCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojCiMgIm5ldCAqIiByZXBsYWNlbWVudHMgYW5kIG90aGVyIGZ1biBzdGFydCBiZWxvdwojCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpmdW5jdGlvbiBHZXQtTmV0VXNlciB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgUXVlcnkgaW5mb3JtYXRpb24gZm9yIGEgZ2l2ZW4gdXNlciBvciB1c2VycyBpbiB0aGUgZG9tYWluCiAgICAgICAgdXNpbmcgQURTSSBhbmQgTERBUC4gQW5vdGhlciAtRG9tYWluIGNhbiBiZSBzcGVjaWZpZWQgdG8KICAgICAgICBxdWVyeSBmb3IgdXNlcnMgYWNyb3NzIGEgdHJ1c3QuCiAgICAgICAgUmVwbGFjZW1lbnQgZm9yICJuZXQgdXNlcnMgL2RvbWFpbiIKCiAgICAuUEFSQU1FVEVSIFVzZXJOYW1lCgogICAgICAgIFVzZXJuYW1lIGZpbHRlciBzdHJpbmcsIHdpbGRjYXJkcyBhY2NlcHRlZC4KCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBUaGUgZG9tYWluIHRvIHF1ZXJ5IGZvciB1c2VycywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgQURTcGF0aAoKICAgICAgICBUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBGaWx0ZXIKCiAgICAgICAgQSBjdXN0b21pemVkIGxkYXAgZmlsdGVyIHN0cmluZyB0byB1c2UsIGUuZy4gIihkZXNjcmlwdGlvbj0qYWRtaW4qKSIKCiAgICAuUEFSQU1FVEVSIEFkbWluQ291bnQKCiAgICAgICAgU3dpdGNoLiBSZXR1cm4gdXNlcnMgd2l0aCBhZG1pbkNvdW50PTEuCgogICAgLlBBUkFNRVRFUiBTUE4KCiAgICAgICAgU3dpdGNoLiBPbmx5IHJldHVybiB1c2VyIG9iamVjdHMgd2l0aCBub24tbnVsbCBzZXJ2aWNlIHByaW5jaXBhbCBuYW1lcy4KCiAgICAuUEFSQU1FVEVSIFVuY29uc3RyYWluZWQKCiAgICAgICAgU3dpdGNoLiBSZXR1cm4gdXNlcnMgdGhhdCBoYXZlIHVuY29uc3RyYWluZWQgZGVsZWdhdGlvbi4KCiAgICAuUEFSQU1FVEVSIEFsbG93RGVsZWdhdGlvbgoKICAgICAgICBTd2l0Y2guIFJldHVybiB1c2VyIGFjY291bnRzIHRoYXQgYXJlIG5vdCBtYXJrZWQgYXMgJ3NlbnNpdGl2ZSBhbmQgbm90IGFsbG93ZWQgZm9yIGRlbGVnYXRpb24nCgogICAgLlBBUkFNRVRFUiBQYWdlU2l6ZQoKICAgICAgICBUaGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRVc2VyIC1Eb21haW4gdGVzdGluZwoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldFVzZXIgLUFEU3BhdGggIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKIz4KCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uPTAsIFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyTmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwYXRoLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRGaWx0ZXIsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFNQTiwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkQWRtaW5Db3VudCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVW5jb25zdHJhaW5lZCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkQWxsb3dEZWxlZ2F0aW9uLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCgogICAgYmVnaW4gewogICAgICAgICMgc28gdGhpcyBpc24ndCByZXBlYXRlZCBpZiB1c2VycyBhcmUgcGFzc2VkIG9uIHRoZSBwaXBlbGluZQogICAgICAgICRVc2VyU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiAkRG9tYWluIC1BRFNwYXRoICRBRFNwYXRoIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1QYWdlU2l6ZSAkUGFnZVNpemUgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgIH0KCiAgICBwcm9jZXNzIHsKICAgICAgICBpZigkVXNlclNlYXJjaGVyKSB7CgogICAgICAgICAgICAjIGlmIHdlJ3JlIGNoZWNraW5nIGZvciB1bmNvbnN0cmFpbmVkIGRlbGVnYXRpb24KICAgICAgICAgICAgaWYoJFVuY29uc3RyYWluZWQpIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkNoZWNraW5nIGZvciB1bmNvbnN0cmFpbmVkIGRlbGVnYXRpb24iCiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIodXNlckFjY291bnRDb250cm9sOjEuMi44NDAuMTEzNTU2LjEuNC44MDM6PTUyNDI4OCkiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJEFsbG93RGVsZWdhdGlvbikgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiQ2hlY2tpbmcgZm9yIHVzZXJzIHdobyBjYW4gYmUgZGVsZWdhdGVkIgogICAgICAgICAgICAgICAgIyBuZWdhdGlvbiBvZiAiQWNjb3VudHMgdGhhdCBhcmUgc2Vuc2l0aXZlIGFuZCBub3QgdHJ1c3RlZCBmb3IgZGVsZWdhdGlvbiIKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIighKHVzZXJBY2NvdW50Q29udHJvbDoxLjIuODQwLjExMzU1Ni4xLjQuODAzOj0xMDQ4NTc0KSkiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJEFkbWluQ291bnQpIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkNoZWNraW5nIGZvciBhZG1pbkNvdW50PTEiCiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIoYWRtaW5jb3VudD0xKSIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBjaGVjayBpZiB3ZSdyZSB1c2luZyBhIHVzZXJuYW1lIGZpbHRlciBvciBub3QKICAgICAgICAgICAgaWYoJFVzZXJOYW1lKSB7CiAgICAgICAgICAgICAgICAjIHNhbUFjY291bnRUeXBlPTgwNTMwNjM2OCBpbmRpY2F0ZXMgdXNlciBvYmplY3RzCiAgICAgICAgICAgICAgICAkVXNlclNlYXJjaGVyLmZpbHRlcj0iKCYoc2FtQWNjb3VudFR5cGU9ODA1MzA2MzY4KShzYW1BY2NvdW50TmFtZT0kVXNlck5hbWUpJEZpbHRlcikiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZWlmKCRTUE4pIHsKICAgICAgICAgICAgICAgICRVc2VyU2VhcmNoZXIuZmlsdGVyPSIoJihzYW1BY2NvdW50VHlwZT04MDUzMDYzNjgpKHNlcnZpY2VQcmluY2lwYWxOYW1lPSopJEZpbHRlcikiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAjIGZpbHRlciBpcyBzb21ldGhpbmcgbGlrZSAiKHNhbUFjY291bnROYW1lPSpibGFoKikiIGlmIHNwZWNpZmllZAogICAgICAgICAgICAgICAgJFVzZXJTZWFyY2hlci5maWx0ZXI9IigmKHNhbUFjY291bnRUeXBlPTgwNTMwNjM2OCkkRmlsdGVyKSIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJFJlc3VsdHMgPSAkVXNlclNlYXJjaGVyLkZpbmRBbGwoKQogICAgICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgIyBjb252ZXJ0L3Byb2Nlc3MgdGhlIExEQVAgZmllbGRzIGZvciBlYWNoIHJlc3VsdAogICAgICAgICAgICAgICAgJFVzZXIgPSBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAkVXNlci5QU09iamVjdC5UeXBlTmFtZXMuQWRkKCdQb3dlclZpZXcuVXNlcicpCiAgICAgICAgICAgICAgICAkVXNlcgogICAgICAgICAgICB9CiAgICAgICAgICAgICRSZXN1bHRzLmRpc3Bvc2UoKQogICAgICAgICAgICAkVXNlclNlYXJjaGVyLmRpc3Bvc2UoKQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEFkZC1OZXRVc2VyIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBBZGRzIGEgZG9tYWluIHVzZXIgb3IgYSBsb2NhbCB1c2VyIHRvIHRoZSBjdXJyZW50IChvciByZW1vdGUpIG1hY2hpbmUsCiAgICAgICAgaWYgcGVybWlzc2lvbnMgYWxsb3csIHV0aWxpemluZyB0aGUgV2luTlQgc2VydmljZSBwcm92aWRlciBhbmQKICAgICAgICBEaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudCwgcmVzcGVjdGl2ZWx5LgogICAgICAgIAogICAgICAgIFRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHRvIGFkZCBhIHVzZXIgdG8gdGhlIGxvY2FsIG1hY2hpbmUuCiAgICAgICAgQW4gb3B0aW9uYWwgZ3JvdXAgbmFtZSB0byBhZGQgdGhlIHVzZXIgdG8gY2FuIGJlIHNwZWNpZmllZC4KCiAgICAuUEFSQU1FVEVSIFVzZXJOYW1lCgogICAgICAgIFRoZSB1c2VybmFtZSB0byBhZGQuIElmIG5vdCBnaXZlbiwgaXQgZGVmYXVsdHMgdG8gJ2JhY2tkb29yJwoKICAgIC5QQVJBTUVURVIgUGFzc3dvcmQKCiAgICAgICAgVGhlIHBhc3N3b3JkIHRvIHNldCBmb3IgdGhlIGFkZGVkIHVzZXIuIElmIG5vdCBnaXZlbiwgaXQgZGVmYXVsdHMgdG8gJ1Bhc3N3b3JkMTIzIScKCiAgICAuUEFSQU1FVEVSIEdyb3VwTmFtZQoKICAgICAgICBHcm91cCB0byBvcHRpb25hbGx5IGFkZCB0aGUgdXNlciB0by4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBIb3N0bmFtZSB0byBhZGQgdGhlIGxvY2FsIHVzZXIgdG8sIGRlZmF1bHRzIHRvICdsb2NhbGhvc3QnCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgU3BlY2lmaWVkIGRvbWFpbiB0byBhZGQgdGhlIHVzZXIgdG8uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBBZGQtTmV0VXNlciAtVXNlck5hbWUgam9obiAtUGFzc3dvcmQgJ1Bhc3N3b3JkMTIzIScKICAgICAgICAKICAgICAgICBBZGRzIGEgbG9jYWx1c2VyICdqb2huJyB0byB0aGUgbG9jYWwgbWFjaGluZSB3aXRoIHBhc3N3b3JkIG9mICdQYXNzd29yZDEyMyEnCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBBZGQtTmV0VXNlciAtVXNlck5hbWUgam9obiAtUGFzc3dvcmQgJ1Bhc3N3b3JkMTIzIScgLUNvbXB1dGVyTmFtZSBzZXJ2ZXIudGVzdGxhYi5sb2NhbAogICAgICAgIAogICAgICAgIEFkZHMgYSBsb2NhbHVzZXIgJ2pvaG4nIHdpdGggcGFzc3dvcmQgb2YgJ1Bhc3N3b3JkMTIzIScgdG8gc2VydmVyLnRlc3RsYWIubG9jYWwncyBsb2NhbCBBZG1pbmlzdHJhdG9ycyBncm91cC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEFkZC1OZXRVc2VyIC1Vc2VyTmFtZSBqb2huIC1QYXNzd29yZCBwYXNzd29yZCAtR3JvdXBOYW1lICJEb21haW4gQWRtaW5zIiAtRG9tYWluICcnCiAgICAgICAgCiAgICAgICAgQWRkcyB0aGUgdXNlciAiam9obiIgd2l0aCBwYXNzd29yZCAicGFzc3dvcmQiIHRvIHRoZSBjdXJyZW50IGRvbWFpbiBhbmQgYWRkcwogICAgICAgIHRoZSB1c2VyIHRvIHRoZSBkb21haW4gZ3JvdXAgIkRvbWFpbiBBZG1pbnMiCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBBZGQtTmV0VXNlciAtVXNlck5hbWUgam9obiAtUGFzc3dvcmQgcGFzc3dvcmQgLUdyb3VwTmFtZSAiRG9tYWluIEFkbWlucyIgLURvbWFpbiAndGVzdGluZycKICAgICAgICAKICAgICAgICBBZGRzIHRoZSB1c2VyICJqb2huIiB3aXRoIHBhc3N3b3JkICJwYXNzd29yZCIgdG8gdGhlICd0ZXN0aW5nJyBkb21haW4gYW5kIGFkZHMKICAgICAgICB0aGUgdXNlciB0byB0aGUgZG9tYWluIGdyb3VwICJEb21haW4gQWRtaW5zIgoKICAgIC5MaW5rCgogICAgICAgIGh0dHA6Ly9ibG9ncy50ZWNobmV0LmNvbS9iL2hleXNjcmlwdGluZ2d1eS9hcmNoaXZlLzIwMTAvMTEvMjMvdXNlLXBvd2Vyc2hlbGwtdG8tY3JlYXRlLWxvY2FsLXVzZXItYWNjb3VudHMuYXNweAojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyTmFtZSA9ICdiYWNrZG9vcicsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkUGFzc3dvcmQgPSAnUGFzc3dvcmQxMjMhJywKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcm91cE5hbWUsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbgogICAgKQoKICAgIGlmICgkRG9tYWluKSB7CgogICAgICAgICREb21haW5PYmplY3QgPSBHZXQtTmV0RG9tYWluIC1Eb21haW4gJERvbWFpbgogICAgICAgIGlmKC1ub3QgJERvbWFpbk9iamVjdCkgewogICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJFcnJvciBpbiBncmFiYmluZyAkRG9tYWluIG9iamVjdCIKICAgICAgICAgICAgcmV0dXJuICROdWxsCiAgICAgICAgfQoKICAgICAgICAjIGFkZCB0aGUgYXNzZW1ibHkgd2UgbmVlZAogICAgICAgIEFkZC1UeXBlIC1Bc3NlbWJseU5hbWUgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50CgogICAgICAgICMgaHR0cDovL3JpY2hhcmRzcG93ZXJzaGVsbGJsb2cud29yZHByZXNzLmNvbS8yMDA4LzA1LzI1L3N5c3RlbS1kaXJlY3RvcnlzZXJ2aWNlcy1hY2NvdW50bWFuYWdlbWVudC8KICAgICAgICAjIGdldCB0aGUgZG9tYWluIGNvbnRleHQKICAgICAgICAkQ29udGV4dCA9IE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5QcmluY2lwYWxDb250ZXh0IC1Bcmd1bWVudExpc3QgKFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuQ29udGV4dFR5cGVdOjpEb21haW4pLCAkRG9tYWluT2JqZWN0CgogICAgICAgICMgY3JlYXRlIHRoZSB1c2VyIG9iamVjdAogICAgICAgICRVc2VyID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LlVzZXJQcmluY2lwYWwgLUFyZ3VtZW50TGlzdCAkQ29udGV4dAoKICAgICAgICAjIHNldCB1c2VyIHByb3BlcnRpZXMKICAgICAgICAkVXNlci5OYW1lID0gJFVzZXJOYW1lCiAgICAgICAgJFVzZXIuU2FtQWNjb3VudE5hbWUgPSAkVXNlck5hbWUKICAgICAgICAkVXNlci5QYXNzd29yZE5vdFJlcXVpcmVkID0gJEZhbHNlCiAgICAgICAgJFVzZXIuU2V0UGFzc3dvcmQoJFBhc3N3b3JkKQogICAgICAgICRVc2VyLkVuYWJsZWQgPSAkVHJ1ZQoKICAgICAgICBXcml0ZS1WZXJib3NlICJDcmVhdGluZyB1c2VyICRVc2VyTmFtZSB0byB3aXRoIHBhc3N3b3JkICckUGFzc3dvcmQnIGluIGRvbWFpbiAkRG9tYWluIgoKICAgICAgICB0cnkgewogICAgICAgICAgICAjIGNvbW1pdCB0aGUgdXNlcgogICAgICAgICAgICAkVXNlci5TYXZlKCkKICAgICAgICAgICAgIlsqXSBVc2VyICRVc2VyTmFtZSBzdWNjZXNzZnVsbHkgY3JlYXRlZCBpbiBkb21haW4gJERvbWFpbiIKICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICBXcml0ZS1XYXJuaW5nICdbIV0gVXNlciBhbHJlYWR5IGV4aXN0cyEnCiAgICAgICAgICAgIHJldHVybgogICAgICAgIH0KICAgIH0KICAgIGVsc2UgewogICAgICAgIAogICAgICAgIFdyaXRlLVZlcmJvc2UgIkNyZWF0aW5nIHVzZXIgJFVzZXJOYW1lIHRvIHdpdGggcGFzc3dvcmQgJyRQYXNzd29yZCcgb24gJENvbXB1dGVyTmFtZSIKCiAgICAgICAgIyBpZiBpdCdzIG5vdCBhIGRvbWFpbiBhZGQsIGl0J3MgYSBsb2NhbCBtYWNoaW5lIGFkZAogICAgICAgICRPYmpPdSA9IFtBRFNJXSJXaW5OVDovLyRDb21wdXRlck5hbWUiCiAgICAgICAgJE9ialVzZXIgPSAkT2JqT3UuQ3JlYXRlKCdVc2VyJywgJFVzZXJOYW1lKQogICAgICAgICRPYmpVc2VyLlNldFBhc3N3b3JkKCRQYXNzd29yZCkKCiAgICAgICAgIyBjb21taXQgdGhlIGNoYW5nZXMgdG8gdGhlIGxvY2FsIG1hY2hpbmUKICAgICAgICB0cnkgewogICAgICAgICAgICAkTnVsbCA9ICRPYmpVc2VyLlNldEluZm8oKQogICAgICAgICAgICAiWypdIFVzZXIgJFVzZXJOYW1lIHN1Y2Nlc3NmdWxseSBjcmVhdGVkIG9uIGhvc3QgJENvbXB1dGVyTmFtZSIKICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICBXcml0ZS1XYXJuaW5nICdbIV0gQWNjb3VudCBhbHJlYWR5IGV4aXN0cyEnCiAgICAgICAgICAgIHJldHVybgogICAgICAgIH0KICAgIH0KCiAgICAjIGlmIGEgZ3JvdXAgaXMgc3BlY2lmaWVkLCBpbnZva2UgQWRkLU5ldEdyb3VwVXNlciBhbmQgcmV0dXJuIGl0cyB2YWx1ZQogICAgaWYgKCRHcm91cE5hbWUpIHsKICAgICAgICAjIGlmIHdlJ3JlIGFkZGluZyB0aGUgdXNlciB0byBhIGRvbWFpbgogICAgICAgIGlmICgkRG9tYWluKSB7CiAgICAgICAgICAgIEFkZC1OZXRHcm91cFVzZXIgLVVzZXJOYW1lICRVc2VyTmFtZSAtR3JvdXBOYW1lICRHcm91cE5hbWUgLURvbWFpbiAkRG9tYWluCiAgICAgICAgICAgICJbKl0gVXNlciAkVXNlck5hbWUgc3VjY2Vzc2Z1bGx5IGFkZGVkIHRvIGdyb3VwICRHcm91cE5hbWUgaW4gZG9tYWluICREb21haW4iCiAgICAgICAgfQogICAgICAgICMgb3RoZXJ3aXNlLCB3ZSdyZSBhZGRpbmcgdG8gYSBsb2NhbCBncm91cAogICAgICAgIGVsc2UgewogICAgICAgICAgICBBZGQtTmV0R3JvdXBVc2VyIC1Vc2VyTmFtZSAkVXNlck5hbWUgLUdyb3VwTmFtZSAkR3JvdXBOYW1lIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZQogICAgICAgICAgICAiWypdIFVzZXIgJFVzZXJOYW1lIHN1Y2Nlc3NmdWxseSBhZGRlZCB0byBncm91cCAkR3JvdXBOYW1lIG9uIGhvc3QgJENvbXB1dGVyTmFtZSIKICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBBZGQtTmV0R3JvdXBVc2VyIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBBZGRzIGEgdXNlciB0byBhIGRvbWFpbiBncm91cCBvciBhIGxvY2FsIGdyb3VwIG9uIHRoZSBjdXJyZW50IChvciByZW1vdGUpIG1hY2hpbmUsCiAgICAgICAgaWYgcGVybWlzc2lvbnMgYWxsb3csIHV0aWxpemluZyB0aGUgV2luTlQgc2VydmljZSBwcm92aWRlciBhbmQKICAgICAgICBEaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudCwgcmVzcGVjdGl2ZWx5LgoKICAgIC5QQVJBTUVURVIgVXNlck5hbWUKCiAgICAgICAgVGhlIGRvbWFpbiB1c2VybmFtZSB0byBxdWVyeSBmb3IuCgogICAgLlBBUkFNRVRFUiBHcm91cE5hbWUKCiAgICAgICAgR3JvdXAgdG8gYWRkIHRoZSB1c2VyIHRvLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIEhvc3RuYW1lIHRvIGFkZCB0aGUgdXNlciB0bywgZGVmYXVsdHMgdG8gbG9jYWxob3N0LgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIERvbWFpbiB0byBhZGQgdGhlIHVzZXIgdG8uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBBZGQtTmV0R3JvdXBVc2VyIC1Vc2VyTmFtZSBqb2huIC1Hcm91cE5hbWUgQWRtaW5pc3RyYXRvcnMKICAgICAgICAKICAgICAgICBBZGRzIGEgbG9jYWx1c2VyICJqb2huIiB0byB0aGUgbG9jYWwgZ3JvdXAgIkFkbWluaXN0cmF0b3JzIgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gQWRkLU5ldEdyb3VwVXNlciAtVXNlck5hbWUgam9obiAtR3JvdXBOYW1lICJEb21haW4gQWRtaW5zIiAtRG9tYWluIGRldi5sb2NhbAogICAgICAgIAogICAgICAgIEFkZHMgdGhlIGV4aXN0aW5nIHVzZXIgImpvaG4iIHRvIHRoZSBkb21haW4gZ3JvdXAgIkRvbWFpbiBBZG1pbnMiIGluICJkZXYubG9jYWwiCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlck5hbWUsCgogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkR3JvdXBOYW1lLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlck5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbgogICAgKQoKICAgICMgYWRkIHRoZSBhc3NlbWJseSBpZiB3ZSBuZWVkIGl0CiAgICBBZGQtVHlwZSAtQXNzZW1ibHlOYW1lIFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudAoKICAgICMgaWYgd2UncmUgYWRkaW5nIHRvIGEgcmVtb3RlIGhvc3QncyBsb2NhbCBncm91cCwgdXNlIHRoZSBXaW5OVCBwcm92aWRlcgogICAgaWYoJENvbXB1dGVyTmFtZSAtYW5kICgkQ29tcHV0ZXJOYW1lIC1uZSAibG9jYWxob3N0IikpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJBZGRpbmcgdXNlciAkVXNlck5hbWUgdG8gJEdyb3VwTmFtZSBvbiBob3N0ICRDb21wdXRlck5hbWUiCiAgICAgICAgICAgIChbQURTSV0iV2luTlQ6Ly8kQ29tcHV0ZXJOYW1lLyRHcm91cE5hbWUsZ3JvdXAiKS5hZGQoIldpbk5UOi8vJENvbXB1dGVyTmFtZS8kVXNlck5hbWUsdXNlciIpCiAgICAgICAgICAgICJbKl0gVXNlciAkVXNlck5hbWUgc3VjY2Vzc2Z1bGx5IGFkZGVkIHRvIGdyb3VwICRHcm91cE5hbWUgb24gJENvbXB1dGVyTmFtZSIKICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbIV0gRXJyb3IgYWRkaW5nIHVzZXIgJFVzZXJOYW1lIHRvIGdyb3VwICRHcm91cE5hbWUgb24gJENvbXB1dGVyTmFtZSIKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgfQogICAgfQoKICAgICMgb3RoZXJ3aXNlIGl0J3MgYSBsb2NhbCBtYWNoaW5lIG9yIGRvbWFpbiBhZGQKICAgIGVsc2UgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGlmICgkRG9tYWluKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJBZGRpbmcgdXNlciAkVXNlck5hbWUgdG8gJEdyb3VwTmFtZSBvbiBkb21haW4gJERvbWFpbiIKICAgICAgICAgICAgICAgICRDVCA9IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuQ29udGV4dFR5cGVdOjpEb21haW4KICAgICAgICAgICAgICAgICREb21haW5PYmplY3QgPSBHZXQtTmV0RG9tYWluIC1Eb21haW4gJERvbWFpbgogICAgICAgICAgICAgICAgaWYoLW5vdCAkRG9tYWluT2JqZWN0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICROdWxsCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAjIGdldCB0aGUgZnVsbCBwcmluY2lwYWwgY29udGV4dAogICAgICAgICAgICAgICAgJENvbnRleHQgPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuUHJpbmNpcGFsQ29udGV4dCAtQXJndW1lbnRMaXN0ICRDVCwgJERvbWFpbk9iamVjdCAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgIyBvdGhlcndpc2UsIGdldCB0aGUgbG9jYWwgbWFjaGluZSBjb250ZXh0CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJBZGRpbmcgdXNlciAkVXNlck5hbWUgdG8gJEdyb3VwTmFtZSBvbiBsb2NhbGhvc3QiCiAgICAgICAgICAgICAgICAkQ29udGV4dCA9IE5ldy1PYmplY3QgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LlByaW5jaXBhbENvbnRleHQoW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5Db250ZXh0VHlwZV06Ok1hY2hpbmUsICRFbnY6Q29tcHV0ZXJOYW1lKQogICAgICAgICAgICB9CgogICAgICAgICAgICAjIGZpbmQgdGhlIHBhcnRpY3VsYXIgZ3JvdXAKICAgICAgICAgICAgJEdyb3VwID0gW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5Hcm91cFByaW5jaXBhbF06OkZpbmRCeUlkZW50aXR5KCRDb250ZXh0LCRHcm91cE5hbWUpCgogICAgICAgICAgICAjIGFkZCB0aGUgcGFydGljdWxhciB1c2VyIHRvIHRoZSBncm91cAogICAgICAgICAgICAkR3JvdXAuTWVtYmVycy5hZGQoJENvbnRleHQsIFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuSWRlbnRpdHlUeXBlXTo6U2FtQWNjb3VudE5hbWUsICRVc2VyTmFtZSkKCiAgICAgICAgICAgICMgY29tbWl0IHRoZSBjaGFuZ2VzCiAgICAgICAgICAgICRHcm91cC5TYXZlKCkKICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJFcnJvciBhZGRpbmcgJFVzZXJOYW1lIHRvICRHcm91cE5hbWUgOiAkXyIKICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtVXNlclByb3BlcnR5IHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBSZXR1cm5zIGEgbGlzdCBvZiBhbGwgdXNlciBvYmplY3QgcHJvcGVydGllcy4gSWYgYSBwcm9wZXJ0eQogICAgICAgIG5hbWUgaXMgc3BlY2lmaWVkLCBpdCByZXR1cm5zIGFsbCBbdXNlcjpwcm9wZXJ0eV0gdmFsdWVzLgoKICAgICAgICBUYWtlbiBkaXJlY3RseSBmcm9tIEBvYnNjdXJlc2VjJ3MgcG9zdDoKICAgICAgICAgICAgaHR0cDovL29ic2N1cmVzZWN1cml0eS5ibG9nc3BvdC5jb20vMjAxNC8wNC9BRFNJU2VhcmNoZXIuaHRtbAoKICAgIC5QQVJBTUVURVIgUHJvcGVydGllcwoKICAgICAgICBQcm9wZXJ0eSBuYW1lcyB0byBleHRyYWN0IGZvciB1c2Vycy4KCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBUaGUgZG9tYWluIHRvIHF1ZXJ5IGZvciB1c2VyIHByb3BlcnRpZXMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LVVzZXJQcm9wZXJ0eSAtRG9tYWluIHRlc3RpbmcKICAgICAgICAKICAgICAgICBSZXR1cm5zIGFsbCB1c2VyIHByb3BlcnRpZXMgZm9yIHVzZXJzIGluIHRoZSAndGVzdGluZycgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LVVzZXJQcm9wZXJ0eSAtUHJvcGVydGllcyBzc24sbGFzdGxvZ29uLGxvY2F0aW9uCiAgICAgICAgCiAgICAgICAgUmV0dXJucyBhbGwgYW4gYXJyYXkgb2YgdXNlci9zc24vbGFzdGxvZ2luL2xvY2F0aW9uIGNvbWJpbmF0aW9ucwogICAgICAgIGZvciB1c2VycyBpbiB0aGUgY3VycmVudCBkb21haW4uCgogICAgLkxJTksKCiAgICAgICAgaHR0cDovL29ic2N1cmVzZWN1cml0eS5ibG9nc3BvdC5jb20vMjAxNC8wNC9BRFNJU2VhcmNoZXIuaHRtbAojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFByb3BlcnRpZXMsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICAKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCgogICAgaWYoJFByb3BlcnRpZXMpIHsKICAgICAgICAjIGV4dHJhY3Qgb3V0IHRoZSBzZXQgb2YgYWxsIHByb3BlcnRpZXMgZm9yIGVhY2ggb2JqZWN0CiAgICAgICAgJFByb3BlcnRpZXMgPSAsIm5hbWUiICsgJFByb3BlcnRpZXMKICAgICAgICBHZXQtTmV0VXNlciAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLVBhZ2VTaXplICRQYWdlU2l6ZSAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCB8IFNlbGVjdC1PYmplY3QgLVByb3BlcnR5ICRQcm9wZXJ0aWVzCiAgICB9CiAgICBlbHNlIHsKICAgICAgICAjIGV4dHJhY3Qgb3V0IGp1c3QgdGhlIHByb3BlcnR5IG5hbWVzCiAgICAgICAgR2V0LU5ldFVzZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1QYWdlU2l6ZSAkUGFnZVNpemUgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgfCBTZWxlY3QtT2JqZWN0IC1GaXJzdCAxIHwgR2V0LU1lbWJlciAtTWVtYmVyVHlwZSAqUHJvcGVydHkgfCBTZWxlY3QtT2JqZWN0IC1Qcm9wZXJ0eSAnTmFtZScKICAgIH0KfQoKCmZpbHRlciBGaW5kLVVzZXJGaWVsZCB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgU2VhcmNoZXMgdXNlciBvYmplY3QgZmllbGRzIGZvciBhIGdpdmVuIHdvcmQgKGRlZmF1bHQgKnBhc3MqKS4gRGVmYXVsdAogICAgICAgIGZpZWxkIGJlaW5nIHNlYXJjaGVkIGlzICdkZXNjcmlwdGlvbicuCgogICAgICAgIFRha2VuIGRpcmVjdGx5IGZyb20gQG9ic2N1cmVzZWMncyBwb3N0OgogICAgICAgICAgICBodHRwOi8vb2JzY3VyZXNlY3VyaXR5LmJsb2dzcG90LmNvbS8yMDE0LzA0L0FEU0lTZWFyY2hlci5odG1sCgogICAgLlBBUkFNRVRFUiBTZWFyY2hUZXJtCgogICAgICAgIFRlcm0gdG8gc2VhcmNoIGZvciwgZGVmYXVsdCBvZiAicGFzcyIuCgogICAgLlBBUkFNRVRFUiBTZWFyY2hGaWVsZAoKICAgICAgICBVc2VyIGZpZWxkIHRvIHNlYXJjaCwgZGVmYXVsdCBvZiAiZGVzY3JpcHRpb24iLgoKICAgIC5QQVJBTUVURVIgQURTcGF0aAoKICAgICAgICBUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgRG9tYWluIHRvIHNlYXJjaCBjb21wdXRlciBmaWVsZHMgZm9yLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBQYWdlU2l6ZQoKICAgICAgICBUaGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEZpbmQtVXNlckZpZWxkIC1TZWFyY2hGaWVsZCBpbmZvIC1TZWFyY2hUZXJtIGJhY2t1cAoKICAgICAgICBGaW5kIHVzZXIgYWNjb3VudHMgd2l0aCAiYmFja3VwIiBpbiB0aGUgImluZm8iIGZpZWxkLgojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uPTAsVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFRlcm0gPSAncGFzcycsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEZpZWxkID0gJ2Rlc2NyaXB0aW9uJywKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQURTcGF0aCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCiAKICAgIEdldC1OZXRVc2VyIC1BRFNwYXRoICRBRFNwYXRoIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtRmlsdGVyICIoJFNlYXJjaEZpZWxkPSokU2VhcmNoVGVybSopIiAtUGFnZVNpemUgJFBhZ2VTaXplIHwgU2VsZWN0LU9iamVjdCBzYW1hY2NvdW50bmFtZSwkU2VhcmNoRmllbGQKfQoKCmZpbHRlciBHZXQtVXNlckV2ZW50IHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBEdW1wIGFuZCBwYXJzZSBzZWN1cml0eSBldmVudHMgcmVsYXRpbmcgdG8gYW4gYWNjb3VudCBsb2dvbiAoSUQgNDYyNCkKICAgICAgICBvciBhIFRHVCByZXF1ZXN0IGV2ZW50IChJRCA0NzY4KS4gSW50ZW5kZWQgdG8gYmUgdXNlZCBhbmQgdGVzdGVkIG9uCiAgICAgICAgV2luZG93cyAyMDA4IERvbWFpbiBDb250cm9sbGVycy4KICAgICAgICBBZG1pbiBSZXFkPyBZRVMKCiAgICAgICAgQXV0aG9yOiBAc2l4ZHViCgogICAgLlBBUkFNRVRFUiBDb21wdXRlck5hbWUKCiAgICAgICAgVGhlIGNvbXB1dGVyIHRvIGdldCBldmVudHMgZnJvbS4gRGVmYXVsdDogTG9jYWxob3N0CgogICAgLlBBUkFNRVRFUiBFdmVudFR5cGUKCiAgICAgICAgRWl0aGVyICdsb2dvbicsICd0Z3QnLCBvciAnYWxsJy4gRGVmYXVsdHM6ICdsb2dvbicKCiAgICAuUEFSQU1FVEVSIERhdGVTdGFydAoKICAgICAgICBGaWx0ZXIgb3V0IGFsbCBldmVudHMgYmVmb3JlIHRoaXMgZGF0ZS4gRGVmYXVsdDogNSBkYXlzCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1Vc2VyRXZlbnQgLUNvbXB1dGVyTmFtZSBEb21haW5Db250cm9sbGVyLnRlc3RsYWIubG9jYWwKCiAgICAuTElOSwoKICAgICAgICBodHRwOi8vd3d3LnNpeGR1Yi5uZXQvMjAxNC8xMS8wNy9vZmZlbnNpdmUtZXZlbnQtcGFyc2luZy1icmluZ2luZy1ob21lLXRyb3BoaWVzLwojPgoKICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICRFbnY6Q29tcHV0ZXJOYW1lLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgIFtWYWxpZGF0ZVNldCgibG9nb24iLCJ0Z3QiLCJhbGwiKV0KICAgICAgICAkRXZlbnRUeXBlID0gImxvZ29uIiwKCiAgICAgICAgW0RhdGVUaW1lXQogICAgICAgICREYXRlU3RhcnQgPSBbRGF0ZVRpbWVdOjpUb2RheS5BZGREYXlzKC01KSwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICBpZigkRXZlbnRUeXBlLlRvTG93ZXIoKSAtbGlrZSAibG9nb24iKSB7CiAgICAgICAgW0ludDMyW11dJElEID0gQCg0NjI0KQogICAgfQogICAgZWxzZWlmKCRFdmVudFR5cGUuVG9Mb3dlcigpIC1saWtlICJ0Z3QiKSB7CiAgICAgICAgW0ludDMyW11dJElEID0gQCg0NzY4KQogICAgfQogICAgZWxzZSB7CiAgICAgICAgW0ludDMyW11dJElEID0gQCg0NjI0LCA0NzY4KQogICAgfQoKICAgIGlmKCRDcmVkZW50aWFsKSB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiVXNpbmcgYWx0ZXJuYXRpdmUgY3JlZGVudGlhbHMiCiAgICAgICAgJEFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICdDb21wdXRlck5hbWUnID0gJENvbXB1dGVyTmFtZTsKICAgICAgICAgICAgJ0NyZWRlbnRpYWwnID0gJENyZWRlbnRpYWw7CiAgICAgICAgICAgICdGaWx0ZXJIYXNoVGFibGUnID0gQHsgTG9nTmFtZSA9ICdTZWN1cml0eSc7IElEPSRJRDsgU3RhcnRUaW1lPSREYXRlU3RhcnR9OwogICAgICAgICAgICAnRXJyb3JBY3Rpb24nID0gJ1NpbGVudGx5Q29udGludWUnOwogICAgICAgIH0KICAgIH0KICAgIGVsc2UgewogICAgICAgICRBcmd1bWVudHMgPSBAewogICAgICAgICAgICAnQ29tcHV0ZXJOYW1lJyA9ICRDb21wdXRlck5hbWU7CiAgICAgICAgICAgICdGaWx0ZXJIYXNoVGFibGUnID0gQHsgTG9nTmFtZSA9ICdTZWN1cml0eSc7IElEPSRJRDsgU3RhcnRUaW1lPSREYXRlU3RhcnR9OwogICAgICAgICAgICAnRXJyb3JBY3Rpb24nID0gJ1NpbGVudGx5Q29udGludWUnOyAgICAgICAgICAgIAogICAgICAgIH0KICAgIH0KCiAgICAjIGdyYWIgYWxsIGV2ZW50cyBtYXRjaGluZyBvdXIgZmlsdGVyIGZvciB0aGUgc3BlY2lmaWVkIGhvc3QKICAgIEdldC1XaW5FdmVudCBAQXJndW1lbnRzIHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICBpZigkSUQgLWNvbnRhaW5zIDQ2MjQpIHsgICAgCiAgICAgICAgICAgICMgZmlyc3QgcGFyc2UgYW5kIGNoZWNrIHRoZSBsb2dvbiBldmVudCB0eXBlLiBUaGlzIGNvdWxkIGJlIGxhdGVyIGFkYXB0ZWQgYW5kIHRlc3RlZCBmb3IgUkRQIGxvZ29ucyAodHlwZSAxMCkKICAgICAgICAgICAgaWYoJF8ubWVzc2FnZSAtbWF0Y2ggJyg/cykoPzw9TG9nb24gVHlwZTopLio/KD89KEltcGVyc29uYXRpb24gTGV2ZWw6fE5ldyBMb2dvbjopKScpIHsKICAgICAgICAgICAgICAgIGlmKCRNYXRjaGVzKSB7CiAgICAgICAgICAgICAgICAgICAgJExvZ29uVHlwZSA9ICRNYXRjaGVzWzBdLnRyaW0oKQogICAgICAgICAgICAgICAgICAgICRNYXRjaGVzID0gJE51bGwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRMb2dvblR5cGUgPSAiIgogICAgICAgICAgICB9CgogICAgICAgICAgICAjIGludGVyYWN0aXZlIGxvZ29ucyBvciBkb21haW4gbG9nb25zCiAgICAgICAgICAgIGlmICgoJExvZ29uVHlwZSAtZXEgMikgLW9yICgkTG9nb25UeXBlIC1lcSAzKSkgewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAjIHBhcnNlIGFuZCBzdG9yZSB0aGUgYWNjb3VudCB1c2VkIGFuZCB0aGUgYWRkcmVzcyB0aGV5IGNhbWUgZnJvbQogICAgICAgICAgICAgICAgICAgIGlmKCRfLm1lc3NhZ2UgLW1hdGNoICcoP3MpKD88PU5ldyBMb2dvbjopLio/KD89UHJvY2VzcyBJbmZvcm1hdGlvbjopJykgewogICAgICAgICAgICAgICAgICAgICAgICBpZigkTWF0Y2hlcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJOYW1lID0gJE1hdGNoZXNbMF0uc3BsaXQoImBuIilbMl0uc3BsaXQoIjoiKVsxXS50cmltKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICREb21haW4gPSAkTWF0Y2hlc1swXS5zcGxpdCgiYG4iKVszXS5zcGxpdCgiOiIpWzFdLnRyaW0oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1hdGNoZXMgPSAkTnVsbAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmKCRfLm1lc3NhZ2UgLW1hdGNoICcoP3MpKD88PU5ldHdvcmsgSW5mb3JtYXRpb246KS4qPyg/PVNvdXJjZSBQb3J0OiknKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRNYXRjaGVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQWRkcmVzcyA9ICRNYXRjaGVzWzBdLnNwbGl0KCJgbiIpWzJdLnNwbGl0KCI6IilbMV0udHJpbSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWF0Y2hlcyA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICMgb25seSBhZGQgaWYgdGhlcmUgd2FzIGFjY291bnQgaW5mb3JtYXRpb24gbm90IGZvciBhIG1hY2hpbmUgb3IgYW5vbnltb3VzIGxvZ29uCiAgICAgICAgICAgICAgICAgICAgaWYgKCRVc2VyTmFtZSAtYW5kICgtbm90ICRVc2VyTmFtZS5lbmRzV2l0aCgnJCcpKSAtYW5kICgkVXNlck5hbWUgLW5lICdBTk9OWU1PVVMgTE9HT04nKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkTG9nb25FdmVudFByb3BlcnRpZXMgPSBAewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0RvbWFpbicgPSAkRG9tYWluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29tcHV0ZXJOYW1lJyA9ICRDb21wdXRlck5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdVc2VybmFtZScgPSAkVXNlck5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBZGRyZXNzJyA9ICRBZGRyZXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnSUQnID0gJzQ2MjQnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTG9nb25UeXBlJyA9ICRMb2dvblR5cGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdUaW1lJyA9ICRfLlRpbWVDcmVhdGVkCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5ICRMb2dvbkV2ZW50UHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvciBwYXJzaW5nIGV2ZW50IGxvZ3M6ICRfIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmKCRJRCAtY29udGFpbnMgNDc2OCkgewogICAgICAgICAgICAjIHRoZSBUR1QgZXZlbnQgdHlwZQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgaWYoJF8ubWVzc2FnZSAtbWF0Y2ggJyg/cykoPzw9QWNjb3VudCBJbmZvcm1hdGlvbjopLio/KD89U2VydmljZSBJbmZvcm1hdGlvbjopJykgewogICAgICAgICAgICAgICAgICAgIGlmKCRNYXRjaGVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRVc2VybmFtZSA9ICRNYXRjaGVzWzBdLnNwbGl0KCJgbiIpWzFdLnNwbGl0KCI6IilbMV0udHJpbSgpCiAgICAgICAgICAgICAgICAgICAgICAgICREb21haW4gPSAkTWF0Y2hlc1swXS5zcGxpdCgiYG4iKVsyXS5zcGxpdCgiOiIpWzFdLnRyaW0oKQogICAgICAgICAgICAgICAgICAgICAgICAkTWF0Y2hlcyA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmKCRfLm1lc3NhZ2UgLW1hdGNoICcoP3MpKD88PU5ldHdvcmsgSW5mb3JtYXRpb246KS4qPyg/PUFkZGl0aW9uYWwgSW5mb3JtYXRpb246KScpIHsKICAgICAgICAgICAgICAgICAgICBpZigkTWF0Y2hlcykgewogICAgICAgICAgICAgICAgICAgICAgICAkQWRkcmVzcyA9ICRNYXRjaGVzWzBdLnNwbGl0KCJgbiIpWzFdLnNwbGl0KCI6IilbLTFdLnRyaW0oKQogICAgICAgICAgICAgICAgICAgICAgICAkTWF0Y2hlcyA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRMb2dvbkV2ZW50UHJvcGVydGllcyA9IEB7CiAgICAgICAgICAgICAgICAgICAgJ0RvbWFpbicgPSAkRG9tYWluCiAgICAgICAgICAgICAgICAgICAgJ0NvbXB1dGVyTmFtZScgPSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgJ1VzZXJuYW1lJyA9ICRVc2VyTmFtZQogICAgICAgICAgICAgICAgICAgICdBZGRyZXNzJyA9ICRBZGRyZXNzCiAgICAgICAgICAgICAgICAgICAgJ0lEJyA9ICc0NzY4JwogICAgICAgICAgICAgICAgICAgICdMb2dvblR5cGUnID0gJycKICAgICAgICAgICAgICAgICAgICAnVGltZScgPSAkXy5UaW1lQ3JlYXRlZAogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIE5ldy1PYmplY3QgLVR5cGVOYW1lIFBTT2JqZWN0IC1Qcm9wZXJ0eSAkTG9nb25FdmVudFByb3BlcnRpZXMKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvciBwYXJzaW5nIGV2ZW50IGxvZ3M6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LU9iamVjdEFjbCB7CjwjCiAgICAuU1lOT1BTSVMKICAgICAgICBSZXR1cm5zIHRoZSBBQ0xzIGFzc29jaWF0ZWQgd2l0aCBhIHNwZWNpZmljIGFjdGl2ZSBkaXJlY3Rvcnkgb2JqZWN0LgoKICAgICAgICBUaGFua3MgU2VhbiBNZXRjYWxmIChAcHlyb3RlazMpIGZvciB0aGUgaWRlYSBhbmQgZ3VpZGFuY2UuCgogICAgLlBBUkFNRVRFUiBTYW1BY2NvdW50TmFtZQoKICAgICAgICBPYmplY3QgbmFtZSB0byBmaWx0ZXIgZm9yLiAgICAgICAgCgogICAgLlBBUkFNRVRFUiBOYW1lCgogICAgICAgIE9iamVjdCBuYW1lIHRvIGZpbHRlciBmb3IuCgogICAgLlBBUkFNRVRFUiBEaXN0aW5ndWlzaGVkTmFtZQoKICAgICAgICBPYmplY3QgZGlzdGluZ3Vpc2hlZCBuYW1lIHRvIGZpbHRlciBmb3IuCgogICAgLlBBUkFNRVRFUiBSZXNvbHZlR1VJRHMKCiAgICAgICAgU3dpdGNoLiBSZXNvbHZlIEdVSURzIHRvIHRoZWlyIGRpc3BsYXkgbmFtZXMuCgogICAgLlBBUkFNRVRFUiBGaWx0ZXIKCiAgICAgICAgQSBjdXN0b21pemVkIGxkYXAgZmlsdGVyIHN0cmluZyB0byB1c2UsIGUuZy4gIihkZXNjcmlwdGlvbj0qYWRtaW4qKSIKICAgICAKICAgIC5QQVJBTUVURVIgQURTcGF0aAoKICAgICAgICBUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBBRFNwcmVmaXgKCiAgICAgICAgUHJlZml4IHRvIHNldCBmb3IgdGhlIHNlYXJjaGVyIChsaWtlICJDTj1TaXRlcyxDTj1Db25maWd1cmF0aW9uIikKCiAgICAuUEFSQU1FVEVSIFJpZ2h0c0ZpbHRlcgoKICAgICAgICBPbmx5IHJldHVybiByZXN1bHRzIHdpdGggdGhlIGFzc29jaWF0ZWQgcmlnaHRzLCAiQWxsIiwgIlJlc2V0UGFzc3dvcmQiLCJXcml0ZU1lbWJlcnMiCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byB1c2UgZm9yIHRoZSBxdWVyeSwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU9iamVjdEFjbCAtU2FtQWNjb3VudE5hbWUgbWF0dC5hZG1pbiAtZG9tYWluIHRlc3RsYWIubG9jYWwKICAgICAgICAKICAgICAgICBHZXQgdGhlIEFDTHMgZm9yIHRoZSBtYXR0LmFkbWluIHVzZXIgaW4gdGhlIHRlc3RsYWIubG9jYWwgZG9tYWluCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtT2JqZWN0QWNsIC1TYW1BY2NvdW50TmFtZSBtYXR0LmFkbWluIC1kb21haW4gdGVzdGxhYi5sb2NhbCAtUmVzb2x2ZUdVSURzCiAgICAgICAgCiAgICAgICAgR2V0IHRoZSBBQ0xzIGZvciB0aGUgbWF0dC5hZG1pbiB1c2VyIGluIHRoZSB0ZXN0bGFiLmxvY2FsIGRvbWFpbiBhbmQKICAgICAgICByZXNvbHZlIHJlbGV2YW50IEdVSURzIHRvIHRoZWlyIGRpc3BsYXkgbmFtZXMuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0T1UgLUZ1bGxEYXRhIHwgR2V0LU9iamVjdEFjbCAtUmVzb2x2ZUdVSURzCgogICAgICAgIEVudW1lcmF0ZSB0aGUgQUNMIHBlcm1pc3Npb25zIGZvciBhbGwgT1VzIGluIHRoZSBkb21haW4uCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNhbUFjY291bnROYW1lLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE5hbWUgPSAiKiIsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRGlzdGluZ3Vpc2hlZE5hbWUgPSAiKiIsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFJlc29sdmVHVUlEcywKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRmlsdGVyLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwYXRoLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwcmVmaXgsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlU2V0KCJBbGwiLCJSZXNldFBhc3N3b3JkIiwiV3JpdGVNZW1iZXJzIildCiAgICAgICAgJFJpZ2h0c0ZpbHRlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAKICAgICkKCiAgICBiZWdpbiB7CiAgICAgICAgJFNlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQURTcGF0aCAkQURTcGF0aCAtQURTcHJlZml4ICRBRFNwcmVmaXggLVBhZ2VTaXplICRQYWdlU2l6ZSAKCiAgICAgICAgIyBnZXQgYSBHVUlEIC0+IG5hbWUgbWFwcGluZwogICAgICAgIGlmKCRSZXNvbHZlR1VJRHMpIHsKICAgICAgICAgICAgJEdVSURzID0gR2V0LUdVSURNYXAgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgICAgICB9CiAgICB9CgogICAgcHJvY2VzcyB7CgogICAgICAgIGlmICgkU2VhcmNoZXIpIHsKCiAgICAgICAgICAgIGlmKCRTYW1BY2NvdW50TmFtZSkgewogICAgICAgICAgICAgICAgJFNlYXJjaGVyLmZpbHRlcj0iKCYoc2FtYWNjb3VudG5hbWU9JFNhbUFjY291bnROYW1lKShuYW1lPSROYW1lKShkaXN0aW5ndWlzaGVkbmFtZT0kRGlzdGluZ3Vpc2hlZE5hbWUpJEZpbHRlcikiICAKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRTZWFyY2hlci5maWx0ZXI9IigmKG5hbWU9JE5hbWUpKGRpc3Rpbmd1aXNoZWRuYW1lPSREaXN0aW5ndWlzaGVkTmFtZSkkRmlsdGVyKSIgIAogICAgICAgICAgICB9CiAgCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkUmVzdWx0cyA9ICRTZWFyY2hlci5GaW5kQWxsKCkKICAgICAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgJE9iamVjdCA9IFthZHNpXSgkXy5wYXRoKQoKICAgICAgICAgICAgICAgICAgICBpZigkT2JqZWN0LmRpc3Rpbmd1aXNoZWRuYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRBY2Nlc3MgPSAkT2JqZWN0LlBzQmFzZS5PYmplY3RTZWN1cml0eS5hY2Nlc3MKICAgICAgICAgICAgICAgICAgICAgICAgJEFjY2VzcyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ09iamVjdEROJyAkT2JqZWN0LmRpc3Rpbmd1aXNoZWRuYW1lWzBdCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJE9iamVjdC5vYmplY3RzaWRbMF0pewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTID0gKE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXIoJE9iamVjdC5vYmplY3RzaWRbMF0sMCkpLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUyA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ09iamVjdFNJRCcgJFMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgIGlmKCRSaWdodHNGaWx0ZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJEd1aWRGaWx0ZXIgPSBTd2l0Y2ggKCRSaWdodHNGaWx0ZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJSZXNldFBhc3N3b3JkIiB7ICIwMDI5OTU3MC0yNDZkLTExZDAtYTc2OC0wMGFhMDA2ZTA1MjkiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJXcml0ZU1lbWJlcnMiIHsgImJmOTY3OWMwLTBkZTYtMTFkMC1hMjg1LTAwYWEwMDMwNDllMiIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdCB7ICIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAifQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRfLk9iamVjdFR5cGUgLWVxICRHdWlkRmlsdGVyKSB7ICRfIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRfCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICBpZigkR1VJRHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBpZiB3ZSdyZSByZXNvbHZpbmcgR1VJRHMsIG1hcCB0aGVtIHRoZW0gdG8gdGhlIHJlc29sdmVkIGhhc2ggdGFibGUKICAgICAgICAgICAgICAgICAgICAgICAgJEFjbFByb3BlcnRpZXMgPSBAe30KICAgICAgICAgICAgICAgICAgICAgICAgJF8ucHNvYmplY3QucHJvcGVydGllcyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAoJF8uTmFtZSAtZXEgJ09iamVjdFR5cGUnKSAtb3IgKCRfLk5hbWUgLWVxICdJbmhlcml0ZWRPYmplY3RUeXBlJykgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEFjbFByb3BlcnRpZXNbJF8uTmFtZV0gPSAkR1VJRFNbJF8uVmFsdWUudG9TdHJpbmcoKV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQWNsUHJvcGVydGllc1skXy5OYW1lXSA9ICRfLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEFjbFByb3BlcnRpZXNbJF8uTmFtZV0gPSAkXy5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIE5ldy1PYmplY3QgLVR5cGVOYW1lIFBTT2JqZWN0IC1Qcm9wZXJ0eSAkQWNsUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsgJF8gfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJFJlc3VsdHMuZGlzcG9zZSgpCiAgICAgICAgICAgICAgICAkU2VhcmNoZXIuZGlzcG9zZSgpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAkXwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gQWRkLU9iamVjdEFjbCB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgQWRkcyBhbiBBQ0wgZm9yIGEgc3BlY2lmaWMgYWN0aXZlIGRpcmVjdG9yeSBvYmplY3QuCiAgICAgICAgCiAgICAgICAgQWRtaW5TREhvbGRlciBBQ0wgYXBwcm9hY2ggZnJvbSBTZWFuIE1ldGNhbGYgKEBweXJvdGVrMykKICAgICAgICAgICAgaHR0cHM6Ly9hZHNlY3VyaXR5Lm9yZy8/cD0xOTA2CgogICAgICAgIEFDRSBzZXR0aW5nIG1ldGhvZCBhZGFwdGVkIGZyb20gaHR0cHM6Ly9zb2NpYWwudGVjaG5ldC5taWNyb3NvZnQuY29tL0ZvcnVtcy93aW5kb3dzc2VydmVyL2VuLVVTL2RmM2JmZDMzLWMwNzAtNGE5Yy1iZTk4LWM0ZGE2ZTU5MWEwYS9mb3J1bS1mYXEtdXNpbmctcG93ZXJzaGVsbC10by1hc3NpZ24tcGVybWlzc2lvbnMtb24tYWN0aXZlLWRpcmVjdG9yeS1vYmplY3RzLgoKICAgICAgICAnUmVzZXRQYXNzd29yZCcgZG9lc24ndCBuZWVkIHRvIGtub3cgdGhlIHVzZXIncyBjdXJyZW50IHBhc3N3b3JkCiAgICAgICAgJ1dyaXRlTWVtYmVycycgYWxsb3dzIGZvciB0aGUgbW9kaWZpY2F0aW9uIG9mIGdyb3VwIG1lbWJlcnNoaXAKCiAgICAuUEFSQU1FVEVSIFRhcmdldFNhbUFjY291bnROYW1lCgogICAgICAgIFRhcmdldCBvYmplY3QgbmFtZSB0byBmaWx0ZXIgZm9yLiAgICAgICAgCgogICAgLlBBUkFNRVRFUiBUYXJnZXROYW1lCgogICAgICAgIFRhcmdldCBvYmplY3QgbmFtZSB0byBmaWx0ZXIgZm9yLgoKICAgIC5QQVJBTUVURVIgVGFyZ2V0RGlzdGluZ3Vpc2hlZE5hbWUKCiAgICAgICAgVGFyZ2V0IG9iamVjdCBkaXN0aW5ndWlzaGVkIG5hbWUgdG8gZmlsdGVyIGZvci4KCiAgICAuUEFSQU1FVEVSIFRhcmdldEZpbHRlcgoKICAgICAgICBBIGN1c3RvbWl6ZWQgbGRhcCBmaWx0ZXIgc3RyaW5nIHRvIHVzZSB0byBmaW5kIGEgdGFyZ2V0LCBlLmcuICIoZGVzY3JpcHRpb249KmFkbWluKikiCgogICAgLlBBUkFNRVRFUiBUYXJnZXRBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSBmb3IgdGhlIHRhcmdldCwgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgoKICAgIC5QQVJBTUVURVIgVGFyZ2V0QURTcHJlZml4CgogICAgICAgIFByZWZpeCB0byBzZXQgZm9yIHRoZSB0YXJnZXQgc2VhcmNoZXIgKGxpa2UgIkNOPVNpdGVzLENOPUNvbmZpZ3VyYXRpb24iKQoKICAgIC5QQVJBTUVURVIgUHJpbmNpcGFsU0lECgogICAgICAgIFRoZSBTSUQgb2YgdGhlIHByaW5jaXBhbCBvYmplY3QgdG8gYWRkIGZvciBhY2Nlc3MuCgogICAgLlBBUkFNRVRFUiBQcmluY2lwYWxOYW1lCgogICAgICAgIFRoZSBuYW1lIG9mIHRoZSBwcmluY2lwYWwgb2JqZWN0IHRvIGFkZCBmb3IgYWNjZXNzLgoKICAgIC5QQVJBTUVURVIgUHJpbmNpcGFsU2FtQWNjb3VudE5hbWUKCiAgICAgICAgVGhlIHNhbUFjY291bnROYW1lIG9mIHRoZSBwcmluY2lwYWwgb2JqZWN0IHRvIGFkZCBmb3IgYWNjZXNzLgoKICAgIC5QQVJBTUVURVIgUmlnaHRzCgogICAgICAgIFJpZ2h0cyB0byBhZGQgZm9yIHRoZSBwcmluY2lwYWwsICJBbGwiLCJSZXNldFBhc3N3b3JkIiwiV3JpdGVNZW1iZXJzIiwiRENTeW5jIgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gdXNlIGZvciB0aGUgdGFyZ2V0IHF1ZXJ5LCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBQYWdlU2l6ZQoKICAgICAgICBUaGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgogICAgLkVYQU1QTEUKCiAgICAgICAgQWRkLU9iamVjdEFjbCAtVGFyZ2V0U2FtQWNjb3VudE5hbWUgbWF0dCAtUHJpbmNpcGFsU2FtQWNjb3VudE5hbWUgam9obgoKICAgICAgICBHcmFudHMgJ2pvaG4nIGFsbCBmdWxsIGFjY2VzcyByaWdodHMgdG8gdGhlICdtYXR0JyBhY2NvdW50LgoKICAgIC5FWEFNUExFCgogICAgICAgIEFkZC1PYmplY3RBY2wgLVRhcmdldFNhbUFjY291bnROYW1lIG1hdHQgLVByaW5jaXBhbFNhbUFjY291bnROYW1lIGpvaG4gLVJpZ2h0cyBSZXNldFBhc3N3b3JkCgogICAgICAgIEdyYW50cyAnam9obicgdGhlIHJpZ2h0IHRvIHJlc2V0IHRoZSBwYXNzd29yZCBmb3IgdGhlICdtYXR0JyBhY2NvdW50LgoKICAgIC5MSU5LCgogICAgICAgIGh0dHBzOi8vYWRzZWN1cml0eS5vcmcvP3A9MTkwNgogICAgICAgIAogICAgICAgIGh0dHBzOi8vc29jaWFsLnRlY2huZXQubWljcm9zb2Z0LmNvbS9Gb3J1bXMvd2luZG93c3NlcnZlci9lbi1VUy9kZjNiZmQzMy1jMDcwLTRhOWMtYmU5OC1jNGRhNmU1OTFhMGEvZm9ydW0tZmFxLXVzaW5nLXBvd2Vyc2hlbGwtdG8tYXNzaWduLXBlcm1pc3Npb25zLW9uLWFjdGl2ZS1kaXJlY3Rvcnktb2JqZWN0cz9mb3J1bT13aW5zZXJ2ZXJwb3dlcnNoZWxsCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbU3RyaW5nXQogICAgICAgICRUYXJnZXRTYW1BY2NvdW50TmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVGFyZ2V0TmFtZSA9ICIqIiwKCiAgICAgICAgW0FsaWFzKCdETicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRhcmdldERpc3Rpbmd1aXNoZWROYW1lID0gIioiLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRUYXJnZXRGaWx0ZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRhcmdldEFEU3BhdGgsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRhcmdldEFEU3ByZWZpeCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbVmFsaWRhdGVQYXR0ZXJuKCdeUy0xLTUtMjEtWzAtOV0rLVswLTldKy1bMC05XSstWzAtOV0rJyldCiAgICAgICAgJFByaW5jaXBhbFNJRCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkUHJpbmNpcGFsTmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkUHJpbmNpcGFsU2FtQWNjb3VudE5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlU2V0KCJBbGwiLCJSZXNldFBhc3N3b3JkIiwiV3JpdGVNZW1iZXJzIiwiRENTeW5jIildCiAgICAgICAgJFJpZ2h0cyA9ICJBbGwiLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRSaWdodHNHVUlELAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMAogICAgKQoKICAgIGJlZ2luIHsKICAgICAgICAkU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1BRFNwYXRoICRUYXJnZXRBRFNwYXRoIC1BRFNwcmVmaXggJFRhcmdldEFEU3ByZWZpeCAtUGFnZVNpemUgJFBhZ2VTaXplCgogICAgICAgIGlmKCRQcmluY2lwYWxTSUQpIHsKICAgICAgICAgICAgJFJlc29sdmVkUHJpbmNpcGFsU0lEID0gJFByaW5jaXBhbFNJRAogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJFByaW5jaXBhbCA9IEdldC1BRE9iamVjdCAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLU5hbWUgJFByaW5jaXBhbE5hbWUgLVNhbUFjY291bnROYW1lICRQcmluY2lwYWxTYW1BY2NvdW50TmFtZSAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICAgICAgICAgIAogICAgICAgICAgICBpZighJFByaW5jaXBhbCkgewogICAgICAgICAgICAgICAgdGhyb3cgIkVycm9yIHJlc29sdmluZyBwcmluY2lwYWwiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJFJlc29sdmVkUHJpbmNpcGFsU0lEID0gJFByaW5jaXBhbC5vYmplY3RzaWQKICAgICAgICB9CiAgICAgICAgaWYoISRSZXNvbHZlZFByaW5jaXBhbFNJRCkgewogICAgICAgICAgICB0aHJvdyAiRXJyb3IgcmVzb2x2aW5nIHByaW5jaXBhbCIKICAgICAgICB9CiAgICB9CgogICAgcHJvY2VzcyB7CgogICAgICAgIGlmICgkU2VhcmNoZXIpIHsKCiAgICAgICAgICAgIGlmKCRUYXJnZXRTYW1BY2NvdW50TmFtZSkgewogICAgICAgICAgICAgICAgJFNlYXJjaGVyLmZpbHRlcj0iKCYoc2FtYWNjb3VudG5hbWU9JFRhcmdldFNhbUFjY291bnROYW1lKShuYW1lPSRUYXJnZXROYW1lKShkaXN0aW5ndWlzaGVkbmFtZT0kVGFyZ2V0RGlzdGluZ3Vpc2hlZE5hbWUpJFRhcmdldEZpbHRlcikiICAKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRTZWFyY2hlci5maWx0ZXI9IigmKG5hbWU9JFRhcmdldE5hbWUpKGRpc3Rpbmd1aXNoZWRuYW1lPSRUYXJnZXREaXN0aW5ndWlzaGVkTmFtZSkkVGFyZ2V0RmlsdGVyKSIgIAogICAgICAgICAgICB9CiAgCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkUmVzdWx0cyA9ICRTZWFyY2hlci5GaW5kQWxsKCkKICAgICAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CgogICAgICAgICAgICAgICAgICAgICMgYWRhcHRlZCBmcm9tIGh0dHBzOi8vc29jaWFsLnRlY2huZXQubWljcm9zb2Z0LmNvbS9Gb3J1bXMvd2luZG93c3NlcnZlci9lbi1VUy9kZjNiZmQzMy1jMDcwLTRhOWMtYmU5OC1jNGRhNmU1OTFhMGEvZm9ydW0tZmFxLXVzaW5nLXBvd2Vyc2hlbGwtdG8tYXNzaWduLXBlcm1pc3Npb25zLW9uLWFjdGl2ZS1kaXJlY3Rvcnktb2JqZWN0cwoKICAgICAgICAgICAgICAgICAgICAkVGFyZ2V0RE4gPSAkXy5Qcm9wZXJ0aWVzLmRpc3Rpbmd1aXNoZWRuYW1lCgogICAgICAgICAgICAgICAgICAgICRJZGVudGl0eSA9IFtTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLklkZW50aXR5UmVmZXJlbmNlXSAoW1N5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyXSRSZXNvbHZlZFByaW5jaXBhbFNJRCkKICAgICAgICAgICAgICAgICAgICAkSW5oZXJpdGFuY2VUeXBlID0gW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnlTZWN1cml0eUluaGVyaXRhbmNlXSAiTm9uZSIKICAgICAgICAgICAgICAgICAgICAkQ29udHJvbFR5cGUgPSBbU3lzdGVtLlNlY3VyaXR5LkFjY2Vzc0NvbnRyb2wuQWNjZXNzQ29udHJvbFR5cGVdICJBbGxvdyIKICAgICAgICAgICAgICAgICAgICAkQUNFcyA9IEAoKQoKICAgICAgICAgICAgICAgICAgICBpZigkUmlnaHRzR1VJRCkgewogICAgICAgICAgICAgICAgICAgICAgICAkR1VJRHMgPSBAKCRSaWdodHNHVUlEKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJEdVSURzID0gU3dpdGNoICgkUmlnaHRzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFJlc2V0UGFzc3dvcmQgZG9lc24ndCBuZWVkIHRvIGtub3cgdGhlIHVzZXIncyBjdXJyZW50IHBhc3N3b3JkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiUmVzZXRQYXNzd29yZCIgeyAiMDAyOTk1NzAtMjQ2ZC0xMWQwLWE3NjgtMDBhYTAwNmUwNTI5IiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGFsbG93cyBmb3IgdGhlIG1vZGlmaWNhdGlvbiBvZiBncm91cCBtZW1iZXJzaGlwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiV3JpdGVNZW1iZXJzIiB7ICJiZjk2NzljMC0wZGU2LTExZDAtYTI4NS0wMGFhMDAzMDQ5ZTIiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgJ0RTLVJlcGxpY2F0aW9uLUdldC1DaGFuZ2VzJyA9IDExMzFmNmFhLTljMDctMTFkMS1mNzlmLTAwYzA0ZmMyZGNkMgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAnRFMtUmVwbGljYXRpb24tR2V0LUNoYW5nZXMtQWxsJyA9IDExMzFmNmFkLTljMDctMTFkMS1mNzlmLTAwYzA0ZmMyZGNkMgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAnRFMtUmVwbGljYXRpb24tR2V0LUNoYW5nZXMtSW4tRmlsdGVyZWQtU2V0JyA9IDg5ZTk1Yjc2LTQ0NGQtNGM2Mi05OTFhLTBmYWNiZWRhNjQwYwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAgIHdoZW4gYXBwbGllZCB0byBhIGRvbWFpbidzIEFDTCwgYWxsb3dzIGZvciB0aGUgdXNlIG9mIERDU3luYwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIkRDU3luYyIgeyAiMTEzMWY2YWEtOWMwNy0xMWQxLWY3OWYtMDBjMDRmYzJkY2QyIiwgIjExMzFmNmFkLTljMDctMTFkMS1mNzlmLTAwYzA0ZmMyZGNkMiIsICI4OWU5NWI3Ni00NDRkLTRjNjItOTkxYS0wZmFjYmVkYTY0MGMifQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZigkR1VJRHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCgkR1VJRCBpbiAkR1VJRHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICROZXdHVUlEID0gTmV3LU9iamVjdCBHdWlkICRHVUlECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQURSaWdodHMgPSBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeVJpZ2h0c10gIkV4dGVuZGVkUmlnaHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQUNFcyArPSBOZXctT2JqZWN0IFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnlBY2Nlc3NSdWxlICRJZGVudGl0eSwkQURSaWdodHMsJENvbnRyb2xUeXBlLCROZXdHVUlELCRJbmhlcml0YW5jZVR5cGUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBkZWF1bHQgdG8gR2VuZXJpY0FsbCByaWdodHMKICAgICAgICAgICAgICAgICAgICAgICAgJEFEUmlnaHRzID0gW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnlSaWdodHNdICJHZW5lcmljQWxsIgogICAgICAgICAgICAgICAgICAgICAgICAkQUNFcyArPSBOZXctT2JqZWN0IFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnlBY2Nlc3NSdWxlICRJZGVudGl0eSwkQURSaWdodHMsJENvbnRyb2xUeXBlLCRJbmhlcml0YW5jZVR5cGUKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkdyYW50aW5nIHByaW5jaXBhbCAkUmVzb2x2ZWRQcmluY2lwYWxTSUQgJyRSaWdodHMnIG9uICQoJF8uUHJvcGVydGllcy5kaXN0aW5ndWlzaGVkbmFtZSkiCgogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgYWRkIGFsbCB0aGUgbmV3IEFDRXMgdG8gdGhlIHNwZWNpZmllZCBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgRm9yRWFjaCAoJEFDRSBpbiAkQUNFcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiR3JhbnRpbmcgcHJpbmNpcGFsICRSZXNvbHZlZFByaW5jaXBhbFNJRCAnJCgkQUNFLk9iamVjdFR5cGUpJyByaWdodHMgb24gJCgkXy5Qcm9wZXJ0aWVzLmRpc3Rpbmd1aXNoZWRuYW1lKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRPYmplY3QgPSBbYWRzaV0oJF8ucGF0aCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRPYmplY3QuUHNCYXNlLk9iamVjdFNlY3VyaXR5LkFkZEFjY2Vzc1J1bGUoJEFDRSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRPYmplY3QuUHNCYXNlLmNvbW1pdGNoYW5nZXMoKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiRXJyb3IgZ3JhbnRpbmcgcHJpbmNpcGFsICRSZXNvbHZlZFByaW5jaXBhbFNJRCAnJFJpZ2h0cycgb24gJFRhcmdldEROIDogJF8iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJFJlc3VsdHMuZGlzcG9zZSgpCiAgICAgICAgICAgICAgICAkU2VhcmNoZXIuZGlzcG9zZSgpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiRXJyb3I6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gSW52b2tlLUFDTFNjYW5uZXIgewo8IwogICAgLlNZTk9QU0lTCiAgICAgICAgU2VhcmNoZXMgZm9yIEFDTHMgZm9yIHNwZWNpZmFibGUgQUQgb2JqZWN0cyAoZGVmYXVsdCB0byBhbGwgZG9tYWluIG9iamVjdHMpCiAgICAgICAgd2l0aCBhIGRvbWFpbiBzaWQgb2YgPiAtMTAwMCwgYW5kIGhhdmUgbW9kaWZpYWJsZSByaWdodHMuCgogICAgICAgIFRoYW5rcyBTZWFuIE1ldGNhbGYgKEBweXJvdGVrMykgZm9yIHRoZSBpZGVhIGFuZCBndWlkYW5jZS4KCiAgICAuUEFSQU1FVEVSIFNhbUFjY291bnROYW1lCgogICAgICAgIE9iamVjdCBuYW1lIHRvIGZpbHRlciBmb3IuICAgICAgICAKCiAgICAuUEFSQU1FVEVSIE5hbWUKCiAgICAgICAgT2JqZWN0IG5hbWUgdG8gZmlsdGVyIGZvci4KCiAgICAuUEFSQU1FVEVSIERpc3Rpbmd1aXNoZWROYW1lCgogICAgICAgIE9iamVjdCBkaXN0aW5ndWlzaGVkIG5hbWUgdG8gZmlsdGVyIGZvci4KCiAgICAuUEFSQU1FVEVSIEZpbHRlcgoKICAgICAgICBBIGN1c3RvbWl6ZWQgbGRhcCBmaWx0ZXIgc3RyaW5nIHRvIHVzZSwgZS5nLiAiKGRlc2NyaXB0aW9uPSphZG1pbiopIgogICAgIAogICAgLlBBUkFNRVRFUiBBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCwgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCiAgICAuUEFSQU1FVEVSIEFEU3ByZWZpeAoKICAgICAgICBQcmVmaXggdG8gc2V0IGZvciB0aGUgc2VhcmNoZXIgKGxpa2UgIkNOPVNpdGVzLENOPUNvbmZpZ3VyYXRpb24iKQoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gdXNlIGZvciB0aGUgcXVlcnksIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIFJlc29sdmVHVUlEcwoKICAgICAgICBTd2l0Y2guIFJlc29sdmUgR1VJRHMgdG8gdGhlaXIgZGlzcGxheSBuYW1lcy4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1BQ0xTY2FubmVyIC1SZXNvbHZlR1VJRHMgfCBFeHBvcnQtQ1NWIC1Ob1R5cGVJbmZvcm1hdGlvbiBhY2xzLmNzdgoKICAgICAgICBFbnVtZXJhdGUgYWxsIG1vZGlmYWJsZSBBQ0xzIGluIHRoZSBjdXJyZW50IGRvbWFpbiwgcmVzb2x2aW5nIEdVSURzIHRvIGRpc3BsYXkgCiAgICAgICAgbmFtZXMsIGFuZCBleHBvcnQgZXZlcnl0aGluZyB0byBhIC5jc3YKIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNhbUFjY291bnROYW1lLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICROYW1lID0gIioiLAoKICAgICAgICBbQWxpYXMoJ0ROJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRGlzdGluZ3Vpc2hlZE5hbWUgPSAiKiIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZpbHRlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQURTcGF0aCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQURTcHJlZml4LAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFJlc29sdmVHVUlEcywKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwCiAgICApCgogICAgIyBHZXQgYWxsIGRvbWFpbiBBQ0xzIHdpdGggdGhlIGFwcHJvcHJpYXRlIHBhcmFtZXRlcnMKICAgIEdldC1PYmplY3RBQ0wgQFBTQm91bmRQYXJhbWV0ZXJzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICMgYWRkIGluIHRoZSB0cmFuc2xhdGVkIFNJRCBmb3IgdGhlIG9iamVjdCBpZGVudGl0eQogICAgICAgICRfIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lkZW50aXR5U0lEJyAoJF8uSWRlbnRpdHlSZWZlcmVuY2UuVHJhbnNsYXRlKFtTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllcl0pLlZhbHVlKQogICAgICAgICRfCiAgICB9IHwgV2hlcmUtT2JqZWN0IHsKICAgICAgICAjIGNoZWNrIGZvciBhbnkgQUNMcyB3aXRoIFNJRHMgPiAtMTAwMAogICAgICAgIHRyeSB7CiAgICAgICAgICAgICMgVE9ETzogY2hhbmdlIHRoaXMgdG8gYSByZWdleCBmb3Igc3BlZWR1cD8KICAgICAgICAgICAgW2ludF0oJF8uSWRlbnRpdHlTaWQuc3BsaXQoIi0iKVstMV0pIC1nZSAxMDAwCiAgICAgICAgfQogICAgICAgIGNhdGNoIHt9CiAgICB9IHwgV2hlcmUtT2JqZWN0IHsKICAgICAgICAjIGZpbHRlciBmb3IgbW9kaWZpYWJsZSByaWdodHMKICAgICAgICAoJF8uQWN0aXZlRGlyZWN0b3J5UmlnaHRzIC1lcSAiR2VuZXJpY0FsbCIpIC1vciAoJF8uQWN0aXZlRGlyZWN0b3J5UmlnaHRzIC1tYXRjaCAiV3JpdGUiKSAtb3IgKCRfLkFjdGl2ZURpcmVjdG9yeVJpZ2h0cyAtbWF0Y2ggIkNyZWF0ZSIpIC1vciAoJF8uQWN0aXZlRGlyZWN0b3J5UmlnaHRzIC1tYXRjaCAiRGVsZXRlIikgLW9yICgoJF8uQWN0aXZlRGlyZWN0b3J5UmlnaHRzIC1tYXRjaCAiRXh0ZW5kZWRSaWdodCIpIC1hbmQgKCRfLkFjY2Vzc0NvbnRyb2xUeXBlIC1lcSAiQWxsb3ciKSkKICAgIH0KfQoKCmZpbHRlciBHZXQtR1VJRE1hcCB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgSGVscGVyIHRvIGJ1aWxkIGEgaGFzaCB0YWJsZSBvZiBbR1VJRF0gLT4gcmVzb2x2ZWQgbmFtZXMKCiAgICAgICAgSGVhdmlseSBhZGFwdGVkIGZyb20gaHR0cDovL2Jsb2dzLnRlY2huZXQuY29tL2IvYXNobGV5bWNnbG9uZS9hcmNoaXZlLzIwMTMvMDMvMjUvYWN0aXZlLWRpcmVjdG9yeS1vdS1wZXJtaXNzaW9ucy1yZXBvcnQtZnJlZS1wb3dlcnNoZWxsLXNjcmlwdC1kb3dubG9hZC5hc3B4CgogICAgLlBBUkFNRVRFUiBEb21haW4KICAgIAogICAgICAgIFRoZSBkb21haW4gdG8gdXNlIGZvciB0aGUgcXVlcnksIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKICAgIAogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBQYWdlU2l6ZQoKICAgICAgICBUaGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgogICAgLkxJTksKCiAgICAgICAgaHR0cDovL2Jsb2dzLnRlY2huZXQuY29tL2IvYXNobGV5bWNnbG9uZS9hcmNoaXZlLzIwMTMvMDMvMjUvYWN0aXZlLWRpcmVjdG9yeS1vdS1wZXJtaXNzaW9ucy1yZXBvcnQtZnJlZS1wb3dlcnNoZWxsLXNjcmlwdC1kb3dubG9hZC5hc3B4CiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMAogICAgKQoKICAgICRHVUlEcyA9IEB7JzAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCcgPSAnQWxsJ30KCiAgICAkU2NoZW1hUGF0aCA9IChHZXQtTmV0Rm9yZXN0KS5zY2hlbWEubmFtZQoKICAgICRTY2hlbWFTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciAtQURTcGF0aCAkU2NoZW1hUGF0aCAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICBpZigkU2NoZW1hU2VhcmNoZXIpIHsKICAgICAgICAkU2NoZW1hU2VhcmNoZXIuZmlsdGVyID0gIihzY2hlbWFJREdVSUQ9KikiCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJFJlc3VsdHMgPSAkU2NoZW1hU2VhcmNoZXIuRmluZEFsbCgpCiAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAjIGNvbnZlcnQgdGhlIEdVSUQKICAgICAgICAgICAgICAgICRHVUlEc1soTmV3LU9iamVjdCBHdWlkICgsJF8ucHJvcGVydGllcy5zY2hlbWFpZGd1aWRbMF0pKS5HdWlkXSA9ICRfLnByb3BlcnRpZXMubmFtZVswXQogICAgICAgICAgICB9CiAgICAgICAgICAgICRSZXN1bHRzLmRpc3Bvc2UoKQogICAgICAgICAgICAkU2NoZW1hU2VhcmNoZXIuZGlzcG9zZSgpCiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3IgaW4gYnVpbGRpbmcgR1VJRCBtYXA6ICRfIgogICAgICAgIH0KICAgIH0KCiAgICAkUmlnaHRzU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLUFEU3BhdGggJFNjaGVtYVBhdGgucmVwbGFjZSgiU2NoZW1hIiwiRXh0ZW5kZWQtUmlnaHRzIikgLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLVBhZ2VTaXplICRQYWdlU2l6ZSAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgaWYgKCRSaWdodHNTZWFyY2hlcikgewogICAgICAgICRSaWdodHNTZWFyY2hlci5maWx0ZXIgPSAiKG9iamVjdENsYXNzPWNvbnRyb2xBY2Nlc3NSaWdodCkiCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJFJlc3VsdHMgPSAkUmlnaHRzU2VhcmNoZXIuRmluZEFsbCgpCiAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAjIGNvbnZlcnQgdGhlIEdVSUQKICAgICAgICAgICAgICAgICRHVUlEc1skXy5wcm9wZXJ0aWVzLnJpZ2h0c2d1aWRbMF0udG9TdHJpbmcoKV0gPSAkXy5wcm9wZXJ0aWVzLm5hbWVbMF0KICAgICAgICAgICAgfQogICAgICAgICAgICAkUmVzdWx0cy5kaXNwb3NlKCkKICAgICAgICAgICAgJFJpZ2h0c1NlYXJjaGVyLmRpc3Bvc2UoKQogICAgICAgIH0KICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkVycm9yIGluIGJ1aWxkaW5nIEdVSUQgbWFwOiAkXyIKICAgICAgICB9CiAgICB9CgogICAgJEdVSURzCn0KCgpmdW5jdGlvbiBHZXQtTmV0Q29tcHV0ZXIgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFRoaXMgZnVuY3Rpb24gdXRpbGl6ZXMgYWRzaXNlYXJjaGVyIHRvIHF1ZXJ5IHRoZSBjdXJyZW50IEFEIGNvbnRleHQKICAgICAgICBmb3IgY3VycmVudCBjb21wdXRlciBvYmplY3RzLiBCYXNlZCBvZmYgb2YgQ2FybG9zIFBlcmV6J3MgQXVkaXQucHNtMQogICAgICAgIHNjcmlwdCBpbiBQb3NoLVNlY01vZCAobGluayBiZWxvdykuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlck5hbWUKCiAgICAgICAgUmV0dXJuIGNvbXB1dGVycyB3aXRoIGEgc3BlY2lmaWMgbmFtZSwgd2lsZGNhcmRzIGFjY2VwdGVkLgoKICAgIC5QQVJBTUVURVIgU1BOCgogICAgICAgIFJldHVybiBjb21wdXRlcnMgd2l0aCBhIHNwZWNpZmljIHNlcnZpY2UgcHJpbmNpcGFsIG5hbWUsIHdpbGRjYXJkcyBhY2NlcHRlZC4KCiAgICAuUEFSQU1FVEVSIE9wZXJhdGluZ1N5c3RlbQoKICAgICAgICBSZXR1cm4gY29tcHV0ZXJzIHdpdGggYSBzcGVjaWZpYyBvcGVyYXRpbmcgc3lzdGVtLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgogICAgLlBBUkFNRVRFUiBTZXJ2aWNlUGFjawoKICAgICAgICBSZXR1cm4gY29tcHV0ZXJzIHdpdGggYSBzcGVjaWZpYyBzZXJ2aWNlIHBhY2ssIHdpbGRjYXJkcyBhY2NlcHRlZC4KCiAgICAuUEFSQU1FVEVSIEZpbHRlcgoKICAgICAgICBBIGN1c3RvbWl6ZWQgbGRhcCBmaWx0ZXIgc3RyaW5nIHRvIHVzZSwgZS5nLiAiKGRlc2NyaXB0aW9uPSphZG1pbiopIgoKICAgIC5QQVJBTUVURVIgUHJpbnRlcnMKCiAgICAgICAgU3dpdGNoLiBSZXR1cm4gb25seSBwcmludGVycy4KCiAgICAuUEFSQU1FVEVSIFBpbmcKCiAgICAgICAgU3dpdGNoLiBQaW5nIGVhY2ggaG9zdCB0byBlbnN1cmUgaXQncyB1cCBiZWZvcmUgZW51bWVyYXRpbmcuCgogICAgLlBBUkFNRVRFUiBGdWxsRGF0YQoKICAgICAgICBTd2l0Y2guIFJldHVybiBmdWxsIGNvbXB1dGVyIG9iamVjdHMgaW5zdGVhZCBvZiBqdXN0IHN5c3RlbSBuYW1lcyAodGhlIGRlZmF1bHQpLgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gcXVlcnkgZm9yIGNvbXB1dGVycywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgQURTcGF0aAoKICAgICAgICBUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCiAgICAKICAgIC5QQVJBTUVURVIgU2l0ZU5hbWUKCiAgICAgICAgVGhlIEFEIFNpdGUgbmFtZSB0byBzZWFyY2ggZm9yIGNvbXB1dGVycy4KCiAgICAuUEFSQU1FVEVSIFVuY29uc3RyYWluZWQKCiAgICAgICAgU3dpdGNoLiBSZXR1cm4gY29tcHV0ZXIgb2JqZWN0cyB0aGF0IGhhdmUgdW5jb25zdHJhaW5lZCBkZWxlZ2F0aW9uLgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0Q29tcHV0ZXIKICAgICAgICAKICAgICAgICBSZXR1cm5zIHRoZSBjdXJyZW50IGNvbXB1dGVycyBpbiBjdXJyZW50IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRDb21wdXRlciAtU1BOIG1zc3FsKgogICAgICAgIAogICAgICAgIFJldHVybnMgYWxsIE1TIFNRTCBzZXJ2ZXJzIG9uIHRoZSBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0Q29tcHV0ZXIgLURvbWFpbiB0ZXN0aW5nCiAgICAgICAgCiAgICAgICAgUmV0dXJucyB0aGUgY3VycmVudCBjb21wdXRlcnMgaW4gJ3Rlc3RpbmcnIGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRDb21wdXRlciAtRG9tYWluIHRlc3RpbmcgLUZ1bGxEYXRhCiAgICAgICAgCiAgICAgICAgUmV0dXJucyBmdWxsIGNvbXB1dGVyIG9iamVjdHMgaW4gdGhlICd0ZXN0aW5nJyBkb21haW4uCgogICAgLkxJTksKCiAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tL2RhcmtvcGVyYXRvci9Qb3NoLVNlY01vZC9ibG9iL21hc3Rlci9BdWRpdC9BdWRpdC5wc20xCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJyonLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRTUE4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE9wZXJhdGluZ1N5c3RlbSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmljZVBhY2ssCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZpbHRlciwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUHJpbnRlcnMsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFBpbmcsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEZ1bGxEYXRhLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNpdGVOYW1lLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRVbmNvbnN0cmFpbmVkLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCgogICAgYmVnaW4gewogICAgICAgICMgc28gdGhpcyBpc24ndCByZXBlYXRlZCBpZiBtdWx0aXBsZSBjb21wdXRlciBuYW1lcyBhcmUgcGFzc2VkIG9uIHRoZSBwaXBlbGluZQogICAgICAgICRDb21wU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1BRFNwYXRoICRBRFNwYXRoIC1QYWdlU2l6ZSAkUGFnZVNpemUgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgIH0KCiAgICBwcm9jZXNzIHsKCiAgICAgICAgaWYgKCRDb21wU2VhcmNoZXIpIHsKCiAgICAgICAgICAgICMgaWYgd2UncmUgY2hlY2tpbmcgZm9yIHVuY29uc3RyYWluZWQgZGVsZWdhdGlvbgogICAgICAgICAgICBpZigkVW5jb25zdHJhaW5lZCkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiU2VhcmNoaW5nIGZvciBjb21wdXRlcnMgd2l0aCBmb3IgdW5jb25zdHJhaW5lZCBkZWxlZ2F0aW9uIgogICAgICAgICAgICAgICAgJEZpbHRlciArPSAiKHVzZXJBY2NvdW50Q29udHJvbDoxLjIuODQwLjExMzU1Ni4xLjQuODAzOj01MjQyODgpIgogICAgICAgICAgICB9CiAgICAgICAgICAgICMgc2V0IHRoZSBmaWx0ZXJzIGZvciB0aGUgc2VyYWNoZXIgaWYgaXQgZXhpc3RzCiAgICAgICAgICAgIGlmKCRQcmludGVycykgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiU2VhcmNoaW5nIGZvciBwcmludGVycyIKICAgICAgICAgICAgICAgICMgJENvbXBTZWFyY2hlci5maWx0ZXI9IigmKG9iamVjdENhdGVnb3J5PXByaW50UXVldWUpJEZpbHRlcikiCiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIob2JqZWN0Q2F0ZWdvcnk9cHJpbnRRdWV1ZSkiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJFNQTikgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiU2VhcmNoaW5nIGZvciBjb21wdXRlcnMgd2l0aCBTUE46ICRTUE4iCiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIoc2VydmljZVByaW5jaXBhbE5hbWU9JFNQTikiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJE9wZXJhdGluZ1N5c3RlbSkgewogICAgICAgICAgICAgICAgJEZpbHRlciArPSAiKG9wZXJhdGluZ3N5c3RlbT0kT3BlcmF0aW5nU3lzdGVtKSIKICAgICAgICAgICAgfQogICAgICAgICAgICBpZigkU2VydmljZVBhY2spIHsKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIihvcGVyYXRpbmdzeXN0ZW1zZXJ2aWNlcGFjaz0kU2VydmljZVBhY2spIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCRTaXRlTmFtZSkgewogICAgICAgICAgICAgICAgJEZpbHRlciArPSAiKHNlcnZlcnJlZmVyZW5jZWJsPSRTaXRlTmFtZSkiCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRDb21wRmlsdGVyID0gIigmKHNBTUFjY291bnRUeXBlPTgwNTMwNjM2OSkoZG5zaG9zdG5hbWU9JENvbXB1dGVyTmFtZSkkRmlsdGVyKSIKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiR2V0LU5ldENvbXB1dGVyIGZpbHRlciA6ICckQ29tcEZpbHRlciciCiAgICAgICAgICAgICRDb21wU2VhcmNoZXIuZmlsdGVyID0gJENvbXBGaWx0ZXIKCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkUmVzdWx0cyA9ICRDb21wU2VhcmNoZXIuRmluZEFsbCgpCiAgICAgICAgICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRVcCA9ICRUcnVlCiAgICAgICAgICAgICAgICAgICAgaWYoJFBpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBUT0RPOiBob3cgY2FuIHRoZXNlIHJlc3VsdHMgYmUgcGlwZWQgdG8gcGluZyBmb3IgYSBzcGVlZHVwPwogICAgICAgICAgICAgICAgICAgICAgICAkVXAgPSBUZXN0LUNvbm5lY3Rpb24gLUNvdW50IDEgLVF1aWV0IC1Db21wdXRlck5hbWUgJF8ucHJvcGVydGllcy5kbnNob3N0bmFtZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZigkVXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyByZXR1cm4gZnVsbCBkYXRhIG9iamVjdHMKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRGdWxsRGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBjb252ZXJ0L3Byb2Nlc3MgdGhlIExEQVAgZmllbGRzIGZvciBlYWNoIHJlc3VsdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJENvbXB1dGVyID0gQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJENvbXB1dGVyLlBTT2JqZWN0LlR5cGVOYW1lcy5BZGQoJ1Bvd2VyVmlldy5Db21wdXRlcicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgb3RoZXJ3aXNlIHdlJ3JlIGp1c3QgcmV0dXJuaW5nIHRoZSBETlMgaG9zdCBuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkXy5wcm9wZXJ0aWVzLmRuc2hvc3RuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkUmVzdWx0cy5kaXNwb3NlKCkKICAgICAgICAgICAgICAgICRDb21wU2VhcmNoZXIuZGlzcG9zZSgpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiRXJyb3I6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LUFET2JqZWN0IHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBUYWtlcyBhIGRvbWFpbiBTSUQgYW5kIHJldHVybnMgdGhlIHVzZXIsIGdyb3VwLCBvciBjb21wdXRlciBvYmplY3QKICAgICAgICBhc3NvY2lhdGVkIHdpdGggaXQuCgogICAgLlBBUkFNRVRFUiBTSUQKCiAgICAgICAgVGhlIFNJRCBvZiB0aGUgZG9tYWluIG9iamVjdCB5b3UncmUgcXVlcnlpbmcgZm9yLgoKICAgIC5QQVJBTUVURVIgTmFtZQoKICAgICAgICBUaGUgTmFtZSBvZiB0aGUgZG9tYWluIG9iamVjdCB5b3UncmUgcXVlcnlpbmcgZm9yLgoKICAgIC5QQVJBTUVURVIgU2FtQWNjb3VudE5hbWUKCiAgICAgICAgVGhlIFNhbUFjY291bnROYW1lIG9mIHRoZSBkb21haW4gb2JqZWN0IHlvdSdyZSBxdWVyeWluZyBmb3IuIAoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gcXVlcnkgZm9yIG9iamVjdHMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIEFEU3BhdGgKCiAgICAgICAgVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoLCBlLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiCiAgICAgICAgVXNlZnVsIGZvciBPVSBxdWVyaWVzLgoKICAgIC5QQVJBTUVURVIgRmlsdGVyCgogICAgICAgIEFkZGl0aW9uYWwgTERBUCBmaWx0ZXIgc3RyaW5nIGZvciB0aGUgcXVlcnkuCgogICAgLlBBUkFNRVRFUiBSZXR1cm5SYXcKCiAgICAgICAgU3dpdGNoLiBSZXR1cm4gdGhlIHJhdyBvYmplY3QgaW5zdGVhZCBvZiB0cmFuc2xhdGluZyBpdHMgcHJvcGVydGllcy4KICAgICAgICBVc2VkIGJ5IFNldC1BRE9iamVjdCB0byBtb2RpZnkgb2JqZWN0IHByb3BlcnRpZXMuCgogICAgLlBBUkFNRVRFUiBQYWdlU2l6ZQoKICAgICAgICBUaGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1BRE9iamVjdCAtU0lEICJTLTEtNS0yMS0yNjIwODkxODI5LTI0MTEyNjE0OTctMTc3Mzg1MzA4OC0xMTEwIgogICAgICAgIAogICAgICAgIEdldCB0aGUgZG9tYWluIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhlIHNwZWNpZmllZCBTSUQuCiAgICAgICAgCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1BRE9iamVjdCAtQURTcGF0aCAiQ049QWRtaW5TREhvbGRlcixDTj1TeXN0ZW0sREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICAKICAgICAgICBHZXQgdGhlIEFkbWluU0RIb2xkZXIgb2JqZWN0IGZvciB0aGUgdGVzdGxhYi5sb2NhbCBkb21haW4uCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTSUQsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNhbUFjY291bnROYW1lLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZpbHRlciwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUmV0dXJuUmF3LAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCiAgICBwcm9jZXNzIHsKICAgICAgICBpZigkU0lEKSB7CiAgICAgICAgICAgICMgaWYgYSBTSUQgaXMgcGFzc2VkLCB0cnkgdG8gcmVzb2x2ZSBpdCB0byBhIHJlYWNoYWJsZSBkb21haW4gbmFtZSBmb3IgdGhlIHNlYXJjaGVyCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkTmFtZSA9IENvbnZlcnQtU2lkVG9OYW1lICRTSUQKICAgICAgICAgICAgICAgIGlmKCROYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgJENhbm9uaWNhbCA9IENvbnZlcnQtQUROYW1lIC1PYmplY3ROYW1lICROYW1lIC1JbnB1dFR5cGUgTlQ0IC1PdXRwdXRUeXBlIENhbm9uaWNhbAogICAgICAgICAgICAgICAgICAgIGlmKCRDYW5vbmljYWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpbiA9ICRDYW5vbmljYWwuc3BsaXQoIi8iKVswXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiRXJyb3IgcmVzb2x2aW5nIFNJRCAnJFNJRCciCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkTnVsbAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJFcnJvciByZXNvbHZpbmcgU0lEICckU0lEJyA6ICRfIgogICAgICAgICAgICAgICAgcmV0dXJuICROdWxsCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICRPYmplY3RTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUFEU3BhdGggJEFEU3BhdGggLVBhZ2VTaXplICRQYWdlU2l6ZQoKICAgICAgICBpZigkT2JqZWN0U2VhcmNoZXIpIHsKICAgICAgICAgICAgaWYoJFNJRCkgewogICAgICAgICAgICAgICAgJE9iamVjdFNlYXJjaGVyLmZpbHRlciA9ICIoJihvYmplY3RzaWQ9JFNJRCkkRmlsdGVyKSIKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYoJE5hbWUpIHsKICAgICAgICAgICAgICAgICRPYmplY3RTZWFyY2hlci5maWx0ZXIgPSAiKCYobmFtZT0kTmFtZSkkRmlsdGVyKSIKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYoJFNhbUFjY291bnROYW1lKSB7CiAgICAgICAgICAgICAgICAkT2JqZWN0U2VhcmNoZXIuZmlsdGVyID0gIigmKHNhbUFjY291bnROYW1lPSRTYW1BY2NvdW50TmFtZSkkRmlsdGVyKSIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJFJlc3VsdHMgPSAkT2JqZWN0U2VhcmNoZXIuRmluZEFsbCgpCiAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICBpZigkUmV0dXJuUmF3KSB7CiAgICAgICAgICAgICAgICAgICAgJF8KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICMgY29udmVydC9wcm9jZXNzIHRoZSBMREFQIGZpZWxkcyBmb3IgZWFjaCByZXN1bHQKICAgICAgICAgICAgICAgICAgICBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJFJlc3VsdHMuZGlzcG9zZSgpCiAgICAgICAgICAgICRPYmplY3RTZWFyY2hlci5kaXNwb3NlKCkKICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBTZXQtQURPYmplY3Qgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFRha2VzIGEgU0lELCBuYW1lLCBvciBTYW1BY2NvdW50TmFtZSB0byBxdWVyeSBmb3IgYSBzcGVjaWZpZWQKICAgICAgICBkb21haW4gb2JqZWN0LCBhbmQgdGhlbiBzZXRzIGEgc3BlY2lmaWVkICdQcm9wZXJ0eU5hbWUnIHRvIGEKICAgICAgICBzcGVjaWZpZWQgJ1Byb3BlcnR5VmFsdWUnLgoKICAgIC5QQVJBTUVURVIgU0lECgogICAgICAgIFRoZSBTSUQgb2YgdGhlIGRvbWFpbiBvYmplY3QgeW91J3JlIHF1ZXJ5aW5nIGZvci4KCiAgICAuUEFSQU1FVEVSIE5hbWUKCiAgICAgICAgVGhlIE5hbWUgb2YgdGhlIGRvbWFpbiBvYmplY3QgeW91J3JlIHF1ZXJ5aW5nIGZvci4KCiAgICAuUEFSQU1FVEVSIFNhbUFjY291bnROYW1lCgogICAgICAgIFRoZSBTYW1BY2NvdW50TmFtZSBvZiB0aGUgZG9tYWluIG9iamVjdCB5b3UncmUgcXVlcnlpbmcgZm9yLiAKCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBUaGUgZG9tYWluIHRvIHF1ZXJ5IGZvciBvYmplY3RzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBGaWx0ZXIKCiAgICAgICAgQWRkaXRpb25hbCBMREFQIGZpbHRlciBzdHJpbmcgZm9yIHRoZSBxdWVyeS4KCiAgICAuUEFSQU1FVEVSIFByb3BlcnR5TmFtZQoKICAgICAgICBUaGUgcHJvcGVydHkgbmFtZSB0byBzZXQuCgogICAgLlBBUkFNRVRFUiBQcm9wZXJ0eVZhbHVlCgogICAgICAgIFRoZSB2YWx1ZSB0byBzZXQgZm9yIFByb3BlcnR5TmFtZQoKICAgIC5QQVJBTUVURVIgUHJvcGVydHlYb3JWYWx1ZQoKICAgICAgICBJbnRlZ2VyIHZhbHVlIHRvIGJpbmFyeSB4b3IgKC1ieG9yKSB3aXRoIHRoZSBjdXJyZW50IGludCB2YWx1ZS4KCiAgICAuUEFSQU1FVEVSIENsZWFyVmFsdWUKCiAgICAgICAgU3dpdGNoLiBDbGVhciB0aGUgdmFsdWUgb2YgUHJvcGVydHlOYW1lCgogICAgLlBBUkFNRVRFUiBQYWdlU2l6ZQoKICAgICAgICBUaGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IFNldC1BRE9iamVjdCAtU2FtQWNjb3VudE5hbWUgbWF0dC5hZG1pbiAtUHJvcGVydHlOYW1lIGNvdW50cnljb2RlIC1Qcm9wZXJ0eVZhbHVlIDAKICAgICAgICAKICAgICAgICBTZXQgdGhlIGNvdW50cnljb2RlIGZvciBtYXR0LmFkbWluIHRvIDAKCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IFNldC1BRE9iamVjdCAtU2FtQWNjb3VudE5hbWUgbWF0dC5hZG1pbiAtUHJvcGVydHlOYW1lIHVzZXJhY2NvdW50Y29udHJvbCAtUHJvcGVydHlYb3JWYWx1ZSA2NTUzNgogICAgICAgIAogICAgICAgIFNldCB0aGUgcGFzc3dvcmQgbm90IHRvIGV4cGlyZSBvbiBtYXR0LmFkbWluCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbU3RyaW5nXQogICAgICAgICRTSUQsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNhbUFjY291bnROYW1lLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZpbHRlciwKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkUHJvcGVydHlOYW1lLAoKICAgICAgICAkUHJvcGVydHlWYWx1ZSwKCiAgICAgICAgW0ludF0KICAgICAgICAkUHJvcGVydHlYb3JWYWx1ZSwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkQ2xlYXJWYWx1ZSwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgICRBcmd1bWVudHMgPSBAewogICAgICAgICdTSUQnID0gJFNJRAogICAgICAgICdOYW1lJyA9ICROYW1lCiAgICAgICAgJ1NhbUFjY291bnROYW1lJyA9ICRTYW1BY2NvdW50TmFtZQogICAgICAgICdEb21haW4nID0gJERvbWFpbgogICAgICAgICdEb21haW5Db250cm9sbGVyJyA9ICREb21haW5Db250cm9sbGVyCiAgICAgICAgJ0ZpbHRlcicgPSAkRmlsdGVyCiAgICAgICAgJ1BhZ2VTaXplJyA9ICRQYWdlU2l6ZQogICAgICAgICdDcmVkZW50aWFsJyA9ICRDcmVkZW50aWFsCiAgICB9CiAgICAjIHNwbGF0IHRoZSBhcHByb3ByaWF0ZSBhcmd1bWVudHMgdG8gR2V0LUFET2JqZWN0CiAgICAkUmF3T2JqZWN0ID0gR2V0LUFET2JqZWN0IC1SZXR1cm5SYXcgQEFyZ3VtZW50cwogICAgCiAgICB0cnkgewogICAgICAgICMgZ2V0IHRoZSBtb2RpZmlhYmxlIG9iamVjdCBmb3IgdGhpcyBzZWFyY2ggcmVzdWx0CiAgICAgICAgJEVudHJ5ID0gJFJhd09iamVjdC5HZXREaXJlY3RvcnlFbnRyeSgpCiAgICAgICAgCiAgICAgICAgaWYoJENsZWFyVmFsdWUpIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiQ2xlYXJpbmcgdmFsdWUiCiAgICAgICAgICAgICRFbnRyeS4kUHJvcGVydHlOYW1lLmNsZWFyKCkKICAgICAgICAgICAgJEVudHJ5LmNvbW1pdGNoYW5nZXMoKQogICAgICAgIH0KCiAgICAgICAgZWxzZWlmKCRQcm9wZXJ0eVhvclZhbHVlKSB7CiAgICAgICAgICAgICRUeXBlTmFtZSA9ICRFbnRyeS4kUHJvcGVydHlOYW1lWzBdLkdldFR5cGUoKS5uYW1lCgogICAgICAgICAgICAjIFVBQyB2YWx1ZSByZWZlcmVuY2VzLSBodHRwczovL3N1cHBvcnQubWljcm9zb2Z0LmNvbS9lbi11cy9rYi8zMDUxNDQKICAgICAgICAgICAgJFByb3BlcnR5VmFsdWUgPSAkKCRFbnRyeS4kUHJvcGVydHlOYW1lKSAtYnhvciAkUHJvcGVydHlYb3JWYWx1ZSAKICAgICAgICAgICAgJEVudHJ5LiRQcm9wZXJ0eU5hbWUgPSAkUHJvcGVydHlWYWx1ZSAtYXMgJFR5cGVOYW1lICAgICAgIAogICAgICAgICAgICAkRW50cnkuY29tbWl0Y2hhbmdlcygpICAgICAKICAgICAgICB9CgogICAgICAgIGVsc2UgewogICAgICAgICAgICAkRW50cnkucHV0KCRQcm9wZXJ0eU5hbWUsICRQcm9wZXJ0eVZhbHVlKQogICAgICAgICAgICAkRW50cnkuc2V0aW5mbygpCiAgICAgICAgfQogICAgfQogICAgY2F0Y2ggewogICAgICAgIFdyaXRlLVdhcm5pbmcgIkVycm9yIHNldHRpbmcgcHJvcGVydHkgJFByb3BlcnR5TmFtZSB0byB2YWx1ZSAnJFByb3BlcnR5VmFsdWUnIGZvciBvYmplY3QgJCgkUmF3T2JqZWN0LlByb3BlcnRpZXMuc2FtYWNjb3VudG5hbWUpIDogJF8iCiAgICB9Cn0KCgpmdW5jdGlvbiBJbnZva2UtRG93bmdyYWRlQWNjb3VudCB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgU2V0IHJldmVyc2libGUgZW5jcnlwdGlvbiBvbiBhIGdpdmVuIGFjY291bnQgYW5kIHRoZW4gZm9yY2UgdGhlIHBhc3N3b3JkCiAgICAgICAgdG8gYmUgc2V0IG9uIG5leHQgdXNlciBsb2dpbi4gVG8gcmVwYWlyIHVzZSAiLVJlcGFpciIuCgogICAgLlBBUkFNRVRFUiBTYW1BY2NvdW50TmFtZQoKICAgICAgICBUaGUgU2FtQWNjb3VudE5hbWUgb2YgdGhlIGRvbWFpbiBvYmplY3QgeW91J3JlIHF1ZXJ5aW5nIGZvci4gCgogICAgLlBBUkFNRVRFUiBOYW1lCgogICAgICAgIFRoZSBOYW1lIG9mIHRoZSBkb21haW4gb2JqZWN0IHlvdSdyZSBxdWVyeWluZyBmb3IuCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byBxdWVyeSBmb3Igb2JqZWN0cywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgRmlsdGVyCgogICAgICAgIEFkZGl0aW9uYWwgTERBUCBmaWx0ZXIgc3RyaW5nIGZvciB0aGUgcXVlcnkuCgogICAgLlBBUkFNRVRFUiBSZXBhaXIKCiAgICAgICAgU3dpdGNoLiBVbnNldCB0aGUgcmV2ZXJzaWJsZSBlbmNyeXB0aW9uIGZsYWcgYW5kIGZvcmNlIHBhc3N3b3JkIHJlc2V0IGZsYWcuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUz4gSW52b2tlLURvd25ncmFkZUFjY291bnQgLVNhbUFjY291bnROYW1lIGphc29uCgogICAgICAgIFNldCByZXZlcnNpYmxlIGVuY3J5cHRpb24gb24gdGhlICdqYXNvbicgYWNjb3VudCBhbmQgZm9yY2UgdGhlIHBhc3N3b3JkIHRvIGJlIGNoYW5nZWQuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFM+IEludm9rZS1Eb3duZ3JhZGVBY2NvdW50IC1TYW1BY2NvdW50TmFtZSBqYXNvbiAtUmVwYWlyCgogICAgICAgIFVuc2V0IHJldmVyc2libGUgZW5jcnlwdGlvbiBvbiB0aGUgJ2phc29uJyBhY2NvdW50IGFuZCByZW1vdmUgdGhlIGZvcmNlZCBwYXNzd29yZCBjaGFuZ2UuCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnU2FtQWNjb3VudE5hbWUnLCBQb3NpdGlvbj0wLCBWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2FtQWNjb3VudE5hbWUsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdOYW1lJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRGaWx0ZXIsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFJlcGFpciwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICBwcm9jZXNzIHsKICAgICAgICAkQXJndW1lbnRzID0gQHsKICAgICAgICAgICAgJ1NhbUFjY291bnROYW1lJyA9ICRTYW1BY2NvdW50TmFtZQogICAgICAgICAgICAnTmFtZScgPSAkTmFtZQogICAgICAgICAgICAnRG9tYWluJyA9ICREb21haW4KICAgICAgICAgICAgJ0RvbWFpbkNvbnRyb2xsZXInID0gJERvbWFpbkNvbnRyb2xsZXIKICAgICAgICAgICAgJ0ZpbHRlcicgPSAkRmlsdGVyCiAgICAgICAgICAgICdDcmVkZW50aWFsJyA9ICRDcmVkZW50aWFsCiAgICAgICAgfQoKICAgICAgICAjIHNwbGF0IHRoZSBhcHByb3ByaWF0ZSBhcmd1bWVudHMgdG8gR2V0LUFET2JqZWN0CiAgICAgICAgJFVBQ1ZhbHVlcyA9IEdldC1BRE9iamVjdCBAQXJndW1lbnRzIHwgc2VsZWN0IHVzZXJhY2NvdW50Y29udHJvbCB8IENvbnZlcnRGcm9tLVVBQ1ZhbHVlCgogICAgICAgIGlmKCRSZXBhaXIpIHsKCiAgICAgICAgICAgIGlmKCRVQUNWYWx1ZXMuS2V5cyAtY29udGFpbnMgIkVOQ1JZUFRFRF9URVhUX1BXRF9BTExPV0VEIikgewogICAgICAgICAgICAgICAgIyBpZiByZXZlcnNpYmxlIGVuY3J5cHRpb24gaXMgc2V0LCB1bnNldCBpdAogICAgICAgICAgICAgICAgU2V0LUFET2JqZWN0IEBBcmd1bWVudHMgLVByb3BlcnR5TmFtZSB1c2VyYWNjb3VudGNvbnRyb2wgLVByb3BlcnR5WG9yVmFsdWUgMTI4CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgdW5zZXQgdGhlIGZvcmNlZCBwYXNzd29yZCBjaGFuZ2UKICAgICAgICAgICAgU2V0LUFET2JqZWN0IEBBcmd1bWVudHMgLVByb3BlcnR5TmFtZSBwd2RsYXN0c2V0IC1Qcm9wZXJ0eVZhbHVlIC0xCiAgICAgICAgfQoKICAgICAgICBlbHNlIHsKCiAgICAgICAgICAgIGlmKCRVQUNWYWx1ZXMuS2V5cyAtY29udGFpbnMgIkRPTlRfRVhQSVJFX1BBU1NXT1JEIikgewogICAgICAgICAgICAgICAgIyBpZiB0aGUgcGFzc3dvcmQgaXMgc2V0IHRvIG5ldmVyIGV4cGlyZSwgdW5zZXQKICAgICAgICAgICAgICAgIFNldC1BRE9iamVjdCBAQXJndW1lbnRzIC1Qcm9wZXJ0eU5hbWUgdXNlcmFjY291bnRjb250cm9sIC1Qcm9wZXJ0eVhvclZhbHVlIDY1NTM2CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKCRVQUNWYWx1ZXMuS2V5cyAtbm90Y29udGFpbnMgIkVOQ1JZUFRFRF9URVhUX1BXRF9BTExPV0VEIikgewogICAgICAgICAgICAgICAgIyBpZiByZXZlcnNpYmxlIGVuY3J5cHRpb24gaXMgbm90IHNldCwgc2V0IGl0CiAgICAgICAgICAgICAgICBTZXQtQURPYmplY3QgQEFyZ3VtZW50cyAtUHJvcGVydHlOYW1lIHVzZXJhY2NvdW50Y29udHJvbCAtUHJvcGVydHlYb3JWYWx1ZSAxMjgKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBmb3JjZSB0aGUgcGFzc3dvcmQgdG8gYmUgY2hhbmdlZCBvbiBuZXh0IGxvZ2luCiAgICAgICAgICAgIFNldC1BRE9iamVjdCBAQXJndW1lbnRzIC1Qcm9wZXJ0eU5hbWUgcHdkbGFzdHNldCAtUHJvcGVydHlWYWx1ZSAwCiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LUNvbXB1dGVyUHJvcGVydHkgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFJldHVybnMgYSBsaXN0IG9mIGFsbCBjb21wdXRlciBvYmplY3QgcHJvcGVydGllcy4gSWYgYSBwcm9wZXJ0eQogICAgICAgIG5hbWUgaXMgc3BlY2lmaWVkLCBpdCByZXR1cm5zIGFsbCBbY29tcHV0ZXI6cHJvcGVydHldIHZhbHVlcy4KCiAgICAgICAgVGFrZW4gZGlyZWN0bHkgZnJvbSBAb2JzY3VyZXNlYydzIHBvc3Q6CiAgICAgICAgICAgIGh0dHA6Ly9vYnNjdXJlc2VjdXJpdHkuYmxvZ3Nwb3QuY29tLzIwMTQvMDQvQURTSVNlYXJjaGVyLmh0bWwKCiAgICAuUEFSQU1FVEVSIFByb3BlcnRpZXMKCiAgICAgICAgUmV0dXJuIHByb3BlcnR5IG5hbWVzIGZvciBjb21wdXRlcnMuCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byBxdWVyeSBmb3IgY29tcHV0ZXIgcHJvcGVydGllcywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtQ29tcHV0ZXJQcm9wZXJ0eSAtRG9tYWluIHRlc3RpbmcKICAgICAgICAKICAgICAgICBSZXR1cm5zIGFsbCB1c2VyIHByb3BlcnRpZXMgZm9yIGNvbXB1dGVycyBpbiB0aGUgJ3Rlc3RpbmcnIGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1Db21wdXRlclByb3BlcnR5IC1Qcm9wZXJ0aWVzIHNzbixsYXN0bG9nb24sbG9jYXRpb24KICAgICAgICAKICAgICAgICBSZXR1cm5zIGFsbCBhbiBhcnJheSBvZiBjb21wdXRlci9zc24vbGFzdGxvZ2luL2xvY2F0aW9uIGNvbWJpbmF0aW9ucwogICAgICAgIGZvciBjb21wdXRlcnMgaW4gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5MSU5LCgogICAgICAgIGh0dHA6Ly9vYnNjdXJlc2VjdXJpdHkuYmxvZ3Nwb3QuY29tLzIwMTQvMDQvQURTSVNlYXJjaGVyLmh0bWwKIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRQcm9wZXJ0aWVzLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICBpZigkUHJvcGVydGllcykgewogICAgICAgICMgZXh0cmFjdCBvdXQgdGhlIHNldCBvZiBhbGwgcHJvcGVydGllcyBmb3IgZWFjaCBvYmplY3QKICAgICAgICAkUHJvcGVydGllcyA9ICwibmFtZSIgKyAkUHJvcGVydGllcyB8IFNvcnQtT2JqZWN0IC1VbmlxdWUKICAgICAgICBHZXQtTmV0Q29tcHV0ZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1GdWxsRGF0YSAtUGFnZVNpemUgJFBhZ2VTaXplIHwgU2VsZWN0LU9iamVjdCAtUHJvcGVydHkgJFByb3BlcnRpZXMKICAgIH0KICAgIGVsc2UgewogICAgICAgICMgZXh0cmFjdCBvdXQganVzdCB0aGUgcHJvcGVydHkgbmFtZXMKICAgICAgICBHZXQtTmV0Q29tcHV0ZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1GdWxsRGF0YSAtUGFnZVNpemUgJFBhZ2VTaXplIHwgU2VsZWN0LU9iamVjdCAtZmlyc3QgMSB8IEdldC1NZW1iZXIgLU1lbWJlclR5cGUgKlByb3BlcnR5IHwgU2VsZWN0LU9iamVjdCAtUHJvcGVydHkgIk5hbWUiCiAgICB9Cn0KCgpmdW5jdGlvbiBGaW5kLUNvbXB1dGVyRmllbGQgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFNlYXJjaGVzIGNvbXB1dGVyIG9iamVjdCBmaWVsZHMgZm9yIGEgZ2l2ZW4gd29yZCAoZGVmYXVsdCAqcGFzcyopLiBEZWZhdWx0CiAgICAgICAgZmllbGQgYmVpbmcgc2VhcmNoZWQgaXMgJ2Rlc2NyaXB0aW9uJy4KCiAgICAgICAgVGFrZW4gZGlyZWN0bHkgZnJvbSBAb2JzY3VyZXNlYydzIHBvc3Q6CiAgICAgICAgICAgIGh0dHA6Ly9vYnNjdXJlc2VjdXJpdHkuYmxvZ3Nwb3QuY29tLzIwMTQvMDQvQURTSVNlYXJjaGVyLmh0bWwKCiAgICAuUEFSQU1FVEVSIFNlYXJjaFRlcm0KCiAgICAgICAgVGVybSB0byBzZWFyY2ggZm9yLCBkZWZhdWx0IG9mICJwYXNzIi4KCiAgICAuUEFSQU1FVEVSIFNlYXJjaEZpZWxkCgogICAgICAgIFVzZXIgZmllbGQgdG8gc2VhcmNoIGluLCBkZWZhdWx0IG9mICJkZXNjcmlwdGlvbiIuCgogICAgLlBBUkFNRVRFUiBBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCwgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBEb21haW4gdG8gc2VhcmNoIGNvbXB1dGVyIGZpZWxkcyBmb3IsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gRmluZC1Db21wdXRlckZpZWxkIC1TZWFyY2hUZXJtIGJhY2t1cCAtU2VhcmNoRmllbGQgaW5mbwoKICAgICAgICBGaW5kIGNvbXB1dGVyIGFjY291bnRzIHdpdGggImJhY2t1cCIgaW4gdGhlICJpbmZvIiBmaWVsZC4KIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ1Rlcm0nKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hUZXJtID0gJ3Bhc3MnLAoKICAgICAgICBbQWxpYXMoJ0ZpZWxkJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoRmllbGQgPSAnZGVzY3JpcHRpb24nLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwYXRoLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICBwcm9jZXNzIHsKICAgICAgICBHZXQtTmV0Q29tcHV0ZXIgLUFEU3BhdGggJEFEU3BhdGggLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1GdWxsRGF0YSAtRmlsdGVyICIoJFNlYXJjaEZpZWxkPSokU2VhcmNoVGVybSopIiAtUGFnZVNpemUgJFBhZ2VTaXplIHwgU2VsZWN0LU9iamVjdCBzYW1hY2NvdW50bmFtZSwkU2VhcmNoRmllbGQKICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1OZXRPVSB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgR2V0cyBhIGxpc3Qgb2YgYWxsIGN1cnJlbnQgT1VzIGluIGEgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgT1VOYW1lCgogICAgICAgIFRoZSBPVSBuYW1lIHRvIHF1ZXJ5IGZvciwgd2lsZGNhcmRzIGFjY2VwdGVkLgoKICAgIC5QQVJBTUVURVIgR1VJRAoKICAgICAgICBPbmx5IHJldHVybiBPVXMgd2l0aCB0aGUgc3BlY2lmaWVkIEdVSUQgaW4gdGhlaXIgZ3BsaW5rIHByb3BlcnR5LgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gcXVlcnkgZm9yIE9VcywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgQURTcGF0aAoKICAgICAgICBUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBGdWxsRGF0YQoKICAgICAgICBTd2l0Y2guIFJldHVybiBmdWxsIE9VIG9iamVjdHMgaW5zdGVhZCBvZiBqdXN0IG9iamVjdCBuYW1lcyAodGhlIGRlZmF1bHQpLgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0T1UKICAgICAgICAKICAgICAgICBSZXR1cm5zIHRoZSBjdXJyZW50IE9VcyBpbiB0aGUgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldE9VIC1PVU5hbWUgKmFkbWluKiAtRG9tYWluIHRlc3RsYWIubG9jYWwKICAgICAgICAKICAgICAgICBSZXR1cm5zIGFsbCBPVXMgd2l0aCAiYWRtaW4iIGluIHRoZWlyIG5hbWUgaW4gdGhlIHRlc3RsYWIubG9jYWwgZG9tYWluLgoKICAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRPVSAtR1VJRCAxMjMtLi4uCiAgICAgICAgCiAgICAgICAgUmV0dXJucyBhbGwgT1VzIHdpdGggbGlua2VkIHRvIHRoZSBzcGVjaWZpZWQgZ3JvdXAgcG9saWN5IG9iamVjdC4KCiAgICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiAiKmFkbWluKiIsIipzZXJ2ZXIqIiB8IEdldC1OZXRPVQoKICAgICAgICBHZXQgdGhlIGZ1bGwgT1UgbmFtZXMgZm9yIHRoZSBnaXZlbiBzZWFyY2ggdGVybXMgcGlwZWQgb24gdGhlIHBpcGVsaW5lLgojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkT1VOYW1lID0gJyonLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRHVUlELAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEZ1bGxEYXRhLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCgogICAgYmVnaW4gewogICAgICAgICRPVVNlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQURTcGF0aCAkQURTcGF0aCAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICB9CiAgICBwcm9jZXNzIHsKICAgICAgICBpZiAoJE9VU2VhcmNoZXIpIHsKICAgICAgICAgICAgaWYgKCRHVUlEKSB7CiAgICAgICAgICAgICAgICAjIGlmIHdlJ3JlIGZpbHRlcmluZyBmb3IgYSBHVUlEIGluIC5ncGxpbmsKICAgICAgICAgICAgICAgICRPVVNlYXJjaGVyLmZpbHRlcj0iKCYob2JqZWN0Q2F0ZWdvcnk9b3JnYW5pemF0aW9uYWxVbml0KShuYW1lPSRPVU5hbWUpKGdwbGluaz0qJEdVSUQqKSkiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkT1VTZWFyY2hlci5maWx0ZXI9IigmKG9iamVjdENhdGVnb3J5PW9yZ2FuaXphdGlvbmFsVW5pdCkobmFtZT0kT1VOYW1lKSkiCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkUmVzdWx0cyA9ICRPVVNlYXJjaGVyLkZpbmRBbGwoKQogICAgICAgICAgICAgICAgJFJlc3VsdHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICBpZiAoJEZ1bGxEYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgY29udmVydC9wcm9jZXNzIHRoZSBMREFQIGZpZWxkcyBmb3IgZWFjaCByZXN1bHQKICAgICAgICAgICAgICAgICAgICAgICAgJE9VID0gQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICAgICAkT1UuUFNPYmplY3QuVHlwZU5hbWVzLkFkZCgnUG93ZXJWaWV3Lk9VJykKICAgICAgICAgICAgICAgICAgICAgICAgJE9VCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgeyAKICAgICAgICAgICAgICAgICAgICAgICAgIyBvdGhlcndpc2UganVzdCByZXR1cm5pbmcgdGhlIEFEUyBwYXRocyBvZiB0aGUgT1VzCiAgICAgICAgICAgICAgICAgICAgICAgICRfLnByb3BlcnRpZXMuYWRzcGF0aAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRSZXN1bHRzLmRpc3Bvc2UoKQogICAgICAgICAgICAgICAgJE9VU2VhcmNoZXIuZGlzcG9zZSgpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAkXwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LU5ldFNpdGUgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEdldHMgYSBsaXN0IG9mIGFsbCBjdXJyZW50IHNpdGVzIGluIGEgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgU2l0ZU5hbWUKCiAgICAgICAgU2l0ZSBmaWx0ZXIgc3RyaW5nLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byBxdWVyeSBmb3Igc2l0ZXMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIEFEU3BhdGgKCiAgICAgICAgVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgR1VJRAoKICAgICAgICBPbmx5IHJldHVybiBzaXRlIHdpdGggdGhlIHNwZWNpZmllZCBHVUlEIGluIHRoZWlyIGdwbGluayBwcm9wZXJ0eS4KCiAgICAuUEFSQU1FVEVSIEZ1bGxEYXRhCgogICAgICAgIFN3aXRjaC4gUmV0dXJuIGZ1bGwgc2l0ZSBvYmplY3RzIGluc3RlYWQgb2YganVzdCBvYmplY3QgbmFtZXMgKHRoZSBkZWZhdWx0KS4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldFNpdGUgLURvbWFpbiB0ZXN0bGFiLmxvY2FsIC1GdWxsRGF0YQogICAgICAgIAogICAgICAgIFJldHVybnMgdGhlIGZ1bGwgZGF0YSBvYmplY3RzIGZvciBhbGwgc2l0ZXMgaW4gdGVzdGxhYi5sb2NhbAojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2l0ZU5hbWUgPSAiKiIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQURTcGF0aCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkR1VJRCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRnVsbERhdGEsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICBiZWdpbiB7CiAgICAgICAgJFNpdGVTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciAtQURTcGF0aCAkQURTcGF0aCAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUFEU3ByZWZpeCAiQ049U2l0ZXMsQ049Q29uZmlndXJhdGlvbiIgLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgfQogICAgcHJvY2VzcyB7CiAgICAgICAgaWYoJFNpdGVTZWFyY2hlcikgewoKICAgICAgICAgICAgaWYgKCRHVUlEKSB7CiAgICAgICAgICAgICAgICAjIGlmIHdlJ3JlIGZpbHRlcmluZyBmb3IgYSBHVUlEIGluIC5ncGxpbmsKICAgICAgICAgICAgICAgICRTaXRlU2VhcmNoZXIuZmlsdGVyPSIoJihvYmplY3RDYXRlZ29yeT1zaXRlKShuYW1lPSRTaXRlTmFtZSkoZ3BsaW5rPSokR1VJRCopKSIKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRTaXRlU2VhcmNoZXIuZmlsdGVyPSIoJihvYmplY3RDYXRlZ29yeT1zaXRlKShuYW1lPSRTaXRlTmFtZSkpIgogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJFJlc3VsdHMgPSAkU2l0ZVNlYXJjaGVyLkZpbmRBbGwoKQogICAgICAgICAgICAgICAgJFJlc3VsdHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICBpZiAoJEZ1bGxEYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgY29udmVydC9wcm9jZXNzIHRoZSBMREFQIGZpZWxkcyBmb3IgZWFjaCByZXN1bHQKICAgICAgICAgICAgICAgICAgICAgICAgJFNpdGUgPSBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgICAgICRTaXRlLlBTT2JqZWN0LlR5cGVOYW1lcy5BZGQoJ1Bvd2VyVmlldy5TaXRlJykKICAgICAgICAgICAgICAgICAgICAgICAgJFNpdGUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgb3RoZXJ3aXNlIGp1c3QgcmV0dXJuIHRoZSBzaXRlIG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJF8ucHJvcGVydGllcy5uYW1lCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJFJlc3VsdHMuZGlzcG9zZSgpCiAgICAgICAgICAgICAgICAkU2l0ZVNlYXJjaGVyLmRpc3Bvc2UoKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJF8KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1OZXRTdWJuZXQgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEdldHMgYSBsaXN0IG9mIGFsbCBjdXJyZW50IHN1Ym5ldHMgaW4gYSBkb21haW4uCgogICAgLlBBUkFNRVRFUiBTaXRlTmFtZQoKICAgICAgICBPbmx5IHJldHVybiBzdWJuZXRzIGZyb20gdGhlIHNwZWNpZmllZCBTaXRlTmFtZS4KCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBUaGUgZG9tYWluIHRvIHF1ZXJ5IGZvciBzdWJuZXRzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIEZ1bGxEYXRhCgogICAgICAgIFN3aXRjaC4gUmV0dXJuIGZ1bGwgc3VibmV0IG9iamVjdHMgaW5zdGVhZCBvZiBqdXN0IG9iamVjdCBuYW1lcyAodGhlIGRlZmF1bHQpLgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0U3VibmV0CiAgICAgICAgCiAgICAgICAgUmV0dXJucyBhbGwgc3VibmV0IG5hbWVzIGluIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRTdWJuZXQgLURvbWFpbiB0ZXN0bGFiLmxvY2FsIC1GdWxsRGF0YQogICAgICAgIAogICAgICAgIFJldHVybnMgdGhlIGZ1bGwgZGF0YSBvYmplY3RzIGZvciBhbGwgc3VibmV0cyBpbiB0ZXN0bGFiLmxvY2FsCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTaXRlTmFtZSA9ICIqIiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwYXRoLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRGdWxsRGF0YSwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgIGJlZ2luIHsKICAgICAgICAkU3VibmV0U2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1BRFNwYXRoICRBRFNwYXRoIC1BRFNwcmVmaXggIkNOPVN1Ym5ldHMsQ049U2l0ZXMsQ049Q29uZmlndXJhdGlvbiIgLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgfQoKICAgIHByb2Nlc3MgewogICAgICAgIGlmKCRTdWJuZXRTZWFyY2hlcikgewoKICAgICAgICAgICAgJFN1Ym5ldFNlYXJjaGVyLmZpbHRlcj0iKCYob2JqZWN0Q2F0ZWdvcnk9c3VibmV0KSkiCgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJFJlc3VsdHMgPSAkU3VibmV0U2VhcmNoZXIuRmluZEFsbCgpCiAgICAgICAgICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgIGlmICgkRnVsbERhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBjb252ZXJ0L3Byb2Nlc3MgdGhlIExEQVAgZmllbGRzIGZvciBlYWNoIHJlc3VsdAogICAgICAgICAgICAgICAgICAgICAgICBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzIHwgV2hlcmUtT2JqZWN0IHsgJF8uc2l0ZW9iamVjdCAtbWF0Y2ggIkNOPSRTaXRlTmFtZSIgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBvdGhlcndpc2UganVzdCByZXR1cm4gdGhlIHN1Ym5ldCBuYW1lIGFuZCBzaXRlIG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAoJFNpdGVOYW1lIC1hbmQgKCRfLnByb3BlcnRpZXMuc2l0ZW9iamVjdCAtbWF0Y2ggIkNOPSRTaXRlTmFtZSwiKSkgLW9yICgkU2l0ZU5hbWUgLWVxICcqJykpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU3VibmV0UHJvcGVydGllcyA9IEB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1N1Ym5ldCcgPSAkXy5wcm9wZXJ0aWVzLm5hbWVbMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFN1Ym5ldFByb3BlcnRpZXNbJ1NpdGUnXSA9ICgkXy5wcm9wZXJ0aWVzLnNpdGVvYmplY3RbMF0pLnNwbGl0KCIsIilbMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU3VibmV0UHJvcGVydGllc1snU2l0ZSddID0gJ0Vycm9yJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5ldy1PYmplY3QgLVR5cGVOYW1lIFBTT2JqZWN0IC1Qcm9wZXJ0eSAkU3VibmV0UHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJFJlc3VsdHMuZGlzcG9zZSgpCiAgICAgICAgICAgICAgICAkU3VibmV0U2VhcmNoZXIuZGlzcG9zZSgpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAkXwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LURvbWFpblNJRCB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgR2V0cyB0aGUgU0lEIGZvciB0aGUgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gcXVlcnksIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBDOlw+IEdldC1Eb21haW5TSUQgLURvbWFpbiBURVNUCiAgICAgICAgCiAgICAgICAgUmV0dXJucyBTSUQgZm9yIHRoZSBkb21haW4gJ1RFU1QnCiM+CgogICAgcGFyYW0oCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyCiAgICApCgogICAgJERDU0lEID0gR2V0LU5ldENvbXB1dGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtRnVsbERhdGEgLUZpbHRlciAnKHVzZXJBY2NvdW50Q29udHJvbDoxLjIuODQwLjExMzU1Ni4xLjQuODAzOj04MTkyKScgfCBTZWxlY3QtT2JqZWN0IC1GaXJzdCAxIC1FeHBhbmRQcm9wZXJ0eSBvYmplY3RzaWQKICAgIGlmKCREQ1NJRCkgewogICAgICAgICREQ1NJRC5TdWJzdHJpbmcoMCwgJERDU0lELkxhc3RJbmRleE9mKCctJykpCiAgICB9CiAgICBlbHNlIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvciBleHRyYWN0aW5nIGRvbWFpbiBTSUQgZm9yICREb21haW4iCiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtTmV0R3JvdXAgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEdldHMgYSBsaXN0IG9mIGFsbCBjdXJyZW50IGdyb3VwcyBpbiBhIGRvbWFpbiwgb3IgYWxsCiAgICAgICAgdGhlIGdyb3VwcyBhIGdpdmVuIHVzZXIvZ3JvdXAgb2JqZWN0IGJlbG9uZ3MgdG8uCgogICAgLlBBUkFNRVRFUiBHcm91cE5hbWUKCiAgICAgICAgVGhlIGdyb3VwIG5hbWUgdG8gcXVlcnkgZm9yLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgogICAgLlBBUkFNRVRFUiBTSUQKCiAgICAgICAgVGhlIGdyb3VwIFNJRCB0byBxdWVyeSBmb3IuCgogICAgLlBBUkFNRVRFUiBVc2VyTmFtZQoKICAgICAgICBUaGUgdXNlciBuYW1lIChvciBncm91cCBuYW1lKSB0byBxdWVyeSBmb3IgYWxsIGVmZmVjdGl2ZQogICAgICAgIGdyb3VwcyBvZi4KCiAgICAuUEFSQU1FVEVSIEZpbHRlcgoKICAgICAgICBBIGN1c3RvbWl6ZWQgbGRhcCBmaWx0ZXIgc3RyaW5nIHRvIHVzZSwgZS5nLiAiKGRlc2NyaXB0aW9uPSphZG1pbiopIgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gcXVlcnkgZm9yIGdyb3VwcywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgQURTcGF0aAoKICAgICAgICBUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBBZG1pbkNvdW50CgogICAgICAgIFN3aXRjaC4gUmV0dXJuIGdyb3VwIHdpdGggYWRtaW5Db3VudD0xLgoKICAgIC5QQVJBTUVURVIgRnVsbERhdGEKCiAgICAgICAgU3dpdGNoLiBSZXR1cm4gZnVsbCBncm91cCBvYmplY3RzIGluc3RlYWQgb2YganVzdCBvYmplY3QgbmFtZXMgKHRoZSBkZWZhdWx0KS4KCiAgICAuUEFSQU1FVEVSIFJhd1NpZHMKCiAgICAgICAgU3dpdGNoLiBSZXR1cm4gcmF3IFNJRHMgd2hlbiB1c2luZyAiR2V0LU5ldEdyb3VwIC1Vc2VyTmFtZSBYIgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0R3JvdXAKICAgICAgICAKICAgICAgICBSZXR1cm5zIHRoZSBjdXJyZW50IGdyb3VwcyBpbiB0aGUgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldEdyb3VwIC1Hcm91cE5hbWUgKmFkbWluKgogICAgICAgIAogICAgICAgIFJldHVybnMgYWxsIGdyb3VwcyB3aXRoICJhZG1pbiIgaW4gdGhlaXIgZ3JvdXAgbmFtZS4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRHcm91cCAtRG9tYWluIHRlc3RpbmcgLUZ1bGxEYXRhCiAgICAgICAgCiAgICAgICAgUmV0dXJucyBmdWxsIGdyb3VwIGRhdGEgb2JqZWN0cyBpbiB0aGUgJ3Rlc3RpbmcnIGRvbWFpbgojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcm91cE5hbWUgPSAnKicsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNJRCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlck5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZpbHRlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCiAgICAgICAgCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQURTcGF0aCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkQWRtaW5Db3VudCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRnVsbERhdGEsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFJhd1NpZHMsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICBiZWdpbiB7CiAgICAgICAgJEdyb3VwU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1BRFNwYXRoICRBRFNwYXRoIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgIH0KCiAgICBwcm9jZXNzIHsKICAgICAgICBpZigkR3JvdXBTZWFyY2hlcikgewoKICAgICAgICAgICAgaWYoJEFkbWluQ291bnQpIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkNoZWNraW5nIGZvciBhZG1pbkNvdW50PTEiCiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIoYWRtaW5jb3VudD0xKSIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCRVc2VyTmFtZSkgewogICAgICAgICAgICAgICAgIyBnZXQgdGhlIHJhdyB1c2VyIG9iamVjdAogICAgICAgICAgICAgICAgJFVzZXIgPSBHZXQtQURPYmplY3QgLVNhbUFjY291bnROYW1lICRVc2VyTmFtZSAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLVJldHVyblJhdyAtUGFnZVNpemUgJFBhZ2VTaXplIHwgU2VsZWN0LU9iamVjdCAtRmlyc3QgMQoKICAgICAgICAgICAgICAgIGlmKCRVc2VyKSB7CiAgICAgICAgICAgICAgICAgICAgIyBjb252ZXJ0IHRoZSB1c2VyIHRvIGEgZGlyZWN0b3J5IGVudHJ5CiAgICAgICAgICAgICAgICAgICAgJFVzZXJEaXJlY3RvcnlFbnRyeSA9ICRVc2VyLkdldERpcmVjdG9yeUVudHJ5KCkKCiAgICAgICAgICAgICAgICAgICAgIyBjYXVzZSB0aGUgY2FjaGUgdG8gY2FsY3VsYXRlIHRoZSB0b2tlbiBncm91cHMgZm9yIHRoZSB1c2VyCiAgICAgICAgICAgICAgICAgICAgJFVzZXJEaXJlY3RvcnlFbnRyeS5SZWZyZXNoQ2FjaGUoInRva2VuR3JvdXBzIikKCiAgICAgICAgICAgICAgICAgICAgJFVzZXJEaXJlY3RvcnlFbnRyeS5Ub2tlbkdyb3VwcyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBjb252ZXJ0IHRoZSB0b2tlbiBncm91cCBzaWQKICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwU2lkID0gKE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXIoJF8sMCkpLlZhbHVlCgogICAgICAgICAgICAgICAgICAgICAgICAjIGlnbm9yZSB0aGUgYnVpbHQgaW4gZ3JvdXBzCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRHcm91cFNpZCAtbm90bWF0Y2ggJ15TLTEtNS0zMi0uKicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRGdWxsRGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cCA9IEdldC1BRE9iamVjdCAtU0lEICRHcm91cFNpZCAtUGFnZVNpemUgJFBhZ2VTaXplIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cC5QU09iamVjdC5UeXBlTmFtZXMuQWRkKCdQb3dlclZpZXcuR3JvdXAnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFJhd1NpZHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwU2lkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb252ZXJ0LVNpZFRvTmFtZSAtU0lEICRHcm91cFNpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIlVzZXJOYW1lICckVXNlck5hbWUnIGZhaWxlZCB0byByZXNvbHZlLiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGlmICgkU0lEKSB7CiAgICAgICAgICAgICAgICAgICAgJEdyb3VwU2VhcmNoZXIuZmlsdGVyID0gIigmKG9iamVjdENhdGVnb3J5PWdyb3VwKShvYmplY3RTSUQ9JFNJRCkkRmlsdGVyKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRHcm91cFNlYXJjaGVyLmZpbHRlciA9ICIoJihvYmplY3RDYXRlZ29yeT1ncm91cCkoc2FtYWNjb3VudG5hbWU9JEdyb3VwTmFtZSkkRmlsdGVyKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJFJlc3VsdHMgPSAkR3JvdXBTZWFyY2hlci5GaW5kQWxsKCkKICAgICAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgIyBpZiB3ZSdyZSByZXR1cm5pbmcgZnVsbCBkYXRhIG9iamVjdHMKICAgICAgICAgICAgICAgICAgICBpZiAoJEZ1bGxEYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgY29udmVydC9wcm9jZXNzIHRoZSBMREFQIGZpZWxkcyBmb3IgZWFjaCByZXN1bHQKICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwID0gQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXAuUFNPYmplY3QuVHlwZU5hbWVzLkFkZCgnUG93ZXJWaWV3Lkdyb3VwJykKICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAjIG90aGVyd2lzZSB3ZSdyZSBqdXN0IHJldHVybmluZyB0aGUgZ3JvdXAgbmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkXy5wcm9wZXJ0aWVzLnNhbWFjY291bnRuYW1lCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJFJlc3VsdHMuZGlzcG9zZSgpCiAgICAgICAgICAgICAgICAkR3JvdXBTZWFyY2hlci5kaXNwb3NlKCkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1OZXRHcm91cE1lbWJlciB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgVGhpcyBmdW5jdGlvbiB1c2VycyBbQURTSV0gYW5kIExEQVAgdG8gcXVlcnkgdGhlIGN1cnJlbnQgQUQgY29udGV4dAogICAgICAgIG9yIHRydXN0ZWQgZG9tYWluIGZvciB1c2VycyBpbiBhIHNwZWNpZmllZCBncm91cC4gSWYgbm8gR3JvdXBOYW1lIGlzCiAgICAgICAgc3BlY2lmaWVkLCBpdCBkZWZhdWx0cyB0byBxdWVyeWluZyB0aGUgIkRvbWFpbiBBZG1pbnMiIGdyb3VwLgogICAgICAgIFRoaXMgaXMgYSByZXBsYWNlbWVudCBmb3IgIm5ldCBncm91cCAnbmFtZScgL2RvbWFpbiIKCiAgICAuUEFSQU1FVEVSIEdyb3VwTmFtZQoKICAgICAgICBUaGUgZ3JvdXAgbmFtZSB0byBxdWVyeSBmb3IgdXNlcnMuCgogICAgLlBBUkFNRVRFUiBTSUQKCiAgICAgICAgVGhlIEdyb3VwIFNJRCB0byBxdWVyeSBmb3IgdXNlcnMuIElmIG5vdCBnaXZlbiwgaXQgZGVmYXVsdHMgdG8gNTEyICJEb21haW4gQWRtaW5zIgoKICAgIC5QQVJBTUVURVIgRmlsdGVyCgogICAgICAgIEEgY3VzdG9taXplZCBsZGFwIGZpbHRlciBzdHJpbmcgdG8gdXNlLCBlLmcuICIoZGVzY3JpcHRpb249KmFkbWluKikiCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgVGhlIGRvbWFpbiB0byBxdWVyeSBmb3IgZ3JvdXAgdXNlcnMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIEFEU3BhdGgKCiAgICAgICAgVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoLCBlLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiCiAgICAgICAgVXNlZnVsIGZvciBPVSBxdWVyaWVzLgoKICAgIC5QQVJBTUVURVIgRnVsbERhdGEKCiAgICAgICAgU3dpdGNoLiBSZXR1cm5zIGZ1bGwgZGF0YSBvYmplY3RzIGluc3RlYWQgb2YganVzdCBncm91cC91c2Vycy4KCiAgICAuUEFSQU1FVEVSIFJlY3Vyc2UKCiAgICAgICAgU3dpdGNoLiBJZiB0aGUgZ3JvdXAgbWVtYmVyIGlzIGEgZ3JvdXAsIHJlY3Vyc2l2ZWx5IHRyeSB0byBxdWVyeSBpdHMgbWVtYmVycyBhcyB3ZWxsLgoKICAgIC5QQVJBTUVURVIgVXNlTWF0Y2hpbmdSdWxlCgogICAgICAgIFN3aXRjaC4gVXNlIExEQVBfTUFUQ0hJTkdfUlVMRV9JTl9DSEFJTiBpbiB0aGUgTERBUCBzZWFyY2ggcXVlcnkgd2hlbiAtUmVjdXJzZSBpcyBzcGVjaWZpZWQuCiAgICAgICAgTXVjaCBmYXN0ZXIgdGhhbiBtYW51YWwgcmVjdXJzaW9uLCBidXQgZG9lc24ndCByZXZlYWwgY3Jvc3MtZG9tYWluIGdyb3Vwcy4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldEdyb3VwTWVtYmVyCiAgICAgICAgCiAgICAgICAgUmV0dXJucyB0aGUgdXNlcm5hbWVzIHRoYXQgb2YgbWVtYmVycyBvZiB0aGUgIkRvbWFpbiBBZG1pbnMiIGRvbWFpbiBncm91cC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRHcm91cE1lbWJlciAtRG9tYWluIHRlc3RpbmcgLUdyb3VwTmFtZSAiUG93ZXIgVXNlcnMiCiAgICAgICAgCiAgICAgICAgUmV0dXJucyB0aGUgdXNlcm5hbWVzIHRoYXQgb2YgbWVtYmVycyBvZiB0aGUgIlBvd2VyIFVzZXJzIiBncm91cCBpbiB0aGUgJ3Rlc3RpbmcnIGRvbWFpbi4KCiAgICAuTElOSwoKICAgICAgICBodHRwOi8vd3d3LnBvd2Vyc2hlbGxtYWdhemluZS5jb20vMjAxMy8wNS8yMy9wc3RpcC1yZXRyaWV2ZS1ncm91cC1tZW1iZXJzaGlwLW9mLWFuLWFjdGl2ZS1kaXJlY3RvcnktZ3JvdXAtcmVjdXJzaXZlbHkvCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEdyb3VwTmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU0lELAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEZ1bGxEYXRhLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZWN1cnNlLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRVc2VNYXRjaGluZ1J1bGUsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICBiZWdpbiB7CiAgICAgICAgaWYoJERvbWFpbkNvbnRyb2xsZXIpIHsKICAgICAgICAgICAgJFRhcmdldERvbWFpbkNvbnRyb2xsZXIgPSAkRG9tYWluQ29udHJvbGxlcgogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJFRhcmdldERvbWFpbkNvbnRyb2xsZXIgPSAoKEdldC1OZXREb21haW4gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwpLlBkY1JvbGVPd25lcikuTmFtZQogICAgICAgIH0KCiAgICAgICAgaWYoJERvbWFpbikgewogICAgICAgICAgICAkVGFyZ2V0RG9tYWluID0gJERvbWFpbgogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJFRhcmdldERvbWFpbiA9IEdldC1OZXREb21haW4gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBuYW1lCiAgICAgICAgfQoKICAgICAgICAjIHNvIHRoaXMgaXNuJ3QgcmVwZWF0ZWQgaWYgdXNlcnMgYXJlIHBhc3NlZCBvbiB0aGUgcGlwZWxpbmUKICAgICAgICAkR3JvdXBTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciAtRG9tYWluICRUYXJnZXREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJFRhcmdldERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUFEU3BhdGggJEFEU3BhdGggLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgfQoKICAgIHByb2Nlc3MgewogICAgICAgIGlmICgkR3JvdXBTZWFyY2hlcikgewogICAgICAgICAgICBpZiAoJFJlY3Vyc2UgLWFuZCAkVXNlTWF0Y2hpbmdSdWxlKSB7CiAgICAgICAgICAgICAgICAjIHJlc29sdmUgdGhlIGdyb3VwIHRvIGEgZGlzdGluZ3Vpc2hlZG5hbWUKICAgICAgICAgICAgICAgIGlmICgkR3JvdXBOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgJEdyb3VwID0gR2V0LU5ldEdyb3VwIC1Hcm91cE5hbWUgJEdyb3VwTmFtZSAtRG9tYWluICRUYXJnZXREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJFRhcmdldERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUZ1bGxEYXRhIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2VpZiAoJFNJRCkgewogICAgICAgICAgICAgICAgICAgICRHcm91cCA9IEdldC1OZXRHcm91cCAtU0lEICRTSUQgLURvbWFpbiAkVGFyZ2V0RG9tYWluIC1Eb21haW5Db250cm9sbGVyICRUYXJnZXREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1GdWxsRGF0YSAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAjIGRlZmF1bHQgdG8gZG9tYWluIGFkbWlucwogICAgICAgICAgICAgICAgICAgICRTSUQgPSAoR2V0LURvbWFpblNJRCAtRG9tYWluICRUYXJnZXREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJFRhcmdldERvbWFpbkNvbnRyb2xsZXIpICsgIi01MTIiCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwID0gR2V0LU5ldEdyb3VwIC1TSUQgJFNJRCAtRG9tYWluICRUYXJnZXREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJFRhcmdldERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUZ1bGxEYXRhIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRHcm91cEROID0gJEdyb3VwLmRpc3Rpbmd1aXNoZWRuYW1lCiAgICAgICAgICAgICAgICAkR3JvdXBGb3VuZE5hbWUgPSAkR3JvdXAuc2FtYWNjb3VudG5hbWUKCiAgICAgICAgICAgICAgICBpZiAoJEdyb3VwRE4pIHsKICAgICAgICAgICAgICAgICAgICAkR3JvdXBTZWFyY2hlci5maWx0ZXIgPSAiKCYoc2FtQWNjb3VudFR5cGU9ODA1MzA2MzY4KShtZW1iZXJvZjoxLjIuODQwLjExMzU1Ni4xLjQuMTk0MTo9JEdyb3VwRE4pJEZpbHRlcikiCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwU2VhcmNoZXIuUHJvcGVydGllc1RvTG9hZC5BZGRSYW5nZSgoJ2Rpc3Rpbmd1aXNoZWROYW1lJywnc2FtYWNjb3VudHR5cGUnLCdsYXN0bG9nb24nLCdsYXN0bG9nb250aW1lc3RhbXAnLCdkc2NvcmVwcm9wYWdhdGlvbmRhdGEnLCdvYmplY3RzaWQnLCd3aGVuY3JlYXRlZCcsJ2JhZHBhc3N3b3JkdGltZScsJ2FjY291bnRleHBpcmVzJywnaXNjcml0aWNhbHN5c3RlbW9iamVjdCcsJ25hbWUnLCd1c25jaGFuZ2VkJywnb2JqZWN0Y2F0ZWdvcnknLCdkZXNjcmlwdGlvbicsJ2NvZGVwYWdlJywnaW5zdGFuY2V0eXBlJywnY291bnRyeWNvZGUnLCdkaXN0aW5ndWlzaGVkbmFtZScsJ2NuJywnYWRtaW5jb3VudCcsJ2xvZ29uaG91cnMnLCdvYmplY3RjbGFzcycsJ2xvZ29uY291bnQnLCd1c25jcmVhdGVkJywndXNlcmFjY291bnRjb250cm9sJywnb2JqZWN0Z3VpZCcsJ3ByaW1hcnlncm91cGlkJywnbGFzdGxvZ29mZicsJ3NhbWFjY291bnRuYW1lJywnYmFkcHdkY291bnQnLCd3aGVuY2hhbmdlZCcsJ21lbWJlcm9mJywncHdkbGFzdHNldCcsJ2Fkc3BhdGgnKSkKCiAgICAgICAgICAgICAgICAgICAgJE1lbWJlcnMgPSAkR3JvdXBTZWFyY2hlci5GaW5kQWxsKCkKICAgICAgICAgICAgICAgICAgICAkR3JvdXBGb3VuZE5hbWUgPSAkR3JvdXBOYW1lCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1FcnJvciAiVW5hYmxlIHRvIGZpbmQgR3JvdXAiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoJEdyb3VwTmFtZSkgewogICAgICAgICAgICAgICAgICAgICRHcm91cFNlYXJjaGVyLmZpbHRlciA9ICIoJihvYmplY3RDYXRlZ29yeT1ncm91cCkoc2FtYWNjb3VudG5hbWU9JEdyb3VwTmFtZSkkRmlsdGVyKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2VpZiAoJFNJRCkgewogICAgICAgICAgICAgICAgICAgICRHcm91cFNlYXJjaGVyLmZpbHRlciA9ICIoJihvYmplY3RDYXRlZ29yeT1ncm91cCkob2JqZWN0U0lEPSRTSUQpJEZpbHRlcikiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAjIGRlZmF1bHQgdG8gZG9tYWluIGFkbWlucwogICAgICAgICAgICAgICAgICAgICRTSUQgPSAoR2V0LURvbWFpblNJRCAtRG9tYWluICRUYXJnZXREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJFRhcmdldERvbWFpbkNvbnRyb2xsZXIpICsgIi01MTIiCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwU2VhcmNoZXIuZmlsdGVyID0gIigmKG9iamVjdENhdGVnb3J5PWdyb3VwKShvYmplY3RTSUQ9JFNJRCkkRmlsdGVyKSIKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICRSZXN1bHQgPSAkR3JvdXBTZWFyY2hlci5GaW5kT25lKCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAkTWVtYmVycyA9IEAoKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRHcm91cEZvdW5kTmFtZSA9ICcnCgogICAgICAgICAgICAgICAgaWYgKCRSZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICAkTWVtYmVycyA9ICRSZXN1bHQucHJvcGVydGllcy5pdGVtKCJtZW1iZXIiKQoKICAgICAgICAgICAgICAgICAgICBpZigkTWVtYmVycy5jb3VudCAtZXEgMCkgewoKICAgICAgICAgICAgICAgICAgICAgICAgJEZpbmlzaGVkID0gJEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICRCb3R0b20gPSAwCiAgICAgICAgICAgICAgICAgICAgICAgICRUb3AgPSAwCgogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSghJEZpbmlzaGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVG9wID0gJEJvdHRvbSArIDE0OTkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJSYW5nZT0ibWVtYmVyO3JhbmdlPSRCb3R0b20tJFRvcCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRCb3R0b20gKz0gMTUwMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBTZWFyY2hlci5Qcm9wZXJ0aWVzVG9Mb2FkLkNsZWFyKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt2b2lkXSRHcm91cFNlYXJjaGVyLlByb3BlcnRpZXNUb0xvYWQuQWRkKCIkTWVtYmVyUmFuZ2UiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgW3ZvaWRdJEdyb3VwU2VhcmNoZXIuUHJvcGVydGllc1RvTG9hZC5BZGQoInNhbWFjY291bnRuYW1lIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFJlc3VsdCA9ICRHcm91cFNlYXJjaGVyLkZpbmRPbmUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRSYW5nZWRQcm9wZXJ0eSA9ICRSZXN1bHQuUHJvcGVydGllcy5Qcm9wZXJ0eU5hbWVzIC1saWtlICJtZW1iZXI7cmFuZ2U9KiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVycyArPSAkUmVzdWx0LlByb3BlcnRpZXMuaXRlbSgkUmFuZ2VkUHJvcGVydHkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwRm91bmROYW1lID0gJFJlc3VsdC5wcm9wZXJ0aWVzLml0ZW0oInNhbWFjY291bnRuYW1lIilbMF0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRNZW1iZXJzLmNvdW50IC1lcSAwKSB7IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRmluaXNoZWQgPSAkVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIFtTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLk1ldGhvZEludm9jYXRpb25FeGNlcHRpb25dIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRmluaXNoZWQgPSAkVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBGb3VuZE5hbWUgPSAkUmVzdWx0LnByb3BlcnRpZXMuaXRlbSgic2FtYWNjb3VudG5hbWUiKVswXQogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVycyArPSAkUmVzdWx0LlByb3BlcnRpZXMuaXRlbSgkUmFuZ2VkUHJvcGVydHkpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJEdyb3VwU2VhcmNoZXIuZGlzcG9zZSgpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRNZW1iZXJzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAjIGlmIHdlJ3JlIGRvaW5nIHRoZSBMREFQX01BVENISU5HX1JVTEVfSU5fQ0hBSU4gcmVjdXJzaW9uCiAgICAgICAgICAgICAgICBpZiAoJFJlY3Vyc2UgLWFuZCAkVXNlTWF0Y2hpbmdSdWxlKSB7CiAgICAgICAgICAgICAgICAgICAgJFByb3BlcnRpZXMgPSAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICB9IAogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYoJFRhcmdldERvbWFpbkNvbnRyb2xsZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFJlc3VsdCA9IFthZHNpXSJMREFQOi8vJFRhcmdldERvbWFpbkNvbnRyb2xsZXIvJF8iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkUmVzdWx0ID0gW2Fkc2ldIkxEQVA6Ly8kXyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYoJFJlc3VsdCl7CiAgICAgICAgICAgICAgICAgICAgICAgICRQcm9wZXJ0aWVzID0gJFJlc3VsdC5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmKCRQcm9wZXJ0aWVzKSB7CgogICAgICAgICAgICAgICAgICAgICRJc0dyb3VwID0gQCgnMjY4NDM1NDU2JywnMjY4NDM1NDU3JywnNTM2ODcwOTEyJywnNTM2ODcwOTEzJykgLWNvbnRhaW5zICRQcm9wZXJ0aWVzLnNhbWFjY291bnR0eXBlCgogICAgICAgICAgICAgICAgICAgIGlmICgkRnVsbERhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwTWVtYmVyID0gQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJFByb3BlcnRpZXMKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cE1lbWJlciA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICRHcm91cE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cERvbWFpbicgJFRhcmdldERvbWFpbgogICAgICAgICAgICAgICAgICAgICRHcm91cE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cE5hbWUnICRHcm91cEZvdW5kTmFtZQoKICAgICAgICAgICAgICAgICAgICBpZigkUHJvcGVydGllcy5vYmplY3RTaWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlclNJRCA9ICgoTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllciAkUHJvcGVydGllcy5vYmplY3RTaWRbMF0sMCkuVmFsdWUpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyU0lEID0gJE51bGwKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJETiA9ICRQcm9wZXJ0aWVzLmRpc3Rpbmd1aXNoZWRuYW1lWzBdCgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCRNZW1iZXJETiAtbWF0Y2ggJ0ZvcmVpZ25TZWN1cml0eVByaW5jaXBhbHMnKSAtYW5kICgkTWVtYmVyRE4gLW1hdGNoICdTLTEtNS0yMScpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKC1ub3QgJE1lbWJlclNJRCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyU0lEID0gJFByb3BlcnRpZXMuY25bMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlclNpbXBsZU5hbWUgPSBDb252ZXJ0LVNpZFRvTmFtZSAtU0lEICRNZW1iZXJTSUQgfCBDb252ZXJ0LUFETmFtZSAtSW5wdXRUeXBlICdOVDQnIC1PdXRwdXRUeXBlICdTaW1wbGUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJE1lbWJlclNpbXBsZU5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlckRvbWFpbiA9ICRNZW1iZXJTaW1wbGVOYW1lLlNwbGl0KCdAJylbMV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkVycm9yIGNvbnZlcnRpbmcgJE1lbWJlckROIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyRG9tYWluID0gJE51bGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiRXJyb3IgY29udmVydGluZyAkTWVtYmVyRE4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlckRvbWFpbiA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGV4dHJhY3QgdGhlIEZRRE4gZnJvbSB0aGUgRGlzdGluZ3Vpc2hlZCBOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyRG9tYWluID0gJE1lbWJlckROLnN1YlN0cmluZygkTWVtYmVyRE4uSW5kZXhPZigiREM9IikpIC1yZXBsYWNlICdEQz0nLCcnIC1yZXBsYWNlICcsJywnLicKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJETiA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJEb21haW4gPSAkTnVsbAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKCRQcm9wZXJ0aWVzLnNhbWFjY291bnRuYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgZm9yZXN0IHVzZXJzIGhhdmUgdGhlIHNhbUFjY291bnROYW1lIHNldAogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyTmFtZSA9ICRQcm9wZXJ0aWVzLnNhbWFjY291bnRuYW1lWzBdCiAgICAgICAgICAgICAgICAgICAgfSAKICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBleHRlcm5hbCB0cnVzdCB1c2VycyBoYXZlIGEgU0lELCBzbyBjb252ZXJ0IGl0CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyTmFtZSA9IENvbnZlcnQtU2lkVG9OYW1lICRQcm9wZXJ0aWVzLmNuWzBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBpZiB0aGVyZSdzIGEgcHJvYmxlbSBjb250YWN0aW5nIHRoZSBkb21haW4gdG8gcmVzb2x2ZSB0aGUgU0lECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyTmFtZSA9ICRQcm9wZXJ0aWVzLmNuCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICRHcm91cE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNZW1iZXJEb21haW4nICRNZW1iZXJEb21haW4KICAgICAgICAgICAgICAgICAgICAkR3JvdXBNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWVtYmVyTmFtZScgJE1lbWJlck5hbWUKICAgICAgICAgICAgICAgICAgICAkR3JvdXBNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWVtYmVyU0lEJyAkTWVtYmVyU0lECiAgICAgICAgICAgICAgICAgICAgJEdyb3VwTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzR3JvdXAnICRJc0dyb3VwCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ01lbWJlckROJyAkTWVtYmVyRE4KICAgICAgICAgICAgICAgICAgICAkR3JvdXBNZW1iZXIuUFNPYmplY3QuVHlwZU5hbWVzLkFkZCgnUG93ZXJWaWV3Lkdyb3VwTWVtYmVyJykKICAgICAgICAgICAgICAgICAgICAkR3JvdXBNZW1iZXIKCiAgICAgICAgICAgICAgICAgICAgIyBpZiB3ZSdyZSBkb2luZyBtYW51YWwgcmVjdXJzaW9uCiAgICAgICAgICAgICAgICAgICAgaWYgKCRSZWN1cnNlIC1hbmQgISRVc2VNYXRjaGluZ1J1bGUgLWFuZCAkSXNHcm91cCAtYW5kICRNZW1iZXJOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRGdWxsRGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0LU5ldEdyb3VwTWVtYmVyIC1GdWxsRGF0YSAtRG9tYWluICRNZW1iZXJEb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJFRhcmdldERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUdyb3VwTmFtZSAkTWVtYmVyTmFtZSAtUmVjdXJzZSAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQtTmV0R3JvdXBNZW1iZXIgLURvbWFpbiAkTWVtYmVyRG9tYWluIC1Eb21haW5Db250cm9sbGVyICRUYXJnZXREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1Hcm91cE5hbWUgJE1lbWJlck5hbWUgLVJlY3Vyc2UgLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LU5ldEZpbGVTZXJ2ZXIgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFJldHVybnMgYSBsaXN0IG9mIGFsbCBmaWxlIHNlcnZlcnMgZXh0cmFjdGVkIGZyb20gdXNlciAKICAgICAgICBob21lZGlyZWN0b3J5LCBzY3JpcHRwYXRoLCBhbmQgcHJvZmlsZXBhdGggZmllbGRzLgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gcXVlcnkgZm9yIHVzZXIgZmlsZSBzZXJ2ZXJzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBUYXJnZXRVc2VycwoKICAgICAgICBBbiBhcnJheSBvZiB1c2VycyB0byBxdWVyeSBmb3IgZmlsZSBzZXJ2ZXJzLgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0RmlsZVNlcnZlcgogICAgICAgIAogICAgICAgIFJldHVybnMgYWN0aXZlIGZpbGUgc2VydmVycy4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRGaWxlU2VydmVyIC1Eb21haW4gdGVzdGluZwogICAgICAgIAogICAgICAgIFJldHVybnMgYWN0aXZlIGZpbGUgc2VydmVycyBmb3IgdGhlICd0ZXN0aW5nJyBkb21haW4uCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRUYXJnZXRVc2VycywKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgIGZ1bmN0aW9uIFNwbGl0UGF0aCB7CiAgICAgICAgIyBzaG9ydCBpbnRlcm5hbCBoZWxwZXIgdG8gc3BsaXQgVU5DIHNlcnZlciBwYXRocwogICAgICAgIHBhcmFtKFtTdHJpbmddJFBhdGgpCgogICAgICAgIGlmICgkUGF0aCAtYW5kICgkUGF0aC5zcGxpdCgiXFwiKS5Db3VudCAtZ2UgMykpIHsKICAgICAgICAgICAgJFRlbXAgPSAkUGF0aC5zcGxpdCgiXFwiKVsyXQogICAgICAgICAgICBpZigkVGVtcCAtYW5kICgkVGVtcCAtbmUgJycpKSB7CiAgICAgICAgICAgICAgICAkVGVtcAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIEdldC1OZXRVc2VyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtUGFnZVNpemUgJFBhZ2VTaXplIHwgV2hlcmUtT2JqZWN0IHskX30gfCBXaGVyZS1PYmplY3QgewogICAgICAgICAgICAjIGZpbHRlciBmb3IgYW55IHRhcmdldCB1c2VycwogICAgICAgICAgICBpZigkVGFyZ2V0VXNlcnMpIHsKICAgICAgICAgICAgICAgICRUYXJnZXRVc2VycyAtTWF0Y2ggJF8uc2FtQWNjb3VudE5hbWUKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsgJFRydWUgfSAKICAgICAgICB9IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAjIHNwbGl0IG91dCBldmVyeSBwb3RlbnRpYWwgZmlsZSBzZXJ2ZXIgcGF0aAogICAgICAgICAgICBpZigkXy5ob21lZGlyZWN0b3J5KSB7CiAgICAgICAgICAgICAgICBTcGxpdFBhdGgoJF8uaG9tZWRpcmVjdG9yeSkKICAgICAgICAgICAgfQogICAgICAgICAgICBpZigkXy5zY3JpcHRwYXRoKSB7CiAgICAgICAgICAgICAgICBTcGxpdFBhdGgoJF8uc2NyaXB0cGF0aCkKICAgICAgICAgICAgfQogICAgICAgICAgICBpZigkXy5wcm9maWxlcGF0aCkgewogICAgICAgICAgICAgICAgU3BsaXRQYXRoKCRfLnByb2ZpbGVwYXRoKQogICAgICAgICAgICB9CgogICAgICAgIH0gfCBXaGVyZS1PYmplY3QgeyRffSB8IFNvcnQtT2JqZWN0IC1VbmlxdWUKfQoKCmZ1bmN0aW9uIEdldC1ERlNzaGFyZSB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgUmV0dXJucyBhIGxpc3Qgb2YgYWxsIGZhdWx0LXRvbGVyYW50IGRpc3RyaWJ1dGVkIGZpbGUKICAgICAgICBzeXN0ZW1zIGZvciBhIGdpdmVuIGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIFZlcnNpb24KCiAgICAgICAgVGhlIHZlcnNpb24gb2YgREZTIHRvIHF1ZXJ5IGZvciBzZXJ2ZXJzLgogICAgICAgIDEvdjEsIDIvdjIsIG9yIGFsbAoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gcXVlcnkgZm9yIHVzZXIgREZTIHNoYXJlcywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgQURTcGF0aAoKICAgICAgICBUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBQYWdlU2l6ZQoKICAgICAgICBUaGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1ERlNzaGFyZQoKICAgICAgICBSZXR1cm5zIGFsbCBkaXN0cmlidXRlZCBmaWxlIHN5c3RlbSBzaGFyZXMgZm9yIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1ERlNzaGFyZSAtRG9tYWluIHRlc3QKCiAgICAgICAgUmV0dXJucyBhbGwgZGlzdHJpYnV0ZWQgZmlsZSBzeXN0ZW0gc2hhcmVzIGZvciB0aGUgJ3Rlc3QnIGRvbWFpbi4KIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbVmFsaWRhdGVTZXQoIkFsbCIsIlYxIiwiMSIsIlYyIiwiMiIpXQogICAgICAgICRWZXJzaW9uID0gIkFsbCIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQURTcGF0aCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgIGZ1bmN0aW9uIFBhcnNlLVBrdCB7CiAgICAgICAgW0NtZGxldEJpbmRpbmcoKV0KICAgICAgICBwYXJhbSgKICAgICAgICAgICAgW2J5dGVbXV0KICAgICAgICAgICAgJFBrdAogICAgICAgICkKCiAgICAgICAgJGJpbiA9ICRQa3QKICAgICAgICAkYmxvYl92ZXJzaW9uID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDMyKCRiaW5bMC4uM10sMCkKICAgICAgICAkYmxvYl9lbGVtZW50X2NvdW50ID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDMyKCRiaW5bNC4uN10sMCkKICAgICAgICAkb2Zmc2V0ID0gOAogICAgICAgICNodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2NjMjI3MTQ3LmFzcHgKICAgICAgICAkb2JqZWN0X2xpc3QgPSBAKCkKICAgICAgICBmb3IoJGk9MTsgJGkgLWxlICRibG9iX2VsZW1lbnRfY291bnQ7ICRpKyspewogICAgICAgICAgICAgICAkYmxvYl9uYW1lX3NpemVfc3RhcnQgPSAkb2Zmc2V0CiAgICAgICAgICAgICAgICRibG9iX25hbWVfc2l6ZV9lbmQgPSAkb2Zmc2V0ICsgMQogICAgICAgICAgICAgICAkYmxvYl9uYW1lX3NpemUgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MTYoJGJpblskYmxvYl9uYW1lX3NpemVfc3RhcnQuLiRibG9iX25hbWVfc2l6ZV9lbmRdLDApCgogICAgICAgICAgICAgICAkYmxvYl9uYW1lX3N0YXJ0ID0gJGJsb2JfbmFtZV9zaXplX2VuZCArIDEKICAgICAgICAgICAgICAgJGJsb2JfbmFtZV9lbmQgPSAkYmxvYl9uYW1lX3N0YXJ0ICsgJGJsb2JfbmFtZV9zaXplIC0gMQogICAgICAgICAgICAgICAkYmxvYl9uYW1lID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRTdHJpbmcoJGJpblskYmxvYl9uYW1lX3N0YXJ0Li4kYmxvYl9uYW1lX2VuZF0pCgogICAgICAgICAgICAgICAkYmxvYl9kYXRhX3NpemVfc3RhcnQgPSAkYmxvYl9uYW1lX2VuZCArIDEKICAgICAgICAgICAgICAgJGJsb2JfZGF0YV9zaXplX2VuZCA9ICRibG9iX2RhdGFfc2l6ZV9zdGFydCArIDMKICAgICAgICAgICAgICAgJGJsb2JfZGF0YV9zaXplID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDMyKCRiaW5bJGJsb2JfZGF0YV9zaXplX3N0YXJ0Li4kYmxvYl9kYXRhX3NpemVfZW5kXSwwKQoKICAgICAgICAgICAgICAgJGJsb2JfZGF0YV9zdGFydCA9ICRibG9iX2RhdGFfc2l6ZV9lbmQgKyAxCiAgICAgICAgICAgICAgICRibG9iX2RhdGFfZW5kID0gJGJsb2JfZGF0YV9zdGFydCArICRibG9iX2RhdGFfc2l6ZSAtIDEKICAgICAgICAgICAgICAgJGJsb2JfZGF0YSA9ICRiaW5bJGJsb2JfZGF0YV9zdGFydC4uJGJsb2JfZGF0YV9lbmRdCiAgICAgICAgICAgICAgIHN3aXRjaCAtd2lsZGNhcmQgKCRibG9iX25hbWUpIHsKICAgICAgICAgICAgICAgICJcc2l0ZXJvb3QiIHsgIH0KICAgICAgICAgICAgICAgICJcZG9tYWlucm9vdCoiIHsKICAgICAgICAgICAgICAgICAgICAjIFBhcnNlIERGU05hbWVzcGFjZVJvb3RPckxpbmtCbG9iIG9iamVjdC4gU3RhcnRzIHdpdGggdmFyaWFibGUgbGVuZ3RoIERGU1Jvb3RPckxpbmtJREJsb2Igd2hpY2ggd2UgcGFyc2UgZmlyc3QuLi4KICAgICAgICAgICAgICAgICAgICAjIERGU1Jvb3RPckxpbmtJREJsb2IKICAgICAgICAgICAgICAgICAgICAkcm9vdF9vcl9saW5rX2d1aWRfc3RhcnQgPSAwCiAgICAgICAgICAgICAgICAgICAgJHJvb3Rfb3JfbGlua19ndWlkX2VuZCA9IDE1CiAgICAgICAgICAgICAgICAgICAgJHJvb3Rfb3JfbGlua19ndWlkID0gW2J5dGVbXV0kYmxvYl9kYXRhWyRyb290X29yX2xpbmtfZ3VpZF9zdGFydC4uJHJvb3Rfb3JfbGlua19ndWlkX2VuZF0KICAgICAgICAgICAgICAgICAgICAkZ3VpZCA9IE5ldy1PYmplY3QgR3VpZCgsJHJvb3Rfb3JfbGlua19ndWlkKSAjIHNob3VsZCBtYXRjaCAkZ3VpZF9zdHIKICAgICAgICAgICAgICAgICAgICAkcHJlZml4X3NpemVfc3RhcnQgPSAkcm9vdF9vcl9saW5rX2d1aWRfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICRwcmVmaXhfc2l6ZV9lbmQgPSAkcHJlZml4X3NpemVfc3RhcnQgKyAxCiAgICAgICAgICAgICAgICAgICAgJHByZWZpeF9zaXplID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDE2KCRibG9iX2RhdGFbJHByZWZpeF9zaXplX3N0YXJ0Li4kcHJlZml4X3NpemVfZW5kXSwwKQogICAgICAgICAgICAgICAgICAgICRwcmVmaXhfc3RhcnQgPSAkcHJlZml4X3NpemVfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICRwcmVmaXhfZW5kID0gJHByZWZpeF9zdGFydCArICRwcmVmaXhfc2l6ZSAtIDEKICAgICAgICAgICAgICAgICAgICAkcHJlZml4ID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRTdHJpbmcoJGJsb2JfZGF0YVskcHJlZml4X3N0YXJ0Li4kcHJlZml4X2VuZF0pCgogICAgICAgICAgICAgICAgICAgICRzaG9ydF9wcmVmaXhfc2l6ZV9zdGFydCA9ICRwcmVmaXhfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICRzaG9ydF9wcmVmaXhfc2l6ZV9lbmQgPSAkc2hvcnRfcHJlZml4X3NpemVfc3RhcnQgKyAxCiAgICAgICAgICAgICAgICAgICAgJHNob3J0X3ByZWZpeF9zaXplID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDE2KCRibG9iX2RhdGFbJHNob3J0X3ByZWZpeF9zaXplX3N0YXJ0Li4kc2hvcnRfcHJlZml4X3NpemVfZW5kXSwwKQogICAgICAgICAgICAgICAgICAgICRzaG9ydF9wcmVmaXhfc3RhcnQgPSAkc2hvcnRfcHJlZml4X3NpemVfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICRzaG9ydF9wcmVmaXhfZW5kID0gJHNob3J0X3ByZWZpeF9zdGFydCArICRzaG9ydF9wcmVmaXhfc2l6ZSAtIDEKICAgICAgICAgICAgICAgICAgICAkc2hvcnRfcHJlZml4ID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRTdHJpbmcoJGJsb2JfZGF0YVskc2hvcnRfcHJlZml4X3N0YXJ0Li4kc2hvcnRfcHJlZml4X2VuZF0pCgogICAgICAgICAgICAgICAgICAgICR0eXBlX3N0YXJ0ID0gJHNob3J0X3ByZWZpeF9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgJHR5cGVfZW5kID0gJHR5cGVfc3RhcnQgKyAzCiAgICAgICAgICAgICAgICAgICAgJHR5cGUgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGJsb2JfZGF0YVskdHlwZV9zdGFydC4uJHR5cGVfZW5kXSwwKQoKICAgICAgICAgICAgICAgICAgICAkc3RhdGVfc3RhcnQgPSAkdHlwZV9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgJHN0YXRlX2VuZCA9ICRzdGF0ZV9zdGFydCArIDMKICAgICAgICAgICAgICAgICAgICAkc3RhdGUgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGJsb2JfZGF0YVskc3RhdGVfc3RhcnQuLiRzdGF0ZV9lbmRdLDApCgogICAgICAgICAgICAgICAgICAgICRjb21tZW50X3NpemVfc3RhcnQgPSAkc3RhdGVfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICRjb21tZW50X3NpemVfZW5kID0gJGNvbW1lbnRfc2l6ZV9zdGFydCArIDEKICAgICAgICAgICAgICAgICAgICAkY29tbWVudF9zaXplID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDE2KCRibG9iX2RhdGFbJGNvbW1lbnRfc2l6ZV9zdGFydC4uJGNvbW1lbnRfc2l6ZV9lbmRdLDApCiAgICAgICAgICAgICAgICAgICAgJGNvbW1lbnRfc3RhcnQgPSAkY29tbWVudF9zaXplX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAkY29tbWVudF9lbmQgPSAkY29tbWVudF9zdGFydCArICRjb21tZW50X3NpemUgLSAxCiAgICAgICAgICAgICAgICAgICAgaWYgKCRjb21tZW50X3NpemUgLWd0IDApICB7CiAgICAgICAgICAgICAgICAgICAgICAgICRjb21tZW50ID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRTdHJpbmcoJGJsb2JfZGF0YVskY29tbWVudF9zdGFydC4uJGNvbW1lbnRfZW5kXSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJHByZWZpeF90aW1lc3RhbXBfc3RhcnQgPSAkY29tbWVudF9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgJHByZWZpeF90aW1lc3RhbXBfZW5kID0gJHByZWZpeF90aW1lc3RhbXBfc3RhcnQgKyA3CiAgICAgICAgICAgICAgICAgICAgIyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2NjMjMwMzI0LmFzcHggRklMRVRJTUUKICAgICAgICAgICAgICAgICAgICAkcHJlZml4X3RpbWVzdGFtcCA9ICRibG9iX2RhdGFbJHByZWZpeF90aW1lc3RhbXBfc3RhcnQuLiRwcmVmaXhfdGltZXN0YW1wX2VuZF0gI2R3b3JkIGxvd0RhdGVUaW1lICNkd29yZCBoaWdoZGF0ZXRpbWUKICAgICAgICAgICAgICAgICAgICAkc3RhdGVfdGltZXN0YW1wX3N0YXJ0ID0gJHByZWZpeF90aW1lc3RhbXBfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICRzdGF0ZV90aW1lc3RhbXBfZW5kID0gJHN0YXRlX3RpbWVzdGFtcF9zdGFydCArIDcKICAgICAgICAgICAgICAgICAgICAkc3RhdGVfdGltZXN0YW1wID0gJGJsb2JfZGF0YVskc3RhdGVfdGltZXN0YW1wX3N0YXJ0Li4kc3RhdGVfdGltZXN0YW1wX2VuZF0KICAgICAgICAgICAgICAgICAgICAkY29tbWVudF90aW1lc3RhbXBfc3RhcnQgPSAkc3RhdGVfdGltZXN0YW1wX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAkY29tbWVudF90aW1lc3RhbXBfZW5kID0gJGNvbW1lbnRfdGltZXN0YW1wX3N0YXJ0ICsgNwogICAgICAgICAgICAgICAgICAgICRjb21tZW50X3RpbWVzdGFtcCA9ICRibG9iX2RhdGFbJGNvbW1lbnRfdGltZXN0YW1wX3N0YXJ0Li4kY29tbWVudF90aW1lc3RhbXBfZW5kXQogICAgICAgICAgICAgICAgICAgICR2ZXJzaW9uX3N0YXJ0ID0gJGNvbW1lbnRfdGltZXN0YW1wX2VuZCAgKyAxCiAgICAgICAgICAgICAgICAgICAgJHZlcnNpb25fZW5kID0gJHZlcnNpb25fc3RhcnQgKyAzCiAgICAgICAgICAgICAgICAgICAgJHZlcnNpb24gPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGJsb2JfZGF0YVskdmVyc2lvbl9zdGFydC4uJHZlcnNpb25fZW5kXSwwKQoKICAgICAgICAgICAgICAgICAgICAjIFBhcnNlIHJlc3Qgb2YgREZTTmFtZXNwYWNlUm9vdE9yTGlua0Jsb2IgaGVyZQogICAgICAgICAgICAgICAgICAgICRkZnNfdGFyZ2V0bGlzdF9ibG9iX3NpemVfc3RhcnQgPSAkdmVyc2lvbl9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgJGRmc190YXJnZXRsaXN0X2Jsb2Jfc2l6ZV9lbmQgPSAkZGZzX3RhcmdldGxpc3RfYmxvYl9zaXplX3N0YXJ0ICsgMwogICAgICAgICAgICAgICAgICAgICRkZnNfdGFyZ2V0bGlzdF9ibG9iX3NpemUgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGJsb2JfZGF0YVskZGZzX3RhcmdldGxpc3RfYmxvYl9zaXplX3N0YXJ0Li4kZGZzX3RhcmdldGxpc3RfYmxvYl9zaXplX2VuZF0sMCkKCiAgICAgICAgICAgICAgICAgICAgJGRmc190YXJnZXRsaXN0X2Jsb2Jfc3RhcnQgPSAkZGZzX3RhcmdldGxpc3RfYmxvYl9zaXplX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAkZGZzX3RhcmdldGxpc3RfYmxvYl9lbmQgPSAkZGZzX3RhcmdldGxpc3RfYmxvYl9zdGFydCArICRkZnNfdGFyZ2V0bGlzdF9ibG9iX3NpemUgLSAxCiAgICAgICAgICAgICAgICAgICAgJGRmc190YXJnZXRsaXN0X2Jsb2IgPSAkYmxvYl9kYXRhWyRkZnNfdGFyZ2V0bGlzdF9ibG9iX3N0YXJ0Li4kZGZzX3RhcmdldGxpc3RfYmxvYl9lbmRdCiAgICAgICAgICAgICAgICAgICAgJHJlc2VydmVkX2Jsb2Jfc2l6ZV9zdGFydCA9ICRkZnNfdGFyZ2V0bGlzdF9ibG9iX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAkcmVzZXJ2ZWRfYmxvYl9zaXplX2VuZCA9ICRyZXNlcnZlZF9ibG9iX3NpemVfc3RhcnQgKyAzCiAgICAgICAgICAgICAgICAgICAgJHJlc2VydmVkX2Jsb2Jfc2l6ZSA9IFtiaXRjb252ZXJ0ZXJdOjpUb1VJbnQzMigkYmxvYl9kYXRhWyRyZXNlcnZlZF9ibG9iX3NpemVfc3RhcnQuLiRyZXNlcnZlZF9ibG9iX3NpemVfZW5kXSwwKQoKICAgICAgICAgICAgICAgICAgICAkcmVzZXJ2ZWRfYmxvYl9zdGFydCA9ICRyZXNlcnZlZF9ibG9iX3NpemVfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICRyZXNlcnZlZF9ibG9iX2VuZCA9ICRyZXNlcnZlZF9ibG9iX3N0YXJ0ICsgJHJlc2VydmVkX2Jsb2Jfc2l6ZSAtIDEKICAgICAgICAgICAgICAgICAgICAkcmVzZXJ2ZWRfYmxvYiA9ICRibG9iX2RhdGFbJHJlc2VydmVkX2Jsb2Jfc3RhcnQuLiRyZXNlcnZlZF9ibG9iX2VuZF0KICAgICAgICAgICAgICAgICAgICAkcmVmZXJyYWxfdHRsX3N0YXJ0ID0gJHJlc2VydmVkX2Jsb2JfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICRyZWZlcnJhbF90dGxfZW5kID0gJHJlZmVycmFsX3R0bF9zdGFydCArIDMKICAgICAgICAgICAgICAgICAgICAkcmVmZXJyYWxfdHRsID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDMyKCRibG9iX2RhdGFbJHJlZmVycmFsX3R0bF9zdGFydC4uJHJlZmVycmFsX3R0bF9lbmRdLDApCgogICAgICAgICAgICAgICAgICAgICNQYXJzZSBERlNUYXJnZXRMaXN0QmxvYgogICAgICAgICAgICAgICAgICAgICR0YXJnZXRfY291bnRfc3RhcnQgPSAwCiAgICAgICAgICAgICAgICAgICAgJHRhcmdldF9jb3VudF9lbmQgPSAkdGFyZ2V0X2NvdW50X3N0YXJ0ICsgMwogICAgICAgICAgICAgICAgICAgICR0YXJnZXRfY291bnQgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGRmc190YXJnZXRsaXN0X2Jsb2JbJHRhcmdldF9jb3VudF9zdGFydC4uJHRhcmdldF9jb3VudF9lbmRdLDApCiAgICAgICAgICAgICAgICAgICAgJHRfb2Zmc2V0ID0gJHRhcmdldF9jb3VudF9lbmQgKyAxCgogICAgICAgICAgICAgICAgICAgIGZvcigkaj0xOyAkaiAtbGUgJHRhcmdldF9jb3VudDsgJGorKyl7CiAgICAgICAgICAgICAgICAgICAgICAgICR0YXJnZXRfZW50cnlfc2l6ZV9zdGFydCA9ICR0X29mZnNldAogICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X2VudHJ5X3NpemVfZW5kID0gJHRhcmdldF9lbnRyeV9zaXplX3N0YXJ0ICsgMwogICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X2VudHJ5X3NpemUgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGRmc190YXJnZXRsaXN0X2Jsb2JbJHRhcmdldF9lbnRyeV9zaXplX3N0YXJ0Li4kdGFyZ2V0X2VudHJ5X3NpemVfZW5kXSwwKQogICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X3RpbWVfc3RhbXBfc3RhcnQgPSAkdGFyZ2V0X2VudHJ5X3NpemVfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X3RpbWVfc3RhbXBfZW5kID0gJHRhcmdldF90aW1lX3N0YW1wX3N0YXJ0ICsgNwogICAgICAgICAgICAgICAgICAgICAgICAjIEZJTEVUSU1FIGFnYWluIG9yIHNwZWNpYWwgaWYgcHJpb3JpdHkgcmFuayBhbmQgcHJpb3JpdHkgY2xhc3MgMAogICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X3RpbWVfc3RhbXAgPSAkZGZzX3RhcmdldGxpc3RfYmxvYlskdGFyZ2V0X3RpbWVfc3RhbXBfc3RhcnQuLiR0YXJnZXRfdGltZV9zdGFtcF9lbmRdCiAgICAgICAgICAgICAgICAgICAgICAgICR0YXJnZXRfc3RhdGVfc3RhcnQgPSAkdGFyZ2V0X3RpbWVfc3RhbXBfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X3N0YXRlX2VuZCA9ICR0YXJnZXRfc3RhdGVfc3RhcnQgKyAzCiAgICAgICAgICAgICAgICAgICAgICAgICR0YXJnZXRfc3RhdGUgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGRmc190YXJnZXRsaXN0X2Jsb2JbJHRhcmdldF9zdGF0ZV9zdGFydC4uJHRhcmdldF9zdGF0ZV9lbmRdLDApCgogICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X3R5cGVfc3RhcnQgPSAkdGFyZ2V0X3N0YXRlX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldF90eXBlX2VuZCA9ICR0YXJnZXRfdHlwZV9zdGFydCArIDMKICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldF90eXBlID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDMyKCRkZnNfdGFyZ2V0bGlzdF9ibG9iWyR0YXJnZXRfdHlwZV9zdGFydC4uJHRhcmdldF90eXBlX2VuZF0sMCkKCiAgICAgICAgICAgICAgICAgICAgICAgICRzZXJ2ZXJfbmFtZV9zaXplX3N0YXJ0ID0gJHRhcmdldF90eXBlX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgJHNlcnZlcl9uYW1lX3NpemVfZW5kID0gJHNlcnZlcl9uYW1lX3NpemVfc3RhcnQgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICRzZXJ2ZXJfbmFtZV9zaXplID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDE2KCRkZnNfdGFyZ2V0bGlzdF9ibG9iWyRzZXJ2ZXJfbmFtZV9zaXplX3N0YXJ0Li4kc2VydmVyX25hbWVfc2l6ZV9lbmRdLDApCgogICAgICAgICAgICAgICAgICAgICAgICAkc2VydmVyX25hbWVfc3RhcnQgPSAkc2VydmVyX25hbWVfc2l6ZV9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICRzZXJ2ZXJfbmFtZV9lbmQgPSAkc2VydmVyX25hbWVfc3RhcnQgKyAkc2VydmVyX25hbWVfc2l6ZSAtIDEKICAgICAgICAgICAgICAgICAgICAgICAgJHNlcnZlcl9uYW1lID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRTdHJpbmcoJGRmc190YXJnZXRsaXN0X2Jsb2JbJHNlcnZlcl9uYW1lX3N0YXJ0Li4kc2VydmVyX25hbWVfZW5kXSkKCiAgICAgICAgICAgICAgICAgICAgICAgICRzaGFyZV9uYW1lX3NpemVfc3RhcnQgPSAkc2VydmVyX25hbWVfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICAgICAkc2hhcmVfbmFtZV9zaXplX2VuZCA9ICRzaGFyZV9uYW1lX3NpemVfc3RhcnQgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICRzaGFyZV9uYW1lX3NpemUgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MTYoJGRmc190YXJnZXRsaXN0X2Jsb2JbJHNoYXJlX25hbWVfc2l6ZV9zdGFydC4uJHNoYXJlX25hbWVfc2l6ZV9lbmRdLDApCiAgICAgICAgICAgICAgICAgICAgICAgICRzaGFyZV9uYW1lX3N0YXJ0ID0gJHNoYXJlX25hbWVfc2l6ZV9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICRzaGFyZV9uYW1lX2VuZCA9ICRzaGFyZV9uYW1lX3N0YXJ0ICsgJHNoYXJlX25hbWVfc2l6ZSAtIDEKICAgICAgICAgICAgICAgICAgICAgICAgJHNoYXJlX25hbWUgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVbmljb2RlLkdldFN0cmluZygkZGZzX3RhcmdldGxpc3RfYmxvYlskc2hhcmVfbmFtZV9zdGFydC4uJHNoYXJlX25hbWVfZW5kXSkKCiAgICAgICAgICAgICAgICAgICAgICAgICR0YXJnZXRfbGlzdCArPSAiXFwkc2VydmVyX25hbWVcJHNoYXJlX25hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgICR0X29mZnNldCA9ICRzaGFyZV9uYW1lX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJG9mZnNldCA9ICRibG9iX2RhdGFfZW5kICsgMQogICAgICAgICAgICAkZGZzX3BrdF9wcm9wZXJ0aWVzID0gQHsKICAgICAgICAgICAgICAgICdOYW1lJyA9ICRibG9iX25hbWUKICAgICAgICAgICAgICAgICdQcmVmaXgnID0gJHByZWZpeAogICAgICAgICAgICAgICAgJ1RhcmdldExpc3QnID0gJHRhcmdldF9saXN0CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJG9iamVjdF9saXN0ICs9IE5ldy1PYmplY3QgLVR5cGVOYW1lIFBTT2JqZWN0IC1Qcm9wZXJ0eSAkZGZzX3BrdF9wcm9wZXJ0aWVzCiAgICAgICAgICAgICRwcmVmaXggPSAkbnVsbAogICAgICAgICAgICAkYmxvYl9uYW1lID0gJG51bGwKICAgICAgICAgICAgJHRhcmdldF9saXN0ID0gJG51bGwKICAgICAgICB9CgogICAgICAgICRzZXJ2ZXJzID0gQCgpCiAgICAgICAgJG9iamVjdF9saXN0IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICBpZiAoJF8uVGFyZ2V0TGlzdCkgewogICAgICAgICAgICAgICAgJF8uVGFyZ2V0TGlzdCB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAkc2VydmVycyArPSAkXy5zcGxpdCgiXCIpWzJdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICRzZXJ2ZXJzCiAgICB9CgogICAgZnVuY3Rpb24gR2V0LURGU3NoYXJlVjEgewogICAgICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICAgICAgcGFyYW0oCiAgICAgICAgICAgIFtTdHJpbmddCiAgICAgICAgICAgICREb21haW4sCgogICAgICAgICAgICBbU3RyaW5nXQogICAgICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKCiAgICAgICAgICAgIFtTdHJpbmddCiAgICAgICAgICAgICRBRFNwYXRoLAoKICAgICAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldCiAgICAgICAgICAgIFtJbnRdCiAgICAgICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICAgICAkQ3JlZGVudGlhbAogICAgICAgICkKCiAgICAgICAgJERGU3NlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQURTcGF0aCAkQURTcGF0aCAtUGFnZVNpemUgJFBhZ2VTaXplCgogICAgICAgIGlmKCRERlNzZWFyY2hlcikgewogICAgICAgICAgICAkREZTc2hhcmVzID0gQCgpCiAgICAgICAgICAgICRERlNzZWFyY2hlci5maWx0ZXIgPSAiKCYob2JqZWN0Q2xhc3M9ZlREZnMpKSIKCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkUmVzdWx0cyA9ICRERlNTZWFyY2hlci5GaW5kQWxsKCkKICAgICAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgJFByb3BlcnRpZXMgPSAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgJFJlbW90ZU5hbWVzID0gJFByb3BlcnRpZXMucmVtb3Rlc2VydmVybmFtZQogICAgICAgICAgICAgICAgICAgICRQa3QgPSAkUHJvcGVydGllcy5wa3QKCiAgICAgICAgICAgICAgICAgICAgJERGU3NoYXJlcyArPSAkUmVtb3RlTmFtZXMgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRfLkNvbnRhaW5zKCdcJykgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5IEB7J05hbWUnPSRQcm9wZXJ0aWVzLm5hbWVbMF07J1JlbW90ZVNlcnZlck5hbWUnPSRfLnNwbGl0KCJcIilbMl19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3IgaW4gcGFyc2luZyBERlMgc2hhcmUgOiAkXyIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRSZXN1bHRzLmRpc3Bvc2UoKQogICAgICAgICAgICAgICAgJERGU1NlYXJjaGVyLmRpc3Bvc2UoKQoKICAgICAgICAgICAgICAgIGlmKCRwa3QgLWFuZCAkcGt0WzBdKSB7CiAgICAgICAgICAgICAgICAgICAgUGFyc2UtUGt0ICRwa3RbMF0gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgSWYgYSBmb2xkZXIgZG9lc24ndCBoYXZlIGEgcmVkaXJlY3Rpb24gaXQgd2lsbAogICAgICAgICAgICAgICAgICAgICAgICAjIGhhdmUgYSB0YXJnZXQgbGlrZQogICAgICAgICAgICAgICAgICAgICAgICAjIFxcbnVsbFxUZXN0TmFtZVNwYWNlXGZvbGRlclwuREZTRm9sZGVyTGluayBzbyB3ZQogICAgICAgICAgICAgICAgICAgICAgICAjIGRvIGFjdHVhbGx5IHdhbnQgdG8gbWF0Y2ggb24gIm51bGwiIHJhdGhlciB0aGFuCiAgICAgICAgICAgICAgICAgICAgICAgICMgJG51bGwKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRfIC1uZSAibnVsbCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5ldy1PYmplY3QgLVR5cGVOYW1lIFBTT2JqZWN0IC1Qcm9wZXJ0eSBAeydOYW1lJz0kUHJvcGVydGllcy5uYW1lWzBdOydSZW1vdGVTZXJ2ZXJOYW1lJz0kX30KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJHZXQtREZTc2hhcmVWMSBlcnJvciA6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgICAgICRERlNzaGFyZXMgfCBTb3J0LU9iamVjdCAtUHJvcGVydHkgIlJlbW90ZVNlcnZlck5hbWUiCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIEdldC1ERlNzaGFyZVYyIHsKICAgICAgICBbQ21kbGV0QmluZGluZygpXQogICAgICAgIHBhcmFtKAogICAgICAgICAgICBbU3RyaW5nXQogICAgICAgICAgICAkRG9tYWluLAoKICAgICAgICAgICAgW1N0cmluZ10KICAgICAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgICAgICBbU3RyaW5nXQogICAgICAgICAgICAkQURTcGF0aCwKCiAgICAgICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICAgICAgW0ludF0KICAgICAgICAgICAgJFBhZ2VTaXplID0gMjAwLAoKICAgICAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgICAgICRDcmVkZW50aWFsCiAgICAgICAgKQoKICAgICAgICAkREZTc2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1BRFNwYXRoICRBRFNwYXRoIC1QYWdlU2l6ZSAkUGFnZVNpemUKCiAgICAgICAgaWYoJERGU3NlYXJjaGVyKSB7CiAgICAgICAgICAgICRERlNzaGFyZXMgPSBAKCkKICAgICAgICAgICAgJERGU3NlYXJjaGVyLmZpbHRlciA9ICIoJihvYmplY3RDbGFzcz1tc0RGUy1MaW5rdjIpKSIKICAgICAgICAgICAgJERGU1NlYXJjaGVyLlByb3BlcnRpZXNUb0xvYWQuQWRkUmFuZ2UoKCdtc2Rmcy1saW5rcGF0aHYyJywnbXNERlMtVGFyZ2V0TGlzdHYyJykpCgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJFJlc3VsdHMgPSAkREZTU2VhcmNoZXIuRmluZEFsbCgpCiAgICAgICAgICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRQcm9wZXJ0aWVzID0gJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICR0YXJnZXRfbGlzdCA9ICRQcm9wZXJ0aWVzLidtc2Rmcy10YXJnZXRsaXN0djInWzBdCiAgICAgICAgICAgICAgICAgICAgJHhtbCA9IFt4bWxdW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRTdHJpbmcoJHRhcmdldF9saXN0WzIuLigkdGFyZ2V0X2xpc3QuTGVuZ3RoLTEpXSkKICAgICAgICAgICAgICAgICAgICAkREZTc2hhcmVzICs9ICR4bWwudGFyZ2V0cy5DaGlsZE5vZGVzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRhcmdldCA9ICRfLklubmVyVGV4dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkVGFyZ2V0LkNvbnRhaW5zKCdcJykgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJERGU3Jvb3QgPSAkVGFyZ2V0LnNwbGl0KCJcIilbM10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU2hhcmVOYW1lID0gJFByb3BlcnRpZXMuJ21zZGZzLWxpbmtwYXRodjInWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5IEB7J05hbWUnPSIkREZTcm9vdCRTaGFyZU5hbWUiOydSZW1vdGVTZXJ2ZXJOYW1lJz0kVGFyZ2V0LnNwbGl0KCJcIilbMl19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3IgaW4gcGFyc2luZyB0YXJnZXQgOiAkXyIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRSZXN1bHRzLmRpc3Bvc2UoKQogICAgICAgICAgICAgICAgJERGU1NlYXJjaGVyLmRpc3Bvc2UoKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkdldC1ERlNzaGFyZVYyIGVycm9yIDogJF8iCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJERGU3NoYXJlcyB8IFNvcnQtT2JqZWN0IC1VbmlxdWUgLVByb3BlcnR5ICJSZW1vdGVTZXJ2ZXJOYW1lIgogICAgICAgIH0KICAgIH0KCiAgICAkREZTc2hhcmVzID0gQCgpCgogICAgaWYgKCAoJFZlcnNpb24gLWVxICJhbGwiKSAtb3IgKCRWZXJzaW9uLmVuZHNXaXRoKCIxIikpICkgewogICAgICAgICRERlNzaGFyZXMgKz0gR2V0LURGU3NoYXJlVjEgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1BRFNwYXRoICRBRFNwYXRoIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgIH0KICAgIGlmICggKCRWZXJzaW9uIC1lcSAiYWxsIikgLW9yICgkVmVyc2lvbi5lbmRzV2l0aCgiMiIpKSApIHsKICAgICAgICAkREZTc2hhcmVzICs9IEdldC1ERlNzaGFyZVYyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQURTcGF0aCAkQURTcGF0aCAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICB9CgogICAgJERGU3NoYXJlcyB8IFNvcnQtT2JqZWN0IC1Qcm9wZXJ0eSAoIlJlbW90ZVNlcnZlck5hbWUiLCJOYW1lIikgLVVuaXF1ZQp9CgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIwojIEdQTyByZWxhdGVkIGZ1bmN0aW9ucy4KIwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKCmZpbHRlciBHZXQtR3B0VG1wbCB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgSGVscGVyIHRvIHBhcnNlIGEgR3B0VG1wbC5pbmYgcG9saWN5IGZpbGUgcGF0aCBpbnRvIGEgY3VzdG9tIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIEdwdFRtcGxQYXRoCgogICAgICAgIFRoZSBHcHRUbXBsLmluZiBmaWxlIHBhdGggbmFtZSB0byBwYXJzZS4gCgogICAgLlBBUkFNRVRFUiBVc2VQU0RyaXZlCgogICAgICAgIFN3aXRjaC4gTW91bnQgdGhlIHRhcmdldCBHcHRUbXBsIGZvbGRlciBwYXRoIGFzIGEgdGVtcG9yYXJ5IFBTRHJpdmUuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtR3B0VG1wbCAtR3B0VG1wbFBhdGggIlxcZGV2LnRlc3RsYWIubG9jYWxcc3lzdm9sXGRldi50ZXN0bGFiLmxvY2FsXFBvbGljaWVzXHszMUIyRjM0MC0wMTZELTExRDItOTQ1Ri0wMEMwNEZCOTg0Rjl9XE1BQ0hJTkVcTWljcm9zb2Z0XFdpbmRvd3MgTlRcU2VjRWRpdFxHcHRUbXBsLmluZiIKCiAgICAgICAgUGFyc2UgdGhlIGRlZmF1bHQgZG9tYWluIHBvbGljeSAuaW5mIGZvciBkZXYudGVzdGxhYi5sb2NhbAojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcHRUbXBsUGF0aCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVXNlUFNEcml2ZQogICAgKQoKICAgIGlmKCRVc2VQU0RyaXZlKSB7CiAgICAgICAgIyBpZiB3ZSdyZSBQU0RyaXZlcywgY3JlYXRlIGEgdGVtcG9yYXJ5IG1vdW50IHBvaW50CiAgICAgICAgJFBhcnRzID0gJEdwdFRtcGxQYXRoLnNwbGl0KCdcJykKICAgICAgICAkRm9sZGVyUGF0aCA9ICRQYXJ0c1swLi4oJFBhcnRzLmxlbmd0aC0yKV0gLWpvaW4gJ1wnCiAgICAgICAgJEZpbGVQYXRoID0gJFBhcnRzWy0xXQogICAgICAgICRSYW5kRHJpdmUgPSAoImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6Ii5Ub0NoYXJBcnJheSgpIHwgR2V0LVJhbmRvbSAtQ291bnQgNykgLWpvaW4gJycKCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiTW91bnRpbmcgcGF0aCAkR3B0VG1wbFBhdGggdXNpbmcgYSB0ZW1wIFBTRHJpdmUgYXQgJFJhbmREcml2ZSIKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJE51bGwgPSBOZXctUFNEcml2ZSAtTmFtZSAkUmFuZERyaXZlIC1QU1Byb3ZpZGVyIEZpbGVTeXN0ZW0gLVJvb3QgJEZvbGRlclBhdGggIC1FcnJvckFjdGlvbiBTdG9wCiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3IgbW91bnRpbmcgcGF0aCAkR3B0VG1wbFBhdGggOiAkXyIKICAgICAgICAgICAgcmV0dXJuICROdWxsCiAgICAgICAgfQoKICAgICAgICAjIHNvIHdlIGNhbiBjZC9kaXIgdGhlIG5ldyBkcml2ZQogICAgICAgICRUYXJnZXRHcHRUbXBsUGF0aCA9ICRSYW5kRHJpdmUgKyAiOlwiICsgJEZpbGVQYXRoCiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkVGFyZ2V0R3B0VG1wbFBhdGggPSAkR3B0VG1wbFBhdGgKICAgIH0KCiAgICBXcml0ZS1WZXJib3NlICJHcHRUbXBsUGF0aDogJEdwdFRtcGxQYXRoIgoKICAgIHRyeSB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiUGFyc2luZyAkVGFyZ2V0R3B0VG1wbFBhdGgiCiAgICAgICAgJFRhcmdldEdwdFRtcGxQYXRoIHwgR2V0LUluaUNvbnRlbnQgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgIH0KICAgIGNhdGNoIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvciBwYXJzaW5nICRUYXJnZXRHcHRUbXBsUGF0aCA6ICRfIgogICAgfQoKICAgIGlmKCRVc2VQU0RyaXZlIC1hbmQgJFJhbmREcml2ZSkgewogICAgICAgIFdyaXRlLVZlcmJvc2UgIlJlbW92aW5nIHRlbXAgUFNEcml2ZSAkUmFuZERyaXZlIgogICAgICAgIEdldC1QU0RyaXZlIC1OYW1lICRSYW5kRHJpdmUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgfCBSZW1vdmUtUFNEcml2ZSAtRm9yY2UKICAgIH0KfQoKCmZpbHRlciBHZXQtR3JvdXBzWE1MIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBIZWxwZXIgdG8gcGFyc2UgYSBncm91cHMueG1sIGZpbGUgcGF0aCBpbnRvIGEgY3VzdG9tIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIEdyb3Vwc1hNTHBhdGgKCiAgICAgICAgVGhlIGdyb3Vwcy54bWwgZmlsZSBwYXRoIG5hbWUgdG8gcGFyc2UuIAoKICAgIC5QQVJBTUVURVIgVXNlUFNEcml2ZQoKICAgICAgICBTd2l0Y2guIE1vdW50IHRoZSB0YXJnZXQgZ3JvdXBzLnhtbCBmb2xkZXIgcGF0aCBhcyBhIHRlbXBvcmFyeSBQU0RyaXZlLgojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcm91cHNYTUxQYXRoLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRVc2VQU0RyaXZlCiAgICApCgogICAgaWYoJFVzZVBTRHJpdmUpIHsKICAgICAgICAjIGlmIHdlJ3JlIFBTRHJpdmVzLCBjcmVhdGUgYSB0ZW1wb3JhcnkgbW91bnQgcG9pbnQKICAgICAgICAkUGFydHMgPSAkR3JvdXBzWE1MUGF0aC5zcGxpdCgnXCcpCiAgICAgICAgJEZvbGRlclBhdGggPSAkUGFydHNbMC4uKCRQYXJ0cy5sZW5ndGgtMildIC1qb2luICdcJwogICAgICAgICRGaWxlUGF0aCA9ICRQYXJ0c1stMV0KICAgICAgICAkUmFuZERyaXZlID0gKCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eiIuVG9DaGFyQXJyYXkoKSB8IEdldC1SYW5kb20gLUNvdW50IDcpIC1qb2luICcnCgogICAgICAgIFdyaXRlLVZlcmJvc2UgIk1vdW50aW5nIHBhdGggJEdyb3Vwc1hNTFBhdGggdXNpbmcgYSB0ZW1wIFBTRHJpdmUgYXQgJFJhbmREcml2ZSIKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJE51bGwgPSBOZXctUFNEcml2ZSAtTmFtZSAkUmFuZERyaXZlIC1QU1Byb3ZpZGVyIEZpbGVTeXN0ZW0gLVJvb3QgJEZvbGRlclBhdGggIC1FcnJvckFjdGlvbiBTdG9wCiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3IgbW91bnRpbmcgcGF0aCAkR3JvdXBzWE1MUGF0aCA6ICRfIgogICAgICAgICAgICByZXR1cm4gJE51bGwKICAgICAgICB9CgogICAgICAgICMgc28gd2UgY2FuIGNkL2RpciB0aGUgbmV3IGRyaXZlCiAgICAgICAgJFRhcmdldEdyb3Vwc1hNTFBhdGggPSAkUmFuZERyaXZlICsgIjpcIiArICRGaWxlUGF0aAogICAgfQogICAgZWxzZSB7CiAgICAgICAgJFRhcmdldEdyb3Vwc1hNTFBhdGggPSAkR3JvdXBzWE1MUGF0aAogICAgfQoKICAgIHRyeSB7CiAgICAgICAgW1hNTF0kR3JvdXBzWE1MY29udGVudCA9IEdldC1Db250ZW50ICRUYXJnZXRHcm91cHNYTUxQYXRoIC1FcnJvckFjdGlvbiBTdG9wCgogICAgICAgICMgcHJvY2VzcyBhbGwgZ3JvdXAgcHJvcGVydGllcyBpbiB0aGUgWE1MCiAgICAgICAgJEdyb3Vwc1hNTGNvbnRlbnQgfCBTZWxlY3QtWG1sICIvR3JvdXBzL0dyb3VwIiB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IG5vZGUgfCBGb3JFYWNoLU9iamVjdCB7CgogICAgICAgICAgICAkR3JvdXBuYW1lID0gJF8uUHJvcGVydGllcy5ncm91cE5hbWUKCiAgICAgICAgICAgICMgZXh0cmFjdCB0aGUgbG9jYWxncm91cCBzaWQgZm9yIG1lbWJlcm9mCiAgICAgICAgICAgICRHcm91cFNJRCA9ICRfLlByb3BlcnRpZXMuZ3JvdXBTaWQKICAgICAgICAgICAgaWYoLW5vdCAkR3JvdXBTSUQpIHsKICAgICAgICAgICAgICAgIGlmKCRHcm91cG5hbWUgLW1hdGNoICdBZG1pbmlzdHJhdG9ycycpIHsKICAgICAgICAgICAgICAgICAgICAkR3JvdXBTSUQgPSAnUy0xLTUtMzItNTQ0JwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZWlmKCRHcm91cG5hbWUgLW1hdGNoICdSZW1vdGUgRGVza3RvcCcpIHsKICAgICAgICAgICAgICAgICAgICAkR3JvdXBTSUQgPSAnUy0xLTUtMzItNTU1JwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZWlmKCRHcm91cG5hbWUgLW1hdGNoICdHdWVzdHMnKSB7CiAgICAgICAgICAgICAgICAgICAgJEdyb3VwU0lEID0gJ1MtMS01LTMyLTU0NicKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRHcm91cFNJRCA9IENvbnZlcnQtTmFtZVRvU2lkIC1PYmplY3ROYW1lICRHcm91cG5hbWUgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBTSUQKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBleHRyYWN0IG91dCBtZW1iZXJzIGFkZGVkIHRvIHRoaXMgZ3JvdXAKICAgICAgICAgICAgJE1lbWJlcnMgPSAkXy5Qcm9wZXJ0aWVzLm1lbWJlcnMgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBNZW1iZXIgfCBXaGVyZS1PYmplY3QgeyAkXy5hY3Rpb24gLW1hdGNoICdBREQnIH0gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICBpZigkXy5zaWQpIHsgJF8uc2lkIH0KICAgICAgICAgICAgICAgIGVsc2UgeyAkXy5uYW1lIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCRNZW1iZXJzKSB7CgogICAgICAgICAgICAgICAgIyBleHRyYWN0IG91dCBhbnkvYWxsIGZpbHRlcnMuLi5JIGhhdGUgeW91IEdQUAogICAgICAgICAgICAgICAgaWYoJF8uZmlsdGVycykgewogICAgICAgICAgICAgICAgICAgICRGaWx0ZXJzID0gJF8uZmlsdGVycy5HZXRFbnVtZXJhdG9yKCkgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgIE5ldy1PYmplY3QgLVR5cGVOYW1lIFBTT2JqZWN0IC1Qcm9wZXJ0eSBAeydUeXBlJyA9ICRfLkxvY2FsTmFtZTsnVmFsdWUnID0gJF8ubmFtZX0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkRmlsdGVycyA9ICROdWxsCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYoJE1lbWJlcnMgLWlzbm90IFtTeXN0ZW0uQXJyYXldKSB7ICRNZW1iZXJzID0gQCgkTWVtYmVycykgfQoKICAgICAgICAgICAgICAgICRHUE9Hcm91cCA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICRHUE9Hcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9QYXRoJyAkVGFyZ2V0R3JvdXBzWE1MUGF0aAogICAgICAgICAgICAgICAgJEdQT0dyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0ZpbHRlcnMnICRGaWx0ZXJzCiAgICAgICAgICAgICAgICAkR1BPR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBOYW1lJyAkR3JvdXBOYW1lCiAgICAgICAgICAgICAgICAkR1BPR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBTSUQnICRHcm91cFNJRAogICAgICAgICAgICAgICAgJEdQT0dyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwTWVtYmVyT2YnICROdWxsCiAgICAgICAgICAgICAgICAkR1BPR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBNZW1iZXJzJyAkTWVtYmVycwogICAgICAgICAgICAgICAgJEdQT0dyb3VwCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBjYXRjaCB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3IgcGFyc2luZyAkVGFyZ2V0R3JvdXBzWE1MUGF0aCA6ICRfIgogICAgfQoKICAgIGlmKCRVc2VQU0RyaXZlIC1hbmQgJFJhbmREcml2ZSkgewogICAgICAgIFdyaXRlLVZlcmJvc2UgIlJlbW92aW5nIHRlbXAgUFNEcml2ZSAkUmFuZERyaXZlIgogICAgICAgIEdldC1QU0RyaXZlIC1OYW1lICRSYW5kRHJpdmUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgfCBSZW1vdmUtUFNEcml2ZSAtRm9yY2UKICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1OZXRHUE8gewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEdldHMgYSBsaXN0IG9mIGFsbCBjdXJyZW50IEdQT3MgaW4gYSBkb21haW4uCgogICAgLlBBUkFNRVRFUiBHUE9uYW1lCgogICAgICAgIFRoZSBHUE8gbmFtZSB0byBxdWVyeSBmb3IsIHdpbGRjYXJkcyBhY2NlcHRlZC4gICAKCiAgICAuUEFSQU1FVEVSIERpc3BsYXlOYW1lCgogICAgICAgIFRoZSBHUE8gZGlzcGxheSBuYW1lIHRvIHF1ZXJ5IGZvciwgd2lsZGNhcmRzIGFjY2VwdGVkLiAgIAoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIFJldHVybiBhbGwgR1BPIG9iamVjdHMgYXBwbGllZCB0byBhIGdpdmVuIGNvbXB1dGVyIChGUUROKS4KCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBUaGUgZG9tYWluIHRvIHF1ZXJ5IGZvciBHUE9zLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaAogICAgICAgIGUuZy4gIkxEQVA6Ly9jbj17OEZGNTlEMjgtMTVENy00MjJBLUJDQjctMkFFNDU3MjQxMjVBfSxjbj1wb2xpY2llcyxjbj1zeXN0ZW0sREM9ZGV2LERDPXRlc3RsYWIsREM9bG9jYWwiCgogICAgLlBBUkFNRVRFUiBQYWdlU2l6ZQoKICAgICAgICBUaGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRHUE8gLURvbWFpbiB0ZXN0bGFiLmxvY2FsCiAgICAgICAgCiAgICAgICAgUmV0dXJucyB0aGUgR1BPcyBpbiB0aGUgJ3Rlc3RsYWIubG9jYWwnIGRvbWFpbi4gCiM+CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEdQT25hbWUgPSAnKicsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERpc3BsYXlOYW1lLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlck5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKICAgICAgICAKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwYXRoLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCgogICAgYmVnaW4gewogICAgICAgICRHUE9TZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUFEU3BhdGggJEFEU3BhdGggLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgfQoKICAgIHByb2Nlc3MgewogICAgICAgIGlmICgkR1BPU2VhcmNoZXIpIHsKCiAgICAgICAgICAgIGlmKCRDb21wdXRlck5hbWUpIHsKICAgICAgICAgICAgICAgICRHUE9OYW1lcyA9IEAoKQogICAgICAgICAgICAgICAgJENvbXB1dGVycyA9IEdldC1OZXRDb21wdXRlciAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1GdWxsRGF0YSAtUGFnZVNpemUgJFBhZ2VTaXplCgogICAgICAgICAgICAgICAgaWYoISRDb21wdXRlcnMpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyAiQ29tcHV0ZXIgJENvbXB1dGVyTmFtZSBpbiBkb21haW4gJyREb21haW4nIG5vdCBmb3VuZCEgVHJ5IGEgZnVsbHkgcXVhbGlmaWVkIGhvc3QgbmFtZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBnZXQgdGhlIGdpdmVuIGNvbXB1dGVyJ3MgT1UKICAgICAgICAgICAgICAgICRDb21wdXRlck9VcyA9IEAoKQogICAgICAgICAgICAgICAgRm9yRWFjaCgkQ29tcHV0ZXIgaW4gJENvbXB1dGVycykgewogICAgICAgICAgICAgICAgICAgICMgZXh0cmFjdCBhbGwgT1VzIGEgY29tcHV0ZXIgaXMgYSBwYXJ0IG9mCiAgICAgICAgICAgICAgICAgICAgJEROID0gJENvbXB1dGVyLmRpc3Rpbmd1aXNoZWRuYW1lCgogICAgICAgICAgICAgICAgICAgICRDb21wdXRlck9VcyArPSAkRE4uc3BsaXQoIiwiKSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJF8uc3RhcnRzd2l0aCgiT1U9IikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRETi5zdWJzdHJpbmcoJEROLmluZGV4b2YoJF8pKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJDb21wdXRlck9VczogJENvbXB1dGVyT1VzIgoKICAgICAgICAgICAgICAgICMgZmluZCBhbGwgdGhlIEdQT3MgbGlua2VkIHRvIHRoZSBjb21wdXRlcidzIE9VCiAgICAgICAgICAgICAgICBGb3JFYWNoKCRDb21wdXRlck9VIGluICRDb21wdXRlck9VcykgewogICAgICAgICAgICAgICAgICAgICRHUE9OYW1lcyArPSBHZXQtTmV0T1UgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1BRFNwYXRoICRDb21wdXRlck9VIC1GdWxsRGF0YSAtUGFnZVNpemUgJFBhZ2VTaXplIHwgRm9yRWFjaC1PYmplY3QgeyAKICAgICAgICAgICAgICAgICAgICAgICAgIyBnZXQgYW55IEdQTyBsaW5rcwogICAgICAgICAgICAgICAgICAgICAgICB3cml0ZS12ZXJib3NlICJibGFoOiAkKCRfLm5hbWUpIgogICAgICAgICAgICAgICAgICAgICAgICAkXy5ncGxpbmsuc3BsaXQoIl1bIikgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJF8uc3RhcnRzd2l0aCgiTERBUCIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8uc3BsaXQoIjsiKVswXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJHUE9OYW1lczogJEdQT05hbWVzIgoKICAgICAgICAgICAgICAgICMgZmluZCBhbnkgR1BPcyBsaW5rZWQgdG8gdGhlIHNpdGUgZm9yIHRoZSBnaXZlbiBjb21wdXRlcgogICAgICAgICAgICAgICAgJENvbXB1dGVyU2l0ZSA9IChHZXQtU2l0ZU5hbWUgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lKS5TaXRlTmFtZQogICAgICAgICAgICAgICAgaWYoJENvbXB1dGVyU2l0ZSAtYW5kICgkQ29tcHV0ZXJTaXRlIC1ub3RsaWtlICdFcnJvcionKSkgewogICAgICAgICAgICAgICAgICAgICRHUE9OYW1lcyArPSBHZXQtTmV0U2l0ZSAtU2l0ZU5hbWUgJENvbXB1dGVyU2l0ZSAtRnVsbERhdGEgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRfLmdwbGluaykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8uZ3BsaW5rLnNwbGl0KCJdWyIpIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkXy5zdGFydHN3aXRoKCJMREFQIikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8uc3BsaXQoIjsiKVswXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkR1BPTmFtZXMgfCBXaGVyZS1PYmplY3R7JF8gLWFuZCAoJF8gLW5lICcnKX0gfCBGb3JFYWNoLU9iamVjdCB7CgogICAgICAgICAgICAgICAgICAgICMgdXNlIHRoZSBncGxpbmsgYXMgYW4gQURTIHBhdGggdG8gZW51bWVyYXRlIGFsbCBHUE9zIGZvciB0aGUgY29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAkR1BPU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1BRFNwYXRoICRfIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgICAgICAgICAgICAgICAgICAkR1BPU2VhcmNoZXIuZmlsdGVyPSIoJihvYmplY3RDYXRlZ29yeT1ncm91cFBvbGljeUNvbnRhaW5lcikobmFtZT0kR1BPbmFtZSkpIgoKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAkUmVzdWx0cyA9ICRHUE9TZWFyY2hlci5GaW5kQWxsKCkKICAgICAgICAgICAgICAgICAgICAgICAgJFJlc3VsdHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRPdXQgPSBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE91dAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICRSZXN1bHRzLmRpc3Bvc2UoKQogICAgICAgICAgICAgICAgICAgICAgICAkR1BPU2VhcmNoZXIuZGlzcG9zZSgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAkXwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBpZigkRGlzcGxheU5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAkR1BPU2VhcmNoZXIuZmlsdGVyPSIoJihvYmplY3RDYXRlZ29yeT1ncm91cFBvbGljeUNvbnRhaW5lcikoZGlzcGxheW5hbWU9JERpc3BsYXlOYW1lKSkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkR1BPU2VhcmNoZXIuZmlsdGVyPSIoJihvYmplY3RDYXRlZ29yeT1ncm91cFBvbGljeUNvbnRhaW5lcikobmFtZT0kR1BPbmFtZSkpIgogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgJFJlc3VsdHMgPSAkR1BPU2VhcmNoZXIuRmluZEFsbCgpCiAgICAgICAgICAgICAgICAgICAgJFJlc3VsdHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJEFEU1BhdGggLWFuZCAoJEFEU3BhdGggLU1hdGNoICdeR0M6Ly8nKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFByb3BlcnRpZXMgPSBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHUE9ETiA9ICRQcm9wZXJ0aWVzLmRpc3Rpbmd1aXNoZWRuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0RvbWFpbiA9ICRHUE9ETi5zdWJTdHJpbmcoJEdQT0ROLkluZGV4T2YoIkRDPSIpKSAtcmVwbGFjZSAnREM9JywnJyAtcmVwbGFjZSAnLCcsJy4nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGdwY2ZpbGVzeXNwYXRoID0gIlxcJEdQT0RvbWFpblxTeXNWb2xcJEdQT0RvbWFpblxQb2xpY2llc1wkKCRQcm9wZXJ0aWVzLmNuKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUHJvcGVydGllcyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdncGNmaWxlc3lzcGF0aCcgJGdwY2ZpbGVzeXNwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFByb3BlcnRpZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBjb252ZXJ0L3Byb2Nlc3MgdGhlIExEQVAgZmllbGRzIGZvciBlYWNoIHJlc3VsdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRSZXN1bHRzLmRpc3Bvc2UoKQogICAgICAgICAgICAgICAgICAgICRHUE9TZWFyY2hlci5kaXNwb3NlKCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICRfCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBOZXctR1BPSW1tZWRpYXRlVGFzayB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgQnVpbGRzIGFuICdJbW1lZGlhdGUnIHNjaHRhc2sgdG8gcHVzaCBvdXQgdGhyb3VnaCBhIHNwZWNpZmllZCBHUE8uCgogICAgLlBBUkFNRVRFUiBUYXNrTmFtZQoKICAgICAgICBOYW1lIGZvciB0aGUgc2NodGFzayB0byByZWNyZWF0ZS4gUmVxdWlyZWQuCgogICAgLlBBUkFNRVRFUiBDb21tYW5kCgogICAgICAgIFRoZSBjb21tYW5kIHRvIGV4ZWN1dGUgd2l0aCB0aGUgdGFzaywgZGVmYXVsdHMgdG8gJ3Bvd2Vyc2hlbGwnCgogICAgLlBBUkFNRVRFUiBDb21tYW5kQXJndW1lbnRzCgogICAgICAgIFRoZSBhcmd1bWVudHMgdG8gc3VwcGx5IHRvIHRoZSAtQ29tbWFuZCBiZWluZyBsYXVuY2hlZC4KCiAgICAuUEFSQU1FVEVSIFRhc2tEZXNjcmlwdGlvbgoKICAgICAgICBBbiBvcHRpb25hbCBkZXNjcmlwdGlvbiBmb3IgdGhlIHRhc2suCgogICAgLlBBUkFNRVRFUiBUYXNrQXV0aG9yCiAgICAgICAgCiAgICAgICAgVGhlIGRpc3BsYXllZCBhdXRob3Igb2YgdGhlIHRhc2ssIGRlZmF1bHRzIHRvICcnTlQgQVVUSE9SSVRZXFN5c3RlbScKCiAgICAuUEFSQU1FVEVSIFRhc2tNb2RpZmllZERhdGUKICAgIAogICAgICAgIFRoZSBkaXNwbGF5ZWQgbW9kaWZpZWQgZGF0ZSBmb3IgdGhlIHRhc2ssIGRlZmF1bHRzIHRvIDMwIGRheXMgYWdvLgoKICAgIC5QQVJBTUVURVIgR1BPbmFtZQoKICAgICAgICBUaGUgR1BPIG5hbWUgdG8gYnVpbGQgdGhlIHRhc2sgZm9yLgoKICAgIC5QQVJBTUVURVIgR1BPRGlzcGxheU5hbWUKCiAgICAgICAgVGhlIEdQTyBkaXNwbGF5IG5hbWUgdG8gYnVpbGQgdGhlIHRhc2sgZm9yLgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gcXVlcnkgZm9yIHRoZSBHUE9zLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaAogICAgICAgIGUuZy4gIkxEQVA6Ly9jbj17OEZGNTlEMjgtMTVENy00MjJBLUJDQjctMkFFNDU3MjQxMjVBfSxjbj1wb2xpY2llcyxjbj1zeXN0ZW0sREM9ZGV2LERDPXRlc3RsYWIsREM9bG9jYWwiCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTPiBOZXctR1BPSW1tZWRpYXRlVGFzayAtVGFza05hbWUgRGVidWdnaW5nIC1HUE9EaXNwbGF5TmFtZSBTZWN1cmVQb2xpY3kgLUNvbW1hbmRBcmd1bWVudHMgJy1jICIxMjMgfCBPdXQtRmlsZSBDOlxUZW1wXGRlYnVnLnR4dCInIC1Gb3JjZQoKICAgICAgICBDcmVhdGUgYW4gaW1tZWRpYXRlIHNjaHRhc2sgdGhhdCBleGVjdXRlcyB0aGUgc3BlY2lmaWVkIFBvd2VyU2hlbGwgYXJndW1lbnRzIGFuZAogICAgICAgIHB1c2ggaXQgb3V0IHRvIHRoZSAnU2VjdXJlUG9saWN5JyBHUE8sIHNraXBwaW5nIHRoZSBjb25maXJtYXRpb24gcHJvbXB0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTPiBOZXctR1BPSW1tZWRpYXRlVGFzayAtR1BPRGlzcGxheU5hbWUgU2VjdXJlUG9saWN5IC1SZW1vdmUgLUZvcmNlCgogICAgICAgIFJlbW92ZSBhbGwgc2NodGFza3MgZnJvbSB0aGUgJ1NlY3VyZVBvbGljeScgR1BPLCBza2lwcGluZyB0aGUgY29uZmlybWF0aW9uIHByb21wdC4KIz4KICAgIFtDbWRsZXRCaW5kaW5nKERlZmF1bHRQYXJhbWV0ZXJTZXROYW1lID0gJ0NyZWF0ZScpXQogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdDcmVhdGUnLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgICRUYXNrTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0NyZWF0ZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAkQ29tbWFuZCA9ICdwb3dlcnNoZWxsJywKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0NyZWF0ZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAkQ29tbWFuZEFyZ3VtZW50cywKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0NyZWF0ZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAkVGFza0Rlc2NyaXB0aW9uID0gJycsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdDcmVhdGUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJFRhc2tBdXRob3IgPSAnTlQgQVVUSE9SSVRZXFN5c3RlbScsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdDcmVhdGUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJFRhc2tNb2RpZmllZERhdGUgPSAoR2V0LURhdGUgKEdldC1EYXRlKS5BZGREYXlzKC0zMCkgLUZvcm1hdCB1KS50cmltKCJaIiksCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdDcmVhdGUnKV0KICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnUmVtb3ZlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkR1BPbmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0NyZWF0ZScpXQogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdSZW1vdmUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRHUE9EaXNwbGF5TmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0NyZWF0ZScpXQogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdSZW1vdmUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdDcmVhdGUnKV0KICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnUmVtb3ZlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKICAgICAgICAKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnQ3JlYXRlJyldCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ1JlbW92ZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdDcmVhdGUnKV0KICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnUmVtb3ZlJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRm9yY2UsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdSZW1vdmUnKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZW1vdmUsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdDcmVhdGUnKV0KICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnUmVtb3ZlJyldICAgICAgICAKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgICMgYnVpbGQgdGhlIFhNTCBzcGVjIGZvciBvdXIgJ2ltbWVkaWF0ZScgc2NoZWR1bGVkIHRhc2sKICAgICRUYXNrWE1MID0gJzw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9InV0Zi04Ij8+PFNjaGVkdWxlZFRhc2tzIGNsc2lkPSJ7Q0M2M0YyMDAtNzMwOS00YmEwLUIxNTQtQTcxQ0QxMThEQkNDfSI+PEltbWVkaWF0ZVRhc2tWMiBjbHNpZD0iezk3NTZCNTgxLTc2RUMtNDE2OS05QUZDLTBDQThENDNBREI1Rn0iIG5hbWU9IicrJFRhc2tOYW1lKyciIGltYWdlPSIwIiBjaGFuZ2VkPSInKyRUYXNrTW9kaWZpZWREYXRlKyciIHVpZD0ieycrJChbZ3VpZF06Ok5ld0d1aWQoKSkrJ30iIHVzZXJDb250ZXh0PSIwIiByZW1vdmVQb2xpY3k9IjAiPjxQcm9wZXJ0aWVzIGFjdGlvbj0iQyIgbmFtZT0iJyskVGFza05hbWUrJyIgcnVuQXM9Ik5UIEFVVEhPUklUWVxTeXN0ZW0iIGxvZ29uVHlwZT0iUzRVIj48VGFzayB2ZXJzaW9uPSIxLjMiPjxSZWdpc3RyYXRpb25JbmZvPjxBdXRob3I+JyskVGFza0F1dGhvcisnPC9BdXRob3I+PERlc2NyaXB0aW9uPicrJFRhc2tEZXNjcmlwdGlvbisnPC9EZXNjcmlwdGlvbj48L1JlZ2lzdHJhdGlvbkluZm8+PFByaW5jaXBhbHM+PFByaW5jaXBhbCBpZD0iQXV0aG9yIj48VXNlcklkPk5UIEFVVEhPUklUWVxTeXN0ZW08L1VzZXJJZD48UnVuTGV2ZWw+SGlnaGVzdEF2YWlsYWJsZTwvUnVuTGV2ZWw+PExvZ29uVHlwZT5TNFU8L0xvZ29uVHlwZT48L1ByaW5jaXBhbD48L1ByaW5jaXBhbHM+PFNldHRpbmdzPjxJZGxlU2V0dGluZ3M+PER1cmF0aW9uPlBUMTBNPC9EdXJhdGlvbj48V2FpdFRpbWVvdXQ+UFQxSDwvV2FpdFRpbWVvdXQ+PFN0b3BPbklkbGVFbmQ+dHJ1ZTwvU3RvcE9uSWRsZUVuZD48UmVzdGFydE9uSWRsZT5mYWxzZTwvUmVzdGFydE9uSWRsZT48L0lkbGVTZXR0aW5ncz48TXVsdGlwbGVJbnN0YW5jZXNQb2xpY3k+SWdub3JlTmV3PC9NdWx0aXBsZUluc3RhbmNlc1BvbGljeT48RGlzYWxsb3dTdGFydElmT25CYXR0ZXJpZXM+ZmFsc2U8L0Rpc2FsbG93U3RhcnRJZk9uQmF0dGVyaWVzPjxTdG9wSWZHb2luZ09uQmF0dGVyaWVzPnRydWU8L1N0b3BJZkdvaW5nT25CYXR0ZXJpZXM+PEFsbG93SGFyZFRlcm1pbmF0ZT5mYWxzZTwvQWxsb3dIYXJkVGVybWluYXRlPjxTdGFydFdoZW5BdmFpbGFibGU+dHJ1ZTwvU3RhcnRXaGVuQXZhaWxhYmxlPjxBbGxvd1N0YXJ0T25EZW1hbmQ+ZmFsc2U8L0FsbG93U3RhcnRPbkRlbWFuZD48RW5hYmxlZD50cnVlPC9FbmFibGVkPjxIaWRkZW4+dHJ1ZTwvSGlkZGVuPjxFeGVjdXRpb25UaW1lTGltaXQ+UFQwUzwvRXhlY3V0aW9uVGltZUxpbWl0PjxQcmlvcml0eT43PC9Qcmlvcml0eT48RGVsZXRlRXhwaXJlZFRhc2tBZnRlcj5QVDBTPC9EZWxldGVFeHBpcmVkVGFza0FmdGVyPjxSZXN0YXJ0T25GYWlsdXJlPjxJbnRlcnZhbD5QVDE1TTwvSW50ZXJ2YWw+PENvdW50PjM8L0NvdW50PjwvUmVzdGFydE9uRmFpbHVyZT48L1NldHRpbmdzPjxBY3Rpb25zIENvbnRleHQ9IkF1dGhvciI+PEV4ZWM+PENvbW1hbmQ+JyskQ29tbWFuZCsnPC9Db21tYW5kPjxBcmd1bWVudHM+JyskQ29tbWFuZEFyZ3VtZW50cysnPC9Bcmd1bWVudHM+PC9FeGVjPjwvQWN0aW9ucz48VHJpZ2dlcnM+PFRpbWVUcmlnZ2VyPjxTdGFydEJvdW5kYXJ5PiVMb2NhbFRpbWVYbWxFeCU8L1N0YXJ0Qm91bmRhcnk+PEVuZEJvdW5kYXJ5PiVMb2NhbFRpbWVYbWxFeCU8L0VuZEJvdW5kYXJ5PjxFbmFibGVkPnRydWU8L0VuYWJsZWQ+PC9UaW1lVHJpZ2dlcj48L1RyaWdnZXJzPjwvVGFzaz48L1Byb3BlcnRpZXM+PC9JbW1lZGlhdGVUYXNrVjI+PC9TY2hlZHVsZWRUYXNrcz4nCgogICAgaWYgKCEkUFNCb3VuZFBhcmFtZXRlcnNbJ0dQT25hbWUnXSAtYW5kICEkUFNCb3VuZFBhcmFtZXRlcnNbJ0dQT0Rpc3BsYXlOYW1lJ10pIHsKICAgICAgICBXcml0ZS1XYXJuaW5nICdFaXRoZXIgLUdQT05hbWUgb3IgLUdQT0Rpc3BsYXlOYW1lIG11c3QgYmUgc3BlY2lmaWVkJwogICAgICAgIHJldHVybgogICAgfQoKICAgICMgZXVubWVyYXRlIHRoZSBzcGVjaWZpZWQgR1BPKHMpCiAgICAkR1BPcyA9IEdldC1OZXRHUE8gLUdQT25hbWUgJEdQT25hbWUgLURpc3BsYXlOYW1lICRHUE9EaXNwbGF5TmFtZSAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUFEU3BhdGggJEFEU3BhdGggLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgCiAgICAKICAgIGlmKCEkR1BPcykgewogICAgICAgIFdyaXRlLVdhcm5pbmcgJ05vIEdQTyBmb3VuZC4nCiAgICAgICAgcmV0dXJuCiAgICB9CgogICAgJEdQT3MgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgJFByb2Nlc3NlZEdQT05hbWUgPSAkXy5OYW1lCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiVHJ5aW5nIHRvIHdlYXBvbml6ZSBHUE86ICRQcm9jZXNzZWRHUE9OYW1lIgoKICAgICAgICAgICAgIyBtYXAgYSBuZXR3b3JrIGRyaXZlIGFzIE5ldy1QU0RyaXZlL05ldy1JdGVtL2V0Yy4gZG9uJ3QgYWNjZXB0IC1DcmVkZW50aWFsIHByb3Blcmx5IDooCiAgICAgICAgICAgIGlmKCRDcmVkZW50aWFsKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJNYXBwaW5nICckKCRfLmdwY2ZpbGVzeXNwYXRoKScgdG8gbmV0d29yayBkcml2ZSBOOlwiCiAgICAgICAgICAgICAgICAkUGF0aCA9ICRfLmdwY2ZpbGVzeXNwYXRoLlRyaW1FbmQoJ1wnKQogICAgICAgICAgICAgICAgJE5ldCA9IE5ldy1PYmplY3QgLUNvbU9iamVjdCBXU2NyaXB0Lk5ldHdvcmsKICAgICAgICAgICAgICAgICROZXQuTWFwTmV0d29ya0RyaXZlKCJOOiIsICRQYXRoLCAkRmFsc2UsICRDcmVkZW50aWFsLlVzZXJOYW1lLCAkQ3JlZGVudGlhbC5HZXROZXR3b3JrQ3JlZGVudGlhbCgpLlBhc3N3b3JkKQogICAgICAgICAgICAgICAgJFRhc2tQYXRoID0gIk46XE1hY2hpbmVcUHJlZmVyZW5jZXNcU2NoZWR1bGVkVGFza3NcIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJFRhc2tQYXRoID0gJF8uZ3BjZmlsZXN5c3BhdGggKyAiXE1hY2hpbmVcUHJlZmVyZW5jZXNcU2NoZWR1bGVkVGFza3NcIgogICAgICAgICAgICB9CgogICAgICAgICAgICBpZigkUmVtb3ZlKSB7CiAgICAgICAgICAgICAgICBpZighKFRlc3QtUGF0aCAiJFRhc2tQYXRoXFNjaGVkdWxlZFRhc2tzLnhtbCIpKSB7CiAgICAgICAgICAgICAgICAgICAgVGhyb3cgIlNjaGVkdWxlZCB0YXNrIGRvZXNuJ3QgZXhpc3QgYXQgJFRhc2tQYXRoXFNjaGVkdWxlZFRhc2tzLnhtbCIKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoISRGb3JjZSAtYW5kICEkcHNDbWRsZXQuU2hvdWxkQ29udGludWUoJ0RvIHlvdSB3YW50IHRvIGNvbnRpbnVlPycsIlJlbW92aW5nIHNjaHRhc2sgYXQgJFRhc2tQYXRoXFNjaGVkdWxlZFRhc2tzLnhtbCIpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgUmVtb3ZlLUl0ZW0gLVBhdGggIiRUYXNrUGF0aFxTY2hlZHVsZWRUYXNrcy54bWwiIC1Gb3JjZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgaWYgKCEkRm9yY2UgLWFuZCAhJHBzQ21kbGV0LlNob3VsZENvbnRpbnVlKCdEbyB5b3Ugd2FudCB0byBjb250aW51ZT8nLCJDcmVhdGluZyBzY2h0YXNrIGF0ICRUYXNrUGF0aFxTY2hlZHVsZWRUYXNrcy54bWwiKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIGNyZWF0ZSB0aGUgZm9sZGVyIGlmIGl0IGRvZXNuJ3QgZXhpc3QKICAgICAgICAgICAgICAgICROdWxsID0gTmV3LUl0ZW0gLUl0ZW1UeXBlIERpcmVjdG9yeSAtRm9yY2UgLVBhdGggJFRhc2tQYXRoCgogICAgICAgICAgICAgICAgaWYoVGVzdC1QYXRoICIkVGFza1BhdGhcU2NoZWR1bGVkVGFza3MueG1sIikgewogICAgICAgICAgICAgICAgICAgIFRocm93ICJTY2hlZHVsZWQgdGFzayBhbHJlYWR5IGV4aXN0cyBhdCAkVGFza1BhdGhcU2NoZWR1bGVkVGFza3MueG1sICEiCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJFRhc2tYTUwgfCBTZXQtQ29udGVudCAtRW5jb2RpbmcgQVNDSUkgLVBhdGggIiRUYXNrUGF0aFxTY2hlZHVsZWRUYXNrcy54bWwiCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKCRDcmVkZW50aWFsKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJSZW1vdmluZyBtb3VudGVkIGRyaXZlIGF0IE46XCIKICAgICAgICAgICAgICAgICROZXQgPSBOZXctT2JqZWN0IC1Db21PYmplY3QgV1NjcmlwdC5OZXR3b3JrCiAgICAgICAgICAgICAgICAkTmV0LlJlbW92ZU5ldHdvcmtEcml2ZSgiTjoiKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiRXJyb3IgZm9yIEdQTyAkUHJvY2Vzc2VkR1BPTmFtZSA6ICRfIgogICAgICAgICAgICBpZigkQ3JlZGVudGlhbCkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiUmVtb3ZpbmcgbW91bnRlZCBkcml2ZSBhdCBOOlwiCiAgICAgICAgICAgICAgICAkTmV0ID0gTmV3LU9iamVjdCAtQ29tT2JqZWN0IFdTY3JpcHQuTmV0d29yawogICAgICAgICAgICAgICAgJE5ldC5SZW1vdmVOZXR3b3JrRHJpdmUoIk46IikKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1OZXRHUE9Hcm91cCB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgUmV0dXJucyBhbGwgR1BPcyBpbiBhIGRvbWFpbiB0aGF0IHNldCAiUmVzdHJpY3RlZCBHcm91cHMiIG9yIHVzZSBncm91cHMueG1sIG9uIG9uIHRhcmdldCBtYWNoaW5lcy4KCiAgICAgICAgQXV0aG9yOiBAaGFybWoweQogICAgICAgIExpY2Vuc2U6IEJTRCAzLUNsYXVzZQogICAgICAgIFJlcXVpcmVkIERlcGVuZGVuY2llczogR2V0LU5ldEdQTywgR2V0LUdwdFRtcGwsIEdldC1Hcm91cHNYTUwsIENvbnZlcnQtTmFtZVRvU2lkLCBDb252ZXJ0LVNpZFRvTmFtZQogICAgICAgIE9wdGlvbmFsIERlcGVuZGVuY2llczogTm9uZQogICAgCiAgICAuREVTQ1JJUFRJT04KCiAgICAgICAgRmlyc3QgZW51bWVyYXRlcyBhbGwgR1BPcyBpbiB0aGUgY3VycmVudC90YXJnZXQgZG9tYWluIHVzaW5nIEdldC1OZXRHUE8gd2l0aCBwYXNzZWQKICAgICAgICBhcmd1bWVudHMsIGFuZCBmb3IgZWFjaCBHUE8gY2hlY2tzIGlmICdSZXN0cmljdGVkIEdyb3VwcycgYXJlIHNldCB3aXRoIEdwdFRtcGwuaW5mIG9yCiAgICAgICAgZ3JvdXAgbWVtYmVyc2hpcCBpcyBzZXQgdGhyb3VnaCBHcm91cCBQb2xpY3kgUHJlZmVyZW5jZXMgZ3JvdXBzLnhtbCBmaWxlcy4gRm9yIGFueQogICAgICAgIEdwdFRtcGwuaW5mIGZpbGVzIGZvdW5kLCB0aGUgZmlsZSBpcyBwYXJzZWQgd2l0aCBHZXQtR3B0VG1wbCBhbmQgYW55ICdHcm91cCBNZW1iZXJzaGlwJwogICAgICAgIHNlY3Rpb24gZGF0YSBpcyBwcm9jZXNzZWQgaWYgcHJlc2VudC4gQW55IGZvdW5kIEdyb3Vwcy54bWwgZmlsZXMgYXJlIHBhcnNlZCB3aXRoCiAgICAgICAgR2V0LUdyb3Vwc1hNTCBhbmQgdGhvc2UgbWVtYmVyc2hpcHMgYXJlIHJldHVybmVkIGFzIHdlbGwuCgogICAgLlBBUkFNRVRFUiBHUE9uYW1lCgogICAgICAgIFRoZSBHUE8gbmFtZSAoR1VJRCkgdG8gcXVlcnkgZm9yLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgogICAgLlBBUkFNRVRFUiBEaXNwbGF5TmFtZQoKICAgICAgICBUaGUgR1BPIGRpc3BsYXkgbmFtZSB0byBxdWVyeSBmb3IsIHdpbGRjYXJkcyBhY2NlcHRlZC4KCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBUaGUgZG9tYWluIHRvIHF1ZXJ5IGZvciBHUE9zLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCBmb3IgR1BPcy4KICAgICAgICBlLmcuICJMREFQOi8vY249ezhGRjU5RDI4LTE1RDctNDIyQS1CQ0I3LTJBRTQ1NzI0MTI1QX0sY249cG9saWNpZXMsY249c3lzdGVtLERDPWRldixEQz10ZXN0bGFiLERDPWxvY2FsIgoKICAgIC5QQVJBTUVURVIgUmVzb2x2ZU1lbWJlclNJRHMKCiAgICAgICAgU3dpdGNoLiBUcnkgdG8gcmVzb2x2ZSB0aGUgU0lEcyBvZiBhbGwgZm91bmQgZ3JvdXAgbWVtYmVycy4KCiAgICAuUEFSQU1FVEVSIFVzZVBTRHJpdmUKCiAgICAgICAgU3dpdGNoLiBNb3VudCBhbnkgZm91bmQgcG9saWN5IGZpbGVzIHdpdGggdGVtcG9yYXJ5IFBTRHJpdmVzLgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldEdQT0dyb3VwCgogICAgICAgIFJldHVybnMgYWxsIGxvY2FsIGdyb3VwcyBzZXQgYnkgR1BPIGFsb25nIHdpdGggdGhlaXIgbWVtYmVycyBhbmQgbWVtYmVyb2YuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0R1BPR3JvdXAgLVJlc29sdmVNZW1iZXJTSURzCgogICAgICAgIFJldHVybnMgYWxsIGxvY2FsIGdyb3VwcyBzZXQgYnkgR1BPIGFsb25nIHdpdGggdGhlaXIgbWVtYmVycyBhbmQgbWVtYmVyb2YsCiAgICAgICAgYW5kIHJlc29sdmUgYW55IG1lbWJlcnMgdG8gdGhlaXIgZG9tYWluIFNJRHMuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0R1BPR3JvdXAgLUdQT05hbWUgJ3swODQ3QzYxNS02QzRFLTRENDUtQTA2NC02MDAxMDQwQ0MyMUN9JwoKICAgICAgICBSZXR1cm4gYW55IEdQTy1zZXQgZ3JvdXBzIGZvciB0aGUgR1BPIHdpdGggdGhlIGdpdmVuIG5hbWUvR1VJRC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRHUE9Hcm91cCAtRGlzcGxheU5hbWUgJ0Rlc2t0b3BzJwoKICAgICAgICBSZXR1cm4gYW55IEdQTy1zZXQgZ3JvdXBzIGZvciB0aGUgR1BPIHdpdGggdGhlIGdpdmVuIGRpc3BsYXkgbmFtZS4KCiAgICAuTElOSwoKICAgICAgICBodHRwczovL21vcmdhbnNpbW9uc2VuYmxvZy5henVyZXdlYnNpdGVzLm5ldC90YWcvZ3JvdXBzLwojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkR1BPbmFtZSA9ICcqJywKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRGlzcGxheU5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQURTcGF0aCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUmVzb2x2ZU1lbWJlclNJRHMsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFVzZVBTRHJpdmUsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMAogICAgKQoKICAgICRPcHRpb24gPSBbU3lzdGVtLlN0cmluZ1NwbGl0T3B0aW9uc106OlJlbW92ZUVtcHR5RW50cmllcwoKICAgICMgZ2V0IGV2ZXJ5IEdQTyBmcm9tIHRoZSBzcGVjaWZpZWQgZG9tYWluIHdpdGggcmVzdHJpY3RlZCBncm91cHMgc2V0CiAgICBHZXQtTmV0R1BPIC1HUE9OYW1lICRHUE9uYW1lIC1EaXNwbGF5TmFtZSAkRGlzcGxheU5hbWUgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1BRFNwYXRoICRBRFNwYXRoIC1QYWdlU2l6ZSAkUGFnZVNpemUgfCBGb3JFYWNoLU9iamVjdCB7CgogICAgICAgICRHUE9kaXNwbGF5TmFtZSA9ICRfLmRpc3BsYXluYW1lCiAgICAgICAgJEdQT25hbWUgPSAkXy5uYW1lCiAgICAgICAgJEdQT1BhdGggPSAkXy5ncGNmaWxlc3lzcGF0aAoKICAgICAgICAkUGFyc2VBcmdzID0gIEB7CiAgICAgICAgICAgICdHcHRUbXBsUGF0aCcgPSAiJEdQT1BhdGhcTUFDSElORVxNaWNyb3NvZnRcV2luZG93cyBOVFxTZWNFZGl0XEdwdFRtcGwuaW5mIgogICAgICAgICAgICAnVXNlUFNEcml2ZScgPSAkVXNlUFNEcml2ZQogICAgICAgIH0KCiAgICAgICAgIyBwYXJzZSB0aGUgR3B0VG1wbC5pbmYgJ1Jlc3RyaWN0ZWQgR3JvdXBzJyBmaWxlIGlmIGl0IGV4aXN0cwogICAgICAgICRJbmYgPSBHZXQtR3B0VG1wbCBAUGFyc2VBcmdzCgogICAgICAgIGlmKCRJbmYgLWFuZCAoJEluZi5wc2Jhc2UuS2V5cyAtY29udGFpbnMgJ0dyb3VwIE1lbWJlcnNoaXAnKSkgewoKICAgICAgICAgICAgJE1lbWJlcnNoaXBzID0gQHt9CgogICAgICAgICAgICAjIGdyb3VwIHRoZSBtZW1iZXJzL21lbWJlcm9mIGZpZWxkcyBmb3IgZWFjaCBlbnRyeQogICAgICAgICAgICBGb3JFYWNoICgkTWVtYmVyc2hpcCBpbiAkSW5mLidHcm91cCBNZW1iZXJzaGlwJy5HZXRFbnVtZXJhdG9yKCkpIHsKICAgICAgICAgICAgICAgICRHcm91cCwgJFJlbGF0aW9uID0gJE1lbWJlcnNoaXAuS2V5LlNwbGl0KCdfXycsICRPcHRpb24pIHwgRm9yRWFjaC1PYmplY3QgeyRfLlRyaW0oKX0KCiAgICAgICAgICAgICAgICAjIGV4dHJhY3Qgb3V0IEFMTCBtZW1iZXJzCiAgICAgICAgICAgICAgICAkTWVtYmVyc2hpcFZhbHVlID0gJE1lbWJlcnNoaXAuVmFsdWUgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsgJF8uVHJpbSgnKicpIH0gfCBXaGVyZS1PYmplY3QgeyRffQoKICAgICAgICAgICAgICAgIGlmKCRSZXNvbHZlTWVtYmVyU0lEcykgewogICAgICAgICAgICAgICAgICAgICMgaWYgdGhlIHJlc3VsdGluZyBtZW1iZXIgaXMgdXNlcm5hbWUgYW5kIG5vdCBhIFNJRCwgYXR0ZW1wdCB0byByZXNvbHZlIGl0CiAgICAgICAgICAgICAgICAgICAgJEdyb3VwTWVtYmVycyA9IEAoKQogICAgICAgICAgICAgICAgICAgIEZvckVhY2goJE1lbWJlciBpbiAkTWVtYmVyc2hpcFZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRNZW1iZXIgLWFuZCAoJE1lbWJlci5UcmltKCkgLW5lICcnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJE1lbWJlciAtbm90bWF0Y2ggJ15TLTEtLionKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlclNJRCA9IENvbnZlcnQtTmFtZVRvU2lkIC1Eb21haW4gJERvbWFpbiAtT2JqZWN0TmFtZSAkTWVtYmVyIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgU0lECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJE1lbWJlclNJRCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBNZW1iZXJzICs9ICRNZW1iZXJTSUQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cE1lbWJlcnMgKz0gJE1lbWJlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cE1lbWJlcnMgKz0gJE1lbWJlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRNZW1iZXJzaGlwVmFsdWUgPSAkR3JvdXBNZW1iZXJzCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYoLW5vdCAkTWVtYmVyc2hpcHNbJEdyb3VwXSkgewogICAgICAgICAgICAgICAgICAgICRNZW1iZXJzaGlwc1skR3JvdXBdID0gQHt9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZigkTWVtYmVyc2hpcFZhbHVlIC1pc25vdCBbU3lzdGVtLkFycmF5XSkgeyRNZW1iZXJzaGlwVmFsdWUgPSBAKCRNZW1iZXJzaGlwVmFsdWUpfQogICAgICAgICAgICAgICAgJE1lbWJlcnNoaXBzWyRHcm91cF0uQWRkKCRSZWxhdGlvbiwgJE1lbWJlcnNoaXBWYWx1ZSkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgRm9yRWFjaCAoJE1lbWJlcnNoaXAgaW4gJE1lbWJlcnNoaXBzLkdldEVudW1lcmF0b3IoKSkgewogICAgICAgICAgICAgICAgaWYoJE1lbWJlcnNoaXAgLWFuZCAkTWVtYmVyc2hpcC5LZXkgLWFuZCAoJE1lbWJlcnNoaXAuS2V5IC1tYXRjaCAnXlwqJykpIHsKICAgICAgICAgICAgICAgICAgICAjIGlmIHRoZSBTSUQgaXMgYWxyZWFkeSByZXNvbHZlZCAoaS5lLiBiZWdpbnMgd2l0aCAqKSB0cnkgdG8gcmVzb2x2ZSBTSUQgdG8gYSBuYW1lCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwU0lEID0gJE1lbWJlcnNoaXAuS2V5LlRyaW0oJyonKQogICAgICAgICAgICAgICAgICAgIGlmKCRHcm91cFNJRCAtYW5kICgkR3JvdXBTSUQuVHJpbSgpIC1uZSAnJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwTmFtZSA9IENvbnZlcnQtU2lkVG9OYW1lIC1TSUQgJEdyb3VwU0lECiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBOYW1lID0gJEZhbHNlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJEdyb3VwTmFtZSA9ICRNZW1iZXJzaGlwLktleQoKICAgICAgICAgICAgICAgICAgICBpZigkR3JvdXBOYW1lIC1hbmQgKCRHcm91cE5hbWUuVHJpbSgpIC1uZSAnJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJEdyb3VwbmFtZSAtbWF0Y2ggJ0FkbWluaXN0cmF0b3JzJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwU0lEID0gJ1MtMS01LTMyLTU0NCcKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlaWYoJEdyb3VwbmFtZSAtbWF0Y2ggJ1JlbW90ZSBEZXNrdG9wJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwU0lEID0gJ1MtMS01LTMyLTU1NScKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlaWYoJEdyb3VwbmFtZSAtbWF0Y2ggJ0d1ZXN0cycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cFNJRCA9ICdTLTEtNS0zMi01NDYnCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZWlmKCRHcm91cE5hbWUuVHJpbSgpIC1uZSAnJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwU0lEID0gQ29udmVydC1OYW1lVG9TaWQgLURvbWFpbiAkRG9tYWluIC1PYmplY3ROYW1lICRHcm91cG5hbWUgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBTSUQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cFNJRCA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJEdQT0dyb3VwID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgJEdQT0dyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT0Rpc3BsYXlOYW1lJyAkR1BPRGlzcGxheU5hbWUKICAgICAgICAgICAgICAgICRHUE9Hcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9OYW1lJyAkR1BPTmFtZQogICAgICAgICAgICAgICAgJEdQT0dyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT1BhdGgnICRHUE9QYXRoCiAgICAgICAgICAgICAgICAkR1BPR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPVHlwZScgJ1Jlc3RyaWN0ZWRHcm91cHMnCiAgICAgICAgICAgICAgICAkR1BPR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRmlsdGVycycgJE51bGwKICAgICAgICAgICAgICAgICRHUE9Hcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cE5hbWUnICRHcm91cE5hbWUKICAgICAgICAgICAgICAgICRHUE9Hcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cFNJRCcgJEdyb3VwU0lECiAgICAgICAgICAgICAgICAkR1BPR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBNZW1iZXJPZicgJE1lbWJlcnNoaXAuVmFsdWUuTWVtYmVyb2YKICAgICAgICAgICAgICAgICRHUE9Hcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cE1lbWJlcnMnICRNZW1iZXJzaGlwLlZhbHVlLk1lbWJlcnMKICAgICAgICAgICAgICAgICRHUE9Hcm91cAogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAkUGFyc2VBcmdzID0gIEB7CiAgICAgICAgICAgICdHcm91cHNYTUxwYXRoJyA9ICIkR1BPUGF0aFxNQUNISU5FXFByZWZlcmVuY2VzXEdyb3Vwc1xHcm91cHMueG1sIgogICAgICAgICAgICAnVXNlUFNEcml2ZScgPSAkVXNlUFNEcml2ZQogICAgICAgIH0KCiAgICAgICAgR2V0LUdyb3Vwc1hNTCBAUGFyc2VBcmdzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICBpZigkUmVzb2x2ZU1lbWJlclNJRHMpIHsKICAgICAgICAgICAgICAgICRHcm91cE1lbWJlcnMgPSBAKCkKICAgICAgICAgICAgICAgIEZvckVhY2goJE1lbWJlciBpbiAkXy5Hcm91cE1lbWJlcnMpIHsKICAgICAgICAgICAgICAgICAgICBpZigkTWVtYmVyIC1hbmQgKCRNZW1iZXIuVHJpbSgpIC1uZSAnJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJE1lbWJlciAtbm90bWF0Y2ggJ15TLTEtLionKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGlmIHRoZSByZXN1bHRpbmcgbWVtYmVyIGlzIHVzZXJuYW1lIGFuZCBub3QgYSBTSUQsIGF0dGVtcHQgdG8gcmVzb2x2ZSBpdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlclNJRCA9IENvbnZlcnQtTmFtZVRvU2lkIC1Eb21haW4gJERvbWFpbiAtT2JqZWN0TmFtZSAkTWVtYmVyIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgU0lECiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkTWVtYmVyU0lEKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwTWVtYmVycyArPSAkTWVtYmVyU0lECiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBNZW1iZXJzICs9ICRNZW1iZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cE1lbWJlcnMgKz0gJE1lbWJlcgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJF8uR3JvdXBNZW1iZXJzID0gJEdyb3VwTWVtYmVycwogICAgICAgICAgICB9CgogICAgICAgICAgICAkXyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9EaXNwbGF5TmFtZScgJEdQT0Rpc3BsYXlOYW1lCiAgICAgICAgICAgICRfIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT05hbWUnICRHUE9OYW1lCiAgICAgICAgICAgICRfIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT1R5cGUnICdHcm91cFBvbGljeVByZWZlcmVuY2VzJwogICAgICAgICAgICAkXwogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEZpbmQtR1BPTG9jYXRpb24gewo8IwogICAgLlNZTk9QU0lTCiAgICAgICAgCiAgICAgICAgRW51bWVyYXRlcyB0aGUgbWFjaGluZXMgd2hlcmUgYSBzcGVjaWZpYyB1c2VyL2dyb3VwIGlzIGEgbWVtYmVyIG9mIGEgc3BlY2lmaWMKICAgICAgICBsb2NhbCBncm91cCwgYWxsIHRocm91Z2ggR1BPIGNvcnJlbGF0aW9uLiAKCiAgICAgICAgQXV0aG9yOiBAaGFybWoweQogICAgICAgIExpY2Vuc2U6IEJTRCAzLUNsYXVzZQogICAgICAgIFJlcXVpcmVkIERlcGVuZGVuY2llczogR2V0LU5ldFVzZXIsIEdldC1OZXRHcm91cCwgR2V0LU5ldEdQT0dyb3VwLCBHZXQtTmV0T1UsIEdldC1OZXRDb21wdXRlciwgR2V0LUFET2JqZWN0LCBHZXQtTmV0U2l0ZQogICAgICAgIE9wdGlvbmFsIERlcGVuZGVuY2llczogTm9uZQoKICAgIC5ERVNDUklQVElPTgoKICAgICAgICBUYWtlcyBhIHVzZXIvZ3JvdXAgbmFtZSBhbmQgb3B0aW9uYWwgZG9tYWluLCBhbmQgZGV0ZXJtaW5lcyB0aGUgY29tcHV0ZXJzIGluIHRoZSBkb21haW4gCiAgICAgICAgdGhlIHVzZXIvZ3JvdXAgaGFzIGxvY2FsIGFkbWluIChvciBSRFApIHJpZ2h0cyB0by4KCiAgICAgICAgSXQgZG9lcyB0aGlzIGJ5OgogICAgICAgICAgICAxLiAgcmVzb2x2aW5nIHRoZSB1c2VyL2dyb3VwIHRvIGl0cyBwcm9wZXIgU0lECiAgICAgICAgICAgIDIuICBlbnVtZXJhdGluZyBhbGwgZ3JvdXBzIHRoZSB1c2VyL2dyb3VwIGlzIGEgY3VycmVudCBwYXJ0IG9mIAogICAgICAgICAgICAgICAgYW5kIGV4dHJhY3RpbmcgYWxsIHRhcmdldCBTSURzIHRvIGJ1aWxkIGEgdGFyZ2V0IFNJRCBsaXN0CiAgICAgICAgICAgIDMuICBwdWxsaW5nIGFsbCBHUE9zIHRoYXQgc2V0ICdSZXN0cmljdGVkIEdyb3Vwcycgb3IgR3JvdXBzLnhtbCBieSBjYWxsaW5nCiAgICAgICAgICAgICAgICBHZXQtTmV0R1BPR3JvdXAKICAgICAgICAgICAgNC4gIG1hdGNoaW5nIHRoZSB0YXJnZXQgU0lEIGxpc3QgdG8gdGhlIHF1ZXJpZWQgR1BPIFNJRCBsaXN0CiAgICAgICAgICAgICAgICB0byBlbnVtZXJhdGUgYWxsIEdQTyB0aGUgdXNlciBpcyBlZmZlY3RpdmVseSBhcHBsaWVkIHdpdGgKICAgICAgICAgICAgNS4gIGVudW1lcmF0aW5nIGFsbCBPVXMgYW5kIHNpdGVzIGFuZCBhcHBsaWNhYmxlIEdQTyBHVUlzIGFyZQogICAgICAgICAgICAgICAgYXBwbGllZCB0byB0aHJvdWdoIGdwbGluayBlbnVtZXJhdGluZwogICAgICAgICAgICA2LiAgcXVlcnlpbmcgZm9yIGFsbCBjb21wdXRlcnMgdW5kZXIgdGhlIGdpdmVuIE9VcyBvciBzaXRlcwogICAgICAgIAogICAgICAgIElmIG5vIHVzZXIvZ3JvdXAgaXMgc3BlY2lmaWVkLCBhbGwgdXNlci9ncm91cCAtPiBtYWNoaW5lIG1hcHBpbmdzIGRpc2NvdmVyZWQgdGhyb3VnaAogICAgICAgIEdQTyByZWxhdGlvbnNoaXBzIGFyZSByZXR1cm5lZC4KCiAgICAuUEFSQU1FVEVSIFVzZXJOYW1lCgogICAgICAgIEEgKHNpbmdsZSkgdXNlciBuYW1lIG5hbWUgdG8gcXVlcnkgZm9yIGFjY2Vzcy4KCiAgICAuUEFSQU1FVEVSIEdyb3VwTmFtZQoKICAgICAgICBBIChzaW5nbGUpIGdyb3VwIG5hbWUgbmFtZSB0byBxdWVyeSBmb3IgYWNjZXNzLiAKCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBPcHRpb25hbCBkb21haW4gdGhlIHVzZXIgZXhpc3RzIGluIGZvciBxdWVyeWluZywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgTG9jYWxHcm91cAoKICAgICAgICBUaGUgbG9jYWwgZ3JvdXAgdG8gY2hlY2sgYWNjZXNzIGFnYWluc3QuCiAgICAgICAgQ2FuIGJlICJBZG1pbmlzdHJhdG9ycyIgKFMtMS01LTMyLTU0NCksICJSRFAvUmVtb3RlIERlc2t0b3AgVXNlcnMiIChTLTEtNS0zMi01NTUpLAogICAgICAgIG9yIGEgY3VzdG9tIGxvY2FsIFNJRC4gRGVmYXVsdHMgdG8gbG9jYWwgJ0FkbWluaXN0cmF0b3JzJy4KCiAgICAuUEFSQU1FVEVSIFVzZVBTRHJpdmUKCiAgICAgICAgU3dpdGNoLiBNb3VudCBhbnkgZm91bmQgcG9saWN5IGZpbGVzIHdpdGggdGVtcG9yYXJ5IFBTRHJpdmVzLgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gRmluZC1HUE9Mb2NhdGlvbgoKICAgICAgICBGaW5kIGFsbCB1c2VyL2dyb3VwIC0+IG1hY2hpbmUgcmVsYXRpb25zaGlwcyB3aGVyZSB0aGUgdXNlci9ncm91cCBpcyBhIG1lbWJlcgogICAgICAgIG9mIHRoZSBsb2NhbCBhZG1pbmlzdHJhdG9ycyBncm91cCBvbiB0YXJnZXQgbWFjaGluZXMuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBGaW5kLUdQT0xvY2F0aW9uIC1Vc2VyTmFtZSBkZm0KICAgICAgICAKICAgICAgICBGaW5kIGFsbCBjb21wdXRlcnMgdGhhdCBkZm0gdXNlciBoYXMgbG9jYWwgYWRtaW5pc3RyYXRvciByaWdodHMgdG8gaW4gCiAgICAgICAgdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gRmluZC1HUE9Mb2NhdGlvbiAtVXNlck5hbWUgZGZtIC1Eb21haW4gZGV2LnRlc3RsYWIubG9jYWwKICAgICAgICAKICAgICAgICBGaW5kIGFsbCBjb21wdXRlcnMgdGhhdCBkZm0gdXNlciBoYXMgbG9jYWwgYWRtaW5pc3RyYXRvciByaWdodHMgdG8gaW4gCiAgICAgICAgdGhlIGRldi50ZXN0bGFiLmxvY2FsIGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEZpbmQtR1BPTG9jYXRpb24gLVVzZXJOYW1lIGphc29uIC1Mb2NhbEdyb3VwIFJEUAogICAgICAgIAogICAgICAgIEZpbmQgYWxsIGNvbXB1dGVycyB0aGF0IGphc29uIGhhcyBsb2NhbCBSRFAgYWNjZXNzIHJpZ2h0cyB0byBpbiB0aGUgZG9tYWluLgojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlck5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEdyb3VwTmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRMb2NhbEdyb3VwID0gJ0FkbWluaXN0cmF0b3JzJywKICAgICAgICAKICAgICAgICBbU3dpdGNoXQogICAgICAgICRVc2VQU0RyaXZlLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAKICAgICkKCiAgICBpZigkVXNlck5hbWUpIHsKICAgICAgICAjIGlmIGEgZ3JvdXAgbmFtZSBpcyBzcGVjaWZpZWQsIGdldCB0aGF0IHVzZXIgb2JqZWN0IHNvIHdlIGNhbiBleHRyYWN0IHRoZSB0YXJnZXQgU0lECiAgICAgICAgJFVzZXIgPSBHZXQtTmV0VXNlciAtVXNlck5hbWUgJFVzZXJOYW1lIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtUGFnZVNpemUgJFBhZ2VTaXplIHwgU2VsZWN0LU9iamVjdCAtRmlyc3QgMQogICAgICAgICRVc2VyU2lkID0gJFVzZXIub2JqZWN0c2lkCgogICAgICAgIGlmKC1ub3QgJFVzZXJTaWQpIHsgICAgCiAgICAgICAgICAgIFRocm93ICJVc2VyICckVXNlck5hbWUnIG5vdCBmb3VuZCEiCiAgICAgICAgfQoKICAgICAgICAkVGFyZ2V0U0lEcyA9IEAoJFVzZXJTaWQpCiAgICAgICAgJE9iamVjdFNhbUFjY291bnROYW1lID0gJFVzZXIuc2FtYWNjb3VudG5hbWUKICAgICAgICAkVGFyZ2V0T2JqZWN0ID0gJFVzZXJTaWQKICAgIH0KICAgIGVsc2VpZigkR3JvdXBOYW1lKSB7CiAgICAgICAgIyBpZiBhIGdyb3VwIG5hbWUgaXMgc3BlY2lmaWVkLCBnZXQgdGhhdCBncm91cCBvYmplY3Qgc28gd2UgY2FuIGV4dHJhY3QgdGhlIHRhcmdldCBTSUQKICAgICAgICAkR3JvdXAgPSBHZXQtTmV0R3JvdXAgLUdyb3VwTmFtZSAkR3JvdXBOYW1lIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtRnVsbERhdGEgLVBhZ2VTaXplICRQYWdlU2l6ZSB8IFNlbGVjdC1PYmplY3QgLUZpcnN0IDEKICAgICAgICAkR3JvdXBTaWQgPSAkR3JvdXAub2JqZWN0c2lkCgogICAgICAgIGlmKC1ub3QgJEdyb3VwU2lkKSB7ICAgIAogICAgICAgICAgICBUaHJvdyAiR3JvdXAgJyRHcm91cE5hbWUnIG5vdCBmb3VuZCEiCiAgICAgICAgfQoKICAgICAgICAkVGFyZ2V0U0lEcyA9IEAoJEdyb3VwU2lkKQogICAgICAgICRPYmplY3RTYW1BY2NvdW50TmFtZSA9ICRHcm91cC5zYW1hY2NvdW50bmFtZQogICAgICAgICRUYXJnZXRPYmplY3QgPSAkR3JvdXBTaWQKICAgIH0KICAgIGVsc2UgewogICAgICAgICRUYXJnZXRTSURzID0gQCgnKicpCiAgICB9CgogICAgIyBmaWd1cmUgb3V0IHdoYXQgdGhlIFNJRCBpcyBvZiB0aGUgdGFyZ2V0IGxvY2FsIGdyb3VwIHdlJ3JlIGNoZWNraW5nIGZvciBtZW1iZXJzaGlwIGluCiAgICBpZigkTG9jYWxHcm91cCAtbGlrZSAiKkFkbWluKiIpIHsKICAgICAgICAkVGFyZ2V0TG9jYWxTSUQgPSAnUy0xLTUtMzItNTQ0JwogICAgfQogICAgZWxzZWlmICggKCRMb2NhbEdyb3VwIC1saWtlICIqUkRQKiIpIC1vciAoJExvY2FsR3JvdXAgLWxpa2UgIipSZW1vdGUqIikgKSB7CiAgICAgICAgJFRhcmdldExvY2FsU0lEID0gJ1MtMS01LTMyLTU1NScKICAgIH0KICAgIGVsc2VpZiAoJExvY2FsR3JvdXAgLWxpa2UgIlMtMS01LSoiKSB7CiAgICAgICAgJFRhcmdldExvY2FsU0lEID0gJExvY2FsR3JvdXAKICAgIH0KICAgIGVsc2UgewogICAgICAgIHRocm93ICJMb2NhbEdyb3VwIG11c3QgYmUgJ0FkbWluaXN0cmF0b3JzJywgJ1JEUCcsIG9yIGEgJ1MtMS01LVgnIFNJRCBmb3JtYXQuIgogICAgfQoKICAgICMgaWYgd2UncmUgbm90IGxpc3RpbmcgYWxsIHJlbGF0aW9uc2hpcHMsIHVzZSB0aGUgdG9rZW5Hcm91cHMgYXBwcm9hY2ggZnJvbSBHZXQtTmV0R3JvdXAgdG8gCiAgICAjIGdldCBhbGwgZWZmZWN0aXZlIHNlY3VyaXR5IFNJRHMgdGhpcyBvYmplY3QgaXMgYSBwYXJ0IG9mCiAgICBpZigkVGFyZ2V0U0lEc1swXSAtYW5kICgkVGFyZ2V0U0lEc1swXSAtbmUgJyonKSkgewogICAgICAgICRUYXJnZXRTSURzICs9IEdldC1OZXRHcm91cCAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLVBhZ2VTaXplICRQYWdlU2l6ZSAtVXNlck5hbWUgJE9iamVjdFNhbUFjY291bnROYW1lIC1SYXdTaWRzCiAgICB9CgogICAgaWYoLW5vdCAkVGFyZ2V0U0lEcykgewogICAgICAgIHRocm93ICJObyBlZmZlY3RpdmUgdGFyZ2V0IFNJRHMhIgogICAgfQoKICAgIFdyaXRlLVZlcmJvc2UgIlRhcmdldExvY2FsU0lEOiAkVGFyZ2V0TG9jYWxTSUQiCiAgICBXcml0ZS1WZXJib3NlICJFZmZlY3RpdmUgdGFyZ2V0IFNJRHM6ICRUYXJnZXRTSURzIgoKICAgICRHUE9Hcm91cEFyZ3MgPSAgQHsKICAgICAgICAnRG9tYWluJyA9ICREb21haW4KICAgICAgICAnRG9tYWluQ29udHJvbGxlcicgPSAkRG9tYWluQ29udHJvbGxlcgogICAgICAgICdVc2VQU0RyaXZlJyA9ICRVc2VQU0RyaXZlCiAgICAgICAgJ1Jlc29sdmVNZW1iZXJTSURzJyA9ICRUcnVlCiAgICAgICAgJ1BhZ2VTaXplJyA9ICRQYWdlU2l6ZQogICAgfQoKICAgICMgZW51bWVyYXRlIGFsbCBHUE8gZ3JvdXAgbWFwcGluZ3MgZm9yIHRoZSB0YXJnZXQgZG9tYWluIHRoYXQgaW52b2x2ZSBvdXIgdGFyZ2V0IFNJRCBzZXQKICAgICRHUE9ncm91cHMgPSBHZXQtTmV0R1BPR3JvdXAgQEdQT0dyb3VwQXJncyB8IEZvckVhY2gtT2JqZWN0IHsKCiAgICAgICAgJEdQT2dyb3VwID0gJF8KCiAgICAgICAgIyBpZiB0aGUgbG9jYWxseSBzZXQgZ3JvdXAgaXMgd2hhdCB3ZSdyZSBsb29raW5nIGZvciwgY2hlY2sgdGhlIEdyb3VwTWVtYmVycyAoJ21lbWJlcnMnKQogICAgICAgICMgICAgZm9yIG91ciB0YXJnZXQgU0lECiAgICAgICAgaWYoJEdQT2dyb3VwLkdyb3VwU0lEIC1tYXRjaCAkVGFyZ2V0TG9jYWxTSUQpIHsKICAgICAgICAgICAgJEdQT2dyb3VwLkdyb3VwTWVtYmVycyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgaWYgKCAoJFRhcmdldFNJRHNbMF0gLWVxICcqJykgLW9yICgkVGFyZ2V0U0lEcyAtQ29udGFpbnMgJF8pICkgewogICAgICAgICAgICAgICAgICAgICRHUE9ncm91cAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICMgaWYgdGhlIGdyb3VwIGlzIGEgJ21lbWJlcm9mJyB0aGUgZ3JvdXAgd2UncmUgbG9va2luZyBmb3IsIGNoZWNrIEdyb3VwU0lEIGFnYWluc3QgdGhlIHRhcmd0IFNJRHMgCiAgICAgICAgaWYoICgkR1BPZ3JvdXAuR3JvdXBNZW1iZXJPZiAtY29udGFpbnMgJFRhcmdldExvY2FsU0lEKSApIHsKICAgICAgICAgICAgaWYoICgkVGFyZ2V0U0lEc1swXSAtZXEgJyonKSAtb3IgKCRUYXJnZXRTSURzIC1Db250YWlucyAkR1BPZ3JvdXAuR3JvdXBTSUQpICkgewogICAgICAgICAgICAgICAgJEdQT2dyb3VwCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9IHwgU29ydC1PYmplY3QgLVByb3BlcnR5IEdQT05hbWUgLVVuaXF1ZQoKICAgICRHUE9ncm91cHMgfCBGb3JFYWNoLU9iamVjdCB7CgogICAgICAgICRHUE9uYW1lID0gJF8uR1BPRGlzcGxheU5hbWUKICAgICAgICAkR1BPZ3VpZCA9ICRfLkdQT05hbWUKICAgICAgICAkR1BPUGF0aCA9ICRfLkdQT1BhdGgKICAgICAgICAkR1BPVHlwZSA9ICRfLkdQT1R5cGUKICAgICAgICBpZigkXy5Hcm91cE1lbWJlcnMpIHsKICAgICAgICAgICAgJEdQT01lbWJlcnMgPSAkXy5Hcm91cE1lbWJlcnMKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRHUE9NZW1iZXJzID0gJF8uR3JvdXBTSUQKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgJEZpbHRlcnMgPSAkXy5GaWx0ZXJzCgogICAgICAgIGlmKC1ub3QgJFRhcmdldE9iamVjdCkgewogICAgICAgICAgICAjIGlmIHRoZSAqIHdpbGRjYXJkIHdhcyB1c2VkLCBzZXQgdGhlIE9iamVjdERpc3ROYW1lIGFzIHRoZSBHUE8gbWVtYmVyIFNJRCBzZXQKICAgICAgICAgICAgIyAgIHNvIGFsbCByZWxhdGlvbnNoaXAgbWFwcGluZ3MgYXJlIG91dHB1dAogICAgICAgICAgICAkVGFyZ2V0T2JqZWN0U0lEcyA9ICRHUE9NZW1iZXJzCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkVGFyZ2V0T2JqZWN0U0lEcyA9ICRUYXJnZXRPYmplY3QKICAgICAgICB9CgogICAgICAgICMgZmluZCBhbnkgT1VzIHRoYXQgaGF2ZSB0aGlzIEdVSUQgYXBwbGllZCBhbmQgdGhlbiByZXRyaWV2ZSBhbnkgY29tcHV0ZXJzIGZyb20gdGhlIE9VCiAgICAgICAgR2V0LU5ldE9VIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtR1VJRCAkR1BPZ3VpZCAtRnVsbERhdGEgLVBhZ2VTaXplICRQYWdlU2l6ZSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgaWYoJEZpbHRlcnMpIHsKICAgICAgICAgICAgICAgICMgZmlsdGVyIGZvciBjb21wdXRlciBuYW1lL29yZyB1bml0IGlmIGEgZmlsdGVyIGlzIHNwZWNpZmllZAogICAgICAgICAgICAgICAgIyAgIFRPRE86IGhhbmRsZSBvdGhlciBmaWx0ZXJzIChpLmUuIE9VIGZpbHRlcnM/KSBhZ2FpbiwgSSBoYXRlIHlvdSBHUFAuLi4KICAgICAgICAgICAgICAgICRPVUNvbXB1dGVycyA9IEdldC1OZXRDb21wdXRlciAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUFEU3BhdGggJF8uQURTcGF0aCAtRnVsbERhdGEgLVBhZ2VTaXplICRQYWdlU2l6ZSB8IFdoZXJlLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgJF8uYWRzcGF0aCAtbWF0Y2ggKCRGaWx0ZXJzLlZhbHVlKQogICAgICAgICAgICAgICAgfSB8IEZvckVhY2gtT2JqZWN0IHsgJF8uZG5zaG9zdG5hbWUgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJE9VQ29tcHV0ZXJzID0gR2V0LU5ldENvbXB1dGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQURTcGF0aCAkXy5BRFNwYXRoIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYoJE9VQ29tcHV0ZXJzKSB7CiAgICAgICAgICAgICAgICBpZigkT1VDb21wdXRlcnMgLWlzbm90IFtTeXN0ZW0uQXJyYXldKSB7JE9VQ29tcHV0ZXJzID0gQCgkT1VDb21wdXRlcnMpfQoKICAgICAgICAgICAgICAgIEZvckVhY2ggKCRUYXJnZXRTaWQgaW4gJFRhcmdldE9iamVjdFNJRHMpIHsKICAgICAgICAgICAgICAgICAgICAkT2JqZWN0ID0gR2V0LUFET2JqZWN0IC1TSUQgJFRhcmdldFNpZCAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLVBhZ2VTaXplICRQYWdlU2l6ZQoKICAgICAgICAgICAgICAgICAgICAkSXNHcm91cCA9IEAoJzI2ODQzNTQ1NicsJzI2ODQzNTQ1NycsJzUzNjg3MDkxMicsJzUzNjg3MDkxMycpIC1jb250YWlucyAkT2JqZWN0LnNhbWFjY291bnR0eXBlCgogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhdGlvbiA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYXRpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnT2JqZWN0TmFtZScgJE9iamVjdC5zYW1hY2NvdW50bmFtZQogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdPYmplY3RETicgJE9iamVjdC5kaXN0aW5ndWlzaGVkbmFtZQogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdPYmplY3RTSUQnICRPYmplY3Qub2JqZWN0c2lkCiAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2F0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0RvbWFpbicgJERvbWFpbgogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJc0dyb3VwJyAkSXNHcm91cAogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9EaXNwbGF5TmFtZScgJEdQT25hbWUKICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYXRpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPR3VpZCcgJEdQT0d1aWQKICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYXRpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPUGF0aCcgJEdQT1BhdGgKICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYXRpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPVHlwZScgJEdQT1R5cGUKICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYXRpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29udGFpbmVyTmFtZScgJF8uZGlzdGluZ3Vpc2hlZG5hbWUKICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYXRpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkT1VDb21wdXRlcnMKICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYXRpb24uUFNPYmplY3QuVHlwZU5hbWVzLkFkZCgnUG93ZXJWaWV3LkdQT0xvY2FsR3JvdXAnKQogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhdGlvbgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAjIGZpbmQgYW55IHNpdGVzIHRoYXQgaGF2ZSB0aGlzIEdVSUQgYXBwbGllZAogICAgICAgIEdldC1OZXRTaXRlIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtR1VJRCAkR1BPZ3VpZCAtUGFnZVNpemUgJFBhZ2VTaXplIC1GdWxsRGF0YSB8IEZvckVhY2gtT2JqZWN0IHsKCiAgICAgICAgICAgIEZvckVhY2ggKCRUYXJnZXRTaWQgaW4gJFRhcmdldE9iamVjdFNJRHMpIHsKICAgICAgICAgICAgICAgICRPYmplY3QgPSBHZXQtQURPYmplY3QgLVNJRCAkVGFyZ2V0U2lkIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtUGFnZVNpemUgJFBhZ2VTaXplCgogICAgICAgICAgICAgICAgJElzR3JvdXAgPSBAKCcyNjg0MzU0NTYnLCcyNjg0MzU0NTcnLCc1MzY4NzA5MTInLCc1MzY4NzA5MTMnKSAtY29udGFpbnMgJE9iamVjdC5zYW1hY2NvdW50dHlwZQoKICAgICAgICAgICAgICAgICRBcHBsaWVkU2l0ZSA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICRBcHBsaWVkU2l0ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdPYmplY3ROYW1lJyAkT2JqZWN0LnNhbWFjY291bnRuYW1lCiAgICAgICAgICAgICAgICAkQXBwbGllZFNpdGUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnT2JqZWN0RE4nICRPYmplY3QuZGlzdGluZ3Vpc2hlZG5hbWUKICAgICAgICAgICAgICAgICRBcHBsaWVkU2l0ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdPYmplY3RTSUQnICRPYmplY3Qub2JqZWN0c2lkCiAgICAgICAgICAgICAgICAkQXBwbGllZFNpdGUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNHcm91cCcgJElzR3JvdXAKICAgICAgICAgICAgICAgICRBcHBsaWVkU2l0ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEb21haW4nICREb21haW4KICAgICAgICAgICAgICAgICRBcHBsaWVkU2l0ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9EaXNwbGF5TmFtZScgJEdQT25hbWUKICAgICAgICAgICAgICAgICRBcHBsaWVkU2l0ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9HdWlkJyAkR1BPR3VpZAogICAgICAgICAgICAgICAgJEFwcGxpZWRTaXRlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT1BhdGgnICRHUE9QYXRoCiAgICAgICAgICAgICAgICAkQXBwbGllZFNpdGUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPVHlwZScgJEdQT1R5cGUKICAgICAgICAgICAgICAgICRBcHBsaWVkU2l0ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb250YWluZXJOYW1lJyAkXy5kaXN0aW5ndWlzaGVkbmFtZQogICAgICAgICAgICAgICAgJEFwcGxpZWRTaXRlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJF8uc2l0ZW9iamVjdGJsCiAgICAgICAgICAgICAgICAkQXBwbGllZFNpdGUuUFNPYmplY3QuVHlwZU5hbWVzLkFkZCgnUG93ZXJWaWV3LkdQT0xvY2FsR3JvdXAnKQogICAgICAgICAgICAgICAgJEFwcGxpZWRTaXRlCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBGaW5kLUdQT0NvbXB1dGVyQWRtaW4gewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFRha2VzIGEgY29tcHV0ZXIgKG9yIEdQTykgb2JqZWN0IGFuZCBkZXRlcm1pbmVzIHdoYXQgdXNlcnMvZ3JvdXBzIGFyZSBpbiB0aGUgc3BlY2lmaWVkCiAgICAgICAgbG9jYWwgZ3JvdXAgZm9yIHRoZSBtYWNoaW5lLgoKICAgICAgICBBdXRob3I6IEBoYXJtajB5CiAgICAgICAgTGljZW5zZTogQlNEIDMtQ2xhdXNlCiAgICAgICAgUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtTmV0Q29tcHV0ZXIsIEdldC1TaXRlTmFtZSwgR2V0LU5ldFNpdGUsIEdldC1OZXRHUE9Hcm91cCwgR2V0LUFET2JqZWN0LCBHZXQtTmV0R3JvdXBNZW1iZXIsIENvbnZlcnQtU2lkVG9OYW1lCiAgICAgICAgT3B0aW9uYWwgRGVwZW5kZW5jaWVzOiBOb25lCgogICAgLkRFU0NSSVBUSU9OCiAgICAgICAgCiAgICAgICAgSWYgYSAtQ29tcHV0ZXJOYW1lIGlzIHNwZWNpZmllZCwgcmV0cmlldmUgdGhlIGNvbXBsZXRlIGNvbXB1dGVyIG9iamVjdCwgYXR0ZW1wdCB0bwogICAgICAgIGRldGVybWluZSB0aGUgT1UgdGhlIGNvbXB1dGVyIGlzIGEgcGFydCBvZi4gVGhlbiByZXNvbHZlIHRoZSBjb21wdXRlcidzIHNpdGUgbmFtZSB3aXRoCiAgICAgICAgR2V0LVNpdGVOYW1lIGFuZCByZXRyaWV2ZSBhbGwgc2l0ZXMgb2JqZWN0IEdldC1OZXRTaXRlLiBGb3IgdGhvc2UgcmVzdWx0cywgYXR0ZW1wdCB0bwogICAgICAgIGVudW1lcmF0ZSBhbGwgbGlua2VkIEdQT3MgYW5kIGFzc29jaWF0ZWQgbG9jYWwgZ3JvdXAgc2V0dGluZ3Mgd2l0aCBHZXQtTmV0R1BPR3JvdXAuIEZvcgogICAgICAgIGVhY2ggcmVzdWx0aW5nIEdQTyBncm91cCwgcmVzb2x2ZSB0aGUgcmVzdWx0aW5nIHVzZXIvZ3JvdXAgbmFtZSB0byBhIGZ1bGwgQUQgb2JqZWN0IGFuZAogICAgICAgIHJldHVybiB0aGUgcmVzdWx0cy4gVGhpcyB3aWxsIHJldHVybiB0aGUgZG9tYWluIG9iamVjdHMgdGhhdCBhcmUgbWVtYmVycyBvZiB0aGUgc3BlY2lmaWVkCiAgICAgICAgLUxvY2FsR3JvdXAgZm9yIHRoZSBnaXZlbiBjb21wdXRlci4KCiAgICAgICAgSW52ZXJzZSBvZiBGaW5kLUdQT0xvY2F0aW9uLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIFRoZSBjb21wdXRlciB0byBkZXRlcm1pbmUgbG9jYWwgYWRtaW5pc3RyYXRpdmUgYWNjZXNzIHRvLgoKICAgIC5QQVJBTUVURVIgT1VOYW1lCgogICAgICAgIE9VIG5hbWUgdG8gZGV0ZXJtaW5lIHdobyBoYXMgbG9jYWwgYWRtaW5pc3J0YXRpdmUgYWNlc3MgdG8gY29tcHV0ZXJzCiAgICAgICAgd2l0aGluIGl0LiAKCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBPcHRpb25hbCBkb21haW4gdGhlIGNvbXB1dGVyL09VIGV4aXN0cyBpbiwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgUmVjdXJzZQoKICAgICAgICBTd2l0Y2guIElmIGEgcmV0dXJuZWQgbWVtYmVyIGlzIGEgZ3JvdXAsIHJlY3Vyc2UgYW5kIGdldCBhbGwgbWVtYmVycy4KCiAgICAuUEFSQU1FVEVSIExvY2FsR3JvdXAKCiAgICAgICAgVGhlIGxvY2FsIGdyb3VwIHRvIGNoZWNrIGFjY2VzcyBhZ2FpbnN0LgogICAgICAgIENhbiBiZSAiQWRtaW5pc3RyYXRvcnMiIChTLTEtNS0zMi01NDQpLCAiUkRQL1JlbW90ZSBEZXNrdG9wIFVzZXJzIiAoUy0xLTUtMzItNTU1KSwKICAgICAgICBvciBhIGN1c3RvbSBsb2NhbCBTSUQuCiAgICAgICAgRGVmYXVsdHMgdG8gbG9jYWwgJ0FkbWluaXN0cmF0b3JzJy4KCiAgICAuUEFSQU1FVEVSIFVzZVBTRHJpdmUKCiAgICAgICAgU3dpdGNoLiBNb3VudCBhbnkgZm91bmQgcG9saWN5IGZpbGVzIHdpdGggdGVtcG9yYXJ5IFBTRHJpdmVzLgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gRmluZC1HUE9Db21wdXRlckFkbWluIC1Db21wdXRlck5hbWUgV0lORE9XUzMuZGV2LnRlc3RsYWIubG9jYWwKICAgICAgICAKICAgICAgICBGaW5kcyB1c2VycyB3aG8gaGF2ZSBsb2NhbCBhZG1pbiByaWdodHMgb3ZlciBXSU5ET1dTMyB0aHJvdWdoIEdQTyBjb3JyZWxhdGlvbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEZpbmQtR1BPQ29tcHV0ZXJBZG1pbiAtQ29tcHV0ZXJOYW1lIFdJTkRPV1MzLmRldi50ZXN0bGFiLmxvY2FsIC1Mb2NhbEdyb3VwIFJEUAogICAgICAgIAogICAgICAgIEZpbmRzIHVzZXJzIHdobyBoYXZlIFJEUCByaWdodHMgb3ZlciBXSU5ET1dTMyB0aHJvdWdoIEdQTyBjb3JyZWxhdGlvbi4KIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyTmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkT1VOYW1lLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFJlY3Vyc2UsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJExvY2FsR3JvdXAgPSAnQWRtaW5pc3RyYXRvcnMnLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRVc2VQU0RyaXZlLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAKICAgICkKCiAgICBwcm9jZXNzIHsKICAgIAogICAgICAgIGlmKCEkQ29tcHV0ZXJOYW1lIC1hbmQgISRPVU5hbWUpIHsKICAgICAgICAgICAgVGhyb3cgIi1Db21wdXRlck5hbWUgb3IgLU9VTmFtZSBtdXN0IGJlIHByb3ZpZGVkIgogICAgICAgIH0KCiAgICAgICAgJEdQT0dyb3VwcyA9IEAoKQoKICAgICAgICBpZigkQ29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgICRDb21wdXRlcnMgPSBHZXQtTmV0Q29tcHV0ZXIgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtRnVsbERhdGEgLVBhZ2VTaXplICRQYWdlU2l6ZQoKICAgICAgICAgICAgaWYoISRDb21wdXRlcnMpIHsKICAgICAgICAgICAgICAgIHRocm93ICJDb21wdXRlciAkQ29tcHV0ZXJOYW1lIGluIGRvbWFpbiAnJERvbWFpbicgbm90IGZvdW5kISBUcnkgYSBmdWxseSBxdWFsaWZpZWQgaG9zdCBuYW1lIgogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAkVGFyZ2V0T1VzID0gQCgpCiAgICAgICAgICAgIEZvckVhY2goJENvbXB1dGVyIGluICRDb21wdXRlcnMpIHsKICAgICAgICAgICAgICAgICMgZXh0cmFjdCBhbGwgT1VzIGEgY29tcHV0ZXIgaXMgYSBwYXJ0IG9mCiAgICAgICAgICAgICAgICAkRE4gPSAkQ29tcHV0ZXIuZGlzdGluZ3Vpc2hlZG5hbWUKCiAgICAgICAgICAgICAgICAkVGFyZ2V0T1VzICs9ICRETi5zcGxpdCgiLCIpIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgIGlmKCRfLnN0YXJ0c3dpdGgoIk9VPSIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRETi5zdWJzdHJpbmcoJEROLmluZGV4b2YoJF8pKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBlbnVtZXJhdGUgYW55IGxpbmtlZCBHUE9zIGZvciB0aGUgY29tcHV0ZXIncyBzaXRlCiAgICAgICAgICAgICRDb21wdXRlclNpdGUgPSAoR2V0LVNpdGVOYW1lIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSkuU2l0ZU5hbWUKICAgICAgICAgICAgaWYoJENvbXB1dGVyU2l0ZSAtYW5kICgkQ29tcHV0ZXJTaXRlIC1ub3RsaWtlICdFcnJvcionKSkgewogICAgICAgICAgICAgICAgJEdQT0dyb3VwcyArPSBHZXQtTmV0U2l0ZSAtU2l0ZU5hbWUgJENvbXB1dGVyU2l0ZSAtRnVsbERhdGEgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgaWYoJF8uZ3BsaW5rKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRfLmdwbGluay5zcGxpdCgiXVsiKSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkXy5zdGFydHN3aXRoKCJMREFQIikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkXy5zcGxpdCgiOyIpWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRHUE9Hcm91cEFyZ3MgPSAgQHsKICAgICAgICAgICAgICAgICAgICAgICAgJ0RvbWFpbicgPSAkRG9tYWluCiAgICAgICAgICAgICAgICAgICAgICAgICdEb21haW5Db250cm9sbGVyJyA9ICREb21haW5Db250cm9sbGVyCiAgICAgICAgICAgICAgICAgICAgICAgICdSZXNvbHZlTWVtYmVyU0lEcycgPSAkVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAnVXNlUFNEcml2ZScgPSAkVXNlUFNEcml2ZQogICAgICAgICAgICAgICAgICAgICAgICAnUGFnZVNpemUnID0gJFBhZ2VTaXplCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAjIGZvciBlYWNoIEdQTyBsaW5rLCBnZXQgYW55IGxvY2FsbHkgc2V0IHVzZXIvZ3JvdXAgU0lEcwogICAgICAgICAgICAgICAgICAgIEdldC1OZXRHUE9Hcm91cCBAR1BPR3JvdXBBcmdzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRUYXJnZXRPVXMgPSBAKCRPVU5hbWUpCiAgICAgICAgfQoKICAgICAgICBXcml0ZS1WZXJib3NlICJUYXJnZXQgT1VzOiAkVGFyZ2V0T1VzIgoKICAgICAgICAkVGFyZ2V0T1VzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CgogICAgICAgICAgICAkR1BPTGlua3MgPSBHZXQtTmV0T1UgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1BRFNwYXRoICRfIC1GdWxsRGF0YSAtUGFnZVNpemUgJFBhZ2VTaXplIHwgRm9yRWFjaC1PYmplY3QgeyAKICAgICAgICAgICAgICAgICMgYW5kIHRoZW4gZ2V0IGFueSBHUE8gbGlua3MKICAgICAgICAgICAgICAgIGlmKCRfLmdwbGluaykgewogICAgICAgICAgICAgICAgICAgICRfLmdwbGluay5zcGxpdCgiXVsiKSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRfLnN0YXJ0c3dpdGgoIkxEQVAiKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8uc3BsaXQoIjsiKVswXQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAkR1BPR3JvdXBBcmdzID0gIEB7CiAgICAgICAgICAgICAgICAnRG9tYWluJyA9ICREb21haW4KICAgICAgICAgICAgICAgICdEb21haW5Db250cm9sbGVyJyA9ICREb21haW5Db250cm9sbGVyCiAgICAgICAgICAgICAgICAnVXNlUFNEcml2ZScgPSAkVXNlUFNEcml2ZQogICAgICAgICAgICAgICAgJ1Jlc29sdmVNZW1iZXJTSURzJyA9ICRUcnVlCiAgICAgICAgICAgICAgICAnUGFnZVNpemUnID0gJFBhZ2VTaXplCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgZXh0cmFjdCBHUE8gZ3JvdXBzIHRoYXQgYXJlIHNldCB0aHJvdWdoIGFueSBnUGxpbmsgZm9yIHRoaXMgT1UKICAgICAgICAgICAgJEdQT0dyb3VwcyArPSBHZXQtTmV0R1BPR3JvdXAgQEdQT0dyb3VwQXJncyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgIEZvckVhY2goJEdQT0xpbmsgaW4gJEdQT0xpbmtzKSB7CiAgICAgICAgICAgICAgICAgICAgJE5hbWUgPSAkXy5HUE9OYW1lCiAgICAgICAgICAgICAgICAgICAgaWYoJEdQT0xpbmsgLWxpa2UgIiokTmFtZSoiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRfCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAjIGZvciBlYWNoIGZvdW5kIEdQTyBncm91cCwgcmVzb2x2ZSB0aGUgU0lEcyBvZiB0aGUgbWVtYmVycwogICAgICAgICRHUE9ncm91cHMgfCBTb3J0LU9iamVjdCAtUHJvcGVydHkgR1BPTmFtZSAtVW5pcXVlIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAkR1BPR3JvdXAgPSAkXwoKICAgICAgICAgICAgaWYoJEdQT0dyb3VwLkdyb3VwTWVtYmVycykgewogICAgICAgICAgICAgICAgJEdQT01lbWJlcnMgPSAkR1BPR3JvdXAuR3JvdXBNZW1iZXJzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkR1BPTWVtYmVycyA9ICRHUE9Hcm91cC5Hcm91cFNJRAogICAgICAgICAgICB9CgogICAgICAgICAgICAkR1BPTWVtYmVycyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICMgcmVzb2x2ZSB0aGlzIFNJRCB0byBhIGRvbWFpbiBvYmplY3QKICAgICAgICAgICAgICAgICRPYmplY3QgPSBHZXQtQURPYmplY3QgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1QYWdlU2l6ZSAkUGFnZVNpemUgLVNJRCAkXwoKICAgICAgICAgICAgICAgICRJc0dyb3VwID0gQCgnMjY4NDM1NDU2JywnMjY4NDM1NDU3JywnNTM2ODcwOTEyJywnNTM2ODcwOTEzJykgLWNvbnRhaW5zICRPYmplY3Quc2FtYWNjb3VudHR5cGUKCiAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJBZG1pbiA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckFkbWluIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyTmFtZQogICAgICAgICAgICAgICAgJEdQT0NvbXB1dGVyQWRtaW4gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnT2JqZWN0TmFtZScgJE9iamVjdC5zYW1hY2NvdW50bmFtZQogICAgICAgICAgICAgICAgJEdQT0NvbXB1dGVyQWRtaW4gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnT2JqZWN0RE4nICRPYmplY3QuZGlzdGluZ3Vpc2hlZG5hbWUKICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckFkbWluIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ09iamVjdFNJRCcgJF8KICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckFkbWluIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzR3JvdXAnICRJc0dyb3VwCiAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJBZG1pbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9EaXNwbGF5TmFtZScgJEdQT0dyb3VwLkdQT0Rpc3BsYXlOYW1lCiAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJBZG1pbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9HdWlkJyAkR1BPR3JvdXAuR1BPTmFtZQogICAgICAgICAgICAgICAgJEdQT0NvbXB1dGVyQWRtaW4gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPUGF0aCcgJEdQT0dyb3VwLkdQT1BhdGgKICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckFkbWluIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT1R5cGUnICRHUE9Hcm91cC5HUE9UeXBlCiAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJBZG1pbgoKICAgICAgICAgICAgICAgICMgaWYgd2UncmUgcmVjdXJzaW5nIGFuZCB0aGUgY3VycmVudCByZXN1bHQgb2JqZWN0IGlzIGEgZ3JvdXAKICAgICAgICAgICAgICAgIGlmKCRSZWN1cnNlIC1hbmQgJEdQT0NvbXB1dGVyQWRtaW4uaXNHcm91cCkgewoKICAgICAgICAgICAgICAgICAgICBHZXQtTmV0R3JvdXBNZW1iZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1TSUQgJF8gLUZ1bGxEYXRhIC1SZWN1cnNlIC1QYWdlU2l6ZSAkUGFnZVNpemUgfCBGb3JFYWNoLU9iamVjdCB7CgogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyRE4gPSAkXy5kaXN0aW5ndWlzaGVkTmFtZQoKICAgICAgICAgICAgICAgICAgICAgICAgIyBleHRyYWN0IHRoZSBGUUROIGZyb20gdGhlIERpc3Rpbmd1aXNoZWQgTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyRG9tYWluID0gJE1lbWJlckROLnN1YlN0cmluZygkTWVtYmVyRE4uSW5kZXhPZigiREM9IikpIC1yZXBsYWNlICdEQz0nLCcnIC1yZXBsYWNlICcsJywnLicKCiAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJJc0dyb3VwID0gQCgnMjY4NDM1NDU2JywnMjY4NDM1NDU3JywnNTM2ODcwOTEyJywnNTM2ODcwOTEzJykgLWNvbnRhaW5zICRfLnNhbWFjY291bnR0eXBlCgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJF8uc2FtQWNjb3VudE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgZm9yZXN0IHVzZXJzIGhhdmUgdGhlIHNhbUFjY291bnROYW1lIHNldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlck5hbWUgPSAkXy5zYW1BY2NvdW50TmFtZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBleHRlcm5hbCB0cnVzdCB1c2VycyBoYXZlIGEgU0lELCBzbyBjb252ZXJ0IGl0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJOYW1lID0gQ29udmVydC1TaWRUb05hbWUgJF8uY24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGlmIHRoZXJlJ3MgYSBwcm9ibGVtIGNvbnRhY3RpbmcgdGhlIGRvbWFpbiB0byByZXNvbHZlIHRoZSBTSUQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyTmFtZSA9ICRfLmNuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckFkbWluID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJBZG1pbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlck5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0NvbXB1dGVyQWRtaW4gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnT2JqZWN0TmFtZScgJE1lbWJlck5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0NvbXB1dGVyQWRtaW4gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnT2JqZWN0RE4nICRNZW1iZXJETgogICAgICAgICAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJBZG1pbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdPYmplY3RTSUQnICRfLm9iamVjdHNpZAogICAgICAgICAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJBZG1pbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJc0dyb3VwJyAkTWVtYmVySXNHcm91CiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckFkbWluIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT0Rpc3BsYXlOYW1lJyAkR1BPR3JvdXAuR1BPRGlzcGxheU5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0NvbXB1dGVyQWRtaW4gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPR3VpZCcgJEdQT0dyb3VwLkdQT05hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0NvbXB1dGVyQWRtaW4gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPUGF0aCcgJEdQT0dyb3VwLkdQT1BhdGgKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0NvbXB1dGVyQWRtaW4gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPVHlwZScgJEdQT1R5cGVwCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckFkbWluIAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1Eb21haW5Qb2xpY3kgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFJldHVybnMgdGhlIGRlZmF1bHQgZG9tYWluIG9yIERDIHBvbGljeSBmb3IgYSBnaXZlbgogICAgICAgIGRvbWFpbiBvciBkb21haW4gY29udHJvbGxlci4KCiAgICAgICAgVGhhbmtzIFNlYW4gTWV0YWNhbGYgKEBweXJvdGVrMykgZm9yIHRoZSBpZGVhIGFuZCBndWlkYW5jZS4KCiAgICAuUEFSQU1FVEVSIFNvdXJjZQoKICAgICAgICBFeHRyYWN0IERvbWFpbiBvciBEQyAoZG9tYWluIGNvbnRyb2xsZXIpIHBvbGljaWVzLgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gcXVlcnkgZm9yIGRlZmF1bHQgcG9saWNpZXMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIFJlc29sdmVTaWRzCgogICAgICAgIFN3aXRjaC4gUmVzb2x2ZSBTaWRzIGZyb20gYSBEQyBwb2xpY3kgdG8gb2JqZWN0IG5hbWVzLgoKICAgIC5QQVJBTUVURVIgVXNlUFNEcml2ZQoKICAgICAgICBTd2l0Y2guIE1vdW50IGFueSBmb3VuZCBwb2xpY3kgZmlsZXMgd2l0aCB0ZW1wb3JhcnkgUFNEcml2ZXMuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtRG9tYWluUG9saWN5CgogICAgICAgIFJldHVybnMgdGhlIGRvbWFpbiBwb2xpY3kgZm9yIHRoZSBjdXJyZW50IGRvbWFpbi4gCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtRG9tYWluUG9saWN5IC1Tb3VyY2UgREMgLURvbWFpbkNvbnRyb2xsZXIgTUFTVEVSLnRlc3RsYWIubG9jYWwKCiAgICAgICAgUmV0dXJucyB0aGUgcG9saWN5IGZvciB0aGUgTUFTVEVSLnRlc3RsYWIubG9jYWwgZG9tYWluIGNvbnRyb2xsZXIuCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbU3RyaW5nXQogICAgICAgIFtWYWxpZGF0ZVNldCgiRG9tYWluIiwiREMiKV0KICAgICAgICAkU291cmNlID0iRG9tYWluIiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZXNvbHZlU2lkcywKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVXNlUFNEcml2ZQogICAgKQoKICAgIGlmKCRTb3VyY2UgLWVxICJEb21haW4iKSB7CiAgICAgICAgIyBxdWVyeSB0aGUgZ2l2ZW4gZG9tYWluIGZvciB0aGUgZGVmYXVsdCBkb21haW4gcG9saWN5IG9iamVjdAogICAgICAgICRHUE8gPSBHZXQtTmV0R1BPIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtR1BPbmFtZSAiezMxQjJGMzQwLTAxNkQtMTFEMi05NDVGLTAwQzA0RkI5ODRGOX0iCiAgICAgICAgCiAgICAgICAgaWYoJEdQTykgewogICAgICAgICAgICAjIGdyYWIgdGhlIEdwdFRtcGwuaW5mIGZpbGUgYW5kIHBhcnNlIGl0CiAgICAgICAgICAgICRHcHRUbXBsUGF0aCA9ICRHUE8uZ3BjZmlsZXN5c3BhdGggKyAiXE1BQ0hJTkVcTWljcm9zb2Z0XFdpbmRvd3MgTlRcU2VjRWRpdFxHcHRUbXBsLmluZiIKCiAgICAgICAgICAgICRQYXJzZUFyZ3MgPSAgQHsKICAgICAgICAgICAgICAgICdHcHRUbXBsUGF0aCcgPSAkR3B0VG1wbFBhdGgKICAgICAgICAgICAgICAgICdVc2VQU0RyaXZlJyA9ICRVc2VQU0RyaXZlCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgcGFyc2UgdGhlIEdwdFRtcGwuaW5mCiAgICAgICAgICAgIEdldC1HcHRUbXBsIEBQYXJzZUFyZ3MKICAgICAgICB9CgogICAgfQogICAgZWxzZWlmKCRTb3VyY2UgLWVxICJEQyIpIHsKICAgICAgICAjIHF1ZXJ5IHRoZSBnaXZlbiBkb21haW4vZGMgZm9yIHRoZSBkZWZhdWx0IGRvbWFpbiBjb250cm9sbGVyIHBvbGljeSBvYmplY3QKICAgICAgICAkR1BPID0gR2V0LU5ldEdQTyAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUdQT25hbWUgIns2QUMxNzg2Qy0wMTZGLTExRDItOTQ1Ri0wMEMwNEZCOTg0Rjl9IgoKICAgICAgICBpZigkR1BPKSB7CiAgICAgICAgICAgICMgZ3JhYiB0aGUgR3B0VG1wbC5pbmYgZmlsZSBhbmQgcGFyc2UgaXQKICAgICAgICAgICAgJEdwdFRtcGxQYXRoID0gJEdQTy5ncGNmaWxlc3lzcGF0aCArICJcTUFDSElORVxNaWNyb3NvZnRcV2luZG93cyBOVFxTZWNFZGl0XEdwdFRtcGwuaW5mIgoKICAgICAgICAgICAgJFBhcnNlQXJncyA9ICBAewogICAgICAgICAgICAgICAgJ0dwdFRtcGxQYXRoJyA9ICRHcHRUbXBsUGF0aAogICAgICAgICAgICAgICAgJ1VzZVBTRHJpdmUnID0gJFVzZVBTRHJpdmUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBwYXJzZSB0aGUgR3B0VG1wbC5pbmYKICAgICAgICAgICAgR2V0LUdwdFRtcGwgQFBhcnNlQXJncyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgIGlmKCRSZXNvbHZlU2lkcykgewogICAgICAgICAgICAgICAgICAgICMgaWYgd2UncmUgcmVzb2x2aW5nIHNpZHMgaW4gUHJpdmlsZWdlUmlnaHRzIHRvIG5hbWVzCiAgICAgICAgICAgICAgICAgICAgJFBvbGljeSA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAkXy5wc29iamVjdC5wcm9wZXJ0aWVzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICBpZiggJF8uTmFtZSAtZXEgJ1ByaXZpbGVnZVJpZ2h0cycpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUHJpdmlsZWdlUmlnaHRzID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBmb3IgZXZlcnkgbmVzdGVkIFNJRCBtZW1iZXIgb2YgUHJpdmlsZWdlUmlnaHRzLCB0cnkgdG8gdW5wYWNrIGV2ZXJ5dGhpbmcgYW5kIHJlc29sdmUgdGhlIFNJRHMgYXMgYXBwcm9wcmlhdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfLlZhbHVlLnBzb2JqZWN0LnByb3BlcnRpZXMgfCBGb3JFYWNoLU9iamVjdCB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTaWRzID0gJF8uVmFsdWUgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkXyAtaXNub3QgW1N5c3RlbS5BcnJheV0pIHsgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29udmVydC1TaWRUb05hbWUgJF8gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkXyB8IEZvckVhY2gtT2JqZWN0IHsgQ29udmVydC1TaWRUb05hbWUgJF8gfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkVycm9yIHJlc29sdmluZyBTSUQgOiAkXyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFByaXZpbGVnZVJpZ2h0cyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICRfLk5hbWUgJFNpZHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUG9saWN5IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1ByaXZpbGVnZVJpZ2h0cycgJFByaXZpbGVnZVJpZ2h0cwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFBvbGljeSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICRfLk5hbWUgJF8uVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkUG9saWN5CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsgJF8gfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMKIyBGdW5jdGlvbnMgdGhhdCBlbnVtZXJhdGUgYSBzaW5nbGUgaG9zdCwgZWl0aGVyIHRocm91Z2gKIyBXaW5OVCwgV01JLCByZW1vdGUgcmVnaXN0cnksIG9yIEFQSSBjYWxscyAKIyAod2l0aCBQU1JlZmxlY3QpLgojCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpmdW5jdGlvbiBHZXQtTmV0TG9jYWxHcm91cCB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgR2V0cyBhIGxpc3Qgb2YgYWxsIGN1cnJlbnQgdXNlcnMgaW4gYSBzcGVjaWZpZWQgbG9jYWwgZ3JvdXAsCiAgICAgICAgb3IgcmV0dXJucyB0aGUgbmFtZXMgb2YgYWxsIGxvY2FsIGdyb3VwcyB3aXRoIC1MaXN0R3JvdXBzLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIFRoZSBob3N0bmFtZSBvciBJUCB0byBxdWVyeSBmb3IgbG9jYWwgZ3JvdXAgdXNlcnMuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckZpbGUKCiAgICAgICAgRmlsZSBvZiBob3N0bmFtZXMvSVBzIHRvIHF1ZXJ5IGZvciBsb2NhbCBncm91cCB1c2Vycy4KCiAgICAuUEFSQU1FVEVSIEdyb3VwTmFtZQoKICAgICAgICBUaGUgbG9jYWwgZ3JvdXAgbmFtZSB0byBxdWVyeSBmb3IgdXNlcnMuIElmIG5vdCBnaXZlbiwgaXQgZGVmYXVsdHMgdG8gIkFkbWluaXN0cmF0b3JzIgoKICAgIC5QQVJBTUVURVIgTGlzdEdyb3VwcwoKICAgICAgICBTd2l0Y2guIExpc3QgYWxsIHRoZSBsb2NhbCBncm91cHMgaW5zdGVhZCBvZiB0aGVpciBtZW1iZXJzLgogICAgICAgIE9sZCBHZXQtTmV0TG9jYWxHcm91cHMgZnVuY3Rpb25hbGl0eS4KCiAgICAuUEFSQU1FVEVSIFJlY3Vyc2UKCiAgICAgICAgU3dpdGNoLiBJZiB0aGUgbG9jYWwgbWVtYmVyIG1lbWJlciBpcyBhIGRvbWFpbiBncm91cCwgcmVjdXJzaXZlbHkgdHJ5IHRvIHJlc29sdmUgaXRzIG1lbWJlcnMgdG8gZ2V0IGEgbGlzdCBvZiBkb21haW4gdXNlcnMgd2hvIGNhbiBhY2Nlc3MgdGhpcyBtYWNoaW5lLgoKICAgIC5QQVJBTUVURVIgQVBJCgogICAgICAgIFN3aXRjaC4gVXNlIEFQSSBjYWxscyBpbnN0ZWFkIG9mIHRoZSBXaW5OVCBzZXJ2aWNlIHByb3ZpZGVyLiBMZXNzIGluZm9ybWF0aW9uLAogICAgICAgIGJ1dCB0aGUgcmVzdWx0cyBhcmUgZmFzdGVyLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldExvY2FsR3JvdXAKCiAgICAgICAgUmV0dXJucyB0aGUgdXNlcm5hbWVzIHRoYXQgb2YgbWVtYmVycyBvZiBsb2NhbGdyb3VwICJBZG1pbmlzdHJhdG9ycyIgb24gdGhlIGxvY2FsIGhvc3QuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0TG9jYWxHcm91cCAtQ29tcHV0ZXJOYW1lIFdJTkRPV1NYUAoKICAgICAgICBSZXR1cm5zIGFsbCB0aGUgbG9jYWwgYWRtaW5pc3RyYXRvciBhY2NvdW50cyBmb3IgV0lORE9XU1hQCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0TG9jYWxHcm91cCAtQ29tcHV0ZXJOYW1lIFdJTkRPV1M3IC1SZWN1cnNlIAoKICAgICAgICBSZXR1cm5zIGFsbCBlZmZlY3RpdmUgbG9jYWwvZG9tYWluIHVzZXJzL2dyb3VwcyB0aGF0IGNhbiBhY2Nlc3MgV0lORE9XUzcgd2l0aAogICAgICAgIGxvY2FsIGFkbWluaXN0cmF0aXZlIHByaXZpbGVnZXMuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0TG9jYWxHcm91cCAtQ29tcHV0ZXJOYW1lIFdJTkRPV1M3IC1MaXN0R3JvdXBzCgogICAgICAgIFJldHVybnMgYWxsIGxvY2FsIGdyb3VwcyBvbiB0aGUgV0lORE9XUzcgaG9zdC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+ICJXSU5ET1dTNyIsICJXSU5ET1dTU1AiIHwgR2V0LU5ldExvY2FsR3JvdXAgLUFQSQoKICAgICAgICBSZXR1cm5zIGFsbCBsb2NhbCBncm91cHMgb24gdGhlIHRoZSBwYXNzZWQgaG9zdHMgdXNpbmcgQVBJIGNhbGxzIGluc3RlYWQgb2YgdGhlCiAgICAgICAgV2luTlQgc2VydmljZSBwcm92aWRlci4KCiAgICAuTElOSwoKICAgICAgICBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIxMjg4MjIwL2dldC1hbGwtbG9jYWwtbWVtYmVycy1hbmQtZ3JvdXBzLWRpc3BsYXllZC10b2dldGhlcgogICAgICAgIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9hYTc3MjIxMShWUy44NSkuYXNweAojPgoKICAgIFtDbWRsZXRCaW5kaW5nKERlZmF1bHRQYXJhbWV0ZXJTZXROYW1lID0gJ1dpbk5UJyldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnQVBJJywgUG9zaXRpb249MCwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdXaW5OVCcsIFBvc2l0aW9uPTAsIFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUgPSAkRW52OkNvbXB1dGVyTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ1dpbk5UJyldCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0FQSScpXQogICAgICAgIFtWYWxpZGF0ZVNjcmlwdCh7VGVzdC1QYXRoIC1QYXRoICRfIH0pXQogICAgICAgIFtBbGlhcygnSG9zdExpc3QnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckZpbGUsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdXaW5OVCcpXQogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdBUEknKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcm91cE5hbWUgPSAnQWRtaW5pc3RyYXRvcnMnLAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnV2luTlQnKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRMaXN0R3JvdXBzLAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnV2luTlQnKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZWN1cnNlLAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnQVBJJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkQVBJCiAgICApCgogICAgcHJvY2VzcyB7CgogICAgICAgICRTZXJ2ZXJzID0gQCgpCgogICAgICAgICMgaWYgd2UgaGF2ZSBhIGhvc3QgbGlzdCBwYXNzZWQsIGdyYWIgaXQKICAgICAgICBpZigkQ29tcHV0ZXJGaWxlKSB7CiAgICAgICAgICAgICRTZXJ2ZXJzID0gR2V0LUNvbnRlbnQgLVBhdGggJENvbXB1dGVyRmlsZQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgIyBvdGhlcndpc2UgYXNzdW1lIGEgc2luZ2xlIGhvc3QgbmFtZQogICAgICAgICAgICAkU2VydmVycyArPSAkQ29tcHV0ZXJOYW1lIHwgR2V0LU5hbWVGaWVsZAogICAgICAgIH0KCiAgICAgICAgIyBxdWVyeSB0aGUgc3BlY2lmaWVkIGdyb3VwIHVzaW5nIHRoZSBXSU5OVCBwcm92aWRlciwgYW5kCiAgICAgICAgIyBleHRyYWN0IGZpZWxkcyBhcyBhcHByb3ByaWF0ZSBmcm9tIHRoZSByZXN1bHRzCiAgICAgICAgRm9yRWFjaCgkU2VydmVyIGluICRTZXJ2ZXJzKSB7CgogICAgICAgICAgICBpZigkQVBJKSB7CiAgICAgICAgICAgICAgICAjIGlmIHdlJ3JlIHVzaW5nIHRoZSBOZXRhcGkzMiBOZXRMb2NhbEdyb3VwR2V0TWVtYmVycyBBUEkgY2FsbCB0byBnZXQgdGhlIGxvY2FsIGdyb3VwIGluZm9ybWF0aW9uCiAgICAgICAgICAgICAgICAjIGFyZ3VtZW50cyBmb3IgTmV0TG9jYWxHcm91cEdldE1lbWJlcnMKICAgICAgICAgICAgICAgICRRdWVyeUxldmVsID0gMgogICAgICAgICAgICAgICAgJFB0ckluZm8gPSBbSW50UHRyXTo6WmVybwogICAgICAgICAgICAgICAgJEVudHJpZXNSZWFkID0gMAogICAgICAgICAgICAgICAgJFRvdGFsUmVhZCA9IDAKICAgICAgICAgICAgICAgICRSZXN1bWVIYW5kbGUgPSAwCgogICAgICAgICAgICAgICAgIyBnZXQgdGhlIGxvY2FsIHVzZXIgaW5mb3JtYXRpb24KICAgICAgICAgICAgICAgICRSZXN1bHQgPSAkTmV0YXBpMzI6Ok5ldExvY2FsR3JvdXBHZXRNZW1iZXJzKCRTZXJ2ZXIsICRHcm91cE5hbWUsICRRdWVyeUxldmVsLCBbcmVmXSRQdHJJbmZvLCAtMSwgW3JlZl0kRW50cmllc1JlYWQsIFtyZWZdJFRvdGFsUmVhZCwgW3JlZl0kUmVzdW1lSGFuZGxlKQoKICAgICAgICAgICAgICAgICMgTG9jYXRlIHRoZSBvZmZzZXQgb2YgdGhlIGluaXRpYWwgaW50UHRyCiAgICAgICAgICAgICAgICAkT2Zmc2V0ID0gJFB0ckluZm8uVG9JbnQ2NCgpCgogICAgICAgICAgICAgICAgJExvY2FsVXNlcnMgPSBAKCkKCiAgICAgICAgICAgICAgICAjIDAgPSBzdWNjZXNzCiAgICAgICAgICAgICAgICBpZiAoKCRSZXN1bHQgLWVxIDApIC1hbmQgKCRPZmZzZXQgLWd0IDApKSB7CgogICAgICAgICAgICAgICAgICAgICMgV29yayBvdXQgaG93IG11Y2ggdG8gaW5jcmVtZW50IHRoZSBwb2ludGVyIGJ5IGZpbmRpbmcgb3V0IHRoZSBzaXplIG9mIHRoZSBzdHJ1Y3R1cmUKICAgICAgICAgICAgICAgICAgICAkSW5jcmVtZW50ID0gJExPQ0FMR1JPVVBfTUVNQkVSU19JTkZPXzI6OkdldFNpemUoKQoKICAgICAgICAgICAgICAgICAgICAjIHBhcnNlIGFsbCB0aGUgcmVzdWx0IHN0cnVjdHVyZXMKICAgICAgICAgICAgICAgICAgICBmb3IgKCRpID0gMDsgKCRpIC1sdCAkRW50cmllc1JlYWQpOyAkaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgY3JlYXRlIGEgbmV3IGludCBwdHIgYXQgdGhlIGdpdmVuIG9mZnNldCBhbmQgY2FzdCB0aGUgcG9pbnRlciBhcyBvdXIgcmVzdWx0IHN0cnVjdHVyZQogICAgICAgICAgICAgICAgICAgICAgICAkTmV3SW50UHRyID0gTmV3LU9iamVjdCBTeXN0ZW0uSW50cHRyIC1Bcmd1bWVudExpc3QgJE9mZnNldAogICAgICAgICAgICAgICAgICAgICAgICAkSW5mbyA9ICROZXdJbnRQdHIgLWFzICRMT0NBTEdST1VQX01FTUJFUlNfSU5GT18yCgogICAgICAgICAgICAgICAgICAgICAgICAkT2Zmc2V0ID0gJE5ld0ludFB0ci5Ub0ludDY0KCkKICAgICAgICAgICAgICAgICAgICAgICAgJE9mZnNldCArPSAkSW5jcmVtZW50CgogICAgICAgICAgICAgICAgICAgICAgICAkU2lkU3RyaW5nID0gIiIKICAgICAgICAgICAgICAgICAgICAgICAgJFJlc3VsdDIgPSAkQWR2YXBpMzI6OkNvbnZlcnRTaWRUb1N0cmluZ1NpZCgkSW5mby5sZ3JtaTJfc2lkLCBbcmVmXSRTaWRTdHJpbmcpOyRMYXN0RXJyb3IgPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldExhc3RXaW4zMkVycm9yKCkKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRSZXN1bHQyIC1lcSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkTGFzdEVycm9yKS5NZXNzYWdlKSIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbFVzZXIgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWxVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJFNlcnZlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdBY2NvdW50TmFtZScgJEluZm8ubGdybWkyX2RvbWFpbmFuZG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU0lEJyAkU2lkU3RyaW5nCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJElzR3JvdXAgPSAkKCRJbmZvLmxncm1pMl9zaWR1c2FnZSAtZXEgJ1NpZFR5cGVHcm91cCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWxVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzR3JvdXAnICRJc0dyb3VwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWxVc2VyLlBTT2JqZWN0LlR5cGVOYW1lcy5BZGQoJ1Bvd2VyVmlldy5Mb2NhbFVzZXJBUEknKQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbFVzZXJzICs9ICRMb2NhbFVzZXIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIyBmcmVlIHVwIHRoZSByZXN1bHQgYnVmZmVyCiAgICAgICAgICAgICAgICAgICAgJE51bGwgPSAkTmV0YXBpMzI6Ok5ldEFwaUJ1ZmZlckZyZWUoJFB0ckluZm8pCgogICAgICAgICAgICAgICAgICAgICMgdHJ5IHRvIGV4dHJhY3Qgb3V0IHRoZSBtYWNoaW5lIFNJRCBieSB1c2luZyB0aGUgLTUwMCBhY2NvdW50IGFzIGEgcmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgJE1hY2hpbmVTaWQgPSAkTG9jYWxVc2VycyB8IFdoZXJlLU9iamVjdCB7JF8uU0lEIC1saWtlICcqLTUwMCd9CiAgICAgICAgICAgICAgICAgICAgJFBhcnRzID0gJE1hY2hpbmVTaWQuU0lELlNwbGl0KCctJykKICAgICAgICAgICAgICAgICAgICAkTWFjaGluZVNpZCA9ICRQYXJ0c1swLi4oJFBhcnRzLkxlbmd0aCAtMildIC1qb2luICctJwoKICAgICAgICAgICAgICAgICAgICAkTG9jYWxVc2VycyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJF8uU0lEIC1tYXRjaCAkTWFjaGluZVNpZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNEb21haW4nICRGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNEb21haW4nICRUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJExvY2FsVXNlcnMKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkVycm9yOiAkKChbQ29tcG9uZW50TW9kZWwuV2luMzJFeGNlcHRpb25dICRSZXN1bHQpLk1lc3NhZ2UpIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICMgb3RoZXJ3aXNlIHdlJ3JlIHVzaW5nIHRoZSBXaW5OVCBzZXJ2aWNlIHByb3ZpZGVyCiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIGlmKCRMaXN0R3JvdXBzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgaWYgd2UncmUgbGlzdGluZyB0aGUgZ3JvdXAgbmFtZXMgb24gYSByZW1vdGUgc2VydmVyCiAgICAgICAgICAgICAgICAgICAgICAgICRDb21wdXRlciA9IFtBRFNJXSJXaW5OVDovLyRTZXJ2ZXIsY29tcHV0ZXIiCgogICAgICAgICAgICAgICAgICAgICAgICAkQ29tcHV0ZXIucHNiYXNlLmNoaWxkcmVuIHwgV2hlcmUtT2JqZWN0IHsgJF8ucHNiYXNlLnNjaGVtYUNsYXNzTmFtZSAtZXEgJ2dyb3VwJyB9IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NlcnZlcicgJFNlcnZlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwJyAoJF8ubmFtZVswXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTSUQnICgoTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllciAkXy5vYmplY3RzaWRbMF0sMCkuVmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRGVzY3JpcHRpb24nICgkXy5EZXNjcmlwdGlvblswXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cC5QU09iamVjdC5UeXBlTmFtZXMuQWRkKCdQb3dlclZpZXcuTG9jYWxHcm91cCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXAKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBvdGhlcndpc2Ugd2UncmUgbGlzdGluZyB0aGUgZ3JvdXAgbWVtYmVycwogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVycyA9IEAoJChbQURTSV0iV2luTlQ6Ly8kU2VydmVyLyRHcm91cE5hbWUsZ3JvdXAiKS5wc2Jhc2UuSW52b2tlKCdNZW1iZXJzJykpCgogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVycyB8IEZvckVhY2gtT2JqZWN0IHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRTZXJ2ZXIKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQWRzUGF0aCA9ICgkXy5HZXRUeXBlKCkuSW52b2tlTWVtYmVyKCdBZHNwYXRoJywgJ0dldFByb3BlcnR5JywgJE51bGwsICRfLCAkTnVsbCkpLlJlcGxhY2UoJ1dpbk5UOi8vJywgJycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQ2xhc3MgPSAkXy5HZXRUeXBlKCkuSW52b2tlTWVtYmVyKCdDbGFzcycsICdHZXRQcm9wZXJ0eScsICROdWxsLCAkXywgJE51bGwpCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB0cnkgdG8gdHJhbnNsYXRlIHRoZSBOVDQgZG9tYWluIHRvIGEgRlFETiBpZiBwb3NzaWJsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE5hbWUgPSBDb252ZXJ0LUFETmFtZSAtT2JqZWN0TmFtZSAkQWRzUGF0aCAtSW5wdXRUeXBlICdOVDQnIC1PdXRwdXRUeXBlICdDYW5vbmljYWwnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSXNHcm91cCA9ICRDbGFzcyAtZXEgIkdyb3VwIgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCROYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZRRE4gPSAkTmFtZS5zcGxpdCgiLyIpWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE9iak5hbWUgPSAkQWRzUGF0aC5zcGxpdCgiLyIpWy0xXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICROYW1lID0gIiRGUUROLyRPYmpOYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJc0RvbWFpbiA9ICRUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkT2JqTmFtZSA9ICRBZHNQYXRoLnNwbGl0KCIvIilbLTFdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE5hbWUgPSAkQWRzUGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJc0RvbWFpbiA9ICRGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQWNjb3VudE5hbWUnICROYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzRG9tYWluJyAkSXNEb21haW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNHcm91cCcgJElzR3JvdXAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkSXNEb21haW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIHRyYW5zbGF0ZSB0aGUgYmluYXJ5IHNpZCB0byBhIHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU0lEJyAoKE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXIoJF8uR2V0VHlwZSgpLkludm9rZU1lbWJlcignT2JqZWN0U0lEJywgJ0dldFByb3BlcnR5JywgJE51bGwsICRfLCAkTnVsbCksMCkpLlZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRGVzY3JpcHRpb24nICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEaXNhYmxlZCcgIiIKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJElzR3JvdXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMYXN0TG9naW4nICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMYXN0TG9naW4nICggJF8uR2V0VHlwZSgpLkludm9rZU1lbWJlcignTGFzdExvZ2luJywgJ0dldFByb3BlcnR5JywgJE51bGwsICRfLCAkTnVsbCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMYXN0TG9naW4nICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQd2RMYXN0U2V0JyAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUHdkRXhwaXJlZCcgIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJGbGFncycgIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgcmVwdWxsIHRoaXMgdXNlciBvYmplY3Qgc28gd2UgY2FuIGVuc3VyZSBjb3JyZWN0IGluZm9ybWF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsVXNlciA9ICQoW0FEU0ldICJXaW5OVDovLyRBZHNQYXRoIikKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB0cmFuc2xhdGUgdGhlIGJpbmFyeSBzaWQgdG8gYSBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NJRCcgKChOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyKCRMb2NhbFVzZXIub2JqZWN0U2lkLnZhbHVlLDApKS5WYWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0Rlc2NyaXB0aW9uJyAoJExvY2FsVXNlci5EZXNjcmlwdGlvblswXSkKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJElzR3JvdXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQd2RMYXN0U2V0JyAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1B3ZEV4cGlyZWQnICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlckZsYWdzJyAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0Rpc2FibGVkJyAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0xhc3RMb2dpbicgIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUHdkTGFzdFNldCcgKCAoR2V0LURhdGUpLkFkZFNlY29uZHMoLSRMb2NhbFVzZXIuUGFzc3dvcmRBZ2VbMF0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1B3ZEV4cGlyZWQnICggJExvY2FsVXNlci5QYXNzd29yZEV4cGlyZWRbMF0gLWVxICcxJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyRmxhZ3MnICggJExvY2FsVXNlci5Vc2VyRmxhZ3NbMF0gKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFVBQyBmbGFncyBvZiAweDIgbWVhbiB0aGUgYWNjb3VudCBpcyBkaXNhYmxlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0Rpc2FibGVkJyAkKCgkTG9jYWxVc2VyLnVzZXJGbGFncy52YWx1ZSAtYmFuZCAyKSAtZXEgMikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTGFzdExvZ2luJyAoICRMb2NhbFVzZXIuTGFzdExvZ2luWzBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTGFzdExvZ2luJyAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlci5QU09iamVjdC5UeXBlTmFtZXMuQWRkKCdQb3dlclZpZXcuTG9jYWxVc2VyJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGlmIHRoZSByZXN1bHQgaXMgYSBncm91cCBkb21haW4gb2JqZWN0IGFuZCB3ZSdyZSByZWN1cnNpbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjICAgdHJ5IHRvIHJlc29sdmUgYWxsIHRoZSBncm91cCBtZW1iZXIgcmVzdWx0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFJlY3Vyc2UgLWFuZCAkSXNHcm91cCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRJc0RvbWFpbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZRRE4gPSAkTmFtZS5zcGxpdCgiLyIpWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBOYW1lID0gJE5hbWUuc3BsaXQoIi8iKVsxXS50cmltKCkKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQtTmV0R3JvdXBNZW1iZXIgLUdyb3VwTmFtZSAkR3JvdXBOYW1lIC1Eb21haW4gJEZRRE4gLUZ1bGxEYXRhIC1SZWN1cnNlIHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAiJEZRRE4vJCgkXy5Hcm91cE5hbWUpIgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyRE4gPSAkXy5kaXN0aW5ndWlzaGVkTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgZXh0cmFjdCB0aGUgRlFETiBmcm9tIHRoZSBEaXN0aW5ndWlzaGVkIE5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyRG9tYWluID0gJE1lbWJlckROLnN1YlN0cmluZygkTWVtYmVyRE4uSW5kZXhPZigiREM9IikpIC1yZXBsYWNlICdEQz0nLCcnIC1yZXBsYWNlICcsJywnLicKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlcklzR3JvdXAgPSBAKCcyNjg0MzU0NTYnLCcyNjg0MzU0NTcnLCc1MzY4NzA5MTInLCc1MzY4NzA5MTMnKSAtY29udGFpbnMgJF8uc2FtYWNjb3VudHR5cGUKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRfLnNhbUFjY291bnROYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgZm9yZXN0IHVzZXJzIGhhdmUgdGhlIHNhbUFjY291bnROYW1lIHNldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyTmFtZSA9ICRfLnNhbUFjY291bnROYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBleHRlcm5hbCB0cnVzdCB1c2VycyBoYXZlIGEgU0lELCBzbyBjb252ZXJ0IGl0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJOYW1lID0gQ29udmVydC1TaWRUb05hbWUgJF8uY24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGlmIHRoZXJlJ3MgYSBwcm9ibGVtIGNvbnRhY3RpbmcgdGhlIGRvbWFpbiB0byByZXNvbHZlIHRoZSBTSUQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyTmFtZSA9ICRfLmNuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtRGVidWcgIkVycm9yIHJlc29sdmluZyBTSUQgOiAkXyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdBY2NvdW50TmFtZScgIiRNZW1iZXJEb21haW4vJE1lbWJlck5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTSUQnICRfLm9iamVjdHNpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRGVzY3JpcHRpb24nICRfLmRlc2NyaXB0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEaXNhYmxlZCcgJEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJc0dyb3VwJyAkTWVtYmVySXNHcm91cAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNEb21haW4nICRUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMYXN0TG9naW4nICcnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQd2RMYXN0U2V0JyAkXy5wd2RMYXN0U2V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQd2RFeHBpcmVkJyAnJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlckZsYWdzJyAkXy51c2VyQWNjb3VudENvbnRyb2wKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyLlBTT2JqZWN0LlR5cGVOYW1lcy5BZGQoJ1Bvd2VyVmlldy5Mb2NhbFVzZXInKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQtTmV0TG9jYWxHcm91cCAtQ29tcHV0ZXJOYW1lICRTZXJ2ZXIgLUdyb3VwTmFtZSAkT2JqTmFtZSAtUmVjdXJzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiWyFdIEVycm9yOiAkXyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKZmlsdGVyIEdldC1OZXRTaGFyZSB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgVGhpcyBmdW5jdGlvbiB3aWxsIGV4ZWN1dGUgdGhlIE5ldFNoYXJlRW51bSBXaW4zMkFQSSBjYWxsIHRvIHF1ZXJ5CiAgICAgICAgYSBnaXZlbiBob3N0IGZvciBvcGVuIHNoYXJlcy4gVGhpcyBpcyBhIHJlcGxhY2VtZW50IGZvcgogICAgICAgICJuZXQgc2hhcmUgXFxob3N0bmFtZSIKCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBUaGUgaG9zdG5hbWUgdG8gcXVlcnkgZm9yIHNoYXJlcy4gQWxzbyBhY2NlcHRzIElQIGFkZHJlc3Nlcy4KCiAgICAuT1VUUFVUUwoKICAgICAgICBTSEFSRV9JTkZPXzEgc3RydWN0dXJlLiBBIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBTSEFSRV9JTkZPXzEKICAgICAgICByZXN1bHQgc3RydWN0dXJlIHdoaWNoIGluY2x1ZGVzIHRoZSBuYW1lIGFuZCBub3RlIGZvciBlYWNoIHNoYXJlLAogICAgICAgIHdpdGggdGhlIENvbXB1dGVyTmFtZSBhZGRlZC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRTaGFyZQoKICAgICAgICBSZXR1cm5zIGFjdGl2ZSBzaGFyZXMgb24gdGhlIGxvY2FsIGhvc3QuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0U2hhcmUgLUNvbXB1dGVyTmFtZSBzcWxzZXJ2ZXIKCiAgICAgICAgUmV0dXJucyBhY3RpdmUgc2hhcmVzIG9uIHRoZSAnc3Fsc2VydmVyJyBob3N0CgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0Q29tcHV0ZXIgfCBHZXQtTmV0U2hhcmUKCiAgICAgICAgUmV0dXJucyBhbGwgc2hhcmVzIGZvciBhbGwgY29tcHV0ZXJzIGluIHRoZSBkb21haW4uCgogICAgLkxJTksKCiAgICAgICAgaHR0cDovL3d3dy5wb3dlcnNoZWxsbWFnYXppbmUuY29tLzIwMTQvMDkvMjUvZWFzaWx5LWRlZmluaW5nLWVudW1zLXN0cnVjdHMtYW5kLXdpbjMyLWZ1bmN0aW9ucy1pbi1tZW1vcnkvCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnKV0KICAgICAgICBbT2JqZWN0W11dCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJ2xvY2FsaG9zdCcKICAgICkKCiAgICAjIGV4dHJhY3QgdGhlIGNvbXB1dGVyIG5hbWUgZnJvbSB3aGF0ZXZlciBvYmplY3Qgd2FzIHBhc3NlZCBvbiB0aGUgcGlwZWxpbmUKICAgICRDb21wdXRlciA9ICRDb21wdXRlck5hbWUgfCBHZXQtTmFtZUZpZWxkCgogICAgIyBhcmd1bWVudHMgZm9yIE5ldFNoYXJlRW51bQogICAgJFF1ZXJ5TGV2ZWwgPSAxCiAgICAkUHRySW5mbyA9IFtJbnRQdHJdOjpaZXJvCiAgICAkRW50cmllc1JlYWQgPSAwCiAgICAkVG90YWxSZWFkID0gMAogICAgJFJlc3VtZUhhbmRsZSA9IDAKCiAgICAjIGdldCB0aGUgc2hhcmUgaW5mb3JtYXRpb24KICAgICRSZXN1bHQgPSAkTmV0YXBpMzI6Ok5ldFNoYXJlRW51bSgkQ29tcHV0ZXIsICRRdWVyeUxldmVsLCBbcmVmXSRQdHJJbmZvLCAtMSwgW3JlZl0kRW50cmllc1JlYWQsIFtyZWZdJFRvdGFsUmVhZCwgW3JlZl0kUmVzdW1lSGFuZGxlKQoKICAgICMgTG9jYXRlIHRoZSBvZmZzZXQgb2YgdGhlIGluaXRpYWwgaW50UHRyCiAgICAkT2Zmc2V0ID0gJFB0ckluZm8uVG9JbnQ2NCgpCgogICAgIyAwID0gc3VjY2VzcwogICAgaWYgKCgkUmVzdWx0IC1lcSAwKSAtYW5kICgkT2Zmc2V0IC1ndCAwKSkgewoKICAgICAgICAjIFdvcmsgb3V0IGhvdyBtdWNoIHRvIGluY3JlbWVudCB0aGUgcG9pbnRlciBieSBmaW5kaW5nIG91dCB0aGUgc2l6ZSBvZiB0aGUgc3RydWN0dXJlCiAgICAgICAgJEluY3JlbWVudCA9ICRTSEFSRV9JTkZPXzE6OkdldFNpemUoKQoKICAgICAgICAjIHBhcnNlIGFsbCB0aGUgcmVzdWx0IHN0cnVjdHVyZXMKICAgICAgICBmb3IgKCRpID0gMDsgKCRpIC1sdCAkRW50cmllc1JlYWQpOyAkaSsrKSB7CiAgICAgICAgICAgICMgY3JlYXRlIGEgbmV3IGludCBwdHIgYXQgdGhlIGdpdmVuIG9mZnNldCBhbmQgY2FzdCB0aGUgcG9pbnRlciBhcyBvdXIgcmVzdWx0IHN0cnVjdHVyZQogICAgICAgICAgICAkTmV3SW50UHRyID0gTmV3LU9iamVjdCBTeXN0ZW0uSW50cHRyIC1Bcmd1bWVudExpc3QgJE9mZnNldAogICAgICAgICAgICAkSW5mbyA9ICROZXdJbnRQdHIgLWFzICRTSEFSRV9JTkZPXzEKCiAgICAgICAgICAgICMgcmV0dXJuIGFsbCB0aGUgc2VjdGlvbnMgb2YgdGhlIHN0cnVjdHVyZQogICAgICAgICAgICAkU2hhcmVzID0gJEluZm8gfCBTZWxlY3QtT2JqZWN0ICoKICAgICAgICAgICAgJFNoYXJlcyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAkT2Zmc2V0ID0gJE5ld0ludFB0ci5Ub0ludDY0KCkKICAgICAgICAgICAgJE9mZnNldCArPSAkSW5jcmVtZW50CiAgICAgICAgICAgICRTaGFyZXMKICAgICAgICB9CgogICAgICAgICMgZnJlZSB1cCB0aGUgcmVzdWx0IGJ1ZmZlcgogICAgICAgICROdWxsID0gJE5ldGFwaTMyOjpOZXRBcGlCdWZmZXJGcmVlKCRQdHJJbmZvKQogICAgfQogICAgZWxzZSB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3I6ICQoKFtDb21wb25lbnRNb2RlbC5XaW4zMkV4Y2VwdGlvbl0gJFJlc3VsdCkuTWVzc2FnZSkiCiAgICB9Cn0KCgpmaWx0ZXIgR2V0LU5ldExvZ2dlZG9uIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBUaGlzIGZ1bmN0aW9uIHdpbGwgZXhlY3V0ZSB0aGUgTmV0V2tzdGFVc2VyRW51bSBXaW4zMkFQSSBjYWxsIHRvIHF1ZXJ5CiAgICAgICAgYSBnaXZlbiBob3N0IGZvciBhY3RpdmVseSBsb2dnZWQgb24gdXNlcnMuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlck5hbWUKCiAgICAgICAgVGhlIGhvc3RuYW1lIHRvIHF1ZXJ5IGZvciBsb2dnZWQgb24gdXNlcnMuCgogICAgLk9VVFBVVFMKCiAgICAgICAgV0tTVEFfVVNFUl9JTkZPXzEgc3RydWN0dXJlLiBBIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBXS1NUQV9VU0VSX0lORk9fMQogICAgICAgIHJlc3VsdCBzdHJ1Y3R1cmUgd2hpY2ggaW5jbHVkZXMgdGhlIHVzZXJuYW1lIGFuZCBkb21haW4gb2YgbG9nZ2VkIG9uIHVzZXJzLAogICAgICAgIHdpdGggdGhlIENvbXB1dGVyTmFtZSBhZGRlZC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRMb2dnZWRvbgoKICAgICAgICBSZXR1cm5zIHVzZXJzIGFjdGl2ZWx5IGxvZ2dlZCBvbnRvIHRoZSBsb2NhbCBob3N0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldExvZ2dlZG9uIC1Db21wdXRlck5hbWUgc3Fsc2VydmVyCgogICAgICAgIFJldHVybnMgdXNlcnMgYWN0aXZlbHkgbG9nZ2VkIG9udG8gdGhlICdzcWxzZXJ2ZXInIGhvc3QuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0Q29tcHV0ZXIgfCBHZXQtTmV0TG9nZ2Vkb24KCiAgICAgICAgUmV0dXJucyBhbGwgbG9nZ2VkIG9uIHVzZXJzZSBmb3IgYWxsIGNvbXB1dGVycyBpbiB0aGUgZG9tYWluLgoKICAgIC5MSU5LCgogICAgICAgIGh0dHA6Ly93d3cucG93ZXJzaGVsbG1hZ2F6aW5lLmNvbS8yMDE0LzA5LzI1L2Vhc2lseS1kZWZpbmluZy1lbnVtcy1zdHJ1Y3RzLWFuZC13aW4zMi1mdW5jdGlvbnMtaW4tbWVtb3J5LwojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW09iamVjdFtdXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnCiAgICApCgogICAgIyBleHRyYWN0IHRoZSBjb21wdXRlciBuYW1lIGZyb20gd2hhdGV2ZXIgb2JqZWN0IHdhcyBwYXNzZWQgb24gdGhlIHBpcGVsaW5lCiAgICAkQ29tcHV0ZXIgPSAkQ29tcHV0ZXJOYW1lIHwgR2V0LU5hbWVGaWVsZAoKICAgICMgRGVjbGFyZSB0aGUgcmVmZXJlbmNlIHZhcmlhYmxlcwogICAgJFF1ZXJ5TGV2ZWwgPSAxCiAgICAkUHRySW5mbyA9IFtJbnRQdHJdOjpaZXJvCiAgICAkRW50cmllc1JlYWQgPSAwCiAgICAkVG90YWxSZWFkID0gMAogICAgJFJlc3VtZUhhbmRsZSA9IDAKCiAgICAjIGdldCBsb2dnZWQgb24gdXNlciBpbmZvcm1hdGlvbgogICAgJFJlc3VsdCA9ICROZXRhcGkzMjo6TmV0V2tzdGFVc2VyRW51bSgkQ29tcHV0ZXIsICRRdWVyeUxldmVsLCBbcmVmXSRQdHJJbmZvLCAtMSwgW3JlZl0kRW50cmllc1JlYWQsIFtyZWZdJFRvdGFsUmVhZCwgW3JlZl0kUmVzdW1lSGFuZGxlKQoKICAgICMgTG9jYXRlIHRoZSBvZmZzZXQgb2YgdGhlIGluaXRpYWwgaW50UHRyCiAgICAkT2Zmc2V0ID0gJFB0ckluZm8uVG9JbnQ2NCgpCgogICAgIyAwID0gc3VjY2VzcwogICAgaWYgKCgkUmVzdWx0IC1lcSAwKSAtYW5kICgkT2Zmc2V0IC1ndCAwKSkgewoKICAgICAgICAjIFdvcmsgb3V0IGhvdyBtdWNoIHRvIGluY3JlbWVudCB0aGUgcG9pbnRlciBieSBmaW5kaW5nIG91dCB0aGUgc2l6ZSBvZiB0aGUgc3RydWN0dXJlCiAgICAgICAgJEluY3JlbWVudCA9ICRXS1NUQV9VU0VSX0lORk9fMTo6R2V0U2l6ZSgpCgogICAgICAgICMgcGFyc2UgYWxsIHRoZSByZXN1bHQgc3RydWN0dXJlcwogICAgICAgIGZvciAoJGkgPSAwOyAoJGkgLWx0ICRFbnRyaWVzUmVhZCk7ICRpKyspIHsKICAgICAgICAgICAgIyBjcmVhdGUgYSBuZXcgaW50IHB0ciBhdCB0aGUgZ2l2ZW4gb2Zmc2V0IGFuZCBjYXN0IHRoZSBwb2ludGVyIGFzIG91ciByZXN1bHQgc3RydWN0dXJlCiAgICAgICAgICAgICROZXdJbnRQdHIgPSBOZXctT2JqZWN0IFN5c3RlbS5JbnRwdHIgLUFyZ3VtZW50TGlzdCAkT2Zmc2V0CiAgICAgICAgICAgICRJbmZvID0gJE5ld0ludFB0ciAtYXMgJFdLU1RBX1VTRVJfSU5GT18xCgogICAgICAgICAgICAjIHJldHVybiBhbGwgdGhlIHNlY3Rpb25zIG9mIHRoZSBzdHJ1Y3R1cmUKICAgICAgICAgICAgJExvZ2dlZE9uID0gJEluZm8gfCBTZWxlY3QtT2JqZWN0ICoKICAgICAgICAgICAgJExvZ2dlZE9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgICAgICRPZmZzZXQgPSAkTmV3SW50UHRyLlRvSW50NjQoKQogICAgICAgICAgICAkT2Zmc2V0ICs9ICRJbmNyZW1lbnQKICAgICAgICAgICAgJExvZ2dlZE9uCiAgICAgICAgfQoKICAgICAgICAjIGZyZWUgdXAgdGhlIHJlc3VsdCBidWZmZXIKICAgICAgICAkTnVsbCA9ICROZXRhcGkzMjo6TmV0QXBpQnVmZmVyRnJlZSgkUHRySW5mbykKICAgIH0KICAgIGVsc2UgewogICAgICAgIFdyaXRlLVZlcmJvc2UgIkVycm9yOiAkKChbQ29tcG9uZW50TW9kZWwuV2luMzJFeGNlcHRpb25dICRSZXN1bHQpLk1lc3NhZ2UpIgogICAgfQp9CgoKZmlsdGVyIEdldC1OZXRTZXNzaW9uIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBUaGlzIGZ1bmN0aW9uIHdpbGwgZXhlY3V0ZSB0aGUgTmV0U2Vzc2lvbkVudW0gV2luMzJBUEkgY2FsbCB0byBxdWVyeQogICAgICAgIGEgZ2l2ZW4gaG9zdCBmb3IgYWN0aXZlIHNlc3Npb25zIG9uIHRoZSBob3N0LgogICAgICAgIEhlYXZpbHkgYWRhcHRlZCBmcm9tIGR1bmVkaW5pdGUncyBwb3N0IG9uIHN0YWNrb3ZlcmZsb3cgKHNlZSBMSU5LIGJlbG93KQoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIFRoZSBDb21wdXRlck5hbWUgdG8gcXVlcnkgZm9yIGFjdGl2ZSBzZXNzaW9ucy4KCiAgICAuUEFSQU1FVEVSIFVzZXJOYW1lCgogICAgICAgIFRoZSB1c2VyIG5hbWUgdG8gZmlsdGVyIGZvciBhY3RpdmUgc2Vzc2lvbnMuCgogICAgLk9VVFBVVFMKCiAgICAgICAgU0VTU0lPTl9JTkZPXzEwIHN0cnVjdHVyZS4gQSByZXByZXNlbnRhdGlvbiBvZiB0aGUgU0VTU0lPTl9JTkZPXzEwCiAgICAgICAgcmVzdWx0IHN0cnVjdHVyZSB3aGljaCBpbmNsdWRlcyB0aGUgaG9zdCBhbmQgdXNlcm5hbWUgYXNzb2NpYXRlZAogICAgICAgIHdpdGggYWN0aXZlIHNlc3Npb25zLCB3aXRoIHRoZSBDb21wdXRlck5hbWUgYWRkZWQuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0U2Vzc2lvbgoKICAgICAgICBSZXR1cm5zIGFjdGl2ZSBzZXNzaW9ucyBvbiB0aGUgbG9jYWwgaG9zdC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRTZXNzaW9uIC1Db21wdXRlck5hbWUgc3Fsc2VydmVyCgogICAgICAgIFJldHVybnMgYWN0aXZlIHNlc3Npb25zIG9uIHRoZSAnc3Fsc2VydmVyJyBob3N0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldERvbWFpbkNvbnRyb2xsZXIgfCBHZXQtTmV0U2Vzc2lvbgoKICAgICAgICBSZXR1cm5zIGFjdGl2ZSBzZXNzaW9ucyBvbiBhbGwgZG9tYWluIGNvbnRyb2xsZXJzLgoKICAgIC5MSU5LCgogICAgICAgIGh0dHA6Ly93d3cucG93ZXJzaGVsbG1hZ2F6aW5lLmNvbS8yMDE0LzA5LzI1L2Vhc2lseS1kZWZpbmluZy1lbnVtcy1zdHJ1Y3RzLWFuZC13aW4zMi1mdW5jdGlvbnMtaW4tbWVtb3J5LwojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW09iamVjdFtdXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyTmFtZSA9ICcnCiAgICApCgogICAgIyBleHRyYWN0IHRoZSBjb21wdXRlciBuYW1lIGZyb20gd2hhdGV2ZXIgb2JqZWN0IHdhcyBwYXNzZWQgb24gdGhlIHBpcGVsaW5lCiAgICAkQ29tcHV0ZXIgPSAkQ29tcHV0ZXJOYW1lIHwgR2V0LU5hbWVGaWVsZAoKICAgICMgYXJndW1lbnRzIGZvciBOZXRTZXNzaW9uRW51bQogICAgJFF1ZXJ5TGV2ZWwgPSAxMAogICAgJFB0ckluZm8gPSBbSW50UHRyXTo6WmVybwogICAgJEVudHJpZXNSZWFkID0gMAogICAgJFRvdGFsUmVhZCA9IDAKICAgICRSZXN1bWVIYW5kbGUgPSAwCgogICAgIyBnZXQgc2Vzc2lvbiBpbmZvcm1hdGlvbgogICAgJFJlc3VsdCA9ICROZXRhcGkzMjo6TmV0U2Vzc2lvbkVudW0oJENvbXB1dGVyLCAnJywgJFVzZXJOYW1lLCAkUXVlcnlMZXZlbCwgW3JlZl0kUHRySW5mbywgLTEsIFtyZWZdJEVudHJpZXNSZWFkLCBbcmVmXSRUb3RhbFJlYWQsIFtyZWZdJFJlc3VtZUhhbmRsZSkKCiAgICAjIExvY2F0ZSB0aGUgb2Zmc2V0IG9mIHRoZSBpbml0aWFsIGludFB0cgogICAgJE9mZnNldCA9ICRQdHJJbmZvLlRvSW50NjQoKQoKICAgICMgMCA9IHN1Y2Nlc3MKICAgIGlmICgoJFJlc3VsdCAtZXEgMCkgLWFuZCAoJE9mZnNldCAtZ3QgMCkpIHsKCiAgICAgICAgIyBXb3JrIG91dCBob3cgbXVjaCB0byBpbmNyZW1lbnQgdGhlIHBvaW50ZXIgYnkgZmluZGluZyBvdXQgdGhlIHNpemUgb2YgdGhlIHN0cnVjdHVyZQogICAgICAgICRJbmNyZW1lbnQgPSAkU0VTU0lPTl9JTkZPXzEwOjpHZXRTaXplKCkKCiAgICAgICAgIyBwYXJzZSBhbGwgdGhlIHJlc3VsdCBzdHJ1Y3R1cmVzCiAgICAgICAgZm9yICgkaSA9IDA7ICgkaSAtbHQgJEVudHJpZXNSZWFkKTsgJGkrKykgewogICAgICAgICAgICAjIGNyZWF0ZSBhIG5ldyBpbnQgcHRyIGF0IHRoZSBnaXZlbiBvZmZzZXQgYW5kIGNhc3QgdGhlIHBvaW50ZXIgYXMgb3VyIHJlc3VsdCBzdHJ1Y3R1cmUKICAgICAgICAgICAgJE5ld0ludFB0ciA9IE5ldy1PYmplY3QgU3lzdGVtLkludHB0ciAtQXJndW1lbnRMaXN0ICRPZmZzZXQKICAgICAgICAgICAgJEluZm8gPSAkTmV3SW50UHRyIC1hcyAkU0VTU0lPTl9JTkZPXzEwCgogICAgICAgICAgICAjIHJldHVybiBhbGwgdGhlIHNlY3Rpb25zIG9mIHRoZSBzdHJ1Y3R1cmUKICAgICAgICAgICAgJFNlc3Npb25zID0gJEluZm8gfCBTZWxlY3QtT2JqZWN0ICoKICAgICAgICAgICAgJFNlc3Npb25zIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgICAgICRPZmZzZXQgPSAkTmV3SW50UHRyLlRvSW50NjQoKQogICAgICAgICAgICAkT2Zmc2V0ICs9ICRJbmNyZW1lbnQKICAgICAgICAgICAgJFNlc3Npb25zCiAgICAgICAgfQogICAgICAgICMgZnJlZSB1cCB0aGUgcmVzdWx0IGJ1ZmZlcgogICAgICAgICROdWxsID0gJE5ldGFwaTMyOjpOZXRBcGlCdWZmZXJGcmVlKCRQdHJJbmZvKQogICAgfQogICAgZWxzZSB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3I6ICQoKFtDb21wb25lbnRNb2RlbC5XaW4zMkV4Y2VwdGlvbl0gJFJlc3VsdCkuTWVzc2FnZSkiCiAgICB9Cn0KCgpmaWx0ZXIgR2V0LUxvZ2dlZE9uTG9jYWwgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFRoaXMgZnVuY3Rpb24gd2lsbCBxdWVyeSB0aGUgSEtVIHJlZ2lzdHJ5IHZhbHVlcyB0byByZXRyaWV2ZSB0aGUgbG9jYWwKICAgICAgICBsb2dnZWQgb24gdXNlcnMgU0lEIGFuZCB0aGVuIGF0dGVtcHQgYW5kIHJldmVyc2UgaXQuCiAgICAgICAgQWRhcHRlZCB0ZWNobmlxdWUgZnJvbSBTeXNpbnRlcm5hbCdzIFBTTG9nZ2VkT24gc2NyaXB0LiBCZW5lZml0IG92ZXIKICAgICAgICB1c2luZyB0aGUgTmV0V2tzdGFVc2VyRW51bSBBUEkgKEdldC1OZXRMb2dnZWRvbikgb2YgbGVzcyB1c2VyIHByaXZpbGVnZXMKICAgICAgICByZXF1aXJlZCAoTmV0V2tzdGFVc2VyRW51bSByZXF1aXJlcyByZW1vdGUgYWRtaW4gYWNjZXNzKS4KCiAgICAgICAgTm90ZTogVGhpcyBmdW5jdGlvbiByZXF1aXJlcyBvbmx5IGRvbWFpbiB1c2VyIHJpZ2h0cyBvbiB0aGUKICAgICAgICBtYWNoaW5lIHlvdSdyZSBlbnVtZXJhdGluZywgYnV0IHJlbW90ZSByZWdpc3RyeSBtdXN0IGJlIGVuYWJsZWQuCgogICAgICAgIEZ1bmN0aW9uOiBHZXQtTG9nZ2VkT25Mb2NhbAogICAgICAgIEF1dGhvcjogTWF0dCBLZWxseSwgQEJyZWFrZXJzQWxsCgogICAgLlBBUkFNRVRFUiBDb21wdXRlck5hbWUKCiAgICAgICAgVGhlIENvbXB1dGVyTmFtZSB0byBxdWVyeSBmb3IgYWN0aXZlIHNlc3Npb25zLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LUxvZ2dlZE9uTG9jYWwKCiAgICAgICAgUmV0dXJucyBhY3RpdmUgc2Vzc2lvbnMgb24gdGhlIGxvY2FsIGhvc3QuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTG9nZ2VkT25Mb2NhbCAtQ29tcHV0ZXJOYW1lIHNxbHNlcnZlcgoKICAgICAgICBSZXR1cm5zIGFjdGl2ZSBzZXNzaW9ucyBvbiB0aGUgJ3NxbHNlcnZlcicgaG9zdC4KCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnKV0KICAgICAgICBbT2JqZWN0W11dCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJ2xvY2FsaG9zdCcKICAgICkKCiAgICAjIHByb2Nlc3MgbXVsdGlwbGUgaG9zdCBvYmplY3QgdHlwZXMgZnJvbSB0aGUgcGlwZWxpbmUKICAgICRDb21wdXRlck5hbWUgPSBHZXQtTmFtZUZpZWxkIC1PYmplY3QgJENvbXB1dGVyTmFtZQoKICAgIHRyeSB7CiAgICAgICAgIyByZXRyaWV2ZSBIS1UgcmVtb3RlIHJlZ2lzdHJ5IHZhbHVlcwogICAgICAgICRSZWcgPSBbTWljcm9zb2Z0LldpbjMyLlJlZ2lzdHJ5S2V5XTo6T3BlblJlbW90ZUJhc2VLZXkoJ1VzZXJzJywgIiRDb21wdXRlck5hbWUiKQoKICAgICAgICAjIHNvcnQgb3V0IGJvZ3VzIHNpZCdzIGxpa2UgX2NsYXNzCiAgICAgICAgJFJlZy5HZXRTdWJLZXlOYW1lcygpIHwgV2hlcmUtT2JqZWN0IHsgJF8gLW1hdGNoICdTLTEtNS0yMS1bMC05XSstWzAtOV0rLVswLTldKy1bMC05XSskJyB9IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAkVXNlck5hbWUgPSBDb252ZXJ0LVNpZFRvTmFtZSAkXwoKICAgICAgICAgICAgJFBhcnRzID0gJFVzZXJOYW1lLlNwbGl0KCdcJykKICAgICAgICAgICAgJFVzZXJEb21haW4gPSAkTnVsbAogICAgICAgICAgICAkVXNlck5hbWUgPSAkUGFydHNbLTFdCiAgICAgICAgICAgIGlmICgkUGFydHMuTGVuZ3RoIC1lcSAyKSB7CiAgICAgICAgICAgICAgICAkVXNlckRvbWFpbiA9ICRQYXJ0c1swXQogICAgICAgICAgICB9CgogICAgICAgICAgICAkTG9jYWxMb2dnZWRPblVzZXIgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICRMb2NhbExvZ2dlZE9uVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICIkQ29tcHV0ZXJOYW1lIgogICAgICAgICAgICAkTG9jYWxMb2dnZWRPblVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlckRvbWFpbicgJFVzZXJEb21haW4KICAgICAgICAgICAgJExvY2FsTG9nZ2VkT25Vc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAkVXNlck5hbWUKICAgICAgICAgICAgJExvY2FsTG9nZ2VkT25Vc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJTSUQnICRfCiAgICAgICAgICAgICRMb2NhbExvZ2dlZE9uVXNlcgogICAgICAgIH0KICAgIH0KICAgIGNhdGNoIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvciBvcGVuaW5nIHJlbW90ZSByZWdpc3RyeSBvbiAnJENvbXB1dGVyTmFtZSciCiAgICB9Cn0KCgpmaWx0ZXIgR2V0LU5ldFJEUFNlc3Npb24gewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFRoaXMgZnVuY3Rpb24gd2lsbCBleGVjdXRlIHRoZSBXVFNFbnVtZXJhdGVTZXNzaW9uc0V4IGFuZCAKICAgICAgICBXVFNRdWVyeVNlc3Npb25JbmZvcm1hdGlvbiBXaW4zMkFQSSBjYWxscyB0byBxdWVyeSBhIGdpdmVuCiAgICAgICAgUkRQIHJlbW90ZSBzZXJ2aWNlIGZvciBhY3RpdmUgc2Vzc2lvbnMgYW5kIG9yaWdpbmF0aW5nIElQcy4KICAgICAgICBUaGlzIGlzIGEgcmVwbGFjZW1lbnQgZm9yIHF3aW5zdGEuCgogICAgICAgIE5vdGU6IG9ubHkgbWVtYmVycyBvZiB0aGUgQWRtaW5pc3RyYXRvcnMgb3IgQWNjb3VudCBPcGVyYXRvcnMgbG9jYWwgZ3JvdXAKICAgICAgICBjYW4gc3VjY2Vzc2Z1bGx5IGV4ZWN1dGUgdGhpcyBmdW5jdGlvbmFsaXR5IG9uIGEgcmVtb3RlIHRhcmdldC4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBUaGUgaG9zdG5hbWUgdG8gcXVlcnkgZm9yIGFjdGl2ZSBSRFAgc2Vzc2lvbnMuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0UkRQU2Vzc2lvbgoKICAgICAgICBSZXR1cm5zIGFjdGl2ZSBSRFAvdGVybWluYWwgc2Vzc2lvbnMgb24gdGhlIGxvY2FsIGhvc3QuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0UkRQU2Vzc2lvbiAtQ29tcHV0ZXJOYW1lICJzcWxzZXJ2ZXIiCgogICAgICAgIFJldHVybnMgYWN0aXZlIFJEUC90ZXJtaW5hbCBzZXNzaW9ucyBvbiB0aGUgJ3NxbHNlcnZlcicgaG9zdC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXREb21haW5Db250cm9sbGVyIHwgR2V0LU5ldFJEUFNlc3Npb24KCiAgICAgICAgUmV0dXJucyBhY3RpdmUgUkRQL3Rlcm1pbmFsIHNlc3Npb25zIG9uIGFsbCBkb21haW4gY29udHJvbGxlcnMuCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnKV0KICAgICAgICBbT2JqZWN0W11dCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJ2xvY2FsaG9zdCcKICAgICkKCiAgICAjIGV4dHJhY3QgdGhlIGNvbXB1dGVyIG5hbWUgZnJvbSB3aGF0ZXZlciBvYmplY3Qgd2FzIHBhc3NlZCBvbiB0aGUgcGlwZWxpbmUKICAgICRDb21wdXRlciA9ICRDb21wdXRlck5hbWUgfCBHZXQtTmFtZUZpZWxkCgogICAgIyBvcGVuIHVwIGEgaGFuZGxlIHRvIHRoZSBSZW1vdGUgRGVza3RvcCBTZXNzaW9uIGhvc3QKICAgICRIYW5kbGUgPSAkV3RzYXBpMzI6OldUU09wZW5TZXJ2ZXJFeCgkQ29tcHV0ZXIpCgogICAgIyBpZiB3ZSBnZXQgYSBub24temVybyBoYW5kbGUgYmFjaywgZXZlcnl0aGluZyB3YXMgc3VjY2Vzc2Z1bAogICAgaWYgKCRIYW5kbGUgLW5lIDApIHsKCiAgICAgICAgIyBhcmd1bWVudHMgZm9yIFdUU0VudW1lcmF0ZVNlc3Npb25zRXgKICAgICAgICAkcHBTZXNzaW9uSW5mbyA9IFtJbnRQdHJdOjpaZXJvCiAgICAgICAgJHBDb3VudCA9IDAKICAgICAgICAKICAgICAgICAjIGdldCBpbmZvcm1hdGlvbiBvbiBhbGwgY3VycmVudCBzZXNzaW9ucwogICAgICAgICRSZXN1bHQgPSAkV3RzYXBpMzI6OldUU0VudW1lcmF0ZVNlc3Npb25zRXgoJEhhbmRsZSwgW3JlZl0xLCAwLCBbcmVmXSRwcFNlc3Npb25JbmZvLCBbcmVmXSRwQ291bnQpOyRMYXN0RXJyb3IgPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldExhc3RXaW4zMkVycm9yKCkKCiAgICAgICAgIyBMb2NhdGUgdGhlIG9mZnNldCBvZiB0aGUgaW5pdGlhbCBpbnRQdHIKICAgICAgICAkT2Zmc2V0ID0gJHBwU2Vzc2lvbkluZm8uVG9JbnQ2NCgpCgogICAgICAgIGlmICgoJFJlc3VsdCAtbmUgMCkgLWFuZCAoJE9mZnNldCAtZ3QgMCkpIHsKCiAgICAgICAgICAgICMgV29yayBvdXQgaG93IG11Y2ggdG8gaW5jcmVtZW50IHRoZSBwb2ludGVyIGJ5IGZpbmRpbmcgb3V0IHRoZSBzaXplIG9mIHRoZSBzdHJ1Y3R1cmUKICAgICAgICAgICAgJEluY3JlbWVudCA9ICRXVFNfU0VTU0lPTl9JTkZPXzE6OkdldFNpemUoKQoKICAgICAgICAgICAgIyBwYXJzZSBhbGwgdGhlIHJlc3VsdCBzdHJ1Y3R1cmVzCiAgICAgICAgICAgIGZvciAoJGkgPSAwOyAoJGkgLWx0ICRwQ291bnQpOyAkaSsrKSB7CiAKICAgICAgICAgICAgICAgICMgY3JlYXRlIGEgbmV3IGludCBwdHIgYXQgdGhlIGdpdmVuIG9mZnNldCBhbmQgY2FzdCB0aGUgcG9pbnRlciBhcyBvdXIgcmVzdWx0IHN0cnVjdHVyZQogICAgICAgICAgICAgICAgJE5ld0ludFB0ciA9IE5ldy1PYmplY3QgU3lzdGVtLkludHB0ciAtQXJndW1lbnRMaXN0ICRPZmZzZXQKICAgICAgICAgICAgICAgICRJbmZvID0gJE5ld0ludFB0ciAtYXMgJFdUU19TRVNTSU9OX0lORk9fMQoKICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uID0gTmV3LU9iamVjdCBQU09iamVjdAoKICAgICAgICAgICAgICAgIGlmICgkSW5mby5wSG9zdE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAkUkRQU2Vzc2lvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRJbmZvLnBIb3N0TmFtZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgIyBpZiBubyBob3N0bmFtZSByZXR1cm5lZCwgdXNlIHRoZSBzcGVjaWZpZWQgaG9zdG5hbWUKICAgICAgICAgICAgICAgICAgICAkUkRQU2Vzc2lvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1Nlc3Npb25OYW1lJyAkSW5mby5wU2Vzc2lvbk5hbWUKCiAgICAgICAgICAgICAgICBpZiAoJCgtbm90ICRJbmZvLnBEb21haW5OYW1lKSAtb3IgKCRJbmZvLnBEb21haW5OYW1lIC1lcSAnJykpIHsKICAgICAgICAgICAgICAgICAgICAjIGlmIGEgZG9tYWluIGlzbid0IHJldHVybmVkIGp1c3QgdXNlIHRoZSB1c2VybmFtZQogICAgICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAiJCgkSW5mby5wVXNlck5hbWUpIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJFJEUFNlc3Npb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlck5hbWUnICIkKCRJbmZvLnBEb21haW5OYW1lKVwkKCRJbmZvLnBVc2VyTmFtZSkiCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJFJEUFNlc3Npb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSUQnICRJbmZvLlNlc3Npb25JRAogICAgICAgICAgICAgICAgJFJEUFNlc3Npb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU3RhdGUnICRJbmZvLlN0YXRlCgogICAgICAgICAgICAgICAgJHBwQnVmZmVyID0gW0ludFB0cl06Olplcm8KICAgICAgICAgICAgICAgICRwQnl0ZXNSZXR1cm5lZCA9IDAKCiAgICAgICAgICAgICAgICAjIHF1ZXJ5IGZvciB0aGUgc291cmNlIGNsaWVudCBJUCB3aXRoIFdUU1F1ZXJ5U2Vzc2lvbkluZm9ybWF0aW9uCiAgICAgICAgICAgICAgICAjICAgaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9hYTM4Mzg2MSh2PXZzLjg1KS5hc3B4CiAgICAgICAgICAgICAgICAkUmVzdWx0MiA9ICRXdHNhcGkzMjo6V1RTUXVlcnlTZXNzaW9uSW5mb3JtYXRpb24oJEhhbmRsZSwgJEluZm8uU2Vzc2lvbklELCAxNCwgW3JlZl0kcHBCdWZmZXIsIFtyZWZdJHBCeXRlc1JldHVybmVkKTskTGFzdEVycm9yMiA9IFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0TGFzdFdpbjMyRXJyb3IoKQoKICAgICAgICAgICAgICAgIGlmKCRSZXN1bHQgLWVxIDApIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkTGFzdEVycm9yMikuTWVzc2FnZSkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkT2Zmc2V0MiA9ICRwcEJ1ZmZlci5Ub0ludDY0KCkKICAgICAgICAgICAgICAgICAgICAkTmV3SW50UHRyMiA9IE5ldy1PYmplY3QgU3lzdGVtLkludHB0ciAtQXJndW1lbnRMaXN0ICRPZmZzZXQyCiAgICAgICAgICAgICAgICAgICAgJEluZm8yID0gJE5ld0ludFB0cjIgLWFzICRXVFNfQ0xJRU5UX0FERFJFU1MKCiAgICAgICAgICAgICAgICAgICAgJFNvdXJjZUlQID0gJEluZm8yLkFkZHJlc3MgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYoJFNvdXJjZUlQWzJdIC1uZSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRTb3VyY2VJUCA9IFtTdHJpbmddJFNvdXJjZUlQWzJdKyIuIitbU3RyaW5nXSRTb3VyY2VJUFszXSsiLiIrW1N0cmluZ10kU291cmNlSVBbNF0rIi4iK1tTdHJpbmddJFNvdXJjZUlQWzVdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkU291cmNlSVAgPSAkTnVsbAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgJFJEUFNlc3Npb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU291cmNlSVAnICRTb3VyY2VJUAogICAgICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uCgogICAgICAgICAgICAgICAgICAgICMgZnJlZSB1cCB0aGUgbWVtb3J5IGJ1ZmZlcgogICAgICAgICAgICAgICAgICAgICROdWxsID0gJFd0c2FwaTMyOjpXVFNGcmVlTWVtb3J5KCRwcEJ1ZmZlcikKCiAgICAgICAgICAgICAgICAgICAgJE9mZnNldCArPSAkSW5jcmVtZW50CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgIyBmcmVlIHVwIHRoZSBtZW1vcnkgcmVzdWx0IGJ1ZmZlcgogICAgICAgICAgICAkTnVsbCA9ICRXdHNhcGkzMjo6V1RTRnJlZU1lbW9yeUV4KDIsICRwcFNlc3Npb25JbmZvLCAkcENvdW50KQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3I6ICQoKFtDb21wb25lbnRNb2RlbC5XaW4zMkV4Y2VwdGlvbl0gJExhc3RFcnJvcikuTWVzc2FnZSkiCiAgICAgICAgfQogICAgICAgICMgQ2xvc2Ugb2ZmIHRoZSBzZXJ2aWNlIGhhbmRsZQogICAgICAgICROdWxsID0gJFd0c2FwaTMyOjpXVFNDbG9zZVNlcnZlcigkSGFuZGxlKQogICAgfQogICAgZWxzZSB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3Igb3BlbmluZyB0aGUgUmVtb3RlIERlc2t0b3AgU2Vzc2lvbiBIb3N0IChSRCBTZXNzaW9uIEhvc3QpIHNlcnZlciBmb3I6ICRDb21wdXRlck5hbWUiCiAgICB9Cn0KCgpmaWx0ZXIgSW52b2tlLUNoZWNrTG9jYWxBZG1pbkFjY2VzcyB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgVGhpcyBmdW5jdGlvbiB3aWxsIHVzZSB0aGUgT3BlblNDTWFuYWdlclcgV2luMzJBUEkgY2FsbCB0byBlc3RhYmxpc2gKICAgICAgICBhIGhhbmRsZSB0byB0aGUgcmVtb3RlIGhvc3QuIElmIHRoaXMgc3VjY2VlZHMsIHRoZSBjdXJyZW50IHVzZXIgY29udGV4dAogICAgICAgIGhhcyBsb2NhbCBhZG1pbmlzdHJhdG9yIGFjZXNzIHRvIHRoZSB0YXJnZXQuCgogICAgICAgIElkZWEgc3RvbGVuIGZyb20gdGhlIGxvY2FsX2FkbWluX3NlYXJjaF9lbnVtIHBvc3QgbW9kdWxlIGluIE1ldGFzcGxvaXQgd3JpdHRlbiBieToKICAgICAgICAgICAgJ0JyYW5kb24gTWNDYW5uICJ6ZWtub3giIDxibWNjYW5uW2F0XWFjY3V2YW50LmNvbT4nCiAgICAgICAgICAgICdUaG9tYXMgTWNDYXJ0aHkgInNtaWxpbmdyYWNjb29uIiA8c21pbGluZ3JhY2Nvb25bYXRdZ21haWwuY29tPicKICAgICAgICAgICAgJ1JveWNlIERhdmlzICJyM2R5IiA8cmRhdmlzW2F0XWFjY3V2YW50LmNvbT4nCgogICAgLlBBUkFNRVRFUiBDb21wdXRlck5hbWUKCiAgICAgICAgVGhlIGhvc3RuYW1lIHRvIHF1ZXJ5IGZvciBhY3RpdmUgc2Vzc2lvbnMuCgogICAgLk9VVFBVVFMKCiAgICAgICAgJFRydWUgaWYgdGhlIGN1cnJlbnQgdXNlciBoYXMgbG9jYWwgYWRtaW4gYWNjZXNzIHRvIHRoZSBob3N0bmFtZSwgJEZhbHNlIG90aGVyd2lzZQoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gSW52b2tlLUNoZWNrTG9jYWxBZG1pbkFjY2VzcyAtQ29tcHV0ZXJOYW1lIHNxbHNlcnZlcgoKICAgICAgICBSZXR1cm5zIGFjdGl2ZSBzZXNzaW9ucyBvbiB0aGUgbG9jYWwgaG9zdC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRDb21wdXRlciB8IEludm9rZS1DaGVja0xvY2FsQWRtaW5BY2Nlc3MKCiAgICAgICAgU2VlcyB3aGF0IG1hY2hpbmVzIGluIHRoZSBkb21haW4gdGhlIGN1cnJlbnQgdXNlciBoYXMgYWNjZXNzIHRvLgoKICAgIC5MSU5LCgogICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9yYXBpZDcvbWV0YXNwbG9pdC1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvbW9kdWxlcy9wb3N0L3dpbmRvd3MvZ2F0aGVyL2xvY2FsX2FkbWluX3NlYXJjaF9lbnVtLnJiCiAgICAgICAgaHR0cDovL3d3dy5wb3dlcnNoZWxsbWFnYXppbmUuY29tLzIwMTQvMDkvMjUvZWFzaWx5LWRlZmluaW5nLWVudW1zLXN0cnVjdHMtYW5kLXdpbjMyLWZ1bmN0aW9ucy1pbi1tZW1vcnkvCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnKV0KICAgICAgICBbT2JqZWN0W11dCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJ2xvY2FsaG9zdCcKICAgICkKCiAgICAjIGV4dHJhY3QgdGhlIGNvbXB1dGVyIG5hbWUgZnJvbSB3aGF0ZXZlciBvYmplY3Qgd2FzIHBhc3NlZCBvbiB0aGUgcGlwZWxpbmUKICAgICRDb21wdXRlciA9ICRDb21wdXRlck5hbWUgfCBHZXQtTmFtZUZpZWxkCgogICAgIyAweEYwMDNGIC0gU0NfTUFOQUdFUl9BTExfQUNDRVNTCiAgICAjICAgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3dpbmRvd3MvZGVza3RvcC9tczY4NTk4MSh2PXZzLjg1KS5hc3B4CiAgICAkSGFuZGxlID0gJEFkdmFwaTMyOjpPcGVuU0NNYW5hZ2VyVygiXFwkQ29tcHV0ZXIiLCAnU2VydmljZXNBY3RpdmUnLCAweEYwMDNGKTskTGFzdEVycm9yID0gW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXRMYXN0V2luMzJFcnJvcigpCgogICAgV3JpdGUtVmVyYm9zZSAiSW52b2tlLUNoZWNrTG9jYWxBZG1pbkFjY2VzcyBoYW5kbGU6ICRIYW5kbGUiCgogICAgJElzQWRtaW4gPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAkSXNBZG1pbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgoKICAgICMgaWYgd2UgZ2V0IGEgbm9uLXplcm8gaGFuZGxlIGJhY2ssIGV2ZXJ5dGhpbmcgd2FzIHN1Y2Nlc3NmdWwKICAgIGlmICgkSGFuZGxlIC1uZSAwKSB7CiAgICAgICAgJE51bGwgPSAkQWR2YXBpMzI6OkNsb3NlU2VydmljZUhhbmRsZSgkSGFuZGxlKQogICAgICAgICRJc0FkbWluIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzQWRtaW4nICRUcnVlCiAgICB9CiAgICBlbHNlIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkTGFzdEVycm9yKS5NZXNzYWdlKSIKICAgICAgICAkSXNBZG1pbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJc0FkbWluJyAkRmFsc2UKICAgIH0KCiAgICAkSXNBZG1pbgp9CgoKZmlsdGVyIEdldC1TaXRlTmFtZSB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgVGhpcyBmdW5jdGlvbiB3aWxsIHVzZSB0aGUgRHNHZXRTaXRlTmFtZSBXaW4zMkFQSSBjYWxsIHRvIGxvb2sgdXAgdGhlCiAgICAgICAgbmFtZSBvZiB0aGUgc2l0ZSB3aGVyZSBhIHNwZWNpZmllZCBjb21wdXRlciByZXNpZGVzLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIFRoZSBob3N0bmFtZSB0byBsb29rIHRoZSBzaXRlIHVwIGZvciwgZGVmYXVsdCB0byBsb2NhbGhvc3QuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtU2l0ZU5hbWUgLUNvbXB1dGVyTmFtZSBXSU5ET1dTMQoKICAgICAgICBSZXR1cm5zIHRoZSBzaXRlIGZvciBXSU5ET1dTMS50ZXN0bGFiLmxvY2FsLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldENvbXB1dGVyIHwgR2V0LVNpdGVOYW1lCgogICAgICAgIFJldHVybnMgdGhlIHNpdGVzIGZvciBldmVyeSBtYWNoaW5lIGluIEFELgojPgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnKV0KICAgICAgICBbT2JqZWN0W11dCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJEVudjpDb21wdXRlck5hbWUKICAgICkKCiAgICAjIGV4dHJhY3QgdGhlIGNvbXB1dGVyIG5hbWUgZnJvbSB3aGF0ZXZlciBvYmplY3Qgd2FzIHBhc3NlZCBvbiB0aGUgcGlwZWxpbmUKICAgICRDb21wdXRlciA9ICRDb21wdXRlck5hbWUgfCBHZXQtTmFtZUZpZWxkCgogICAgIyBpZiB3ZSBnZXQgYW4gSVAgYWRkcmVzcywgdHJ5IHRvIHJlc29sdmUgdGhlIElQIHRvIGEgaG9zdG5hbWUKICAgIGlmKCRDb21wdXRlciAtbWF0Y2ggJ14oPzpbMC05XXsxLDN9XC4pezN9WzAtOV17MSwzfSQnKSB7CiAgICAgICAgJElQQWRkcmVzcyA9ICRDb21wdXRlcgogICAgICAgICRDb21wdXRlciA9IFtTeXN0ZW0uTmV0LkRuc106OkdldEhvc3RCeUFkZHJlc3MoJENvbXB1dGVyKQogICAgfQogICAgZWxzZSB7CiAgICAgICAgJElQQWRkcmVzcyA9IEAoR2V0LUlQQWRkcmVzcyAtQ29tcHV0ZXJOYW1lICRDb21wdXRlcilbMF0uSVBBZGRyZXNzCiAgICB9CgogICAgJFB0ckluZm8gPSBbSW50UHRyXTo6WmVybwoKICAgICRSZXN1bHQgPSAkTmV0YXBpMzI6OkRzR2V0U2l0ZU5hbWUoJENvbXB1dGVyLCBbcmVmXSRQdHJJbmZvKQoKICAgICRDb21wdXRlclNpdGUgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAkQ29tcHV0ZXJTaXRlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAkQ29tcHV0ZXJTaXRlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lQQWRkcmVzcycgJElQQWRkcmVzcwoKICAgIGlmICgkUmVzdWx0IC1lcSAwKSB7CiAgICAgICAgJFNpdGVuYW1lID0gW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6UHRyVG9TdHJpbmdBdXRvKCRQdHJJbmZvKQogICAgICAgICRDb21wdXRlclNpdGUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU2l0ZU5hbWUnICRTaXRlbmFtZQogICAgfQogICAgZWxzZSB7CiAgICAgICAgJEVycm9yTWVzc2FnZSA9ICJFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkUmVzdWx0KS5NZXNzYWdlKSIKICAgICAgICAkQ29tcHV0ZXJTaXRlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NpdGVOYW1lJyAkRXJyb3JNZXNzYWdlCiAgICB9CgogICAgJE51bGwgPSAkTmV0YXBpMzI6Ok5ldEFwaUJ1ZmZlckZyZWUoJFB0ckluZm8pCgogICAgJENvbXB1dGVyU2l0ZQp9CgoKZmlsdGVyIEdldC1MYXN0TG9nZ2VkT24gewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFRoaXMgZnVuY3Rpb24gdXNlcyByZW1vdGUgcmVnaXN0cnkgZnVuY3Rpb25hbGl0eSB0byByZXR1cm4KICAgICAgICB0aGUgbGFzdCB1c2VyIGxvZ2dlZCBvbnRvIGEgdGFyZ2V0IG1hY2hpbmUuCgogICAgICAgIE5vdGU6IFRoaXMgZnVuY3Rpb24gcmVxdWlyZXMgYWRtaW5pc3RyYXRpdmUgcmlnaHRzIG9uIHRoZQogICAgICAgIG1hY2hpbmUgeW91J3JlIGVudW1lcmF0aW5nLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIFRoZSBob3N0bmFtZSB0byBxdWVyeSBmb3IgdGhlIGxhc3QgbG9nZ2VkIG9uIHVzZXIuCiAgICAgICAgRGVmYXVsdHMgdG8gdGhlIGxvY2FsaG9zdC4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IGZvciB0aGUgcmVtb3RlIGNvbm5lY3Rpb24uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTGFzdExvZ2dlZE9uCgogICAgICAgIFJldHVybnMgdGhlIGxhc3QgdXNlciBsb2dnZWQgb250byB0aGUgbG9jYWwgbWFjaGluZS4KCiAgICAuRVhBTVBMRQogICAgICAgIAogICAgICAgIFBTIEM6XD4gR2V0LUxhc3RMb2dnZWRPbiAtQ29tcHV0ZXJOYW1lIFdJTkRPV1MxCgogICAgICAgIFJldHVybnMgdGhlIGxhc3QgdXNlciBsb2dnZWQgb250byBXSU5ET1dTMQoKICAgIC5FWEFNUExFCiAgICAgICAgCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0Q29tcHV0ZXIgfCBHZXQtTGFzdExvZ2dlZE9uCgogICAgICAgIFJldHVybnMgdGhlIGxhc3QgdXNlciBsb2dnZWQgb250byBhbGwgbWFjaGluZXMgaW4gdGhlIGRvbWFpbi4KIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScpXQogICAgICAgIFtPYmplY3RbXV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgICRDb21wdXRlck5hbWUgPSAnbG9jYWxob3N0JywKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICAjIGV4dHJhY3QgdGhlIGNvbXB1dGVyIG5hbWUgZnJvbSB3aGF0ZXZlciBvYmplY3Qgd2FzIHBhc3NlZCBvbiB0aGUgcGlwZWxpbmUKICAgICRDb21wdXRlciA9ICRDb21wdXRlck5hbWUgfCBHZXQtTmFtZUZpZWxkCgogICAgIyBIS0VZX0xPQ0FMX01BQ0hJTkUKICAgICRIS0xNID0gMjE0NzQ4MzY1MAoKICAgICMgdHJ5IHRvIG9wZW4gdXAgdGhlIHJlbW90ZSByZWdpc3RyeSBrZXkgdG8gZ3JhYiB0aGUgbGFzdCBsb2dnZWQgb24gdXNlcgogICAgdHJ5IHsKCiAgICAgICAgaWYoJENyZWRlbnRpYWwpIHsKICAgICAgICAgICAgJFJlZyA9IEdldC1XbWlPYmplY3QgLUxpc3QgJ1N0ZFJlZ1Byb3YnIC1OYW1lc3BhY2Ugcm9vdFxkZWZhdWx0IC1Db21wdXRlcm5hbWUgJENvbXB1dGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkUmVnID0gR2V0LVdtaU9iamVjdCAtTGlzdCAnU3RkUmVnUHJvdicgLU5hbWVzcGFjZSByb290XGRlZmF1bHQgLUNvbXB1dGVybmFtZSAkQ29tcHV0ZXIgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgICAgICB9CgogICAgICAgICRLZXkgPSAiU09GVFdBUkVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cQXV0aGVudGljYXRpb25cTG9nb25VSSIKICAgICAgICAkVmFsdWUgPSAiTGFzdExvZ2dlZE9uVXNlciIKICAgICAgICAkTGFzdFVzZXIgPSAkUmVnLkdldFN0cmluZ1ZhbHVlKCRIS0xNLCAkS2V5LCAkVmFsdWUpLnNWYWx1ZQoKICAgICAgICAkTGFzdExvZ2dlZE9uID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICRMYXN0TG9nZ2VkT24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAkTGFzdExvZ2dlZE9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0xhc3RMb2dnZWRPbicgJExhc3RVc2VyCiAgICAgICAgJExhc3RMb2dnZWRPbgogICAgfQogICAgY2F0Y2ggewogICAgICAgIFdyaXRlLVdhcm5pbmcgIlshXSBFcnJvciBvcGVuaW5nIHJlbW90ZSByZWdpc3RyeSBvbiAkQ29tcHV0ZXIuIFJlbW90ZSByZWdpc3RyeSBsaWtlbHkgbm90IGVuYWJsZWQuIgogICAgfQp9CgoKZmlsdGVyIEdldC1DYWNoZWRSRFBDb25uZWN0aW9uIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBVc2VzIHJlbW90ZSByZWdpc3RyeSBmdW5jdGlvbmFsaXR5IHRvIHF1ZXJ5IGFsbCBlbnRyaWVzIGZvciB0aGUKICAgICAgICAiV2luZG93cyBSZW1vdGUgRGVza3RvcCBDb25uZWN0aW9uIENsaWVudCIgb24gYSBtYWNoaW5lLCBzZXBhcmF0ZWQgYnkKICAgICAgICB1c2VyIGFuZCB0YXJnZXQgc2VydmVyLgoKICAgICAgICBOb3RlOiBUaGlzIGZ1bmN0aW9uIHJlcXVpcmVzIGFkbWluaXN0cmF0aXZlIHJpZ2h0cyBvbiB0aGUKICAgICAgICBtYWNoaW5lIHlvdSdyZSBlbnVtZXJhdGluZy4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBUaGUgaG9zdG5hbWUgdG8gcXVlcnkgZm9yIFJEUCBjbGllbnQgaW5mb3JtYXRpb24uCiAgICAgICAgRGVmYXVsdHMgdG8gbG9jYWxob3N0LgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3QgZm9yIHRoZSByZW1vdGUgY29ubmVjdGlvbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1DYWNoZWRSRFBDb25uZWN0aW9uCgogICAgICAgIFJldHVybnMgdGhlIFJEUCBjb25uZWN0aW9uIGNsaWVudCBpbmZvcm1hdGlvbiBmb3IgdGhlIGxvY2FsIG1hY2hpbmUuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtQ2FjaGVkUkRQQ29ubmVjdGlvbiAtQ29tcHV0ZXJOYW1lIFdJTkRPV1MyLnRlc3RsYWIubG9jYWwKCiAgICAgICAgUmV0dXJucyB0aGUgUkRQIGNvbm5lY3Rpb24gY2xpZW50IGluZm9ybWF0aW9uIGZvciB0aGUgV0lORE9XUzIudGVzdGxhYi5sb2NhbCBtYWNoaW5lCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtQ2FjaGVkUkRQQ29ubmVjdGlvbiAtQ29tcHV0ZXJOYW1lIFdJTkRPV1MyLnRlc3RsYWIubG9jYWwgLUNyZWRlbnRpYWwgJENyZWQKCiAgICAgICAgUmV0dXJucyB0aGUgUkRQIGNvbm5lY3Rpb24gY2xpZW50IGluZm9ybWF0aW9uIGZvciB0aGUgV0lORE9XUzIudGVzdGxhYi5sb2NhbCBtYWNoaW5lIHVzaW5nIGFsdGVybmF0ZSBjcmVkZW50aWFscy4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRDb21wdXRlciB8IEdldC1DYWNoZWRSRFBDb25uZWN0aW9uCgogICAgICAgIEdldCBjYWNoZWQgUkRQIGluZm9ybWF0aW9uIGZvciBhbGwgbWFjaGluZXMgaW4gdGhlIGRvbWFpbi4KIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScpXQogICAgICAgIFtPYmplY3RbXV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgICRDb21wdXRlck5hbWUgPSAnbG9jYWxob3N0JywKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICAjIGV4dHJhY3QgdGhlIGNvbXB1dGVyIG5hbWUgZnJvbSB3aGF0ZXZlciBvYmplY3Qgd2FzIHBhc3NlZCBvbiB0aGUgcGlwZWxpbmUKICAgICRDb21wdXRlciA9ICRDb21wdXRlck5hbWUgfCBHZXQtTmFtZUZpZWxkCgogICAgIyBIS0VZX1VTRVJTCiAgICAkSEtVID0gMjE0NzQ4MzY1MQoKICAgIHRyeSB7CiAgICAgICAgaWYoJENyZWRlbnRpYWwpIHsKICAgICAgICAgICAgJFJlZyA9IEdldC1XbWlPYmplY3QgLUxpc3QgJ1N0ZFJlZ1Byb3YnIC1OYW1lc3BhY2Ugcm9vdFxkZWZhdWx0IC1Db21wdXRlcm5hbWUgJENvbXB1dGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkUmVnID0gR2V0LVdtaU9iamVjdCAtTGlzdCAnU3RkUmVnUHJvdicgLU5hbWVzcGFjZSByb290XGRlZmF1bHQgLUNvbXB1dGVybmFtZSAkQ29tcHV0ZXIgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgICAgICB9CgogICAgICAgICMgZXh0cmFjdCBvdXQgdGhlIFNJRHMgb2YgZG9tYWluIHVzZXJzIGluIHRoaXMgaGl2ZQogICAgICAgICRVc2VyU0lEcyA9ICgkUmVnLkVudW1LZXkoJEhLVSwgIiIpKS5zTmFtZXMgfCA/IHsgJF8gLW1hdGNoICdTLTEtNS0yMS1bMC05XSstWzAtOV0rLVswLTldKy1bMC05XSskJyB9CgogICAgICAgIGZvcmVhY2ggKCRVc2VyU0lEIGluICRVc2VyU0lEcykgewoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICRVc2VyTmFtZSA9IENvbnZlcnQtU2lkVG9OYW1lICRVc2VyU0lECgogICAgICAgICAgICAgICAgIyBwdWxsIG91dCBhbGwgdGhlIGNhY2hlZCBSRFAgY29ubmVjdGlvbnMKICAgICAgICAgICAgICAgICRDb25uZWN0aW9uS2V5cyA9ICRSZWcuRW51bVZhbHVlcygkSEtVLCIkVXNlclNJRFxTb2Z0d2FyZVxNaWNyb3NvZnRcVGVybWluYWwgU2VydmVyIENsaWVudFxEZWZhdWx0Iikuc05hbWVzCgogICAgICAgICAgICAgICAgZm9yZWFjaCAoJENvbm5lY3Rpb24gaW4gJENvbm5lY3Rpb25LZXlzKSB7CiAgICAgICAgICAgICAgICAgICAgIyBtYWtlIHN1cmUgdGhpcyBrZXkgaXMgYSBjYWNoZWQgY29ubmVjdGlvbgogICAgICAgICAgICAgICAgICAgIGlmKCRDb25uZWN0aW9uIC1tYXRjaCAnTVJVLionKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRUYXJnZXRTZXJ2ZXIgPSAkUmVnLkdldFN0cmluZ1ZhbHVlKCRIS1UsICIkVXNlclNJRFxTb2Z0d2FyZVxNaWNyb3NvZnRcVGVybWluYWwgU2VydmVyIENsaWVudFxEZWZhdWx0IiwgJENvbm5lY3Rpb24pLnNWYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbiA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAkVXNlck5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyU0lEJyAkVXNlclNJRAogICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RhcmdldFNlcnZlcicgJFRhcmdldFNlcnZlcgogICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJuYW1lSGludCcgJE51bGwKICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAjIHB1bGwgb3V0IGFsbCB0aGUgY2FjaGVkIHNlcnZlciBpbmZvIHdpdGggdXNlcm5hbWUgaGludHMKICAgICAgICAgICAgICAgICRTZXJ2ZXJLZXlzID0gJFJlZy5FbnVtS2V5KCRIS1UsIiRVc2VyU0lEXFNvZnR3YXJlXE1pY3Jvc29mdFxUZXJtaW5hbCBTZXJ2ZXIgQ2xpZW50XFNlcnZlcnMiKS5zTmFtZXMKCiAgICAgICAgICAgICAgICBmb3JlYWNoICgkU2VydmVyIGluICRTZXJ2ZXJLZXlzKSB7CgogICAgICAgICAgICAgICAgICAgICRVc2VybmFtZUhpbnQgPSAkUmVnLkdldFN0cmluZ1ZhbHVlKCRIS1UsICIkVXNlclNJRFxTb2Z0d2FyZVxNaWNyb3NvZnRcVGVybWluYWwgU2VydmVyIENsaWVudFxTZXJ2ZXJzXCRTZXJ2ZXIiLCAnVXNlcm5hbWVIaW50Jykuc1ZhbHVlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbiA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyTmFtZScgJFVzZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyU0lEJyAkVXNlclNJRAogICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVGFyZ2V0U2VydmVyJyAkU2VydmVyCiAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VybmFtZUhpbnQnICRVc2VybmFtZUhpbnQKICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uICAgCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkVycm9yOiAkXyIKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICB9CiAgICBjYXRjaCB7CiAgICAgICAgV3JpdGUtV2FybmluZyAiRXJyb3IgYWNjZXNzaW5nICRDb21wdXRlciwgbGlrZWx5IGluc3VmZmljaWVudCBwZXJtaXNzaW9ucyBvciBmaXJld2FsbCBydWxlcyBvbiBob3N0OiAkXyIKICAgIH0KfQoKCmZpbHRlciBHZXQtUmVnaXN0cnlNb3VudGVkRHJpdmUgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFVzZXMgcmVtb3RlIHJlZ2lzdHJ5IGZ1bmN0aW9uYWxpdHkgdG8gcXVlcnkgYWxsIGVudHJpZXMgZm9yIHRoZQogICAgICAgIHRoZSBzYXZlZCBuZXR3b3JrIG1vdW50ZWQgZHJpdmUgb24gYSBtYWNoaW5lLCBzZXBhcmF0ZWQgYnkKICAgICAgICB1c2VyIGFuZCB0YXJnZXQgc2VydmVyLgoKICAgICAgICBOb3RlOiBUaGlzIGZ1bmN0aW9uIHJlcXVpcmVzIGFkbWluaXN0cmF0aXZlIHJpZ2h0cyBvbiB0aGUKICAgICAgICBtYWNoaW5lIHlvdSdyZSBlbnVtZXJhdGluZy4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBUaGUgaG9zdG5hbWUgdG8gcXVlcnkgZm9yIFJEUCBjbGllbnQgaW5mb3JtYXRpb24uCiAgICAgICAgRGVmYXVsdHMgdG8gbG9jYWxob3N0LgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3QgZm9yIHRoZSByZW1vdGUgY29ubmVjdGlvbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1SZWdpc3RyeU1vdW50ZWREcml2ZQoKICAgICAgICBSZXR1cm5zIHRoZSBzYXZlZCBuZXR3b3JrIG1vdW50ZWQgZHJpdmVzIGZvciB0aGUgbG9jYWwgbWFjaGluZS4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1SZWdpc3RyeU1vdW50ZWREcml2ZSAtQ29tcHV0ZXJOYW1lIFdJTkRPV1MyLnRlc3RsYWIubG9jYWwKCiAgICAgICAgUmV0dXJucyB0aGUgc2F2ZWQgbmV0d29yayBtb3VudGVkIGRyaXZlcyBmb3IgdGhlIFdJTkRPV1MyLnRlc3RsYWIubG9jYWwgbWFjaGluZQoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LVJlZ2lzdHJ5TW91bnRlZERyaXZlIC1Db21wdXRlck5hbWUgV0lORE9XUzIudGVzdGxhYi5sb2NhbCAtQ3JlZGVudGlhbCAkQ3JlZAoKICAgICAgICBSZXR1cm5zIHRoZSBzYXZlZCBuZXR3b3JrIG1vdW50ZWQgZHJpdmVzIGZvciB0aGUgV0lORE9XUzIudGVzdGxhYi5sb2NhbCBtYWNoaW5lIHVzaW5nIGFsdGVybmF0ZSBjcmVkZW50aWFscy4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRDb21wdXRlciB8IEdldC1SZWdpc3RyeU1vdW50ZWREcml2ZQoKICAgICAgICBHZXQgdGhlIHNhdmVkIG5ldHdvcmsgbW91bnRlZCBkcml2ZXMgZm9yIGFsbCBtYWNoaW5lcyBpbiB0aGUgZG9tYWluLgojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW09iamVjdFtdXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgICMgZXh0cmFjdCB0aGUgY29tcHV0ZXIgbmFtZSBmcm9tIHdoYXRldmVyIG9iamVjdCB3YXMgcGFzc2VkIG9uIHRoZSBwaXBlbGluZQogICAgJENvbXB1dGVyID0gJENvbXB1dGVyTmFtZSB8IEdldC1OYW1lRmllbGQKCiAgICAjIEhLRVlfVVNFUlMKICAgICRIS1UgPSAyMTQ3NDgzNjUxCgogICAgdHJ5IHsKICAgICAgICBpZigkQ3JlZGVudGlhbCkgewogICAgICAgICAgICAkUmVnID0gR2V0LVdtaU9iamVjdCAtTGlzdCAnU3RkUmVnUHJvdicgLU5hbWVzcGFjZSByb290XGRlZmF1bHQgLUNvbXB1dGVybmFtZSAkQ29tcHV0ZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRSZWcgPSBHZXQtV21pT2JqZWN0IC1MaXN0ICdTdGRSZWdQcm92JyAtTmFtZXNwYWNlIHJvb3RcZGVmYXVsdCAtQ29tcHV0ZXJuYW1lICRDb21wdXRlciAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQogICAgICAgIH0KCiAgICAgICAgIyBleHRyYWN0IG91dCB0aGUgU0lEcyBvZiBkb21haW4gdXNlcnMgaW4gdGhpcyBoaXZlCiAgICAgICAgJFVzZXJTSURzID0gKCRSZWcuRW51bUtleSgkSEtVLCAiIikpLnNOYW1lcyB8ID8geyAkXyAtbWF0Y2ggJ1MtMS01LTIxLVswLTldKy1bMC05XSstWzAtOV0rLVswLTldKyQnIH0KCiAgICAgICAgZm9yZWFjaCAoJFVzZXJTSUQgaW4gJFVzZXJTSURzKSB7CgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJFVzZXJOYW1lID0gQ29udmVydC1TaWRUb05hbWUgJFVzZXJTSUQKCiAgICAgICAgICAgICAgICAkRHJpdmVMZXR0ZXJzID0gKCRSZWcuRW51bUtleSgkSEtVLCAiJFVzZXJTSURcTmV0d29yayIpKS5zTmFtZXMKCiAgICAgICAgICAgICAgICBGb3JFYWNoKCREcml2ZUxldHRlciBpbiAkRHJpdmVMZXR0ZXJzKSB7CiAgICAgICAgICAgICAgICAgICAgJFByb3ZpZGVyTmFtZSA9ICRSZWcuR2V0U3RyaW5nVmFsdWUoJEhLVSwgIiRVc2VyU0lEXE5ldHdvcmtcJERyaXZlTGV0dGVyIiwgJ1Byb3ZpZGVyTmFtZScpLnNWYWx1ZQogICAgICAgICAgICAgICAgICAgICRSZW1vdGVQYXRoID0gJFJlZy5HZXRTdHJpbmdWYWx1ZSgkSEtVLCAiJFVzZXJTSURcTmV0d29ya1wkRHJpdmVMZXR0ZXIiLCAnUmVtb3RlUGF0aCcpLnNWYWx1ZQogICAgICAgICAgICAgICAgICAgICREcml2ZVVzZXJOYW1lID0gJFJlZy5HZXRTdHJpbmdWYWx1ZSgkSEtVLCAiJFVzZXJTSURcTmV0d29ya1wkRHJpdmVMZXR0ZXIiLCAnVXNlck5hbWUnKS5zVmFsdWUKICAgICAgICAgICAgICAgICAgICBpZigtbm90ICRVc2VyTmFtZSkgeyAkVXNlck5hbWUgPSAnJyB9CgogICAgICAgICAgICAgICAgICAgIGlmKCRSZW1vdGVQYXRoIC1hbmQgKCRSZW1vdGVQYXRoIC1uZSAnJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE1vdW50ZWREcml2ZSA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgJE1vdW50ZWREcml2ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAgICAgICAgICAgICAkTW91bnRlZERyaXZlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAkVXNlck5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJE1vdW50ZWREcml2ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyU0lEJyAkVXNlclNJRAogICAgICAgICAgICAgICAgICAgICAgICAkTW91bnRlZERyaXZlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0RyaXZlTGV0dGVyJyAkRHJpdmVMZXR0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgJE1vdW50ZWREcml2ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQcm92aWRlck5hbWUnICRQcm92aWRlck5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJE1vdW50ZWREcml2ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZW1vdGVQYXRoJyAkUmVtb3RlUGF0aAogICAgICAgICAgICAgICAgICAgICAgICAkTW91bnRlZERyaXZlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0RyaXZlVXNlck5hbWUnICREcml2ZVVzZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRNb3VudGVkRHJpdmUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3I6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgY2F0Y2ggewogICAgICAgIFdyaXRlLVdhcm5pbmcgIkVycm9yIGFjY2Vzc2luZyAkQ29tcHV0ZXIsIGxpa2VseSBpbnN1ZmZpY2llbnQgcGVybWlzc2lvbnMgb3IgZmlyZXdhbGwgcnVsZXMgb24gaG9zdDogJF8iCiAgICB9Cn0KCgpmaWx0ZXIgR2V0LU5ldFByb2Nlc3Mgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEdldHMgYSBsaXN0IG9mIHByb2Nlc3Nlcy9vd25lcnMgb24gYSByZW1vdGUgbWFjaGluZS4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBUaGUgaG9zdG5hbWUgdG8gcXVlcnkgcHJvY2Vzc2VzLiBEZWZhdWx0cyB0byB0aGUgbG9jYWwgaG9zdCBuYW1lLgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3QgZm9yIHRoZSByZW1vdGUgY29ubmVjdGlvbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRQcm9jZXNzIC1Db21wdXRlck5hbWUgV0lORE9XUzEKICAgIAogICAgICAgIFJldHVybnMgdGhlIGN1cnJlbnQgcHJvY2Vzc2VzIGZvciBXSU5ET1dTMQojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW09iamVjdFtdXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJENvbXB1dGVyTmFtZSA9IFtTeXN0ZW0uTmV0LkRuc106OkdldEhvc3ROYW1lKCksCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCgogICAgIyBleHRyYWN0IHRoZSBjb21wdXRlciBuYW1lIGZyb20gd2hhdGV2ZXIgb2JqZWN0IHdhcyBwYXNzZWQgb24gdGhlIHBpcGVsaW5lCiAgICAkQ29tcHV0ZXIgPSAkQ29tcHV0ZXJOYW1lIHwgR2V0LU5hbWVGaWVsZAoKICAgIHRyeSB7CiAgICAgICAgaWYoJENyZWRlbnRpYWwpIHsKICAgICAgICAgICAgJFByb2Nlc3NlcyA9IEdldC1XTUlvYmplY3QgLUNsYXNzIFdpbjMyX3Byb2Nlc3MgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkUHJvY2Vzc2VzID0gR2V0LVdNSW9iamVjdCAtQ2xhc3MgV2luMzJfcHJvY2VzcyAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUKICAgICAgICB9CgogICAgICAgICRQcm9jZXNzZXMgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICRPd25lciA9ICRfLmdldG93bmVyKCk7CiAgICAgICAgICAgICRQcm9jZXNzID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAkUHJvY2VzcyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAkUHJvY2VzcyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQcm9jZXNzTmFtZScgJF8uUHJvY2Vzc05hbWUKICAgICAgICAgICAgJFByb2Nlc3MgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUHJvY2Vzc0lEJyAkXy5Qcm9jZXNzSUQKICAgICAgICAgICAgJFByb2Nlc3MgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRG9tYWluJyAkT3duZXIuRG9tYWluCiAgICAgICAgICAgICRQcm9jZXNzIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXInICRPd25lci5Vc2VyCiAgICAgICAgICAgICRQcm9jZXNzICAgICAgICAgICAgICAgIAogICAgICAgIH0KICAgIH0KICAgIGNhdGNoIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJbIV0gRXJyb3IgZW51bWVyYXRpbmcgcmVtb3RlIHByb2Nlc3NlcyBvbiAkQ29tcHV0ZXIsIGFjY2VzcyBsaWtlbHkgZGVuaWVkOiAkXyIKICAgIH0KfQoKCmZ1bmN0aW9uIEZpbmQtSW50ZXJlc3RpbmdGaWxlIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBUaGlzIGZ1bmN0aW9uIHJlY3Vyc2l2ZWx5IHNlYXJjaGVzIGEgZ2l2ZW4gVU5DIHBhdGggZm9yIGZpbGVzIHdpdGgKICAgICAgICBzcGVjaWZpYyBrZXl3b3JkcyBpbiB0aGUgbmFtZSAoZGVmYXVsdCBvZiBwYXNzLCBzZW5zaXRpdmUsIHNlY3JldCwgYWRtaW4sCiAgICAgICAgbG9naW4gYW5kIHVuYXR0ZW5kKi54bWwpLiBUaGUgb3V0cHV0IGNhbiBiZSBwaXBlZCBvdXQgdG8gYSBjc3Ygd2l0aCB0aGUKICAgICAgICAtT3V0RmlsZSBmbGFnLiBCeSBkZWZhdWx0LCBoaWRkZW4gZmlsZXMvZm9sZGVycyBhcmUgaW5jbHVkZWQgaW4gc2VhcmNoIHJlc3VsdHMuCgogICAgLlBBUkFNRVRFUiBQYXRoCgogICAgICAgIFVOQy9sb2NhbCBwYXRoIHRvIHJlY3Vyc2l2ZWx5IHNlYXJjaC4KCiAgICAuUEFSQU1FVEVSIFRlcm1zCgogICAgICAgIFRlcm1zIHRvIHNlYXJjaCBmb3IuCgogICAgLlBBUkFNRVRFUiBPZmZpY2VEb2NzCgogICAgICAgIFN3aXRjaC4gU2VhcmNoIGZvciBvZmZpY2UgZG9jdW1lbnRzICgqLmRvYyosICoueGxzKiwgKi5wcHQqKQoKICAgIC5QQVJBTUVURVIgRnJlc2hFWEVzCgogICAgICAgIFN3aXRjaC4gRmluZCAuRVhFcyBhY2Nlc3NlZCB3aXRoaW4gdGhlIGxhc3Qgd2Vlay4KCiAgICAuUEFSQU1FVEVSIExhc3RBY2Nlc3NUaW1lCgogICAgICAgIE9ubHkgcmV0dXJuIGZpbGVzIHdpdGggYSBMYXN0QWNjZXNzVGltZSBncmVhdGVyIHRoYW4gdGhpcyBkYXRlIHZhbHVlLgoKICAgIC5QQVJBTUVURVIgTGFzdFdyaXRlVGltZQoKICAgICAgICBPbmx5IHJldHVybiBmaWxlcyB3aXRoIGEgTGFzdFdyaXRlVGltZSBncmVhdGVyIHRoYW4gdGhpcyBkYXRlIHZhbHVlLgoKICAgIC5QQVJBTUVURVIgQ3JlYXRpb25UaW1lCgogICAgICAgIE9ubHkgcmV0dXJuIGZpbGVzIHdpdGggYSBDcmVhdGlvblRpbWUgZ3JlYXRlciB0aGFuIHRoaXMgZGF0ZSB2YWx1ZS4KCiAgICAuUEFSQU1FVEVSIEV4Y2x1ZGVGb2xkZXJzCgogICAgICAgIFN3aXRjaC4gRXhjbHVkZSBmb2xkZXJzIGZyb20gdGhlIHNlYXJjaCByZXN1bHRzLgoKICAgIC5QQVJBTUVURVIgRXhjbHVkZUhpZGRlbgoKICAgICAgICBTd2l0Y2guIEV4Y2x1ZGUgaGlkZGVuIGZpbGVzIGFuZCBmb2xkZXJzIGZyb20gdGhlIHNlYXJjaCByZXN1bHRzLgoKICAgIC5QQVJBTUVURVIgQ2hlY2tXcml0ZUFjY2VzcwoKICAgICAgICBTd2l0Y2guIE9ubHkgcmV0dXJucyBmaWxlcyB0aGUgY3VycmVudCB1c2VyIGhhcyB3cml0ZSBhY2Nlc3MgdG8uCgogICAgLlBBUkFNRVRFUiBPdXRGaWxlCgogICAgICAgIE91dHB1dCByZXN1bHRzIHRvIGEgc3BlY2lmaWVkIGNzdiBvdXRwdXQgZmlsZS4KCiAgICAuUEFSQU1FVEVSIFVzZVBTRHJpdmUKCiAgICAgICAgU3dpdGNoLiBNb3VudCB0YXJnZXQgcmVtb3RlIHBhdGggd2l0aCB0ZW1wb3JhcnkgUFNEcml2ZXMuCgogICAgLk9VVFBVVFMKCiAgICAgICAgVGhlIGZ1bGwgcGF0aCwgb3duZXIsIGxhc3RhY2Nlc3MgdGltZSwgbGFzdHdyaXRlIHRpbWUsIGFuZCBzaXplIGZvciBlYWNoIGZvdW5kIGZpbGUuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBGaW5kLUludGVyZXN0aW5nRmlsZSAtUGF0aCBDOlxCYWNrdXBcCiAgICAgICAgCiAgICAgICAgUmV0dXJucyBhbnkgZmlsZXMgb24gdGhlIGxvY2FsIHBhdGggQzpcQmFja3VwXCB0aGF0IGhhdmUgdGhlIGRlZmF1bHQKICAgICAgICBzZWFyY2ggdGVybSBzZXQgaW4gdGhlIHRpdGxlLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gRmluZC1JbnRlcmVzdGluZ0ZpbGUgLVBhdGggXFxXSU5ET1dTN1xVc2Vyc1wgLVRlcm1zIHNhbGFyaWVzLGVtYWlsIC1PdXRGaWxlIG91dC5jc3YKICAgICAgICAKICAgICAgICBSZXR1cm5zIGFueSBmaWxlcyBvbiB0aGUgcmVtb3RlIHBhdGggXFxXSU5ET1dTN1xVc2Vyc1wgdGhhdCBoYXZlICdzYWxhcmllcycKICAgICAgICBvciAnZW1haWwnIGluIHRoZSB0aXRsZSwgYW5kIHdyaXRlcyB0aGUgcmVzdWx0cyBvdXQgdG8gYSBjc3YgZmlsZQogICAgICAgIG5hbWVkICdvdXQuY3N2JwoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gRmluZC1JbnRlcmVzdGluZ0ZpbGUgLVBhdGggXFxXSU5ET1dTN1xVc2Vyc1wgLUxhc3RBY2Nlc3NUaW1lIChHZXQtRGF0ZSkuQWRkRGF5cygtNykKCiAgICAgICAgUmV0dXJucyBhbnkgZmlsZXMgb24gdGhlIHJlbW90ZSBwYXRoIFxcV0lORE9XUzdcVXNlcnNcIHRoYXQgaGF2ZSB0aGUgZGVmYXVsdAogICAgICAgIHNlYXJjaCB0ZXJtIHNldCBpbiB0aGUgdGl0bGUgYW5kIHdlcmUgYWNjZXNzZWQgd2l0aGluIHRoZSBsYXN0IHdlZWsuCgogICAgLkxJTksKICAgICAgICAKICAgICAgICBodHRwOi8vd3d3Lmhhcm1qMHkubmV0L2Jsb2cvcmVkdGVhbWluZy9maWxlLXNlcnZlci10cmlhZ2Utb24tcmVkLXRlYW0tZW5nYWdlbWVudHMvCiM+CiAgICAKICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFBhdGggPSAnLlwnLAoKICAgICAgICBbQWxpYXMoJ1Rlcm1zJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRTZWFyY2hUZXJtcyA9IEAoJ3Bhc3MnLCAnc2Vuc2l0aXZlJywgJ2FkbWluJywgJ2xvZ2luJywgJ3NlY3JldCcsICd1bmF0dGVuZCoueG1sJywgJy52bWRrJywgJ2NyZWRzJywgJ2NyZWRlbnRpYWwnLCAnLmNvbmZpZycpLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRPZmZpY2VEb2NzLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRGcmVzaEVYRXMsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJExhc3RBY2Nlc3NUaW1lLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRMYXN0V3JpdGVUaW1lLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRDcmVhdGlvblRpbWUsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEV4Y2x1ZGVGb2xkZXJzLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRFeGNsdWRlSGlkZGVuLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRDaGVja1dyaXRlQWNjZXNzLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRPdXRGaWxlLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRVc2VQU0RyaXZlCiAgICApCgogICAgYmVnaW4gewoKICAgICAgICAkUGF0aCArPSBpZighJFBhdGguRW5kc1dpdGgoJ1wnKSkgeyJcIn0KCiAgICAgICAgaWYgKCRDcmVkZW50aWFsKSB7CiAgICAgICAgICAgICRVc2VQU0RyaXZlID0gJFRydWUKICAgICAgICB9CgogICAgICAgICMgYXBwZW5kIHdpbGRjYXJkcyB0byB0aGUgZnJvbnQgYW5kIGJhY2sgb2YgYWxsIHNlYXJjaCB0ZXJtcwogICAgICAgICRTZWFyY2hUZXJtcyA9ICRTZWFyY2hUZXJtcyB8IEZvckVhY2gtT2JqZWN0IHsgaWYoJF8gLW5vdG1hdGNoICdeXCouKlwqJCcpIHsiKiQoJF8pKiJ9IGVsc2V7JF99IH0KCiAgICAgICAgIyBzZWFyY2gganVzdCBmb3Igb2ZmaWNlIGRvY3VtZW50cyBpZiBzcGVjaWZpZWQKICAgICAgICBpZiAoJE9mZmljZURvY3MpIHsKICAgICAgICAgICAgJFNlYXJjaFRlcm1zID0gQCgnKi5kb2MnLCAnKi5kb2N4JywgJyoueGxzJywgJyoueGxzeCcsICcqLnBwdCcsICcqLnBwdHgnKQogICAgICAgIH0KCiAgICAgICAgIyBmaW5kIC5leGUncyBhY2Nlc3NlZCB3aXRoaW4gdGhlIGxhc3QgNyBkYXlzCiAgICAgICAgaWYoJEZyZXNoRVhFcykgewogICAgICAgICAgICAjIGdldCBhbiBhY2Nlc3MgdGltZSBsaW1pdCBvZiA3IGRheXMgYWdvCiAgICAgICAgICAgICRMYXN0QWNjZXNzVGltZSA9IChHZXQtRGF0ZSkuQWRkRGF5cygtNykuVG9TdHJpbmcoJ01NL2RkL3l5eXknKQogICAgICAgICAgICAkU2VhcmNoVGVybXMgPSAnKi5leGUnCiAgICAgICAgfQoKICAgICAgICBpZigkVXNlUFNEcml2ZSkgewogICAgICAgICAgICAjIGlmIHdlJ3JlIFBTRHJpdmVzLCBjcmVhdGUgYSB0ZW1wb3JhcnkgbW91bnQgcG9pbnQKCiAgICAgICAgICAgICRQYXJ0cyA9ICRQYXRoLnNwbGl0KCdcJykKICAgICAgICAgICAgJEZvbGRlclBhdGggPSAkUGFydHNbMC4uKCRQYXJ0cy5sZW5ndGgtMildIC1qb2luICdcJwogICAgICAgICAgICAkRmlsZVBhdGggPSAkUGFydHNbLTFdCgogICAgICAgICAgICAkUmFuZERyaXZlID0gKCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eiIuVG9DaGFyQXJyYXkoKSB8IEdldC1SYW5kb20gLUNvdW50IDcpIC1qb2luICcnCiAgICAgICAgICAgIAogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJNb3VudGluZyBwYXRoICckUGF0aCcgdXNpbmcgYSB0ZW1wIFBTRHJpdmUgYXQgJFJhbmREcml2ZSIKCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkTnVsbCA9IE5ldy1QU0RyaXZlIC1OYW1lICRSYW5kRHJpdmUgLVBTUHJvdmlkZXIgRmlsZVN5c3RlbSAtUm9vdCAkRm9sZGVyUGF0aCAtRXJyb3JBY3Rpb24gU3RvcAogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkVycm9yIG1vdW50aW5nIHBhdGggJyRQYXRoJyA6ICRfIgogICAgICAgICAgICAgICAgcmV0dXJuICROdWxsCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgc28gd2UgY2FuIGNkL2RpciB0aGUgbmV3IGRyaXZlCiAgICAgICAgICAgICRQYXRoID0gIiR7UmFuZERyaXZlfTpcJHtGaWxlUGF0aH0iCiAgICAgICAgfQogICAgfQoKICAgIHByb2Nlc3MgewoKICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gU2VhcmNoIHBhdGggJFBhdGgiCgogICAgICAgIGZ1bmN0aW9uIEludm9rZS1DaGVja1dyaXRlIHsKICAgICAgICAgICAgIyBzaG9ydCBoZWxwZXIgdG8gY2hlY2sgaXMgdGhlIGN1cnJlbnQgdXNlciBjYW4gd3JpdGUgdG8gYSBmaWxlCiAgICAgICAgICAgIFtDbWRsZXRCaW5kaW5nKCldcGFyYW0oW1N0cmluZ10kUGF0aCkKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICRGaWxldGVzdCA9IFtJTy5GSUxFXTo6T3BlbldyaXRlKCRQYXRoKQogICAgICAgICAgICAgICAgJEZpbGV0ZXN0LkNsb3NlKCkKICAgICAgICAgICAgICAgICRUcnVlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAkRXJyb3JbMF0KICAgICAgICAgICAgICAgICRGYWxzZQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAkU2VhcmNoQXJncyA9ICBAewogICAgICAgICAgICAnUGF0aCcgPSAkUGF0aAogICAgICAgICAgICAnUmVjdXJzZScgPSAkVHJ1ZQogICAgICAgICAgICAnRm9yY2UnID0gJCgtbm90ICRFeGNsdWRlSGlkZGVuKQogICAgICAgICAgICAnSW5jbHVkZScgPSAkU2VhcmNoVGVybXMKICAgICAgICAgICAgJ0Vycm9yQWN0aW9uJyA9ICdTaWxlbnRseUNvbnRpbnVlJwogICAgICAgIH0KCiAgICAgICAgR2V0LUNoaWxkSXRlbSBAU2VhcmNoQXJncyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAkXwogICAgICAgICAgICAjIGNoZWNrIGlmIHdlJ3JlIGV4Y2x1ZGluZyBmb2xkZXJzCiAgICAgICAgICAgIGlmKCEkRXhjbHVkZUZvbGRlcnMgLW9yICEkXy5QU0lzQ29udGFpbmVyKSB7JF99CiAgICAgICAgfSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgaWYoJExhc3RBY2Nlc3NUaW1lIC1vciAkTGFzdFdyaXRlVGltZSAtb3IgJENyZWF0aW9uVGltZSkgewogICAgICAgICAgICAgICAgaWYoJExhc3RBY2Nlc3NUaW1lIC1hbmQgKCRfLkxhc3RBY2Nlc3NUaW1lIC1ndCAkTGFzdEFjY2Vzc1RpbWUpKSB7JF99CiAgICAgICAgICAgICAgICBlbHNlaWYoJExhc3RXcml0ZVRpbWUgLWFuZCAoJF8uTGFzdFdyaXRlVGltZSAtZ3QgJExhc3RXcml0ZVRpbWUpKSB7JF99CiAgICAgICAgICAgICAgICBlbHNlaWYoJENyZWF0aW9uVGltZSAtYW5kICgkXy5DcmVhdGlvblRpbWUgLWd0ICRDcmVhdGlvblRpbWUpKSB7JF99CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7JF99CiAgICAgICAgfSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgIyBmaWx0ZXIgZm9yIHdyaXRlIGFjY2VzcyAoaWYgYXBwbGljYWJsZSkKICAgICAgICAgICAgaWYoKC1ub3QgJENoZWNrV3JpdGVBY2Nlc3MpIC1vciAoSW52b2tlLUNoZWNrV3JpdGUgLVBhdGggJF8uRnVsbE5hbWUpKSB7JF99CiAgICAgICAgfSB8IFNlbGVjdC1PYmplY3QgRnVsbE5hbWUsQHtOYW1lPSdPd25lcic7RXhwcmVzc2lvbj17KEdldC1BY2wgJF8uRnVsbE5hbWUpLk93bmVyfX0sTGFzdEFjY2Vzc1RpbWUsTGFzdFdyaXRlVGltZSxDcmVhdGlvblRpbWUsTGVuZ3RoIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAjIGNoZWNrIGlmIHdlJ3JlIG91dHB1dHRpbmcgdG8gdGhlIHBpcGVsaW5lIG9yIGFuIG91dHB1dCBmaWxlCiAgICAgICAgICAgIGlmKCRPdXRGaWxlKSB7RXhwb3J0LVBvd2VyVmlld0NTViAtSW5wdXRPYmplY3QgJF8gLU91dEZpbGUgJE91dEZpbGV9CiAgICAgICAgICAgIGVsc2UgeyRffQogICAgICAgIH0KICAgIH0KCiAgICBlbmQgewogICAgICAgIGlmKCRVc2VQU0RyaXZlIC1hbmQgJFJhbmREcml2ZSkgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJSZW1vdmluZyB0ZW1wIFBTRHJpdmUgJFJhbmREcml2ZSIKICAgICAgICAgICAgR2V0LVBTRHJpdmUgLU5hbWUgJFJhbmREcml2ZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFJlbW92ZS1QU0RyaXZlIC1Gb3JjZQogICAgICAgIH0KICAgIH0KfQoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMKIyAnTWV0YSctZnVuY3Rpb25zIHN0YXJ0IGJlbG93CiMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCmZ1bmN0aW9uIEludm9rZS1UaHJlYWRlZEZ1bmN0aW9uIHsKICAgICMgSGVscGVyIHVzZWQgYnkgYW55IHRocmVhZGVkIGhvc3QgZW51bWVyYXRpb24gZnVuY3Rpb25zCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLE1hbmRhdG9yeT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUsCgogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MSxNYW5kYXRvcnk9JFRydWUpXQogICAgICAgIFtTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlNjcmlwdEJsb2NrXQogICAgICAgICRTY3JpcHRCbG9jaywKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0yKV0KICAgICAgICBbSGFzaHRhYmxlXQogICAgICAgICRTY3JpcHRQYXJhbWV0ZXJzLAoKICAgICAgICBbSW50XQogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwKV0gCiAgICAgICAgJFRocmVhZHMgPSAyMCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkTm9JbXBvcnRzCiAgICApCgogICAgYmVnaW4gewoKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZWJ1ZyddKSB7CiAgICAgICAgICAgICREZWJ1Z1ByZWZlcmVuY2UgPSAnQ29udGludWUnCiAgICAgICAgfQoKICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gVG90YWwgbnVtYmVyIG9mIGhvc3RzOiAkKCRDb21wdXRlck5hbWUuY291bnQpIgoKICAgICAgICAjIEFkYXB0ZWQgZnJvbToKICAgICAgICAjICAgaHR0cDovL3Bvd2Vyc2hlbGwub3JnL3dwL2ZvcnVtcy90b3BpYy9pbnZwa2UtcGFyYWxsZWwtbmVlZC1oZWxwLXRvLWNsb25lLXRoZS1jdXJyZW50LXJ1bnNwYWNlLwogICAgICAgICRTZXNzaW9uU3RhdGUgPSBbU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5SdW5zcGFjZXMuSW5pdGlhbFNlc3Npb25TdGF0ZV06OkNyZWF0ZURlZmF1bHQoKQogICAgICAgICRTZXNzaW9uU3RhdGUuQXBhcnRtZW50U3RhdGUgPSBbU3lzdGVtLlRocmVhZGluZy5UaHJlYWRdOjpDdXJyZW50VGhyZWFkLkdldEFwYXJ0bWVudFN0YXRlKCkKCiAgICAgICAgIyBpbXBvcnQgdGhlIGN1cnJlbnQgc2Vzc2lvbiBzdGF0ZSdzIHZhcmlhYmxlcyBhbmQgZnVuY3Rpb25zIHNvIHRoZSBjaGFpbmVkIFBvd2VyVmlldwogICAgICAgICMgICBmdW5jdGlvbmFsaXR5IGNhbiBiZSB1c2VkIGJ5IHRoZSB0aHJlYWRlZCBibG9ja3MKICAgICAgICBpZighJE5vSW1wb3J0cykgewoKICAgICAgICAgICAgIyBncmFiIGFsbCB0aGUgY3VycmVudCB2YXJpYWJsZXMgZm9yIHRoaXMgcnVuc3BhY2UKICAgICAgICAgICAgJE15VmFycyA9IEdldC1WYXJpYWJsZSAtU2NvcGUgMgoKICAgICAgICAgICAgIyB0aGVzZSBWYXJpYWJsZXMgYXJlIGFkZGVkIGJ5IFJ1bnNwYWNlLk9wZW4oKSBNZXRob2QgYW5kIHByb2R1Y2UgU3RvcCBlcnJvcnMgaWYgeW91IGFkZCB0aGVtIHR3aWNlCiAgICAgICAgICAgICRWb3JiaWRkZW5WYXJzID0gQCgiPyIsImFyZ3MiLCJDb25zb2xlRmlsZU5hbWUiLCJFcnJvciIsIkV4ZWN1dGlvbkNvbnRleHQiLCJmYWxzZSIsIkhPTUUiLCJIb3N0IiwiaW5wdXQiLCJJbnB1dE9iamVjdCIsIk1heGltdW1BbGlhc0NvdW50IiwiTWF4aW11bURyaXZlQ291bnQiLCJNYXhpbXVtRXJyb3JDb3VudCIsIk1heGltdW1GdW5jdGlvbkNvdW50IiwiTWF4aW11bUhpc3RvcnlDb3VudCIsIk1heGltdW1WYXJpYWJsZUNvdW50IiwiTXlJbnZvY2F0aW9uIiwibnVsbCIsIlBJRCIsIlBTQm91bmRQYXJhbWV0ZXJzIiwiUFNDb21tYW5kUGF0aCIsIlBTQ3VsdHVyZSIsIlBTRGVmYXVsdFBhcmFtZXRlclZhbHVlcyIsIlBTSE9NRSIsIlBTU2NyaXB0Um9vdCIsIlBTVUlDdWx0dXJlIiwiUFNWZXJzaW9uVGFibGUiLCJQV0QiLCJTaGVsbElkIiwiU3luY2hyb25pemVkSGFzaCIsInRydWUiKQoKICAgICAgICAgICAgIyBBZGQgVmFyaWFibGVzIGZyb20gUGFyZW50IFNjb3BlIChjdXJyZW50IHJ1bnNwYWNlKSBpbnRvIHRoZSBJbml0aWFsU2Vzc2lvblN0YXRlCiAgICAgICAgICAgIEZvckVhY2goJFZhciBpbiAkTXlWYXJzKSB7CiAgICAgICAgICAgICAgICBpZigkVm9yYmlkZGVuVmFycyAtTm90Q29udGFpbnMgJFZhci5OYW1lKSB7CiAgICAgICAgICAgICAgICAkU2Vzc2lvblN0YXRlLlZhcmlhYmxlcy5BZGQoKE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUnVuc3BhY2VzLlNlc3Npb25TdGF0ZVZhcmlhYmxlRW50cnkgLUFyZ3VtZW50TGlzdCAkVmFyLm5hbWUsJFZhci5WYWx1ZSwkVmFyLmRlc2NyaXB0aW9uLCRWYXIub3B0aW9ucywkVmFyLmF0dHJpYnV0ZXMpKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAjIEFkZCBGdW5jdGlvbnMgZnJvbSBjdXJyZW50IHJ1bnNwYWNlIHRvIHRoZSBJbml0aWFsU2Vzc2lvblN0YXRlCiAgICAgICAgICAgIEZvckVhY2goJEZ1bmN0aW9uIGluIChHZXQtQ2hpbGRJdGVtIEZ1bmN0aW9uOikpIHsKICAgICAgICAgICAgICAgICRTZXNzaW9uU3RhdGUuQ29tbWFuZHMuQWRkKChOZXctT2JqZWN0IC1UeXBlTmFtZSBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlJ1bnNwYWNlcy5TZXNzaW9uU3RhdGVGdW5jdGlvbkVudHJ5IC1Bcmd1bWVudExpc3QgJEZ1bmN0aW9uLk5hbWUsICRGdW5jdGlvbi5EZWZpbml0aW9uKSkKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgIyB0aHJlYWRpbmcgYWRhcHRlZCBmcm9tCiAgICAgICAgIyBodHRwczovL2dpdGh1Yi5jb20vZGFya29wZXJhdG9yL1Bvc2gtU2VjTW9kL2Jsb2IvbWFzdGVyL0Rpc2NvdmVyeS9EaXNjb3ZlcnkucHNtMSNMNDA3CiAgICAgICAgIyAgIFRoYW5rcyBDYXJsb3MhCgogICAgICAgICMgY3JlYXRlIGEgcG9vbCBvZiBtYXhUaHJlYWQgcnVuc3BhY2VzCiAgICAgICAgJFBvb2wgPSBbcnVuc3BhY2VmYWN0b3J5XTo6Q3JlYXRlUnVuc3BhY2VQb29sKDEsICRUaHJlYWRzLCAkU2Vzc2lvblN0YXRlLCAkSG9zdCkKICAgICAgICAkUG9vbC5PcGVuKCkKCiAgICAgICAgJEpvYnMgPSBAKCkKICAgICAgICAkUFMgPSBAKCkKICAgICAgICAkV2FpdCA9IEAoKQoKICAgICAgICAkQ291bnRlciA9IDAKICAgIH0KCiAgICBwcm9jZXNzIHsKCiAgICAgICAgRm9yRWFjaCAoJENvbXB1dGVyIGluICRDb21wdXRlck5hbWUpIHsKCiAgICAgICAgICAgICMgbWFrZSBzdXJlIHdlIGdldCBhIHNlcnZlciBuYW1lCiAgICAgICAgICAgIGlmICgkQ29tcHV0ZXIgLW5lICcnKSB7CiAgICAgICAgICAgICAgICAjIFdyaXRlLVZlcmJvc2UgIlsqXSBFbnVtZXJhdGluZyBzZXJ2ZXIgJENvbXB1dGVyICgkKCRDb3VudGVyKzEpIG9mICQoJENvbXB1dGVyTmFtZS5jb3VudCkpIgoKICAgICAgICAgICAgICAgIFdoaWxlICgkKCRQb29sLkdldEF2YWlsYWJsZVJ1bnNwYWNlcygpKSAtbGUgMCkgewogICAgICAgICAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1NaWxsaVNlY29uZHMgNTAwCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIyBjcmVhdGUgYSAicG93ZXJzaGVsbCBwaXBlbGluZSBydW5uZXIiCiAgICAgICAgICAgICAgICAkUFMgKz0gW3Bvd2Vyc2hlbGxdOjpjcmVhdGUoKQoKICAgICAgICAgICAgICAgICRQU1skQ291bnRlcl0ucnVuc3BhY2Vwb29sID0gJFBvb2wKCiAgICAgICAgICAgICAgICAjIGFkZCB0aGUgc2NyaXB0IGJsb2NrICsgYXJndW1lbnRzCiAgICAgICAgICAgICAgICAkTnVsbCA9ICRQU1skQ291bnRlcl0uQWRkU2NyaXB0KCRTY3JpcHRCbG9jaykuQWRkUGFyYW1ldGVyKCdDb21wdXRlck5hbWUnLCAkQ29tcHV0ZXIpCiAgICAgICAgICAgICAgICBpZigkU2NyaXB0UGFyYW1ldGVycykgewogICAgICAgICAgICAgICAgICAgIEZvckVhY2ggKCRQYXJhbSBpbiAkU2NyaXB0UGFyYW1ldGVycy5HZXRFbnVtZXJhdG9yKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE51bGwgPSAkUFNbJENvdW50ZXJdLkFkZFBhcmFtZXRlcigkUGFyYW0uTmFtZSwgJFBhcmFtLlZhbHVlKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAjIHN0YXJ0IGpvYgogICAgICAgICAgICAgICAgJEpvYnMgKz0gJFBTWyRDb3VudGVyXS5CZWdpbkludm9rZSgpOwoKICAgICAgICAgICAgICAgICMgc3RvcmUgd2FpdCBoYW5kbGVzIGZvciBXYWl0Rm9yQWxsIGNhbGwKICAgICAgICAgICAgICAgICRXYWl0ICs9ICRKb2JzWyRDb3VudGVyXS5Bc3luY1dhaXRIYW5kbGUKICAgICAgICAgICAgfQogICAgICAgICAgICAkQ291bnRlciA9ICRDb3VudGVyICsgMQogICAgICAgIH0KICAgIH0KCiAgICBlbmQgewoKICAgICAgICBXcml0ZS1WZXJib3NlICJXYWl0aW5nIGZvciBzY2FubmluZyB0aHJlYWRzIHRvIGZpbmlzaC4uLiIKCiAgICAgICAgJFdhaXRUaW1lb3V0ID0gR2V0LURhdGUKCiAgICAgICAgIyBzZXQgYSA2MCBzZWNvbmQgdGltZW91dCBmb3IgdGhlIHNjYW5uaW5nIHRocmVhZHMKICAgICAgICB3aGlsZSAoJCgkSm9icyB8IFdoZXJlLU9iamVjdCB7JF8uSXNDb21wbGV0ZWQgLWVxICRGYWxzZX0pLmNvdW50IC1ndCAwIC1hbmQgJCgkKCQoR2V0LURhdGUpIC0gJFdhaXRUaW1lb3V0KS50b3RhbFNlY29uZHMpIC1sdCA2MCkgewogICAgICAgICAgICAgICAgU3RhcnQtU2xlZXAgLU1pbGxpU2Vjb25kcyA1MDAKICAgICAgICAgICAgfQoKICAgICAgICAjIGVuZCBhc3luYyBjYWxsCiAgICAgICAgZm9yICgkeSA9IDA7ICR5IC1sdCAkQ291bnRlcjsgJHkrKykgewoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICMgY29tcGxldGUgYXN5bmMgam9iCiAgICAgICAgICAgICAgICAkUFNbJHldLkVuZEludm9rZSgkSm9ic1skeV0pCgogICAgICAgICAgICB9IGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgImVycm9yOiAkXyIKICAgICAgICAgICAgfQogICAgICAgICAgICBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICRQU1skeV0uRGlzcG9zZSgpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgJFBvb2wuRGlzcG9zZSgpCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiQWxsIHRocmVhZHMgY29tcGxldGVkISIKICAgIH0KfQoKCmZ1bmN0aW9uIEludm9rZS1Vc2VySHVudGVyIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBGaW5kcyB3aGljaCBtYWNoaW5lcyB1c2VycyBvZiBhIHNwZWNpZmllZCBncm91cCBhcmUgbG9nZ2VkIGludG8uCgogICAgICAgIEF1dGhvcjogQGhhcm1qMHkKICAgICAgICBMaWNlbnNlOiBCU0QgMy1DbGF1c2UKCiAgICAuREVTQ1JJUFRJT04KCiAgICAgICAgVGhpcyBmdW5jdGlvbiBmaW5kcyB0aGUgbG9jYWwgZG9tYWluIG5hbWUgZm9yIGEgaG9zdCB1c2luZyBHZXQtTmV0RG9tYWluLAogICAgICAgIHF1ZXJpZXMgdGhlIGRvbWFpbiBmb3IgdXNlcnMgb2YgYSBzcGVjaWZpZWQgZ3JvdXAgKGRlZmF1bHQgImRvbWFpbiBhZG1pbnMiKQogICAgICAgIHdpdGggR2V0LU5ldEdyb3VwTWVtYmVyIG9yIHJlYWRzIGluIGEgdGFyZ2V0IHVzZXIgbGlzdCwgcXVlcmllcyB0aGUgZG9tYWluIGZvciBhbGwKICAgICAgICBhY3RpdmUgbWFjaGluZXMgd2l0aCBHZXQtTmV0Q29tcHV0ZXIgb3IgcmVhZHMgaW4gYSBwcmUtcG9wdWxhdGVkIGhvc3QgbGlzdCwKICAgICAgICByYW5kb21seSBzaHVmZmxlcyB0aGUgdGFyZ2V0IGxpc3QsIHRoZW4gZm9yIGVhY2ggc2VydmVyIGl0IGdldHMgYSBsaXN0IG9mCiAgICAgICAgYWN0aXZlIHVzZXJzIHdpdGggR2V0LU5ldFNlc3Npb24vR2V0LU5ldExvZ2dlZG9uLiBUaGUgZm91bmQgdXNlciBsaXN0IGlzIGNvbXBhcmVkCiAgICAgICAgYWdhaW5zdCB0aGUgdGFyZ2V0IGxpc3QsIGFuZCBhIHN0YXR1cyBtZXNzYWdlIGlzIGRpc3BsYXllZCBmb3IgYW55IGhpdHMuCiAgICAgICAgVGhlIGZsYWcgLUNoZWNrQWNjZXNzIHdpbGwgY2hlY2sgZWFjaCBwb3NpdGl2ZSBob3N0IHRvIHNlZSBpZiB0aGUgY3VycmVudAogICAgICAgIHVzZXIgaGFzIGxvY2FsIGFkbWluIGFjY2VzcyB0byB0aGUgbWFjaGluZS4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBIb3N0IGFycmF5IHRvIGVudW1lcmF0ZSwgcGFzc2FibGUgb24gdGhlIHBpcGVsaW5lLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJGaWxlCgogICAgICAgIEZpbGUgb2YgaG9zdG5hbWVzL0lQcyB0byBzZWFyY2guCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckZpbHRlcgoKICAgICAgICBIb3N0IGZpbHRlciBuYW1lIHRvIHF1ZXJ5IEFEIGZvciwgd2lsZGNhcmRzIGFjY2VwdGVkLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCBmb3IgaG9zdHMsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBVbmNvbnN0cmFpbmVkCgogICAgICAgIFN3aXRjaC4gT25seSBlbnVtZXJhdGUgY29tcHV0ZXJzIHRoYXQgaGF2ZSB1bmNvbnN0cmFpbmVkIGRlbGVnYXRpb24uCgogICAgLlBBUkFNRVRFUiBHcm91cE5hbWUKCiAgICAgICAgR3JvdXAgbmFtZSB0byBxdWVyeSBmb3IgdGFyZ2V0IHVzZXJzLgoKICAgIC5QQVJBTUVURVIgVGFyZ2V0U2VydmVyCgogICAgICAgIEh1bnQgZm9yIHVzZXJzIHdobyBhcmUgZWZmZWN0aXZlIGxvY2FsIGFkbWlucyBvbiBhIHRhcmdldCBzZXJ2ZXIuCgogICAgLlBBUkFNRVRFUiBVc2VyTmFtZQoKICAgICAgICBTcGVjaWZpYyB1c2VybmFtZSB0byBzZWFyY2ggZm9yLgoKICAgIC5QQVJBTUVURVIgVXNlckZpbHRlcgoKICAgICAgICBBIGN1c3RvbWl6ZWQgbGRhcCBmaWx0ZXIgc3RyaW5nIHRvIHVzZSBmb3IgdXNlciBlbnVtZXJhdGlvbiwgZS5nLiAiKGRlc2NyaXB0aW9uPSphZG1pbiopIgoKICAgIC5QQVJBTUVURVIgVXNlckFEU3BhdGgKCiAgICAgICAgVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoIGZvciB1c2VycywgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCiAgICAuUEFSQU1FVEVSIFVzZXJGaWxlCgogICAgICAgIEZpbGUgb2YgdXNlcm5hbWVzIHRvIHNlYXJjaCBmb3IuCgogICAgLlBBUkFNRVRFUiBBZG1pbkNvdW50CgogICAgICAgIFN3aXRjaC4gSHVudCBmb3IgdXNlcnMgd2l0aCBhZG1pbkNvdW50PTEuCgogICAgLlBBUkFNRVRFUiBBbGxvd0RlbGVnYXRpb24KCiAgICAgICAgU3dpdGNoLiBSZXR1cm4gdXNlciBhY2NvdW50cyB0aGF0IGFyZSBub3QgbWFya2VkIGFzICdzZW5zaXRpdmUgYW5kIG5vdCBhbGxvd2VkIGZvciBkZWxlZ2F0aW9uJwoKICAgIC5QQVJBTUVURVIgU3RvcE9uU3VjY2VzcwoKICAgICAgICBTd2l0Y2guIFN0b3AgaHVudGluZyBhZnRlciBmaW5kaW5nIGFmdGVyIGZpbmRpbmcgYSB0YXJnZXQgdXNlci4KCiAgICAuUEFSQU1FVEVSIE5vUGluZwoKICAgICAgICBEb24ndCBwaW5nIGVhY2ggaG9zdCB0byBlbnN1cmUgaXQncyB1cCBiZWZvcmUgZW51bWVyYXRpbmcuCgogICAgLlBBUkFNRVRFUiBDaGVja0FjY2VzcwoKICAgICAgICBTd2l0Y2guIENoZWNrIGlmIHRoZSBjdXJyZW50IHVzZXIgaGFzIGxvY2FsIGFkbWluIGFjY2VzcyB0byBmb3VuZCBtYWNoaW5lcy4KCiAgICAuUEFSQU1FVEVSIERlbGF5CgogICAgICAgIERlbGF5IGJldHdlZW4gZW51bWVyYXRpbmcgaG9zdHMsIGRlZmF1bHRzIHRvIDAKCiAgICAuUEFSQU1FVEVSIEppdHRlcgoKICAgICAgICBKaXR0ZXIgZm9yIHRoZSBob3N0IGRlbGF5LCBkZWZhdWx0cyB0byArLy0gMC4zCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgRG9tYWluIGZvciBxdWVyeSBmb3IgbWFjaGluZXMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIFNob3dBbGwKCiAgICAgICAgU3dpdGNoLiBSZXR1cm4gYWxsIHVzZXIgbG9jYXRpb24gcmVzdWx0cywgaS5lLiBJbnZva2UtVXNlclZpZXcgZnVuY3Rpb25hbGl0eS4KCiAgICAuUEFSQU1FVEVSIFNlYXJjaEZvcmVzdAoKICAgICAgICBTd2l0Y2guIFNlYXJjaCBhbGwgZG9tYWlucyBpbiB0aGUgZm9yZXN0IGZvciB0YXJnZXQgdXNlcnMgaW5zdGVhZCBvZiBqdXN0CiAgICAgICAgYSBzaW5nbGUgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgU3RlYWx0aAoKICAgICAgICBTd2l0Y2guIE9ubHkgZW51bWVyYXRlIHNlc3Npb25zIGZyb20gY29ubm9ubHkgdXNlZCB0YXJnZXQgc2VydmVycy4KCiAgICAuUEFSQU1FVEVSIFN0ZWFsdGhTb3VyY2UKCiAgICAgICAgVGhlIHNvdXJjZSBvZiB0YXJnZXQgc2VydmVycyB0byB1c2UsICdERlMnIChkaXN0cmlidXRlZCBmaWxlIHNlcnZlcnMpLAogICAgICAgICdEQycgKGRvbWFpbiBjb250cm9sbGVycyksICdGaWxlJyAoZmlsZSBzZXJ2ZXJzKSwgb3IgJ0FsbCcKCiAgICAuUEFSQU1FVEVSIEZvcmVpZ25Vc2VycwoKICAgICAgICBTd2l0Y2guIE9ubHkgcmV0dXJuIHJlc3VsdHMgdGhhdCBhcmUgbm90IHBhcnQgb2Ygc2VhcmNoZWQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgVGhyZWFkcwoKICAgICAgICBUaGUgbWF4aW11bSBjb25jdXJyZW50IHRocmVhZHMgdG8gZXhlY3V0ZS4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1Vc2VySHVudGVyIC1DaGVja0FjY2VzcwoKICAgICAgICBGaW5kcyBtYWNoaW5lcyBvbiB0aGUgbG9jYWwgZG9tYWluIHdoZXJlIGRvbWFpbiBhZG1pbnMgYXJlIGxvZ2dlZCBpbnRvCiAgICAgICAgYW5kIGNoZWNrcyBpZiB0aGUgY3VycmVudCB1c2VyIGhhcyBsb2NhbCBhZG1pbmlzdHJhdG9yIGFjY2Vzcy4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1Vc2VySHVudGVyIC1Eb21haW4gJ3Rlc3RpbmcnCgogICAgICAgIEZpbmRzIG1hY2hpbmVzIG9uIHRoZSAndGVzdGluZycgZG9tYWluIHdoZXJlIGRvbWFpbiBhZG1pbnMgYXJlIGxvZ2dlZCBpbnRvLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gSW52b2tlLVVzZXJIdW50ZXIgLVRocmVhZHMgMjAKCiAgICAgICAgTXVsdGktdGhyZWFkZWQgdXNlciBodW50aW5nLCByZXBsYWNlcyBJbnZva2UtVXNlckh1bnRlclRocmVhZGVkLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gSW52b2tlLVVzZXJIdW50ZXIgLVVzZXJGaWxlIHVzZXJzLnR4dCAtQ29tcHV0ZXJGaWxlIGhvc3RzLnR4dAoKICAgICAgICBGaW5kcyBtYWNoaW5lcyBpbiBob3N0cy50eHQgd2hlcmUgYW55IG1lbWJlcnMgb2YgdXNlcnMudHh0IGFyZSBsb2dnZWQgaW4KICAgICAgICBvciBoYXZlIHNlc3Npb25zLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gSW52b2tlLVVzZXJIdW50ZXIgLUdyb3VwTmFtZSAiUG93ZXIgVXNlcnMiIC1EZWxheSA2MAoKICAgICAgICBGaW5kIG1hY2hpbmVzIG9uIHRoZSBkb21haW4gd2hlcmUgbWVtYmVycyBvZiB0aGUgIlBvd2VyIFVzZXJzIiBncm91cHMgYXJlCiAgICAgICAgbG9nZ2VkIGludG8gd2l0aCBhIDYwIHNlY29uZCAoKy8tICouMykgcmFuZG9taXplZCBkZWxheSBiZXR3ZWVuCiAgICAgICAgdG91Y2hpbmcgZWFjaCBob3N0LgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gSW52b2tlLVVzZXJIdW50ZXIgLVRhcmdldFNlcnZlciBGSUxFU0VSVkVSCgogICAgICAgIFF1ZXJ5IEZJTEVTRVJWRVIgZm9yIHVzZXJlcyB3aG8gYXJlIGVmZmVjdGl2ZSBsb2NhbCBhZG1pbmlzdHJhdG9ycyB1c2luZwogICAgICAgIEdldC1OZXRMb2NhbEdyb3VwIC1SZWN1cnNlLCBhbmQgaHVudCBmb3IgdGhhdCB1c2VyIHNldCBvbiB0aGUgbmV0d29yay4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1Vc2VySHVudGVyIC1TZWFyY2hGb3Jlc3QKCiAgICAgICAgRmluZCBhbGwgbWFjaGluZXMgaW4gdGhlIGN1cnJlbnQgZm9yZXN0IHdoZXJlIGRvbWFpbiBhZG1pbnMgYXJlIGxvZ2dlZCBpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1Vc2VySHVudGVyIC1TdGVhbHRoCgogICAgICAgIEV4ZWN1dGVzIG9sZCBJbnZva2UtU3RlYWx0aFVzZXJIdW50ZXIgZnVuY3Rpb25hbGl0eSwgZW51bWVyYXRpbmcgY29tbW9ubHkKICAgICAgICB1c2VkIHNlcnZlcnMgYW5kIGNoZWNraW5nIGp1c3Qgc2Vzc2lvbnMgZm9yIGVhY2guCgogICAgLkxJTksKICAgICAgICBodHRwOi8vYmxvZy5oYXJtajB5Lm5ldAojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uPTAsVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdHMnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSwKCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHtUZXN0LVBhdGggLVBhdGggJF8gfSldCiAgICAgICAgW0FsaWFzKCdIb3N0TGlzdCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyRmlsZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJGaWx0ZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyQURTcGF0aCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVW5jb25zdHJhaW5lZCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkR3JvdXBOYW1lID0gJ0RvbWFpbiBBZG1pbnMnLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRUYXJnZXRTZXJ2ZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJOYW1lLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyRmlsdGVyLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyQURTcGF0aCwKCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHtUZXN0LVBhdGggLVBhdGggJF8gfSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlckZpbGUsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEFkbWluQ291bnQsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEFsbG93RGVsZWdhdGlvbiwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkQ2hlY2tBY2Nlc3MsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFN0b3BPblN1Y2Nlc3MsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJE5vUGluZywKCiAgICAgICAgW1VJbnQzMl0KICAgICAgICAkRGVsYXkgPSAwLAoKICAgICAgICBbRG91YmxlXQogICAgICAgICRKaXR0ZXIgPSAuMywKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRTaG93QWxsLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRTZWFyY2hGb3Jlc3QsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFN0ZWFsdGgsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlU2V0KCJERlMiLCJEQyIsIkZpbGUiLCJBbGwiKV0KICAgICAgICAkU3RlYWx0aFNvdXJjZSA9IkFsbCIsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEZvcmVpZ25Vc2VycywKCiAgICAgICAgW0ludF0KICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMCldCiAgICAgICAgJFRocmVhZHMKICAgICkKCiAgICBiZWdpbiB7CgogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RlYnVnJ10pIHsKICAgICAgICAgICAgJERlYnVnUHJlZmVyZW5jZSA9ICdDb250aW51ZScKICAgICAgICB9CgogICAgICAgICMgcmFuZG9tIG9iamVjdCBmb3IgZGVsYXkKICAgICAgICAkUmFuZE5vID0gTmV3LU9iamVjdCBTeXN0ZW0uUmFuZG9tCgogICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBSdW5uaW5nIEludm9rZS1Vc2VySHVudGVyIHdpdGggZGVsYXkgb2YgJERlbGF5IgoKICAgICAgICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgICAgICMKICAgICAgICAjIEZpcnN0IHdlIGJ1aWxkIHRoZSBob3N0IHRhcmdldCBzZXQKICAgICAgICAjCiAgICAgICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCiAgICAgICAgaWYoJENvbXB1dGVyRmlsZSkgewogICAgICAgICAgICAjIGlmIHdlJ3JlIHVzaW5nIGEgaG9zdCBsaXN0LCByZWFkIHRoZSB0YXJnZXRzIGluIGFuZCBhZGQgdGhlbSB0byB0aGUgdGFyZ2V0IGxpc3QKICAgICAgICAgICAgJENvbXB1dGVyTmFtZSA9IEdldC1Db250ZW50IC1QYXRoICRDb21wdXRlckZpbGUKICAgICAgICB9CgogICAgICAgIGlmKCEkQ29tcHV0ZXJOYW1lKSB7IAogICAgICAgICAgICBbQXJyYXldJENvbXB1dGVyTmFtZSA9IEAoKQoKICAgICAgICAgICAgaWYoJERvbWFpbikgewogICAgICAgICAgICAgICAgJFRhcmdldERvbWFpbnMgPSBAKCREb21haW4pCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZWlmKCRTZWFyY2hGb3Jlc3QpIHsKICAgICAgICAgICAgICAgICMgZ2V0IEFMTCB0aGUgZG9tYWlucyBpbiB0aGUgZm9yZXN0IHRvIHNlYXJjaAogICAgICAgICAgICAgICAgJFRhcmdldERvbWFpbnMgPSBHZXQtTmV0Rm9yZXN0RG9tYWluIHwgRm9yRWFjaC1PYmplY3QgeyAkXy5OYW1lIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICMgdXNlIHRoZSBsb2NhbCBkb21haW4KICAgICAgICAgICAgICAgICRUYXJnZXREb21haW5zID0gQCggKEdldC1OZXREb21haW4pLm5hbWUgKQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBpZigkU3RlYWx0aCkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiU3RlYWx0aCBtb2RlISBFbnVtZXJhdGluZyBjb21tb25seSB1c2VkIHNlcnZlcnMiCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJTdGVhbHRoIHNvdXJjZTogJFN0ZWFsdGhTb3VyY2UiCgogICAgICAgICAgICAgICAgRm9yRWFjaCAoJERvbWFpbiBpbiAkVGFyZ2V0RG9tYWlucykgewogICAgICAgICAgICAgICAgICAgIGlmICgoJFN0ZWFsdGhTb3VyY2UgLWVxICJGaWxlIikgLW9yICgkU3RlYWx0aFNvdXJjZSAtZXEgIkFsbCIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBRdWVyeWluZyBkb21haW4gJERvbWFpbiBmb3IgRmlsZSBTZXJ2ZXJzLi4uIgogICAgICAgICAgICAgICAgICAgICAgICAkQ29tcHV0ZXJOYW1lICs9IEdldC1OZXRGaWxlU2VydmVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlcgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoKCRTdGVhbHRoU291cmNlIC1lcSAiREZTIikgLW9yICgkU3RlYWx0aFNvdXJjZSAtZXEgIkFsbCIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBRdWVyeWluZyBkb21haW4gJERvbWFpbiBmb3IgREZTIFNlcnZlcnMuLi4iCiAgICAgICAgICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgKz0gR2V0LURGU3NoYXJlIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciB8IEZvckVhY2gtT2JqZWN0IHskXy5SZW1vdGVTZXJ2ZXJOYW1lfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoKCRTdGVhbHRoU291cmNlIC1lcSAiREMiKSAtb3IgKCRTdGVhbHRoU291cmNlIC1lcSAiQWxsIikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFF1ZXJ5aW5nIGRvbWFpbiAkRG9tYWluIGZvciBEb21haW4gQ29udHJvbGxlcnMuLi4iCiAgICAgICAgICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgKz0gR2V0LU5ldERvbWFpbkNvbnRyb2xsZXIgLUxEQVAgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIHwgRm9yRWFjaC1PYmplY3QgeyAkXy5kbnNob3N0bmFtZX0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBGb3JFYWNoICgkRG9tYWluIGluICRUYXJnZXREb21haW5zKSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFF1ZXJ5aW5nIGRvbWFpbiAkRG9tYWluIGZvciBob3N0cyIKCiAgICAgICAgICAgICAgICAgICAgJEFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICAgICAgICAgICAgICdEb21haW4nID0gJERvbWFpbgogICAgICAgICAgICAgICAgICAgICAgICAnRG9tYWluQ29udHJvbGxlcicgPSAkRG9tYWluQ29udHJvbGxlcgogICAgICAgICAgICAgICAgICAgICAgICAnQURTcGF0aCcgPSAkQURTcGF0aAogICAgICAgICAgICAgICAgICAgICAgICAnRmlsdGVyJyA9ICRDb21wdXRlckZpbHRlcgogICAgICAgICAgICAgICAgICAgICAgICAnVW5jb25zdHJhaW5lZCcgPSAkVW5jb25zdHJhaW5lZAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgJENvbXB1dGVyTmFtZSArPSBHZXQtTmV0Q29tcHV0ZXIgQEFyZ3VtZW50cwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAjIHJlbW92ZSBhbnkgbnVsbCB0YXJnZXQgaG9zdHMsIHVuaXF1aWZ5IHRoZSBsaXN0IGFuZCBzaHVmZmxlIGl0CiAgICAgICAgICAgICRDb21wdXRlck5hbWUgPSAkQ29tcHV0ZXJOYW1lIHwgV2hlcmUtT2JqZWN0IHsgJF8gfSB8IFNvcnQtT2JqZWN0IC1VbmlxdWUgfCBTb3J0LU9iamVjdCB7IEdldC1SYW5kb20gfQogICAgICAgICAgICBpZigkKCRDb21wdXRlck5hbWUuQ291bnQpIC1lcSAwKSB7CiAgICAgICAgICAgICAgICB0aHJvdyAiTm8gaG9zdHMgZm91bmQhIgogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgICAgICMKICAgICAgICAjIE5vdyB3ZSBidWlsZCB0aGUgdXNlciB0YXJnZXQgc2V0CiAgICAgICAgIwogICAgICAgICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgogICAgICAgICMgdXNlcnMgd2UncmUgZ29pbmcgdG8gYmUgc2VhcmNoaW5nIGZvcgogICAgICAgICRUYXJnZXRVc2VycyA9IEAoKQoKICAgICAgICAjIGdldCB0aGUgY3VycmVudCB1c2VyIHNvIHdlIGNhbiBpZ25vcmUgaXQgaW4gdGhlIHJlc3VsdHMKICAgICAgICAkQ3VycmVudFVzZXIgPSAoW0Vudmlyb25tZW50XTo6VXNlck5hbWUpLnRvTG93ZXIoKQoKICAgICAgICAjIGlmIHdlJ3JlIHNob3dpbmcgYWxsIHJlc3VsdHMsIHNraXAgdXNlcm5hbWUgZW51bWVyYXRpb24KICAgICAgICBpZigkU2hvd0FsbCAtb3IgJEZvcmVpZ25Vc2VycykgewogICAgICAgICAgICAkVXNlciA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgJFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWVtYmVyRG9tYWluJyAkTnVsbAogICAgICAgICAgICAkVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNZW1iZXJOYW1lJyAnKicKICAgICAgICAgICAgJFRhcmdldFVzZXJzID0gQCgkVXNlcikKCiAgICAgICAgICAgIGlmKCRGb3JlaWduVXNlcnMpIHsKICAgICAgICAgICAgICAgICMgaWYgd2UncmUgc2VhcmNoaW5nIGZvciB1c2VyIHJlc3VsdHMgbm90IGluIHRoZSBwcmltYXJ5IGRvbWFpbgogICAgICAgICAgICAgICAgJGtyYnRndE5hbWUgPSBDb252ZXJ0LUFETmFtZSAtT2JqZWN0TmFtZSAia3JidGd0QCQoJERvbWFpbikiIC1JbnB1dFR5cGUgU2ltcGxlIC1PdXRwdXRUeXBlIE5UNAogICAgICAgICAgICAgICAgJERvbWFpblNob3J0TmFtZSA9ICRrcmJ0Z3ROYW1lLnNwbGl0KCJcIilbMF0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAjIGlmIHdlIHdhbnQgdG8gaHVudCBmb3IgdGhlIGVmZmVjdGl2ZSBkb21haW4gdXNlcnMgd2hvIGNhbiBhY2Nlc3MgYSB0YXJnZXQgc2VydmVyCiAgICAgICAgZWxzZWlmKCRUYXJnZXRTZXJ2ZXIpIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiUXVlcnlpbmcgdGFyZ2V0IHNlcnZlciAnJFRhcmdldFNlcnZlcicgZm9yIGxvY2FsIHVzZXJzIgogICAgICAgICAgICAkVGFyZ2V0VXNlcnMgPSBHZXQtTmV0TG9jYWxHcm91cCAkVGFyZ2V0U2VydmVyIC1SZWN1cnNlIHwgV2hlcmUtT2JqZWN0IHsoLW5vdCAkXy5Jc0dyb3VwKSAtYW5kICRfLklzRG9tYWluIH0gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAkVXNlciA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICRVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ01lbWJlckRvbWFpbicgKCRfLkFjY291bnROYW1lKS5zcGxpdCgiLyIpWzBdLnRvTG93ZXIoKSAKICAgICAgICAgICAgICAgICRVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ01lbWJlck5hbWUnICgkXy5BY2NvdW50TmFtZSkuc3BsaXQoIi8iKVsxXS50b0xvd2VyKCkgCiAgICAgICAgICAgICAgICAkVXNlcgogICAgICAgICAgICB9ICB8IFdoZXJlLU9iamVjdCB7JF99CiAgICAgICAgfQogICAgICAgICMgaWYgd2UgZ2V0IGEgc3BlY2lmaWMgdXNlcm5hbWUsIG9ubHkgdXNlIHRoYXQKICAgICAgICBlbHNlaWYoJFVzZXJOYW1lKSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBVc2luZyB0YXJnZXQgdXNlciAnJFVzZXJOYW1lJy4uLiIKICAgICAgICAgICAgJFVzZXIgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgIGlmKCRUYXJnZXREb21haW5zKSB7CiAgICAgICAgICAgICAgICAkVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNZW1iZXJEb21haW4nICRUYXJnZXREb21haW5zWzBdCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNZW1iZXJEb21haW4nICROdWxsCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWVtYmVyTmFtZScgJFVzZXJOYW1lLlRvTG93ZXIoKQogICAgICAgICAgICAkVGFyZ2V0VXNlcnMgPSBAKCRVc2VyKQogICAgICAgIH0KICAgICAgICAjIHJlYWQgaW4gYSB0YXJnZXQgdXNlciBsaXN0IGlmIHdlIGhhdmUgb25lCiAgICAgICAgZWxzZWlmKCRVc2VyRmlsZSkgewogICAgICAgICAgICAkVGFyZ2V0VXNlcnMgPSBHZXQtQ29udGVudCAtUGF0aCAkVXNlckZpbGUgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAkVXNlciA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgIGlmKCRUYXJnZXREb21haW5zKSB7CiAgICAgICAgICAgICAgICAgICAgJFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWVtYmVyRG9tYWluJyAkVGFyZ2V0RG9tYWluc1swXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWVtYmVyRG9tYWluJyAkTnVsbAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWVtYmVyTmFtZScgJF8KICAgICAgICAgICAgICAgICRVc2VyCiAgICAgICAgICAgIH0gIHwgV2hlcmUtT2JqZWN0IHskX30KICAgICAgICB9CiAgICAgICAgZWxzZWlmKCRVc2VyQURTcGF0aCAtb3IgJFVzZXJGaWx0ZXIgLW9yICRBZG1pbkNvdW50KSB7CiAgICAgICAgICAgIEZvckVhY2ggKCREb21haW4gaW4gJFRhcmdldERvbWFpbnMpIHsKCiAgICAgICAgICAgICAgICAkQXJndW1lbnRzID0gQHsKICAgICAgICAgICAgICAgICAgICAnRG9tYWluJyA9ICREb21haW4KICAgICAgICAgICAgICAgICAgICAnRG9tYWluQ29udHJvbGxlcicgPSAkRG9tYWluQ29udHJvbGxlcgogICAgICAgICAgICAgICAgICAgICdBRFNwYXRoJyA9ICRVc2VyQURTcGF0aAogICAgICAgICAgICAgICAgICAgICdGaWx0ZXInID0gJFVzZXJGaWx0ZXIKICAgICAgICAgICAgICAgICAgICAnQWRtaW5Db3VudCcgPSAkQWRtaW5Db3VudAogICAgICAgICAgICAgICAgICAgICdBbGxvd0RlbGVnYXRpb24nID0gJEFsbG93RGVsZWdhdGlvbgogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBRdWVyeWluZyBkb21haW4gJERvbWFpbiBmb3IgdXNlcnMiCiAgICAgICAgICAgICAgICAkVGFyZ2V0VXNlcnMgKz0gR2V0LU5ldFVzZXIgQEFyZ3VtZW50cyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAkVXNlciA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAkVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNZW1iZXJEb21haW4nICREb21haW4KICAgICAgICAgICAgICAgICAgICAkVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNZW1iZXJOYW1lJyAkXy5zYW1hY2NvdW50bmFtZQogICAgICAgICAgICAgICAgICAgICRVc2VyCiAgICAgICAgICAgICAgICB9ICB8IFdoZXJlLU9iamVjdCB7JF99CgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBGb3JFYWNoICgkRG9tYWluIGluICRUYXJnZXREb21haW5zKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gUXVlcnlpbmcgZG9tYWluICREb21haW4gZm9yIHVzZXJzIG9mIGdyb3VwICckR3JvdXBOYW1lJyIKICAgICAgICAgICAgICAgICRUYXJnZXRVc2VycyArPSBHZXQtTmV0R3JvdXBNZW1iZXIgLUdyb3VwTmFtZSAkR3JvdXBOYW1lIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlcgogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoKCAoLW5vdCAkU2hvd0FsbCkgLWFuZCAoLW5vdCAkRm9yZWlnblVzZXJzKSApIC1hbmQgKCghJFRhcmdldFVzZXJzKSAtb3IgKCRUYXJnZXRVc2Vycy5Db3VudCAtZXEgMCkpKSB7CiAgICAgICAgICAgIHRocm93ICJbIV0gTm8gdXNlcnMgZm91bmQgdG8gc2VhcmNoIGZvciEiCiAgICAgICAgfQoKICAgICAgICAjIHNjcmlwdCBibG9jayB0aGF0IGVudW1lcmF0ZXMgYSBzZXJ2ZXIKICAgICAgICAkSG9zdEVudW1CbG9jayA9IHsKICAgICAgICAgICAgcGFyYW0oJENvbXB1dGVyTmFtZSwgJFBpbmcsICRUYXJnZXRVc2VycywgJEN1cnJlbnRVc2VyLCAkU3RlYWx0aCwgJERvbWFpblNob3J0TmFtZSkKCiAgICAgICAgICAgICMgb3B0aW9uYWxseSBjaGVjayBpZiB0aGUgc2VydmVyIGlzIHVwIGZpcnN0CiAgICAgICAgICAgICRVcCA9ICRUcnVlCiAgICAgICAgICAgIGlmKCRQaW5nKSB7CiAgICAgICAgICAgICAgICAkVXAgPSBUZXN0LUNvbm5lY3Rpb24gLUNvdW50IDEgLVF1aWV0IC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCRVcCkgewogICAgICAgICAgICAgICAgaWYoISREb21haW5TaG9ydE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAjIGlmIHdlJ3JlIG5vdCBzZWFyY2hpbmcgZm9yIGZvcmVpZ24gdXNlcnMsIGNoZWNrIHNlc3Npb24gaW5mb3JtYXRpb24KICAgICAgICAgICAgICAgICAgICAkU2Vzc2lvbnMgPSBHZXQtTmV0U2Vzc2lvbiAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUKICAgICAgICAgICAgICAgICAgICBGb3JFYWNoICgkU2Vzc2lvbiBpbiAkU2Vzc2lvbnMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJOYW1lID0gJFNlc3Npb24uc2VzaTEwX3VzZXJuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRDTmFtZSA9ICRTZXNzaW9uLnNlc2kxMF9jbmFtZQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJENOYW1lIC1hbmQgJENOYW1lLlN0YXJ0c1dpdGgoIlxcIikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRDTmFtZSA9ICRDTmFtZS5UcmltU3RhcnQoIlwiKQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAjIG1ha2Ugc3VyZSB3ZSBoYXZlIGEgcmVzdWx0CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoJFVzZXJOYW1lKSAtYW5kICgkVXNlck5hbWUudHJpbSgpIC1uZSAnJykgLWFuZCAoISgkVXNlck5hbWUgLW1hdGNoICRDdXJyZW50VXNlcikpKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRhcmdldFVzZXJzIHwgV2hlcmUtT2JqZWN0IHskVXNlck5hbWUgLWxpa2UgJF8uTWVtYmVyTmFtZX0gfCBGb3JFYWNoLU9iamVjdCB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJUEFkZHJlc3MgPSBAKEdldC1JUEFkZHJlc3MgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lKVswXS5JUEFkZHJlc3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRVc2VyID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlckRvbWFpbicgJF8uTWVtYmVyRG9tYWluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyTmFtZScgJFVzZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlck5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lQQWRkcmVzcycgJElQQWRkcmVzcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU2Vzc2lvbkZyb20nICRDTmFtZQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFRyeSB0byByZXNvbHZlIHRoZSBETlMgaG9zdG5hbWUgb2YgJENuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJENOYW1lRE5TTmFtZSA9IFtTeXN0ZW0uTmV0LkRuc106OkdldEhvc3RFbnRyeSgkQ05hbWUpIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgSG9zdE5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kVXNlciB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdTZXNzaW9uRnJvbU5hbWUnICRDbmFtZUROU05hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRVc2VyIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ1Nlc3Npb25Gcm9tTmFtZScgJE51bGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgc2VlIGlmIHdlJ3JlIGNoZWNraW5nIHRvIHNlZSBpZiB3ZSBoYXZlIGxvY2FsIGFkbWluIGFjY2VzcyBvbiB0aGlzIG1hY2hpbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJENoZWNrQWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRBZG1pbiA9IEludm9rZS1DaGVja0xvY2FsQWRtaW5BY2Nlc3MgLUNvbXB1dGVyTmFtZSAkQ05hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMb2NhbEFkbWluJyAkQWRtaW4uSXNBZG1pbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMb2NhbEFkbWluJyAkTnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRVc2VyLlBTT2JqZWN0LlR5cGVOYW1lcy5BZGQoJ1Bvd2VyVmlldy5Vc2VyU2Vzc2lvbicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kVXNlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYoISRTdGVhbHRoKSB7CiAgICAgICAgICAgICAgICAgICAgIyBpZiB3ZSdyZSBub3QgJ3N0ZWFsdGh5JywgZW51bWVyYXRlIGxvZ2dlZG9uIHVzZXJzIGFzIHdlbGwKICAgICAgICAgICAgICAgICAgICAkTG9nZ2VkT24gPSBHZXQtTmV0TG9nZ2Vkb24gLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgRm9yRWFjaCAoJFVzZXIgaW4gJExvZ2dlZE9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyTmFtZSA9ICRVc2VyLndrdWkxX3VzZXJuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICMgVE9ETzogdHJhbnNsYXRlIGRvbWFpbiB0byBhdXRob3JhdGF0aXZlIG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgIyAgIHRoZW4gbWF0Y2ggZG9tYWluIG5hbWUgPwogICAgICAgICAgICAgICAgICAgICAgICAkVXNlckRvbWFpbiA9ICRVc2VyLndrdWkxX2xvZ29uX2RvbWFpbgoKICAgICAgICAgICAgICAgICAgICAgICAgIyBtYWtlIHN1cmUgd2V0IGhhdmUgYSByZXN1bHQKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCgkVXNlck5hbWUpIC1hbmQgKCRVc2VyTmFtZS50cmltKCkgLW5lICcnKSkgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUYXJnZXRVc2VycyB8IFdoZXJlLU9iamVjdCB7JFVzZXJOYW1lIC1saWtlICRfLk1lbWJlck5hbWV9IHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUHJvY2VlZCA9ICRUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJERvbWFpblNob3J0TmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJERvbWFpblNob3J0TmFtZS5Ub0xvd2VyKCkgLW5lICRVc2VyRG9tYWluLlRvTG93ZXIoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFByb2NlZWQgPSAkVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFByb2NlZWQgPSAkRmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkUHJvY2VlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSVBBZGRyZXNzID0gQChHZXQtSVBBZGRyZXNzIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSlbMF0uSVBBZGRyZXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZFVzZXIgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlckRvbWFpbicgJFVzZXJEb21haW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyTmFtZScgJFVzZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSVBBZGRyZXNzJyAkSVBBZGRyZXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU2Vzc2lvbkZyb20nICROdWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU2Vzc2lvbkZyb21OYW1lJyAkTnVsbAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBzZWUgaWYgd2UncmUgY2hlY2tpbmcgdG8gc2VlIGlmIHdlIGhhdmUgbG9jYWwgYWRtaW4gYWNjZXNzIG9uIHRoaXMgbWFjaGluZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJENoZWNrQWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQWRtaW4gPSBJbnZva2UtQ2hlY2tMb2NhbEFkbWluQWNjZXNzIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMb2NhbEFkbWluJyAkQWRtaW4uSXNBZG1pbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMb2NhbEFkbWluJyAkTnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZFVzZXIuUFNPYmplY3QuVHlwZU5hbWVzLkFkZCgnUG93ZXJWaWV3LlVzZXJTZXNzaW9uJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kVXNlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICB9CgogICAgcHJvY2VzcyB7CgogICAgICAgIGlmKCRUaHJlYWRzKSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlVzaW5nIHRocmVhZGluZyB3aXRoIHRocmVhZHMgPSAkVGhyZWFkcyIKCiAgICAgICAgICAgICMgaWYgd2UncmUgdXNpbmcgdGhyZWFkaW5nLCBraWNrIG9mZiB0aGUgc2NyaXB0IGJsb2NrIHdpdGggSW52b2tlLVRocmVhZGVkRnVuY3Rpb24KICAgICAgICAgICAgJFNjcmlwdFBhcmFtcyA9IEB7CiAgICAgICAgICAgICAgICAnUGluZycgPSAkKC1ub3QgJE5vUGluZykKICAgICAgICAgICAgICAgICdUYXJnZXRVc2VycycgPSAkVGFyZ2V0VXNlcnMKICAgICAgICAgICAgICAgICdDdXJyZW50VXNlcicgPSAkQ3VycmVudFVzZXIKICAgICAgICAgICAgICAgICdTdGVhbHRoJyA9ICRTdGVhbHRoCiAgICAgICAgICAgICAgICAnRG9tYWluU2hvcnROYW1lJyA9ICREb21haW5TaG9ydE5hbWUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBraWNrIG9mZiB0aGUgdGhyZWFkZWQgc2NyaXB0IGJsb2NrICsgYXJndW1lbnRzIAogICAgICAgICAgICBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbiAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1TY3JpcHRQYXJhbWV0ZXJzICRTY3JpcHRQYXJhbXMgLVRocmVhZHMgJFRocmVhZHMKICAgICAgICB9CgogICAgICAgIGVsc2UgewogICAgICAgICAgICBpZigtbm90ICROb1BpbmcgLWFuZCAoJENvbXB1dGVyTmFtZS5jb3VudCAtbmUgMSkpIHsKICAgICAgICAgICAgICAgICMgcGluZyBhbGwgaG9zdHMgaW4gcGFyYWxsZWwKICAgICAgICAgICAgICAgICRQaW5nID0ge3BhcmFtKCRDb21wdXRlck5hbWUpIGlmKFRlc3QtQ29ubmVjdGlvbiAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLUNvdW50IDEgLVF1aWV0IC1FcnJvckFjdGlvbiBTdG9wKXskQ29tcHV0ZXJOYW1lfX0KICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgPSBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbiAtTm9JbXBvcnRzIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSAtU2NyaXB0QmxvY2sgJFBpbmcgLVRocmVhZHMgMTAwCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBUb3RhbCBudW1iZXIgb2YgYWN0aXZlIGhvc3RzOiAkKCRDb21wdXRlck5hbWUuY291bnQpIgogICAgICAgICAgICAkQ291bnRlciA9IDAKCiAgICAgICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CgogICAgICAgICAgICAgICAgJENvdW50ZXIgPSAkQ291bnRlciArIDEKCiAgICAgICAgICAgICAgICAjIHNsZWVwIGZvciBvdXIgc2VtaS1yYW5kb21pemVkIGludGVydmFsCiAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkUmFuZE5vLk5leHQoKDEtJEppdHRlcikqJERlbGF5LCAoMSskSml0dGVyKSokRGVsYXkpCgogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIEVudW1lcmF0aW5nIHNlcnZlciAkQ29tcHV0ZXIgKCRDb3VudGVyIG9mICQoJENvbXB1dGVyTmFtZS5jb3VudCkpIgogICAgICAgICAgICAgICAgJFJlc3VsdCA9IEludm9rZS1Db21tYW5kIC1TY3JpcHRCbG9jayAkSG9zdEVudW1CbG9jayAtQXJndW1lbnRMaXN0ICRDb21wdXRlciwgJEZhbHNlLCAkVGFyZ2V0VXNlcnMsICRDdXJyZW50VXNlciwgJFN0ZWFsdGgsICREb21haW5TaG9ydE5hbWUKICAgICAgICAgICAgICAgICRSZXN1bHQKCiAgICAgICAgICAgICAgICBpZigkUmVzdWx0IC1hbmQgJFN0b3BPblN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gVGFyZ2V0IHVzZXIgZm91bmQsIHJldHVybmluZyBlYXJseSIKICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICB9Cn0KCgpmdW5jdGlvbiBJbnZva2UtU3RlYWx0aFVzZXJIdW50ZXIgewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MCxWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0cycpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lLAoKICAgICAgICBbVmFsaWRhdGVTY3JpcHQoe1Rlc3QtUGF0aCAtUGF0aCAkXyB9KV0KICAgICAgICBbQWxpYXMoJ0hvc3RMaXN0JyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJGaWxlLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckZpbHRlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJBRFNwYXRoLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcm91cE5hbWUgPSAnRG9tYWluIEFkbWlucycsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRhcmdldFNlcnZlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlck5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJGaWx0ZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJBRFNwYXRoLAoKICAgICAgICBbVmFsaWRhdGVTY3JpcHQoe1Rlc3QtUGF0aCAtUGF0aCAkXyB9KV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyRmlsZSwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkQ2hlY2tBY2Nlc3MsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFN0b3BPblN1Y2Nlc3MsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJE5vUGluZywKCiAgICAgICAgW1VJbnQzMl0KICAgICAgICAkRGVsYXkgPSAwLAoKICAgICAgICBbRG91YmxlXQogICAgICAgICRKaXR0ZXIgPSAuMywKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRTaG93QWxsLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRTZWFyY2hGb3Jlc3QsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlU2V0KCJERlMiLCJEQyIsIkZpbGUiLCJBbGwiKV0KICAgICAgICAkU3RlYWx0aFNvdXJjZSA9IkFsbCIKICAgICkKICAgICMga2ljayBvZmYgSW52b2tlLVVzZXJIdW50ZXIgd2l0aCBzdGVhbHRoIG9wdGlvbnMKICAgIEludm9rZS1Vc2VySHVudGVyIC1TdGVhbHRoIEBQU0JvdW5kUGFyYW1ldGVycwp9CgoKZnVuY3Rpb24gSW52b2tlLVByb2Nlc3NIdW50ZXIgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFF1ZXJ5IHRoZSBwcm9jZXNzIGxpc3RzIG9mIHJlbW90ZSBtYWNoaW5lcywgc2VhcmNoaW5nIGZvcgogICAgICAgIHByb2Nlc3NlcyB3aXRoIGEgc3BlY2lmaWMgbmFtZSBvciBvd25lZCBieSBhIHNwZWNpZmljIHVzZXIuCiAgICAgICAgVGhhbmtzIHRvIEBwYXVsYnJhbmRhdSBmb3IgdGhlIGFwcHJvYWNoIGlkZWEuCiAgICAgICAgCiAgICAgICAgQXV0aG9yOiBAaGFybWoweQogICAgICAgIExpY2Vuc2U6IEJTRCAzLUNsYXVzZQoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIEhvc3QgYXJyYXkgdG8gZW51bWVyYXRlLCBwYXNzYWJsZSBvbiB0aGUgcGlwZWxpbmUuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckZpbGUKCiAgICAgICAgRmlsZSBvZiBob3N0bmFtZXMvSVBzIHRvIHNlYXJjaC4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyRmlsdGVyCgogICAgICAgIEhvc3QgZmlsdGVyIG5hbWUgdG8gcXVlcnkgQUQgZm9yLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckFEU3BhdGgKCiAgICAgICAgVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoIGZvciBob3N0cywgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCiAgICAuUEFSQU1FVEVSIFByb2Nlc3NOYW1lCgogICAgICAgIFRoZSBuYW1lIG9mIHRoZSBwcm9jZXNzIHRvIGh1bnQsIG9yIGEgY29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgbmFtZXMuCgogICAgLlBBUkFNRVRFUiBHcm91cE5hbWUKCiAgICAgICAgR3JvdXAgbmFtZSB0byBxdWVyeSBmb3IgdGFyZ2V0IHVzZXJzLgoKICAgIC5QQVJBTUVURVIgVGFyZ2V0U2VydmVyCgogICAgICAgIEh1bnQgZm9yIHVzZXJzIHdobyBhcmUgZWZmZWN0aXZlIGxvY2FsIGFkbWlucyBvbiBhIHRhcmdldCBzZXJ2ZXIuCgogICAgLlBBUkFNRVRFUiBVc2VyTmFtZQoKICAgICAgICBTcGVjaWZpYyB1c2VybmFtZSB0byBzZWFyY2ggZm9yLgoKICAgIC5QQVJBTUVURVIgVXNlckZpbHRlcgoKICAgICAgICBBIGN1c3RvbWl6ZWQgbGRhcCBmaWx0ZXIgc3RyaW5nIHRvIHVzZSBmb3IgdXNlciBlbnVtZXJhdGlvbiwgZS5nLiAiKGRlc2NyaXB0aW9uPSphZG1pbiopIgoKICAgIC5QQVJBTUVURVIgVXNlckFEU3BhdGgKCiAgICAgICAgVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoIGZvciB1c2VycywgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCiAgICAuUEFSQU1FVEVSIFVzZXJGaWxlCgogICAgICAgIEZpbGUgb2YgdXNlcm5hbWVzIHRvIHNlYXJjaCBmb3IuCgogICAgLlBBUkFNRVRFUiBTdG9wT25TdWNjZXNzCgogICAgICAgIFN3aXRjaC4gU3RvcCBodW50aW5nIGFmdGVyIGZpbmRpbmcgYWZ0ZXIgZmluZGluZyBhIHRhcmdldCB1c2VyL3Byb2Nlc3MuCgogICAgLlBBUkFNRVRFUiBOb1BpbmcKCiAgICAgICAgU3dpdGNoLiBEb24ndCBwaW5nIGVhY2ggaG9zdCB0byBlbnN1cmUgaXQncyB1cCBiZWZvcmUgZW51bWVyYXRpbmcuCgogICAgLlBBUkFNRVRFUiBEZWxheQoKICAgICAgICBEZWxheSBiZXR3ZWVuIGVudW1lcmF0aW5nIGhvc3RzLCBkZWZhdWx0cyB0byAwCgogICAgLlBBUkFNRVRFUiBKaXR0ZXIKCiAgICAgICAgSml0dGVyIGZvciB0aGUgaG9zdCBkZWxheSwgZGVmYXVsdHMgdG8gKy8tIDAuMwoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIERvbWFpbiBmb3IgcXVlcnkgZm9yIG1hY2hpbmVzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBTaG93QWxsCgogICAgICAgIFN3aXRjaC4gUmV0dXJuIGFsbCB1c2VyIGxvY2F0aW9uIHJlc3VsdHMuCgogICAgLlBBUkFNRVRFUiBTZWFyY2hGb3Jlc3QKCiAgICAgICAgU3dpdGNoLiBTZWFyY2ggYWxsIGRvbWFpbnMgaW4gdGhlIGZvcmVzdCBmb3IgdGFyZ2V0IHVzZXJzIGluc3RlYWQgb2YganVzdAogICAgICAgIGEgc2luZ2xlIGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIFRocmVhZHMKCiAgICAgICAgVGhlIG1heGltdW0gY29uY3VycmVudCB0aHJlYWRzIHRvIGV4ZWN1dGUuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IG1hY2hpbmUvZG9tYWluLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gSW52b2tlLVByb2Nlc3NIdW50ZXIgLURvbWFpbiAndGVzdGluZycKICAgICAgICAKICAgICAgICBGaW5kcyBtYWNoaW5lcyBvbiB0aGUgJ3Rlc3RpbmcnIGRvbWFpbiB3aGVyZSBkb21haW4gYWRtaW5zIGhhdmUgYQogICAgICAgIHJ1bm5pbmcgcHJvY2Vzcy4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1Qcm9jZXNzSHVudGVyIC1UaHJlYWRzIDIwCgogICAgICAgIE11bHRpLXRocmVhZGVkIHByb2Nlc3MgaHVudGluZywgcmVwbGFjZXMgSW52b2tlLVByb2Nlc3NIdW50ZXJUaHJlYWRlZC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1Qcm9jZXNzSHVudGVyIC1Vc2VyRmlsZSB1c2Vycy50eHQgLUNvbXB1dGVyRmlsZSBob3N0cy50eHQKICAgICAgICAKICAgICAgICBGaW5kcyBtYWNoaW5lcyBpbiBob3N0cy50eHQgd2hlcmUgYW55IG1lbWJlcnMgb2YgdXNlcnMudHh0IGhhdmUgcnVubmluZwogICAgICAgIHByb2Nlc3Nlcy4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1Qcm9jZXNzSHVudGVyIC1Hcm91cE5hbWUgIlBvd2VyIFVzZXJzIiAtRGVsYXkgNjAKICAgICAgICAKICAgICAgICBGaW5kIG1hY2hpbmVzIG9uIHRoZSBkb21haW4gd2hlcmUgbWVtYmVycyBvZiB0aGUgIlBvd2VyIFVzZXJzIiBncm91cHMgaGF2ZQogICAgICAgIHJ1bm5pbmcgcHJvY2Vzc2VzIHdpdGggYSA2MCBzZWNvbmQgKCsvLSAqLjMpIHJhbmRvbWl6ZWQgZGVsYXkgYmV0d2VlbgogICAgICAgIHRvdWNoaW5nIGVhY2ggaG9zdC4KCiAgICAuTElOSwoKICAgICAgICBodHRwOi8vYmxvZy5oYXJtajB5Lm5ldAojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uPTAsVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdHMnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSwKCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHtUZXN0LVBhdGggLVBhdGggJF8gfSldCiAgICAgICAgW0FsaWFzKCdIb3N0TGlzdCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyRmlsZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJGaWx0ZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyQURTcGF0aCwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkUHJvY2Vzc05hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEdyb3VwTmFtZSA9ICdEb21haW4gQWRtaW5zJywKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVGFyZ2V0U2VydmVyLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyTmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlckZpbHRlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlckFEU3BhdGgsCgogICAgICAgIFtWYWxpZGF0ZVNjcmlwdCh7VGVzdC1QYXRoIC1QYXRoICRfIH0pXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJGaWxlLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRTdG9wT25TdWNjZXNzLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICROb1BpbmcsCgogICAgICAgIFtVSW50MzJdCiAgICAgICAgJERlbGF5ID0gMCwKCiAgICAgICAgW0RvdWJsZV0KICAgICAgICAkSml0dGVyID0gLjMsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU2hvd0FsbCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU2VhcmNoRm9yZXN0LAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFRocmVhZHMsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCgogICAgYmVnaW4gewoKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZWJ1ZyddKSB7CiAgICAgICAgICAgICREZWJ1Z1ByZWZlcmVuY2UgPSAnQ29udGludWUnCiAgICAgICAgfQoKICAgICAgICAjIHJhbmRvbSBvYmplY3QgZm9yIGRlbGF5CiAgICAgICAgJFJhbmRObyA9IE5ldy1PYmplY3QgU3lzdGVtLlJhbmRvbQoKICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gUnVubmluZyBJbnZva2UtUHJvY2Vzc0h1bnRlciB3aXRoIGRlbGF5IG9mICREZWxheSIKCiAgICAgICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgICAgICAjCiAgICAgICAgIyBGaXJzdCB3ZSBidWlsZCB0aGUgaG9zdCB0YXJnZXQgc2V0CiAgICAgICAgIwogICAgICAgICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgogICAgICAgICMgaWYgd2UncmUgdXNpbmcgYSBob3N0IGxpc3QsIHJlYWQgdGhlIHRhcmdldHMgaW4gYW5kIGFkZCB0aGVtIHRvIHRoZSB0YXJnZXQgbGlzdAogICAgICAgIGlmKCRDb21wdXRlckZpbGUpIHsKICAgICAgICAgICAgJENvbXB1dGVyTmFtZSA9IEdldC1Db250ZW50IC1QYXRoICRDb21wdXRlckZpbGUKICAgICAgICB9CgogICAgICAgIGlmKCEkQ29tcHV0ZXJOYW1lKSB7IAogICAgICAgICAgICBbYXJyYXldJENvbXB1dGVyTmFtZSA9IEAoKQoKICAgICAgICAgICAgaWYoJERvbWFpbikgewogICAgICAgICAgICAgICAgJFRhcmdldERvbWFpbnMgPSBAKCREb21haW4pCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZWlmKCRTZWFyY2hGb3Jlc3QpIHsKICAgICAgICAgICAgICAgICMgZ2V0IEFMTCB0aGUgZG9tYWlucyBpbiB0aGUgZm9yZXN0IHRvIHNlYXJjaAogICAgICAgICAgICAgICAgJFRhcmdldERvbWFpbnMgPSBHZXQtTmV0Rm9yZXN0RG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIHwgRm9yRWFjaC1PYmplY3QgeyAkXy5OYW1lIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICMgdXNlIHRoZSBsb2NhbCBkb21haW4KICAgICAgICAgICAgICAgICRUYXJnZXREb21haW5zID0gQCggKEdldC1OZXREb21haW4gLURvbWFpbiAkRG9tYWluIC1DcmVkZW50aWFsICRDcmVkZW50aWFsKS5uYW1lICkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgRm9yRWFjaCAoJERvbWFpbiBpbiAkVGFyZ2V0RG9tYWlucykgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFF1ZXJ5aW5nIGRvbWFpbiAkRG9tYWluIGZvciBob3N0cyIKICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgKz0gR2V0LU5ldENvbXB1dGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtRmlsdGVyICRDb21wdXRlckZpbHRlciAtQURTcGF0aCAkQ29tcHV0ZXJBRFNwYXRoCiAgICAgICAgICAgIH0KICAgICAgICAKICAgICAgICAgICAgIyByZW1vdmUgYW55IG51bGwgdGFyZ2V0IGhvc3RzLCB1bmlxdWlmeSB0aGUgbGlzdCBhbmQgc2h1ZmZsZSBpdAogICAgICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJENvbXB1dGVyTmFtZSB8IFdoZXJlLU9iamVjdCB7ICRfIH0gfCBTb3J0LU9iamVjdCAtVW5pcXVlIHwgU29ydC1PYmplY3QgeyBHZXQtUmFuZG9tIH0KICAgICAgICAgICAgaWYoJCgkQ29tcHV0ZXJOYW1lLkNvdW50KSAtZXEgMCkgewogICAgICAgICAgICAgICAgdGhyb3cgIk5vIGhvc3RzIGZvdW5kISIKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgICAgICAjCiAgICAgICAgIyBOb3cgd2UgYnVpbGQgdGhlIHVzZXIgdGFyZ2V0IHNldAogICAgICAgICMKICAgICAgICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKICAgICAgICBpZighJFByb2Nlc3NOYW1lKSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIk5vIHByb2Nlc3MgbmFtZSBzcGVjaWZpZWQsIGJ1aWxkaW5nIGEgdGFyZ2V0IHVzZXIgc2V0IgoKICAgICAgICAgICAgIyB1c2VycyB3ZSdyZSBnb2luZyB0byBiZSBzZWFyY2hpbmcgZm9yCiAgICAgICAgICAgICRUYXJnZXRVc2VycyA9IEAoKQoKICAgICAgICAgICAgIyBpZiB3ZSB3YW50IHRvIGh1bnQgZm9yIHRoZSBlZmZlY3RpdmUgZG9tYWluIHVzZXJzIHdobyBjYW4gYWNjZXNzIGEgdGFyZ2V0IHNlcnZlcgogICAgICAgICAgICBpZigkVGFyZ2V0U2VydmVyKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJRdWVyeWluZyB0YXJnZXQgc2VydmVyICckVGFyZ2V0U2VydmVyJyBmb3IgbG9jYWwgdXNlcnMiCiAgICAgICAgICAgICAgICAkVGFyZ2V0VXNlcnMgPSBHZXQtTmV0TG9jYWxHcm91cCAkVGFyZ2V0U2VydmVyIC1SZWN1cnNlIHwgV2hlcmUtT2JqZWN0IHsoLW5vdCAkXy5Jc0dyb3VwKSAtYW5kICRfLklzRG9tYWluIH0gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgKCRfLkFjY291bnROYW1lKS5zcGxpdCgiLyIpWzFdLnRvTG93ZXIoKQogICAgICAgICAgICAgICAgfSAgfCBXaGVyZS1PYmplY3QgeyRffQogICAgICAgICAgICB9CiAgICAgICAgICAgICMgaWYgd2UgZ2V0IGEgc3BlY2lmaWMgdXNlcm5hbWUsIG9ubHkgdXNlIHRoYXQKICAgICAgICAgICAgZWxzZWlmKCRVc2VyTmFtZSkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFVzaW5nIHRhcmdldCB1c2VyICckVXNlck5hbWUnLi4uIgogICAgICAgICAgICAgICAgJFRhcmdldFVzZXJzID0gQCggJFVzZXJOYW1lLlRvTG93ZXIoKSApCiAgICAgICAgICAgIH0KICAgICAgICAgICAgIyByZWFkIGluIGEgdGFyZ2V0IHVzZXIgbGlzdCBpZiB3ZSBoYXZlIG9uZQogICAgICAgICAgICBlbHNlaWYoJFVzZXJGaWxlKSB7CiAgICAgICAgICAgICAgICAkVGFyZ2V0VXNlcnMgPSBHZXQtQ29udGVudCAtUGF0aCAkVXNlckZpbGUgfCBXaGVyZS1PYmplY3QgeyRffQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZigkVXNlckFEU3BhdGggLW9yICRVc2VyRmlsdGVyKSB7CiAgICAgICAgICAgICAgICBGb3JFYWNoICgkRG9tYWluIGluICRUYXJnZXREb21haW5zKSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFF1ZXJ5aW5nIGRvbWFpbiAkRG9tYWluIGZvciB1c2VycyIKICAgICAgICAgICAgICAgICAgICAkVGFyZ2V0VXNlcnMgKz0gR2V0LU5ldFVzZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1BRFNwYXRoICRVc2VyQURTcGF0aCAtRmlsdGVyICRVc2VyRmlsdGVyIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAkXy5zYW1hY2NvdW50bmFtZQogICAgICAgICAgICAgICAgICAgIH0gIHwgV2hlcmUtT2JqZWN0IHskX30KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIEZvckVhY2ggKCREb21haW4gaW4gJFRhcmdldERvbWFpbnMpIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gUXVlcnlpbmcgZG9tYWluICREb21haW4gZm9yIHVzZXJzIG9mIGdyb3VwICckR3JvdXBOYW1lJyIKICAgICAgICAgICAgICAgICAgICAkVGFyZ2V0VXNlcnMgKz0gR2V0LU5ldEdyb3VwTWVtYmVyIC1Hcm91cE5hbWUgJEdyb3VwTmFtZSAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWx8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgJF8uTWVtYmVyTmFtZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCgtbm90ICRTaG93QWxsKSAtYW5kICgoISRUYXJnZXRVc2VycykgLW9yICgkVGFyZ2V0VXNlcnMuQ291bnQgLWVxIDApKSkgewogICAgICAgICAgICAgICAgdGhyb3cgIlshXSBObyB1c2VycyBmb3VuZCB0byBzZWFyY2ggZm9yISIKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgIyBzY3JpcHQgYmxvY2sgdGhhdCBlbnVtZXJhdGVzIGEgc2VydmVyCiAgICAgICAgJEhvc3RFbnVtQmxvY2sgPSB7CiAgICAgICAgICAgIHBhcmFtKCRDb21wdXRlck5hbWUsICRQaW5nLCAkUHJvY2Vzc05hbWUsICRUYXJnZXRVc2VycywgJENyZWRlbnRpYWwpCgogICAgICAgICAgICAjIG9wdGlvbmFsbHkgY2hlY2sgaWYgdGhlIHNlcnZlciBpcyB1cCBmaXJzdAogICAgICAgICAgICAkVXAgPSAkVHJ1ZQogICAgICAgICAgICBpZigkUGluZykgewogICAgICAgICAgICAgICAgJFVwID0gVGVzdC1Db25uZWN0aW9uIC1Db3VudCAxIC1RdWlldCAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUKICAgICAgICAgICAgfQogICAgICAgICAgICBpZigkVXApIHsKICAgICAgICAgICAgICAgICMgdHJ5IHRvIGVudW1lcmF0ZSBhbGwgYWN0aXZlIHByb2Nlc3NlcyBvbiB0aGUgcmVtb3RlIGhvc3QKICAgICAgICAgICAgICAgICMgYW5kIHNlYXJjaCBmb3IgYSBzcGVjaWZpYyBwcm9jZXNzIG5hbWUKICAgICAgICAgICAgICAgICRQcm9jZXNzZXMgPSBHZXQtTmV0UHJvY2VzcyAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKCiAgICAgICAgICAgICAgICBGb3JFYWNoICgkUHJvY2VzcyBpbiAkUHJvY2Vzc2VzKSB7CiAgICAgICAgICAgICAgICAgICAgIyBpZiB3ZSdyZSBodW50aW5nIGZvciBhIHByb2Nlc3MgbmFtZSBvciBjb21tYS1zZXBhcmF0ZWQgbmFtZXMKICAgICAgICAgICAgICAgICAgICBpZigkUHJvY2Vzc05hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFByb2Nlc3NOYW1lLnNwbGl0KCIsIikgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFByb2Nlc3MuUHJvY2Vzc05hbWUgLW1hdGNoICRfKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFByb2Nlc3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAjIGlmIHRoZSBzZXNzaW9uIHVzZXIgaXMgaW4gdGhlIHRhcmdldCBsaXN0LCBkaXNwbGF5IHNvbWUgb3V0cHV0CiAgICAgICAgICAgICAgICAgICAgZWxzZWlmICgkVGFyZ2V0VXNlcnMgLWNvbnRhaW5zICRQcm9jZXNzLlVzZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFByb2Nlc3MKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgfQoKICAgIHByb2Nlc3MgewoKICAgICAgICBpZigkVGhyZWFkcykgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJVc2luZyB0aHJlYWRpbmcgd2l0aCB0aHJlYWRzID0gJFRocmVhZHMiCgogICAgICAgICAgICAjIGlmIHdlJ3JlIHVzaW5nIHRocmVhZGluZywga2ljayBvZmYgdGhlIHNjcmlwdCBibG9jayB3aXRoIEludm9rZS1UaHJlYWRlZEZ1bmN0aW9uCiAgICAgICAgICAgICRTY3JpcHRQYXJhbXMgPSBAewogICAgICAgICAgICAgICAgJ1BpbmcnID0gJCgtbm90ICROb1BpbmcpCiAgICAgICAgICAgICAgICAnUHJvY2Vzc05hbWUnID0gJFByb2Nlc3NOYW1lCiAgICAgICAgICAgICAgICAnVGFyZ2V0VXNlcnMnID0gJFRhcmdldFVzZXJzCiAgICAgICAgICAgICAgICAnQ3JlZGVudGlhbCcgPSAkQ3JlZGVudGlhbAogICAgICAgICAgICB9CgogICAgICAgICAgICAjIGtpY2sgb2ZmIHRoZSB0aHJlYWRlZCBzY3JpcHQgYmxvY2sgKyBhcmd1bWVudHMgCiAgICAgICAgICAgIEludm9rZS1UaHJlYWRlZEZ1bmN0aW9uIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSAtU2NyaXB0QmxvY2sgJEhvc3RFbnVtQmxvY2sgLVNjcmlwdFBhcmFtZXRlcnMgJFNjcmlwdFBhcmFtcyAtVGhyZWFkcyAkVGhyZWFkcwogICAgICAgIH0KCiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGlmKC1ub3QgJE5vUGluZyAtYW5kICgkQ29tcHV0ZXJOYW1lLmNvdW50IC1uZSAxKSkgewogICAgICAgICAgICAgICAgIyBwaW5nIGFsbCBob3N0cyBpbiBwYXJhbGxlbAogICAgICAgICAgICAgICAgJFBpbmcgPSB7cGFyYW0oJENvbXB1dGVyTmFtZSkgaWYoVGVzdC1Db25uZWN0aW9uIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSAtQ291bnQgMSAtUXVpZXQgLUVycm9yQWN0aW9uIFN0b3ApeyRDb21wdXRlck5hbWV9fQogICAgICAgICAgICAgICAgJENvbXB1dGVyTmFtZSA9IEludm9rZS1UaHJlYWRlZEZ1bmN0aW9uIC1Ob0ltcG9ydHMgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1TY3JpcHRCbG9jayAkUGluZyAtVGhyZWFkcyAxMDAKICAgICAgICAgICAgfQoKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFRvdGFsIG51bWJlciBvZiBhY3RpdmUgaG9zdHM6ICQoJENvbXB1dGVyTmFtZS5jb3VudCkiCiAgICAgICAgICAgICRDb3VudGVyID0gMAoKICAgICAgICAgICAgRm9yRWFjaCAoJENvbXB1dGVyIGluICRDb21wdXRlck5hbWUpIHsKCiAgICAgICAgICAgICAgICAkQ291bnRlciA9ICRDb3VudGVyICsgMQoKICAgICAgICAgICAgICAgICMgc2xlZXAgZm9yIG91ciBzZW1pLXJhbmRvbWl6ZWQgaW50ZXJ2YWwKICAgICAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzICRSYW5kTm8uTmV4dCgoMS0kSml0dGVyKSokRGVsYXksICgxKyRKaXR0ZXIpKiREZWxheSkKCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gRW51bWVyYXRpbmcgc2VydmVyICRDb21wdXRlciAoJENvdW50ZXIgb2YgJCgkQ29tcHV0ZXJOYW1lLmNvdW50KSkiCiAgICAgICAgICAgICAgICAkUmVzdWx0ID0gSW52b2tlLUNvbW1hbmQgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1Bcmd1bWVudExpc3QgJENvbXB1dGVyLCAkRmFsc2UsICRQcm9jZXNzTmFtZSwgJFRhcmdldFVzZXJzLCAkQ3JlZGVudGlhbAogICAgICAgICAgICAgICAgJFJlc3VsdAoKICAgICAgICAgICAgICAgIGlmKCRSZXN1bHQgLWFuZCAkU3RvcE9uU3VjY2VzcykgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBUYXJnZXQgdXNlci9wcm9jZXNzIGZvdW5kLCByZXR1cm5pbmcgZWFybHkiCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBJbnZva2UtRXZlbnRIdW50ZXIgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFF1ZXJpZXMgYWxsIGRvbWFpbiBjb250cm9sbGVycyBvbiB0aGUgbmV0d29yayBmb3IgYWNjb3VudAogICAgICAgIGxvZ29uIGV2ZW50cyAoSUQgNDYyNCkgYW5kIFRHVCByZXF1ZXN0IGV2ZW50cyAoSUQgNDc2OCksCiAgICAgICAgc2VhcmNoaW5nIGZvciB0YXJnZXQgdXNlcnMuCgogICAgICAgIE5vdGU6IERvbWFpbiBBZG1pbiAob3IgZXF1aXYpIHJpZ2h0cyBhcmUgbmVlZGVkIHRvIHF1ZXJ5CiAgICAgICAgdGhpcyBpbmZvcm1hdGlvbiBmcm9tIHRoZSBEQ3MuCgogICAgICAgIEF1dGhvcjogQHNpeGR1YiwgQGhhcm1qMHkKICAgICAgICBMaWNlbnNlOiBCU0QgMy1DbGF1c2UKCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBIb3N0IGFycmF5IHRvIGVudW1lcmF0ZSwgcGFzc2FibGUgb24gdGhlIHBpcGVsaW5lLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJGaWxlCgogICAgICAgIEZpbGUgb2YgaG9zdG5hbWVzL0lQcyB0byBzZWFyY2guCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckZpbHRlcgoKICAgICAgICBIb3N0IGZpbHRlciBuYW1lIHRvIHF1ZXJ5IEFEIGZvciwgd2lsZGNhcmRzIGFjY2VwdGVkLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCBmb3IgaG9zdHMsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBHcm91cE5hbWUKCiAgICAgICAgR3JvdXAgbmFtZSB0byBxdWVyeSBmb3IgdGFyZ2V0IHVzZXJzLgoKICAgIC5QQVJBTUVURVIgVGFyZ2V0U2VydmVyCgogICAgICAgIEh1bnQgZm9yIHVzZXJzIHdobyBhcmUgZWZmZWN0aXZlIGxvY2FsIGFkbWlucyBvbiBhIHRhcmdldCBzZXJ2ZXIuCgogICAgLlBBUkFNRVRFUiBVc2VyTmFtZQoKICAgICAgICBTcGVjaWZpYyB1c2VybmFtZSB0byBzZWFyY2ggZm9yLgoKICAgIC5QQVJBTUVURVIgVXNlckZpbHRlcgoKICAgICAgICBBIGN1c3RvbWl6ZWQgbGRhcCBmaWx0ZXIgc3RyaW5nIHRvIHVzZSBmb3IgdXNlciBlbnVtZXJhdGlvbiwgZS5nLiAiKGRlc2NyaXB0aW9uPSphZG1pbiopIgoKICAgIC5QQVJBTUVURVIgVXNlckFEU3BhdGgKCiAgICAgICAgVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoIGZvciB1c2VycywgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCiAgICAuUEFSQU1FVEVSIFVzZXJGaWxlCgogICAgICAgIEZpbGUgb2YgdXNlcm5hbWVzIHRvIHNlYXJjaCBmb3IuCgogICAgLlBBUkFNRVRFUiBOb1BpbmcKCiAgICAgICAgRG9uJ3QgcGluZyBlYWNoIGhvc3QgdG8gZW5zdXJlIGl0J3MgdXAgYmVmb3JlIGVudW1lcmF0aW5nLgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIERvbWFpbiBmb3IgcXVlcnkgZm9yIG1hY2hpbmVzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBTZWFyY2hEYXlzCgogICAgICAgIE51bWJlciBvZiBkYXlzIGJhY2sgdG8gc2VhcmNoIGxvZ3MgZm9yLiBEZWZhdWx0IDMuCgogICAgLlBBUkFNRVRFUiBTZWFyY2hGb3Jlc3QKCiAgICAgICAgU3dpdGNoLiBTZWFyY2ggYWxsIGRvbWFpbnMgaW4gdGhlIGZvcmVzdCBmb3IgdGFyZ2V0IHVzZXJzIGluc3RlYWQgb2YganVzdAogICAgICAgIGEgc2luZ2xlIGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIFRocmVhZHMKCiAgICAgICAgVGhlIG1heGltdW0gY29uY3VycmVudCB0aHJlYWRzIHRvIGV4ZWN1dGUuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1FdmVudEh1bnRlcgoKICAgIC5MSU5LCgogICAgICAgIGh0dHA6Ly9ibG9nLmhhcm1qMHkubmV0CiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MCxWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0cycpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lLAoKICAgICAgICBbVmFsaWRhdGVTY3JpcHQoe1Rlc3QtUGF0aCAtUGF0aCAkXyB9KV0KICAgICAgICBbQWxpYXMoJ0hvc3RMaXN0JyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJGaWxlLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckZpbHRlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJBRFNwYXRoLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcm91cE5hbWUgPSAnRG9tYWluIEFkbWlucycsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRhcmdldFNlcnZlciwKCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRVc2VyTmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlckZpbHRlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlckFEU3BhdGgsCgogICAgICAgIFtWYWxpZGF0ZVNjcmlwdCh7VGVzdC1QYXRoIC1QYXRoICRfIH0pXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJGaWxlLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtJbnQzMl0KICAgICAgICAkU2VhcmNoRGF5cyA9IDMsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFNlYXJjaEZvcmVzdCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRUaHJlYWRzLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgIGJlZ2luIHsKCiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRGVidWcnXSkgewogICAgICAgICAgICAkRGVidWdQcmVmZXJlbmNlID0gJ0NvbnRpbnVlJwogICAgICAgIH0KCiAgICAgICAgIyByYW5kb20gb2JqZWN0IGZvciBkZWxheQogICAgICAgICRSYW5kTm8gPSBOZXctT2JqZWN0IFN5c3RlbS5SYW5kb20KCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFJ1bm5pbmcgSW52b2tlLUV2ZW50SHVudGVyIgoKICAgICAgICBpZigkRG9tYWluKSB7CiAgICAgICAgICAgICRUYXJnZXREb21haW5zID0gQCgkRG9tYWluKQogICAgICAgIH0KICAgICAgICBlbHNlaWYoJFNlYXJjaEZvcmVzdCkgewogICAgICAgICAgICAjIGdldCBBTEwgdGhlIGRvbWFpbnMgaW4gdGhlIGZvcmVzdCB0byBzZWFyY2gKICAgICAgICAgICAgJFRhcmdldERvbWFpbnMgPSBHZXQtTmV0Rm9yZXN0RG9tYWluIHwgRm9yRWFjaC1PYmplY3QgeyAkXy5OYW1lIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICMgdXNlIHRoZSBsb2NhbCBkb21haW4KICAgICAgICAgICAgJFRhcmdldERvbWFpbnMgPSBAKCAoR2V0LU5ldERvbWFpbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCkubmFtZSApCiAgICAgICAgfQoKICAgICAgICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgICAgICMKICAgICAgICAjIEZpcnN0IHdlIGJ1aWxkIHRoZSBob3N0IHRhcmdldCBzZXQKICAgICAgICAjCiAgICAgICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCiAgICAgICAgaWYoISRDb21wdXRlck5hbWUpIHsgCiAgICAgICAgICAgICMgaWYgd2UncmUgdXNpbmcgYSBob3N0IGxpc3QsIHJlYWQgdGhlIHRhcmdldHMgaW4gYW5kIGFkZCB0aGVtIHRvIHRoZSB0YXJnZXQgbGlzdAogICAgICAgICAgICBpZigkQ29tcHV0ZXJGaWxlKSB7CiAgICAgICAgICAgICAgICAkQ29tcHV0ZXJOYW1lID0gR2V0LUNvbnRlbnQgLVBhdGggJENvbXB1dGVyRmlsZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZigkQ29tcHV0ZXJGaWx0ZXIgLW9yICRDb21wdXRlckFEU3BhdGgpIHsKICAgICAgICAgICAgICAgIFthcnJheV0kQ29tcHV0ZXJOYW1lID0gQCgpCiAgICAgICAgICAgICAgICBGb3JFYWNoICgkRG9tYWluIGluICRUYXJnZXREb21haW5zKSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFF1ZXJ5aW5nIGRvbWFpbiAkRG9tYWluIGZvciBob3N0cyIKICAgICAgICAgICAgICAgICAgICAkQ29tcHV0ZXJOYW1lICs9IEdldC1OZXRDb21wdXRlciAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUZpbHRlciAkQ29tcHV0ZXJGaWx0ZXIgLUFEU3BhdGggJENvbXB1dGVyQURTcGF0aAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgIyBpZiBhIGNvbXB1dGVyIHNwZWNpZmllciBpc24ndCBnaXZlbiwgdHJ5IHRvIGVudW1lcmF0ZSBhbGwgZG9tYWluIGNvbnRyb2xsZXJzCiAgICAgICAgICAgICAgICBbYXJyYXldJENvbXB1dGVyTmFtZSA9IEAoKQogICAgICAgICAgICAgICAgRm9yRWFjaCAoJERvbWFpbiBpbiAkVGFyZ2V0RG9tYWlucykgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBRdWVyeWluZyBkb21haW4gJERvbWFpbiBmb3IgZG9tYWluIGNvbnRyb2xsZXJzIgogICAgICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgKz0gR2V0LU5ldERvbWFpbkNvbnRyb2xsZXIgLUxEQVAgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIHwgRm9yRWFjaC1PYmplY3QgeyAkXy5kbnNob3N0bmFtZX0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyByZW1vdmUgYW55IG51bGwgdGFyZ2V0IGhvc3RzLCB1bmlxdWlmeSB0aGUgbGlzdCBhbmQgc2h1ZmZsZSBpdAogICAgICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJENvbXB1dGVyTmFtZSB8IFdoZXJlLU9iamVjdCB7ICRfIH0gfCBTb3J0LU9iamVjdCAtVW5pcXVlIHwgU29ydC1PYmplY3QgeyBHZXQtUmFuZG9tIH0KICAgICAgICAgICAgaWYoJCgkQ29tcHV0ZXJOYW1lLkNvdW50KSAtZXEgMCkgewogICAgICAgICAgICAgICAgdGhyb3cgIk5vIGhvc3RzIGZvdW5kISIKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgICAgICAjCiAgICAgICAgIyBOb3cgd2UgYnVpbGQgdGhlIHVzZXIgdGFyZ2V0IHNldAogICAgICAgICMKICAgICAgICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKICAgICAgICAjIHVzZXJzIHdlJ3JlIGdvaW5nIHRvIGJlIHNlYXJjaGluZyBmb3IKICAgICAgICAkVGFyZ2V0VXNlcnMgPSBAKCkKCiAgICAgICAgIyBpZiB3ZSB3YW50IHRvIGh1bnQgZm9yIHRoZSBlZmZlY3RpdmUgZG9tYWluIHVzZXJzIHdobyBjYW4gYWNjZXNzIGEgdGFyZ2V0IHNlcnZlcgogICAgICAgIGlmKCRUYXJnZXRTZXJ2ZXIpIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiUXVlcnlpbmcgdGFyZ2V0IHNlcnZlciAnJFRhcmdldFNlcnZlcicgZm9yIGxvY2FsIHVzZXJzIgogICAgICAgICAgICAkVGFyZ2V0VXNlcnMgPSBHZXQtTmV0TG9jYWxHcm91cCAkVGFyZ2V0U2VydmVyIC1SZWN1cnNlIHwgV2hlcmUtT2JqZWN0IHsoLW5vdCAkXy5Jc0dyb3VwKSAtYW5kICRfLklzRG9tYWluIH0gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAoJF8uQWNjb3VudE5hbWUpLnNwbGl0KCIvIilbMV0udG9Mb3dlcigpCiAgICAgICAgICAgIH0gIHwgV2hlcmUtT2JqZWN0IHskX30KICAgICAgICB9CiAgICAgICAgIyBpZiB3ZSBnZXQgYSBzcGVjaWZpYyB1c2VybmFtZSwgb25seSB1c2UgdGhhdAogICAgICAgIGVsc2VpZigkVXNlck5hbWUpIHsKICAgICAgICAgICAgIyBXcml0ZS1WZXJib3NlICJbKl0gVXNpbmcgdGFyZ2V0IHVzZXIgJyRVc2VyTmFtZScuLi4iCiAgICAgICAgICAgICRUYXJnZXRVc2VycyA9ICRVc2VyTmFtZSB8IEZvckVhY2gtT2JqZWN0IHskXy5Ub0xvd2VyKCl9CiAgICAgICAgICAgIGlmKCRUYXJnZXRVc2VycyAtaXNub3QgW1N5c3RlbS5BcnJheV0pIHsKICAgICAgICAgICAgICAgICRUYXJnZXRVc2VycyA9IEAoJFRhcmdldFVzZXJzKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICMgcmVhZCBpbiBhIHRhcmdldCB1c2VyIGxpc3QgaWYgd2UgaGF2ZSBvbmUKICAgICAgICBlbHNlaWYoJFVzZXJGaWxlKSB7CiAgICAgICAgICAgICRUYXJnZXRVc2VycyA9IEdldC1Db250ZW50IC1QYXRoICRVc2VyRmlsZSB8IFdoZXJlLU9iamVjdCB7JF99CiAgICAgICAgfQogICAgICAgIGVsc2VpZigkVXNlckFEU3BhdGggLW9yICRVc2VyRmlsdGVyKSB7CiAgICAgICAgICAgIEZvckVhY2ggKCREb21haW4gaW4gJFRhcmdldERvbWFpbnMpIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBRdWVyeWluZyBkb21haW4gJERvbWFpbiBmb3IgdXNlcnMiCiAgICAgICAgICAgICAgICAkVGFyZ2V0VXNlcnMgKz0gR2V0LU5ldFVzZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1BRFNwYXRoICRVc2VyQURTcGF0aCAtRmlsdGVyICRVc2VyRmlsdGVyIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRfLnNhbWFjY291bnRuYW1lCiAgICAgICAgICAgICAgICB9ICB8IFdoZXJlLU9iamVjdCB7JF99CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIEZvckVhY2ggKCREb21haW4gaW4gJFRhcmdldERvbWFpbnMpIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBRdWVyeWluZyBkb21haW4gJERvbWFpbiBmb3IgdXNlcnMgb2YgZ3JvdXAgJyRHcm91cE5hbWUnIgogICAgICAgICAgICAgICAgJFRhcmdldFVzZXJzICs9IEdldC1OZXRHcm91cE1lbWJlciAtR3JvdXBOYW1lICRHcm91cE5hbWUgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRfLk1lbWJlck5hbWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCgoISRUYXJnZXRVc2VycykgLW9yICgkVGFyZ2V0VXNlcnMuQ291bnQgLWVxIDApKSkgewogICAgICAgICAgICB0aHJvdyAiWyFdIE5vIHVzZXJzIGZvdW5kIHRvIHNlYXJjaCBmb3IhIgogICAgICAgIH0KCiAgICAgICAgIyBzY3JpcHQgYmxvY2sgdGhhdCBlbnVtZXJhdGVzIGEgc2VydmVyCiAgICAgICAgJEhvc3RFbnVtQmxvY2sgPSB7CiAgICAgICAgICAgIHBhcmFtKCRDb21wdXRlck5hbWUsICRQaW5nLCAkVGFyZ2V0VXNlcnMsICRTZWFyY2hEYXlzLCAkQ3JlZGVudGlhbCkKCiAgICAgICAgICAgICMgb3B0aW9uYWxseSBjaGVjayBpZiB0aGUgc2VydmVyIGlzIHVwIGZpcnN0CiAgICAgICAgICAgICRVcCA9ICRUcnVlCiAgICAgICAgICAgIGlmKCRQaW5nKSB7CiAgICAgICAgICAgICAgICAkVXAgPSBUZXN0LUNvbm5lY3Rpb24gLUNvdW50IDEgLVF1aWV0IC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCRVcCkgewogICAgICAgICAgICAgICAgIyB0cnkgdG8gZW51bWVyYXRlCiAgICAgICAgICAgICAgICBpZigkQ3JlZGVudGlhbCkgewogICAgICAgICAgICAgICAgICAgIEdldC1Vc2VyRXZlbnQgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1FdmVudFR5cGUgJ2FsbCcgLURhdGVTdGFydCAoW0RhdGVUaW1lXTo6VG9kYXkuQWRkRGF5cygtJFNlYXJjaERheXMpKSB8IFdoZXJlLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgZmlsdGVyIGZvciB0aGUgdGFyZ2V0IHVzZXIgc2V0CiAgICAgICAgICAgICAgICAgICAgICAgICRUYXJnZXRVc2VycyAtY29udGFpbnMgJF8uVXNlck5hbWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBHZXQtVXNlckV2ZW50IC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSAtRXZlbnRUeXBlICdhbGwnIC1EYXRlU3RhcnQgKFtEYXRlVGltZV06OlRvZGF5LkFkZERheXMoLSRTZWFyY2hEYXlzKSkgfCBXaGVyZS1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAjIGZpbHRlciBmb3IgdGhlIHRhcmdldCB1c2VyIHNldAogICAgICAgICAgICAgICAgICAgICAgICAkVGFyZ2V0VXNlcnMgLWNvbnRhaW5zICRfLlVzZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgIH0KCiAgICBwcm9jZXNzIHsKCiAgICAgICAgaWYoJFRocmVhZHMpIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiVXNpbmcgdGhyZWFkaW5nIHdpdGggdGhyZWFkcyA9ICRUaHJlYWRzIgoKICAgICAgICAgICAgIyBpZiB3ZSdyZSB1c2luZyB0aHJlYWRpbmcsIGtpY2sgb2ZmIHRoZSBzY3JpcHQgYmxvY2sgd2l0aCBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbgogICAgICAgICAgICAkU2NyaXB0UGFyYW1zID0gQHsKICAgICAgICAgICAgICAgICdQaW5nJyA9ICQoLW5vdCAkTm9QaW5nKQogICAgICAgICAgICAgICAgJ1RhcmdldFVzZXJzJyA9ICRUYXJnZXRVc2VycwogICAgICAgICAgICAgICAgJ1NlYXJjaERheXMnID0gJFNlYXJjaERheXMKICAgICAgICAgICAgICAgICdDcmVkZW50aWFsJyA9ICRDcmVkZW50aWFsCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMga2ljayBvZmYgdGhlIHRocmVhZGVkIHNjcmlwdCBibG9jayArIGFyZ3VtZW50cyAKICAgICAgICAgICAgSW52b2tlLVRocmVhZGVkRnVuY3Rpb24gLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1TY3JpcHRCbG9jayAkSG9zdEVudW1CbG9jayAtU2NyaXB0UGFyYW1ldGVycyAkU2NyaXB0UGFyYW1zIC1UaHJlYWRzICRUaHJlYWRzCiAgICAgICAgfQoKICAgICAgICBlbHNlIHsKICAgICAgICAgICAgaWYoLW5vdCAkTm9QaW5nIC1hbmQgKCRDb21wdXRlck5hbWUuY291bnQgLW5lIDEpKSB7CiAgICAgICAgICAgICAgICAjIHBpbmcgYWxsIGhvc3RzIGluIHBhcmFsbGVsCiAgICAgICAgICAgICAgICAkUGluZyA9IHtwYXJhbSgkQ29tcHV0ZXJOYW1lKSBpZihUZXN0LUNvbm5lY3Rpb24gLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1Db3VudCAxIC1RdWlldCAtRXJyb3JBY3Rpb24gU3RvcCl7JENvbXB1dGVyTmFtZX19CiAgICAgICAgICAgICAgICAkQ29tcHV0ZXJOYW1lID0gSW52b2tlLVRocmVhZGVkRnVuY3Rpb24gLU5vSW1wb3J0cyAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLVNjcmlwdEJsb2NrICRQaW5nIC1UaHJlYWRzIDEwMAogICAgICAgICAgICB9CgogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gVG90YWwgbnVtYmVyIG9mIGFjdGl2ZSBob3N0czogJCgkQ29tcHV0ZXJOYW1lLmNvdW50KSIKICAgICAgICAgICAgJENvdW50ZXIgPSAwCgogICAgICAgICAgICBGb3JFYWNoICgkQ29tcHV0ZXIgaW4gJENvbXB1dGVyTmFtZSkgewoKICAgICAgICAgICAgICAgICRDb3VudGVyID0gJENvdW50ZXIgKyAxCgogICAgICAgICAgICAgICAgIyBzbGVlcCBmb3Igb3VyIHNlbWktcmFuZG9taXplZCBpbnRlcnZhbAogICAgICAgICAgICAgICAgU3RhcnQtU2xlZXAgLVNlY29uZHMgJFJhbmROby5OZXh0KCgxLSRKaXR0ZXIpKiREZWxheSwgKDErJEppdHRlcikqJERlbGF5KQoKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBFbnVtZXJhdGluZyBzZXJ2ZXIgJENvbXB1dGVyICgkQ291bnRlciBvZiAkKCRDb21wdXRlck5hbWUuY291bnQpKSIKICAgICAgICAgICAgICAgIEludm9rZS1Db21tYW5kIC1TY3JpcHRCbG9jayAkSG9zdEVudW1CbG9jayAtQXJndW1lbnRMaXN0ICRDb21wdXRlciwgJCgtbm90ICROb1BpbmcpLCAkVGFyZ2V0VXNlcnMsICRTZWFyY2hEYXlzLCAkQ3JlZGVudGlhbAogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgIH0KfQoKCmZ1bmN0aW9uIEludm9rZS1TaGFyZUZpbmRlciB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgVGhpcyBmdW5jdGlvbiBmaW5kcyB0aGUgbG9jYWwgZG9tYWluIG5hbWUgZm9yIGEgaG9zdCB1c2luZyBHZXQtTmV0RG9tYWluLAogICAgICAgIHF1ZXJpZXMgdGhlIGRvbWFpbiBmb3IgYWxsIGFjdGl2ZSBtYWNoaW5lcyB3aXRoIEdldC1OZXRDb21wdXRlciwgdGhlbiBmb3IKICAgICAgICBlYWNoIHNlcnZlciBpdCBsaXN0cyBvZiBhY3RpdmUgc2hhcmVzIHdpdGggR2V0LU5ldFNoYXJlLiBOb24tc3RhbmRhcmQgc2hhcmVzCiAgICAgICAgY2FuIGJlIGZpbHRlcmVkIG91dCB3aXRoIC1FeGNsdWRlKiBmbGFncy4KCiAgICAgICAgQXV0aG9yOiBAaGFybWoweQogICAgICAgIExpY2Vuc2U6IEJTRCAzLUNsYXVzZQoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIEhvc3QgYXJyYXkgdG8gZW51bWVyYXRlLCBwYXNzYWJsZSBvbiB0aGUgcGlwZWxpbmUuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckZpbGUKCiAgICAgICAgRmlsZSBvZiBob3N0bmFtZXMvSVBzIHRvIHNlYXJjaC4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyRmlsdGVyCgogICAgICAgIEhvc3QgZmlsdGVyIG5hbWUgdG8gcXVlcnkgQUQgZm9yLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckFEU3BhdGgKCiAgICAgICAgVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoIGZvciBob3N0cywgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCiAgICAuUEFSQU1FVEVSIEV4Y2x1ZGVTdGFuZGFyZAoKICAgICAgICBTd2l0Y2guIEV4Y2x1ZGUgc3RhbmRhcmQgc2hhcmVzIGZyb20gZGlzcGxheSAoQyQsIElQQyQsIHByaW50JCBldGMuKQoKICAgIC5QQVJBTUVURVIgRXhjbHVkZVByaW50CgogICAgICAgIFN3aXRjaC4gRXhjbHVkZSB0aGUgcHJpbnQkIHNoYXJlLgoKICAgIC5QQVJBTUVURVIgRXhjbHVkZUlQQwoKICAgICAgICBTd2l0Y2guIEV4Y2x1ZGUgdGhlIElQQyQgc2hhcmUuCgogICAgLlBBUkFNRVRFUiBDaGVja1NoYXJlQWNjZXNzCgogICAgICAgIFN3aXRjaC4gT25seSBkaXNwbGF5IGZvdW5kIHNoYXJlcyB0aGF0IHRoZSBsb2NhbCB1c2VyIGhhcyBhY2Nlc3MgdG8uCgogICAgLlBBUkFNRVRFUiBDaGVja0FkbWluCgogICAgICAgIFN3aXRjaC4gT25seSBkaXNwbGF5IEFETUlOJCBzaGFyZXMgdGhlIGxvY2FsIHVzZXIgaGFzIGFjY2VzcyB0by4KCiAgICAuUEFSQU1FVEVSIE5vUGluZwoKICAgICAgICBTd2l0Y2guIERvbid0IHBpbmcgZWFjaCBob3N0IHRvIGVuc3VyZSBpdCdzIHVwIGJlZm9yZSBlbnVtZXJhdGluZy4KCiAgICAuUEFSQU1FVEVSIERlbGF5CgogICAgICAgIERlbGF5IGJldHdlZW4gZW51bWVyYXRpbmcgaG9zdHMsIGRlZmF1bHRzIHRvIDAuCgogICAgLlBBUkFNRVRFUiBKaXR0ZXIKCiAgICAgICAgSml0dGVyIGZvciB0aGUgaG9zdCBkZWxheSwgZGVmYXVsdHMgdG8gKy8tIDAuMy4KCiAgICAuUEFSQU1FVEVSIERvbWFpbgoKICAgICAgICBEb21haW4gdG8gcXVlcnkgZm9yIG1hY2hpbmVzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBTZWFyY2hGb3Jlc3QKCiAgICAgICAgU3dpdGNoLiBTZWFyY2ggYWxsIGRvbWFpbnMgaW4gdGhlIGZvcmVzdCBmb3IgdGFyZ2V0IHVzZXJzIGluc3RlYWQgb2YganVzdAogICAgICAgIGEgc2luZ2xlIGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIFRocmVhZHMKCiAgICAgICAgVGhlIG1heGltdW0gY29uY3VycmVudCB0aHJlYWRzIHRvIGV4ZWN1dGUuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBJbnZva2UtU2hhcmVGaW5kZXIgLUV4Y2x1ZGVTdGFuZGFyZAoKICAgICAgICBGaW5kIG5vbi1zdGFuZGFyZCBzaGFyZXMgb24gdGhlIGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1TaGFyZUZpbmRlciAtVGhyZWFkcyAyMAoKICAgICAgICBNdWx0aS10aHJlYWRlZCBzaGFyZSBmaW5kaW5nLCByZXBsYWNlcyBJbnZva2UtU2hhcmVGaW5kZXJUaHJlYWRlZC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1TaGFyZUZpbmRlciAtRGVsYXkgNjAKCiAgICAgICAgRmluZCBzaGFyZXMgb24gdGhlIGRvbWFpbiB3aXRoIGEgNjAgc2Vjb25kICgrLy0gKi4zKQogICAgICAgIHJhbmRvbWl6ZWQgZGVsYXkgYmV0d2VlbiB0b3VjaGluZyBlYWNoIGhvc3QuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBJbnZva2UtU2hhcmVGaW5kZXIgLUNvbXB1dGVyRmlsZSBob3N0cy50eHQKCiAgICAgICAgRmluZCBzaGFyZXMgZm9yIG1hY2hpbmVzIGluIHRoZSBzcGVjaWZpZWQgaG9zdHMgZmlsZS4KCiAgICAuTElOSwogICAgaHR0cDovL2Jsb2cuaGFybWoweS5uZXQKIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3RzJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUsCgogICAgICAgIFtWYWxpZGF0ZVNjcmlwdCh7VGVzdC1QYXRoIC1QYXRoICRfIH0pXQogICAgICAgIFtBbGlhcygnSG9zdExpc3QnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckZpbGUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyRmlsdGVyLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckFEU3BhdGgsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEV4Y2x1ZGVTdGFuZGFyZCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRXhjbHVkZVByaW50LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRFeGNsdWRlSVBDLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICROb1BpbmcsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJENoZWNrU2hhcmVBY2Nlc3MsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJENoZWNrQWRtaW4sCgogICAgICAgIFtVSW50MzJdCiAgICAgICAgJERlbGF5ID0gMCwKCiAgICAgICAgW0RvdWJsZV0KICAgICAgICAkSml0dGVyID0gLjMsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKIAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFNlYXJjaEZvcmVzdCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRUaHJlYWRzCiAgICApCgogICAgYmVnaW4gewogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RlYnVnJ10pIHsKICAgICAgICAgICAgJERlYnVnUHJlZmVyZW5jZSA9ICdDb250aW51ZScKICAgICAgICB9CgogICAgICAgICMgcmFuZG9tIG9iamVjdCBmb3IgZGVsYXkKICAgICAgICAkUmFuZE5vID0gTmV3LU9iamVjdCBTeXN0ZW0uUmFuZG9tCgogICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBSdW5uaW5nIEludm9rZS1TaGFyZUZpbmRlciB3aXRoIGRlbGF5IG9mICREZWxheSIKCiAgICAgICAgIyBmaWd1cmUgb3V0IHRoZSBzaGFyZXMgd2Ugd2FudCB0byBpZ25vcmUKICAgICAgICBbU3RyaW5nW11dICRFeGNsdWRlZFNoYXJlcyA9IEAoJycpCgogICAgICAgIGlmICgkRXhjbHVkZVByaW50KSB7CiAgICAgICAgICAgICRFeGNsdWRlZFNoYXJlcyA9ICRFeGNsdWRlZFNoYXJlcyArICJQUklOVCQiCiAgICAgICAgfQogICAgICAgIGlmICgkRXhjbHVkZUlQQykgewogICAgICAgICAgICAkRXhjbHVkZWRTaGFyZXMgPSAkRXhjbHVkZWRTaGFyZXMgKyAiSVBDJCIKICAgICAgICB9CiAgICAgICAgaWYgKCRFeGNsdWRlU3RhbmRhcmQpIHsKICAgICAgICAgICAgJEV4Y2x1ZGVkU2hhcmVzID0gQCgnJywgIkFETUlOJCIsICJJUEMkIiwgIkMkIiwgIlBSSU5UJCIpCiAgICAgICAgfQoKICAgICAgICAjIGlmIHdlJ3JlIHVzaW5nIGEgaG9zdCBmaWxlIGxpc3QsIHJlYWQgdGhlIHRhcmdldHMgaW4gYW5kIGFkZCB0aGVtIHRvIHRoZSB0YXJnZXQgbGlzdAogICAgICAgIGlmKCRDb21wdXRlckZpbGUpIHsKICAgICAgICAgICAgJENvbXB1dGVyTmFtZSA9IEdldC1Db250ZW50IC1QYXRoICRDb21wdXRlckZpbGUKICAgICAgICB9CgogICAgICAgIGlmKCEkQ29tcHV0ZXJOYW1lKSB7IAogICAgICAgICAgICBbYXJyYXldJENvbXB1dGVyTmFtZSA9IEAoKQoKICAgICAgICAgICAgaWYoJERvbWFpbikgewogICAgICAgICAgICAgICAgJFRhcmdldERvbWFpbnMgPSBAKCREb21haW4pCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZWlmKCRTZWFyY2hGb3Jlc3QpIHsKICAgICAgICAgICAgICAgICMgZ2V0IEFMTCB0aGUgZG9tYWlucyBpbiB0aGUgZm9yZXN0IHRvIHNlYXJjaAogICAgICAgICAgICAgICAgJFRhcmdldERvbWFpbnMgPSBHZXQtTmV0Rm9yZXN0RG9tYWluIHwgRm9yRWFjaC1PYmplY3QgeyAkXy5OYW1lIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICMgdXNlIHRoZSBsb2NhbCBkb21haW4KICAgICAgICAgICAgICAgICRUYXJnZXREb21haW5zID0gQCggKEdldC1OZXREb21haW4pLm5hbWUgKQogICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgRm9yRWFjaCAoJERvbWFpbiBpbiAkVGFyZ2V0RG9tYWlucykgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFF1ZXJ5aW5nIGRvbWFpbiAkRG9tYWluIGZvciBob3N0cyIKICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgKz0gR2V0LU5ldENvbXB1dGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtRmlsdGVyICRDb21wdXRlckZpbHRlciAtQURTcGF0aCAkQ29tcHV0ZXJBRFNwYXRoCiAgICAgICAgICAgIH0KICAgICAgICAKICAgICAgICAgICAgIyByZW1vdmUgYW55IG51bGwgdGFyZ2V0IGhvc3RzLCB1bmlxdWlmeSB0aGUgbGlzdCBhbmQgc2h1ZmZsZSBpdAogICAgICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJENvbXB1dGVyTmFtZSB8IFdoZXJlLU9iamVjdCB7ICRfIH0gfCBTb3J0LU9iamVjdCAtVW5pcXVlIHwgU29ydC1PYmplY3QgeyBHZXQtUmFuZG9tIH0KICAgICAgICAgICAgaWYoJCgkQ29tcHV0ZXJOYW1lLmNvdW50KSAtZXEgMCkgewogICAgICAgICAgICAgICAgdGhyb3cgIk5vIGhvc3RzIGZvdW5kISIKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgIyBzY3JpcHQgYmxvY2sgdGhhdCBlbnVtZXJhdGVzIGEgc2VydmVyCiAgICAgICAgJEhvc3RFbnVtQmxvY2sgPSB7CiAgICAgICAgICAgIHBhcmFtKCRDb21wdXRlck5hbWUsICRQaW5nLCAkQ2hlY2tTaGFyZUFjY2VzcywgJEV4Y2x1ZGVkU2hhcmVzLCAkQ2hlY2tBZG1pbikKCiAgICAgICAgICAgICMgb3B0aW9uYWxseSBjaGVjayBpZiB0aGUgc2VydmVyIGlzIHVwIGZpcnN0CiAgICAgICAgICAgICRVcCA9ICRUcnVlCiAgICAgICAgICAgIGlmKCRQaW5nKSB7CiAgICAgICAgICAgICAgICAkVXAgPSBUZXN0LUNvbm5lY3Rpb24gLUNvdW50IDEgLVF1aWV0IC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCRVcCkgewogICAgICAgICAgICAgICAgIyBnZXQgdGhlIHNoYXJlcyBmb3IgdGhpcyBob3N0IGFuZCBjaGVjayB3aGF0IHdlIGZpbmQKICAgICAgICAgICAgICAgICRTaGFyZXMgPSBHZXQtTmV0U2hhcmUgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgICAgICBGb3JFYWNoICgkU2hhcmUgaW4gJFNoYXJlcykgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBTZXJ2ZXIgc2hhcmU6ICRTaGFyZSIKICAgICAgICAgICAgICAgICAgICAkTmV0TmFtZSA9ICRTaGFyZS5zaGkxX25ldG5hbWUKICAgICAgICAgICAgICAgICAgICAkUmVtYXJrID0gJFNoYXJlLnNoaTFfcmVtYXJrCiAgICAgICAgICAgICAgICAgICAgJFBhdGggPSAnXFwnKyRDb21wdXRlck5hbWUrJ1wnKyROZXROYW1lCgogICAgICAgICAgICAgICAgICAgICMgbWFrZSBzdXJlIHdlIGdldCBhIHJlYWwgc2hhcmUgbmFtZSBiYWNrCiAgICAgICAgICAgICAgICAgICAgaWYgKCgkTmV0TmFtZSkgLWFuZCAoJE5ldE5hbWUudHJpbSgpIC1uZSAnJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBpZiB3ZSdyZSBqdXN0IGNoZWNraW5nIGZvciBhY2Nlc3MgdG8gQURNSU4kCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRDaGVja0FkbWluKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkTmV0TmFtZS5Ub1VwcGVyKCkgLWVxICJBRE1JTiQiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE51bGwgPSBbSU8uRGlyZWN0b3J5XTo6R2V0RmlsZXMoJFBhdGgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXCRDb21wdXRlck5hbWVcJE5ldE5hbWUgYHQtICRSZW1hcmsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3IgYWNjZXNzaW5nIHBhdGggJFBhdGggOiAkXyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIyBza2lwIHRoaXMgc2hhcmUgaWYgaXQncyBpbiB0aGUgZXhjbHVkZSBsaXN0CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VpZiAoJEV4Y2x1ZGVkU2hhcmVzIC1Ob3RDb250YWlucyAkTmV0TmFtZS5Ub1VwcGVyKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgc2VlIGlmIHdlIHdhbnQgdG8gY2hlY2sgYWNjZXNzIHRvIHRoaXMgc2hhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRDaGVja1NoYXJlQWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBjaGVjayBpZiB0aGUgdXNlciBoYXMgYWNjZXNzIHRvIHRoaXMgcGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICROdWxsID0gW0lPLkRpcmVjdG9yeV06OkdldEZpbGVzKCRQYXRoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFwkQ29tcHV0ZXJOYW1lXCROZXROYW1lIGB0LSAkUmVtYXJrIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkVycm9yIGFjY2Vzc2luZyBwYXRoICRQYXRoIDogJF8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcJENvbXB1dGVyTmFtZVwkTmV0TmFtZSBgdC0gJFJlbWFyayIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICB9CgogICAgcHJvY2VzcyB7CgogICAgICAgIGlmKCRUaHJlYWRzKSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlVzaW5nIHRocmVhZGluZyB3aXRoIHRocmVhZHMgPSAkVGhyZWFkcyIKCiAgICAgICAgICAgICMgaWYgd2UncmUgdXNpbmcgdGhyZWFkaW5nLCBraWNrIG9mZiB0aGUgc2NyaXB0IGJsb2NrIHdpdGggSW52b2tlLVRocmVhZGVkRnVuY3Rpb24KICAgICAgICAgICAgJFNjcmlwdFBhcmFtcyA9IEB7CiAgICAgICAgICAgICAgICAnUGluZycgPSAkKC1ub3QgJE5vUGluZykKICAgICAgICAgICAgICAgICdDaGVja1NoYXJlQWNjZXNzJyA9ICRDaGVja1NoYXJlQWNjZXNzCiAgICAgICAgICAgICAgICAnRXhjbHVkZWRTaGFyZXMnID0gJEV4Y2x1ZGVkU2hhcmVzCiAgICAgICAgICAgICAgICAnQ2hlY2tBZG1pbicgPSAkQ2hlY2tBZG1pbgogICAgICAgICAgICB9CgogICAgICAgICAgICAjIGtpY2sgb2ZmIHRoZSB0aHJlYWRlZCBzY3JpcHQgYmxvY2sgKyBhcmd1bWVudHMgCiAgICAgICAgICAgIEludm9rZS1UaHJlYWRlZEZ1bmN0aW9uIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSAtU2NyaXB0QmxvY2sgJEhvc3RFbnVtQmxvY2sgLVNjcmlwdFBhcmFtZXRlcnMgJFNjcmlwdFBhcmFtcyAtVGhyZWFkcyAkVGhyZWFkcwogICAgICAgIH0KCiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGlmKC1ub3QgJE5vUGluZyAtYW5kICgkQ29tcHV0ZXJOYW1lLmNvdW50IC1uZSAxKSkgewogICAgICAgICAgICAgICAgIyBwaW5nIGFsbCBob3N0cyBpbiBwYXJhbGxlbAogICAgICAgICAgICAgICAgJFBpbmcgPSB7cGFyYW0oJENvbXB1dGVyTmFtZSkgaWYoVGVzdC1Db25uZWN0aW9uIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSAtQ291bnQgMSAtUXVpZXQgLUVycm9yQWN0aW9uIFN0b3ApeyRDb21wdXRlck5hbWV9fQogICAgICAgICAgICAgICAgJENvbXB1dGVyTmFtZSA9IEludm9rZS1UaHJlYWRlZEZ1bmN0aW9uIC1Ob0ltcG9ydHMgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1TY3JpcHRCbG9jayAkUGluZyAtVGhyZWFkcyAxMDAKICAgICAgICAgICAgfQoKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFRvdGFsIG51bWJlciBvZiBhY3RpdmUgaG9zdHM6ICQoJENvbXB1dGVyTmFtZS5jb3VudCkiCiAgICAgICAgICAgICRDb3VudGVyID0gMAoKICAgICAgICAgICAgRm9yRWFjaCAoJENvbXB1dGVyIGluICRDb21wdXRlck5hbWUpIHsKCiAgICAgICAgICAgICAgICAkQ291bnRlciA9ICRDb3VudGVyICsgMQoKICAgICAgICAgICAgICAgICMgc2xlZXAgZm9yIG91ciBzZW1pLXJhbmRvbWl6ZWQgaW50ZXJ2YWwKICAgICAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzICRSYW5kTm8uTmV4dCgoMS0kSml0dGVyKSokRGVsYXksICgxKyRKaXR0ZXIpKiREZWxheSkKCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gRW51bWVyYXRpbmcgc2VydmVyICRDb21wdXRlciAoJENvdW50ZXIgb2YgJCgkQ29tcHV0ZXJOYW1lLmNvdW50KSkiCiAgICAgICAgICAgICAgICBJbnZva2UtQ29tbWFuZCAtU2NyaXB0QmxvY2sgJEhvc3RFbnVtQmxvY2sgLUFyZ3VtZW50TGlzdCAkQ29tcHV0ZXIsICRGYWxzZSwgJENoZWNrU2hhcmVBY2Nlc3MsICRFeGNsdWRlZFNoYXJlcywgJENoZWNrQWRtaW4KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgIH0KfQoKCmZ1bmN0aW9uIEludm9rZS1GaWxlRmluZGVyIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBGaW5kcyBzZW5zaXRpdmUgZmlsZXMgb24gdGhlIGRvbWFpbi4KCiAgICAgICAgQXV0aG9yOiBAaGFybWoweQogICAgICAgIExpY2Vuc2U6IEJTRCAzLUNsYXVzZQoKICAgIC5ERVNDUklQVElPTgoKICAgICAgICBUaGlzIGZ1bmN0aW9uIGZpbmRzIHRoZSBsb2NhbCBkb21haW4gbmFtZSBmb3IgYSBob3N0IHVzaW5nIEdldC1OZXREb21haW4sCiAgICAgICAgcXVlcmllcyB0aGUgZG9tYWluIGZvciBhbGwgYWN0aXZlIG1hY2hpbmVzIHdpdGggR2V0LU5ldENvbXB1dGVyLCBncmFicwogICAgICAgIHRoZSByZWFkYWJsZSBzaGFyZXMgZm9yIGVhY2ggc2VydmVyLCBhbmQgcmVjdXJzaXZlbHkgc2VhcmNoZXMgZXZlcnkKICAgICAgICBzaGFyZSBmb3IgZmlsZXMgd2l0aCBzcGVjaWZpYyBrZXl3b3JkcyBpbiB0aGUgbmFtZS4KICAgICAgICBJZiBhIHNoYXJlIGxpc3QgaXMgcGFzc2VkLCBFVkVSWSBzaGFyZSBpcyBlbnVtZXJhdGVkIHJlZ2FyZGxlc3Mgb2YKICAgICAgICBvdGhlciBvcHRpb25zLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIEhvc3QgYXJyYXkgdG8gZW51bWVyYXRlLCBwYXNzYWJsZSBvbiB0aGUgcGlwZWxpbmUuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckZpbGUKCiAgICAgICAgRmlsZSBvZiBob3N0bmFtZXMvSVBzIHRvIHNlYXJjaC4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyRmlsdGVyCgogICAgICAgIEhvc3QgZmlsdGVyIG5hbWUgdG8gcXVlcnkgQUQgZm9yLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckFEU3BhdGgKCiAgICAgICAgVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoIGZvciBob3N0cywgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCiAgICAuUEFSQU1FVEVSIFNoYXJlTGlzdAoKICAgICAgICBMaXN0IGlmIFxcSE9TVFxzaGFyZXMgdG8gc2VhcmNoIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBUZXJtcwoKICAgICAgICBUZXJtcyB0byBzZWFyY2ggZm9yLgoKICAgIC5QQVJBTUVURVIgT2ZmaWNlRG9jcwoKICAgICAgICBTd2l0Y2guIFNlYXJjaCBmb3Igb2ZmaWNlIGRvY3VtZW50cyAoKi5kb2MqLCAqLnhscyosICoucHB0KikKCiAgICAuUEFSQU1FVEVSIEZyZXNoRVhFcwoKICAgICAgICBTd2l0Y2guIEZpbmQgLkVYRXMgYWNjZXNzZWQgd2l0aGluIHRoZSBsYXN0IHdlZWsuCgogICAgLlBBUkFNRVRFUiBMYXN0QWNjZXNzVGltZQoKICAgICAgICBPbmx5IHJldHVybiBmaWxlcyB3aXRoIGEgTGFzdEFjY2Vzc1RpbWUgZ3JlYXRlciB0aGFuIHRoaXMgZGF0ZSB2YWx1ZS4KCiAgICAuUEFSQU1FVEVSIExhc3RXcml0ZVRpbWUKCiAgICAgICAgT25seSByZXR1cm4gZmlsZXMgd2l0aCBhIExhc3RXcml0ZVRpbWUgZ3JlYXRlciB0aGFuIHRoaXMgZGF0ZSB2YWx1ZS4KCiAgICAuUEFSQU1FVEVSIENyZWF0aW9uVGltZQoKICAgICAgICBPbmx5IHJldHVybiBmaWxlcyB3aXRoIGEgQ3JlYXRpb25EYXRlIGdyZWF0ZXIgdGhhbiB0aGlzIGRhdGUgdmFsdWUuCgogICAgLlBBUkFNRVRFUiBJbmNsdWRlQwoKICAgICAgICBTd2l0Y2guIEluY2x1ZGUgYW55IEMkIHNoYXJlcyBpbiByZWN1cnNpdmUgc2VhcmNoaW5nIChkZWZhdWx0IGlnbm9yZSkuCgogICAgLlBBUkFNRVRFUiBJbmNsdWRlQWRtaW4KCiAgICAgICAgU3dpdGNoLiBJbmNsdWRlIGFueSBBRE1JTiQgc2hhcmVzIGluIHJlY3Vyc2l2ZSBzZWFyY2hpbmcgKGRlZmF1bHQgaWdub3JlKS4KCiAgICAuUEFSQU1FVEVSIEV4Y2x1ZGVGb2xkZXJzCgogICAgICAgIFN3aXRjaC4gRXhjbHVkZSBmb2xkZXJzIGZyb20gdGhlIHNlYXJjaCByZXN1bHRzLgoKICAgIC5QQVJBTUVURVIgRXhjbHVkZUhpZGRlbgoKICAgICAgICBTd2l0Y2guIEV4Y2x1ZGUgaGlkZGVuIGZpbGVzIGFuZCBmb2xkZXJzIGZyb20gdGhlIHNlYXJjaCByZXN1bHRzLgoKICAgIC5QQVJBTUVURVIgQ2hlY2tXcml0ZUFjY2VzcwoKICAgICAgICBTd2l0Y2guIE9ubHkgcmV0dXJucyBmaWxlcyB0aGUgY3VycmVudCB1c2VyIGhhcyB3cml0ZSBhY2Nlc3MgdG8uCgogICAgLlBBUkFNRVRFUiBPdXRGaWxlCgogICAgICAgIE91dHB1dCByZXN1bHRzIHRvIGEgc3BlY2lmaWVkIGNzdiBvdXRwdXQgZmlsZS4KCiAgICAuUEFSQU1FVEVSIE5vQ2xvYmJlcgoKICAgICAgICBTd2l0Y2guIERvbid0IG92ZXJ3cml0ZSBhbnkgZXhpc3Rpbmcgb3V0cHV0IGZpbGUuCgogICAgLlBBUkFNRVRFUiBOb1BpbmcKCiAgICAgICAgU3dpdGNoLiBEb24ndCBwaW5nIGVhY2ggaG9zdCB0byBlbnN1cmUgaXQncyB1cCBiZWZvcmUgZW51bWVyYXRpbmcuCgogICAgLlBBUkFNRVRFUiBEZWxheQoKICAgICAgICBEZWxheSBiZXR3ZWVuIGVudW1lcmF0aW5nIGhvc3RzLCBkZWZhdWx0cyB0byAwCgogICAgLlBBUkFNRVRFUiBKaXR0ZXIKCiAgICAgICAgSml0dGVyIGZvciB0aGUgaG9zdCBkZWxheSwgZGVmYXVsdHMgdG8gKy8tIDAuMwoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIERvbWFpbiB0byBxdWVyeSBmb3IgbWFjaGluZXMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIFNlYXJjaEZvcmVzdAoKICAgICAgICBTZWFyY2ggYWxsIGRvbWFpbnMgaW4gdGhlIGZvcmVzdCBmb3IgdGFyZ2V0IHVzZXJzIGluc3RlYWQgb2YganVzdAogICAgICAgIGEgc2luZ2xlIGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIFNlYXJjaFNZU1ZPTAoKICAgICAgICBTd2l0Y2guIFNlYXJjaCBmb3IgbG9naW4gc2NyaXB0cyBvbiB0aGUgU1lTVk9MIG9mIHRoZSBwcmltYXJ5IERDcyBmb3IgZWFjaCBzcGVjaWZpZWQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgVGhyZWFkcwoKICAgICAgICBUaGUgbWF4aW11bSBjb25jdXJyZW50IHRocmVhZHMgdG8gZXhlY3V0ZS4KCiAgICAuUEFSQU1FVEVSIFVzZVBTRHJpdmUKCiAgICAgICAgU3dpdGNoLiBNb3VudCB0YXJnZXQgcmVtb3RlIHBhdGggd2l0aCB0ZW1wb3JhcnkgUFNEcml2ZXMuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBJbnZva2UtRmlsZUZpbmRlcgoKICAgICAgICBGaW5kIHJlYWRhYmxlIGZpbGVzIG9uIHRoZSBkb21haW4gd2l0aCAncGFzcycsICdzZW5zaXRpdmUnLAogICAgICAgICdzZWNyZXQnLCAnYWRtaW4nLCAnbG9naW4nLCBvciAndW5hdHRlbmQqLnhtbCcgaW4gdGhlIG5hbWUsCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBJbnZva2UtRmlsZUZpbmRlciAtRG9tYWluIHRlc3RpbmcKCiAgICAgICAgRmluZCByZWFkYWJsZSBmaWxlcyBvbiB0aGUgJ3Rlc3RpbmcnIGRvbWFpbiB3aXRoICdwYXNzJywgJ3NlbnNpdGl2ZScsCiAgICAgICAgJ3NlY3JldCcsICdhZG1pbicsICdsb2dpbicsIG9yICd1bmF0dGVuZCoueG1sJyBpbiB0aGUgbmFtZSwKCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1GaWxlRmluZGVyIC1JbmNsdWRlQwoKICAgICAgICBGaW5kIHJlYWRhYmxlIGZpbGVzIG9uIHRoZSBkb21haW4gd2l0aCAncGFzcycsICdzZW5zaXRpdmUnLAogICAgICAgICdzZWNyZXQnLCAnYWRtaW4nLCAnbG9naW4nIG9yICd1bmF0dGVuZCoueG1sJyBpbiB0aGUgbmFtZSwKICAgICAgICBpbmNsdWRpbmcgQyQgc2hhcmVzLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gSW52b2tlLUZpbGVGaW5kZXIgLVNoYXJlTGlzdCBzaGFyZXMudHh0IC1UZXJtcyBhY2NvdW50cyxzc24gLU91dEZpbGUgb3V0LmNzdgoKICAgICAgICBFbnVtZXJhdGUgYSBzcGVjaWZpZWQgc2hhcmUgbGlzdCBmb3IgZmlsZXMgd2l0aCAnYWNjb3VudHMnIG9yCiAgICAgICAgJ3NzbicgaW4gdGhlIG5hbWUsIGFuZCB3cml0ZSBldmVyeXRoaW5nIHRvICJvdXQuY3N2IgoKICAgIC5MSU5LCiAgICAgICAgaHR0cDovL3d3dy5oYXJtajB5Lm5ldC9ibG9nL3JlZHRlYW1pbmcvZmlsZS1zZXJ2ZXItdHJpYWdlLW9uLXJlZC10ZWFtLWVuZ2FnZW1lbnRzLwoKIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3RzJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUsCgogICAgICAgIFtWYWxpZGF0ZVNjcmlwdCh7VGVzdC1QYXRoIC1QYXRoICRfIH0pXQogICAgICAgIFtBbGlhcygnSG9zdExpc3QnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckZpbGUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyRmlsdGVyLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckFEU3BhdGgsCgogICAgICAgIFtWYWxpZGF0ZVNjcmlwdCh7VGVzdC1QYXRoIC1QYXRoICRfIH0pXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNoYXJlTGlzdCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkT2ZmaWNlRG9jcywKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRnJlc2hFWEVzLAoKICAgICAgICBbQWxpYXMoJ1Rlcm1zJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRTZWFyY2hUZXJtcywgCgogICAgICAgIFtWYWxpZGF0ZVNjcmlwdCh7VGVzdC1QYXRoIC1QYXRoICRfIH0pXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRlcm1MaXN0LAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRMYXN0QWNjZXNzVGltZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTGFzdFdyaXRlVGltZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ3JlYXRpb25UaW1lLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRJbmNsdWRlQywKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkSW5jbHVkZUFkbWluLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRFeGNsdWRlRm9sZGVycywKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRXhjbHVkZUhpZGRlbiwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkQ2hlY2tXcml0ZUFjY2VzcywKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkT3V0RmlsZSwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkTm9DbG9iYmVyLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICROb1BpbmcsCgogICAgICAgIFtVSW50MzJdCiAgICAgICAgJERlbGF5ID0gMCwKCiAgICAgICAgW0RvdWJsZV0KICAgICAgICAkSml0dGVyID0gLjMsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKICAgICAgICAKICAgICAgICBbU3dpdGNoXQogICAgICAgICRTZWFyY2hGb3Jlc3QsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFNlYXJjaFNZU1ZPTCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRUaHJlYWRzLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRVc2VQU0RyaXZlCiAgICApCgogICAgYmVnaW4gewogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RlYnVnJ10pIHsKICAgICAgICAgICAgJERlYnVnUHJlZmVyZW5jZSA9ICdDb250aW51ZScKICAgICAgICB9CgogICAgICAgICMgcmFuZG9tIG9iamVjdCBmb3IgZGVsYXkKICAgICAgICAkUmFuZE5vID0gTmV3LU9iamVjdCBTeXN0ZW0uUmFuZG9tCgogICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBSdW5uaW5nIEludm9rZS1GaWxlRmluZGVyIHdpdGggZGVsYXkgb2YgJERlbGF5IgoKICAgICAgICAkU2hhcmVzID0gQCgpCgogICAgICAgICMgZmlndXJlIG91dCB0aGUgc2hhcmVzIHdlIHdhbnQgdG8gaWdub3JlCiAgICAgICAgW1N0cmluZ1tdXSAkRXhjbHVkZWRTaGFyZXMgPSBAKCJDJCIsICJBRE1JTiQiKQoKICAgICAgICAjIHNlZSBpZiB3ZSdyZSBzcGVjaWZpY2FsbHkgaW5jbHVkaW5nIGFueSBvZiB0aGUgbm9ybWFsbHkgZXhjbHVkZWQgc2V0cwogICAgICAgIGlmICgkSW5jbHVkZUMpIHsKICAgICAgICAgICAgaWYgKCRJbmNsdWRlQWRtaW4pIHsKICAgICAgICAgICAgICAgICRFeGNsdWRlZFNoYXJlcyA9IEAoKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJEV4Y2x1ZGVkU2hhcmVzID0gQCgiQURNSU4kIikKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCRJbmNsdWRlQWRtaW4pIHsKICAgICAgICAgICAgaWYgKCRJbmNsdWRlQykgewogICAgICAgICAgICAgICAgJEV4Y2x1ZGVkU2hhcmVzID0gQCgpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkRXhjbHVkZWRTaGFyZXMgPSBAKCJDJCIpCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICMgZGVsZXRlIGFueSBleGlzdGluZyBvdXRwdXQgZmlsZSBpZiBpdCBhbHJlYWR5IGV4aXN0cwogICAgICAgIGlmKCEkTm9DbG9iYmVyKSB7CiAgICAgICAgICAgIGlmICgkT3V0RmlsZSAtYW5kIChUZXN0LVBhdGggLVBhdGggJE91dEZpbGUpKSB7IFJlbW92ZS1JdGVtIC1QYXRoICRPdXRGaWxlIH0KICAgICAgICB9CgogICAgICAgICMgaWYgdGhlcmUncyBhIHNldCBvZiB0ZXJtcyBzcGVjaWZpZWQgdG8gc2VhcmNoIGZvcgogICAgICAgIGlmICgkVGVybUxpc3QpIHsKICAgICAgICAgICAgRm9yRWFjaCAoJFRlcm0gaW4gR2V0LUNvbnRlbnQgLVBhdGggJFRlcm1MaXN0KSB7CiAgICAgICAgICAgICAgICBpZiAoKCRUZXJtIC1uZSAkTnVsbCkgLWFuZCAoJFRlcm0udHJpbSgpIC1uZSAnJykpIHsKICAgICAgICAgICAgICAgICAgICAkU2VhcmNoVGVybXMgKz0gJFRlcm0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgIyBpZiB3ZSdyZSBoYXJkLXBhc3NlZCBhIHNldCBvZiBzaGFyZXMKICAgICAgICBpZigkU2hhcmVMaXN0KSB7CiAgICAgICAgICAgIEZvckVhY2ggKCRJdGVtIGluIEdldC1Db250ZW50IC1QYXRoICRTaGFyZUxpc3QpIHsKICAgICAgICAgICAgICAgIGlmICgoJEl0ZW0gLW5lICROdWxsKSAtYW5kICgkSXRlbS50cmltKCkgLW5lICcnKSkgewogICAgICAgICAgICAgICAgICAgICMgZXhjbHVkZSBhbnkgIlt0YWJdLSBjb21tYW50cyIsIGkuZS4gdGhlIG91dHB1dCBmcm9tIEludm9rZS1TaGFyZUZpbmRlcgogICAgICAgICAgICAgICAgICAgICRTaGFyZSA9ICRJdGVtLlNwbGl0KCJgdCIpWzBdCiAgICAgICAgICAgICAgICAgICAgJFNoYXJlcyArPSAkU2hhcmUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgIyBpZiB3ZSdyZSB1c2luZyBhIGhvc3QgZmlsZSBsaXN0LCByZWFkIHRoZSB0YXJnZXRzIGluIGFuZCBhZGQgdGhlbSB0byB0aGUgdGFyZ2V0IGxpc3QKICAgICAgICAgICAgaWYoJENvbXB1dGVyRmlsZSkgewogICAgICAgICAgICAgICAgJENvbXB1dGVyTmFtZSA9IEdldC1Db250ZW50IC1QYXRoICRDb21wdXRlckZpbGUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYoISRDb21wdXRlck5hbWUpIHsKCiAgICAgICAgICAgICAgICBpZigkRG9tYWluKSB7CiAgICAgICAgICAgICAgICAgICAgJFRhcmdldERvbWFpbnMgPSBAKCREb21haW4pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlaWYoJFNlYXJjaEZvcmVzdCkgewogICAgICAgICAgICAgICAgICAgICMgZ2V0IEFMTCB0aGUgZG9tYWlucyBpbiB0aGUgZm9yZXN0IHRvIHNlYXJjaAogICAgICAgICAgICAgICAgICAgICRUYXJnZXREb21haW5zID0gR2V0LU5ldEZvcmVzdERvbWFpbiB8IEZvckVhY2gtT2JqZWN0IHsgJF8uTmFtZSB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAjIHVzZSB0aGUgbG9jYWwgZG9tYWluCiAgICAgICAgICAgICAgICAgICAgJFRhcmdldERvbWFpbnMgPSBAKCAoR2V0LU5ldERvbWFpbikubmFtZSApCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYoJFNlYXJjaFNZU1ZPTCkgewogICAgICAgICAgICAgICAgICAgIEZvckVhY2ggKCREb21haW4gaW4gJFRhcmdldERvbWFpbnMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJERDU2VhcmNoUGF0aCA9ICJcXCREb21haW5cU1lTVk9MXCIKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIEFkZGluZyBzaGFyZSBzZWFyY2ggcGF0aCAkRENTZWFyY2hQYXRoIgogICAgICAgICAgICAgICAgICAgICAgICAkU2hhcmVzICs9ICREQ1NlYXJjaFBhdGgKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYoISRTZWFyY2hUZXJtcykgewogICAgICAgICAgICAgICAgICAgICAgICAjIHNlYXJjaCBmb3IgaW50ZXJlc3Rpbmcgc2NyaXB0cyBvbiBTWVNWT0wKICAgICAgICAgICAgICAgICAgICAgICAgJFNlYXJjaFRlcm1zID0gQCgnLnZicycsICcuYmF0JywgJy5wczEnKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIFthcnJheV0kQ29tcHV0ZXJOYW1lID0gQCgpCgogICAgICAgICAgICAgICAgICAgIEZvckVhY2ggKCREb21haW4gaW4gJFRhcmdldERvbWFpbnMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFF1ZXJ5aW5nIGRvbWFpbiAkRG9tYWluIGZvciBob3N0cyIKICAgICAgICAgICAgICAgICAgICAgICAgJENvbXB1dGVyTmFtZSArPSBHZXQtTmV0Q29tcHV0ZXIgLUZpbHRlciAkQ29tcHV0ZXJGaWx0ZXIgLUFEU3BhdGggJENvbXB1dGVyQURTcGF0aCAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICMgcmVtb3ZlIGFueSBudWxsIHRhcmdldCBob3N0cywgdW5pcXVpZnkgdGhlIGxpc3QgYW5kIHNodWZmbGUgaXQKICAgICAgICAgICAgICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJENvbXB1dGVyTmFtZSB8IFdoZXJlLU9iamVjdCB7ICRfIH0gfCBTb3J0LU9iamVjdCAtVW5pcXVlIHwgU29ydC1PYmplY3QgeyBHZXQtUmFuZG9tIH0KICAgICAgICAgICAgICAgICAgICBpZigkKCRDb21wdXRlck5hbWUuQ291bnQpIC1lcSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93ICJObyBob3N0cyBmb3VuZCEiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAjIHNjcmlwdCBibG9jayB0aGF0IGVudW1lcmF0ZXMgc2hhcmVzIGFuZCBmaWxlcyBvbiBhIHNlcnZlcgogICAgICAgICRIb3N0RW51bUJsb2NrID0gewogICAgICAgICAgICBwYXJhbSgkQ29tcHV0ZXJOYW1lLCAkUGluZywgJEV4Y2x1ZGVkU2hhcmVzLCAkU2VhcmNoVGVybXMsICRFeGNsdWRlRm9sZGVycywgJE9mZmljZURvY3MsICRFeGNsdWRlSGlkZGVuLCAkRnJlc2hFWEVzLCAkQ2hlY2tXcml0ZUFjY2VzcywgJE91dEZpbGUsICRVc2VQU0RyaXZlKQoKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiQ29tcHV0ZXJOYW1lOiAkQ29tcHV0ZXJOYW1lIgogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFeGNsdWRlZFNoYXJlczogJEV4Y2x1ZGVkU2hhcmVzIgogICAgICAgICAgICAkU2VhcmNoU2hhcmVzID0gQCgpCgogICAgICAgICAgICBpZigkQ29tcHV0ZXJOYW1lLlN0YXJ0c1dpdGgoIlxcIikpIHsKICAgICAgICAgICAgICAgICMgaWYgYSBzaGFyZSBpcyBwYXNzZWQgYXMgdGhlIHNlcnZlcgogICAgICAgICAgICAgICAgJFNlYXJjaFNoYXJlcyArPSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAjIGlmIHdlJ3JlIGVudW1lcmF0aW5nIHRoZSBzaGFyZXMgb24gdGhlIHRhcmdldCBzZXJ2ZXIgZmlyc3QKICAgICAgICAgICAgICAgICRVcCA9ICRUcnVlCiAgICAgICAgICAgICAgICBpZigkUGluZykgewogICAgICAgICAgICAgICAgICAgICRVcCA9IFRlc3QtQ29ubmVjdGlvbiAtQ291bnQgMSAtUXVpZXQgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZigkVXApIHsKICAgICAgICAgICAgICAgICAgICAjIGdldCB0aGUgc2hhcmVzIGZvciB0aGlzIGhvc3QgYW5kIGRpc3BsYXkgd2hhdCB3ZSBmaW5kCiAgICAgICAgICAgICAgICAgICAgJFNoYXJlcyA9IEdldC1OZXRTaGFyZSAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUKICAgICAgICAgICAgICAgICAgICBGb3JFYWNoICgkU2hhcmUgaW4gJFNoYXJlcykgewoKICAgICAgICAgICAgICAgICAgICAgICAgJE5ldE5hbWUgPSAkU2hhcmUuc2hpMV9uZXRuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRQYXRoID0gJ1xcJyskQ29tcHV0ZXJOYW1lKydcJyskTmV0TmFtZQoKICAgICAgICAgICAgICAgICAgICAgICAgIyBtYWtlIHN1cmUgd2UgZ2V0IGEgcmVhbCBzaGFyZSBuYW1lIGJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCgkTmV0TmFtZSkgLWFuZCAoJE5ldE5hbWUudHJpbSgpIC1uZSAnJykpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIHNraXAgdGhpcyBzaGFyZSBpZiBpdCdzIGluIHRoZSBleGNsdWRlIGxpc3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkRXhjbHVkZWRTaGFyZXMgLU5vdENvbnRhaW5zICROZXROYW1lLlRvVXBwZXIoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgY2hlY2sgaWYgdGhlIHVzZXIgaGFzIGFjY2VzcyB0byB0aGlzIHBhdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTnVsbCA9IFtJTy5EaXJlY3RvcnldOjpHZXRGaWxlcygkUGF0aCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNlYXJjaFNoYXJlcyArPSAkUGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlshXSBObyBhY2Nlc3MgdG8gJFBhdGgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBGb3JFYWNoKCRTaGFyZSBpbiAkU2VhcmNoU2hhcmVzKSB7CiAgICAgICAgICAgICAgICAkU2VhcmNoQXJncyA9ICBAewogICAgICAgICAgICAgICAgICAgICdQYXRoJyA9ICRTaGFyZQogICAgICAgICAgICAgICAgICAgICdTZWFyY2hUZXJtcycgPSAkU2VhcmNoVGVybXMKICAgICAgICAgICAgICAgICAgICAnT2ZmaWNlRG9jcycgPSAkT2ZmaWNlRG9jcwogICAgICAgICAgICAgICAgICAgICdGcmVzaEVYRXMnID0gJEZyZXNoRVhFcwogICAgICAgICAgICAgICAgICAgICdMYXN0QWNjZXNzVGltZScgPSAkTGFzdEFjY2Vzc1RpbWUKICAgICAgICAgICAgICAgICAgICAnTGFzdFdyaXRlVGltZScgPSAkTGFzdFdyaXRlVGltZQogICAgICAgICAgICAgICAgICAgICdDcmVhdGlvblRpbWUnID0gJENyZWF0aW9uVGltZQogICAgICAgICAgICAgICAgICAgICdFeGNsdWRlRm9sZGVycycgPSAkRXhjbHVkZUZvbGRlcnMKICAgICAgICAgICAgICAgICAgICAnRXhjbHVkZUhpZGRlbicgPSAkRXhjbHVkZUhpZGRlbgogICAgICAgICAgICAgICAgICAgICdDaGVja1dyaXRlQWNjZXNzJyA9ICRDaGVja1dyaXRlQWNjZXNzCiAgICAgICAgICAgICAgICAgICAgJ091dEZpbGUnID0gJE91dEZpbGUKICAgICAgICAgICAgICAgICAgICAnVXNlUFNEcml2ZScgPSAkVXNlUFNEcml2ZQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIEZpbmQtSW50ZXJlc3RpbmdGaWxlIEBTZWFyY2hBcmdzCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgcHJvY2VzcyB7CgogICAgICAgIGlmKCRUaHJlYWRzKSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlVzaW5nIHRocmVhZGluZyB3aXRoIHRocmVhZHMgPSAkVGhyZWFkcyIKCiAgICAgICAgICAgICMgaWYgd2UncmUgdXNpbmcgdGhyZWFkaW5nLCBraWNrIG9mZiB0aGUgc2NyaXB0IGJsb2NrIHdpdGggSW52b2tlLVRocmVhZGVkRnVuY3Rpb24KICAgICAgICAgICAgJFNjcmlwdFBhcmFtcyA9IEB7CiAgICAgICAgICAgICAgICAnUGluZycgPSAkKC1ub3QgJE5vUGluZykKICAgICAgICAgICAgICAgICdFeGNsdWRlZFNoYXJlcycgPSAkRXhjbHVkZWRTaGFyZXMKICAgICAgICAgICAgICAgICdTZWFyY2hUZXJtcycgPSAkU2VhcmNoVGVybXMKICAgICAgICAgICAgICAgICdFeGNsdWRlRm9sZGVycycgPSAkRXhjbHVkZUZvbGRlcnMKICAgICAgICAgICAgICAgICdPZmZpY2VEb2NzJyA9ICRPZmZpY2VEb2NzCiAgICAgICAgICAgICAgICAnRXhjbHVkZUhpZGRlbicgPSAkRXhjbHVkZUhpZGRlbgogICAgICAgICAgICAgICAgJ0ZyZXNoRVhFcycgPSAkRnJlc2hFWEVzCiAgICAgICAgICAgICAgICAnQ2hlY2tXcml0ZUFjY2VzcycgPSAkQ2hlY2tXcml0ZUFjY2VzcwogICAgICAgICAgICAgICAgJ091dEZpbGUnID0gJE91dEZpbGUKICAgICAgICAgICAgICAgICdVc2VQU0RyaXZlJyA9ICRVc2VQU0RyaXZlCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMga2ljayBvZmYgdGhlIHRocmVhZGVkIHNjcmlwdCBibG9jayArIGFyZ3VtZW50cyAKICAgICAgICAgICAgaWYoJFNoYXJlcykgewogICAgICAgICAgICAgICAgIyBwYXNzIHRoZSBzaGFyZXMgYXMgdGhlIGhvc3RzIHNvIHRoZSB0aHJlYWRlZCBmdW5jdGlvbiBjb2RlIGRvZXNuJ3QgaGF2ZSB0byBiZSBoYWNrZWQgdXAKICAgICAgICAgICAgICAgIEludm9rZS1UaHJlYWRlZEZ1bmN0aW9uIC1Db21wdXRlck5hbWUgJFNoYXJlcyAtU2NyaXB0QmxvY2sgJEhvc3RFbnVtQmxvY2sgLVNjcmlwdFBhcmFtZXRlcnMgJFNjcmlwdFBhcmFtcyAtVGhyZWFkcyAkVGhyZWFkcwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgSW52b2tlLVRocmVhZGVkRnVuY3Rpb24gLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1TY3JpcHRCbG9jayAkSG9zdEVudW1CbG9jayAtU2NyaXB0UGFyYW1ldGVycyAkU2NyaXB0UGFyYW1zIC1UaHJlYWRzICRUaHJlYWRzCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGVsc2UgewogICAgICAgICAgICBpZigkU2hhcmVzKXsKICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgPSAkU2hhcmVzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZWlmKC1ub3QgJE5vUGluZyAtYW5kICgkQ29tcHV0ZXJOYW1lLmNvdW50IC1ndCAxKSkgewogICAgICAgICAgICAgICAgIyBwaW5nIGFsbCBob3N0cyBpbiBwYXJhbGxlbAogICAgICAgICAgICAgICAgJFBpbmcgPSB7cGFyYW0oJENvbXB1dGVyTmFtZSkgaWYoVGVzdC1Db25uZWN0aW9uIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSAtQ291bnQgMSAtUXVpZXQgLUVycm9yQWN0aW9uIFN0b3ApeyRDb21wdXRlck5hbWV9fQogICAgICAgICAgICAgICAgJENvbXB1dGVyTmFtZSA9IEludm9rZS1UaHJlYWRlZEZ1bmN0aW9uIC1Ob0ltcG9ydHMgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1TY3JpcHRCbG9jayAkUGluZyAtVGhyZWFkcyAxMDAKICAgICAgICAgICAgfQoKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIFRvdGFsIG51bWJlciBvZiBhY3RpdmUgaG9zdHM6ICQoJENvbXB1dGVyTmFtZS5jb3VudCkiCiAgICAgICAgICAgICRDb3VudGVyID0gMAoKICAgICAgICAgICAgJENvbXB1dGVyTmFtZSB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiQ29tcHV0ZXI6ICRfIgogICAgICAgICAgICAgICAgJENvdW50ZXIgPSAkQ291bnRlciArIDEKCiAgICAgICAgICAgICAgICAjIHNsZWVwIGZvciBvdXIgc2VtaS1yYW5kb21pemVkIGludGVydmFsCiAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkUmFuZE5vLk5leHQoKDEtJEppdHRlcikqJERlbGF5LCAoMSskSml0dGVyKSokRGVsYXkpCgogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIEVudW1lcmF0aW5nIHNlcnZlciAkXyAoJENvdW50ZXIgb2YgJCgkQ29tcHV0ZXJOYW1lLmNvdW50KSkiCgogICAgICAgICAgICAgICAgSW52b2tlLUNvbW1hbmQgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1Bcmd1bWVudExpc3QgJF8sICRGYWxzZSwgJEV4Y2x1ZGVkU2hhcmVzLCAkU2VhcmNoVGVybXMsICRFeGNsdWRlRm9sZGVycywgJE9mZmljZURvY3MsICRFeGNsdWRlSGlkZGVuLCAkRnJlc2hFWEVzLCAkQ2hlY2tXcml0ZUFjY2VzcywgJE91dEZpbGUsICRVc2VQU0RyaXZlICAgICAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gRmluZC1Mb2NhbEFkbWluQWNjZXNzIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBGaW5kcyBtYWNoaW5lcyBvbiB0aGUgbG9jYWwgZG9tYWluIHdoZXJlIHRoZSBjdXJyZW50IHVzZXIgaGFzCiAgICAgICAgbG9jYWwgYWRtaW5pc3RyYXRvciBhY2Nlc3MuIFVzZXMgbXVsdGl0aHJlYWRpbmcgdG8KICAgICAgICBzcGVlZCB1cCBlbnVtZXJhdGlvbi4KCiAgICAgICAgQXV0aG9yOiBAaGFybWoweQogICAgICAgIExpY2Vuc2U6IEJTRCAzLUNsYXVzZQoKICAgIC5ERVNDUklQVElPTgoKICAgICAgICBUaGlzIGZ1bmN0aW9uIGZpbmRzIHRoZSBsb2NhbCBkb21haW4gbmFtZSBmb3IgYSBob3N0IHVzaW5nIEdldC1OZXREb21haW4sCiAgICAgICAgcXVlcmllcyB0aGUgZG9tYWluIGZvciBhbGwgYWN0aXZlIG1hY2hpbmVzIHdpdGggR2V0LU5ldENvbXB1dGVyLCB0aGVuIGZvcgogICAgICAgIGVhY2ggc2VydmVyIGl0IGNoZWNrcyBpZiB0aGUgY3VycmVudCB1c2VyIGhhcyBsb2NhbCBhZG1pbmlzdHJhdG9yCiAgICAgICAgYWNjZXNzIHVzaW5nIEludm9rZS1DaGVja0xvY2FsQWRtaW5BY2Nlc3MuCgogICAgICAgIElkZWEgc3RvbGVuIGZyb20gdGhlIGxvY2FsX2FkbWluX3NlYXJjaF9lbnVtIHBvc3QgbW9kdWxlIGluCiAgICAgICAgTWV0YXNwbG9pdCB3cml0dGVuIGJ5OgogICAgICAgICAgICAnQnJhbmRvbiBNY0Nhbm4gInpla25veCIgPGJtY2Nhbm5bYXRdYWNjdXZhbnQuY29tPicKICAgICAgICAgICAgJ1Rob21hcyBNY0NhcnRoeSAic21pbGluZ3JhY2Nvb24iIDxzbWlsaW5ncmFjY29vblthdF1nbWFpbC5jb20+JwogICAgICAgICAgICAnUm95Y2UgRGF2aXMgInIzZHkiIDxyZGF2aXNbYXRdYWNjdXZhbnQuY29tPicKCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBIb3N0IGFycmF5IHRvIGVudW1lcmF0ZSwgcGFzc2FibGUgb24gdGhlIHBpcGVsaW5lLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJGaWxlCgogICAgICAgIEZpbGUgb2YgaG9zdG5hbWVzL0lQcyB0byBzZWFyY2guCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckZpbHRlcgoKICAgICAgICBIb3N0IGZpbHRlciBuYW1lIHRvIHF1ZXJ5IEFEIGZvciwgd2lsZGNhcmRzIGFjY2VwdGVkLgoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJBRFNwYXRoCgogICAgICAgIFRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCBmb3IgaG9zdHMsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBOb1BpbmcKCiAgICAgICAgU3dpdGNoLiBEb24ndCBwaW5nIGVhY2ggaG9zdCB0byBlbnN1cmUgaXQncyB1cCBiZWZvcmUgZW51bWVyYXRpbmcuCgogICAgLlBBUkFNRVRFUiBEZWxheQoKICAgICAgICBEZWxheSBiZXR3ZWVuIGVudW1lcmF0aW5nIGhvc3RzLCBkZWZhdWx0cyB0byAwCgogICAgLlBBUkFNRVRFUiBKaXR0ZXIKCiAgICAgICAgSml0dGVyIGZvciB0aGUgaG9zdCBkZWxheSwgZGVmYXVsdHMgdG8gKy8tIDAuMwoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIERvbWFpbiB0byBxdWVyeSBmb3IgbWFjaGluZXMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KICAgIAogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBTZWFyY2hGb3Jlc3QKCiAgICAgICAgU3dpdGNoLiBTZWFyY2ggYWxsIGRvbWFpbnMgaW4gdGhlIGZvcmVzdCBmb3IgdGFyZ2V0IHVzZXJzIGluc3RlYWQgb2YganVzdAogICAgICAgIGEgc2luZ2xlIGRvbWFpbi4KCiAgICAuUEFSQU1FVEVSIFRocmVhZHMKCiAgICAgICAgVGhlIG1heGltdW0gY29uY3VycmVudCB0aHJlYWRzIHRvIGV4ZWN1dGUuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBGaW5kLUxvY2FsQWRtaW5BY2Nlc3MKCiAgICAgICAgRmluZCBtYWNoaW5lcyBvbiB0aGUgbG9jYWwgZG9tYWluIHdoZXJlIHRoZSBjdXJyZW50IHVzZXIgaGFzIGxvY2FsCiAgICAgICAgYWRtaW5pc3RyYXRvciBhY2Nlc3MuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBGaW5kLUxvY2FsQWRtaW5BY2Nlc3MgLVRocmVhZHMgMTAKCiAgICAgICAgTXVsdGktdGhyZWFkZWQgYWNjZXNzIGh1bnRpbmcsIHJlcGxhY2VzIEZpbmQtTG9jYWxBZG1pbkFjY2Vzc1RocmVhZGVkLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gRmluZC1Mb2NhbEFkbWluQWNjZXNzIC1Eb21haW4gdGVzdGluZwoKICAgICAgICBGaW5kIG1hY2hpbmVzIG9uIHRoZSAndGVzdGluZycgZG9tYWluIHdoZXJlIHRoZSBjdXJyZW50IHVzZXIgaGFzCiAgICAgICAgbG9jYWwgYWRtaW5pc3RyYXRvciBhY2Nlc3MuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBGaW5kLUxvY2FsQWRtaW5BY2Nlc3MgLUNvbXB1dGVyRmlsZSBob3N0cy50eHQKCiAgICAgICAgRmluZCB3aGljaCBtYWNoaW5lcyBpbiB0aGUgaG9zdCBsaXN0IHRoZSBjdXJyZW50IHVzZXIgaGFzIGxvY2FsCiAgICAgICAgYWRtaW5pc3RyYXRvciBhY2Nlc3MuCgogICAgLkxJTksKCiAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tL3JhcGlkNy9tZXRhc3Bsb2l0LWZyYW1ld29yay9ibG9iL21hc3Rlci9tb2R1bGVzL3Bvc3Qvd2luZG93cy9nYXRoZXIvbG9jYWxfYWRtaW5fc2VhcmNoX2VudW0ucmIKICAgICAgICBodHRwOi8vd3d3Lmhhcm1qMHkubmV0L2Jsb2cvcGVuZXRlc3RpbmcvZmluZGluZy1sb2NhbC1hZG1pbi13aXRoLXRoZS12ZWlsLWZyYW1ld29yay8KIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3RzJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUsCgogICAgICAgIFtWYWxpZGF0ZVNjcmlwdCh7VGVzdC1QYXRoIC1QYXRoICRfIH0pXQogICAgICAgIFtBbGlhcygnSG9zdExpc3QnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckZpbGUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyRmlsdGVyLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckFEU3BhdGgsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJE5vUGluZywKCiAgICAgICAgW1VJbnQzMl0KICAgICAgICAkRGVsYXkgPSAwLAoKICAgICAgICBbRG91YmxlXQogICAgICAgICRKaXR0ZXIgPSAuMywKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRTZWFyY2hGb3Jlc3QsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkVGhyZWFkcwogICAgKQoKICAgIGJlZ2luIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZWJ1ZyddKSB7CiAgICAgICAgICAgICREZWJ1Z1ByZWZlcmVuY2UgPSAnQ29udGludWUnCiAgICAgICAgfQoKICAgICAgICAjIHJhbmRvbSBvYmplY3QgZm9yIGRlbGF5CiAgICAgICAgJFJhbmRObyA9IE5ldy1PYmplY3QgU3lzdGVtLlJhbmRvbQoKICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gUnVubmluZyBGaW5kLUxvY2FsQWRtaW5BY2Nlc3Mgd2l0aCBkZWxheSBvZiAkRGVsYXkiCgogICAgICAgICMgaWYgd2UncmUgdXNpbmcgYSBob3N0IGxpc3QsIHJlYWQgdGhlIHRhcmdldHMgaW4gYW5kIGFkZCB0aGVtIHRvIHRoZSB0YXJnZXQgbGlzdAogICAgICAgIGlmKCRDb21wdXRlckZpbGUpIHsKICAgICAgICAgICAgJENvbXB1dGVyTmFtZSA9IEdldC1Db250ZW50IC1QYXRoICRDb21wdXRlckZpbGUKICAgICAgICB9CgogICAgICAgIGlmKCEkQ29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgIFthcnJheV0kQ29tcHV0ZXJOYW1lID0gQCgpCgogICAgICAgICAgICBpZigkRG9tYWluKSB7CiAgICAgICAgICAgICAgICAkVGFyZ2V0RG9tYWlucyA9IEAoJERvbWFpbikKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYoJFNlYXJjaEZvcmVzdCkgewogICAgICAgICAgICAgICAgIyBnZXQgQUxMIHRoZSBkb21haW5zIGluIHRoZSBmb3Jlc3QgdG8gc2VhcmNoCiAgICAgICAgICAgICAgICAkVGFyZ2V0RG9tYWlucyA9IEdldC1OZXRGb3Jlc3REb21haW4gfCBGb3JFYWNoLU9iamVjdCB7ICRfLk5hbWUgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgIyB1c2UgdGhlIGxvY2FsIGRvbWFpbgogICAgICAgICAgICAgICAgJFRhcmdldERvbWFpbnMgPSBAKCAoR2V0LU5ldERvbWFpbikubmFtZSApCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEZvckVhY2ggKCREb21haW4gaW4gJFRhcmdldERvbWFpbnMpIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBRdWVyeWluZyBkb21haW4gJERvbWFpbiBmb3IgaG9zdHMiCiAgICAgICAgICAgICAgICAkQ29tcHV0ZXJOYW1lICs9IEdldC1OZXRDb21wdXRlciAtRmlsdGVyICRDb21wdXRlckZpbHRlciAtQURTcGF0aCAkQ29tcHV0ZXJBRFNwYXRoIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlcgogICAgICAgICAgICB9CiAgICAgICAgCiAgICAgICAgICAgICMgcmVtb3ZlIGFueSBudWxsIHRhcmdldCBob3N0cywgdW5pcXVpZnkgdGhlIGxpc3QgYW5kIHNodWZmbGUgaXQKICAgICAgICAgICAgJENvbXB1dGVyTmFtZSA9ICRDb21wdXRlck5hbWUgfCBXaGVyZS1PYmplY3QgeyAkXyB9IHwgU29ydC1PYmplY3QgLVVuaXF1ZSB8IFNvcnQtT2JqZWN0IHsgR2V0LVJhbmRvbSB9CiAgICAgICAgICAgIGlmKCQoJENvbXB1dGVyTmFtZS5Db3VudCkgLWVxIDApIHsKICAgICAgICAgICAgICAgIHRocm93ICJObyBob3N0cyBmb3VuZCEiCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICMgc2NyaXB0IGJsb2NrIHRoYXQgZW51bWVyYXRlcyBhIHNlcnZlcgogICAgICAgICRIb3N0RW51bUJsb2NrID0gewogICAgICAgICAgICBwYXJhbSgkQ29tcHV0ZXJOYW1lLCAkUGluZykKCiAgICAgICAgICAgICRVcCA9ICRUcnVlCiAgICAgICAgICAgIGlmKCRQaW5nKSB7CiAgICAgICAgICAgICAgICAkVXAgPSBUZXN0LUNvbm5lY3Rpb24gLUNvdW50IDEgLVF1aWV0IC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCRVcCkgewogICAgICAgICAgICAgICAgIyBjaGVjayBpZiB0aGUgY3VycmVudCB1c2VyIGhhcyBsb2NhbCBhZG1pbiBhY2Nlc3MgdG8gdGhpcyBzZXJ2ZXIKICAgICAgICAgICAgICAgICRBY2Nlc3MgPSBJbnZva2UtQ2hlY2tMb2NhbEFkbWluQWNjZXNzIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZQogICAgICAgICAgICAgICAgaWYgKCRBY2Nlc3MuSXNBZG1pbikgewogICAgICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICB9CgogICAgcHJvY2VzcyB7CgogICAgICAgIGlmKCRUaHJlYWRzKSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlVzaW5nIHRocmVhZGluZyB3aXRoIHRocmVhZHMgPSAkVGhyZWFkcyIKCiAgICAgICAgICAgICMgaWYgd2UncmUgdXNpbmcgdGhyZWFkaW5nLCBraWNrIG9mZiB0aGUgc2NyaXB0IGJsb2NrIHdpdGggSW52b2tlLVRocmVhZGVkRnVuY3Rpb24KICAgICAgICAgICAgJFNjcmlwdFBhcmFtcyA9IEB7CiAgICAgICAgICAgICAgICAnUGluZycgPSAkKC1ub3QgJE5vUGluZykKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBraWNrIG9mZiB0aGUgdGhyZWFkZWQgc2NyaXB0IGJsb2NrICsgYXJndW1lbnRzIAogICAgICAgICAgICBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbiAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1TY3JpcHRQYXJhbWV0ZXJzICRTY3JpcHRQYXJhbXMgLVRocmVhZHMgJFRocmVhZHMKICAgICAgICB9CgogICAgICAgIGVsc2UgewogICAgICAgICAgICBpZigtbm90ICROb1BpbmcgLWFuZCAoJENvbXB1dGVyTmFtZS5jb3VudCAtbmUgMSkpIHsKICAgICAgICAgICAgICAgICMgcGluZyBhbGwgaG9zdHMgaW4gcGFyYWxsZWwKICAgICAgICAgICAgICAgICRQaW5nID0ge3BhcmFtKCRDb21wdXRlck5hbWUpIGlmKFRlc3QtQ29ubmVjdGlvbiAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLUNvdW50IDEgLVF1aWV0IC1FcnJvckFjdGlvbiBTdG9wKXskQ29tcHV0ZXJOYW1lfX0KICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgPSBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbiAtTm9JbXBvcnRzIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSAtU2NyaXB0QmxvY2sgJFBpbmcgLVRocmVhZHMgMTAwCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBUb3RhbCBudW1iZXIgb2YgYWN0aXZlIGhvc3RzOiAkKCRDb21wdXRlck5hbWUuY291bnQpIgogICAgICAgICAgICAkQ291bnRlciA9IDAKCiAgICAgICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CgogICAgICAgICAgICAgICAgJENvdW50ZXIgPSAkQ291bnRlciArIDEKCiAgICAgICAgICAgICAgICAjIHNsZWVwIGZvciBvdXIgc2VtaS1yYW5kb21pemVkIGludGVydmFsCiAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkUmFuZE5vLk5leHQoKDEtJEppdHRlcikqJERlbGF5LCAoMSskSml0dGVyKSokRGVsYXkpCgogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWypdIEVudW1lcmF0aW5nIHNlcnZlciAkQ29tcHV0ZXIgKCRDb3VudGVyIG9mICQoJENvbXB1dGVyTmFtZS5jb3VudCkpIgogICAgICAgICAgICAgICAgSW52b2tlLUNvbW1hbmQgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1Bcmd1bWVudExpc3QgJENvbXB1dGVyLCAkRmFsc2UKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1FeHBsb2l0YWJsZVN5c3RlbSB7CjwjCiAgICAuU3lub3BzaXMKCiAgICAgICAgVGhpcyBtb2R1bGUgd2lsbCBxdWVyeSBBY3RpdmUgRGlyZWN0b3J5IGZvciB0aGUgaG9zdG5hbWUsIE9TIHZlcnNpb24sIGFuZCBzZXJ2aWNlIHBhY2sgbGV2ZWwgIAogICAgICAgIGZvciBlYWNoIGNvbXB1dGVyIGFjY291bnQuICBUaGF0IGluZm9ybWF0aW9uIGlzIHRoZW4gY3Jvc3MtcmVmZXJlbmNlZCBhZ2FpbnN0IGEgbGlzdCBvZiBjb21tb24KICAgICAgICBNZXRhc3Bsb2l0IGV4cGxvaXRzIHRoYXQgY2FuIGJlIHVzZWQgZHVyaW5nIHBlbmV0cmF0aW9uIHRlc3RpbmcuCgogICAgLkRFU0NSSVBUSU9OCgogICAgICAgIFRoaXMgbW9kdWxlIHdpbGwgcXVlcnkgQWN0aXZlIERpcmVjdG9yeSBmb3IgdGhlIGhvc3RuYW1lLCBPUyB2ZXJzaW9uLCBhbmQgc2VydmljZSBwYWNrIGxldmVsICAKICAgICAgICBmb3IgZWFjaCBjb21wdXRlciBhY2NvdW50LiAgVGhhdCBpbmZvcm1hdGlvbiBpcyB0aGVuIGNyb3NzLXJlZmVyZW5jZWQgYWdhaW5zdCBhIGxpc3Qgb2YgY29tbW9uCiAgICAgICAgTWV0YXNwbG9pdCBleHBsb2l0cyB0aGF0IGNhbiBiZSB1c2VkIGR1cmluZyBwZW5ldHJhdGlvbiB0ZXN0aW5nLiAgVGhlIHNjcmlwdCBmaWx0ZXJzIG91dCBkaXNhYmxlZAogICAgICAgIGRvbWFpbiBjb21wdXRlcnMgYW5kIHByb3ZpZGVzIHRoZSBjb21wdXRlcidzIGxhc3QgbG9nb24gdGltZSB0byBoZWxwIGRldGVybWluZSBpZiBpdCdzIGJlZW4gCiAgICAgICAgZGVjb21taXNzaW9uZWQuICBBbHNvLCBzaW5jZSB0aGUgc2NyaXB0IHVzZXMgZGF0YSB0YWJsZXMgdG8gb3V0cHV0IGFmZmVjdGVkIHN5c3RlbXMgdGhlIHJlc3VsdHMKICAgICAgICBjYW4gYmUgZWFzaWx5IHBpcGVkIHRvIG90aGVyIGNvbW1hbmRzIHN1Y2ggYXMgdGVzdC1jb25uZWN0aW9uIG9yIGEgRXhwb3J0LUNzdi4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKICAgICAgICBSZXR1cm4gY29tcHV0ZXJzIHdpdGggYSBzcGVjaWZpYyBuYW1lLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgogICAgLlBBUkFNRVRFUiBTUE4KCiAgICAgICAgUmV0dXJuIGNvbXB1dGVycyB3aXRoIGEgc3BlY2lmaWMgc2VydmljZSBwcmluY2lwYWwgbmFtZSwgd2lsZGNhcmRzIGFjY2VwdGVkLgoKICAgIC5QQVJBTUVURVIgT3BlcmF0aW5nU3lzdGVtCgogICAgICAgIFJldHVybiBjb21wdXRlcnMgd2l0aCBhIHNwZWNpZmljIG9wZXJhdGluZyBzeXN0ZW0sIHdpbGRjYXJkcyBhY2NlcHRlZC4KCiAgICAuUEFSQU1FVEVSIFNlcnZpY2VQYWNrCgogICAgICAgIFJldHVybiBjb21wdXRlcnMgd2l0aCBhIHNwZWNpZmljIHNlcnZpY2UgcGFjaywgd2lsZGNhcmRzIGFjY2VwdGVkLgoKICAgIC5QQVJBTUVURVIgRmlsdGVyCgogICAgICAgIEEgY3VzdG9taXplZCBsZGFwIGZpbHRlciBzdHJpbmcgdG8gdXNlLCBlLmcuICIoZGVzY3JpcHRpb249KmFkbWluKikiCgogICAgLlBBUkFNRVRFUiBQaW5nCgogICAgICAgIFN3aXRjaC4gUGluZyBlYWNoIGhvc3QgdG8gZW5zdXJlIGl0J3MgdXAgYmVmb3JlIGVudW1lcmF0aW5nLgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gdG8gcXVlcnkgZm9yIGNvbXB1dGVycywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgQURTcGF0aAoKICAgICAgICBUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKICAgICAgICBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgogICAgLlBBUkFNRVRFUiBVbmNvbnN0cmFpbmVkCgogICAgICAgIFN3aXRjaC4gUmV0dXJuIGNvbXB1dGVyIG9iamVjdHMgdGhhdCBoYXZlIHVuY29uc3RyYWluZWQgZGVsZWdhdGlvbi4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuUEFSQU1FVEVSIENyZWRlbnRpYWwKCiAgICAgICAgQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwogICAgICAgIGZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKICAgIC5FWEFNUExFCiAgICAgICAKICAgICAgICBUaGUgZXhhbXBsZSBiZWxvdyBzaG93cyB0aGUgc3RhbmRhcmQgY29tbWFuZCB1c2FnZS4gIERpc2FibGVkIHN5c3RlbSBhcmUgZXhjbHVkZWQgYnkgZGVmYXVsdCwgYnV0CiAgICAgICAgdGhlICJMYXN0TGdvbiIgY29sdW1uIGNhbiBiZSB1c2VkIHRvIGRldGVybWluZSB3aGljaCBzeXN0ZW1zIGFyZSBsaXZlLiAgVXN1YWxseSwgaWYgYSBzeXN0ZW0gaGFzbid0IAogICAgICAgIGxvZ2dlZCBvbiBmb3IgdHdvIG9yIG1vcmUgd2Vla3MgaXQncyBiZWVuIGRlY29tbWlzc2lvbmVkLiAgICAgIAogICAgICAgIFBTIEM6XD4gR2V0LUV4cGxvaXRhYmxlU3lzdGVtIC1Eb21haW5Db250cm9sbGVyIDE5Mi4xNjguMS4xIC1DcmVkZW50aWFsIGRlbW8uY29tXHVzZXIgfCBGb3JtYXQtVGFibGUgLUF1dG9TaXplCiAgICAgICAgWypdIEdyYWJiaW5nIGNvbXB1dGVyIGFjY291bnRzIGZyb20gQWN0aXZlIERpcmVjdG9yeS4uLgogICAgICAgIFsqXSBMb2FkaW5nIGV4cGxvaXQgbGlzdCBmb3IgY3JpdGljYWwgbWlzc2luZyBwYXRjaGVzLi4uCiAgICAgICAgWypdIENoZWNraW5nIGNvbXB1dGVycyBmb3IgdnVsbmVyYWJsZSBPUyBhbmQgU1AgbGV2ZWxzLi4uCiAgICAgICAgWytdIEZvdW5kIDUgcG90ZW50aWFsbHkgdnVsbmVyYWJsZSBzeXN0ZW1zIQogICAgICAgIENvbXB1dGVyTmFtZSAgICAgICAgICBPcGVyYXRpbmdTeXN0ZW0gICAgICAgICBTZXJ2aWNlUGFjayAgICBMYXN0TG9nb24gICAgICAgICAgICBNc2ZNb2R1bGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENWRSAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAtLS0tLS0tLS0tLS0gICAgICAgICAgLS0tLS0tLS0tLS0tLS0tICAgICAgICAgLS0tLS0tLS0tLS0gICAgLS0tLS0tLS0tICAgICAgICAgICAgLS0tLS0tLS0tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLS0gICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgQURTLmRlbW8uY29tICAgICAgICAgIFdpbmRvd3MgU2VydmVyIDIwMDMgICAgIFNlcnZpY2UgUGFjayAyIDQvOC8yMDE1IDU6NDY6NTIgUE0gIGV4cGxvaXQvd2luZG93cy9kY2VycGMvbXMwN18wMjlfbXNkbnNfem9uZW5hbWUgaHR0cDovL3d3dy5jdmVkZXRhaWxzLi4uLgogICAgICAgIEFEUy5kZW1vLmNvbSAgICAgICAgICBXaW5kb3dzIFNlcnZlciAyMDAzICAgICBTZXJ2aWNlIFBhY2sgMiA0LzgvMjAxNSA1OjQ2OjUyIFBNICBleHBsb2l0L3dpbmRvd3Mvc21iL21zMDhfMDY3X25ldGFwaSAgICAgICAgICAgIGh0dHA6Ly93d3cuY3ZlZGV0YWlscy4uLi4KICAgICAgICBBRFMuZGVtby5jb20gICAgICAgICAgV2luZG93cyBTZXJ2ZXIgMjAwMyAgICAgU2VydmljZSBQYWNrIDIgNC84LzIwMTUgNTo0Njo1MiBQTSAgZXhwbG9pdC93aW5kb3dzL3NtYi9tczEwXzA2MV9zcG9vbHNzICAgICAgICAgICBodHRwOi8vd3d3LmN2ZWRldGFpbHMuLi4uCiAgICAgICAgTFZBLmRlbW8uY29tICAgICAgICAgIFdpbmRvd3MgU2VydmVyIDIwMDMgICAgIFNlcnZpY2UgUGFjayAyIDQvOC8yMDE1IDE6NDQ6NDYgUE0gIGV4cGxvaXQvd2luZG93cy9kY2VycGMvbXMwN18wMjlfbXNkbnNfem9uZW5hbWUgaHR0cDovL3d3dy5jdmVkZXRhaWxzLi4uLgogICAgICAgIExWQS5kZW1vLmNvbSAgICAgICAgICBXaW5kb3dzIFNlcnZlciAyMDAzICAgICBTZXJ2aWNlIFBhY2sgMiA0LzgvMjAxNSAxOjQ0OjQ2IFBNICBleHBsb2l0L3dpbmRvd3Mvc21iL21zMDhfMDY3X25ldGFwaSAgICAgICAgICAgIGh0dHA6Ly93d3cuY3ZlZGV0YWlscy4uLi4KICAgICAgICBMVkEuZGVtby5jb20gICAgICAgICAgV2luZG93cyBTZXJ2ZXIgMjAwMyAgICAgU2VydmljZSBQYWNrIDIgNC84LzIwMTUgMTo0NDo0NiBQTSAgZXhwbG9pdC93aW5kb3dzL3NtYi9tczEwXzA2MV9zcG9vbHNzICAgICAgICAgICBodHRwOi8vd3d3LmN2ZWRldGFpbHMuLi4uCiAgICAgICAgYXNzZXNzLXhwcHJvLmRlbW8uY29tIFdpbmRvd3MgWFAgUHJvZmVzc2lvbmFsIFNlcnZpY2UgUGFjayAzIDQvMS8yMDE0IDExOjExOjU0IEFNIGV4cGxvaXQvd2luZG93cy9zbWIvbXMwOF8wNjdfbmV0YXBpICAgICAgICAgICAgaHR0cDovL3d3dy5jdmVkZXRhaWxzLi4uLgogICAgICAgIGFzc2Vzcy14cHByby5kZW1vLmNvbSBXaW5kb3dzIFhQIFByb2Zlc3Npb25hbCBTZXJ2aWNlIFBhY2sgMyA0LzEvMjAxNCAxMToxMTo1NCBBTSBleHBsb2l0L3dpbmRvd3Mvc21iL21zMTBfMDYxX3Nwb29sc3MgICAgICAgICAgIGh0dHA6Ly93d3cuY3ZlZGV0YWlscy4uLi4KICAgICAgICBIVkEuZGVtby5jb20gICAgICAgICAgV2luZG93cyBTZXJ2ZXIgMjAwMyAgICAgU2VydmljZSBQYWNrIDIgMTEvNS8yMDEzIDk6MTY6MzEgUE0gZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA3XzAyOV9tc2Ruc196b25lbmFtZSBodHRwOi8vd3d3LmN2ZWRldGFpbHMuLi4uCiAgICAgICAgSFZBLmRlbW8uY29tICAgICAgICAgIFdpbmRvd3MgU2VydmVyIDIwMDMgICAgIFNlcnZpY2UgUGFjayAyIDExLzUvMjAxMyA5OjE2OjMxIFBNIGV4cGxvaXQvd2luZG93cy9zbWIvbXMwOF8wNjdfbmV0YXBpICAgICAgICAgICAgaHR0cDovL3d3dy5jdmVkZXRhaWxzLi4uLgogICAgICAgIEhWQS5kZW1vLmNvbSAgICAgICAgICBXaW5kb3dzIFNlcnZlciAyMDAzICAgICBTZXJ2aWNlIFBhY2sgMiAxMS81LzIwMTMgOToxNjozMSBQTSBleHBsb2l0L3dpbmRvd3Mvc21iL21zMTBfMDYxX3Nwb29sc3MgICAgICAgICAgIGh0dHA6Ly93d3cuY3ZlZGV0YWlscy4uLi4KICAgICAgICBEQjEuZGVtby5jb20gICAgICAgICAgV2luZG93cyBTZXJ2ZXIgMjAwMyAgICAgU2VydmljZSBQYWNrIDIgMy8yMi8yMDEyIDU6MDU6MzQgUE0gZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA3XzAyOV9tc2Ruc196b25lbmFtZSBodHRwOi8vd3d3LmN2ZWRldGFpbHMuLi4uCiAgICAgICAgREIxLmRlbW8uY29tICAgICAgICAgIFdpbmRvd3MgU2VydmVyIDIwMDMgICAgIFNlcnZpY2UgUGFjayAyIDMvMjIvMjAxMiA1OjA1OjM0IFBNIGV4cGxvaXQvd2luZG93cy9zbWIvbXMwOF8wNjdfbmV0YXBpICAgICAgICAgICAgaHR0cDovL3d3dy5jdmVkZXRhaWxzLi4uLgogICAgICAgIERCMS5kZW1vLmNvbSAgICAgICAgICBXaW5kb3dzIFNlcnZlciAyMDAzICAgICBTZXJ2aWNlIFBhY2sgMiAzLzIyLzIwMTIgNTowNTozNCBQTSBleHBsb2l0L3dpbmRvd3Mvc21iL21zMTBfMDYxX3Nwb29sc3MgICAgICAgICAgIGh0dHA6Ly93d3cuY3ZlZGV0YWlscy4uLi4gICAgICAgICAgICAgICAgICAgICAKCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1FeHBsb2l0YWJsZVN5c3RlbSB8IEV4cG9ydC1Dc3YgYzpcdGVtcFxvdXRwdXQuY3N2IC1Ob1R5cGVJbmZvcm1hdGlvbgoKICAgICAgICBIb3cgdG8gd3JpdGUgdGhlIG91dHB1dCB0byBhIGNzdiBmaWxlLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LUV4cGxvaXRhYmxlU3lzdGVtIC1Eb21haW4gdGVzdGxhYi5sb2NhbCAtUGluZwoKICAgICAgICBSZXR1cm4gYSBzZXQgb2YgbGl2ZSBob3N0cyBmcm9tIHRoZSB0ZXN0bGFiLmxvY2FsIGRvbWFpbgoKICAgICAuTElOSwogICAgICAgCiAgICAgICBodHRwOi8vd3d3Lm5ldHNwaS5jb20KICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9udWxsYmluZC9Qb3dlcnNoZWxsZXJ5L2Jsb2IvbWFzdGVyL1N0YWJsZS1pc2gvQURTL0dldC1FeHBsb2l0YWJsZVN5c3RlbXMucHNtMQogICAgICAgCiAgICAgLk5PVEVTCiAgICAgICAKICAgICAgIEF1dGhvcjogIFNjb3R0IFN1dGhlcmxhbmQgLSAyMDE1LCBOZXRTUEkKICAgICAgICAgICAgICAgIE1vZGlmaWNhdGlvbnMgdG8gaW50ZWdyYXRlIGludG8gUG93ZXJWaWV3IGJ5IEBoYXJtajB5CiAgICAgICBWZXJzaW9uOiBHZXQtRXhwbG9pdGFibGVTeXN0ZW0ucHNtMSB2MS4xCiAgICAgICBDb21tZW50czogVGhlIHRlY2huaXF1ZSB1c2VkIHRvIHF1ZXJ5IExEQVAgd2FzIGJhc2VkIG9uIHRoZSAiR2V0LUF1ZGl0RFNDb21wdXRlckFjY291bnQiIAogICAgICAgZnVuY3Rpb24gZm91bmQgaW4gQ2Fyb2xzIFBlcmV6J3MgUG9zaFNlYy1Nb2QgcHJvamVjdC4gIFRoZSBnZW5lcmFsIGlkZWEgaXMgYmFzZWQgb2ZmIG9mICAKICAgICAgIFdpbGwgU2Nocm9lZGVyJ3MgIkludm9rZS1GaW5kVnVsblN5c3RlbXMiIGZ1bmN0aW9uIGZyb20gdGhlIFBvd2VyVmlldyB0b29sa2l0LgojPgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlck5hbWUgPSAnKicsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNQTiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkT3BlcmF0aW5nU3lzdGVtID0gJyonLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2aWNlUGFjayA9ICcqJywKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRmlsdGVyLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRQaW5nLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFVuY29uc3RyYWluZWQsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICBXcml0ZS1WZXJib3NlICJbKl0gR3JhYmJpbmcgY29tcHV0ZXIgYWNjb3VudHMgZnJvbSBBY3RpdmUgRGlyZWN0b3J5Li4uIgoKICAgICMgQ3JlYXRlIGRhdGEgdGFibGUgZm9yIGhvc3RuYW1lcywgb3MsIGFuZCBzZXJ2aWNlIHBhY2tzIGZyb20gTERBUAogICAgJFRhYmxlQWRzQ29tcHV0ZXJzID0gTmV3LU9iamVjdCBTeXN0ZW0uRGF0YS5EYXRhVGFibGUgCiAgICAkTnVsbCA9ICRUYWJsZUFkc0NvbXB1dGVycy5Db2x1bW5zLkFkZCgnSG9zdG5hbWUnKSAgICAgICAKICAgICROdWxsID0gJFRhYmxlQWRzQ29tcHV0ZXJzLkNvbHVtbnMuQWRkKCdPcGVyYXRpbmdTeXN0ZW0nKQogICAgJE51bGwgPSAkVGFibGVBZHNDb21wdXRlcnMuQ29sdW1ucy5BZGQoJ1NlcnZpY2VQYWNrJykKICAgICROdWxsID0gJFRhYmxlQWRzQ29tcHV0ZXJzLkNvbHVtbnMuQWRkKCdMYXN0TG9nb24nKQoKICAgIEdldC1OZXRDb21wdXRlciAtRnVsbERhdGEgQFBTQm91bmRQYXJhbWV0ZXJzIHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICAkQ3VycmVudEhvc3QgPSAkXy5kbnNob3N0bmFtZQogICAgICAgICRDdXJyZW50T3MgPSAkXy5vcGVyYXRpbmdzeXN0ZW0KICAgICAgICAkQ3VycmVudFNwID0gJF8ub3BlcmF0aW5nc3lzdGVtc2VydmljZXBhY2sKICAgICAgICAkQ3VycmVudExhc3QgPSAkXy5sYXN0bG9nb24KICAgICAgICAkQ3VycmVudFVhYyA9ICRfLnVzZXJhY2NvdW50Y29udHJvbAoKICAgICAgICAkQ3VycmVudFVhY0JpbiA9IFtjb252ZXJ0XTo6VG9TdHJpbmcoJF8udXNlcmFjY291bnRjb250cm9sLDIpCgogICAgICAgICMgQ2hlY2sgdGhlIDJuZCB0byBsYXN0IHZhbHVlIHRvIGRldGVybWluZSBpZiBpdHMgZGlzYWJsZWQKICAgICAgICAkRGlzYWJsZU9mZnNldCA9ICRDdXJyZW50VWFjQmluLkxlbmd0aCAtIDIKICAgICAgICAkQ3VycmVudERpc2FibGVkID0gJEN1cnJlbnRVYWNCaW4uU3Vic3RyaW5nKCREaXNhYmxlT2Zmc2V0LDEpCgogICAgICAgICMgQWRkIGNvbXB1dGVyIHRvIGxpc3QgaWYgaXQncyBlbmFibGVkCiAgICAgICAgaWYgKCRDdXJyZW50RGlzYWJsZWQgIC1lcSAwKSB7CiAgICAgICAgICAgICMgQWRkIGRvbWFpbiBjb21wdXRlciB0byBkYXRhIHRhYmxlCiAgICAgICAgICAgICROdWxsID0gJFRhYmxlQWRzQ29tcHV0ZXJzLlJvd3MuQWRkKCRDdXJyZW50SG9zdCwkQ3VycmVudE9TLCRDdXJyZW50U1AsJEN1cnJlbnRMYXN0KQogICAgICAgIH0KICAgIH0KCiAgICAjIFN0YXR1cyB1c2VyICAgICAgICAKICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBMb2FkaW5nIGV4cGxvaXQgbGlzdCBmb3IgY3JpdGljYWwgbWlzc2luZyBwYXRjaGVzLi4uIgoKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgIyBTZXR1cCBkYXRhIHRhYmxlIGZvciBsaXN0IG9mIG1zZiBleHBsb2l0cwogICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgIyBDcmVhdGUgZGF0YSB0YWJsZSBmb3IgbGlzdCBvZiBwYXRjaGVzIGxldmVscyB3aXRoIGEgTVNGIGV4cGxvaXQKICAgICRUYWJsZUV4cGxvaXRzID0gTmV3LU9iamVjdCBTeXN0ZW0uRGF0YS5EYXRhVGFibGUgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLkNvbHVtbnMuQWRkKCdPcGVyYXRpbmdTeXN0ZW0nKSAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuQ29sdW1ucy5BZGQoJ1NlcnZpY2VQYWNrJykKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuQ29sdW1ucy5BZGQoJ01zZk1vZHVsZScpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuQ29sdW1ucy5BZGQoJ0NWRScpCiAgICAKICAgICMgQWRkIGV4cGxvaXRzIHRvIGRhdGEgdGFibGUKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgNyIsIiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMxMF8wNjFfc3Bvb2xzcyIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMTAtMjcyOSIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDAiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczAzXzAyNl9kY29tIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwMy0wMzUyLyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDAiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA1XzAxN19tc21xIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNS0wMDU5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIlNlcnZlciBQYWNrIDEiLCJleHBsb2l0L3dpbmRvd3MvaWlzL21zMDNfMDA3X250ZGxsX3dlYmRhdiIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDMtMDEwOSIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDAiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL3dpbnMvbXMwNF8wNDVfd2lucyIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDQtMTA4MC8iKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAwIiwiU2VydmljZSBQYWNrIDIiLCJleHBsb2l0L3dpbmRvd3MvZGNlcnBjL21zMDNfMDI2X2Rjb20iLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDAzLTAzNTIvIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIlNlcnZpY2UgUGFjayAyIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA1XzAxN19tc21xIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNS0wMDU5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIlNlcnZpY2UgUGFjayAyIiwiZXhwbG9pdC93aW5kb3dzL2lpcy9tczAzXzAwN19udGRsbF93ZWJkYXYiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDAzLTAxMDkiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAwIiwiU2VydmljZSBQYWNrIDIiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDRfMDExX2xzYXNzIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwMy0wNTMzLyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDAiLCJTZXJ2aWNlIFBhY2sgMiIsImV4cGxvaXQvd2luZG93cy93aW5zL21zMDRfMDQ1X3dpbnMiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA0LTEwODAvIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIlNlcnZpY2UgUGFjayAzIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczAzXzAyNl9kY29tIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwMy0wMzUyLyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDAiLCJTZXJ2aWNlIFBhY2sgMyIsImV4cGxvaXQvd2luZG93cy9kY2VycGMvbXMwNV8wMTdfbXNtcSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDUtMDA1OSIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDAiLCJTZXJ2aWNlIFBhY2sgMyIsImV4cGxvaXQvd2luZG93cy9paXMvbXMwM18wMDdfbnRkbGxfd2ViZGF2IiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwMy0wMTA5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIlNlcnZpY2UgUGFjayAzIiwiZXhwbG9pdC93aW5kb3dzL3dpbnMvbXMwNF8wNDVfd2lucyIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDQtMTA4MC8iKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAwIiwiU2VydmljZSBQYWNrIDQiLCJleHBsb2l0L3dpbmRvd3MvZGNlcnBjL21zMDNfMDI2X2Rjb20iLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDAzLTAzNTIvIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIlNlcnZpY2UgUGFjayA0IiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA1XzAxN19tc21xIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNS0wMDU5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIlNlcnZpY2UgUGFjayA0IiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA3XzAyOV9tc2Ruc196b25lbmFtZSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDctMTc0OCIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDAiLCJTZXJ2aWNlIFBhY2sgNCIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwNF8wMTFfbHNhc3MiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDAzLTA1MzMvIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIlNlcnZpY2UgUGFjayA0IiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA2XzA0MF9uZXRhcGkiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA2LTM0MzkiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAwIiwiU2VydmljZSBQYWNrIDQiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDZfMDY2X253YXBpIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNi00Njg4IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIlNlcnZpY2UgUGFjayA0IiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA2XzA3MF93a3NzdmMiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA2LTQ2OTEiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAwIiwiU2VydmljZSBQYWNrIDQiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDhfMDY3X25ldGFwaSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDgtNDI1MCIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDAiLCJTZXJ2aWNlIFBhY2sgNCIsImV4cGxvaXQvd2luZG93cy93aW5zL21zMDRfMDQ1X3dpbnMiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA0LTEwODAvIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIiIsImV4cGxvaXQvd2luZG93cy9kY2VycGMvbXMwM18wMjZfZGNvbSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDMtMDM1Mi8iKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAwIiwiIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA1XzAxN19tc21xIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNS0wMDU5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIiIsImV4cGxvaXQvd2luZG93cy9paXMvbXMwM18wMDdfbnRkbGxfd2ViZGF2IiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwMy0wMTA5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwNV8wMzlfcG5wIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNS0xOTgzIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMCIsIiIsImV4cGxvaXQvd2luZG93cy93aW5zL21zMDRfMDQ1X3dpbnMiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA0LTEwODAvIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMyIsIlNlcnZlciBQYWNrIDEiLCJleHBsb2l0L3dpbmRvd3MvZGNlcnBjL21zMDdfMDI5X21zZG5zX3pvbmVuYW1lIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNy0xNzQ4IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMyIsIlNlcnZlciBQYWNrIDEiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDZfMDQwX25ldGFwaSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDYtMzQzOSIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDMiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA2XzA2Nl9ud2FwaSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDYtNDY4OCIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDMiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA4XzA2N19uZXRhcGkiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA4LTQyNTAiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAzIiwiU2VydmVyIFBhY2sgMSIsImV4cGxvaXQvd2luZG93cy93aW5zL21zMDRfMDQ1X3dpbnMiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA0LTEwODAvIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMyIsIlNlcnZpY2UgUGFjayAyIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA3XzAyOV9tc2Ruc196b25lbmFtZSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDctMTc0OCIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDMiLCJTZXJ2aWNlIFBhY2sgMiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwOF8wNjdfbmV0YXBpIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwOC00MjUwIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMyIsIlNlcnZpY2UgUGFjayAyIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczEwXzA2MV9zcG9vbHNzIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAxMC0yNzI5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwMyIsIiIsImV4cGxvaXQvd2luZG93cy9kY2VycGMvbXMwM18wMjZfZGNvbSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDMtMDM1Mi8iKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAzIiwiIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA2XzA0MF9uZXRhcGkiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA2LTM0MzkiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAzIiwiIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA4XzA2N19uZXRhcGkiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA4LTQyNTAiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAzIiwiIiwiZXhwbG9pdC93aW5kb3dzL3dpbnMvbXMwNF8wNDVfd2lucyIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDQtMTA4MC8iKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDAzIFIyIiwiIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczAzXzAyNl9kY29tIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwMy0wMzUyLyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDMgUjIiLCIiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDRfMDExX2xzYXNzIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwMy0wNTMzLyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDMgUjIiLCIiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDZfMDQwX25ldGFwaSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDYtMzQzOSIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDMgUjIiLCIiLCJleHBsb2l0L3dpbmRvd3Mvd2lucy9tczA0XzA0NV93aW5zIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNC0xMDgwLyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDgiLCJTZXJ2aWNlIFBhY2sgMiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwOV8wNTBfc21iMl9uZWdvdGlhdGVfZnVuY19pbmRleCIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDktMzEwMyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDgiLCJTZXJ2aWNlIFBhY2sgMiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMxMF8wNjFfc3Bvb2xzcyIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMTAtMjcyOSIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDgiLCIiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDhfMDY3X25ldGFwaSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDgtNDI1MCIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgU2VydmVyIDIwMDgiLCIiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDlfMDUwX3NtYjJfbmVnb3RpYXRlX2Z1bmNfaW5kZXgiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA5LTMxMDMiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFNlcnZlciAyMDA4IiwiIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczEwXzA2MV9zcG9vbHNzIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAxMC0yNzI5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBTZXJ2ZXIgMjAwOCBSMiIsIiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMxMF8wNjFfc3Bvb2xzcyIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMTAtMjcyOSIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgVmlzdGEiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA4XzA2N19uZXRhcGkiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA4LTQyNTAiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFZpc3RhIiwiU2VydmVyIFBhY2sgMSIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwOV8wNTBfc21iMl9uZWdvdGlhdGVfZnVuY19pbmRleCIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDktMzEwMyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgVmlzdGEiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczEwXzA2MV9zcG9vbHNzIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAxMC0yNzI5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBWaXN0YSIsIlNlcnZpY2UgUGFjayAyIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA5XzA1MF9zbWIyX25lZ290aWF0ZV9mdW5jX2luZGV4IiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwOS0zMTAzIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBWaXN0YSIsIlNlcnZpY2UgUGFjayAyIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczEwXzA2MV9zcG9vbHNzIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAxMC0yNzI5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBWaXN0YSIsIiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwOF8wNjdfbmV0YXBpIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwOC00MjUwIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBWaXN0YSIsIiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwOV8wNTBfc21iMl9uZWdvdGlhdGVfZnVuY19pbmRleCIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDktMzEwMyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgWFAiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczAzXzAyNl9kY29tIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwMy0wMzUyLyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgWFAiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA1XzAxN19tc21xIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNS0wMDU5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBYUCIsIlNlcnZlciBQYWNrIDEiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDRfMDExX2xzYXNzIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwMy0wNTMzLyIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgWFAiLCJTZXJ2ZXIgUGFjayAxIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA1XzAzOV9wbnAiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA1LTE5ODMiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFhQIiwiU2VydmVyIFBhY2sgMSIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwNl8wNDBfbmV0YXBpIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNi0zNDM5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBYUCIsIlNlcnZpY2UgUGFjayAyIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA1XzAxN19tc21xIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNS0wMDU5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBYUCIsIlNlcnZpY2UgUGFjayAyIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA2XzA0MF9uZXRhcGkiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA2LTM0MzkiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFhQIiwiU2VydmljZSBQYWNrIDIiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDZfMDY2X253YXBpIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNi00Njg4IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBYUCIsIlNlcnZpY2UgUGFjayAyIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczA2XzA3MF93a3NzdmMiLCJodHRwOi8vd3d3LmN2ZWRldGFpbHMuY29tL2N2ZS8yMDA2LTQ2OTEiKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFhQIiwiU2VydmljZSBQYWNrIDIiLCJleHBsb2l0L3dpbmRvd3Mvc21iL21zMDhfMDY3X25ldGFwaSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDgtNDI1MCIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgWFAiLCJTZXJ2aWNlIFBhY2sgMiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMxMF8wNjFfc3Bvb2xzcyIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMTAtMjcyOSIpICAKICAgICROdWxsID0gJFRhYmxlRXhwbG9pdHMuUm93cy5BZGQoIldpbmRvd3MgWFAiLCJTZXJ2aWNlIFBhY2sgMyIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwOF8wNjdfbmV0YXBpIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwOC00MjUwIikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBYUCIsIlNlcnZpY2UgUGFjayAzIiwiZXhwbG9pdC93aW5kb3dzL3NtYi9tczEwXzA2MV9zcG9vbHNzIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAxMC0yNzI5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBYUCIsIiIsImV4cGxvaXQvd2luZG93cy9kY2VycGMvbXMwM18wMjZfZGNvbSIsImh0dHA6Ly93d3cuY3ZlZGV0YWlscy5jb20vY3ZlLzIwMDMtMDM1Mi8iKSAgCiAgICAkTnVsbCA9ICRUYWJsZUV4cGxvaXRzLlJvd3MuQWRkKCJXaW5kb3dzIFhQIiwiIiwiZXhwbG9pdC93aW5kb3dzL2RjZXJwYy9tczA1XzAxN19tc21xIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNS0wMDU5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBYUCIsIiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwNl8wNDBfbmV0YXBpIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwNi0zNDM5IikgIAogICAgJE51bGwgPSAkVGFibGVFeHBsb2l0cy5Sb3dzLkFkZCgiV2luZG93cyBYUCIsIiIsImV4cGxvaXQvd2luZG93cy9zbWIvbXMwOF8wNjdfbmV0YXBpIiwiaHR0cDovL3d3dy5jdmVkZXRhaWxzLmNvbS9jdmUvMjAwOC00MjUwIikgIAoKICAgICMgU3RhdHVzIHVzZXIgICAgICAgIAogICAgV3JpdGUtVmVyYm9zZSAiWypdIENoZWNraW5nIGNvbXB1dGVycyBmb3IgdnVsbmVyYWJsZSBPUyBhbmQgU1AgbGV2ZWxzLi4uIgoKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgIyBTZXR1cCBkYXRhIHRhYmxlIHRvIHN0b3JlIHZ1bG5lcmFibGUgc3lzdGVtcwogICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgIyBDcmVhdGUgZGF0YSB0YWJsZSB0byBob3VzZSB2dWxuZXJhYmxlIHNlcnZlciBsaXN0CiAgICAkVGFibGVWdWxuQ29tcHV0ZXJzID0gTmV3LU9iamVjdCBTeXN0ZW0uRGF0YS5EYXRhVGFibGUgCiAgICAkTnVsbCA9ICRUYWJsZVZ1bG5Db21wdXRlcnMuQ29sdW1ucy5BZGQoJ0NvbXB1dGVyTmFtZScpCiAgICAkTnVsbCA9ICRUYWJsZVZ1bG5Db21wdXRlcnMuQ29sdW1ucy5BZGQoJ09wZXJhdGluZ1N5c3RlbScpCiAgICAkTnVsbCA9ICRUYWJsZVZ1bG5Db21wdXRlcnMuQ29sdW1ucy5BZGQoJ1NlcnZpY2VQYWNrJykKICAgICROdWxsID0gJFRhYmxlVnVsbkNvbXB1dGVycy5Db2x1bW5zLkFkZCgnTGFzdExvZ29uJykKICAgICROdWxsID0gJFRhYmxlVnVsbkNvbXB1dGVycy5Db2x1bW5zLkFkZCgnTXNmTW9kdWxlJykKICAgICROdWxsID0gJFRhYmxlVnVsbkNvbXB1dGVycy5Db2x1bW5zLkFkZCgnQ1ZFJykKCiAgICAjIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIGV4cGxvaXQKICAgICRUYWJsZUV4cGxvaXRzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgIAogICAgICAgICRFeHBsb2l0T1MgPSAkXy5PcGVyYXRpbmdTeXN0ZW0KICAgICAgICAkRXhwbG9pdFNQID0gJF8uU2VydmljZVBhY2sKICAgICAgICAkRXhwbG9pdE1zZiA9ICRfLk1zZk1vZHVsZQogICAgICAgICRFeHBsb2l0Q1ZFID0gJF8uQ1ZFCgogICAgICAgICMgSXRlcmF0ZSB0aHJvdWdoIGVhY2ggQURTIGNvbXB1dGVyCiAgICAgICAgJFRhYmxlQWRzQ29tcHV0ZXJzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAKICAgICAgICAgICAgJEFkc0hvc3RuYW1lID0gJF8uSG9zdG5hbWUKICAgICAgICAgICAgJEFkc09TID0gJF8uT3BlcmF0aW5nU3lzdGVtCiAgICAgICAgICAgICRBZHNTUCA9ICRfLlNlcnZpY2VQYWNrICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgJEFkc0xhc3QgPSAkXy5MYXN0TG9nb24KICAgICAgICAgICAgCiAgICAgICAgICAgICMgQWRkIGV4cGxvaXRhYmxlIHN5c3RlbXMgdG8gdnVsIGNvbXB1dGVycyBkYXRhIHRhYmxlCiAgICAgICAgICAgIGlmICgkQWRzT1MgLWxpa2UgIiRFeHBsb2l0T1MqIiAtYW5kICRBZHNTUCAtbGlrZSAiJEV4cGxvaXRTUCIgKSB7ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgQWRkIGRvbWFpbiBjb21wdXRlciB0byBkYXRhIHRhYmxlICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICROdWxsID0gJFRhYmxlVnVsbkNvbXB1dGVycy5Sb3dzLkFkZCgkQWRzSG9zdG5hbWUsJEFkc09TLCRBZHNTUCwkQWRzTGFzdCwkRXhwbG9pdE1zZiwkRXhwbG9pdENWRSkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIAogICAgIyBEaXNwbGF5IHJlc3VsdHMKICAgICRWdWxuQ29tcHV0ZXIgPSAkVGFibGVWdWxuQ29tcHV0ZXJzIHwgU2VsZWN0LU9iamVjdCBDb21wdXRlck5hbWUgLVVuaXF1ZSB8IE1lYXN1cmUtT2JqZWN0CiAgICAkVnVsbkNvbXB1dGVyQ291bnQgPSAkVnVsbkNvbXB1dGVyLkNvdW50CgogICAgaWYgKCRWdWxuQ29tcHV0ZXIuQ291bnQgLWd0IDApIHsKICAgICAgICAjIFJldHVybiB2dWxuZXJhYmxlIHNlcnZlciBsaXN0IG9yZGVyIHdpdGggc29tZSBoYWNrIGRhdGUgY2FzdGluZwogICAgICAgIFdyaXRlLVZlcmJvc2UgIlsrXSBGb3VuZCAkVnVsbkNvbXB1dGVyQ291bnQgcG90ZW50aWFsbHkgdnVsbmVyYWJsZSBzeXN0ZW1zISIKICAgICAgICAkVGFibGVWdWxuQ29tcHV0ZXJzIHwgU29ydC1PYmplY3QgeyAkXy5sYXN0bG9nb24gLWFzIFtkYXRldGltZV19IC1EZXNjZW5kaW5nCiAgICB9CiAgICBlbHNlIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJbLV0gTm8gdnVsbmVyYWJsZSBzeXN0ZW1zIHdlcmUgZm91bmQuIgogICAgfQp9CgoKZnVuY3Rpb24gSW52b2tlLUVudW1lcmF0ZUxvY2FsQWRtaW4gewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFRoaXMgZnVuY3Rpb24gcXVlcmllcyB0aGUgZG9tYWluIGZvciBhbGwgYWN0aXZlIG1hY2hpbmVzIHdpdGgKICAgICAgICBHZXQtTmV0Q29tcHV0ZXIsIHRoZW4gZm9yIGVhY2ggc2VydmVyIGl0IHF1ZXJpZXMgdGhlIGxvY2FsCiAgICAgICAgQWRtaW5pc3RyYXRvcnMgd2l0aCBHZXQtTmV0TG9jYWxHcm91cC4KCiAgICAgICAgQXV0aG9yOiBAaGFybWoweQogICAgICAgIExpY2Vuc2U6IEJTRCAzLUNsYXVzZQoKICAgIC5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgogICAgICAgIEhvc3QgYXJyYXkgdG8gZW51bWVyYXRlLCBwYXNzYWJsZSBvbiB0aGUgcGlwZWxpbmUuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckZpbGUKCiAgICAgICAgRmlsZSBvZiBob3N0bmFtZXMvSVBzIHRvIHNlYXJjaC4KCiAgICAuUEFSQU1FVEVSIENvbXB1dGVyRmlsdGVyCgogICAgICAgIEhvc3QgZmlsdGVyIG5hbWUgdG8gcXVlcnkgQUQgZm9yLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgogICAgLlBBUkFNRVRFUiBDb21wdXRlckFEU3BhdGgKCiAgICAgICAgVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoIGZvciBob3N0cywgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgogICAgICAgIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCiAgICAuUEFSQU1FVEVSIE5vUGluZwoKICAgICAgICBTd2l0Y2guIERvbid0IHBpbmcgZWFjaCBob3N0IHRvIGVuc3VyZSBpdCdzIHVwIGJlZm9yZSBlbnVtZXJhdGluZy4KCiAgICAuUEFSQU1FVEVSIERlbGF5CgogICAgICAgIERlbGF5IGJldHdlZW4gZW51bWVyYXRpbmcgaG9zdHMsIGRlZmF1bHRzIHRvIDAKCiAgICAuUEFSQU1FVEVSIEppdHRlcgoKICAgICAgICBKaXR0ZXIgZm9yIHRoZSBob3N0IGRlbGF5LCBkZWZhdWx0cyB0byArLy0gMC4zCgogICAgLlBBUkFNRVRFUiBPdXRGaWxlCgogICAgICAgIE91dHB1dCByZXN1bHRzIHRvIGEgc3BlY2lmaWVkIGNzdiBvdXRwdXQgZmlsZS4KCiAgICAuUEFSQU1FVEVSIE5vQ2xvYmJlcgoKICAgICAgICBTd2l0Y2guIERvbid0IG92ZXJ3cml0ZSBhbnkgZXhpc3Rpbmcgb3V0cHV0IGZpbGUuCgogICAgLlBBUkFNRVRFUiBUcnVzdEdyb3VwcwoKICAgICAgICBTd2l0Y2guIE9ubHkgcmV0dXJuIHJlc3VsdHMgdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhlIGxvY2FsIG1hY2hpbmUKICAgICAgICBvciB0aGUgbWFjaGluZSdzIGRvbWFpbi4gT2xkIEludm9rZS1FbnVtZXJhdGVMb2NhbFRydXN0R3JvdXAKICAgICAgICBmdW5jdGlvbmFsaXR5LgogICAgCiAgICAuUEFSQU1FVEVSIERvbWFpbk9ubHkKCiAgICAgICAgU3dpdGNoLiBPbmx5IHJldHVybiBkb21haW4gKG5vbi1sb2NhbCkgcmVzdWx0cyAgCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgRG9tYWluIHRvIHF1ZXJ5IGZvciBtYWNoaW5lcywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgogICAgCiAgICAuUEFSQU1FVEVSIERvbWFpbkNvbnRyb2xsZXIKCiAgICAgICAgRG9tYWluIGNvbnRyb2xsZXIgdG8gcmVmbGVjdCBMREFQIHF1ZXJpZXMgdGhyb3VnaC4KCiAgICAuUEFSQU1FVEVSIFNlYXJjaEZvcmVzdAoKICAgICAgICBTd2l0Y2guIFNlYXJjaCBhbGwgZG9tYWlucyBpbiB0aGUgZm9yZXN0IGZvciB0YXJnZXQgdXNlcnMgaW5zdGVhZCBvZiBqdXN0CiAgICAgICAgYSBzaW5nbGUgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgQVBJCgogICAgICAgIFN3aXRjaC4gVXNlIEFQSSBjYWxscyBpbnN0ZWFkIG9mIHRoZSBXaW5OVCBzZXJ2aWNlIHByb3ZpZGVyLiBMZXNzIGluZm9ybWF0aW9uLAogICAgICAgIGJ1dCB0aGUgcmVzdWx0cyBhcmUgZmFzdGVyLgoKICAgIC5QQVJBTUVURVIgVGhyZWFkcwoKICAgICAgICBUaGUgbWF4aW11bSBjb25jdXJyZW50IHRocmVhZHMgdG8gZXhlY3V0ZS4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1FbnVtZXJhdGVMb2NhbEFkbWluCgogICAgICAgIEVudW1lcmF0ZXMgdGhlIG1lbWJlcnMgb2YgbG9jYWwgYWRtaW5pc3RyYXRvcnMgZm9yIGFsbCBtYWNoaW5lcwogICAgICAgIGluIHRoZSBjdXJyZW50IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1FbnVtZXJhdGVMb2NhbEFkbWluIC1UaHJlYWRzIDEwCgogICAgICAgIFRocmVhZGVkIGxvY2FsIGFkbWluIGVudW1lcmF0aW9uLCByZXBsYWNlcyBJbnZva2UtRW51bWVyYXRlTG9jYWxBZG1pblRocmVhZGVkCgogICAgLkxJTksKCiAgICAgICAgaHR0cDovL2Jsb2cuaGFybWoweS5uZXQvCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MCxWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0cycpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lLAoKICAgICAgICBbVmFsaWRhdGVTY3JpcHQoe1Rlc3QtUGF0aCAtUGF0aCAkXyB9KV0KICAgICAgICBbQWxpYXMoJ0hvc3RMaXN0JyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJGaWxlLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckZpbHRlciwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJBRFNwYXRoLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICROb1BpbmcsCgogICAgICAgIFtVSW50MzJdCiAgICAgICAgJERlbGF5ID0gMCwKCiAgICAgICAgW0RvdWJsZV0KICAgICAgICAkSml0dGVyID0gLjMsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE91dEZpbGUsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJE5vQ2xvYmJlciwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVHJ1c3RHcm91cHMsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJERvbWFpbk9ubHksCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU2VhcmNoRm9yZXN0LAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFRocmVhZHMsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEFQSQogICAgKQoKICAgIGJlZ2luIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZWJ1ZyddKSB7CiAgICAgICAgICAgICREZWJ1Z1ByZWZlcmVuY2UgPSAnQ29udGludWUnCiAgICAgICAgfQoKICAgICAgICAjIHJhbmRvbSBvYmplY3QgZm9yIGRlbGF5CiAgICAgICAgJFJhbmRObyA9IE5ldy1PYmplY3QgU3lzdGVtLlJhbmRvbQoKICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gUnVubmluZyBJbnZva2UtRW51bWVyYXRlTG9jYWxBZG1pbiB3aXRoIGRlbGF5IG9mICREZWxheSIKCiAgICAgICAgIyBpZiB3ZSdyZSB1c2luZyBhIGhvc3QgbGlzdCwgcmVhZCB0aGUgdGFyZ2V0cyBpbiBhbmQgYWRkIHRoZW0gdG8gdGhlIHRhcmdldCBsaXN0CiAgICAgICAgaWYoJENvbXB1dGVyRmlsZSkgewogICAgICAgICAgICAkQ29tcHV0ZXJOYW1lID0gR2V0LUNvbnRlbnQgLVBhdGggJENvbXB1dGVyRmlsZQogICAgICAgIH0KCiAgICAgICAgaWYoISRDb21wdXRlck5hbWUpIHsgCiAgICAgICAgICAgIFthcnJheV0kQ29tcHV0ZXJOYW1lID0gQCgpCgogICAgICAgICAgICBpZigkRG9tYWluKSB7CiAgICAgICAgICAgICAgICAkVGFyZ2V0RG9tYWlucyA9IEAoJERvbWFpbikKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYoJFNlYXJjaEZvcmVzdCkgewogICAgICAgICAgICAgICAgIyBnZXQgQUxMIHRoZSBkb21haW5zIGluIHRoZSBmb3Jlc3QgdG8gc2VhcmNoCiAgICAgICAgICAgICAgICAkVGFyZ2V0RG9tYWlucyA9IEdldC1OZXRGb3Jlc3REb21haW4gfCBGb3JFYWNoLU9iamVjdCB7ICRfLk5hbWUgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgIyB1c2UgdGhlIGxvY2FsIGRvbWFpbgogICAgICAgICAgICAgICAgJFRhcmdldERvbWFpbnMgPSBAKCAoR2V0LU5ldERvbWFpbikubmFtZSApCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEZvckVhY2ggKCREb21haW4gaW4gJFRhcmdldERvbWFpbnMpIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBRdWVyeWluZyBkb21haW4gJERvbWFpbiBmb3IgaG9zdHMiCiAgICAgICAgICAgICAgICAkQ29tcHV0ZXJOYW1lICs9IEdldC1OZXRDb21wdXRlciAtRmlsdGVyICRDb21wdXRlckZpbHRlciAtQURTcGF0aCAkQ29tcHV0ZXJBRFNwYXRoIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlcgogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAjIHJlbW92ZSBhbnkgbnVsbCB0YXJnZXQgaG9zdHMsIHVuaXF1aWZ5IHRoZSBsaXN0IGFuZCBzaHVmZmxlIGl0CiAgICAgICAgICAgICRDb21wdXRlck5hbWUgPSAkQ29tcHV0ZXJOYW1lIHwgV2hlcmUtT2JqZWN0IHsgJF8gfSB8IFNvcnQtT2JqZWN0IC1VbmlxdWUgfCBTb3J0LU9iamVjdCB7IEdldC1SYW5kb20gfQogICAgICAgICAgICBpZigkKCRDb21wdXRlck5hbWUuQ291bnQpIC1lcSAwKSB7CiAgICAgICAgICAgICAgICB0aHJvdyAiTm8gaG9zdHMgZm91bmQhIgogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAjIGRlbGV0ZSBhbnkgZXhpc3Rpbmcgb3V0cHV0IGZpbGUgaWYgaXQgYWxyZWFkeSBleGlzdHMKICAgICAgICBpZighJE5vQ2xvYmJlcikgewogICAgICAgICAgICBpZiAoJE91dEZpbGUgLWFuZCAoVGVzdC1QYXRoIC1QYXRoICRPdXRGaWxlKSkgeyBSZW1vdmUtSXRlbSAtUGF0aCAkT3V0RmlsZSB9CiAgICAgICAgfQoKICAgICAgICBpZigkVHJ1c3RHcm91cHMpIHsKICAgICAgICAgICAgCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkRldGVybWluaW5nIGRvbWFpbiB0cnVzdCBncm91cHMiCgogICAgICAgICAgICAjIGZpbmQgYWxsIGdyb3VwIG5hbWVzIHRoYXQgaGF2ZSBvbmUgb3IgbW9yZSB1c2VycyBpbiBhbm90aGVyIGRvbWFpbgogICAgICAgICAgICAkVHJ1c3RHcm91cE5hbWVzID0gRmluZC1Gb3JlaWduR3JvdXAgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIHwgRm9yRWFjaC1PYmplY3QgeyAkXy5Hcm91cE5hbWUgfSB8IFNvcnQtT2JqZWN0IC1VbmlxdWUKCiAgICAgICAgICAgICRUcnVzdEdyb3Vwc1NJRHMgPSAkVHJ1c3RHcm91cE5hbWVzIHwgRm9yRWFjaC1PYmplY3QgeyAKICAgICAgICAgICAgICAgICMgaWdub3JlIHRoZSBidWlsdGluIGFkbWluaXN0cmF0b3JzIGdyb3VwIGZvciBhIERDIChTLTEtNS0zMi01NDQpCiAgICAgICAgICAgICAgICAjIFRPRE86IGlnbm9yZSBhbGwgZGVmYXVsdCBidWlsdCBpbiBzaWRzPwogICAgICAgICAgICAgICAgR2V0LU5ldEdyb3VwIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtR3JvdXBOYW1lICRfIC1GdWxsRGF0YSB8IFdoZXJlLU9iamVjdCB7ICRfLm9iamVjdHNpZCAtbm90bWF0Y2ggIlMtMS01LTMyLTU0NCIgfSB8IEZvckVhY2gtT2JqZWN0IHsgJF8ub2JqZWN0c2lkIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBxdWVyeSBmb3IgdGhlIHByaW1hcnkgZG9tYWluIGNvbnRyb2xsZXIgc28gd2UgY2FuIGV4dHJhY3QgdGhlIGRvbWFpbiBTSUQgZm9yIGZpbHRlcmluZwogICAgICAgICAgICAkRG9tYWluU0lEID0gR2V0LURvbWFpblNJRCAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIKICAgICAgICB9CgogICAgICAgICMgc2NyaXB0IGJsb2NrIHRoYXQgZW51bWVyYXRlcyBhIHNlcnZlcgogICAgICAgICRIb3N0RW51bUJsb2NrID0gewogICAgICAgICAgICBwYXJhbSgkQ29tcHV0ZXJOYW1lLCAkUGluZywgJE91dEZpbGUsICREb21haW5TSUQsICRUcnVzdEdyb3Vwc1NJRHMsICRBUEksICREb21haW5Pbmx5KQoKICAgICAgICAgICAgIyBvcHRpb25hbGx5IGNoZWNrIGlmIHRoZSBzZXJ2ZXIgaXMgdXAgZmlyc3QKICAgICAgICAgICAgJFVwID0gJFRydWUKICAgICAgICAgICAgaWYoJFBpbmcpIHsKICAgICAgICAgICAgICAgICRVcCA9IFRlc3QtQ29ubmVjdGlvbiAtQ291bnQgMSAtUXVpZXQgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJFVwKSB7CiAgICAgICAgICAgICAgICAjIGdyYWIgdGhlIHVzZXJzIGZvciB0aGUgbG9jYWwgYWRtaW5zIG9uIHRoaXMgc2VydmVyCiAgICAgICAgICAgICAgICBpZigkQVBJKSB7CiAgICAgICAgICAgICAgICAgICAgJExvY2FsQWRtaW5zID0gR2V0LU5ldExvY2FsR3JvdXAgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1BUEkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRMb2NhbEFkbWlucyA9IEdldC1OZXRMb2NhbEdyb3VwIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICMgaWYgd2UganVzdCB3YW50IHRvIHJldHVybiBjcm9zcy10cnVzdCB1c2VycwogICAgICAgICAgICAgICAgaWYoJERvbWFpblNJRCkgewogICAgICAgICAgICAgICAgICAgICMgZ2V0IHRoZSBsb2NhbCBtYWNoaW5lIFNJRAogICAgICAgICAgICAgICAgICAgICRMb2NhbFNJRCA9ICgkTG9jYWxBZG1pbnMgfCBXaGVyZS1PYmplY3QgeyAkXy5TSUQgLW1hdGNoICcuKi01MDAkJyB9KS5TSUQgLXJlcGxhY2UgIi01MDAkIgogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkxvY2FsU2lkIGZvciAkQ29tcHV0ZXJOYW1lIDogJExvY2FsU0lEIgogICAgICAgICAgICAgICAgICAgICMgZmlsdGVyIG91dCBhY2NvdW50cyB0aGF0IGJlZ2luIHdpdGggdGhlIG1hY2hpbmUgU0lEIGFuZCBkb21haW4gU0lECiAgICAgICAgICAgICAgICAgICAgIyAgIGJ1dCBwcmVzZXJ2ZSBhbnkgZ3JvdXBzIHRoYXQgaGF2ZSB1c2VycyBhY3Jvc3MgYSB0cnVzdCAoJFRydXN0R3JvdXBTSURTKQogICAgICAgICAgICAgICAgICAgICRMb2NhbEFkbWlucyA9ICRMb2NhbEFkbWlucyB8IFdoZXJlLU9iamVjdCB7ICgkVHJ1c3RHcm91cHNTSURzIC1jb250YWlucyAkXy5TSUQpIC1vciAoKC1ub3QgJF8uU0lELnN0YXJ0c1dpdGgoJExvY2FsU0lEKSkgLWFuZCAoLW5vdCAkXy5TSUQuc3RhcnRzV2l0aCgkRG9tYWluU0lEKSkpIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZigkRG9tYWluT25seSkgewogICAgICAgICAgICAgICAgICAgICRMb2NhbEFkbWlucyA9ICRMb2NhbEFkbWlucyB8IFdoZXJlLU9iamVjdCB7JF8uSXNEb21haW59CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYoJExvY2FsQWRtaW5zIC1hbmQgKCRMb2NhbEFkbWlucy5MZW5ndGggLW5lIDApKSB7CiAgICAgICAgICAgICAgICAgICAgIyBvdXRwdXQgdGhlIHJlc3VsdHMgdG8gYSBjc3YgaWYgc3BlY2lmaWVkCiAgICAgICAgICAgICAgICAgICAgaWYoJE91dEZpbGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsQWRtaW5zIHwgRXhwb3J0LVBvd2VyVmlld0NTViAtT3V0RmlsZSAkT3V0RmlsZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBvdGhlcndpc2UgcmV0dXJuIHRoZSB1c2VyIG9iamVjdHMKICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsQWRtaW5zCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWyFdIE5vIHVzZXJzIHJldHVybmVkIGZyb20gJENvbXB1dGVyTmFtZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBwcm9jZXNzIHsKCiAgICAgICAgaWYoJFRocmVhZHMpIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiVXNpbmcgdGhyZWFkaW5nIHdpdGggdGhyZWFkcyA9ICRUaHJlYWRzIgoKICAgICAgICAgICAgIyBpZiB3ZSdyZSB1c2luZyB0aHJlYWRpbmcsIGtpY2sgb2ZmIHRoZSBzY3JpcHQgYmxvY2sgd2l0aCBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbgogICAgICAgICAgICAkU2NyaXB0UGFyYW1zID0gQHsKICAgICAgICAgICAgICAgICdQaW5nJyA9ICQoLW5vdCAkTm9QaW5nKQogICAgICAgICAgICAgICAgJ091dEZpbGUnID0gJE91dEZpbGUKICAgICAgICAgICAgICAgICdEb21haW5TSUQnID0gJERvbWFpblNJRAogICAgICAgICAgICAgICAgJ1RydXN0R3JvdXBzU0lEcycgPSAkVHJ1c3RHcm91cHNTSURzCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMga2ljayBvZmYgdGhlIHRocmVhZGVkIHNjcmlwdCBibG9jayArIGFyZ3VtZW50cwogICAgICAgICAgICBpZigkQVBJKSB7CiAgICAgICAgICAgICAgICAkU2NyaXB0UGFyYW1zWydBUEknXSA9ICRUcnVlCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKCREb21haW5Pbmx5KSB7CiAgICAgICAgICAgICAgICAkU2NyaXB0UGFyYW1zWydEb21haW5Pbmx5J10gPSAkVHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgIAogICAgICAgICAgICBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbiAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1TY3JpcHRQYXJhbWV0ZXJzICRTY3JpcHRQYXJhbXMgLVRocmVhZHMgJFRocmVhZHMKICAgICAgICB9CgogICAgICAgIGVsc2UgewogICAgICAgICAgICBpZigtbm90ICROb1BpbmcgLWFuZCAoJENvbXB1dGVyTmFtZS5jb3VudCAtbmUgMSkpIHsKICAgICAgICAgICAgICAgICMgcGluZyBhbGwgaG9zdHMgaW4gcGFyYWxsZWwKICAgICAgICAgICAgICAgICRQaW5nID0ge3BhcmFtKCRDb21wdXRlck5hbWUpIGlmKFRlc3QtQ29ubmVjdGlvbiAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLUNvdW50IDEgLVF1aWV0IC1FcnJvckFjdGlvbiBTdG9wKXskQ29tcHV0ZXJOYW1lfX0KICAgICAgICAgICAgICAgICRDb21wdXRlck5hbWUgPSBJbnZva2UtVGhyZWFkZWRGdW5jdGlvbiAtTm9JbXBvcnRzIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSAtU2NyaXB0QmxvY2sgJFBpbmcgLVRocmVhZHMgMTAwCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBUb3RhbCBudW1iZXIgb2YgYWN0aXZlIGhvc3RzOiAkKCRDb21wdXRlck5hbWUuY291bnQpIgogICAgICAgICAgICAkQ291bnRlciA9IDAKCiAgICAgICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CgogICAgICAgICAgICAgICAgJENvdW50ZXIgPSAkQ291bnRlciArIDEKCiAgICAgICAgICAgICAgICAjIHNsZWVwIGZvciBvdXIgc2VtaS1yYW5kb21pemVkIGludGVydmFsCiAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkUmFuZE5vLk5leHQoKDEtJEppdHRlcikqJERlbGF5LCAoMSskSml0dGVyKSokRGVsYXkpCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gRW51bWVyYXRpbmcgc2VydmVyICRDb21wdXRlciAoJENvdW50ZXIgb2YgJCgkQ29tcHV0ZXJOYW1lLmNvdW50KSkiCgogICAgICAgICAgICAgICAgJFNjcmlwdEFyZ3MgPSBAKCRDb21wdXRlciwgJEZhbHNlLCAkT3V0RmlsZSwgJERvbWFpblNJRCwgJFRydXN0R3JvdXBzU0lEcywgJEFQSSwgJERvbWFpbk9ubHkpCgogICAgICAgICAgICAgICAgSW52b2tlLUNvbW1hbmQgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1Bcmd1bWVudExpc3QgJFNjcmlwdEFyZ3MKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMKIyBEb21haW4gdHJ1c3QgZnVuY3Rpb25zIGJlbG93LgojCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpmdW5jdGlvbiBHZXQtTmV0RG9tYWluVHJ1c3Qgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFJldHVybiBhbGwgZG9tYWluIHRydXN0cyBmb3IgdGhlIGN1cnJlbnQgZG9tYWluIG9yCiAgICAgICAgYSBzcGVjaWZpZWQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIFRoZSBkb21haW4gd2hvc2UgdHJ1c3RzIHRvIGVudW1lcmF0ZSwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgQURTcGF0aAoKICAgICAgICBUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9EQz10ZXN0bGFiLERDPWxvY2FsIi4KICAgICAgICBVc2VmdWwgZm9yIGdsb2JhbCBjYXRhbG9nIHF1ZXJpZXMgOykKCiAgICAuUEFSQU1FVEVSIEFQSQoKICAgICAgICBVc2UgYW4gQVBJIGNhbGwgKERzRW51bWVyYXRlRG9tYWluVHJ1c3RzKSB0byBlbnVtZXJhdGUgdGhlIHRydXN0cy4KCiAgICAuUEFSQU1FVEVSIExEQVAKCiAgICAgICAgU3dpdGNoLiBVc2UgTERBUCBxdWVyaWVzIHRvIGVudW1lcmF0ZSB0aGUgdHJ1c3RzIGluc3RlYWQgb2YgZGlyZWN0IGRvbWFpbiBjb25uZWN0aW9ucy4gCiAgICAgICAgTW9yZSBsaWtlbHkgdG8gZ2V0IGFyb3VuZCBuZXR3b3JrIHNlZ21lbnRhdGlvbiwgYnV0IG5vdCBhcyBhY2N1cmF0ZS4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXREb21haW5UcnVzdAoKICAgICAgICBSZXR1cm4gZG9tYWluIHRydXN0cyBmb3IgdGhlIGN1cnJlbnQgZG9tYWluIHVzaW5nIGJ1aWx0IGluIC5ORVQgbWV0aG9kcy4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXREb21haW5UcnVzdCAtRG9tYWluICJwcm9kLnRlc3RsYWIubG9jYWwiCgogICAgICAgIFJldHVybiBkb21haW4gdHJ1c3RzIGZvciB0aGUgInByb2QudGVzdGxhYi5sb2NhbCIgZG9tYWluIHVzaW5nIC5ORVQgbWV0aG9kcwoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldERvbWFpblRydXN0IC1MREFQIC1Eb21haW4gInByb2QudGVzdGxhYi5sb2NhbCIgLURvbWFpbkNvbnRyb2xsZXIgIlBSSU1BUlkudGVzdGxhYi5sb2NhbCIKCiAgICAgICAgUmV0dXJuIGRvbWFpbiB0cnVzdHMgZm9yIHRoZSAicHJvZC50ZXN0bGFiLmxvY2FsIiBkb21haW4gZW51bWVyYXRlZCB0aHJvdWdoIExEQVAKICAgICAgICBxdWVyaWVzLCByZWZsZWN0aW5nIHF1ZXJpZXMgdGhyb3VnaCB0aGUgIlByaW1hcnkudGVzdGxhYi5sb2NhbCIgZG9tYWluIGNvbnRyb2xsZXIsCiAgICAgICAgdXNpbmcgLk5FVCBtZXRob2RzLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldERvbWFpblRydXN0IC1BUEkgLURvbWFpbiAicHJvZC50ZXN0bGFiLmxvY2FsIgoKICAgICAgICBSZXR1cm4gZG9tYWluIHRydXN0cyBmb3IgdGhlICJwcm9kLnRlc3RsYWIubG9jYWwiIGRvbWFpbiBlbnVtZXJhdGVkIHRocm91Z2ggQVBJIGNhbGxzLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gR2V0LU5ldERvbWFpblRydXN0IC1BUEkgLURvbWFpbkNvbnRyb2xsZXIgV0lORE9XUzIudGVzdGxhYi5sb2NhbAoKICAgICAgICBSZXR1cm4gZG9tYWluIHRydXN0cyByZWFjaGFibGUgZnJvbSB0aGUgV0lORE9XUzIgbWFjaGluZSB0aHJvdWdoIEFQSSBjYWxscy4KIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLCBWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwYXRoLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRBUEksCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJExEQVAsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKCiAgICBiZWdpbiB7CiAgICAgICAgJFRydXN0QXR0cmlidXRlcyA9IEB7CiAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMDEnID0gJ25vbl90cmFuc2l0aXZlJwogICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDAyJyA9ICd1cGxldmVsX29ubHknCiAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMDQnID0gJ3F1YXJhbnRpbmVkX2RvbWFpbicKICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDAwOCcgPSAnZm9yZXN0X3RyYW5zaXRpdmUnCiAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMTAnID0gJ2Nyb3NzX29yZ2FuaXphdGlvbicKICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDAyMCcgPSAnd2l0aGluX2ZvcmVzdCcKICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDA0MCcgPSAndHJlYXRfYXNfZXh0ZXJuYWwnCiAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwODAnID0gJ3RydXN0X3VzZXNfcmM0X2VuY3J5cHRpb24nCiAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAxMDAnID0gJ3RydXN0X3VzZXNfYWVzX2tleXMnCiAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAyMDAnID0gJ2Nyb3NzX29yZ2FuaXphdGlvbl9ub190Z3RfZGVsZWdhdGlvbicKICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDQwMCcgPSAncGltX3RydXN0JwogICAgICAgIH0KICAgIH0KCiAgICBwcm9jZXNzIHsKCiAgICAgICAgaWYoLW5vdCAkRG9tYWluKSB7CiAgICAgICAgICAgICMgaWYgbm90IGRvbWFpbiBpcyBzcGVjaWZpZWQgZ3JhYiB0aGUgY3VycmVudCBkb21haW4KICAgICAgICAgICAgJFNvdXJjZURvbWFpbiA9IChHZXQtTmV0RG9tYWluIC1DcmVkZW50aWFsICRDcmVkZW50aWFsKS5OYW1lCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkU291cmNlRG9tYWluID0gJERvbWFpbgogICAgICAgIH0KCiAgICAgICAgaWYoJExEQVAgLW9yICRBRFNQYXRoKSB7CgogICAgICAgICAgICAkVHJ1c3RTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciAtRG9tYWluICRTb3VyY2VEb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLVBhZ2VTaXplICRQYWdlU2l6ZSAtQURTcGF0aCAkQURTcGF0aAoKICAgICAgICAgICAgJFNvdXJjZVNJRCA9IEdldC1Eb21haW5TSUQgLURvbWFpbiAkU291cmNlRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyCgogICAgICAgICAgICBpZigkVHJ1c3RTZWFyY2hlcikgewoKICAgICAgICAgICAgICAgICRUcnVzdFNlYXJjaGVyLkZpbHRlciA9ICcob2JqZWN0Q2xhc3M9dHJ1c3RlZERvbWFpbiknCgogICAgICAgICAgICAgICAgJFJlc3VsdHMgPSAkVHJ1c3RTZWFyY2hlci5GaW5kQWxsKCkKICAgICAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgJFByb3BzID0gJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAkVHJ1c3RBdHRyaWIgPSBAKCkKICAgICAgICAgICAgICAgICAgICAkVHJ1c3RBdHRyaWIgKz0gJFRydXN0QXR0cmlidXRlcy5LZXlzIHwgV2hlcmUtT2JqZWN0IHsgJFByb3BzLnRydXN0YXR0cmlidXRlc1swXSAtYmFuZCAkXyB9IHwgRm9yRWFjaC1PYmplY3QgeyAkVHJ1c3RBdHRyaWJ1dGVzWyRfXSB9CgogICAgICAgICAgICAgICAgICAgICREaXJlY3Rpb24gPSBTd2l0Y2ggKCRQcm9wcy50cnVzdGRpcmVjdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICAwIHsgJ0Rpc2FibGVkJyB9CiAgICAgICAgICAgICAgICAgICAgICAgIDEgeyAnSW5ib3VuZCcgfQogICAgICAgICAgICAgICAgICAgICAgICAyIHsgJ091dGJvdW5kJyB9CiAgICAgICAgICAgICAgICAgICAgICAgIDMgeyAnQmlkaXJlY3Rpb25hbCcgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkT2JqZWN0R3VpZCA9IE5ldy1PYmplY3QgR3VpZCBAKCwkUHJvcHMub2JqZWN0Z3VpZFswXSkKICAgICAgICAgICAgICAgICAgICAkVGFyZ2V0U0lEID0gKE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXIoJFByb3BzLnNlY3VyaXR5aWRlbnRpZmllclswXSwwKSkuVmFsdWUKICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU291cmNlTmFtZScgJFNvdXJjZURvbWFpbgogICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTb3VyY2VTSUQnICRTb3VyY2VTSUQKICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVGFyZ2V0TmFtZScgJFByb3BzLm5hbWVbMF0KICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVGFyZ2V0U0lEJyAkVGFyZ2V0U0lECiAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ09iamVjdEd1aWQnICJ7JE9iamVjdEd1aWR9IgogICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdUcnVzdFR5cGUnICQoJFRydXN0QXR0cmliIC1qb2luICcsJykKICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVHJ1c3REaXJlY3Rpb24nICIkRGlyZWN0aW9uIgogICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdC5QU09iamVjdC5UeXBlTmFtZXMuQWRkKCdQb3dlclZpZXcuRG9tYWluVHJ1c3RMREFQJykKICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRSZXN1bHRzLmRpc3Bvc2UoKQogICAgICAgICAgICAgICAgJFRydXN0U2VhcmNoZXIuZGlzcG9zZSgpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZWlmKCRBUEkpIHsKICAgICAgICAgICAgaWYoLW5vdCAkRG9tYWluQ29udHJvbGxlcikgewogICAgICAgICAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIgPSBHZXQtTmV0RG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtRG9tYWluICRTb3VyY2VEb21haW4gfCBTZWxlY3QtT2JqZWN0IC1GaXJzdCAxIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgTmFtZQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZigkRG9tYWluQ29udHJvbGxlcikgewogICAgICAgICAgICAgICAgIyBhcmd1bWVudHMgZm9yIERzRW51bWVyYXRlRG9tYWluVHJ1c3RzCiAgICAgICAgICAgICAgICAkUHRySW5mbyA9IFtJbnRQdHJdOjpaZXJvCgogICAgICAgICAgICAgICAgIyA2MyA9IERTX0RPTUFJTl9JTl9GT1JFU1QgKyBEU19ET01BSU5fRElSRUNUX09VVEJPVU5EICsgRFNfRE9NQUlOX1RSRUVfUk9PVCArIERTX0RPTUFJTl9QUklNQVJZICsgRFNfRE9NQUlOX05BVElWRV9NT0RFICsgRFNfRE9NQUlOX0RJUkVDVF9JTkJPVU5ECiAgICAgICAgICAgICAgICAkRmxhZ3MgPSA2MwogICAgICAgICAgICAgICAgJERvbWFpbkNvdW50ID0gMAoKICAgICAgICAgICAgICAgICMgZ2V0IHRoZSB0cnVzdCBpbmZvcm1hdGlvbiBmcm9tIHRoZSB0YXJnZXQgc2VydmVyCiAgICAgICAgICAgICAgICAkUmVzdWx0ID0gJE5ldGFwaTMyOjpEc0VudW1lcmF0ZURvbWFpblRydXN0cygkRG9tYWluQ29udHJvbGxlciwgJEZsYWdzLCBbcmVmXSRQdHJJbmZvLCBbcmVmXSREb21haW5Db3VudCkKCiAgICAgICAgICAgICAgICAjIExvY2F0ZSB0aGUgb2Zmc2V0IG9mIHRoZSBpbml0aWFsIGludFB0cgogICAgICAgICAgICAgICAgJE9mZnNldCA9ICRQdHJJbmZvLlRvSW50NjQoKQoKICAgICAgICAgICAgICAgICMgMCA9IHN1Y2Nlc3MKICAgICAgICAgICAgICAgIGlmICgoJFJlc3VsdCAtZXEgMCkgLWFuZCAoJE9mZnNldCAtZ3QgMCkpIHsKCiAgICAgICAgICAgICAgICAgICAgIyBXb3JrIG91dCBob3cgbXVjaCB0byBpbmNyZW1lbnQgdGhlIHBvaW50ZXIgYnkgZmluZGluZyBvdXQgdGhlIHNpemUgb2YgdGhlIHN0cnVjdHVyZQogICAgICAgICAgICAgICAgICAgICRJbmNyZW1lbnQgPSAkRFNfRE9NQUlOX1RSVVNUUzo6R2V0U2l6ZSgpCgogICAgICAgICAgICAgICAgICAgICMgcGFyc2UgYWxsIHRoZSByZXN1bHQgc3RydWN0dXJlcwogICAgICAgICAgICAgICAgICAgIGZvciAoJGkgPSAwOyAoJGkgLWx0ICREb21haW5Db3VudCk7ICRpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBjcmVhdGUgYSBuZXcgaW50IHB0ciBhdCB0aGUgZ2l2ZW4gb2Zmc2V0IGFuZCBjYXN0IHRoZSBwb2ludGVyIGFzIG91ciByZXN1bHQgc3RydWN0dXJlCiAgICAgICAgICAgICAgICAgICAgICAgICROZXdJbnRQdHIgPSBOZXctT2JqZWN0IFN5c3RlbS5JbnRwdHIgLUFyZ3VtZW50TGlzdCAkT2Zmc2V0CiAgICAgICAgICAgICAgICAgICAgICAgICRJbmZvID0gJE5ld0ludFB0ciAtYXMgJERTX0RPTUFJTl9UUlVTVFMKCiAgICAgICAgICAgICAgICAgICAgICAgICRPZmZzZXQgPSAkTmV3SW50UHRyLlRvSW50NjQoKQogICAgICAgICAgICAgICAgICAgICAgICAkT2Zmc2V0ICs9ICRJbmNyZW1lbnQKCiAgICAgICAgICAgICAgICAgICAgICAgICRTaWRTdHJpbmcgPSAiIgogICAgICAgICAgICAgICAgICAgICAgICAkUmVzdWx0ID0gJEFkdmFwaTMyOjpDb252ZXJ0U2lkVG9TdHJpbmdTaWQoJEluZm8uRG9tYWluU2lkLCBbcmVmXSRTaWRTdHJpbmcpOyRMYXN0RXJyb3IgPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldExhc3RXaW4zMkVycm9yKCkKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRSZXN1bHQgLWVxIDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkVycm9yOiAkKChbQ29tcG9uZW50TW9kZWwuV2luMzJFeGNlcHRpb25dICRMYXN0RXJyb3IpLk1lc3NhZ2UpIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0ID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NvdXJjZURvbWFpbicgJFNvdXJjZURvbWFpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NvdXJjZURvbWFpbkNvbnRyb2xsZXInICREb21haW5Db250cm9sbGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTmV0Ymlvc0RvbWFpbk5hbWUnICRJbmZvLk5ldGJpb3NEb21haW5OYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRG5zRG9tYWluTmFtZScgJEluZm8uRG5zRG9tYWluTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0ZsYWdzJyAkSW5mby5GbGFncwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1BhcmVudEluZGV4JyAkSW5mby5QYXJlbnRJbmRleAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RydXN0VHlwZScgJEluZm8uVHJ1c3RUeXBlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVHJ1c3RBdHRyaWJ1dGVzJyAkSW5mby5UcnVzdEF0dHJpYnV0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEb21haW5TaWQnICRTaWRTdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEb21haW5HdWlkJyAkSW5mby5Eb21haW5HdWlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QuUFNPYmplY3QuVHlwZU5hbWVzLkFkZCgnUG93ZXJWaWV3LkFQSURvbWFpblRydXN0JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICMgZnJlZSB1cCB0aGUgcmVzdWx0IGJ1ZmZlcgogICAgICAgICAgICAgICAgICAgICROdWxsID0gJE5ldGFwaTMyOjpOZXRBcGlCdWZmZXJGcmVlKCRQdHJJbmZvKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3I6ICQoKFtDb21wb25lbnRNb2RlbC5XaW4zMkV4Y2VwdGlvbl0gJFJlc3VsdCkuTWVzc2FnZSkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJDb3VsZCBub3QgcmV0cmlldmUgZG9tYWluIGNvbnRyb2xsZXIgZm9yICREb21haW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICMgaWYgd2UncmUgdXNpbmcgZGlyZWN0IGRvbWFpbiBjb25uZWN0aW9ucyB0aHJvdWdoIC5ORVQKICAgICAgICAgICAgJEZvdW5kRG9tYWluID0gR2V0LU5ldERvbWFpbiAtRG9tYWluICREb21haW4gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICAgICAgaWYoJEZvdW5kRG9tYWluKSB7CiAgICAgICAgICAgICAgICAkRm91bmREb21haW4uR2V0QWxsVHJ1c3RSZWxhdGlvbnNoaXBzKCkgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgJF8uUFNPYmplY3QuVHlwZU5hbWVzLkFkZCgnUG93ZXJWaWV3LkRvbWFpblRydXN0JykKICAgICAgICAgICAgICAgICAgICAkXwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LU5ldEZvcmVzdFRydXN0IHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBSZXR1cm4gYWxsIHRydXN0cyBmb3IgdGhlIGN1cnJlbnQgZm9yZXN0LgoKICAgIC5QQVJBTUVURVIgRm9yZXN0CgogICAgICAgIFJldHVybiB0cnVzdHMgZm9yIHRoZSBzcGVjaWZpZWQgZm9yZXN0LgoKICAgIC5QQVJBTUVURVIgQ3JlZGVudGlhbAoKICAgICAgICBBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBHZXQtTmV0Rm9yZXN0VHJ1c3QKCiAgICAgICAgUmV0dXJuIGN1cnJlbnQgZm9yZXN0IHRydXN0cy4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEdldC1OZXRGb3Jlc3RUcnVzdCAtRm9yZXN0ICJ0ZXN0IgoKICAgICAgICBSZXR1cm4gdHJ1c3RzIGZvciB0aGUgInRlc3QiIGZvcmVzdC4KIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRGb3Jlc3QsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCgogICAgcHJvY2VzcyB7CiAgICAgICAgJEZvdW5kRm9yZXN0ID0gR2V0LU5ldEZvcmVzdCAtRm9yZXN0ICRGb3Jlc3QgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKCiAgICAgICAgaWYoJEZvdW5kRm9yZXN0KSB7CiAgICAgICAgICAgICRGb3VuZEZvcmVzdC5HZXRBbGxUcnVzdFJlbGF0aW9uc2hpcHMoKSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICRfLlBTT2JqZWN0LlR5cGVOYW1lcy5BZGQoJ1Bvd2VyVmlldy5Gb3Jlc3RUcnVzdCcpCiAgICAgICAgICAgICAgICAkXwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gRmluZC1Gb3JlaWduVXNlciB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgRW51bWVyYXRlcyB1c2VycyB3aG8gYXJlIGluIGdyb3VwcyBvdXRzaWRlIG9mIHRoZWlyCiAgICAgICAgcHJpbmNpcGFsIGRvbWFpbi4gVGhlIC1SZWN1cnNlIG9wdGlvbiB3aWxsIHRyeSB0byBtYXAgYWxsIAogICAgICAgIHRyYW5zaXRpdmUgZG9tYWluIHRydXN0IHJlbGF0aW9uc2hpcHMgYW5kIGVudW1lcmF0ZSBhbGwgCiAgICAgICAgdXNlcnMgd2hvIGFyZSBpbiBncm91cHMgb3V0c2lkZSBvZiB0aGVpciBwcmluY2lwYWwgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgVXNlck5hbWUKCiAgICAgICAgVXNlcm5hbWUgdG8gZmlsdGVyIHJlc3VsdHMgZm9yLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgogICAgLlBBUkFNRVRFUiBEb21haW4KCiAgICAgICAgRG9tYWluIHRvIHF1ZXJ5IGZvciB1c2VycywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKICAgIC5QQVJBTUVURVIgRG9tYWluQ29udHJvbGxlcgoKICAgICAgICBEb21haW4gY29udHJvbGxlciB0byByZWZsZWN0IExEQVAgcXVlcmllcyB0aHJvdWdoLgoKICAgIC5QQVJBTUVURVIgTERBUAoKICAgICAgICBTd2l0Y2guIFVzZSBMREFQIHF1ZXJpZXMgdG8gZW51bWVyYXRlIHRoZSB0cnVzdHMgaW5zdGVhZCBvZiBkaXJlY3QgZG9tYWluIGNvbm5lY3Rpb25zLgogICAgICAgIE1vcmUgbGlrZWx5IHRvIGdldCBhcm91bmQgbmV0d29yayBzZWdtZW50YXRpb24sIGJ1dCBub3QgYXMgYWNjdXJhdGUuCgogICAgLlBBUkFNRVRFUiBSZWN1cnNlCgogICAgICAgIFN3aXRjaC4gRW51bWVyYXRlIGFsbCB1c2VyIHRydXN0IGdyb3VwcyBmcm9tIGFsbCByZWFjaGFibGUgZG9tYWlucyByZWN1cnNpdmVseS4KCiAgICAuUEFSQU1FVEVSIFBhZ2VTaXplCgogICAgICAgIFRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCiAgICAuTElOSwoKICAgICAgICBodHRwOi8vYmxvZy5oYXJtajB5Lm5ldC8KIz4KCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlck5hbWUsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkTERBUCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUmVjdXJzZSwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwCiAgICApCgogICAgZnVuY3Rpb24gR2V0LUZvcmVpZ25Vc2VyIHsKICAgICAgICAjIGhlbHBlciB1c2VkIHRvIGVudW1lcmF0ZSB1c2VycyB3aG8gYXJlIGluIGdyb3VwcyBvdXRzaWRlIG9mIHRoZWlyIHByaW5jaXBhbCBkb21haW4KICAgICAgICBwYXJhbSgKICAgICAgICAgICAgW1N0cmluZ10KICAgICAgICAgICAgJFVzZXJOYW1lLAoKICAgICAgICAgICAgW1N0cmluZ10KICAgICAgICAgICAgJERvbWFpbiwKCiAgICAgICAgICAgIFtTdHJpbmddCiAgICAgICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgICAgICBbSW50XQogICAgICAgICAgICAkUGFnZVNpemUgPSAyMDAKICAgICAgICApCgogICAgICAgIGlmICgkRG9tYWluKSB7CiAgICAgICAgICAgICMgZ2V0IHRoZSBkb21haW4gbmFtZSBpbnRvIGRpc3Rpbmd1aXNoZWQgZm9ybQogICAgICAgICAgICAkRGlzdGluZ3Vpc2hlZERvbWFpbk5hbWUgPSAiREM9IiArICREb21haW4gLXJlcGxhY2UgJ1wuJywnLERDPScKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICREaXN0aW5ndWlzaGVkRG9tYWluTmFtZSA9IFtTdHJpbmddIChbYWRzaV0nJykuZGlzdGluZ3Vpc2hlZG5hbWUKICAgICAgICAgICAgJERvbWFpbiA9ICREaXN0aW5ndWlzaGVkRG9tYWluTmFtZSAtcmVwbGFjZSAnREM9JywnJyAtcmVwbGFjZSAnLCcsJy4nCiAgICAgICAgfQoKICAgICAgICBHZXQtTmV0VXNlciAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLVVzZXJOYW1lICRVc2VyTmFtZSAtUGFnZVNpemUgJFBhZ2VTaXplIC1GaWx0ZXIgJyhtZW1iZXJvZj0qKScgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgIEZvckVhY2ggKCRNZW1iZXJzaGlwIGluICRfLm1lbWJlcm9mKSB7CiAgICAgICAgICAgICAgICAkSW5kZXggPSAkTWVtYmVyc2hpcC5JbmRleE9mKCJEQz0iKQogICAgICAgICAgICAgICAgaWYoJEluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwRG9tYWluID0gJCgkTWVtYmVyc2hpcC5zdWJzdHJpbmcoJEluZGV4KSkgLXJlcGxhY2UgJ0RDPScsJycgLXJlcGxhY2UgJywnLCcuJwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmICgkR3JvdXBEb21haW4uQ29tcGFyZVRvKCREb21haW4pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgaWYgdGhlIGdyb3VwIGRvbWFpbiBkb2Vzbid0IG1hdGNoIHRoZSB1c2VyIGRvbWFpbiwgb3V0cHV0CiAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cE5hbWUgPSAkTWVtYmVyc2hpcC5zcGxpdCgiLCIpWzBdLnNwbGl0KCI9IilbMV0KICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Vc2VyID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnblVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlckRvbWFpbicgJERvbWFpbgogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnblVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlck5hbWUnICRfLnNhbWFjY291bnRuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3JlaWduVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cERvbWFpbicgJEdyb3VwRG9tYWluCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3JlaWduVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cE5hbWUnICRHcm91cE5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Vc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwRE4nICRNZW1iZXJzaGlwCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3JlaWduVXNlcgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBpZiAoJFJlY3Vyc2UpIHsKICAgICAgICAjIGdldCBhbGwgcmVjaGFibGUgZG9tYWlucyBpbiB0aGUgdHJ1c3QgbWVzaCBhbmQgdW5pcXVpZnkgdGhlbQogICAgICAgIGlmKCRMREFQIC1vciAkRG9tYWluQ29udHJvbGxlcikgewogICAgICAgICAgICAkRG9tYWluVHJ1c3RzID0gSW52b2tlLU1hcERvbWFpblRydXN0IC1MREFQIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1QYWdlU2l6ZSAkUGFnZVNpemUgfCBGb3JFYWNoLU9iamVjdCB7ICRfLlNvdXJjZURvbWFpbiB9IHwgU29ydC1PYmplY3QgLVVuaXF1ZQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJERvbWFpblRydXN0cyA9IEludm9rZS1NYXBEb21haW5UcnVzdCAtUGFnZVNpemUgJFBhZ2VTaXplIHwgRm9yRWFjaC1PYmplY3QgeyAkXy5Tb3VyY2VEb21haW4gfSB8IFNvcnQtT2JqZWN0IC1VbmlxdWUKICAgICAgICB9CgogICAgICAgIEZvckVhY2goJERvbWFpblRydXN0IGluICREb21haW5UcnVzdHMpIHsKICAgICAgICAgICAgIyBnZXQgdGhlIHRydXN0IGdyb3VwcyBmb3IgZWFjaCBkb21haW4gaW4gdGhlIHRydXN0IG1lc2gKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRW51bWVyYXRpbmcgdHJ1c3QgZ3JvdXBzIGluIGRvbWFpbiAkRG9tYWluVHJ1c3QiCiAgICAgICAgICAgIEdldC1Gb3JlaWduVXNlciAtRG9tYWluICREb21haW5UcnVzdCAtVXNlck5hbWUgJFVzZXJOYW1lIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBHZXQtRm9yZWlnblVzZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1Vc2VyTmFtZSAkVXNlck5hbWUgLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgfQp9CgoKZnVuY3Rpb24gRmluZC1Gb3JlaWduR3JvdXAgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEVudW1lcmF0ZXMgYWxsIHRoZSBtZW1iZXJzIG9mIGEgZ2l2ZW4gZG9tYWluJ3MgZ3JvdXBzCiAgICAgICAgYW5kIGZpbmRzIHVzZXJzIHRoYXQgYXJlIG5vdCBpbiB0aGUgcXVlcmllZCBkb21haW4uCiAgICAgICAgVGhlIC1SZWN1cnNlIGZsYWcgd2lsbCBwZXJmb3JtIHRoaXMgZW51bWVyYXRpb24gZm9yIGFsbAogICAgICAgIGVhY2hhYmxlIGRvbWFpbiB0cnVzdHMuCgogICAgLlBBUkFNRVRFUiBHcm91cE5hbWUKCiAgICAgICAgR3JvdXBuYW1lIHRvIGZpbHRlciByZXN1bHRzIGZvciwgd2lsZGNhcmRzIGFjY2VwdGVkLgoKICAgIC5QQVJBTUVURVIgRG9tYWluCgogICAgICAgIERvbWFpbiB0byBxdWVyeSBmb3IgZ3JvdXBzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBMREFQCgogICAgICAgIFN3aXRjaC4gVXNlIExEQVAgcXVlcmllcyB0byBlbnVtZXJhdGUgdGhlIHRydXN0cyBpbnN0ZWFkIG9mIGRpcmVjdCBkb21haW4gY29ubmVjdGlvbnMuCiAgICAgICAgTW9yZSBsaWtlbHkgdG8gZ2V0IGFyb3VuZCBuZXR3b3JrIHNlZ21lbnRhdGlvbiwgYnV0IG5vdCBhcyBhY2N1cmF0ZS4KCiAgICAuUEFSQU1FVEVSIFJlY3Vyc2UKCiAgICAgICAgU3dpdGNoLiBFbnVtZXJhdGUgYWxsIGdyb3VwIHRydXN0IHVzZXJzIGZyb20gYWxsIHJlYWNoYWJsZSBkb21haW5zIHJlY3Vyc2l2ZWx5LgoKICAgIC5QQVJBTUVURVIgUGFnZVNpemUKCiAgICAgICAgVGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKICAgIC5MSU5LCgogICAgICAgIGh0dHA6Ly9ibG9nLmhhcm1qMHkubmV0LwojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcm91cE5hbWUgPSAnKicsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkTERBUCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUmVjdXJzZSwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwCiAgICApCgogICAgZnVuY3Rpb24gR2V0LUZvcmVpZ25Hcm91cCB7CiAgICAgICAgcGFyYW0oCiAgICAgICAgICAgIFtTdHJpbmddCiAgICAgICAgICAgICRHcm91cE5hbWUgPSAnKicsCgogICAgICAgICAgICBbU3RyaW5nXQogICAgICAgICAgICAkRG9tYWluLAoKICAgICAgICAgICAgW1N0cmluZ10KICAgICAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCgogICAgICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgICAgIFtJbnRdCiAgICAgICAgICAgICRQYWdlU2l6ZSA9IDIwMAogICAgICAgICkKCiAgICAgICAgaWYoLW5vdCAkRG9tYWluKSB7CiAgICAgICAgICAgICREb21haW4gPSAoR2V0LU5ldERvbWFpbikuTmFtZQogICAgICAgIH0KCiAgICAgICAgJERvbWFpbkROID0gIkRDPSQoJERvbWFpbi5SZXBsYWNlKCcuJywgJyxEQz0nKSkiCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiRG9tYWluRE46ICREb21haW5ETiIKCiAgICAgICAgIyBzdGFuZGFyZCBncm91cCBuYW1lcyB0byBpZ25vcmUKICAgICAgICAkRXhjbHVkZUdyb3VwcyA9IEAoIlVzZXJzIiwgIkRvbWFpbiBVc2VycyIsICJHdWVzdHMiKQoKICAgICAgICAjIGdldCBhbGwgdGhlIGdyb3VwbmFtZXMgZm9yIHRoZSBnaXZlbiBkb21haW4KICAgICAgICBHZXQtTmV0R3JvdXAgLUdyb3VwTmFtZSAkR3JvdXBOYW1lIC1GaWx0ZXIgJyhtZW1iZXI9KiknIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtRnVsbERhdGEgLVBhZ2VTaXplICRQYWdlU2l6ZSB8IFdoZXJlLU9iamVjdCB7CiAgICAgICAgICAgICMgZXhjbHVkZSBjb21tb24gbGFyZ2UgZ3JvdXBzCiAgICAgICAgICAgIC1ub3QgKCRFeGNsdWRlR3JvdXBzIC1jb250YWlucyAkXy5zYW1hY2NvdW50bmFtZSkgfSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJEdyb3VwTmFtZSA9ICRfLnNhbUFjY291bnROYW1lCgogICAgICAgICAgICAgICAgJF8ubWVtYmVyIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICMgZmlsdGVyIGZvciBmb3JlaWduIFNJRHMgaW4gdGhlIGNuIGZpZWxkIGZvciB1c2VycyBpbiBhbm90aGVyIGRvbWFpbiwKICAgICAgICAgICAgICAgICAgICAjICAgb3IgaWYgdGhlIEROIGRvZXNuJ3QgZW5kIHdpdGggdGhlIHByb3BlciBETiBmb3IgdGhlIHF1ZXJpZWQgZG9tYWluICAKICAgICAgICAgICAgICAgICAgICBpZiAoKCRfIC1tYXRjaCAnQ049Uy0xLTUtMjEuKi0uKicpIC1vciAoJERvbWFpbkROIC1uZSAoJF8uc3Vic3RyaW5nKCRfLkluZGV4T2YoIkRDPSIpKSkpKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAkVXNlckRvbWFpbiA9ICRfLnN1YlN0cmluZygkXy5JbmRleE9mKCJEQz0iKSkgLXJlcGxhY2UgJ0RDPScsJycgLXJlcGxhY2UgJywnLCcuJwogICAgICAgICAgICAgICAgICAgICAgICAkVXNlck5hbWUgPSAkXy5zcGxpdCgiLCIpWzBdLnNwbGl0KCI9IilbMV0KCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3JlaWduR3JvdXBVc2VyID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnbkdyb3VwVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cERvbWFpbicgJERvbWFpbgogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnbkdyb3VwVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cE5hbWUnICRHcm91cE5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Hcm91cFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlckRvbWFpbicgJFVzZXJEb21haW4KICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Hcm91cFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlck5hbWUnICRVc2VyTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnbkdyb3VwVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyRE4nICRfCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3JlaWduR3JvdXBVc2VyCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBpZiAoJFJlY3Vyc2UpIHsKICAgICAgICAjIGdldCBhbGwgcmVjaGFibGUgZG9tYWlucyBpbiB0aGUgdHJ1c3QgbWVzaCBhbmQgdW5pcXVpZnkgdGhlbQogICAgICAgIGlmKCRMREFQIC1vciAkRG9tYWluQ29udHJvbGxlcikgewogICAgICAgICAgICAkRG9tYWluVHJ1c3RzID0gSW52b2tlLU1hcERvbWFpblRydXN0IC1MREFQIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1QYWdlU2l6ZSAkUGFnZVNpemUgfCBGb3JFYWNoLU9iamVjdCB7ICRfLlNvdXJjZURvbWFpbiB9IHwgU29ydC1PYmplY3QgLVVuaXF1ZQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJERvbWFpblRydXN0cyA9IEludm9rZS1NYXBEb21haW5UcnVzdCAtUGFnZVNpemUgJFBhZ2VTaXplIHwgRm9yRWFjaC1PYmplY3QgeyAkXy5Tb3VyY2VEb21haW4gfSB8IFNvcnQtT2JqZWN0IC1VbmlxdWUKICAgICAgICB9CgogICAgICAgIEZvckVhY2goJERvbWFpblRydXN0IGluICREb21haW5UcnVzdHMpIHsKICAgICAgICAgICAgIyBnZXQgdGhlIHRydXN0IGdyb3VwcyBmb3IgZWFjaCBkb21haW4gaW4gdGhlIHRydXN0IG1lc2gKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRW51bWVyYXRpbmcgdHJ1c3QgZ3JvdXBzIGluIGRvbWFpbiAkRG9tYWluVHJ1c3QiCiAgICAgICAgICAgIEdldC1Gb3JlaWduR3JvdXAgLUdyb3VwTmFtZSAkR3JvdXBOYW1lIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICAgICAgfQogICAgfQogICAgZWxzZSB7CiAgICAgICAgR2V0LUZvcmVpZ25Hcm91cCAtR3JvdXBOYW1lICRHcm91cE5hbWUgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgIH0KfQoKCmZ1bmN0aW9uIEZpbmQtTWFuYWdlZFNlY3VyaXR5R3JvdXBzIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBUaGlzIGZ1bmN0aW9uIHJldHJpZXZlcyBhbGwgc2VjdXJpdHkgZ3JvdXBzIGluIHRoZSBkb21haW4gYW5kIGlkZW50aWZpZXMgb25lcyB0aGF0CiAgICAgICAgaGF2ZSBhIG1hbmFnZXIgc2V0LiBJdCBhbHNvIGRldGVybWluZXMgd2hldGhlciB0aGUgbWFuYWdlciBoYXMgdGhlIGFiaWxpdHkgdG8gYWRkCiAgICAgICAgb3IgcmVtb3ZlIG1lbWJlcnMgZnJvbSB0aGUgZ3JvdXAuCgogICAgICAgIEF1dGhvcjogU3R1YXJ0IE1vcmdhbiAoQHVrc3R1ZnVzKSA8c3R1YXJ0Lm1vcmdhbkBtd3JpbmZvc2VjdXJpdHkuY29tPgogICAgICAgIExpY2Vuc2U6IEJTRCAzLUNsYXVzZQoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gRmluZC1NYW5hZ2VkU2VjdXJpdHlHcm91cHMgfCBFeHBvcnQtUG93ZXJWaWV3Q1NWIC1Ob1R5cGVJbmZvcm1hdGlvbiBncm91cC1tYW5hZ2Vycy5jc3YKCiAgICAgICAgU3RvcmUgYSBsaXN0IG9mIGFsbCBzZWN1cml0eSBncm91cHMgd2l0aCBtYW5hZ2VycyBpbiBncm91cC1tYW5hZ2Vycy5jc3YKCiAgICAuREVTQ1JJUFRJT04KCiAgICAgICAgQXV0aG9yaXR5IHRvIG1hbmlwdWxhdGUgdGhlIGdyb3VwIG1lbWJlcnNoaXAgb2YgQUQgc2VjdXJpdHkgZ3JvdXBzIGFuZCBkaXN0cmlidXRpb24gZ3JvdXBzIAogICAgICAgIGNhbiBiZSBkZWxlZ2F0ZWQgdG8gbm9uLWFkbWluaXN0cmF0b3JzIGJ5IHNldHRpbmcgdGhlICdtYW5hZ2VkQnknIGF0dHJpYnV0ZS4gVGhpcyBpcyB0eXBpY2FsbHkKICAgICAgICB1c2VkIHRvIGRlbGVnYXRlIG1hbmFnZW1lbnQgYXV0aG9yaXR5IHRvIGRpc3RyaWJ1dGlvbiBncm91cHMsIGJ1dCBXaW5kb3dzIHN1cHBvcnRzIHNlY3VyaXR5IGdyb3VwcwogICAgICAgIGJlaW5nIG1hbmFnZWQgaW4gdGhlIHNhbWUgd2F5LgoKICAgICAgICBUaGlzIGZ1bmN0aW9uIHNlYXJjaGVzIGZvciBBRCBncm91cHMgd2hpY2ggaGF2ZSBhIGdyb3VwIG1hbmFnZXIgc2V0LCBhbmQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoYXQKICAgICAgICB1c2VyIGNhbiBtYW5pcHVsYXRlIGdyb3VwIG1lbWJlcnNoaXAuIFRoaXMgY291bGQgYmUgYSB1c2VmdWwgbWV0aG9kIG9mIGhvcml6b250YWwgcHJpdmlsZWdlCiAgICAgICAgZXNjYWxhdGlvbiwgZXNwZWNpYWxseSBpZiB0aGUgbWFuYWdlciBjYW4gbWFuaXB1bGF0ZSB0aGUgbWVtYmVyc2hpcCBvZiBhIHByaXZpbGVnZWQgZ3JvdXAuCgogICAgLkxJTksKCiAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGxFbXBpcmUvRW1waXJlL3B1bGwvMTE5CgojPgoKICAgICMgR28gdGhyb3VnaCB0aGUgbGlzdCBvZiBzZWN1cml0eSBncm91cHMgb24gdGhlIGRvbWFpbiBhbmQgaWRlbnRpZnkgdGhvc2Ugd2hvIGhhdmUgYSBtYW5hZ2VyCiAgICBHZXQtTmV0R3JvdXAgLUZ1bGxEYXRhIC1GaWx0ZXIgJygmKG1hbmFnZWRCeT0qKShncm91cFR5cGU6MS4yLjg0MC4xMTM1NTYuMS40LjgwMzo9MjE0NzQ4MzY0OCkpJyB8IFNlbGVjdC1PYmplY3QgLVVuaXF1ZSBkaXN0aW5ndWlzaGVkTmFtZSxtYW5hZ2VkQnksY24gfCBGb3JFYWNoLU9iamVjdCB7CgogICAgICAgICMgUmV0cmlldmUgdGhlIG9iamVjdCB0aGF0IHRoZSBtYW5hZ2VkQnkgRE4gcmVmZXJzIHRvCiAgICAgICAgJGdyb3VwX21hbmFnZXIgPSBHZXQtQURPYmplY3QgLUFEU1BhdGggJF8ubWFuYWdlZEJ5IHwgU2VsZWN0LU9iamVjdCBjbixkaXN0aW5ndWlzaGVkbmFtZSxuYW1lLHNhbWFjY291bnR0eXBlLHNhbWFjY291bnRuYW1lCgogICAgICAgICMgQ3JlYXRlIGEgcmVzdWx0cyBvYmplY3QgdG8gc3RvcmUgb3VyIGZpbmRpbmdzCiAgICAgICAgJHJlc3VsdHNfb2JqZWN0ID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5IEB7CiAgICAgICAgICAgICdHcm91cENOJyA9ICRfLmNuCiAgICAgICAgICAgICdHcm91cEROJyA9ICRfLmRpc3Rpbmd1aXNoZWRuYW1lCiAgICAgICAgICAgICdNYW5hZ2VyQ04nID0gJGdyb3VwX21hbmFnZXIuY24KICAgICAgICAgICAgJ01hbmFnZXJETicgPSAkZ3JvdXBfbWFuYWdlci5kaXN0aW5ndWlzaGVkTmFtZQogICAgICAgICAgICAnTWFuYWdlclNBTicgPSAkZ3JvdXBfbWFuYWdlci5zYW1hY2NvdW50bmFtZQogICAgICAgICAgICAnTWFuYWdlclR5cGUnID0gJycKICAgICAgICAgICAgJ0Nhbk1hbmFnZXJXcml0ZScgPSAkRkFMU0UKICAgICAgICB9CgogICAgICAgICMgRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIG1hbmFnZXIgaXMgYSB1c2VyIG9yIGEgZ3JvdXAKICAgICAgICBpZiAoJGdyb3VwX21hbmFnZXIuc2FtYWNjb3VudHR5cGUgLWVxIDB4MTAwMDAwMDApIHsKICAgICAgICAgICAgJHJlc3VsdHNfb2JqZWN0Lk1hbmFnZXJUeXBlID0gJ0dyb3VwJwogICAgICAgIH0gZWxzZWlmICgkZ3JvdXBfbWFuYWdlci5zYW1hY2NvdW50dHlwZSAtZXEgMHgzMDAwMDAwMCkgewogICAgICAgICAgICAkcmVzdWx0c19vYmplY3QuTWFuYWdlclR5cGUgPSAnVXNlcicKICAgICAgICB9CgogICAgICAgICMgRmluZCB0aGUgQUNMcyB0aGF0IHJlbGF0ZSB0byB0aGUgYWJpbGl0eSB0byB3cml0ZSB0byB0aGUgZ3JvdXAKICAgICAgICAkeGFjbCA9IEdldC1PYmplY3RBY2wgLUFEU1BhdGggJF8uZGlzdGluZ3Vpc2hlZG5hbWUgLVJpZ2h0cyBXcml0ZU1lbWJlcnMKCiAgICAgICAgIyBEb3VibGUtY2hlY2sgdGhhdCB0aGUgbWFuYWdlcgogICAgICAgIGlmICgkeGFjbC5PYmplY3RUeXBlIC1lcSAnYmY5Njc5YzAtMGRlNi0xMWQwLWEyODUtMDBhYTAwMzA0OWUyJyAtYW5kICR4YWNsLkFjY2Vzc0NvbnRyb2xUeXBlIC1lcSAnQWxsb3cnIC1hbmQgJHhhY2wuSWRlbnRpdHlSZWZlcmVuY2UuVmFsdWUuQ29udGFpbnMoJGdyb3VwX21hbmFnZXIuc2FtYWNjb3VudG5hbWUpKSB7CiAgICAgICAgICAgICRyZXN1bHRzX29iamVjdC5DYW5NYW5hZ2VyV3JpdGUgPSAkVFJVRQogICAgICAgIH0KICAgICAgICAkcmVzdWx0c19vYmplY3QKICAgIH0KfQoKCmZ1bmN0aW9uIEludm9rZS1NYXBEb21haW5UcnVzdCB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgVGhpcyBmdW5jdGlvbiBnZXRzIGFsbCB0cnVzdHMgZm9yIHRoZSBjdXJyZW50IGRvbWFpbiwKICAgICAgICBhbmQgdHJpZXMgdG8gZ2V0IGFsbCB0cnVzdHMgZm9yIGVhY2ggZG9tYWluIGl0IGZpbmRzLgoKICAgIC5QQVJBTUVURVIgTERBUAoKICAgICAgICBTd2l0Y2guIFVzZSBMREFQIHF1ZXJpZXMgdG8gZW51bWVyYXRlIHRoZSB0cnVzdHMgaW5zdGVhZCBvZiBkaXJlY3QgZG9tYWluIGNvbm5lY3Rpb25zLgogICAgICAgIE1vcmUgbGlrZWx5IHRvIGdldCBhcm91bmQgbmV0d29yayBzZWdtZW50YXRpb24sIGJ1dCBub3QgYXMgYWNjdXJhdGUuCgogICAgLlBBUkFNRVRFUiBEb21haW5Db250cm9sbGVyCgogICAgICAgIERvbWFpbiBjb250cm9sbGVyIHRvIHJlZmxlY3QgTERBUCBxdWVyaWVzIHRocm91Z2guCgogICAgLlBBUkFNRVRFUiBQYWdlU2l6ZQoKICAgICAgICBUaGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgogICAgLlBBUkFNRVRFUiBDcmVkZW50aWFsCgogICAgICAgIEEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKICAgICAgICBmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+IEludm9rZS1NYXBEb21haW5UcnVzdCB8IEV4cG9ydC1DU1YgLU5vVHlwZUluZm9ybWF0aW9uIHRydXN0cy5jc3YKICAgICAgICAKICAgICAgICBNYXAgYWxsIHJlYWNoYWJsZSBkb21haW4gdHJ1c3RzIGFuZCBvdXRwdXQgZXZlcnl0aGluZyB0byBhIC5jc3YgZmlsZS4KCiAgICAuTElOSwoKICAgICAgICBodHRwOi8vYmxvZy5oYXJtajB5Lm5ldC8KIz4KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbU3dpdGNoXQogICAgICAgICRMREFQLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCgogICAgIyBrZWVwIHRyYWNrIG9mIGRvbWFpbnMgc2VlbiBzbyB3ZSBkb24ndCBoaXQgaW5maW5pdGUgcmVjdXJzaW9uCiAgICAkU2VlbkRvbWFpbnMgPSBAe30KCiAgICAjIG91ciBkb21haW4gc3RhdHVzIHRyYWNrZXIKICAgICREb21haW5zID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuU3RhY2sKCiAgICAjIGdldCB0aGUgY3VycmVudCBkb21haW4gYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2sKICAgICRDdXJyZW50RG9tYWluID0gKEdldC1OZXREb21haW4gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwpLk5hbWUKICAgICREb21haW5zLnB1c2goJEN1cnJlbnREb21haW4pCgogICAgd2hpbGUoJERvbWFpbnMuQ291bnQgLW5lIDApIHsKCiAgICAgICAgJERvbWFpbiA9ICREb21haW5zLlBvcCgpCgogICAgICAgICMgaWYgd2UgaGF2ZW4ndCBzZWVuIHRoaXMgZG9tYWluIGJlZm9yZQogICAgICAgIGlmICgkRG9tYWluIC1hbmQgKCREb21haW4uVHJpbSgpIC1uZSAiIikgLWFuZCAoLW5vdCAkU2VlbkRvbWFpbnMuQ29udGFpbnNLZXkoJERvbWFpbikpKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFbnVtZXJhdGluZyB0cnVzdHMgZm9yIGRvbWFpbiAnJERvbWFpbiciCgogICAgICAgICAgICAjIG1hcmsgaXQgYXMgc2VlbiBpbiBvdXIgbGlzdAogICAgICAgICAgICAkTnVsbCA9ICRTZWVuRG9tYWlucy5hZGQoJERvbWFpbiwgIiIpCgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgIyBnZXQgYWxsIHRoZSB0cnVzdHMgZm9yIHRoaXMgZG9tYWluCiAgICAgICAgICAgICAgICBpZigkTERBUCAtb3IgJERvbWFpbkNvbnRyb2xsZXIpIHsKICAgICAgICAgICAgICAgICAgICAkVHJ1c3RzID0gR2V0LU5ldERvbWFpblRydXN0IC1Eb21haW4gJERvbWFpbiAtTERBUCAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtUGFnZVNpemUgJFBhZ2VTaXplIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkVHJ1c3RzID0gR2V0LU5ldERvbWFpblRydXN0IC1Eb21haW4gJERvbWFpbiAtUGFnZVNpemUgJFBhZ2VTaXplIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYoJFRydXN0cyAtaXNub3QgW1N5c3RlbS5BcnJheV0pIHsKICAgICAgICAgICAgICAgICAgICAkVHJ1c3RzID0gQCgkVHJ1c3RzKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICMgZ2V0IGFueSBmb3Jlc3QgdHJ1c3RzLCBpZiB0aGV5IGV4aXN0CiAgICAgICAgICAgICAgICBpZigtbm90ICgkTERBUCAtb3IgJERvbWFpbkNvbnRyb2xsZXIpICkgewogICAgICAgICAgICAgICAgICAgICRUcnVzdHMgKz0gR2V0LU5ldEZvcmVzdFRydXN0IC1Gb3Jlc3QgJERvbWFpbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICgkVHJ1c3RzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYoJFRydXN0cyAtaXNub3QgW1N5c3RlbS5BcnJheV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFRydXN0cyA9IEAoJFRydXN0cykKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICMgZW51bWVyYXRlIGVhY2ggdHJ1c3QgZm91bmQKICAgICAgICAgICAgICAgICAgICBGb3JFYWNoICgkVHJ1c3QgaW4gJFRydXN0cykgewogICAgICAgICAgICAgICAgICAgICAgICBpZigkVHJ1c3QuU291cmNlTmFtZSAtYW5kICRUcnVzdC5UYXJnZXROYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU291cmNlRG9tYWluID0gJFRydXN0LlNvdXJjZU5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUYXJnZXREb21haW4gPSAkVHJ1c3QuVGFyZ2V0TmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRydXN0VHlwZSA9ICRUcnVzdC5UcnVzdFR5cGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUcnVzdERpcmVjdGlvbiA9ICRUcnVzdC5UcnVzdERpcmVjdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE9iamVjdFR5cGUgPSAkVHJ1c3QuUFNPYmplY3QuVHlwZU5hbWVzIHwgV2hlcmUtT2JqZWN0IHskXyAtbWF0Y2ggJ1Bvd2VyVmlldyd9IHwgU2VsZWN0LU9iamVjdCAtRmlyc3QgMQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgbWFrZSBzdXJlIHdlIHByb2Nlc3MgdGhlIHRhcmdldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE51bGwgPSAkRG9tYWlucy5QdXNoKCRUYXJnZXREb21haW4pCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBidWlsZCB0aGUgbmljZWx5LXBhcnNhYmxlIGN1c3RvbSBvdXRwdXQgb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU291cmNlRG9tYWluJyAiJFNvdXJjZURvbWFpbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTb3VyY2VTSUQnICRUcnVzdC5Tb3VyY2VTSUQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdUYXJnZXREb21haW4nICIkVGFyZ2V0RG9tYWluIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RhcmdldFNJRCcgJFRydXN0LlRhcmdldFNJRAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RydXN0VHlwZScgIiRUcnVzdFR5cGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVHJ1c3REaXJlY3Rpb24nICIkVHJ1c3REaXJlY3Rpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QuUFNPYmplY3QuVHlwZU5hbWVzLkFkZCgkT2JqZWN0VHlwZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlshXSBFcnJvcjogJF8iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojCiMgRXhwb3NlIHRoZSBXaW4zMkFQSSBmdW5jdGlvbnMgYW5kIGRhdGFzdHJ1Y3R1cmVzIGJlbG93CiMgdXNpbmcgUFNSZWZsZWN0LiAKIyBXYXJuaW5nOiBPbmNlIHRoZXNlIGFyZSBleGVjdXRlZCwgdGhleSBhcmUgYmFrZWQgaW4gCiMgYW5kIGNhbid0IGJlIGNoYW5nZWQgd2hpbGUgdGhlIHNjcmlwdCBpcyBydW5uaW5nIQojCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgokTW9kID0gTmV3LUluTWVtb3J5TW9kdWxlIC1Nb2R1bGVOYW1lIFdpbjMyCgojIGFsbCBvZiB0aGUgV2luMzIgQVBJIGZ1bmN0aW9ucyB3ZSBuZWVkCiRGdW5jdGlvbkRlZmluaXRpb25zID0gQCgKICAgIChmdW5jIG5ldGFwaTMyIE5ldFNoYXJlRW51bSAoW0ludF0pIEAoW1N0cmluZ10sIFtJbnRdLCBbSW50UHRyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnRdLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpKSksCiAgICAoZnVuYyBuZXRhcGkzMiBOZXRXa3N0YVVzZXJFbnVtIChbSW50XSkgQChbU3RyaW5nXSwgW0ludF0sIFtJbnRQdHJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludF0sIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCkpKSwKICAgIChmdW5jIG5ldGFwaTMyIE5ldFNlc3Npb25FbnVtIChbSW50XSkgQChbU3RyaW5nXSwgW1N0cmluZ10sIFtTdHJpbmddLCBbSW50XSwgW0ludFB0cl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50XSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSkpLAogICAgKGZ1bmMgbmV0YXBpMzIgTmV0TG9jYWxHcm91cEdldE1lbWJlcnMgKFtJbnRdKSBAKFtTdHJpbmddLCBbU3RyaW5nXSwgW0ludF0sIFtJbnRQdHJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludF0sIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCkpKSwKICAgIChmdW5jIG5ldGFwaTMyIERzR2V0U2l0ZU5hbWUgKFtJbnRdKSBAKFtTdHJpbmddLCBbSW50UHRyXS5NYWtlQnlSZWZUeXBlKCkpKSwKICAgIChmdW5jIG5ldGFwaTMyIERzRW51bWVyYXRlRG9tYWluVHJ1c3RzIChbSW50XSkgQChbU3RyaW5nXSwgW1VJbnQzMl0sIFtJbnRQdHJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludFB0cl0uTWFrZUJ5UmVmVHlwZSgpKSksCiAgICAoZnVuYyBuZXRhcGkzMiBOZXRBcGlCdWZmZXJGcmVlIChbSW50XSkgQChbSW50UHRyXSkpLAogICAgKGZ1bmMgYWR2YXBpMzIgQ29udmVydFNpZFRvU3RyaW5nU2lkIChbSW50XSkgQChbSW50UHRyXSwgW1N0cmluZ10uTWFrZUJ5UmVmVHlwZSgpKSAtU2V0TGFzdEVycm9yKSwKICAgIChmdW5jIGFkdmFwaTMyIE9wZW5TQ01hbmFnZXJXIChbSW50UHRyXSkgQChbU3RyaW5nXSwgW1N0cmluZ10sIFtJbnRdKSAtU2V0TGFzdEVycm9yKSwKICAgIChmdW5jIGFkdmFwaTMyIENsb3NlU2VydmljZUhhbmRsZSAoW0ludF0pIEAoW0ludFB0cl0pKSwKICAgIChmdW5jIHd0c2FwaTMyIFdUU09wZW5TZXJ2ZXJFeCAoW0ludFB0cl0pIEAoW1N0cmluZ10pKSwKICAgIChmdW5jIHd0c2FwaTMyIFdUU0VudW1lcmF0ZVNlc3Npb25zRXggKFtJbnRdKSBAKFtJbnRQdHJdLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludF0sIFtJbnRQdHJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCkpIC1TZXRMYXN0RXJyb3IpLAogICAgKGZ1bmMgd3RzYXBpMzIgV1RTUXVlcnlTZXNzaW9uSW5mb3JtYXRpb24gKFtJbnRdKSBAKFtJbnRQdHJdLCBbSW50XSwgW0ludF0sIFtJbnRQdHJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCkpIC1TZXRMYXN0RXJyb3IpLAogICAgKGZ1bmMgd3RzYXBpMzIgV1RTRnJlZU1lbW9yeUV4IChbSW50XSkgQChbSW50MzJdLCBbSW50UHRyXSwgW0ludDMyXSkpLAogICAgKGZ1bmMgd3RzYXBpMzIgV1RTRnJlZU1lbW9yeSAoW0ludF0pIEAoW0ludFB0cl0pKSwKICAgIChmdW5jIHd0c2FwaTMyIFdUU0Nsb3NlU2VydmVyIChbSW50XSkgQChbSW50UHRyXSkpCikKCiMgZW51bSB1c2VkIGJ5ICRXVFNfU0VTU0lPTl9JTkZPXzEgYmVsb3cKJFdUU0Nvbm5lY3RTdGF0ZSA9IHBzZW51bSAkTW9kIFdUU19DT05ORUNUU1RBVEVfQ0xBU1MgVUludDE2IEB7CiAgICBBY3RpdmUgICAgICAgPSAgICAwCiAgICBDb25uZWN0ZWQgICAgPSAgICAxCiAgICBDb25uZWN0UXVlcnkgPSAgICAyCiAgICBTaGFkb3cgICAgICAgPSAgICAzCiAgICBEaXNjb25uZWN0ZWQgPSAgICA0CiAgICBJZGxlICAgICAgICAgPSAgICA1CiAgICBMaXN0ZW4gICAgICAgPSAgICA2CiAgICBSZXNldCAgICAgICAgPSAgICA3CiAgICBEb3duICAgICAgICAgPSAgICA4CiAgICBJbml0ICAgICAgICAgPSAgICA5Cn0KCiMgdGhlIFdUU0VudW1lcmF0ZVNlc3Npb25zRXggcmVzdWx0IHN0cnVjdHVyZQokV1RTX1NFU1NJT05fSU5GT18xID0gc3RydWN0ICRNb2QgV1RTX1NFU1NJT05fSU5GT18xIEB7CiAgICBFeGVjRW52SWQgPSBmaWVsZCAwIFVJbnQzMgogICAgU3RhdGUgPSBmaWVsZCAxICRXVFNDb25uZWN0U3RhdGUKICAgIFNlc3Npb25JZCA9IGZpZWxkIDIgVUludDMyCiAgICBwU2Vzc2lvbk5hbWUgPSBmaWVsZCAzIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBwSG9zdE5hbWUgPSBmaWVsZCA0IFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBwVXNlck5hbWUgPSBmaWVsZCA1IFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBwRG9tYWluTmFtZSA9IGZpZWxkIDYgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIHBGYXJtTmFtZSA9IGZpZWxkIDcgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKfQoKIyB0aGUgcGFydGljdWxhciBXVFNRdWVyeVNlc3Npb25JbmZvcm1hdGlvbiByZXN1bHQgc3RydWN0dXJlCiRXVFNfQ0xJRU5UX0FERFJFU1MgPSBzdHJ1Y3QgJG1vZCBXVFNfQ0xJRU5UX0FERFJFU1MgQHsKICAgIEFkZHJlc3NGYW1pbHkgPSBmaWVsZCAwIFVJbnQzMgogICAgQWRkcmVzcyA9IGZpZWxkIDEgQnl0ZVtdIC1NYXJzaGFsQXMgQCgnQnlWYWxBcnJheScsIDIwKQp9CgojIHRoZSBOZXRTaGFyZUVudW0gcmVzdWx0IHN0cnVjdHVyZQokU0hBUkVfSU5GT18xID0gc3RydWN0ICRNb2QgU0hBUkVfSU5GT18xIEB7CiAgICBzaGkxX25ldG5hbWUgPSBmaWVsZCAwIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBzaGkxX3R5cGUgPSBmaWVsZCAxIFVJbnQzMgogICAgc2hpMV9yZW1hcmsgPSBmaWVsZCAyIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCn0KCiMgdGhlIE5ldFdrc3RhVXNlckVudW0gcmVzdWx0IHN0cnVjdHVyZQokV0tTVEFfVVNFUl9JTkZPXzEgPSBzdHJ1Y3QgJE1vZCBXS1NUQV9VU0VSX0lORk9fMSBAewogICAgd2t1aTFfdXNlcm5hbWUgPSBmaWVsZCAwIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICB3a3VpMV9sb2dvbl9kb21haW4gPSBmaWVsZCAxIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICB3a3VpMV9vdGhfZG9tYWlucyA9IGZpZWxkIDIgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIHdrdWkxX2xvZ29uX3NlcnZlciA9IGZpZWxkIDMgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKfQoKIyB0aGUgTmV0U2Vzc2lvbkVudW0gcmVzdWx0IHN0cnVjdHVyZQokU0VTU0lPTl9JTkZPXzEwID0gc3RydWN0ICRNb2QgU0VTU0lPTl9JTkZPXzEwIEB7CiAgICBzZXNpMTBfY25hbWUgPSBmaWVsZCAwIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBzZXNpMTBfdXNlcm5hbWUgPSBmaWVsZCAxIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBzZXNpMTBfdGltZSA9IGZpZWxkIDIgVUludDMyCiAgICBzZXNpMTBfaWRsZV90aW1lID0gZmllbGQgMyBVSW50MzIKfQoKIyBlbnVtIHVzZWQgYnkgJExPQ0FMR1JPVVBfTUVNQkVSU19JTkZPXzIgYmVsb3cKJFNJRF9OQU1FX1VTRSA9IHBzZW51bSAkTW9kIFNJRF9OQU1FX1VTRSBVSW50MTYgQHsKICAgIFNpZFR5cGVVc2VyICAgICAgICAgICAgID0gMQogICAgU2lkVHlwZUdyb3VwICAgICAgICAgICAgPSAyCiAgICBTaWRUeXBlRG9tYWluICAgICAgICAgICA9IDMKICAgIFNpZFR5cGVBbGlhcyAgICAgICAgICAgID0gNAogICAgU2lkVHlwZVdlbGxLbm93bkdyb3VwICAgPSA1CiAgICBTaWRUeXBlRGVsZXRlZEFjY291bnQgICA9IDYKICAgIFNpZFR5cGVJbnZhbGlkICAgICAgICAgID0gNwogICAgU2lkVHlwZVVua25vd24gICAgICAgICAgPSA4CiAgICBTaWRUeXBlQ29tcHV0ZXIgICAgICAgICA9IDkKfQoKIyB0aGUgTmV0TG9jYWxHcm91cEdldE1lbWJlcnMgcmVzdWx0IHN0cnVjdHVyZQokTE9DQUxHUk9VUF9NRU1CRVJTX0lORk9fMiA9IHN0cnVjdCAkTW9kIExPQ0FMR1JPVVBfTUVNQkVSU19JTkZPXzIgQHsKICAgIGxncm1pMl9zaWQgPSBmaWVsZCAwIEludFB0cgogICAgbGdybWkyX3NpZHVzYWdlID0gZmllbGQgMSAkU0lEX05BTUVfVVNFCiAgICBsZ3JtaTJfZG9tYWluYW5kbmFtZSA9IGZpZWxkIDIgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKfQoKIyBlbnVtcyB1c2VkIGluIERTX0RPTUFJTl9UUlVTVFMKJERzRG9tYWluRmxhZyA9IHBzZW51bSAkTW9kIERzRG9tYWluLkZsYWdzIFVJbnQzMiBAewogICAgSU5fRk9SRVNUICAgICAgID0gMQogICAgRElSRUNUX09VVEJPVU5EID0gMgogICAgVFJFRV9ST09UICAgICAgID0gNAogICAgUFJJTUFSWSAgICAgICAgID0gOAogICAgTkFUSVZFX01PREUgICAgID0gMTYKICAgIERJUkVDVF9JTkJPVU5EICA9IDMyCn0gLUJpdGZpZWxkCiREc0RvbWFpblRydXN0VHlwZSA9IHBzZW51bSAkTW9kIERzRG9tYWluLlRydXN0VHlwZSBVSW50MzIgQHsKICAgIERPV05MRVZFTCAgID0gMQogICAgVVBMRVZFTCAgICAgPSAyCiAgICBNSVQgICAgICAgICA9IDMKICAgIERDRSAgICAgICAgID0gNAp9CiREc0RvbWFpblRydXN0QXR0cmlidXRlcyA9IHBzZW51bSAkTW9kIERzRG9tYWluLlRydXN0QXR0cmlidXRlcyBVSW50MzIgQHsKICAgIE5PTl9UUkFOU0lUSVZFICAgICAgPSAxCiAgICBVUExFVkVMX09OTFkgICAgICAgID0gMgogICAgRklMVEVSX1NJRFMgICAgICAgICA9IDQKICAgIEZPUkVTVF9UUkFOU0lUSVZFICAgPSA4CiAgICBDUk9TU19PUkdBTklaQVRJT04gID0gMTYKICAgIFdJVEhJTl9GT1JFU1QgICAgICAgPSAzMgogICAgVFJFQVRfQVNfRVhURVJOQUwgICA9IDY0Cn0KCiMgdGhlIERzRW51bWVyYXRlRG9tYWluVHJ1c3RzIHJlc3VsdCBzdHJ1Y3R1cmUKJERTX0RPTUFJTl9UUlVTVFMgPSBzdHJ1Y3QgJE1vZCBEU19ET01BSU5fVFJVU1RTIEB7CiAgICBOZXRiaW9zRG9tYWluTmFtZSA9IGZpZWxkIDAgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIERuc0RvbWFpbk5hbWUgPSBmaWVsZCAxIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBGbGFncyA9IGZpZWxkIDIgJERzRG9tYWluRmxhZwogICAgUGFyZW50SW5kZXggPSBmaWVsZCAzIFVJbnQzMgogICAgVHJ1c3RUeXBlID0gZmllbGQgNCAkRHNEb21haW5UcnVzdFR5cGUKICAgIFRydXN0QXR0cmlidXRlcyA9IGZpZWxkIDUgJERzRG9tYWluVHJ1c3RBdHRyaWJ1dGVzCiAgICBEb21haW5TaWQgPSBmaWVsZCA2IEludFB0cgogICAgRG9tYWluR3VpZCA9IGZpZWxkIDcgR3VpZAp9CgokVHlwZXMgPSAkRnVuY3Rpb25EZWZpbml0aW9ucyB8IEFkZC1XaW4zMlR5cGUgLU1vZHVsZSAkTW9kIC1OYW1lc3BhY2UgJ1dpbjMyJwokTmV0YXBpMzIgPSAkVHlwZXNbJ25ldGFwaTMyJ10KJEFkdmFwaTMyID0gJFR5cGVzWydhZHZhcGkzMiddCiRXdHNhcGkzMiA9ICRUeXBlc1snd3RzYXBpMzInXQo=
