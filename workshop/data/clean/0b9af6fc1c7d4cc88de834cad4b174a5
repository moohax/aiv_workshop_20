OutXml.Internal.ps1,ab22069c22ab28a55732a8c62494ead9,Scan result is 1. IsMalware: 0,ICAgICAgICAjcmVnaW9uIE91dFhtbCBQcml2YXRlIEZ1bmN0aW9ucwoKICAgICAgICBmdW5jdGlvbiBPdXRYbWxTZWN0aW9uIHsKICAgICAgICA8IwogICAgICAgICAgICAuU1lOT1BTSVMKICAgICAgICAgICAgICAgIE91dHB1dCBmb3JtYXR0ZWQgWG1sIHNlY3Rpb24uCiAgICAgICAgIz4KICAgICAgICAgICAgW0NtZGxldEJpbmRpbmcoKV0KICAgICAgICAgICAgcGFyYW0gKAogICAgICAgICAgICAgICAgIyMgUFNjcmlibyBkb2N1bWVudCBzZWN0aW9uCiAgICAgICAgICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSwgVmFsdWVGcm9tUGlwZWxpbmUpXQogICAgICAgICAgICAgICAgW1N5c3RlbS5PYmplY3RdICRTZWN0aW9uCiAgICAgICAgICAgICkKICAgICAgICAgICAgcHJvY2VzcyB7CgogICAgICAgICAgICAgICAgJHNlY3Rpb25JZCA9ICgkU2VjdGlvbi5JZCAtcmVwbGFjZSAnW15hLXowLTktX1wuXScsJycpLlRvTG93ZXIoKTsKICAgICAgICAgICAgICAgICRlbGVtZW50ID0gJHhtbERvY3VtZW50LkNyZWF0ZUVsZW1lbnQoJHNlY3Rpb25JZCk7CiAgICAgICAgICAgICAgICBbcmVmXSAkbnVsbCA9ICRlbGVtZW50LlNldEF0dHJpYnV0ZSgibmFtZSIsICRTZWN0aW9uLk5hbWUpOwogICAgICAgICAgICAgICAgZm9yZWFjaCAoJHMgaW4gJFNlY3Rpb24uU2VjdGlvbnMuR2V0RW51bWVyYXRvcigpKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRzLklkLkxlbmd0aCAtZ3QgNDApIHsgJHNlY3Rpb25JZCA9ICd7MH0uLicgLWYgJHMuSWQuU3Vic3RyaW5nKDAsMzgpOyB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7ICRzZWN0aW9uSWQgPSAkcy5JZDsgfQogICAgICAgICAgICAgICAgICAgICRjdXJyZW50SW5kZW50YXRpb25MZXZlbCA9IDE7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRudWxsIC1uZSAkcy5QU09iamVjdC5Qcm9wZXJ0aWVzWydMZXZlbCddKSB7ICRjdXJyZW50SW5kZW50YXRpb25MZXZlbCA9ICRzLkxldmVsICsxOyB9CiAgICAgICAgICAgICAgICAgICAgV3JpdGVMb2cgLU1lc3NhZ2UgKCRsb2NhbGl6ZWQuUGx1Z2luUHJvY2Vzc2luZ1NlY3Rpb24gLWYgJHMuVHlwZSwgJHNlY3Rpb25JZCkgLUluZGVudCAkY3VycmVudEluZGVudGF0aW9uTGV2ZWw7CiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICgkcy5UeXBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICdQU2NyaWJvLlNlY3Rpb24nIHsgW3JlZl0gJG51bGwgPSAkZWxlbWVudC5BcHBlbmRDaGlsZCgoT3V0WG1sU2VjdGlvbiAtU2VjdGlvbiAkcykpOyB9CiAgICAgICAgICAgICAgICAgICAgICAgICdQU2NyaWJvLlBhcmFncmFwaCcgeyBbcmVmXSAkbnVsbCA9ICRlbGVtZW50LkFwcGVuZENoaWxkKChPdXRYbWxQYXJhZ3JhcGggLVBhcmFncmFwaCAkcykpOyB9CiAgICAgICAgICAgICAgICAgICAgICAgICdQU2NyaWJvLlRhYmxlJyB7IFtyZWZdICRudWxsID0gJGVsZW1lbnQuQXBwZW5kQ2hpbGQoKE91dFhtbFRhYmxlIC1UYWJsZSAkcykpOyB9CiAgICAgICAgICAgICAgICAgICAgICAgICdQU2NyaWJvLlBhZ2VCcmVhaycgeyB9ICMjIFBhZ2UgYnJlYWtzIGFyZSBub3QgaW1wbGVtZW50ZWQgZm9yIFhtbCBvdXRwdXQKICAgICAgICAgICAgICAgICAgICAgICAgJ1BTY3JpYm8uTGluZUJyZWFrJyB7IH0gIyMgTGluZSBicmVha3MgYXJlIG5vdCBpbXBsZW1lbnRlZCBmb3IgWG1sIG91dHB1dAogICAgICAgICAgICAgICAgICAgICAgICAnUFNjcmliby5CbGFua0xpbmUnIHsgfSAjIyBCbGFuayBsaW5lcyBhcmUgbm90IGltcGxlbWVudGVkIGZvciBYbWwgb3V0cHV0CiAgICAgICAgICAgICAgICAgICAgICAgICdQU2NyaWJvLlRPQycgeyB9ICMjIFRPQyBpcyBub3QgaW1wbGVtZW50ZWQgZm9yIFhtbCBvdXRwdXQKICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZUxvZyAtTWVzc2FnZSAoJGxvY2FsaXplZC5QbHVnaW5VbnN1cHBvcnRlZFNlY3Rpb24gLWYgJHMuVHlwZSkgLUlzV2FybmluZzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gI2VuZCBzd2l0Y2gKICAgICAgICAgICAgICAgIH0gI2VuZCBmb3JlYWNoCiAgICAgICAgICAgICAgICByZXR1cm4gJGVsZW1lbnQ7CgogICAgICAgICAgICB9ICNlbmQgcHJvY2VzcwogICAgICAgIH0gI2VuZCBmdW5jdGlvbiBvdXR4bWxzZWN0aW9uCgoKICAgICAgICBmdW5jdGlvbiBPdXRYbWxQYXJhZ3JhcGggewogICAgICAgIDwjCiAgICAgICAgICAgIC5TWU5PUFNJUwogICAgICAgICAgICAgICAgT3V0cHV0IGZvcm1hdHRlZCBYbWwgcGFyYWdyYXBoLgogICAgICAgICM+CiAgICAgICAgICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICAgICAgICAgIHBhcmFtICgKICAgICAgICAgICAgICAgICMjIFBTY3JpYm8gcGFyYWdyYXBoIG9iamVjdAogICAgICAgICAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnksIFZhbHVlRnJvbVBpcGVsaW5lKV0KICAgICAgICAgICAgICAgIFtWYWxpZGF0ZU5vdE51bGwoKV0KICAgICAgICAgICAgICAgIFtTeXN0ZW0uT2JqZWN0XSAkUGFyYWdyYXBoCiAgICAgICAgICAgICkKICAgICAgICAgICAgcHJvY2VzcyB7CgogICAgICAgICAgICAgICAgaWYgKC1ub3QgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRQYXJhZ3JhcGguVmFsdWUpKSkgewogICAgICAgICAgICAgICAgICAgICMjIFZhbHVlIG92ZXJyaWRlIHNwZWNpZmllZAogICAgICAgICAgICAgICAgICAgICRwYXJhZ3JhcGhJZCA9ICgkUGFyYWdyYXBoLklkIC1yZXBsYWNlICdbXmEtejAtOS1fXC5dJywnJykuVG9Mb3dlcigpOwogICAgICAgICAgICAgICAgICAgICRwYXJhZ3JhcGhFbGVtZW50ID0gJHhtbERvY3VtZW50LkNyZWF0ZUVsZW1lbnQoJHBhcmFncmFwaElkKTsKICAgICAgICAgICAgICAgICAgICBbcmVmXSAkbnVsbCA9ICRwYXJhZ3JhcGhFbGVtZW50LkFwcGVuZENoaWxkKCR4bWxEb2N1bWVudC5DcmVhdGVUZXh0Tm9kZSgkUGFyYWdyYXBoLlZhbHVlKSk7CiAgICAgICAgICAgICAgICB9ICNlbmQgaWYKICAgICAgICAgICAgICAgIGVsc2VpZiAoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJFBhcmFncmFwaC5UZXh0KSkgewogICAgICAgICAgICAgICAgICAgICMjIE5vIElkL05hbWUgc3BlY2lmaWVkLCB0aGVyZWZvcmUgaW5zZXJ0IGFzIGEgY29tbWVudAogICAgICAgICAgICAgICAgICAgICRwYXJhZ3JhcGhFbGVtZW50ID0gJHhtbERvY3VtZW50LkNyZWF0ZUNvbW1lbnQoKCcgezB9ICcgLWYgJFBhcmFncmFwaC5JZCkpOwogICAgICAgICAgICAgICAgfSAjZW5kIGVsc2VpZgogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgIyMgQ3JlYXRlIGFuIGVsZW1lbnQgd2l0aCB0aGUgSWQvTmFtZQogICAgICAgICAgICAgICAgICAgICRwYXJhZ3JhcGhJZCA9ICgkUGFyYWdyYXBoLklkIC1yZXBsYWNlICdbXmEtejAtOS1fXC5dJywnJykuVG9Mb3dlcigpOwogICAgICAgICAgICAgICAgICAgICRwYXJhZ3JhcGhFbGVtZW50ID0gJHhtbERvY3VtZW50LkNyZWF0ZUVsZW1lbnQoJHBhcmFncmFwaElkKTsKICAgICAgICAgICAgICAgICAgICBbcmVmXSAkbnVsbCA9ICRwYXJhZ3JhcGhFbGVtZW50LkFwcGVuZENoaWxkKCR4bWxEb2N1bWVudC5DcmVhdGVUZXh0Tm9kZSgkUGFyYWdyYXBoLlRleHQpKTsKICAgICAgICAgICAgICAgIH0gI2VuZCBlbHNlCiAgICAgICAgICAgICAgICByZXR1cm4gJHBhcmFncmFwaEVsZW1lbnQ7CgogICAgICAgICAgICB9ICNlbmQgcHJvY2VzcwogICAgICAgIH0gI2VuZCBmdW5jdGlvbiBvdXR4bWxwYXJhZ3JhcGgKCgogICAgICAgIGZ1bmN0aW9uIE91dFhtbFRhYmxlIHsKICAgICAgICA8IwogICAgICAgICAgICAuU1lOT1BTSVMKICAgICAgICAgICAgICAgIE91dHB1dCBmb3JtYXR0ZWQgWG1sIHRhYmxlLgogICAgICAgICM+CiAgICAgICAgICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICAgICAgICAgIHBhcmFtICgKICAgICAgICAgICAgICAgICMjIFBTY3JpYm8gdGFibGUgb2JqZWN0CiAgICAgICAgICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSwgVmFsdWVGcm9tUGlwZWxpbmUpXQogICAgICAgICAgICAgICAgW1ZhbGlkYXRlTm90TnVsbCgpXQogICAgICAgICAgICAgICAgW1N5c3RlbS5PYmplY3RdICRUYWJsZQogICAgICAgICAgICApCiAgICAgICAgICAgIHByb2Nlc3MgewoKICAgICAgICAgICAgICAgICR0YWJsZUlkID0gKCRUYWJsZS5JZCAtcmVwbGFjZSAnW15hLXowLTktX1wuXScsJycpLlRvTG93ZXIoKTsKICAgICAgICAgICAgICAgICR0YWJsZUVsZW1lbnQgPSAkZWxlbWVudC5BcHBlbmRDaGlsZCgkeG1sRG9jdW1lbnQuQ3JlYXRlRWxlbWVudCgkdGFibGVJZCkpOwogICAgICAgICAgICAgICAgW3JlZl0gJG51bGwgPSAkdGFibGVFbGVtZW50LlNldEF0dHJpYnV0ZSgnbmFtZScsICRUYWJsZS5OYW1lKTsKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRyb3cgaW4gJFRhYmxlLlJvd3MpIHsKICAgICAgICAgICAgICAgICAgICAkZ3JvdXBFbGVtZW50ID0gJHRhYmxlRWxlbWVudC5BcHBlbmRDaGlsZCgkeG1sRG9jdW1lbnQuQ3JlYXRlRWxlbWVudCgnZ3JvdXAnKSk7CiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJHByb3BlcnR5IGluICRyb3cuUFNPYmplY3QuUHJvcGVydGllcykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoLW5vdCAoJHByb3BlcnR5Lk5hbWUpLkVuZHNXaXRoKCdfX1N0eWxlJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwcm9wZXJ0eUlkID0gKCRwcm9wZXJ0eS5OYW1lIC1yZXBsYWNlICdbXmEtejAtOS1fXC5dJywnJykuVG9Mb3dlcigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvd0VsZW1lbnQgPSAkZ3JvdXBFbGVtZW50LkFwcGVuZENoaWxkKCR4bWxEb2N1bWVudC5DcmVhdGVFbGVtZW50KCRwcm9wZXJ0eUlkKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyBPbmx5IGFkZCB0aGUgTmFtZSBhdHRyaWJ1dGUgaWYgdGhlcmUncyBhIGRpZmZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkcHJvcGVydHkuTmFtZSAtbmUgJHByb3BlcnR5SWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbcmVmXSAkbnVsbCA9ICRyb3dFbGVtZW50LlNldEF0dHJpYnV0ZSgnbmFtZScsICRwcm9wZXJ0eS5OYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtyZWZdICRudWxsID0gJHJvd0VsZW1lbnQuQXBwZW5kQ2hpbGQoJHhtbERvY3VtZW50LkNyZWF0ZVRleHROb2RlKCRyb3cuKCRwcm9wZXJ0eS5OYW1lKSkpOwogICAgICAgICAgICAgICAgICAgICAgICB9ICNlbmQgaWYKICAgICAgICAgICAgICAgICAgICB9ICNlbmQgZm9yZWFjaCBwcm9wZXJ0eQogICAgICAgICAgICAgICAgfSAjZW5kIGZvcmVhY2ggcm93CiAgICAgICAgICAgICAgICByZXR1cm4gJHRhYmxlRWxlbWVudDsKCiAgICAgICAgICAgIH0gI2VuZCBwcm9jZXNzCiAgICAgICAgfSAjZW5kIG91dHhtbHRhYmxlCgogICAgICAgICNlbmRyZWdpb24gT3V0WG1sIFByaXZhdGUgRnVuY3Rpb25zCg==
