NewMachineSetup.ps1,952a1da932240b03a0c73c780e123249,Scan result is 1. IsMalware: 0,ï»¿#-----------------------
#    MLM New user setup
#-----------------------
#Created by prezpwns
#Contact: prezpwns@gmail.com
#Version 1.1
#Date: 02-21-14
#..Requires Powershell version 3
#..Requires .Net Version 3.5

param($Step="A")

If (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator"))
    {   
    $arguments = "& '" + $myinvocation.mycommand.definition + "'"
    Start-Process powershell -Verb runAs -ArgumentList $arguments
    Break
    }

# -------------------------------------
# Imports
# -------------------------------------
$script = $myInvocation.MyCommand.Definition
$scriptPath = Split-Path -parent $script
. (Join-Path $scriptpath functions.ps1)
. (Join-Path $scriptpath New-MessageBox.ps1)
. (Join-Path $scriptpath Install.NetFrameWork3.5.ps1)
. (Join-Path $scriptpath AddPath.ps1)

Clear-Any-Restart

$ErrorActionPreference ="SilentlyContinue"
$time = (Get-Date).ToString()
$Computer = $Env:Computername
$Logfile = 'C:\temp\NMS\NMSlog.txt'

if (Should-Run-Step "A") {
  
  If (!(test-path 'c:\temp\NMS\NMSlog.txt')) {
      New-Item -ItemType File 'c:\temp\NMS\NMSlog.txt' -force;
      $Logfile = 'C:\temp\NMS\NMSlog.txt'
      }

  ####  Preliminary Script 'A' Functions  ####
 
  #Information
  "$time - $Computer - Beginning New machine configuration" | out-file $logfile -Append
  
    #Set password for local MLM account
    Function Create-MLMAcct {
        
        Function Get-Passwd {
        $SecurePW = Read-Host -AsSecureString "Please enter local password (hint: strong)" #Get the password as a secure string
        $SecurePW2 = Read-Host -AsSecureString "Please re-enter local password for verification (hint: strong)"
        $pwd1 = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($SecurePW))
        $pwd2 = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($SecurePW2))
        }
        Get-Passwd
           
      Try 
      {
                If ($pwd1.compareTo($pwd2) -eq 0) {
                Write-Host -fore Cyan "Local password set."
                    } Else {
                Write-Host -fore Red "Invalid credentials. Please check username/password and try again."; Get-Passwd
                }
                #$ErrorActionPreference = "SilentlyContinue"
                Write-Host -fore Cyan "Creating local account..."
                Net user MLM $pwd2 /add
                net localgroup administrators "MLM" /add
                $User = [ADSI]"WinNT://$Env:Computername/MLM"; # Bind to the MLM acct within the local admin group
                $User.SetPassword($pwd2); #Sets the password
                $User.Setinfo(); #Commit
                $User.UserFlags = 65536; #Set to never expire
                $User.SetInfo(); #commit
                Write-Host -fore -cyan "Creating local account..."
      }
      Catch 
      {
                "$time - $Computer : Caught an exception:" | out-file $Logfile -Append
                "$time - $Computer : Exception Type: $($_.Exception.GetType().FullName)" | out-file $Logfile -Append
                "$time - $Computer : Exception Message: $($_.Exception.Message)" | out-file $Logfile -Append
       
      }
    }

#Check to see if local MLM account has been created. If not, run through process of creating
  $MLM = [ADSI]("WinNT://$Env:Computername,computer")
  $ColMLM = ($MLM.psbase.children |
      Where-Object {$_.psBase.schemaClassName -eq "user"} |
          Select-Object -Expand Name)
  $blnMLM = $ColMLM -contains "MLM"

    If (!($blnMLM)) {
    Create-MLMAcct
    }Else{
    Write-Host -fore Green "Local account exists."
    "$time - $computer : Skipping local account creation. Account already exists." #| Out-File $Logfile -Append
    }

  #Disable built-in Admin account, unless Windows 8 (Admin acct disabled by default)
  If (!($OsVersion -like "6.3.*")) {
  "$time -  $Computer - Built-in Local Administrator account disabled" | Out-File $logfile -Append
  C:\windows\system32\net user administrator /active:No
  Write-Host -fore Cyan "Built-in Local Administrator account disabled"
  }

  #Disables UAC
  $UACReg = Get-ItemProperty -Path HKLM:\Software\Microsoft\Windows\CurrentVersion\policies\system -Name "EnableLUA"
  If ($UACReg.EnableLUA -ne 0) {
  set-itemproperty -Path HKLM:\Software\Microsoft\Windows\Currentversion\policies\system -Name "EnableLUA" -value 0 -Force | Out-Null
  "$time - $computer : UAC disabled." | Out-File $Logfile -Append
  Write-Host -fore cyan "UAC disabled."
  }

  #Checks for Installed .Net Version, if 3.5 is NOT installed, install it
  $DotNetResult = Dism /online /Get-featureinfo /featurename:NetFx3

  #Runs a check for currently installed .Net version. If .Net 3.5 is NOT installed, copy the files from Ted, then install
  Function DotNet3.5 {
    If ($DotNetResult -Match "State : Enabled") {
    Write-Host -fore Green ".Net 3.5 is enabled."
    "$time - $computer : .Net 3.5 is installed and enabled." | Out-File $Logfile -Append
        }Else{
      Clear-Host
      Write-Host -Fore Yellow "Dot Net Version 3.5 must be installed to continue. Connecting to network share for installation..."
      "$time - $computer : Dot Net Version 3.5 must be installed to continue. Connecting to network share for installation..." | Out-File $Logfile -Append
      $Domain = "WORLDCLASS"
      $User = Read-host "Enter domain username"
       
       Function Get-DomPasswd {
        $SecurePW = Read-Host -AsSecureString "Please enter your domain password" #Get the password as a secure string
        $SecurePW2 = Read-Host -AsSecureString "Please re-enter password for verification"
        $pwd1 = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($SecurePW))
        $pwd2 = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($SecurePW2))

        If (!($pwd1.compareTo($pwd2) -eq 0)) {
        Write-Host -fore Red "Passwords do not match. Please try again."; Get-Passwd;
        }Else{
        #Map network drive
        $net = New-Object -ComObject "Wscript.Network"; $net.MapNetworkDrive("I:","\\ted\install$",0,$domain+"\"+$user,$pwd2)
        }
        }
        Get-DomPasswd

            If ([System.IntPtr]::Size -eq 4) {
                Write-Host -Fore Green "Installing .Net Framework 3.5 for Windows 8..."
                "$time - $computer : Installing .Net Framework 3.5 for Windows 8..." | Out-File $Logfile -Append
                DISM /Online /Enable-Feature /FeatureName:NetFx3 /All /Source:"I:\DotNetFX35\SXS-Win8-1-Ent-N x86" /LimitAccess
                    }Else{
                Write-Host -Fore Green "Installing .Net Framework 3.5 for Windows 8..."
                "$time - $computer : Installing .Net Framework 3.5 for Windows 8..." | Out-File $Logfile -Append
                DISM /Online /Enable-Feature /FeatureName:NetFx3 /All /Source:"I:\DotNetFX35\SXS-Win8-1-Pro-x64" /LimitAccess
                }
            }
    }
	If($DotNetResult -match "State : Enabled") {
        "$time - $computer : .Net Framework 3.5 installed successfully." | Out-File $Logfile -Append
	    Write-Host -Fore Green ".Net Framework 3.5 installed successfully."
            }Else{
        "$time - $computer : Failed to Install .Net 3.5. Please make sure the source is correct or that you have admin rights." | Out-File $Logfile -Append
	    Write-Host -fore Red "Failed to Install .Net 3.5. Please make sure the source is correct or that you have admin rights."
		}
  #Check OS version, Run .Net 3.5 install if Win8 
  ### OS Version Reference ###  
  # WinXp Pro SP3 = 5.1.2600
  # Win7 Pro SP1 = 6.1.7601
  # Win8.1 N Pro = 6.3.9600

  $OsVersion = (Get-WMIobject Win32_OperatingSystem).Version
      If ($OsVersion -like "5.1.*") {
          "Windows XP Pro Detected"
          }Elseif ($OsVersion -like "6.1.*"){
          "Windows 7 Pro Detected"
          }Elseif ($OsVersion -like "6.3.*") {
          DotNet3.5
          }Else{
          "$time - $Computer - Operating system not supported. Exiting setup."  | out-file $logfile -Append
          Write-Host -fore Red "$time - $Computer - Operating system not supported. Exiting setup."; Wait-For-Keypress "Could not determine OS."; Exit
          }
  
   #Activate Windows 8.1
    $OsVersion = (Get-WMIobject Win32_OperatingSystem).Version
        If ($OsVersion -like "6.3.*") {
          Write-Host -fore Cyan "Windows 8.1 activation started..."
          sleep -Seconds 3
          "Windows 8.1 activation started..." | Out-File $logfile -Append
           $key = GC 'I:\windows\Win8.1-key.txt'
           $service = get-wmiObject -query "select * from SoftwareLicensingService" -computername $computer
           $service.InstallProductKey($key) | Out-Null
           $service.RefreshLicenseStatus() | Out-Null
           Write-Host -Fore Cyan "Windows activated."
          } Else {
          " "
          }
   
  #Enables remote desktop via registry
  Pushd; 
  Set-Itemproperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server' -Name fDenyTSConnections -Value 0 -Type Dword;
  Popd;
  "$Time - $Computer - Remote Desktop enabled." | Out-File $Logfile -Append
  Write-Host "$Time - $Computer - Remote Desktop enabled."  
  Sleep -Seconds 3

  #Enables PS Remoting
  Enable-PSRemoting -Force

  #Rename PC - asks user if host name should be changed
  Function RenamePC {
    $newname = Read-Host  "Enter new host name"
    Rename-Computer -Newname $newname -Force -Passthru;
    "$time - Computer renamed to $Newname" | Out-File $Logfile -Append
    Restart-And-Resume $Script "B"
    }

  $RenameAnswer = New-MessageBox -message "Do you want to rename this host? (Use DT-XXXX-XX for desktops LT-XXXX-XX for laptops)" -icon Question -button "YesNoCancel" -title "Rename Host" 
    Switch ($RenameAnswer) {
      "Yes" {RenamePC}
      "No" {"$time - $Computer - User declined to rename host" | out-file $Logfile -Append}
      "Cancel" {"Exiting program....."; Sleep -seconds 2; Exit}
      Default {"Nothing Returned"}
      }
}

If (Should-Run-Step "B") {

    #Run this function if the user declines to add host to the domain
    Function Standalone {
    
    Write-Host -fore Green "Beginning standalone host setup..."
    "$time - $computer - Beginning standalone host setup..." | Out-File $Logfile -Append
    Sleep -Seconds 5
    
    #Get user domain credentials
    $Domain = "WORLDCLASS"
    $User = Read-host "Enter domain username"
    $SecurePW = Read-Host -AsSecureString "Please enter your password" #Get the password as a secure string
    $tempCred = New-Object System.Management.Automation.PSCredential("Temp",$securePW) #Create a temporary encrypted string 
    $newcred = $tempCred.GetNetworkCredential() #capture temp credential for conversion
    $userPW = $newcred.Password.ToString()
    
    #Connect to Install$ to install various programs
    $net = New-Object -ComObject "Wscript.Network"; $net.MapNetworkDrive("I:","\\ted\install$",0,$domain+"\"+$user,$userPW)

    #Installs Runtimes, Foxit PDF Reader, 
    Write-Host -fore cyan "$time - $Computer - Installing 'Standalone' ninite package."
    "$time - $Computer - Installing 'Standalone' ninite package." | Out-File $Logfile -Append
        Start-Process "I:\Ninite\Standalone.exe" -Wait
    
    Clear-Host

    #Installs OpenVPN
    Write-Host -fore cyan "$time - $Computer - Installing OpenVPN...."
    "$time - $Computer - Installing OpenVPN...." | Out-File $Logfile -Append
    Start-Process "I:\OpenVPN\openvpn-2.1_rc20-install.exe" -Wait

    Clear-Host

    #Install Logmein software
    Write-Host -fore cyan "$time - $Computer - Installing Logmein...."
    "$time - $Computer - Installing Logmein...." | Out-File $Logfile -Append
        $Logmein = "I:\LogMeIn\logmein.msi"
        $Arguments = '/qb'
            Start-Process $Logmein -argumentlist $Arguments -Wait

    Clear-Host

     #Install Office 2010 
     Write-Host -fore cyan "$time - $Computer - Office 2010 Standard...."
     "$time - $Computer - Office 2010 Standard...." | Out-File $Logfile -Append
     $Office2010 = "I:\office\Office2010\Office2010Standardx32\StandardSP1\setup.exe"
        Start-Process $Office2010 -wait
    
    Clear-Host

    #Add Intranet as trusted site
    Write-Host -fore cyan "Importing Secure site Registry key"
    "$time - $computer - Importing Secure site Registry key" | Out-File $Logfile -Append
    Regedit /s "I:\Registry Keys\Add-MLMINS-trustedsite.reg"

    Clear-Host

    #exports computer information to text file
    $net.MapNetworkDrive("P:","\\mlmfp1\sharedat",0,$domain+"\"+$user,$userPW)
    $Compinfo = "P:\IT\Logs\Computer info\$computer.txt"
    $computerSystem = get-wmiobject Win32_ComputerSystem
    $computerBIOS = get-wmiobject Win32_BIOS
    $computerOS = get-wmiobject Win32_OperatingSystem

    If (!(Test-Path $Compinfo)) {
       New-Item -ItemType File $Compinfo -Force
       }

    "System Information for: " + $computerSystem.Name | Out-file $Compinfo -Append
    "" | Out-file $Compinfo -Append
    "Manufacturer: " + $computerSystem.Manufacturer | Out-file $Compinfo -Append
    "Model: " + $computerSystem.Model | Out-file $Compinfo -Append
    "Serial Number: " + $computerBIOS.SerialNumber | Out-file $Compinfo -Append
    "Operating System: " + $computerOS.caption + ", Service Pack: " + $computerOS.ServicePackMajorVersion | Out-file $Compinfo -Append
    "Total Memory(GB) " + (gwmi Win32_ComputerSystem -Cn $Computer | select @{name="TotalPhysicalMemory";expression={($_.TotalPhysicalMemory/1GB).tostring("N0")}}).TotalPhysicalMemory | Out-file $Compinfo -Append
    "User logged In: " + $computerSystem.UserName | Out-file $Compinfo -Append

    Clear-host

    Write-Host -fore Yellow "System information exported to: $Compinfo"
    "$time - $computer : System information exported to: $Compinfo" | Out-File $Logfile -Append
    
    #Remove mapped network drive
    $net.RemoveNetworkDrive("I:")

    #Disables AutoLogon if enabled
    $AdminLogon = Get-Itemproperty 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name AutoAdminLogon
    If (($AdminLogon).AutoAdminLogon -ne 0) {
    Write-Host -fore cyan "Disabling Autologon..."
    Sleep -Seconds 2
    Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\windows NT\CurrentVersion\Winlogon' -Name AutoAdminLogon -Value 0 
    } Else {
    Write-Host -fore Green "Autologon already disabled."
    }
    
    #Removes Restart-and-Resume registry key
    Clear-any-Restart

    #Opens MLM Inventory page
    Write-Host -Fore Cyan "Please fill out inventory sheet with supplied information."
    Sleep -Seconds 3
    Invoke-Item "P:\it\logs\Computer info\$computer.txt"
    Start "http://portal2.mlmins.com/teamsites/IT/Lists/Inventory/Overview.aspx"
    
    #Plays a system beep to inform tech of script completion
    $net.RemoveNetworkDrive("P:")
    [System.Console]::Beep(4000,1000)
    "$time - $Computer :Host (Domain) setup and configuration has completed." | Out-File $Logfile -Append
    Wait-For-Keypress "$time - $Computer Host (Standalone) setup and configuration has completed. Please run 'c:\temp\NMS\UserSetup.ps1' after logging in as the user."; Exit
    }

#Join machine to domain
    Function ChangeDom {
        $domain = "WORLDCLASS"
        $user = Read-Host "Enter User Name"
        $password = Read-Host -Prompt "Enter password for $user" -AsSecureString
        $username = "$domain\$user"
        $credential = New-Object System.Management.Automation.PSCredential($username,$password)
            Add-Computer -DomainName $domain -Credential $credential
            Write-Host -fore Yellow "The script will continue after the host restarts..."; Sleep -Seconds 3
            "$time - $Computer : $username added the local host to the Worldclass domain" | out-File $Logfile -Append
            Restart-And-Resume $Script "C"
        }

        $DomainChange = New-Messagebox -message "Join host to the $domain domain?" -icon question -button "YesNoCancel" -title "Join MLM Domain?"
	    Switch ($DomainChange) {
            "Yes" {ChangeDom}
            "No" {Standalone}
            "Cancel" {"Exiting program....."; Sleep -seconds 2; Exit}
            Default {"Nothing Returned"}
            }
}

If (Should-Run-Step "C") {
    
    # -------------------------------------
    # Imports
    # -------------------------------------
    $script = $myInvocation.MyCommand.Definition
    $scriptPath = Split-Path -parent $script
    . (Join-Path $scriptpath functions.ps1)
    . (Join-Path $scriptpath New-MessageBox.ps1)
       
    Clear-Any-Restart


    #Set Variables 
    $Computer = $Env:Computername
    $Logfile = 'C:\temp\NMS\NMSlog.txt'
   
    Write-Host -fore Green "Beginning domain host setup..."
    "$time - $computer - Beginning domain host setup..." | Out-File $Logfile -Append
    Sleep -Seconds 5

    #Get user domain credentials
    $Domain = "WORLDCLASS"
    $User = Read-host "Enter domain username"
    $SecurePW = Read-Host -AsSecureString "Please enter your password" #Get the password as a secure string
    $tempCred = New-Object System.Management.Automation.PSCredential("Temp",$securePW) #Create a temporary encrypted string 
    $newcred = $tempCred.GetNetworkCredential() #capture temp credential for conversion
    $userPW = $newcred.Password.ToString()
    
    #Connect to Install$ to install various programs
    $net = New-Object -ComObject "Wscript.Network"; $net.MapNetworkDrive("I:","\\ted\install$",0,$domain+"\"+$user,$userPW)

    #Adds user as local administrator
    Function AddLocalAdmin {
        $ErrorActionPreference = "SilentlyContinue"
        $DomUser = Read-Host "Enter username to be added as local administrator"
        Net user "Worldclass\$DomUser" /add
        net localgroup administrators "Worldclass\$DomUser" /add 
        Write-Host -Fore Cyan "$DomUser is now member of local group 'Administrators' on $computer."
        }
    $AddAdmin = New-Messagebox -message "Would you like to add a Username as a local Admin?" -icon question -button "YesNoCancel" -title "Add user as Administrator on $computer ?"
    
    Switch ($AddAdmin) {
            "Yes" {AddLocalAdmin}
            "No" {"$time - $computer : No user added as Admin" | out-file $logfile -Append }
            "Cancel" {Exit}
            }
    
    #Copy OCX file to System32 dir
    $OCX = "I:\msflxgrd.ocx"
    $Sys32 = [System.Environment]::ExpandEnvironmentVariables("%SystemRoot%\System32")
    $MLM = "I:\MLM"
    $ProgFiles = 'C:\Program Files\'
    "$time - $Computer - MSFLXGRD.OCX Copied to $Sys32" | Out-File $Logfile -Append
        Copy-Item $OCX $Sys32 -Force
    Write-Host -fore Cyan "$time - $Computer - MSFLXGRD.OCX Copied to $Sys32"
    
    Clear-Host

    #Adds Environment Variable 
    Add-Path -NewPath C:\Program Files\MLM

    #Copy files to the Program files dir
    Write-Host "Copying MLM files to: C:\Program files"
    "$Time - $Computer - Copying MLM files to: C:\Program files"  | Out-File $Logfile -Append

    $TotalItems = Get-ChildItem $MLM -Recurse
    $FileCount = $TotalItems.Count
    $FileNumber = 0
    Write-Verbose "Currently Copying MLM Files" | Out-File $Logfile -Append
    ForEach ($Item in $TotalItems) {
        Copy-Item -Path $MLM\$Item -Destination "c:\Program Files\MLM" -Force -Recurse -ErrorAction SilentlyContinue;
        Write-Progress -Activity "Currently Copying files from $MLM" `
            -Status "Copying: $Item.Name" -PercentComplete ($FileNumber++/$FileCount*100)
    }

    Clear-Host

    #installs Zan
    Write-Host -Fore Cyan "Installing Zan Printer..."
    "Installing Zan Printer..." | Out-File $Logfile -Append
    If ([System.IntPtr]::Size -eq "4") {
        Start-Process "I:\ZAN\zvprt4010.exe" -Wait
        }Else{
        Start-Process "I:\ZAN\W764bit\zvprt5.exe" -Wait
        }

    #Installs Expense Program
    Write-Host -Fore Cyan "Installing Expense program. Please wait."
    "$time - $Computer -  Installing Expense program." | Out-File $Logfile -Append
    if ([System.IntPtr]::Size -eq 4) {
        $Argz = "/qb"
            Start-Process "I:\2008 Expense\Publish\Installer\CrystalReports10_5\CRRedist2008_x86.msi" -ArgumentList $Argz -Wait
            Start-Process "I:\2008 Expense\Installer 1-25-2013\Expense_Installer.msi" -ArgumentList $Argz -Wait
                }Else{
            $Argz = "/qb"
            Start-Process "I:\2008 Expense\Publish\Installer\CrystalReports10_5\CRRedist2008_x64.msi" -ArgumentList $Argz -Wait
            Start-Process "I:\2008 Expense\Installer 1-25-2013\Expense_Installer.msi" -ArgumentList $Argz -Wait
            }

    Clear-Host

    # Add MLM Path to Environment Variable
    Write-Host -fore Cyan "$time - $Computer - Creating Environment Variable 'C:\Program Files\MLM' "
    "$time - $Computer - Creating Environment Variable 'C:\Program Files\MLM' " | out-file $logfile -Append
    Add-Path -NewPath "C:\Program files\MLM"
    
    Clear-Host

    #Installs Runtimes, Foxit PDF Reader, 
    Write-Host -fore cyan "$time - $Computer - Installing 'MLM' ninite package."
    "$time - $Computer - Installing 'MLM' ninite package." | Out-File $Logfile -Append
    Start-Process "I:\Ninite\MLM_Setup.exe" -Wait

    Clear-Host

    #Install Webroot SecureAnywhere Antivirus
    Function Install-Webroot {
    Write-Host "$time - $Computer - Installing Webroot SecureAnywhere Antivirus. Please wait..."
    "$time - $Computer - Installing Webroot SecureAnywhere Antivirus. Please wait..." | Out-File $Logfile -Append
    Start-Process -FilePath "msiexec.exe" -ArgumentList "/i I:\Webroot\wsasme.msi GUILIC=sad7-wrsm-44bc-a49f-5caf /qb" -Wait
    }
    $Webinstall = New-Messagebox -message "Install Webroot SecureAnywhere?" -icon question -button "YesNoCancel" -title "Webroot Installation"
	    Switch ($Webinstall) {
            "Yes" {Install-Webroot}
            "No" {Write-host -fore Yellow "Don't like to use protection, huh? "; sleep -Seconds 5}
            "Cancel" {"Exiting program....."; Sleep -seconds 2; Exit}
            Default {"Nothing Returned"}
            }
    
    Clear-Host
    
    #Install Shoretel Communicatior
    $Shoretel = "I:\Shoretel\Shoretel Communicator 13.3\Silent\Setup.bat"
    Write-Host "$time - $Computer - Installing Shoretel Communicator. Please wait..." | Out-File $Logfile -Append
    Start-process $Shoretel -Wait
        
    #Install Office 2013 if not installed
    Function 32Bit { 
        #check for Office 2013 installation via registry
        If (Test-Path 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\{90150000-0011-0000-0000-0000000FF1CE}' ) {
            Write-Host "$time - $Computer - Office 2013 installed..."
            "$time - $Computer - Office 2013 installed..." | Out-File $Logfile -Append
        }Else{
            Write-Host -fore Cyan "$time - $Computer - Installing Microsoft Office 2013 Pro Plus....Please Wait."
            "$time - $Computer - Installing Microsoft Office 2013 Pro Plus...." | out-file $Logfile -Append
            Start-Process "I:\Office\Office2013\ProPlusx32\setup.exe" -Wait
        }
    }
    Function 64Bit {
        #check for Office 2013 installation via registry
        If (Test-Path -Path 'HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{90150000-002A-0000-1000-0000000FF1CE}') {
            Write-Host "$time - $Computer - Office 2013 installed..."
            "$time - $Computer - Office 2013 installed..." | out-file $Logfile -Append
        }Else{
           Write-Host -fore Cyan "$time - $Computer - Installing Microsoft Office 2013 Pro Plus....Please Wait."
           "$time - $Computer - Installing Microsoft Office 2013 Pro Plus...." | Out-File $Logfile -Append
            Start-Process "I:\Office\Office2013\ProPlusx32\setup.exe" -Wait
        }
    }
    #Checks if OS archicture is x86 or x64; determines if Office 2013 is installed
    if ([System.IntPtr]::Size -eq 4) {32Bit} else {64Bit}

    #Install ImageNow
    Write-Host -fore Cyan "Installing ImageNow 6.7...."
    "$time - $computer : Installing ImageNow 6.7...." | Out-File $Logfile -Append
    Start-Process "I:\ImageNow\3347-Silent-install\IN-3347-Silent-install.bat" -Wait
    
    #Install Logmein software
    Write-Host "Installing Logmein...."
    "$time - $computer : Installing Logmein...." | Out-File $Logfile -Append
        $Logmein = "I:\LogMeIn\logmein.msi"
        $LMIArgs = '/qb'
            Start-Process $Logmein -ArgumentList $LMIArgs -Wait

    #Installs OpenVPN if laptop by checking computer name. 
    If ($Env:Computername -like "LT*") {
        Write-Host -fore cyan "$time - $Computer - Installing OpenVPN...."
        "$time - $Computer - Installing OpenVPN...." | Out-File $Logfile -Append
        Start-Process "I:\OpenVPN\openvpn-2.1_rc20-install.exe" -Wait
        }

    #Add Intranet as trusted site
    Write-Host -fore cyan "Importing Secure site Registry key"
    "$time - $computer : Importing Secure site Registry key" | Out-File $Logfile -Append
    Regedit /s "I:\Registry Keys\Add-MLMINS-trustedsite.reg"

    #exports computer information to text file
    $net.MapNetworkDrive("P:","\\mlmfp1\sharedat",0,$domain+"\"+$user,$userPW)
    $Compinfo = "P:\IT\Logs\Computer info\$computer.txt"
    $computerSystem = get-wmiobject Win32_ComputerSystem
    $computerBIOS = get-wmiobject Win32_BIOS
    $computerOS = get-wmiobject Win32_OperatingSystem

    If (!(Test-Path $Compinfo)) {
       New-Item -ItemType File $Compinfo -Force
       }

    "System Information for: " + $computerSystem.Name | Out-file $Compinfo -Append
    "" | Out-file $Compinfo -Append
    "Manufacturer: " + $computerSystem.Manufacturer | Out-file $Compinfo -Append
    "Model: " + $computerSystem.Model | Out-file $Compinfo -Append
    "Serial Number: " + $computerBIOS.SerialNumber | Out-file $Compinfo -Append
    "Operating System: " + $computerOS.caption + ", Service Pack: " + $computerOS.ServicePackMajorVersion | Out-file $Compinfo -Append
    "Total Memory(GB) " + (gwmi Win32_ComputerSystem -Cn $Computer | select @{name="TotalPhysicalMemory";expression={($_.TotalPhysicalMemory/1GB).tostring("N0")}}).TotalPhysicalMemory | Out-file $Compinfo -Append
    "User logged In: " + $computerSystem.UserName | Out-file $Compinfo -Append

    Cls

    Write-Host -fore Yellow "System information exported to: $Compinfo"
    "$time - $computer : System information exported to: $Compinfo" | Out-File $Logfile -Append
    
    #Add Intranet as trusted site
    "$time - $computer : Importing I:\Registry Keys\Add-MLMINS-trustedsite.reg into local registry"
    Regedit /s "I:\Registry Keys\Add-MLMINS-trustedsite.reg"
    
    #Removes Restart-and-Resume registry key
    Clear-Any-Restart

    #Opens MLM Inventory page
    Write-Host -Fore Yellow "Please fill out inventory sheet using the supplied host information."
    Sleep -Seconds 7

    Clear-Host

    Invoke-Item "P:\it\logs\Computer info\$computer.txt"
    Start "http://portal2.mlmins.com/teamsites/IT/Lists/Inventory/Overview.aspx"
    
    #Remove mapped network drives
    $net.RemoveNetworkDrive("I:")
    $net.RemoveNetworkDrive("P:")

     #Disables AutoLogon if enabled
    $AdminLogon = Get-Itemproperty 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name AutoAdminLogon
    If (($AdminLogon).AutoAdminLogon -ne 0) {
    Write-Host -fore cyan "Disabling Autologon..."
    Sleep -Seconds 2
    Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\windows NT\CurrentVersion\Winlogon' -Name AutoAdminLogon -Value 0 
    } Else {
    Write-Host -fore Green "Autologon already disabled."
    }

    #Plays a system beep to inform tech of script completion
    [System.Console]::Beep(4000,1000)
    "$time - $Computer Host (Domain) setup and configuration has completed. Please run 'c:\temp\NMS\UserSetup.ps1' after logging in as the user." | Out-File $Logfile -Append
    Wait-For-Keypress "$time - $Computer Yay! You finished imaging this piece of.....I mean, awesome computer! 
    DON'T FORGET****Please run 'c:\temp\NMS\UserSetup.ps1' after logging in as the user. "; Exit
    }
