ScriptingBestPractice.ps1,408a551b682694bcb39f8e9f28f744ec,Scan result is 1. IsMalware: 0,<#
    NOTE: Please rename this file to ScriptingBestPractice.ps1
          and open it using PowerShell ISE or Visual Studio Code
          to view it with formatting and color coding.
#> 
       
#   PowerShell Scripting Community Best Practices

<#
    This guideline is purely about readability and the current best practice from the PowerShell community.
    The purpose of this guideline is to make understanding and troubleshooting scripts more easily.
    This guideline is based on the Great Debates articles from PowerShell.org. 
    Link:  http://powershell.org/wp/category/great-debates/
#>



#   CODE LAYOUT AND FORMATTING
#   It's easier to read, understand and troubleshoot code when it looks familiar.The goal for code layout is about
#   consistency.

    # To take advantage of code folding in PowerShell ISE or Visual Studio Code, open braces on the same line and 
    # closing braces always on their own line and indent the code.

    # Avoid this code format
    if($this -gt $that)
    {
    Do-Something -with $that
    }

    # it's better to indent and format the code properly 
    if ($this -gt $that) {
        Do-Something -with $that
    }



#   DOCUMENTING AND COMMENTS
#   A simple comment is always good than no comment. Always make sure to keep the comments up to date when
#   the code changes.
#   Remember that comments should serve the reasoning and decision-making not to attempt to explain what a
#   command does.

    # Do not write:

    # Query remote computer BIOS using WMI
    Get-WmiObject -Class win32_bios -ComputerName YourCrapBook

    # The example above is pretty obvious that it's querying a remote computer using WMI.

    # Maybe write:

    # Check if the Snapshot policy has been set
    $SnapshotPolicy = Get-NcVol -Name $volumeName | Select-Object -ExpandProperty VolumeSnapshotAttributes | 
        Select-Object -ExpandProperty SnapshotPolicy

    if ($SnapshotPolicy -eq 'default') {
        Write-Verbose -Message "`tVolume Snapshot Attributes for $volumeName has been set to 'default'"
    }
    else {
        Write-Verbose -Message "`tFailed to set Volume Snapshot Attributes on $volumeName"
    }

#   Use Block comments. Unless your code is particularly obscure, don't precede each line with a comment --
#   doing so breaks up the code and makes it harder to read, use a single block comment.
#   Block comments generally apply to some or all of the code which follows them, and are indented to the same
#   level as that code. Each line should start with a # and a single space.

    <#
        If the block is particularly long it is recommended to use the block comment syntax, comment characters
        must be on their own lines and indent the comments, just like what is used on this comment block.
    #>

#   Always write comment-based help when creating advanced functions.
#   See about_Comment_Based_Help for detailed explanations and examples.

    # Here's an example of comment-based help used in advanced functions:
    function Get-Service {
    <#
    .SYNOPSIS
     Gets auto start service(s) that are not running from local and remote computers.
    .DESCRIPTION
     Get-AutoStartService can run against local or remote computer(s)
    .INPUTS
     You can pipe objects to Get-AutoStartService or you can use the ComputerName parameter.
    .OUTPUTS 
    .PARAMETER ComputerName
     Gets the auto start services which are not running on the specified computers. 
     The default is the local computer.
     Type the NetBIOS name, an IP address, or a fully qualified domain name of a remote computer. 
     To specify the local computer, type the computer name, a dot (.), or "localhost".
     This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of 
     Get-AutoStartService even if your computer is not configured to run remote commands.
    .PARAMETER Credential
     Gets the auto start services on the specified computer using an alternate Credential
    .NOTES
     Created By: gmf for Automation Team   
    .EXAMPLE       
     C:\PS>  Get-AutoStartService
     Description
     -----------
     Gets local machine auto start service information
    .EXAMPLE
     C:\PS>  Get-AutoStartService -ComputerName server1,server2,server3
     Description
     -----------
     Gets server1,server2 and server3 auto start services information
    .EXAMPLE
     C:\PS> Get-AutoStartService -ComputerName server1,server2,server3 -Credential localhost\administrator
     Description
     -----------
     Gets server1,server2 and server3 auto start services information using alternate Credential
    .EXAMPLE
     C:\PS>  'Server1','Server2','Server3' | Get-AutoStartService
     Description
     -----------
     Gets server1,server2 and server3 auto start services information (using pipeline)
    .EXAMPLE		
     C:\PS>  Get-Content d:\ServerList.txt | Get-AutoStartService
     Description
     -----------
     Reads computer names from a text file and Gets their local auto start service information 
    #>

        [CmdletBinding()]
        [OutputType()]
        Param()

        Begin {}
        Process {}
        End {}
    }
    


#   AVOID USING WRITE-HOST
#   Using Write-Host in your scripts or functions breaks the pipeline as Write-Host writes the output directly to 
#   the console.

    # Run the example code below to see how Write-Host breaks the pipeline
    Write-Host 'This is a string' | Get-Member

    # The work around for the above code is to use Write-Output
    Write-Output 'This is a string' | Get-Member
    
#   If you really want to display output to the console use Write-Verbose instead, which is available when you use
#   [CmdletBinding()] attribute.



#   AVOID BACKTICKS (`)
#   The backtick character is the default escape character used by PowerShell. It cannot use \ and / characters as
#   those characters are used for file separator in Windows systems. For PowerShell to be effective as a shell and
#   scripting language it cannot use \ or /, hence backtick was chosen.
#   The reason we should avoid using backtick as "line continuation characters" is because it is hard to read and 
#   easy to miss.

    # Avoid writing code with backticks like this:
    Get-WmiObject -Class Win32_Bios `
                  -Filter "DriveType = 3" `
                  -ComputerName $YourCrapBook

    # This is a better alternative:
    $WMIParams = @{
        Class = 'Win32_Bios'
        Filter = 'DriveType=3'
        ComputerName = $YourCrapBook
    }

    Get-WmiObject @WMIParams

    # The above command used something called splatting, to learn more about it please see
    # about_splatting.



#   AVOID USING SEMICOLONS (;) AT THE END OF EACH LINE
#   PowerShell will not complain about extra semicolons, but they are unnecessary, and get in the way when the code
#   is being edited or copy-pasted.
#   They are also unnecessary when declaring hashtables if you are already putting each element on it's own line.
    
    # Avoid declaring hashtables with semicolons like this:
    $wmiparam = @{
        NameSpace = 'root\cimv2';
        Class = 'Win32_OperatingSystem';
        Computername = $YourCrapBook;
        ErrorAction = 'Stop';
    }

    # This is a better way to declare a hashtable:
    $wmiparam = @{
        NameSpace = 'root\cimv2'
        Class = 'Win32_OperatingSystem'
        Computername = $YourCrapBook
        ErrorAction = 'Stop'
    }



#   NAMING CONVENTIONS
#   Always used the full cmdlet name when writing scripts or functions, avoid using aliases.
#   Aliases are only good if you're using and typing on the PowerShell console.
#   The same goes for parameters, use full parameter names.

    # Do not write:
    gwmi -cl win32_service | where {$_ -like '*ss*'} | select -fi 3 | ft -au

    # Instead write:
    Get-WmiObject -Class Win32_service | Where-Object {$_ -like '*ss*'} | Select-Object -First 3 | Format-Table -AutoSize




#   DO NOT CONCATENATE STRINGS
    # Avoid writing a code like this:
    $wmi = Get-WmiObject -Class Win32_Bios -ComputerName $YourCrapBook
    Write-Output "Computer" + $YourCrapBook + "BIOS Serial" + $Wmi.SerialNumber

    # or this:
    throw "ERROR: Failed to connect to vCenter server " + $vCenterServerAddress + " on port " + $vCenterServerPort

    # Instead, write it like this:
    $wmi = Get-WmiObject -Class Win32_Bios -ComputerName $YourCrapBook
    Write-Output "Computer $YourCrapBook BIOS Serial $($Wmi.SerialNumber)"

    throw "ERROR: Failed to connect to vCenter server $vCenterServerAddress on port $vCenterServerPort"

    # Rather than writing/displaying a long string like this
    Write-Output "Failed to remove snapmirrror relationship. Snapmirror status=[$($relationship.Status)], state=[$($relationship.MirrorState)]. Failed to remove all snapmirrror relationships with source [$source]. See trace log for details."

    # Better to write it this way
    $Text = @"
        Failed to remove snapmirrror relationship. Snapmirror status=[$($relationship.Status)], 
        state=[$($relationship.MirrorState)]. Failed to remove all snapmirrror relationships 
        with source [$source]. See trace log for details.
"@
    
    Write-Output $Text



#   USE FULL, EXPLICIT PATHS WHEN POSSIBLE
#   When writing scripts, it's really only safe to use .. or . in a path if you have previously explicitly set
#   the location (within the script), and even then you should beware of using relative paths when calling .Net
#   methods or legacy/native applications, because they will use the [Environment]::CurrentDirectory rather than
#   PowerShell's present working directory ($PWD). Because checking for these types of errors is tedious (and 
#   because they are easy to over-look) it's best to avoid using relative paths altogether, and instead, base your
#   paths off of $PSScriptRoot (the folder your script is in) when necessary.

    # Do not write:
    Get-Content .\Servers.txt

    # Specially do not write:
    [System.IO.File]::ReadAllText(".\Servers.txt")

    # Instead write:
    Get-Content -Path (Join-Path -Path $PSScriptRoot -ChildPath Servers.txt)



#   FUNCTIONS
#   When creating a simple function avoid using the "return" keyword. But if your script will be run by System
#   Center Orchestrator then the "return" keyword is the way to go.

    # When declaring simple functions leave a space between the function name and the parameters.
    # Always use Write-output instead of Return.
    function Add-Number {
        Param(
            $param1,
            $param2
        )
        $Total = $param1 + $param2
        Write-Output "The sum of $param1 and $param2 is: $Total"
    }



#   ADVANCED FUNCTIONS
#   If you want to write scripts that behave like a cmdlet then you should avoid writing simple functions, instead
#   write advanced functions as there are many cool stuff you can do with this.

    function Get-Something {
        [CmdletBinding()]
        [OutputType()]
        Param()

        Begin {}
        Process {}
        End {}
    }

#   The Begin {} code block only execute once, then the Process {} code block execute once for each object coming
#   from the pipeline. Finally, once all are processed, the End {} code block executes once.
#   Detailed explanation is available on this link:  https://technet.microsoft.com/en-us/magazine/hh413265.aspx

#   In Advanced functions object must be returned inside the Process {} block, not in Begin {} or End {} blocks.
#   since it defeats the advantage of the pipeline.

#   Always use [CmdletBinding()] attribute, this attribute makes a PowerShell function an Advanced function.
#   Always have at least a Process {} code block if any parameters takes input from the pipeline.

#   Specify an [OutputType()] if the advanced function returns.
#   See about_Functions_OutputTypeAttribute for detailed explanations and examples.

#   When using advanced functions or scripts with [CmdletBinding()] attribute avoid validating parameters in the
#   body of the script when possible and use parameter validation attributes instead.
#   See about_Functions_Advanced_Parameters for detailed explanations and examples.



#   USE NATIVE POWERSHELL WHERE POSSIBLE
#   This means not using COM, .NET Framework classes, and so on when there is a native Windows PowerShell cmdlets
#   or technique that gets the job done.
#   If you used .Net Framework class, COM or other commandline utilities document why you haven't used PowerShell.



#   AVOID USING PIPELINES IN SCRIPTS
    # Consider this:
    Get-Content C:\temp\servers.txt |
    ForEach-Object {
        Get-WmiObject -Class win32_bios -ComputerName $_
    }

    # and this alternative
    $Computers = Get-Content c:\temp\servers.txt
    foreach ($Computer in $Computers) {
        Get-WmiObject -Class win32_bios -ComputerName $Computer
    }

#   The world definitely prefers the latter approach "in a script or function".
#   Constructs offer far more flexibility, especially when you're looping through multiple commands. Error
#   handling becomes far easier and more structured with the latter approach as does debugging.
#   Constructs often exhibit higher performance that pipeline-only approaches but not always - it's worth
#   testing if you are dealing with large data-sets and if you're in a context where performance matters.



#   DON'T RE-INVENT THE WHEEL
#   There are a number of approaches in PowerShell that will "get the job done". However, wasted effort on your 
#   part is never commendable. When your wasted effort further involves poor aesthetics or less-preferred
#   approaches, then you should expect members of the community to be less-than-welcoming of your product.

    # For example:
    function Ping-Computer ($ComputerName) {
        $ping = Get-WmiObject Win32_PingStatus -Filter "Address = '$ComputerName'"
        if ($ping.StatusCode -eq 0) {
            return $true
        }
        else {
            return $false
        }
    }

    # The function above has a few problems. One, it uses the "Return" keyword, which some people find problematic
    # (not a huge majority, but they do exist) because it's really a kind of "syntax sugar".The community would
    # argue that you should use Write-Output instead. Second, the parameter block is not explicitly declared; the
    # shortcut declaration here is less preferred. Third, the command verb ("Ping") isn't an approved PowerShell
    # command verb. Fourth, and more to the point, there's no reason whatsoever to write this function in
    # PowerShell v2 or later.

    # Simply use:
    Test-Connection -ComputerName $YourCrapBook -Quiet



#   ACCUMULATING OUTPUT IN A FUNCTION
#   This is a bit of advanced but it's one that many experienced developers will run into. 

    # Here's a very trimmed-down example, just to make the point (it isn't functional, as the command used is 
    # fictional):

    function Get-Stuff {
        [CmdletBinding()]
        Param(
            [String[]]$ComputerName
        )
        $Output = @()
        foreach ($Computer in $ComputerName) {
            $Data1 = Get-SomeThing -ComputerName $Computer
            $Data2 = Get-OtherSomeThing -ComputerName $Computer 
            $Properties = @{
                ComputerName = $Computer
                DataPoint1 = $data1.Point1
                DataPoint2 = $data.Point2
            }
            $Obj = New-Object -TypeName PSObject -Property $Properties
            $Ouput += $Obj
        }
        Write-Output $Output
    }

    # The problem here is that the function can generate multiple outout objects, and the programmer is
    # accumulating those into the $output variable. That means this function won't output anything until it's
    # completely finished running. That isn't how PowerShell commands (and "functions" are commands) are 
    # usually meant to work.
    # PowerShell commands should "usually" output each objct to the pipeline, one at a time,as those objects
    # are ready. That allows the "pipeline" to accumulate the output, and to immediately pass it along to whatever
    # is next in the pipeline. That's how PowerShell commands are intended to work. Now, there are always exceptions.
    # Sort-Object, for example, has to accumulate it's output, because it can't actually sort anything until it
    # has all of them. So it's called a "blocking command", because it blocks the pipeline from doing else until
    # it produces its output. But that's an exception.

    # It's usually easy to do this, by simply outputting to the pipeline instead of accumulating:
    function Get-Stuff {
        [CmdletBinding()]
        Param(
            [String[]]$ComputerName
        )
        foreach ($Computer in $ComputerName) {
            $Data1 = Get-SomeThing -ComputerName $Computer
            $Data2 = Get-OtherSomeThing -ComputerName $Computer 
            $Properties = @{
                ComputerName = $Computer
                DataPoint1 = $data1.Point1
                DataPoint2 = $data.Point2
            }
            $Obj = New-Object -TypeName PSObject -Property $Properties
            Write-Output $Obj
        }
    }
    
    # or
    function Get-Stuff {
        [CmdletBinding()]
        Param(
            [String[]]$ComputerName
        )
        
        Begin {
            Write-Verbose "Initializing script..."	
        }
        Process {
            foreach ($Computer in $ComputerName) {
                $Data1 = Get-SomeThing -ComputerName $Computer
                $Data2 = Get-OtherSomeThing -ComputerName $Computer 
                $Properties = [PSCustomObject][Ordered]@{
                    ComputerName = $Computer
                    DataPoint1 = $data1.Point1
                    DataPoint2 = $data.Point2
                }
                Write-Output $Properties
            }	
        }
        End {
            Write-Verbose "Cleanup..."	
        }
    }

# That's all folks! Thanks for reading...

