Tools_test.TempPoint.ps1,c39e0b5b2658264f7ee1cd0dd29c81fb,Scan result is 1. IsMalware: 0,ï»¿#Fixed ! and $ characters not being taken as read-host input
#Fixed access issue to create PTR records
#Fixed output of snapshots to show better relative info
#Fixed TENT domain DNS changes (needed to create PSSession to ps server, then invoke DNS command using credssp on localhost)
#

#  Pending Improvements
#Ability to select which snapshot(s) to delete
#Ability to Delete DNS entries and create CNames
#Ability to check which powershell version user has, and recommend later version due to possible limited functionality (possibly just invoke all scripts on PS server?)
#Ability to check if powercli is installed, and if not, install it.
#

#  Functions to write
#View which hosts are deployed from autodeploy (query image profile field of hosts, display if !!null)
#View which VMs have RDMs attached
#View which VMs have ISO attached, and then change to client device
#

#  BUGS
#Need to add Invoke command for PTR section of CSV records - FIXED
#Needs to prompt for second TENT credentials when adding Dev DNS records - FIXED



#Check if powershell is ran as administrator

If (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole(`
[Security.Principal.WindowsBuiltInRole] "Administrator"))
{
	Write-Warning "Please re-run this script as Administrator!"
	Break
}

#Check if PSremoting is enabled. If not, attempt to enable it.

try
{
	$fail = $null
	Write-Verbose "Verifying remote settings.." -Verbose
	$testCon = Enter-PSSession localhost -ErrorAction Stop
	Write-Host "Success!"
	sleep 1
	Exit-PSSession
	Get-PSSession | Remove-PSSession
	cls
}
Catch
{
	$fail = $true
	Write-Warning "PSRemoting not enabled"
}
if ($fail)
{
	try
	{
		Write-Host "Enabling PSRemoting.."
		Enable-PSRemoting -Force -ErrorAction Stop | Out-Null
		Write-Host "Success!"
		sleep 1
		
	}
	Catch
	{
		Write-Error "Unable to enable PSRemoting...Exiting"
		exit
	}
}
#### Create script path variables
$currentPath = $MyInvocation.MyCommand.Path
$scriptPath = Split-Path $currentPath

$functionPath = "$scriptPath\functions"
$fileStorePath = "$scriptPath\filestore"
$logfilePath = ""

#### Build Utility Functions
Write-Output "Mapping path to modules.."
if ($env:PSModulePath -notlike "*$scriptPath\Modules*") {
    $env:PSModulePath = $env:PSModulePath + ";$scriptPath\Modules"
}
Write-Output "Importing modules.."
Import-Module MyTools -WarningAction SilentlyContinue

#### Get current PowerShell version
$PSversion = Get-PSversion

do
{
	Function Add-DNSRecords
	{		
		If ((Get-Item WSMan:\localhost\Client\TrustedHosts).value -notcontains 'n01itw1001.tent.trt.csaa.pri')
		{
			""
			Write-Host "First time running this script on this workstation?"
			Write-Host "To run this script properly, you must add N01ITW1001 as a trusted host."
			""
			Write-Host "Press any key to add N01ITW1001 as a trusted host or CTRL+C to cancel...
        " -ForegroundColor Yellow
			Try
			{
				$placebo = $host.UI.RawUI.ReadKey("NoEcho,IncludeKeyUp")
				Write-Verbose "Adding N01ITW1001 as a trusted host.." -Verbose
				set-item WSMan:\localhost\Client\TrustedHosts -value n01itw1001.tent.trt.csaa.pri -Force
				""
				Write-Host "Success!!" -ForegroundColor Green
				""
			}
			Catch
			{
				"Unable to add trusted host."
				break
			}
		}
		$ssptrusts = Get-WSManCredSSP
		if ($ssptrusts -match 'n01itw1001.tent.trt.csaa.pri' -and
		$ssptrusts -match 'p01itw1006') { $proceed = $true }
		
		if ($proceed -ne $true)
		{
			""
			Write-Host "This script invokes commands on remote servers. We must do this securely by enabling CredSSP"
			Write-Host "on your machine to securely pass your credentials to the PowerShell script servers in Dev and Prod."
			Write-Host "Currently these servers are N01ITW1001 and P01ITW1006."
			""
			Write-Host "Press any key to enable CredSSP for secure connections to N01ITW1001 and P01ITW1006 or press CTRL+C to cancel..." -ForegroundColor Yellow
			Try
			{
				$placebo = $host.UI.RawUI.ReadKey("NoEcho,IncludeKeyUp")
				Write-Verbose "Enabling CredSSP for secure connection to PowerShell servers.." -Verbose
				Enable-WSManCredSSP -Role Client -DelegateComputer 'n01itw1001.tent.trt.csaa.pri', 'p01itw1006' -Force
				""
				Write-Host "Success!!" -ForegroundColor Green
				""
			}
			Catch
			{
				Write-Host "Unable to enable CredSSP."
				break
			}
		}
		
		
		""
		Write-Host "Create DNS Records" -ForegroundColor Green
		""
		Write-Host "Which environment?"
		""
		Write-Host "[1] Production (ENT)"
		Write-Host "[2] Non-Prod   (TENT)"
		""
		Write-Host "Selection: " -NoNewline
		$sel = Read-Host
		
		# Production DNS
		
		if ($sel -eq "1")
		{
			
			Write-Host "ENT user ID: " -NoNewline
			$user = Read-Host
			if ($user -notlike "ent\*")
			{ $domainUser = "ent\" + $user }
			else { $domainUser = ($User) }
			Write-Host "Password: " -NoNewline
			$pwd = Read-Host -AsSecureString
			$creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $domainUser, $pwd
			
			Write-Host "How would you like to add the PROD DNS entries?" -ForegroundColor Green
			" "
			Write-Host "[1] Input manually"
			Write-Host "[2] Import CSV (use DNSadd.csv template)"
			""
			Write-Host "Selection: " -NoNewline
			$answer1 = Read-Host
			
			# Production Input Manually
			
			if ($answer1 -eq "1")
			{
				do
				{
					Write-Host "IP Address: " -ForegroundColor Green -NoNewline
					$RecordAddress = Read-Host
					Write-Host "DNS A record name (short name): " -ForegroundColor Green -NoNewline
					$RecordName = Read-Host
					do
					{
						Write-Host "Select DNS Zone:" -ForegroundColor Green
						""
						Write-Host "[1] ent.rt.csaa.com"
						Write-Host "[2] csaa.ilo"
						Write-Host "[3] csaa.com"
						" "
						$sel = Read-Host "Selection: "
						if ($sel -eq "1") { $recordZone = "ent.rt.csaa.com" }
						elseif ($sel -eq "2") { $recordZone = "csaa.ilo" }
						elseif ($sel -eq "3") { $recordZone = "csaa.com" }
						else
						{
							Write-Host "Invalid selection." -ForegroundColor Red
							""
						}
					}
					Until (!!$recordZone)
					
					$session = New-PSSession -Credential $creds -Authentication Credssp -ComputerName p01itw1006
					Invoke-Command -Session $session -ScriptBlock {
						param ($RecordAddress, $recordName, $recordZone)
						Try
						{
							Write-Verbose "Creating A record..." -Verbose
							Add-DnsServerResourceRecordA -ComputerName p01iaw010 -Name $recordName -ZoneName $RecordZone -IPv4Address $RecordAddress -erroraction stop
							Write-Host "$($RecordName).$($RecordZone) - $($RecordAddress)" -NoNewline
							Write-Host "  SUCCESSFUL" -ForegroundColor green
						}
						Catch
						{
							$err = $_.CategoryInfo.Category
							Write-Host "A record creation for $($recordName).$($recordZone) - $($recordAddress) was" -NoNewline
							Write-Host " UNSUCCESSFUL" -ForegroundColor RED -NoNewline
							Write-Host "  ERROR: $err"
						}
					} -ArgumentList ($recordAddress, $recordName, $recordZone)
					
					$session = New-PSSession -Credential $creds -Authentication Credssp -ComputerName p01itw1006
					Invoke-Command -Session $session -ScriptBlock {
						param ($RecordAddress, $recordName, $recordZone)
						Try
						{
							Write-Verbose "Creating PTR record..." -Verbose
							if ($recordAddress -like '172.*' -or
							$recordAddress -like '209.*' -or
							$recordAddress -like '192.*')
							{
								$oct = $recordAddress -split ".", 0, "simplematch"
								$revZone = "$($oct[1]).$($oct[0]).in-addr.arpa"
								$PtrID = "$($oct[3]).$($oct[2])"
								$fqdn = "$($recordName).$($recordZone)"
								Add-DnsServerResourceRecordPtr -ComputerName p01iaw102 -ZoneName $revZone -Name $PtrID -PtrDomainName $fqdn -ErrorAction Stop
								Write-Host "$($recordName).$($recordZone) - $($PtrID).$($revZone)" -NoNewline
								Write-Host "  SUCCESSFUL" -ForegroundColor green
							}
							elseif ($recordAddress -like '10.45.1.*' -or
							$recordAddress -like '206.*' -or
							$recordAddress -like '205.*' -or
							$recordAddress -like '216.*')
							{
								$oct = $recordAddress -split ".", 0, "simplematch"
								$revZone = "$($oct[2]).$($oct[1]).$($oct[0]).in-addr.arpa"
								$PtrID = "$($oct[3])"
								$fqdn = "$($recordName).$($recordZone)"
								Add-DnsServerResourceRecordPtr -ComputerName p01iaw102 -ZoneName $revZone -Name $PtrID -PtrDomainName $fqdn -ErrorAction Stop
								Write-Host "$($recordName).$($recordZone) - $($PtrID).$($revZone)" -NoNewline
								Write-Host "  SUCCESSFUL" -ForegroundColor green
							}
							elseif ($recordAddress -like '10.*')
							{
								$oct = $recordAddress -split ".", 0, "simplematch"
								$revZone = "$($oct[0]).in-addr.arpa"
								$PtrID = "$($oct[3]).$($oct[2]).$($oct[1])"
								$fqdn = "$($recordName).$($recordZone)"
								Add-DnsServerResourceRecordPtr -ComputerName p01iaw102 -ZoneName $revZone -Name $PtrID -PtrDomainName $fqdn -ErrorAction Stop
								Write-Host "$($recordName).$($recordZone) - $($PtrID).$($revZone)" -NoNewline
								Write-Host "  SUCCESSFUL" -ForegroundColor green
							}
							else
							{
								Write-host "No PTR Zones found for" -ForegroundColor Red -NoNewline
								Write-Host " $revZone"
							}
						}
						Catch
						{
							$err = $_.CategoryInfo.Category
							Write-Host "PTR record creation for $($recordName).$($recordZone) - $($PtrID).$($revZone) was" -NoNewline
							Write-Host " UNSUCCESSFUL" -ForegroundColor RED -NoNewline
							Write-Host "  ERROR: $err"
						}
					} -ArgumentList ($recordAddress, $recordName, $recordZone)
					""
					Write-Host "Would you like to create another DNS record? [Y/N]" -ForegroundColor Green -NoNewline
					$ans = Read-Host
				}
				Until ($ans -eq 'n')
			}
			
			# Production Import CSV
			
			if ($answer1 -eq "2")
			{
				do
				{
					Try
					{
						Write-Host "File path to DNSadd.csv: " -ForegroundColor Green -NoNewline
						$filePath = Read-Host
						$Records = Import-Csv $filePath -ErrorAction Stop
						$Records | ft | Out-Host
					}
					Catch
					{
						$err = $_.exception.filename
						Write-Host "$err" -NoNewline
						Write-Host " File not found" -ForegroundColor Red
						Break
					}
				}
				until (!!$records)
				" "
				Write-Host "Are these the records you want to add? (Y/N): " -ForegroundColor Green -NoNewline
				$answer2 = read-Host
				if ($answer2 -eq "y")
				{
					$session = New-PSSession -Credential $creds -Authentication Credssp -ComputerName p01itw1006
					Invoke-Command -Session $session -ScriptBlock {
						param ($Records)
						Write-Verbose "Creating DNS A records..." -Verbose
						foreach ($record in $Records)
						{
							$recordName = $record.name
							$recordZone = $record.zonename
							$recordAddress = $record.ipv4address
							Try
							{
								Add-DnsServerResourceRecordA -ComputerName p01iaw010 -Name $recordName -ZoneName $RecordZone -IPv4Address $RecordAddress -ErrorAction stop
								Write-Host "$($recordName).$($recordZone) - $($recordAddress)" -NoNewline
								Write-Host "  SUCCESSFUL" -ForegroundColor green
							}
							Catch
							{
								$err = $_.CategoryInfo.Category
								Write-Host "A record creation for $($recordName).$($recordZone) - $($recordAddress) was" -NoNewline
								Write-Host " UNSUCCESSFUL" -ForegroundColor RED -NoNewline
								Write-Host "  ERROR: $err"
							}
						}
					} -ArgumentList (, $Records)
					
					$session = New-PSSession -Credential $creds -Authentication Credssp -ComputerName p01itw1006
					Invoke-Command -Session $session -ScriptBlock {
						param ($Records)
						Write-Verbose "Creating PTR records..." -Verbose
						foreach ($record in $Records)
						{
							$recordName = $record.name
							$recordZone = $record.zonename
							$recordAddress = $record.ipv4address
							$fqdn = "$($recordName).$($recordZone)"
							Try
							{
								if ($recordAddress -like '172.*' -or
								$recordAddress -like '209.*' -or
								$recordAddress -like '192.*')
								{
									$oct = $recordAddress -split ".", 0, "simplematch"
									$revZone = "$($oct[1]).$($oct[0]).in-addr.arpa"
									$PtrID = "$($oct[3]).$($oct[2])"
									Add-DnsServerResourceRecordPtr -ComputerName p01iaw102 -ZoneName $revZone -Name $PtrID -PtrDomainName $fqdn -ErrorAction Stop
									Write-Host "$($recordName).$($recordZone) - $($PtrID).$($revZone)" -NoNewline
									Write-Host "  SUCCESSFUL" -ForegroundColor green
								}
								elseif ($recordAddress -like '10.45.1.*' -or
								$recordAddress -like '206.*' -or
								$recordAddress -like '205.*' -or
								$recordAddress -like '216.*')
								{
									$oct = $recordAddress -split ".", 0, "simplematch"
									$revZone = "$($oct[2]).$($oct[1]).$($oct[0]).in-addr.arpa"
									$PtrID = "$($oct[3])"
									Add-DnsServerResourceRecordPtr -ComputerName p01iaw102 -ZoneName $revZone -Name $PtrID -PtrDomainName $fqdn -ErrorAction Stop
									Write-Host "$($recordName).$($recordZone) - $($PtrID).$($revZone)" -NoNewline
									Write-Host "  SUCCESSFUL" -ForegroundColor green
								}
								elseif ($recordAddress -like '10.*')
								{
									$oct = $recordAddress -split ".", 0, "simplematch"
									$revZone = "$($oct[0]).in-addr.arpa"
									$PtrID = "$($oct[3]).$($oct[2]).$($oct[1])"
									Add-DnsServerResourceRecordPtr -ComputerName p01iaw102 -ZoneName $revZone -Name $PtrID -PtrDomainName $fqdn -ErrorAction Stop
									Write-Host "$($recordName).$($recordZone) - $($PtrID).$($revZone)" -NoNewline
									Write-Host "  SUCCESSFUL" -ForegroundColor green
								}
								else
								{
									Write-host "No PTR Zones found for" -ForegroundColor Red -NoNewline
									Write-Host " $revZone"
								}
							}
							Catch
							{
								$err = $_.CategoryInfo.Category
								Write-Host "PTR record creation for $($recordName).$($recordZone) - $($PtrID).$($revZone) was" -NoNewline
								Write-Host " UNSUCCESSFUL" -ForegroundColor RED -NoNewline
								Write-Host "  ERROR: $err"
							}
						}
					} -ArgumentList (, $Records)
				}
			}
		}
		
		elseif ($sel -eq "2")
		{
			
			# Non-Prod DNS
			
			Write-Host "TENT user ID: " -NoNewline
			$user = Read-Host
			if ($user -notlike "tent\*")
			{ $domainUser = "tent\" + $user }
			else { $domainUser = ($User) }
			Write-Host "Password: " -NoNewline
			$pwd = Read-Host -AsSecureString
			$credsDev = new-object -typename System.Management.Automation.PSCredential -argumentlist $domainUser, $pwd
			
			Write-Host "ENT user ID (for PTR records): " -NoNewline
			$user = Read-Host
			if ($user -notlike "ent\*")
			{ $domainUser = "ent\" + $user }
			else { $domainUser = ($User) }
			Write-Host "Password: " -NoNewline
			$pwd = Read-Host -AsSecureString
			$credsProd = new-object -typename System.Management.Automation.PSCredential -argumentlist $domainUser, $pwd
			
			
			Write-Host "How would you like to add the DEV DNS entries?" -ForegroundColor Green
			" "
			Write-Host "[1] Input manually"
			Write-Host "[2] Import CSV (use DNSadd.csv template)"
			""
			Write-Host "Selection: " -NoNewline
			$answer1 = Read-Host
			
			# Non-Prod Input Manually
			
			if ($answer1 -eq "1")
			{
				do
				{
					Write-Host "IP Address: " -ForegroundColor Green -NoNewline
					$RecordAddress = Read-Host
					Write-Host "DNS A record name (short name): " -ForegroundColor Green -NoNewline
					$RecordName = Read-Host
					do
					{
						Write-Host "Select DNS Zone:" -ForegroundColor Green
						""
						Write-Host "[1] tent.trt.csaa.pri"
						Write-Host "[2] csaa.ilo"
						""
						$sel = Read-Host "Selection: "
						if ($sel -eq "1")
						{
							$recordZone = "tent.trt.csaa.pri"
							$ArecordDNSserver = "n01iaw017"
							$creds = $($credsDev)
							$remoteComputer = "n01itw1001.tent.trt.csaa.pri"
						}
						elseif ($sel -eq "2")
						{
							$recordZone = "csaa.ilo"
							$ArecordDNSserver = "p01iaw010"
							$creds = $($credsProd)
							$remoteComputer = "p01itw1006"
						}
						else
						{
							Write-Host "Invalid selection." -ForegroundColor Red
							""
						}
					}
					Until (!!$recordZone)
					
					Invoke-Command -ComputerName $remoteComputer -Credential $creds -ScriptBlock {
						param ($creds, $RecordAddress, $recordName, $recordZone, $ArecordDNSserver)
						$s = new-PSSession -ComputerName localhost -Credential $creds -Authentication CredSSP
						Invoke-Command -Session $s -ScriptBlock {
							param ($RecordAddress, $recordName, $recordZone, $ArecordDNSserver)
							Try
							{
								Write-Verbose "Creating A record..." -Verbose
								Add-DnsServerResourceRecordA -ComputerName $ArecordDNSserver -Name $recordName -ZoneName $RecordZone -IPv4Address $RecordAddress -erroraction stop
								Write-Host "$($RecordName).$($RecordZone) - $($RecordAddress)" -NoNewline
								Write-Host "  SUCCESSFUL" -ForegroundColor green
							}
							Catch
							{
								$err = $_.CategoryInfo.Category
								Write-Host "A record creation for $($recordName).$($recordZone) - $($recordAddress) was" -NoNewline
								Write-Host " UNSUCCESSFUL" -ForegroundColor RED -NoNewline
								Write-Host "  ERROR: $err"
							}
						} -ArgumentList ($RecordAddress, $recordName, $recordZone, $ArecordDNSserver)
					} -ArgumentList ($creds, $RecordAddress, $recordName, $recordZone, $ArecordDNSserver)
					
					$session = New-PSSession -Credential $credsProd -Authentication Credssp -ComputerName p01itw1006
					Invoke-Command -Session $session -ScriptBlock {
						param ($RecordAddress, $recordName, $recordZone)
						Try
						{
							Write-Verbose "Creating PTR record..." -Verbose
							if ($recordAddress -like '172.*' -or
							$recordAddress -like '209.*' -or
							$recordAddress -like '192.*')
							{
								$oct = $recordAddress -split ".", 0, "simplematch"
								$revZone = "$($oct[1]).$($oct[0]).in-addr.arpa"
								$PtrID = "$($oct[3]).$($oct[2])"
								$fqdn = "$($recordName).$($recordZone)"
								Add-DnsServerResourceRecordPtr -ComputerName p01iaw102 -ZoneName $revZone -Name $PtrID -PtrDomainName $fqdn -ErrorAction Stop
								Write-Host "$($recordName).$($recordZone) - $($PtrID).$($revZone)" -NoNewline
								Write-Host "  SUCCESSFUL" -ForegroundColor green
							}
							elseif ($recordAddress -like '10.45.1.*' -or
							$recordAddress -like '206.*' -or
							$recordAddress -like '205.*' -or
							$recordAddress -like '216.*')
							{
								$oct = $recordAddress -split ".", 0, "simplematch"
								$revZone = "$($oct[2]).$($oct[1]).$($oct[0]).in-addr.arpa"
								$PtrID = "$($oct[3])"
								$fqdn = "$($recordName).$($recordZone)"
								Add-DnsServerResourceRecordPtr -ComputerName p01iaw102 -ZoneName $revZone -Name $PtrID -PtrDomainName $fqdn -ErrorAction Stop
								Write-Host "$($recordName).$($recordZone) - $($PtrID).$($revZone)" -NoNewline
								Write-Host "  SUCCESSFUL" -ForegroundColor green
							}
							elseif ($recordAddress -like '10.*')
							{
								$oct = $recordAddress -split ".", 0, "simplematch"
								$revZone = "$($oct[0]).in-addr.arpa"
								$PtrID = "$($oct[3]).$($oct[2]).$($oct[1])"
								$fqdn = "$($recordName).$($recordZone)"
								Add-DnsServerResourceRecordPtr -ComputerName p01iaw102 -ZoneName $revZone -Name $PtrID -PtrDomainName $fqdn -ErrorAction Stop
								Write-Host "$($recordName).$($recordZone) - $($PtrID).$($revZone)" -NoNewline
								Write-Host "  SUCCESSFUL" -ForegroundColor green
							}
							else
							{
								Write-host "No PTR Zones found for" -ForegroundColor Red -NoNewline
								Write-Host " $revZone"
							}
						}
						Catch
						{
							$err = $_.CategoryInfo.Category
							Write-Host "PTR record creation for $($recordName).$($recordZone) - $($PtrID).$($revZone) was" -NoNewline
							Write-Host " UNSUCCESSFUL" -ForegroundColor RED -NoNewline
							Write-Host "  ERROR: $err"
						}
					} -ArgumentList ($recordAddress, $recordName, $recordZone)
					""
					Write-Host "Would you like to create another DNS record? [Y/N]" -ForegroundColor Green -NoNewline
					$ans = Read-Host
				}
				Until ($ans -eq 'n')
			}
			
			# Non-Prod Import CSV
			
			if ($answer1 -eq "2")
			{
				do
				{
					Try
					{
						Write-Host "File path to DNSadd.csv: " -ForegroundColor Green -NoNewline
						$filePath = Read-Host
						$records = Import-Csv $filePath -ErrorAction Stop
						$records | ft | Out-Host
					}
					Catch
					{
						$err = $_.exception.filename
						Write-Host "$err" -NoNewline
						Write-Host " File not found" -ForegroundColor Red
					}
				}
				Until (!!$Records)
				" "
				Write-Host "Are these the records you want to add? (Y/N): " -ForegroundColor Green -NoNewline
				$answer2 = read-Host
				if ($answer2 -eq "y")
				{
					###################################
					#troubleshoot#
					Write-Verbose "Establishing secure connection.." -Verbose
					Invoke-Command -ComputerName n01itw1001.tent.trt.csaa.pri -Credential $credsDev -ScriptBlock {
						param ($Records, $credsDev)
						""
						$Records | Out-Host
						""
						$s = new-PSSession -ComputerName localhost -Credential $credsDev -Authentication CredSSP
						Invoke-Command -Session $s -ScriptBlock {
							param ($Records)
							Write-Verbose "Connection established" -Verbose
							""
							Write-Verbose "Creating DNS A records..." -Verbose
							""
							$Records | Out-Host
							""
							foreach ($record in $records)
							{
								$record | out-host
								$recordName = $record.name
								$recordZone = $record.zonename
								$recordAddress = $record.ipv4address
								Try
								{
									Add-DnsServerResourceRecordA -ComputerName n01iaw017 -Name $recordName -ZoneName $RecordZone -IPv4Address $RecordAddress -ErrorAction stop
									Write-Host "$($recordName).$($recordZone) - $($recordAddress)" -NoNewline
									Write-Host "  SUCCESSFUL" -ForegroundColor green
								}
								Catch
								{
									$err = $_.CategoryInfo.Category
									Write-Host "A record creation for $($recordName).$($recordZone) - $($recordAddress) was" -NoNewline
									Write-Host " UNSUCCESSFUL" -ForegroundColor RED -NoNewline
									Write-Host "  ERROR: $err"
								}
							}
							
						} -ArgumentList (, $Records)
					} -ArgumentList (, $Records, $credsDev)
					#####################################################
					Write-Verbose "Creating PTR records..." -Verbose
					
					$session = New-PSSession -Credential $credsProd -Authentication Credssp -ComputerName p01itw1006
					Invoke-Command -Session $session -ScriptBlock {
						param ($records)
						foreach ($record in $records)
						{
							$recordName = $record.name
							$recordZone = $record.zonename
							$recordAddress = $record.ipv4address
							$fqdn = "$($recordName).$($recordZone)"
							Try
							{
								
								if ($recordAddress -like '172.*' -or
								$recordAddress -like '209.*' -or
								$recordAddress -like '192.*')
								{
									$oct = $recordAddress -split ".", 0, "simplematch"
									$revZone = "$($oct[1]).$($oct[0]).in-addr.arpa"
									$PtrID = "$($oct[3]).$($oct[2])"
									Add-DnsServerResourceRecordPtr -ComputerName p01iaw102 -ZoneName $revZone -Name $PtrID -PtrDomainName $fqdn -ErrorAction Stop
									Write-Host "$($recordName).$($recordZone) - $($PtrID).$($revZone)" -NoNewline
									Write-Host "  SUCCESSFUL" -ForegroundColor green
								}
								elseif ($recordAddress -like '10.45.1.*' -or
								$recordAddress -like '206.*' -or
								$recordAddress -like '205.*' -or
								$recordAddress -like '216.*')
								{
									$oct = $recordAddress -split ".", 0, "simplematch"
									$revZone = "$($oct[2]).$($oct[1]).$($oct[0]).in-addr.arpa"
									$PtrID = "$($oct[3])"
									Add-DnsServerResourceRecordPtr -ComputerName p01iaw102 -ZoneName $revZone -Name $PtrID -PtrDomainName $fqdn -ErrorAction Stop
									Write-Host "$($recordName).$($recordZone) - $($PtrID).$($revZone)" -NoNewline
									Write-Host "  SUCCESSFUL" -ForegroundColor green
								}
								elseif ($recordAddress -like '10.*')
								{
									$oct = $recordAddress -split ".", 0, "simplematch"
									$revZone = "$($oct[0]).in-addr.arpa"
									$PtrID = "$($oct[3]).$($oct[2]).$($oct[1])"
									Add-DnsServerResourceRecordPtr -ComputerName p01iaw102 -ZoneName $revZone -Name $PtrID -PtrDomainName $fqdn -ErrorAction Stop
									Write-Host "$($recordName).$($recordZone) - $($PtrID).$($revZone)" -NoNewline
									Write-Host "  SUCCESSFUL" -ForegroundColor green
								}
								else
								{
									Write-host "No PTR Zones found for" -ForegroundColor Red -NoNewline
									Write-Host " $revZone"
								}
							}
							Catch
							{
								$err = $_.CategoryInfo.Category
								Write-Host "PTR record creation for $($recordName).$($recordZone) - $($PtrID).$($revZone) was" -NoNewline
								Write-Host " UNSUCCESSFUL" -ForegroundColor RED -NoNewline
								Write-Host "  ERROR: $err"
							}
						}
					} -ArgumentList (, $records)
				}
			}
			
		}
		""
	}

	Function Remove-SCCMobject
	{	
		param (
			[parameter(Mandatory = $true, 
            HelpMessage = "Enter a computer name")]
            [string[]]
            $computerName,
			[parameter(Mandatory = $false, 
            HelpMessage = "Enter SCCM server")]
            [string]
            $sccmServer = 'p01itw323',
			[parameter(Mandatory = $false, 
            HelpMessage = "Enter SCCM server")]
            [string]
            $sccmSite = 'PRD'
		)

		Write-Host "ENT user ID: " -NoNewline
		$user = Read-Host
		if ($user -notlike "ent\*")
		{ $user = "ent\" + $user }
		Write-Host "Password: " -NoNewline
		$pwd = Read-Host -AsSecureString
		$creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $user, $pwd
		""
        foreach ($computer in $computerName)
        {
            $comp = $null
		    Try
		    {
			    $comp = get-wmiobject -query "select * from SMS_R_SYSTEM WHERE Name='$computer'" -computername $sccmServer -namespace "ROOT\SMS\site_$sccmSite" -Credential $creds -ErrorAction Stop
			    if (!$comp)
			    {
				    Write-Host "Unable to query $computer for one of the following possible reasons:" -ForegroundColor Red
                    write-Host " - Object does not exist" -ForegroundColor Red
                    Write-Host " - Computer name is incorrect" -ForegroundColor Red
				    ""
			    }
		    }
		    Catch
		    {
			    if ($_.Exception -like '*access is denied*')
			    {
				    Write-Host "Access is denied. Check credentials." -ForegroundColor Red
                    Break
			    }
                else
                {
			        $err = ($_.Exception)
			        Write-Host "Unable to delete object $computer Error: $err" -ForegroundColor Red
			        ""
                }
		    }

            if (!!$comp) 
            {
		        Try
		        {
			        $comp.psbase.delete() 
                    Write-Host "Delete $computer from SCCM: " -NoNewline
		            Write-Host "SUCCESSFUL" -ForegroundColor Green
		            ""
		        }
		        Catch
		        {
			        Write-Error "Error Occurred when attempting to delete $computer"
			        ""
		        }
            }
        } 
	}

	function Datastore-Master
	{
		######### Add snapin (run on server or client?) and connect viserver
		##Test on split cluster in lab. xx
		##Add ability to search for unmounted datastores and detach.xx
		##Add option 3
		
		if (!(get-pssnapin | where { $_.name -eq "vmware.vimautomation.core" }))
		{
			try
			{
				add-pssnapin VMware.VimAutomation.Core -ErrorAction Stop | out-null
			}
			catch
			{
				[System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null
				
				$output = [System.Windows.Forms.MessageBox]::Show("PowerCLI cmdlets are required to run this script. Would you like to install it now from the following location?

                    \\ent\aaa\it\platform\windows\ServerEngineering\Software\VMWare",
				"PowerCLI Not Detected", 4)
				
				if ($output -eq "YES")
				{
					Try
					{
						Write-Verbose "Installing PowerCLI.." -Verbose
						Start-Process -FilePath "\\ent\aaa\it\platform\windows\ServerEngineering\Software\VMWare\VMware-PowerCLI-5.5.0-1295336.exe" -Wait
						""
						Write-Host "PowerCLI has been installed successfully!" -ForegroundColor Green
						Add-PSSnapin vmware.vimautomation.core
					}
					Catch
					{
						Write-Error "PowerCLI installation failed."
						break
					}
				}
				else
				{
					Write-Warning "PowerCLI must be installed to run this script. Please run this script after PowerCLI has been installed."
					break
				}
			}
		}
		""
		Write-Host "Select vCenter"
		""
		Write-Host "[1] P01VCW002"
		Write-Host "[2] P01VCW004"
		Write-Host "[3] N01VCW002"
		Write-Host "[4] N01VCW004"
		Write-Host "[5] N01VCW005"
		Write-Host "[6] N01VCW006"
		""
		$vcsel = Read-Host "Selection"
		if ($vcsel -eq "1") { $vc = "P01VCW002" }
		elseif ($vcsel -eq "2") { $vc = "P01VCW004" }
		elseif ($vcsel -eq "3") { $vc = "N01VCW002" }
		elseif ($vcsel -eq "4") { $vc = "N01VCW004" }
		elseif ($vcsel -eq "5") { $vc = "N01VCW005" }
		elseif ($vcsel -eq "6") { $vc = "N01VCW006" }
		
		if ($vc -like "P*")
		{
			Write-Host "ENT user ID: " -NoNewline
			$user = Read-Host
			if ($user -notlike "ent\*")
			{ $domainUser = "ent\" + $user }
			else { $domainUser = ($User) }
			Write-Host "Password: " -NoNewline
			$pwd = Read-Host -AsSecureString
			$creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $DomainUser, $pwd
			Write-Verbose "Connecting to vCenter $vc..." -Verbose
			Connect-VIServer $vc -Credential $creds
		}
		elseif ($vc -like "N*")
		{
			Write-Host "TENT user ID: " -NoNewline
			$user = Read-Host
			if ($user -notlike "tent\*")
			{ $domainUser = "tent\" + $user }
			else { $domainUser = ($User) }
			Write-Host "Password: " -NoNewline
			$pwd = Read-Host -AsSecureString
			$creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $DomainUser, $pwd
			Write-Verbose "Connecting to vCenter $vc..." -Verbose
			Connect-VIServer $vc -Credential $creds
			cls
		}
		""
		Write-Host "Please choose:"
		""
		Write-Host "[1] Unmount/detach LUNs for a specified datastore within a cluster"
		Write-Host "[2] Detach LUNs from all unmounted datastores in a cluster"
		#Write-Host "[3] Get host/LUN ID association info for a datastore"
		""
		[int32]$sel = Read-Host "Selection"
		
		if ($sel -ne "3")
		{
			Write-Verbose "Getting clusters.." -Verbose
			""
			$clusters = (Get-Cluster).name | sort
			$i = 0
			$a = @()
			foreach ($cluster in $clusters)
			{
				$i++
				$a = $a + "[$i] $($cluster)"
			}
			Write-Host "Select Cluster" -ForegroundColor Green
			""
			$a | Out-Host
			""
			$clusterSel = Read-Host "Selection"
			$clusterSel = $clusterSel - 1
			$clusterSelected = $clusters[$clusterSel]
			$ValidHosts = Get-Cluster $clusterSelected | Get-VMHost
			$ValidHostsNames = $ValidHosts.Name
			cls
			""
		}
		if ($sel -eq "1" -or $sel -eq "3")
		{
			Write-Verbose "Getting datastores.." -Verbose
			""
			$datastores = $ValidHosts | Get-Datastore | sort
			Write-Host "Select datastore to unmount/detach from all hosts in " -NoNewline
			Write-Host "$($clusters[$clustersel])" -ForegroundColor Green
			""
			$i = 0
			$a = @()
			foreach ($datastore in $datastores)
			{
				$i++
				$a = $a + "[$i] $($datastore)"
			}
			$a | ft -AutoSize
			""
			$dsSel = Read-Host "Selection"
			$dsSel = $dsSel - 1
			cls
			""
			$Datastore = Get-Datastore $datastores[$dsSel]
			write-host "Getting mount info for " -NoNewline
			Write-Host "$datastore " -ForegroundColor Green -NoNewline
			Write-Host "on cluster " -NoNewline
			Write-Host "$clusterSelected.." -ForegroundColor Green
			$DSmountInfo = ($Datastore | Get-DatastoreMountInfo)
			$Unmount = $DSmountInfo | where { $ValidHostsNames -contains $_.VMHost }
			""
			$Unmount | ft -AutoSize
			
			Write-Host "Do you want to Unmount/Detach these Host/LUN associations? [Y/N]: " -NoNewline
			$UDSel = Read-Host
			""
			if ($UDSel -eq "Y")
			{
				Unmount-Datastore $datastore $ValidHostsNames
				Detach-Datastore $datastore $ValidHostsNames
			}
		}
		elseif ($sel -eq "2")
		{
			$DSmountInfo = (Get-DatastoreMountInfo -clusterSelected $clusterSelected)
			$Unmounted = $DSmountInfo | where { ($ValidHostsNames -contains $_.VMHost) -and ($_.Mounted -like "false") }
			$Unmounted | ft -AutoSize
			Write-Host "Do you want to Detach these unmounted Datastore LUNs? [Y/N]: " -NoNewline
			$UDSel = Read-Host
			""
			if ($UDSel -eq "Y")
			{
				$UnmountedDSs = Get-Datastore -Name ($Unmounted.datastore)
				Detach-Datastore $UnmountedDSs $ValidHostsNames
			}
		}
		elseif ($sel -eq "3")
		{
			
		}
	}
	
	Function Get-DatastoreMountInfo
	{
		[CmdletBinding()]
		Param (
			[Parameter(ValueFromPipeline = $true)]
			$Datastore,
			[Parameter()]
			$clusterSelected
		)
		Process
		{
			$AllInfo = @()
			if (-not $Datastore)
			{
				$Datastore = (Get-Cluster $clusterSelected | Get-VMHost) | Get-Datastore
			}
			Foreach ($ds in $Datastore)
			{
				if ($ds.ExtensionData.info.Vmfs)
				{
					$hostviewDSDiskNames = $ds.ExtensionData.Info.vmfs.extent.diskname
					Foreach ($hostviewDSDiskName in $hostviewDSDiskNames)
					{
						if ($ds.ExtensionData.Host)
						{
							$attachedHosts = $ds.ExtensionData.Host
							Foreach ($VMHost in $attachedHosts)
							{
								$hostview = Get-View $VMHost.Key
								$hostviewDSState = $VMHost.MountInfo.Mounted
								$StorageSys = Get-View $HostView.ConfigManager.StorageSystem
								$devices = $StorageSys.StorageDeviceInfo.ScsiLun
								Foreach ($device in $devices)
								{
									if ($hostviewDSDiskName -contains $device.canonicalName)
									{
										$hostviewDSAttachState = $null
										if ($device.operationalState[0] -eq "ok")
										{
											$hostviewDSAttachState = "Attached"
										}
										elseif ($device.operationalState[0] -eq "off")
										{
											$hostviewDSAttachState = "Detached"
										}
										else
										{
											$hostviewDSAttachState = $device.operationalstate[0]
										}
										$props = [ordered]@{
											'Datastore' = $ds.Name;
											'VMHost' = $hostview.Name;
											'Lun' = (@($hostviewDSDiskName) | Out-String).Trim();
											'Mounted' = $hostviewDSState;
											'State' = $hostviewDSAttachState;
										}
										$AllInfo += [PSCustomObject] $props
									}
								}
								
							}
						}
					}
				}
			}
			$AllInfo | sort -Property vmhost
		}
	}
	
	
	Function Detach-Datastore
	{
		[CmdletBinding()]
		Param (
			[Parameter(ValueFromPipeline = $true)]
			$Datastore,
			[Parameter()]
			$ValidHostsNames
		)
		Process
		{
			Foreach ($ds in $Datastore)
			{
				$hostviewDSDiskName = $ds.ExtensionData.Info.vmfs.extent.Diskname
				if ($ds.ExtensionData.Host)
				{
					$attachedHosts = $ds.ExtensionData.Host
					Foreach ($VMHost in $attachedHosts)
					{
						$hostview = Get-View $VMHost.Key
						if ($ValidHostsNames -contains $hostview.Name)
						{
							$StorageSys = Get-View $HostView.ConfigManager.StorageSystem
							$devices = $StorageSys.StorageDeviceInfo.ScsiLun
							Foreach ($device in $devices)
							{
								if ($hostviewDSDiskName -contains $device.CanonicalName)
								{
									if ($device.operationalState[0] -eq "ok")
									{
										$LunUUID = $Device.Uuid
										Write-Host "Detaching LUN $($Device.CanonicalName) from host $($hostview.Name)..."
										$StorageSys.DetachScsiLun($LunUUID);
									}
									elseif ($device.operationalState[0] -eq "off")
									{ Write-Host "$($Device.CanonicalName) already detached from host $($hostview.Name)...skipping" }
								}
							}
						}
					}
				}
			}
		}
	}
	
	Function Unmount-Datastore
	{
		[CmdletBinding()]
		Param (
			[Parameter(ValueFromPipeline = $true)]
			$Datastore,
			[Parameter()]
			$ValidHostsNames
		)
		Process
		{
			Foreach ($ds in $Datastore)
			{
				$hostviewDSDiskName = $ds.ExtensionData.Info.vmfs.extent[0].Diskname
				if ($ds.ExtensionData.Host)
				{
					$attachedHosts = $ds.ExtensionData.Host
					Foreach ($VMHost in $attachedHosts)
					{
						$hostview = Get-View $VMHost.Key
						if ($ValidHostsNames -contains $hostview.Name)
						{
							$hostviewDSState = $VMHost.MountInfo.Mounted
							if ($hostviewDSState -eq "true")
							{
								$StorageSys = Get-View $HostView.ConfigManager.StorageSystem
								Write-Host "Unmounting VMFS Datastore $($DS.Name) from host $($hostview.Name)..."
								$StorageSys.UnmountVmfsVolume($DS.ExtensionData.Info.vmfs.uuid);
							}
							else { Write-Host "$($DS.Name) already unmounted from host $($hostview.Name)...skipping" }
						}
					}
				}
			}
		}
	}
	
	Function Get-UCSFirmware
	{
		if ($session)
		{
			$session | Remove-PSSession
		}
		Write-Host "ENT User ID: " -NoNewline
		$user = Read-Host
		if ($user -notlike "ent\*") { $user = "ent\" + $user }
		Write-Host "Password: " -NoNewline
		$pwd = Read-Host -AsSecureString
		$creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $user, $pwd
		Try
		{
			Write-Verbose "Connecting to PowerShell server.." -Verbose
			$session = New-PSSession -ComputerName p01itw1006 -Credential $creds -ErrorAction Stop
		}
		Catch
		{
			Write-Warning "Unable to connect to PowerShell server P01ITW1006. Please check your permissions. Exiting."
			Break
		}
		Try
		{
			Write-Verbose "Importing Cmdlets.." -Verbose
			Invoke-Command -Session $session -ScriptBlock {
				if ($env:PSModulePath -notlike "*D:\Program Files (x86)\Cisco\Cisco UCS PowerTool\Modules\*")
				{
					$env:PSModulePath = $env:PSModulePath + ";D:\Program Files (x86)\Cisco\Cisco UCS PowerTool\Modules\"
				}
				Import-Module CiscoUcsPS
				if ($env:PSModulePath -notlike "*C:\Program Files (x86)\VMware\Infrastructure\vSphere PowerCLI\Modules\*")
				{
					$env:PSModulePath = $env:PSModulePath + ";C:\Program Files (x86)\VMware\Infrastructure\vSphere PowerCLI\Modules\"
				}
			} -ErrorAction Stop

            $cmdletSplat = @{
                Session = $session
                CommandName = 'Set-UcsPowerToolConfiguration',
                              'Connect-Ucs', 
                              'Get-UcsServiceProfile'
                Prefix = 'Rem'
                FormatTypeName = '*'
                AllowClobber = $true
            }

			Import-PSSession @cmdletSplat -ErrorAction Stop | Out-Null
			Write-Host "Success!"
		}
		Catch
		{
			Write-Warning "Unable to import Cmdlets. Exiting."
			Break
		}
		""
		Write-Host "Which UCS domain(s)?"
		""
		Write-Host "[1] All domains (B series)"
		Write-Host "[2] Select domain(s).."
		""
		$domSel = Read-Host "Selection"
		$ucsDomains = @()
		if ($domSel -eq '1')
		{		
		    $ucsDomains = (Get-UcsDomains -BSeriesOnly)	
		}
		elseif ($domSel -eq '2')
		{
			""
            $ucsDomains = Select-FromList (Get-UcsDomains -BSeriesOnly)		
		}
        ''
        Write-Output "Domains selected:"
        Write-Output $ucsDomains

		do
		{
			$proceed = $null
			""
			#Write-Host "UCS User ID: " -NoNewline
			$user = 'admin'
			#    if ($user -notlike "ent\*")
			#        { $domainUser = "ent\"+$user }
			#    else { $domainUser = ($User) }
			Write-Host "User: $user"
			Write-Host "UCS Admin Password: " -NoNewline
			$pwd = Read-Host -AsSecureString
			$creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $User, $pwd
			Set-RemUcsPowerToolConfiguration -SupportMultipleDefaultUcs $true | Out-Null
			try
			{
				Write-Verbose "Connecting to UCS domains.." -Verbose
				Connect-RemUcs $ucsDomains -Credential $creds -erroraction stop | Out-Null
				Write-Host "Success!!"
				""
				$proceed = $true
			}
			catch
			{
				""
				Write-Host "Warning! Unable to connect to all domains. Try re-entering Admin password." -ForegroundColor 'Yellow'
			}
		}
		until (!!$proceed)
		
		do
		{
			do
			{
				$fw = $null
				$fwSel = $null
				Write-Host "What is the current firmware version?"
				""
				Write-Host "[1] 2.2-3e"
				Write-Host "[2] Other"
				""
				$fwSel = Read-Host "Selection"
				if ($fwSel -eq "1")
				{
					$fw = "2.2-3e"
				}
				elseif ($fwSel -eq "2")
				{
					$fw = Read-Host "Current firmware"
				}
				else
				{
					""
					Write-Host "Please choose a valid selection" -ForegroundColor 'Red'
					""
				}
			}
			until (1..2 -contains $fwSel)
			""
			
			Write-Host "Find UCS servers with.."
			""
			Write-Host "[1] firmware versions earlier than " -NoNewline
			Write-Host "$fw" -ForegroundColor 'Green'
			Write-Host "[2] Current firmware " -NoNewline
			Write-Host "$fw" -ForegroundColor 'Green'
			Write-Host "[3] Any firmware version"
			""
			$sel1 = Read-Host "Selection"
			
			""
			Write-Host "Search.."
			""
			Write-Host "[1] all UCS Servers"
			Write-Host "[2] only ESX Hosts"
			Write-Host "[3] only Windows Servers"
			Write-Host "[4] only Linux Servers"
			""
			[int]$sel2 = Read-Host "Selection"
			
			$SPs = Get-RemUcsServiceProfile -Type instance 
			
			if ($sel1 -eq "1") { $SPs = $SPs | where { $_.HostFwPolicyName -lt "$fw" } }
			elseif ($sel1 -eq "2") { $SPs = $SPs | where { $_.HostFwPolicyName -like "$fw" } }
			
			if ($sel2 -eq "1") { $all = $SPs | select Name, HostFwPolicyName, Assocstate, UCS, @{ N = "Chassis"; E = { $_.pndn -match '\d' | Out-Null; $Matches[0] } }, @{ N = "Blade"; E = { $_.pndn -match '\d$' | Out-Null; $Matches[0] } } | sort ucs }
			elseif ($sel2 -eq "2") { $all = $SPs | where { $_.Name -like "*ivl*" } | select Name, Hostfwpolicyname, Assocstate, UCS, @{ N = "Chassis"; E = { $_.pndn -match '\d' | Out-Null; $Matches[0] } }, @{ N = "Blade"; E = { $_.pndn -match '\d$' | Out-Null; $Matches[0] } } | sort ucs }
			elseif ($sel2 -eq "3") { $all = $SPs | where { $_.Name -notlike "*l*" } | select Name, Hostfwpolicyname, Assocstate, UCS, @{ N = "Chassis"; E = { $_.pndn -match '\d' | Out-Null; $Matches[0] } }, @{ N = "Blade"; E = { $_.pndn -match '\d$' | Out-Null; $Matches[0] } } | sort ucs }
			elseif ($sel2 -eq "4") { $all = $SPs | where { $_.Name -like "*l*" -and $_.Name -notlike '*iv*' } | select Name, Hostfwpolicyname, Assocstate, UCS, @{ N = "Chassis"; E = { $_.pndn -match '\d' | Out-Null; $Matches[0] } }, @{ N = "Blade"; E = { $_.pndn -match '\d$' | Out-Null; $Matches[0] } } | sort ucs }
			
			$all | ft -AutoSize
			
			Write-Host "[1] Generate report from results"
			Write-Host "[2] New search"
            Write-Host "[3] Done"
			""
			$selOption = Read-Host "Selection"
			""
			if ($selOption -eq "1")
			{
				$filetime = (Get-Date).ToString("yyyyMMdd")
				$filepath = $env:USERPROFILE + "\documents\UCSfirmware_$filetime.csv"
				$all | Export-Csv -NoTypeInformation -Path $filepath -Force
				Write-Host "Saved to: $filepath"
				Invoke-Item $filepath
				
			}
		}
		while ($selOption -eq "2")	
        break
	}
	
    Function AddVLANtagToHosts {
        ""
        if(!(get-pssnapin | where {$_.name -eq "vmware.vimautomation.core"})) 
        {
            try
                {
                add-pssnapin VMware.VimAutomation.Core -ErrorAction Stop | out-null
                } 
            catch 
                {
                [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null

                $output = [System.Windows.Forms.MessageBox]::Show("PowerCLI cmdlets are required to run this script. Would you like to install it now from the following location?

                \\ent\aaa\it\platform\windows\ServerEngineering\Software\VMWare",
                "PowerCLI Not Detected",4)

                    if ($output -eq "YES")
                    {
                    Try
                        {
                        Write-Verbose "Installing PowerCLI.." -Verbose
                        Start-Process -FilePath "\\ent\aaa\it\platform\windows\ServerEngineering\Software\VMWare\VMware-PowerCLI-5.5.0-1295336.exe" -Wait
                        ""
                        Write-Host "PowerCLI has been installed successfully!" -ForegroundColor Green
                        Add-PSSnapin vmware.vimautomation.core
                        } 
                    Catch 
                        {Write-Error "PowerCLI installation failed." 
                        break}
                    }
                else
                {
                Write-Warning "PowerCLI must be installed to run this script. Please run this script after PowerCLI has been installed."
                break
                }
            }
        }
        Write-Host "Select vCenter" -ForegroundColor Green
        ""
        Write-Host "[1] P01VCW002"
        Write-Host "[2] P01VCW004"
        Write-Host "[3] N01VCW002"
        Write-Host "[4] N01VCW004"
        Write-Host "[5] N01VCW005"
        Write-Host "[6] N01VCW006"
        ""
        $vcsel = Read-Host "Selection"
        if ($vcsel -eq "1") { $vc = "P01VCW002" }
        elseif ($vcsel -eq "2") { $vc = "P01VCW004" }
        elseif ($vcsel -eq "3") { $vc = "N01VCW002" }
        elseif ($vcsel -eq "4") { $vc = "N01VCW004" }
        elseif ($vcsel -eq "5") { $vc = "N01VCW005" }
        elseif ($vcsel -eq "6") { $vc = "N01VCW006" }

            if ($vc -like "P*") 
            {
            Write-Host "ENT user ID: " -NoNewline
            $user = Read-Host
                if ($user -notlike "ent\*")
                    { $domainUser = "ent\"+$user }
                else { $domainUser = ($User) }
            Write-Host "Password: " -NoNewline
            $pwd = Read-Host -AsSecureString
            $creds=new-object -typename System.Management.Automation.PSCredential -argumentlist $DomainUser,$pwd
            Write-Verbose "Connecting to vCenter $vc..." -Verbose
            Connect-VIServer $vc -Credential $creds
            }
            elseif ($vc -like "N*")
            {        
            Write-Host "TENT user ID: " -NoNewline
            $user = Read-Host
                if ($user -notlike "tent\*")
                    { $domainUser = "tent\"+$user }
                else { $domainUser = ($User) }
            Write-Host "Password: " -NoNewline
            $pwd = Read-Host -AsSecureString
            $creds=new-object -typename System.Management.Automation.PSCredential -argumentlist $DomainUser,$pwd
            Write-Verbose "Connecting to vCenter $vc..." -Verbose
            Connect-VIServer $vc -Credential $creds
            }
        ""
        $clusters = Get-Cluster | Select-Object -ExpandProperty name | Sort-Object

        $i = 0
        $a = @()

        foreach ($cluster in $clusters) 
        {
        $i++
        $a = $a + "[$i] $($cluster)"
        }

        Write-Host "Select Cluster" -ForegroundColor Green
        ""
        $a | Out-Host
        ""
        $clusterSel = Read-Host "Selection"
        $clusterSel = $clusterSel-1
        ""
        Write-Host "Which VLAN ID(s) would you like to add to $($clusters[$clustersel])?" -ForegroundColor Green
        Write-Host "If more than one, separate with commas (example: 255,200,401)"
        ""
        $vlanids = (Read-Host "Selection").Split(',') | % {$_.trim()}

        foreach ($vlanid in $vlanids)
        {               
        Write-Host "Adding VLAN $vlanid..." -ForegroundColor Cyan
        get-cluster "$($clusters[$clustersel])" | Get-VMHost | 
            foreach {
                Try {
                Write-Host "Adding VLAN $vlanid to $($_.name).."
                Get-VirtualSwitch -VMHost $_ -Name vswitch2 | New-VirtualPortGroup -Name "VLAN $vlanid" -VLanId "$vlanid" -ErrorAction Stop | Out-Null
                Write-Host "Success!"
                ""
                }         
                Catch 
                {
                Write-Host "Unable to add VLAN $vlanid for the following reason:" -ForegroundColor Red
                $($_.Exception.InnerException) | Out-Host
                ""
                }
            }
        }
    ""
    Write-Host "Press any key to return to Tools.."
    $placebo = $host.UI.RawUI.ReadKey("NoEcho,IncludeKeyUp")
        
    }

	
	Function Delete-Old-Snapshots
	{
		
		if (!(get-pssnapin | where { $_.name -eq "vmware.vimautomation.core" }))
		{
			try
			{
				add-pssnapin VMware.VimAutomation.Core -ErrorAction Stop | out-null
			}
			catch
			{
				[System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null
				
				$output = [System.Windows.Forms.MessageBox]::Show("PowerCLI cmdlets are required to run this script. Would you like to install it now from the following location?

                \\ent\aaa\it\platform\windows\ServerEngineering\Software\VMWare",
				"PowerCLI Not Detected", 4)
				
				if ($output -eq "YES")
				{
					Try
					{
						Write-Verbose "Installing PowerCLI.." -Verbose
						Start-Process -FilePath "\\ent\aaa\it\platform\windows\ServerEngineering\Software\VMWare\VMware-PowerCLI-5.5.0-1295336.exe" -Wait
						""
						Write-Host "PowerCLI has been installed successfully!" -ForegroundColor Green
						Add-PSSnapin vmware.vimautomation.core
					}
					Catch
					{
						Write-Error "PowerCLI installation failed."
						break
					}
				}
				else
				{
					Write-Warning "PowerCLI must be installed to run this script. Please run this script after PowerCLI has been installed."
					break
				}
			}
		}
		""
		Write-Host "Select vCenter" -ForegroundColor Green
		""
		Write-Host "[1] P01VCW002"
		Write-Host "[2] P01VCW004"
		Write-Host "[3] N01VCW002"
		Write-Host "[4] N01VCW004"
		Write-Host "[5] N01VCW005"
		Write-Host "[6] N01VCW006"
		""
		$vcsel = Read-Host "Selection"
		if ($vcsel -eq "1") { $vc = "P01VCW002" }
		elseif ($vcsel -eq "2") { $vc = "P01VCW004" }
		elseif ($vcsel -eq "3") { $vc = "N01VCW002" }
		elseif ($vcsel -eq "4") { $vc = "N01VCW004" }
		elseif ($vcsel -eq "5") { $vc = "N01VCW005" }
		elseif ($vcsel -eq "6") { $vc = "N01VCW006" }
		
		if ($vc -like "P*")
		{
			Write-Host "ENT user ID: " -NoNewline
			$user = Read-Host
			if ($user -notlike "ent\*")
			{ $domainUser = "ent\" + $user }
			else { $domainUser = ($User) }
			Write-Host "Password: " -NoNewline
			$pwd = Read-Host -AsSecureString
			$creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $DomainUser, $pwd
			Write-Verbose "Connecting to vCenter $vc..." -Verbose
			Connect-VIServer $vc -Credential $creds
		}
		elseif ($vc -like "N*")
		{
			Write-Host "TENT user ID: " -NoNewline
			$user = Read-Host
			if ($user -notlike "tent\*")
			{ $domainUser = "tent\" + $user }
			else { $domainUser = ($User) }
			Write-Host "Password: " -NoNewline
			$pwd = Read-Host -AsSecureString
			$creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $DomainUser, $pwd
			Write-Verbose "Connecting to vCenter $vc..." -Verbose
			Connect-VIServer $vc -Credential $creds
		}
		""
		Write-Host "Select Snapshot query"
		""
		Write-Host "[1] Snapshots over 30 days old"
		Write-Host "[2] All Snapshots"
		""
		$qry = Read-Host "Selection"
		if ($qry -eq "1")
		{
			Write-Verbose "Getting Snapshots older than 30 days on $vc.." -Verbose
			"Populating VMs.." | Out-Host
			$vms = Get-VM
			"VMs Populated!" | Out-Host
			"Scanning for Snapshots.." | Out-Host
			$i = 1
			$snapshots = @()
			foreach ($vm in $vms)
			{
				if ($i -le $vms.Count)
				{
                    Write-Progress -Activity "Scanning VMs for snapshots" -Status "$vm" -PercentComplete ($i / $VMs.Count * 100)
					$snapshot = Get-Snapshot -VM $vm | Where { $_.Created -lt (Get-Date).AddDays(-30) }
					$snapshots = $snapshots + $snapshot
					$i++
				}
			}
			$snpshotsView = $snapshots | select VM, @{ N = "Snapshot Name"; E = "Name" }, @{ N = "Size (MB)"; E = { [math]::Round($_.SizeMB, 3) } }, Created
			$snpshotsView | ft -AutoSize | Out-Host
			$sel = Read-Host "Would you like to delete these Snapshots? (Y/N)"
			if ($sel -eq "y")
			{
				$sel2 = Read-Host "Are you sure you want to delete the snapshots listed above? (Y/N)"
				if ($sel2 -eq "y")
				{
					Write-Verbose "Deleting snapshots..." -Verbose
					$snapshots | Remove-Snapshot -Confirm:$False -RunAsync | Out-Null
					""
					Write-Host "Snapshots have been deleted successfully!" -ForegroundColor Green
				}
			}
		}
		elseif ($qry -eq "2")
		{
			Write-Verbose "Getting all Snapshots on $vc.." -Verbose
			"Populating VMs.." | Out-Host
			$vms = Get-VM
			"VMs Populated!" | Out-Host
			"Scanning for Snapshots.." | Out-Host
			$i = 1
			$snapshots = @()
			foreach ($vm in $vms)
			{
				if ($i -le $vms.Count)
				{
					$snapshot = Get-Snapshot -VM $vm
					$snapshots = $snapshots + $snapshot
					Write-Progress -Activity "Scanning VMs for snapshots" -Status "$vm" -PercentComplete ($i / $VMs.Count * 100)
					$i++
				}
			}
			$snpshotsView = $snapshots | select VM, @{ N = "Snapshot Name"; E = "Name" }, @{ N = "Size (MB)"; E = { [math]::Round($_.SizeMB, 3) } }, Created
			$snpshotsView | ft -AutoSize | Out-Host
			$sel = Read-Host "Would you like to delete these Snapshots? (Y/N)"
			if ($sel -eq "y")
			{
				$sel2 = Read-Host "Are you sure you want to delete the snapshots listed above? (Y/N)"
				if ($sel2 -eq "y")
				{
					Write-Verbose "Deleting snapshots..." -Verbose
					$snapshots | Remove-Snapshot -Confirm:$false -RunAsync -ErrorAction SilentlyContinue | Out-Null
					""
					Write-Host "Snapshots have been deleted successfully!" -ForegroundColor Green
				}
			}
		}
		Disconnect-VIServer -Force		
	}
	
	Function PingIPRange
	{
		""
		Write-Host "Input the IP range" -ForegroundColor Green -NoNewline
		Write-Host " (/24 or smaller)"
		$startAddress = Read-Host "Starting IP"
		$startAddressOct = $StartAddress -split ".", 0, "simplematch"
		Write-Host "Ending IP: $($startAddressOct[0]).$($startAddressOct[1]).$($startAddressOct[2])." -NoNewline
		$EndOct = Read-Host
		""
		Write-Host "Pinging IP range..." -ForegroundColor Cyan
		
		$ping = New-Object System.Net.NetworkInformation.Ping
		$i = 0
		$startAddressOct[3] .. $EndOct | foreach {
			$ip = "$($startAddressOct[0]).$($startAddressOct[1]).$($startAddressOct[2]).$_"
			$Res = $ping.send($ip)
			
			if ($Res.Status -eq "Success")
			{
				$result = $ip + " = Success"
				Write-Host $result
				$i++
			}
			else
			{
				$result = $ip + " = Ping attempt failed"
				Write-Host $result -ForegroundColor Red
			}
		}
		""
		$Hosts = [string]$i + " Hosts are pingable"
		Write-Host $Hosts;
	}
	Function Install-PowerCLI
	{
		[System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null
		
		$output = [System.Windows.Forms.MessageBox]::Show("Would you like to install PowerCLI v5.5 from the following location?

        \\ent\aaa\it\platform\windows\ServerEngineering\Software\VMWare",
		"PowerCLI Not Detected", 4)
		
		if ($output -eq "YES")
		{
			Try
			{
				Write-Verbose "Installing PowerCLI.." -Verbose
				Start-Process -FilePath "\\ent\aaa\it\platform\windows\ServerEngineering\Software\VMWare\VMware-PowerCLI-5.5.0-1295336.exe" -Wait -ErrorAction Stop
				""
				Write-Host "PowerCLI has been installed successfully!" -ForegroundColor Green
				Add-PSSnapin vmware.vimautomation.core
			}
			Catch
			{
				Write-Error "PowerCLI installation failed."
			}
		}
	}
	
	Function Decom-VMs
	{
		
		if (!(get-pssnapin | where { $_.name -eq "vmware.vimautomation.core" }))
		{
			try
			{
				add-pssnapin VMware.VimAutomation.Core -ErrorAction Stop | out-null
			}
			catch
			{
				[System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null
				
				$output = [System.Windows.Forms.MessageBox]::Show("PowerCLI cmdlets are required to run this script. Would you like to install it now from the following location?

                \\ent\aaa\it\platform\windows\ServerEngineering\Software\VMWare",
				"PowerCLI Not Detected", 4)
				
				if ($output -eq "YES")
				{
					Try
					{
						Write-Verbose "Installing PowerCLI.." -Verbose
						Start-Process -FilePath "\\ent\aaa\it\platform\windows\ServerEngineering\Software\VMWare\VMware-PowerCLI-5.5.0-1295336.exe" -Wait
						""
						Write-Host "PowerCLI has been installed successfully!" -ForegroundColor Green
						Add-PSSnapin vmware.vimautomation.core
					}
					Catch
					{
						Write-Error "PowerCLI installation failed."
						break
					}
				}
				else
				{
					Write-Warning "PowerCLI must be installed to run this script. Please run this script after PowerCLI has been installed."
					break
				}
			}
		}
		""
		Write-Host "Decommission VMs" -ForegroundColor Green
		""
		Write-Host "Select vCenter"
		""
		Write-Host "[1] P01VCW002"
		Write-Host "[2] P01VCW004"
		Write-Host "[3] N01VCW002"
		Write-Host "[4] N01VCW004"
		Write-Host "[5] N01VCW005"
		Write-Host "[6] N01VCW006"
		""
		$vcsel = Read-Host "Selection"
		if ($vcsel -eq "1") { $vc = "P01VCW002" }
		elseif ($vcsel -eq "2") { $vc = "P01VCW004" }
		elseif ($vcsel -eq "3") { $vc = "N01VCW002" }
		elseif ($vcsel -eq "4") { $vc = "N01VCW004" }
		elseif ($vcsel -eq "5") { $vc = "N01VCW005" }
		elseif ($vcsel -eq "6") { $vc = "N01VCW006" }
		
		if ($vc -like "P*")
		{
			Write-Host "ENT user ID: " -NoNewline
			$user = Read-Host
			if ($user -notlike "ent\*")
			{ $domainUser = "ent\" + $user }
			else { $domainUser = ($User) }
			Write-Host "Password: " -NoNewline
			$pwd = Read-Host -AsSecureString
			$creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $DomainUser, $pwd
			Write-Verbose "Connecting to vCenter $vc..." -Verbose
			Connect-VIServer $vc -Credential $creds
		}
		elseif ($vc -like "N*")
		{
			Write-Host "TENT user ID: " -NoNewline
			$user = Read-Host
			if ($user -notlike "tent\*")
			{ $domainUser = "tent\" + $user }
			else { $domainUser = ($User) }
			Write-Host "Password: " -NoNewline
			$pwd = Read-Host -AsSecureString
			$creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $DomainUser, $pwd
			Write-Verbose "Connecting to vCenter $vc..." -Verbose
			Connect-VIServer $vc -Credential $creds
		}
		""
		Write-Host "File path to text file containing VM names to decommission: " -NoNewline
		$path = Read-Host
		$VMs = Get-Content "$path" | foreach { $_.TrimEnd() } | foreach { if (!!($_)) { Get-VM $_ } }
		""
		Write-Host "Decommission the following VMs?"
		$VMs | Out-Host
		$Sel = Read-Host "(Y/N)"
		if ($Sel -eq "Y")
		{
			do
			{
				foreach ($VM in $VMs)
				{
					$vmView = Get-View -ViewType VirtualMachine -Filter @{ "Name" = $VM.name }
					if ($vmView.Runtime.PowerState -eq "PoweredOn")
					{
						if ($vmView.config.Tools.ToolsVersion -ne 0)
						{
							Write-Host = "VMtools detected"
							Write-Host "Graceful OS shutdown of $VM.."
							Shutdown-VMGuest $VM -Confirm:$false -ErrorAction SilentlyContinue | Out-Null
						}
						else
						{
							Write-Host "VMware tools not installed. Force VM shutdown $VM.."
							Stop-VM $VM -Confirm:$false -ErrorAction SilentlyContinue | Out-Null
						}
					}
				}
			}
			Until ((get-vm $VMs).powerstate -notcontains "PoweredOn")
			
			Write-Verbose "Moving objects to Stale Computers OU.." -Verbose
			
			Invoke-Command -ComputerName n01itw1001.tent.trt.csaa.pri -Credential $creds -ScriptBlock {
				param ($creds, $VMs)
				$s = new-PSSession -ComputerName localhost -Credential $creds -Authentication CredSSP
				Invoke-Command -Session $s -ScriptBlock {
					param ($VMs)
					$vms | foreach { Get-ADComputer "$_" } | Move-ADObject -TargetPath "OU=Stale Computers,DC=tent,DC=trt,DC=csaa,DC=pri"
					""
					Write-Host "Completed" -ForegroundColor Green
				} -ArgumentList (, $VMs)
			} -ArgumentList ($creds, $vms)
			
		}
		
		###########TESTING
		#Call seperate script to create calendar reminder
		#$arguments = @()
		#$arguments += ("-Subject", "testing", "-Body", "more testing", "-location", "wherever")
		#$scriptPath = Split-Path $MyInvocation.PSScriptRoot
		#& "$scriptPath\Create-CalendarEntry.ps1" -subject "testing" -body "more testing" -location "wherever"
		
	}
	
	
	
	Function EsxStorageLunMap
	{
		# LUN Attached state crosscheck
		# Chris Stella
		# 10/1/2014
		
		# Define variables
		
		$brocFilePath = '\\ent\aaa\IT\Platform\Windows\StorageEngineering\Brocade_Config_Backup\brocade_bkup\'
		$P01BrocInfo = ls $brocFilePath | ? { $_.Name -like 'p01*' } | select -First 1 | gc
		$N01BrocInfo = ls $brocFilePath | ? { $_.Name -like 'n01*' } | select -First 1 | gc
		$regexHash = 'alias\.([pn]01dfn[02-9]\d+).{4}:([\w:]{9}..[\w:]{12})'
		$regexSanID = '(?<sanPrefix>[\w:]{9})..(?<sanSuffix>[\w:]{12})'
		$regexShortName = '^\w+$'
		$prodFQDN = '.ent.rt.csaa.com'
		$devFQDN = '.tent.trt.csaa.pri'
		$prodVCdom = ($prodFQDN).ToUpper().substring(1, 3)
		$devVCdom = ($devFQDN).ToUpper().substring(1, 4)
        		
		# Check for PowerCLI installation. If not installed, ask to install it
		
		if (!(get-pssnapin | where { $_.name -eq "vmware.vimautomation.core" }))
		{
			try
			{
				add-pssnapin VMware.VimAutomation.Core -ErrorAction Stop | out-null
			}
			catch
			{
				[System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null
				
				$output = [System.Windows.Forms.MessageBox]::Show("PowerCLI cmdlets are required to run this script. Would you like to install it now from the following location?

            \\ent\aaa\it\platform\windows\ServerEngineering\Software\VMWare",
				"PowerCLI Not Detected", 4)
				
				if ($output -eq "YES")
				{
					Try
					{
						Write-Verbose "Installing PowerCLI.." -Verbose
						Start-Process -FilePath "\\ent\aaa\it\platform\windows\ServerEngineering\Software\VMWare\VMware-PowerCLI-5.5.0-1295336.exe" -Wait -ErrorAction Stop
						""
						Write-Host "PowerCLI has been installed successfully!" -ForegroundColor Green
						Add-PSSnapin vmware.vimautomation.core
					}
					Catch
					{
						Write-Error "PowerCLI installation failed."
						break
					}
				}
				else
				{
					Write-Warning "PowerCLI must be installed to run this script. Please run this script after PowerCLI has been installed."
					break
				}
			}
		}
		
		# Select datacenter to populate storage arrays
		
		Write-Host "`nWhich datacenter?"
		""
		Write-Host "[1] PDC"
		Write-Host "[2] GDC"
		""
		$locationSel = Read-Host "Select"
		
		$prod = $null
		if ($locationSel -eq '1') { $brocInfo = $P01BrocInfo }
		elseif ($locationSel -eq '2')
		{
			""
			Write-Host "Dev or Stage/DR?"
			""
			Write-Host "[1] Dev"
			Write-Host "[2] Stage/DR"
			""
			$envSel = Read-Host "Selection"
			$brocInfo = $N01BrocInfo
			
		}
		
		# Determine the correct vCenter environments to select from based off array location and environment
		
		if ($locationSel -eq '1' -or ($locationSel -eq '2' -and $envSel -eq '2'))
		{
			$prodVC = $true
			$VCdomain = $prodVCdom
			$fqdn = $prodFQDN
		}
		else
		{
			$prodVC = $false
			$VCdomain = $devVCdom
			$fqdn = $devFQDN
		}
		""
		
		# Creating hash and array collections of storage arrays based off of config backup defined in $brocFilePath variable
		
		Write-Verbose "Populating array collections from config backup location.." -Verbose
		Write-Host "Config backup location: $brocFilePath"
		
		$Hash = @{ }
		$Arrays = @()
		$Matches = $null
		$brocInfo | foreach {
			$_ -match $regexHash | Out-Null
			if ($Matches)
			{
				if (!$Hash.ContainsValue($Matches[1]))
				{
					$Hash.Add($Matches[2], $Matches[1])
					$props = @{
						'Array' = $Matches[1];
						'SanID' = $Matches[2]
					}
					$obj = [PSCustomObject] $props
					$Arrays += $obj
				}
			}
		}
		""
		$Arrays.Array | Out-Host
		""
		# Generating numbered list of arrays for selection
    <#
    $ArraySort = $Arrays.Array | sort
    $i = 0
    $a = @()
    foreach ($Array in $ArraySort)
    {
	    $i++
	    $a = $a + "[$i] $($Array)"
    }

    Write-Host "Select storage array"
    ""
    $a | Out-Host
    ""
    $arraySel = Read-Host "Selection"
    $arraySel = $arraySel - 1
    $arrayName = $ArraySort[$arraySel]
    ""
    #>
		
		# Select virtual center to connect
		
		Write-Host "Select the vCenter managing the LUN-attached ESXi host(s)"
		""
		if ($prodVC)
		{
			Write-Host "[1] P01VCW002"
			Write-Host "[2] P01VCW004"
			""
			$vcSel = Read-Host "Selection"
			if ($vcSel -eq "1") { $vc = "P01VCW002" }
			elseif ($vcSel -eq "2") { $vc = "P01VCW004" }
			
		}
		else
		{
			Write-Host "[1] N01VCW002"
			Write-Host "[2] N01VCW004"
			Write-Host "[3] N01VCW005"
			Write-Host "[4] N01VCW006"
			""
			$vcsel = Read-Host "Selection"
			if ($vcsel -eq "1") { $vc = "N01VCW002" }
			elseif ($vcsel -eq "2") { $vc = "N01VCW004" }
			elseif ($vcsel -eq "3") { $vc = "N01VCW005" }
			elseif ($vcsel -eq "4") { $vc = "N01VCW006" }
			
		}
		""
		
		# Store credentials to $creds
		
		Write-Host "Provide credentials to connect to vCenter $vc"
		Write-Host "$VCdomain user ID: " -NoNewline
		$user = Read-Host
		if ($user -notlike "$VCdomain\*") { $user = "$VCdomain\" + $user }
		Write-Host "Password: " -NoNewline
		$pwd = Read-Host -AsSecureString
		$creds = new-object -typename System.Management.Automation.PSCredential -ArgumentList $user, $pwd
		""
		
		# Connect to selected virtual center (after disconnecting any existing connected virtual center sessions)
		
		if ($global:DefaultVIServers.Count -gt 0)
		{
			Disconnect-VIServer -Force -Confirm:$false
		}
		Write-Verbose "Connecting to vCenter $vc..." -Verbose
		Connect-VIServer ($vc + $fqdn) -Credential $creds
		""
		
		#Populating hash table of datastores with deviceID key/value pairs
		
		Write-Verbose "Populating datastore collections.." -Verbose
		""
		$datastoreHash = @{ }
		Get-Datastore |
		Where-Object { $_.ExtensionData.Info.GetType().Name -eq "VmfsDatastoreInfo" -and $_.Name -notlike "*local*" } |
		ForEach-Object {
			if ($_)
			{
				$Datastore = $_
				$Datastore.ExtensionData.Info.Vmfs.Extent | foreach {
					$datastoreHash.Add($_.DiskName, $Datastore)
				}
			}
		}
		
		# Select ESXi host input method
		
		do
		{
			
			$corr = $null
			While ($corr -ne 'y')
			{
				Write-Host "View LUN mappings for which ESXi hosts?"
				""
				Write-Host "[1] Select one or more ESX hosts from list"
				Write-Host "[2] All hosts in a ESX cluster"
				Write-Host "[3] All hosts in a datacenter"
				Write-Host "[4] All hosts in vCenter"
				""
				$ESXiInputSel = Read-Host "Select"
				""
				
				
				if ($ESXiInputSel -eq "1")
				{
                    if ($PSversion -le 2) {
					    $esxihostsArray = @()
					    Write-Host "Enter ESX host(s) (short name). Hit enter on empty line when finished"
					    ""
					    do
					    {
						    $input = (Read-Host "ESX hostname")
						    if ($input -match $regexShortName) { $input = $input + '*' }
						    if ($input -ne '') { $esxihostsArray += $input }
					    }
					    until ($input -eq '')
					    $esxihosts = Get-VMHost $esxihostsArray
					    ""
                    }
                    elseif ($PSversion -ge 3) {
                        Write-Verbose "Generating host list.." -Verbose
                        $esxihosts = Get-VMHost | Out-GridView -PassThru -Title "Select one or multiple ESX hosts (hold ctrl for multiple)"
                        ""
                    }
					
				}
				
				elseif ($ESXiInputSel -eq "2")
				{
					$clusterNames = (Get-Cluster).name | sort
					
					$i = 0
					$a = @()
					
					foreach ($clusterName in $clusterNames)
					{
						$i++
						$a = $a + "[$i] $($clusterName)"
					}
					
					Write-Host "Select Cluster"
					""
					$a | Out-Host
					""
					$clusterSel = Read-Host "Selection"
					$clusterSel = $clusterSel - 1
					$esxihosts = Get-Cluster $clusterNames[$clusterSel] | Get-VMHost
					""
				}
				elseif ($ESXiInputSel -eq "3")
				{
					$datacenterNames = (Get-Datacenter).name | sort
					
					$i = 0
					$a = @()
					
					foreach ($datacenterName in $datacenterNames)
					{
						$i++
						$a = $a + "[$i] $($datacenterName)"
					}
					
					Write-Host "Select Datacenter"
					""
					$a | Out-Host
					""
					$datacenterSel = Read-Host "Selection"
					$datacenterSel = $datacenterSel - 1
					""
					Write-Verbose "Generating list of ESX hosts in $($datacenterNames[$datacenterSel]).." -Verbose
					$esxihosts = Get-Datacenter $datacenterNames[$datacenterSel] | Get-VMHost
					""					
				}
				elseif ($ESXiInputSel -eq "4")
				{
					Write-Verbose "Generating list of all ESX hosts vCenter.." -Verbose
					$esxihosts = Get-VMHost
				}

                Write-Host "Selected ESXi hosts:"
                $esxihosts | Out-Host
                $corr = Read-Host "Is the list correct? [y/n]"
			}
			
			#Generating list of VMs with RDMs for final collection input
			
			Write-Verbose "Scanning VMs for attached RDMs.." -Verbose
			
			$vms = $esxihosts | Get-VM
			
			$n = 0
			
			$RDMvms = foreach ($vm in $vms)
			{
				$n++
				Write-Progress -Activity "Scanning VMs" -Status ("VM: {0}" -f $vm.Name) -PercentComplete ($n/$vms.Count * 100) -Id 0
				$vm | Get-HardDisk -DiskType RawPhysical, RawVirtual
			}
			
			$i = 0
			
			Write-Verbose "Collecting data.." -Verbose
			
			$data = ForEach ($esxi in $esxihosts)
			{
				$i++
				Write-Progress -Activity "Scanning hosts" -Status ("Host: {0}" -f $esxi.Name) -PercentComplete ($i/$esxihosts.count * 100) -Id 0
				$hostView = $esxi | Get-View
				$hba = $esxi | Get-VMHostHba -Type FibreChannel | select -First 1
				$scsiluns = $hba | Get-ScsiLun
				$j = 0
				ForEach ($scsilun in $scsiluns)
				{
					$j++
					Write-Progress -Activity "Scanning Luns" -Status ("Lun: {0}" -f $scsilun.CanonicalName) -PercentComplete ($j/$scsiluns.count * 100) -Id 2
					if (($hostView.Config.StorageDevice.ScsiLun | ? { $_.CanonicalName -eq $scsiLun.CanonicalName }).OperationalState -eq "ok")
					{
						$mountedState = "Attached"
					}
					elseif (($hostView.Config.StorageDevice.ScsiLun | ? { $_.CanonicalName -eq $scsilun.CanonicalName }).OperationalState -eq "off")
					{
						$mountedState = "Detached"
					}
					else
					{
						$mountedState = ($hostView.Config.StorageDevice.ScsiLun | ? { $_.CanonicalName -eq $scsilun.CanonicalName }).OperationalState
					}
					# Filter by uniqueness of canonicalname
					
					($scsilun | Get-Scsilunpath)[0].SanId -match $regexSanID | Out-Null
					$sanID = $Hash.GetEnumerator() | ? { $_.key -like "$($Matches.sanPrefix)*$($Matches.sanSuffix)" }
					$capacity = $datastoreHash.$($scsiLun.CanonicalName).CapacityGB
					$datastore = $datastoreHash.$($scsiLun.CanonicalName)
                    $deviceID = $scsilun.CanonicalName
					$RDMvmname = $null
					$RDMtype = $null
                    $DatastoreState = $null
					if (!$datastore)
					{
						$RDMvm = $RDMvms | ? { $_.scsicanonicalname -eq $deviceID }
						$RDMvmname = $RDMvm.parent.name
						if (!$RDMvmname)
						{
							$datastoreName = 'Not used'
						}
						else
						{
							$datastoreName = 'RDM'
							$capacity = $RDMvm.capacityGB
							$RDMtype = $RDMvm.disktype
						}
					}
                    else 
                    {
                        $datastoreName = $datastoreHash.$($scsiLun.CanonicalName).Name
                        $attachedhosts = $datastore.ExtensionData.Host
                        $mountedHost = $attachedhosts | Where-Object {$_.key -eq "$($esxi.id)"}
                        $isMounted = $mountedHost.MountInfo.Mounted
                        if ($isMounted -eq $true) {$DatastoreState = "Mounted"}
                        elseif ($isMounted -eq $false) {$DatastoreState = "Not Mounted"}
                        elseif ($isMounted -eq $null) {$DatastoreState = "Removed"}
                    }
					
					$properties = [ordered]@{
						Host = $esxi.Name
						#Source = "{0}" -f ((("{0:x}" -f $hba.PortWorldWideName) -split '([a-f0-9]{2})' | where { $_ }) -Join ":")
                        Cluster = $esxi.Parent
						Array = $sanID.Value
						#HBAName = $scsilun.RuntimeName
						#PathSelectionPolicy = $scsilun.MultiPathPolicy
						#Status = $scsipath.state
						#Target = $scsipath.SanId
						LUN = (($scsilun.RunTimeName -Split "L")[1] -as [Int])
						#Path = $scsipath.LunPath
						DeviceID = $deviceID
						State = $mountedState
						Datastore = $datastoreName
                        DatastoreState = $DatastoreState
						RDMConnectedTo = $RDMvmname -join ','
						RDMtype = $RDMtype -join ','
						CapacityGB = $capacity -join ','
						FreeSpaceGB = "{0:N2}" -f $datastoreHash.$($scsiLun.CanonicalName).FreeSpaceGB -join ','
					}
					New-Object PSobject -Property $properties
				}
			}
			
			
			# Setup color word function
			
			filter ColorWord {
				param (
					[string] $word,
					[string] $color
				)
				$line = $_
				$index = $line.IndexOf($word, [System.StringComparison]::InvariantCultureIgnoreCase)
				while ($index -ge 0)
				{
					Write-Host $line.Substring(0, $index) -NoNewline
					Write-Host $line.Substring($index, $word.Length) -NoNewline -ForegroundColor $color
					$used = $word.Length + $index
					$remain = $line.Length - $used
					$line = $line.Substring($used, $remain)
					$index = $line.IndexOf($word, [System.StringComparison]::InvariantCultureIgnoreCase)
				}
				Write-Host $line
			}
			
			# Select all devices or just detached
			
			Write-Host "View.."
			""
			Write-Host "[1] All devices"
			Write-Host "[2] Detached"
			""
			$selView = Read-Host "Selection"
			
			if ($selView -eq '1')
			{
				#$data | ft -AutoSize | Out-String | ColorWord -word attached -color red
                $data | Out-GridView
			}
			elseif ($selView -eq '2')
			{
				if (!($data | ? { $_.state -eq 'detached' }))
				{
					""
					Write-Host "There are no detached LUNs for on the selected hosts."
				}
				else { $data | ? { $_.state -eq 'detached' } | ft -AutoSize | Out-String | ColorWord -word attached -color red
                        $data | ? { $_.state -eq 'detached' } | Out-GridView }
			}
			
			Write-Host "[1] Generate report from results"
			Write-Host "[2] New search"
			""
			$selOption = Read-Host "Selection"
			""
			if ($selOption -eq "1")
			{
				$filetime = (Get-Date).ToString("yyyyMMdd")
				$filepath = $env:USERPROFILE + "\documents\ESXLUN_AttachedState_$filetime.csv"
				$data | Export-Csv -NoTypeInformation -Path $filepath -Force
				Write-Host "Saved to: $filepath"
				Invoke-Item $filepath
			}
		}
		
		while ($selOption -eq "2")		
	}

    function Get-UcsFImodel {

		Write-Host "Which UCS domain(s)?"
		""
		Write-Host "[1] All domains"
		Write-Host "[2] Select domain(s).."
		""
		$domSel = Read-Host "Selection"
		$ucsDomains = @()
		if ($domSel -eq '1')
		{		
		    $ucsDomains = (Get-UcsDomains)	
		}
		elseif ($domSel -eq '2')
		{
			""
            $ucsDomains = Select-FromList (Get-UcsDomains)		
		}
        ''
        Write-Output "Domains selected:"
        Write-Output $ucsDomains

        ""
        $creds = Get-Credential

        $info = @()

        foreach ($domain in $ucsDomains) {
            Connect-Ucs $domain -Credential $creds
            $FIinfo = Get-UcsNetworkElement
            $props = @{
                Domain = $domain;
                FImodel = $FIinfo | select -ExpandProperty Model;
                Serial = $FIinfo | select -ExpandProperty Serial;
                Dn = $FIinfo | select -ExpandProperty DN
                }
            $obj = New-Object psobject -Property $props
            $info += $obj
            Disconnect-Ucs
        }
        $info | Out-Host
    }
	
    function Backup-UcsDomainsCaller {
        
        ## This function calls the Backup-UCSDomains function in the MyTools module that was imported at the start of this script.

		if ($session)
		{
			$session | Remove-PSSession
		}
        
        Write-Output "Connect to PowerShell server with ENT credentials to import UCS Cmdlets..`n"
		Write-Host "ENT User ID: " -NoNewline
		$user = Read-Host
		if ($user -notlike "ent\*") { $user = "ent\" + $user }
		Write-Host "Password: " -NoNewline
		$pwd = Read-Host -AsSecureString
		$creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $user, $pwd
		Try
		{
			Write-Verbose "Connecting to PowerShell server.." -Verbose
			$session = New-PSSession -ComputerName p01itw1006 -Credential $creds -ErrorAction Stop
		}
		Catch
		{
			Write-Warning "Unable to connect to PowerShell server P01ITW1006. Please check your permissions. Exiting."
			Break
		}
		Try
		{
			Write-Verbose "Importing Cmdlets.." -Verbose
			Invoke-Command -Session $session -ScriptBlock {
				if ($env:PSModulePath -notlike "*D:\Program Files (x86)\Cisco\Cisco UCS PowerTool\Modules\*")
				{
					$env:PSModulePath = $env:PSModulePath + ";D:\Program Files (x86)\Cisco\Cisco UCS PowerTool\Modules\"
				}
				Import-Module CiscoUcsPS
                <#
				if ($env:PSModulePath -notlike "*C:\Program Files (x86)\VMware\Infrastructure\vSphere PowerCLI\Modules\*")
				{
					$env:PSModulePath = $env:PSModulePath + ";C:\Program Files (x86)\VMware\Infrastructure\vSphere PowerCLI\Modules\"
				}
                Import-Module vmware.vimautomation.core
                #>
			} -ErrorAction Stop

            $cmdletSplat = @{
                Session = $session
                CommandName = 'Set-UcsPowerToolConfiguration',
                              'Connect-Ucs', 
                              'Get-UcsServiceProfile'
                Prefix = 'Rem'
                FormatTypeName = '*'
                AllowClobber = $true
            }

			Import-PSSession @cmdletSplat -ErrorAction Stop | Out-Null
			Write-Host "Success!"
		}
		Catch
		{
			Write-Warning "Unable to import Cmdlets. Exiting."
			Break
		}

    }

    function Convert-CloudTemplatesToVms {
        Write-Host "- Convert Cloud templates to VMs for patching -`n" -ForegroundColor Green
        Write-Output "Getting template names..`n"
        $templateNames = gc $fileStorePath\CloudTemplates.txt
        $CloudvCenters = Get-CloudVCenters
        Write-Output "Please provide TENT vCenter credentials:`n"
        $creds = Get-Credential

        $array = $()

        foreach ($cloudvc in $CloudvCenters) {

            $obj = Convert-TemplatesToVmsAndPowerOn -TemplateName $templateNames -vCenterName $cloudvc -vCenterCreds $creds
            $array += $obj
        }
        
    }

    function Convert-CloudVmsToTemplates {
        Write-Host "- Convert Cloud VMs back to templates after patching -`n" -ForegroundColor Green
        Write-Output "Getting template names..`n"
        $templateNames = gc $fileStorePath\CloudTemplates.txt
        $CloudvCenters = Get-CloudVCenters
        Write-Output "Please provide TENT vCenter credentials:`n"
        $creds = Get-Credential

        $array = $()

        foreach ($cloudvc in $CloudvCenters) {

            $obj = Convert-VmsToTemplates -VmName $templateNames -vCenterName $cloudvc -vCenterCreds $creds
            $array += $obj
        }

    }

<#
    Function Test {
        Write-Debug "Debug" -Debug
        Start-Process -Credential Powershell -NoNewWindow -FilePath "$scriptPath\Create-CalendarEntry.ps1" -subject "testing" -body "more testing" -location "wherever"
    }
#>

#Write-Debug "testing" -Debug

    if ($proceedToMenu)
    {
        ""
	    Write-Host "Press any key to return to Tools.."
	    $host.UI.RawUI.ReadKey("NoEcho,IncludeKeyUp") | Out-Null
	}
    
    $proceedToMenu = $true

    do
	{
		Write-Host "
        ++++++ Tools ++++++" -ForegroundColor Green
		""
		Write-Host "VMware Tasks" -ForegroundColor DarkGreen
		Write-Host "[1] Pull vCenter report" -NoNewline -ForegroundColor DarkGray
		Write-Host " (Not ready yet)" -ForegroundColor DarkGray
		Write-Host "[2] Get/Delete Snapshots"
		Write-Host "[3] Add VLAN ID(s) to all hosts in a Cluster"
		Write-Host "[4] Decommission VMs"
		Write-Host "[5] Install PowerCLI v5.5"
		Write-Host "[6] Get/Unmount/Detach Datastore LUNs"
		Write-Host "Cisco UCS Tasks" -ForegroundColor DarkGreen
		Write-Host "[7] Get servers with old UCS Firmware"
        Write-Host "[8] Get Fabric Interconnect info for UCS domains"
		Write-Host "Storage Tools" -ForegroundColor DarkGreen
		Write-Host "[9] Check ESX host LUN attached state"
		Write-Host "Cloud Tasks" -ForegroundColor DarkGreen
		Write-Host "[10] Convert Cloud templates to VMs for patching"
		Write-Host "[11] Convert Cloud VMs back to templates after patching"
		Write-Host "Other" -ForegroundColor DarkGreen
		Write-Host "[12] Add DNS Entries"
		Write-Host "[13] Delete DNS Entries" -NoNewline -ForegroundColor DarkGray
		Write-Host " (Not ready yet)" -ForegroundColor DarkGray
		Write-Host "[14] Delete SCCM object"
		Write-Host "[15] Ping IP Range"
		#Write-Host "[9] Test"
		""
		Write-Host "Type 'c' to clear screen"
		Write-Host "Type 'q' to quit"
		""
		$ScriptSel = Read-Host "Please make your selection"
	}
	Until (1..15 -contains $ScriptSel -or
	$ScriptSel -eq "C" -or
	$scriptSel -eq "Q")
	if ($ScriptSel -eq "2") { Delete-Old-Snapshots }
	elseif ($ScriptSel -eq "3") { AddVLANtagToHosts }
	elseif ($ScriptSel -eq "4") { Decom-VMs }
	elseif ($ScriptSel -eq "5") { Install-PowerCLI }
	elseif ($ScriptSel -eq "6") { Datastore-Master }
	elseif ($ScriptSel -eq "7") { Get-UCSFirmware }
	elseif ($ScriptSel -eq "8") { Get-UcsFImodel }
	elseif ($ScriptSel -eq "9") { EsxStorageLunMap }
    elseif ($ScriptSel -eq "10") { Convert-CloudTemplatesToVms }
    elseif ($ScriptSel -eq "11") { Convert-CloudVmsToTemplates }
	elseif ($ScriptSel -eq "12") { Add-DNSRecords }
    elseif ($ScriptSel -eq "14") { Remove-SCCMobject }
	elseif ($ScriptSel -eq "15") { PingIPRange }
	elseif ($ScriptSel -eq "C") { cls }
	elseif ($ScriptSel -eq "Q") {
		if ($Host.Name -eq 'ConsoleHost')
		{
			Stop-Process $PID
			Exit
		}
	}
}
until ($ScriptSel -eq "Q")
