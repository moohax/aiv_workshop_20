Deploy-AzureResourceGroup.ps1,b68a6c33f87e3ee80387bc40859fc683,Scan result is 1. IsMalware: 0,
