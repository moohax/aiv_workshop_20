NewHireAuthorization.ps1,ca5502a8660fec712e4b329ee877ab58,Scan result is 1. IsMalware: 0,w6/Cu8K/ZnVuY3Rpb24gdXNlcmlucHV0IHsKCiRHbG9iYWw6T2xkVXNlciA9IFJlYWQtSG9zdCAtUHJvbXB0ICdVc2VyaWQgb2YgdGhlIHVzZXIgeW91IGFyZSBjb3B5aW5nIGdyb3VwcyBmcm9tJwoKd2hpbGUgKC1ub3QoZHNxdWVyeSB1c2VyIC1zYW1pZCAkb2xkdXNlcikpCnsKICAgICRHbG9iYWw6T2xkVXNlciA9IFJlYWQtSG9zdCAtUHJvbXB0ICIkT2xkVXNlciBkb2VzIG5vdCBleGlzdC4gUGxlYXNlIGVudGVyIGEgdmFsaWQgdXNlcmlkLiIKfQoKJEdsb2JhbDpuZXd1c2VyID0gUmVhZC1Ib3N0IC1Qcm9tcHQgJ1VzZXJpZCBvZiB0aGUgdXNlciB5b3UgYXJlIGNvcHlpbmcgdG8nCndoaWxlICgtbm90KGRzcXVlcnkgdXNlciAtc2FtaWQgJG5ld3VzZXIpKQp7CiAgICAkR2xvYmFsOm5ld3VzZXIgPSBSZWFkLUhvc3QgLVByb21wdCAiJG5ld3VzZXIgZG9lcyBub3QgZXhpc3QuIFBsZWFzZSBlbnRlciBhIHZhbGlkIHVzZXJpZC4iCn0KCiRHbG9iYWw6TmV3VXNlck5hbWUgPSAoR2V0LUFEVXNlciAkbmV3dXNlciAtUHJvcGVydGllcyBEaXNwbGF5TmFtZSB8CiAgICAgICAgU2VsZWN0LU9iamVjdCAtUHJvcGVydHkgRGlzcGxheW5hbWUgfAogICAgICAgIEZvcm1hdC1UYWJsZSAtSGlkZVRhYmxlSGVhZGVycyB8CiAgICBPdXQtU3RyaW5nKS5UcmltKCkKICAgICRHbG9iYWw6TmV3VXNlclRpdGxlID0gKEdldC1BRFVzZXIgJG5ld3VzZXIgLVByb3BlcnRpZXMgVGl0bGUgfAogICAgICAgIFNlbGVjdC1PYmplY3QgLVByb3BlcnR5IFRpdGxlIHwKICAgICAgICBGb3JtYXQtVGFibGUgLUhpZGVUYWJsZUhlYWRlcnMgfAogICAgT3V0LVN0cmluZykuVHJpbSgpCiAgICAkR2xvYmFsOk5ld1VzZXJEZXBhcnRtZW50ID0gKEdldC1BRFVzZXIgJG5ld3VzZXIgLVByb3BlcnRpZXMgRGVwYXJ0bWVudCB8CiAgICAgICAgU2VsZWN0LU9iamVjdCAtUHJvcGVydHkgRGVwYXJ0bWVudCB8CiAgICAgICAgRm9ybWF0LVRhYmxlIC1IaWRlVGFibGVIZWFkZXJzIHwKICAgIE91dC1TdHJpbmcpLlRyaW0oKQogICAgJEdsb2JhbDpOZXdVc2VyTWFuYWdlciA9IChHZXQtQURVc2VyICRuZXd1c2VyIC1Qcm9wZXJ0aWVzIE1hbmFnZXIgfAogICAgICAgIFNlbGVjdC1PYmplY3QgLVByb3BlcnR5IEB7CiAgICAgICAgICAgIG4gPSAnTWFuYWdlcicKICAgICAgICAgICAgZSA9IHsKICAgICAgICAgICAgICAgICRfLk1hbmFnZXIgLXJlcGxhY2UgJ15DTj0oLis/KSwoPzpDTnxPVSkuKycsICckMScKICAgICAgICAgICAgfQogICAgICAgIH0gfAogICAgICAgIEZvcm1hdC1UYWJsZSAtSGlkZVRhYmxlSGVhZGVycyB8CiAgICBPdXQtU3RyaW5nKS5UcmltKCkKICAgICNUaGVzZSBhcmUgdGhlIHZhcmlhYmxlcyBmb3IgdGhlIG5ldyBoaXJlLgoKICAgJEdsb2JhbDpvbGRVc2VyTmFtZSA9IChHZXQtQURVc2VyICRvbGR1c2VyIC1Qcm9wZXJ0aWVzIERpc3BsYXlOYW1lIHwKICAgICAgICBTZWxlY3QtT2JqZWN0IC1Qcm9wZXJ0eSBEaXNwbGF5bmFtZSB8CiAgICAgICAgRm9ybWF0LVRhYmxlIC1IaWRlVGFibGVIZWFkZXJzIHwKICAgICAgICBPdXQtU3RyaW5nKS5UcmltKCkKCmlmICghJG5ld3VzZXJ0aXRsZSkgewokR2xvYmFsOk5ld1VzZXJUaXRsZSA9IFJlYWQtSG9zdCAtUHJvbXB0ICdQbGVhc2UgZW50ZXIgdGhlIHVzZXIgdGl0bGUnCn0KaWYgKCEkTmV3VXNlckRlcGFydG1lbnQpIHsKJEdsb2JhbDpOZXdVc2VyRGVwYXJ0bWVudCA9IFJlYWQtSG9zdCAtUHJvbXB0ICdQbGVhc2UgZW50ZXIgdGhlIHVzZXIgZGVwYXJ0bWVudCcKfQppZiAoISRuZXd1c2VybWFuYWdlcikgewokR2xvYmFsOk5ld1VzZXJNYW5hZ2VyID0gUmVhZC1Ib3N0IC1Qcm9tcHQgIlBsZWFzZSBlbnRlciB0aGUgdXNlcidzIG1hbmFnZXIiCn0KCgogICAgJEdsb2JhbDphbnN3ZXIgPSBSZWFkLUhvc3QgIlRoaXMgd2lsbCByZXF1ZXN0IHNlY3VyaXR5IGdyb3VwcyBiZSBjb3BpZWQgZnJvbSAkT2xkVXNlcm5hbWUgdG86CiAgICBVc2VyIElEOiAkbmV3dXNlcgogICAgTmFtZTogJG5ld3VzZXJuYW1lCiAgICBUaXRsZTogJG5ld3VzZXJ0aXRsZQogICAgRGVwYXJ0bWVudDogJG5ld3VzZXJkZXBhcnRtZW50CiAgICBNYW5hZ2VyOiAkbmV3dXNlcm1hbmFnZXIKICAgIElzIHRoaXMgY29ycmVjdD8gKFllcyBvciBObykiCgp3aGlsZSgieWVzIiwibm8iLCJ5IiwgIm4iLCAiWSIsICJOIiwgIlllcyIsICJObyIgLW5vdGNvbnRhaW5zICRhbnN3ZXIpCnsKCSRHbG9iYWw6YW5zd2VyID0gUmVhZC1Ib3N0ICJQbGVhc2UgZW50ZXIgWWVzIG9yIE5vIgp9CiAgICB9CiAgICAjIFRoZXNlIHZhcmlhYmxlcyBhY2NlcHQgdGhlIHVzZXIgaW5wdXQuCgpkb3sKIHVzZXJpbnB1dCAgIAp9CnVudGlsICgoJGFuc3dlciAtZXEgJ3llcycpIC1vciAoJGFuc3dlciAtZXEgJ3knKSAtb3IgKCRhbnN3ZXIgLWVxICdZJykgLW9yICgkYW5zd2VyIC1lcSAnWWVzJykpCiAgIAoKICAgIGlmICggKEdldC1EYXRlIC1VRm9ybWF0ICVwKSAtZXEgJ0FNJyApICB7CiAgICAgICAgJEdyZWV0aW5nID0gJ0dvb2QgbW9ybmluZywnCiAgICB9ICNFbmQgaWYKICAgIGVsc2UgewogICAgICAgICRHcmVldGluZyA9ICdHb29kIGFmdGVybm9vbiwnCiAgICB9ICNlbmQgZWxzZQogICAgIyBUaGlzIGNoZWNrcyB0aW1lIG9mIGRheSBhbmQgc2V0cyB0aGUgZ3JlZXRpbmcKCiAgICBOZXctSXRlbSAtSXRlbVR5cGUgZGlyZWN0b3J5IC1Gb3JjZSAtUGF0aCBJOlwiTmV3IEhpcmUgTG9ncyJcIiRuZXd1c2VyIlwgLWVhIFNpbGVudGx5Q29udGludWUKICAgICMgU28gd2UgY2FuIGR1bXAgYSBsb2dmaWxlIGF0IHRoZSBlbmQgb2YgdGhlIHNjcmlwdAoKICAgIENsZWFyLUhvc3QKICAgICMgVG8gdGlkeSB1cCB0aGUgc2NyZWVuIGZyb20gYW55IGRpYWxvZ3VlIG9mIGNyZWF0aW5nIHRoZSBkaXJlY3RvcnkKCiAgICBXcml0ZS1Ib3N0ICdSZXF1ZXN0IGlzIHByb2Nlc3NpbmcuIE91dGxvb2sgd2lsbCBvcGVuIGVtYWlscyB0byByZXF1ZXN0IGF1dGhvcml6YXRpb24gaWYgbmVlZGVkLicKICAgICMgV2Ugd2FudCB0byBtYWtlIHN1cmUgdGhlIHVzZXIga25vd3MgdGhlIHNjcmlwdCBpcyBkb2luZyBpdHMgam9iLgoKICAgICRHcm91cHMgPSBHZXQtQURQcmluY2lwYWxHcm91cE1lbWJlcnNoaXAgLUlkZW50aXR5ICRPbGRVc2VyIHwKICAgIEdldC1BREdyb3VwIC1Qcm9wZXJ0aWVzIE5hbWUsIG1hbmFnZWRieSB8IAogICAgU2VsZWN0LU9iamVjdCAtUHJvcGVydHkgTmFtZSwgQHsKICAgICAgICBuID0gJ01hbmFnZWRCeScKICAgICAgICBlID0gewogICAgICAgICAgICAkXy5NYW5hZ2VkQnkgLXJlcGxhY2UgJ15DTj0oLis/KSwoPzpDTnxPVSkuKycsICckMScKICAgICAgICB9CiAgICB9IHwKICAgIFdoZXJlLU9iamVjdCAtRmlsdGVyU2NyaXB0IHsKICAgICAgICAkXy5tYW5hZ2VkYnkgLW5lICcnLWFuZCAkXy5tYW5hZ2VkYnkgLW5lICdCZW5zb24gUmljaGVtZScKICAgIH0gfCAKICAgIEdyb3VwLU9iamVjdCAtUHJvcGVydHkgbWFuYWdlZGJ5CiAgICAkR3JvdXBMaXN0ID0gR2V0LUFEUHJpbmNpcGFsR3JvdXBNZW1iZXJzaGlwIC1JZGVudGl0eSAkT2xkVXNlciB8CiAgICBHZXQtQURHcm91cCAtUHJvcGVydGllcyBOYW1lLCBtYW5hZ2VkYnkgfCAKICAgIFNlbGVjdC1PYmplY3QgLVByb3BlcnR5IE5hbWUsIEB7CiAgICAgICAgbiA9ICdNYW5hZ2VkQnknCiAgICAgICAgZSA9IHsKICAgICAgICAgICAgJF8uTWFuYWdlZEJ5IC1yZXBsYWNlICdeQ049KC4rPyksKD86Q058T1UpLisnLCAnJDEnCiAgICAgICAgfQogICAgfSB8ICAKICAgIFdoZXJlLU9iamVjdCAtRmlsdGVyU2NyaXB0IHsKICAgICAgICAkXy5tYW5hZ2VkYnkgLW5lICcnIC1hbmQgJF8ubWFuYWdlZGJ5IC1uZSAnQmVuc29uIFJpY2hlbWUnCiAgICB9IHwgc29ydCBNYW5hZ2VkQnkgCiAgICAjIFRoZXNlIHB1bGwgdGhlIGdyb3VwcyB0aGF0IG5lZWQgYXBwcm92YWwgYW5kIGdyb3VwcyB0aGVtIGJ5IG1hbmFnZWRieS4gCiAgICAkT0ZTID0gImB0YG4iICAKICAKICAgIGZvcmVhY2ggKCRHcm91cCBpbiAkR3JvdXBzKQogICAgewogICAgICAgICRNYW5hZ2VyTWFpbCA9IEdldC1BRFVzZXIgLUZpbHRlciAiZGlzcGxheW5hbWUgLWxpa2UgJyQoJEdyb3VwLm5hbWUpJyIgLVByb3BlcnRpZXMgTWFpbCB8CiAgICAgICAgU2VsZWN0LU9iamVjdCAtUHJvcGVydHkgTWFpbCB8CiAgICAgICAgRm9ybWF0LVRhYmxlIC1IaWRlVGFibGVIZWFkZXJzIHwKICAgICAgICBPdXQtU3RyaW5nCiAgICAgICAgJE1hbmFnZXJOYW1lID0gKEdldC1BRFVzZXIgLUZpbHRlciAiZGlzcGxheW5hbWUgLWxpa2UgJyQoJEdyb3VwLm5hbWUpJyIgLVByb3BlcnRpZXMgR2l2ZW5OYW1lIHwgCiAgICAgICAgICAgIFNlbGVjdC1PYmplY3QgLVByb3BlcnR5IEdpdmVuTmFtZSB8CiAgICAgICAgICAgIEZvcm1hdC1UYWJsZSAtSGlkZVRhYmxlSGVhZGVycyB8CiAgICAgICAgT3V0LVN0cmluZykuVHJpbSgpCiAgICAgICAgJEdyb3VwbmFtZXMgPSAoJEdyb3VwLmdyb3VwLm5hbWUgfCBPdXQtU3RyaW5nKS5UcmltKCkKICAgICAgICAjIFRoZXNlIHNldCB0aGUgdmFyaWFsYmUgZm9yIGVhY2ggbWFuYWdlciBhbmQgdGhlIGdyb3VwcyB0aGV5IG93bgogICAgICAgIGlmICgkR3JvdXBuYW1lcyAtbGlrZSAnKkFwcGxpY2F0aW9uLUh5cGVyaW9uLVBsYW5uaW5nKicpCiAgICAgICAgewogICAgICAgICAgICAkTWFuYWdlck1haWwgPSAnU01hbmFzQHNiYXNpdGUuY29tJwogICAgICAgICAgICAkTWFuYWdlck5hbWUgPSAnU2VyZ2lvJwogICAgICAgIH0KICAgICAgICBpZiAoJEdyb3VwbmFtZXMgLWxpa2UgJypSU01QTyonKQogICAgICAgIHsKICAgICAgICAgICAgJE1hbmFnZXJNYWlsID0gJ2xjZXN0YXJlQHNiYXNpdGUuY29tJwogICAgICAgIH0KCiAgICAgICAgW3N0cmluZ10kZW1haWxib2R5ID0gJycKICAgICAgICAkT3V0bG9vayA9IE5ldy1PYmplY3QgLUNvbU9iamVjdCBPdXRsb29rLkFwcGxpY2F0aW9uCiAgICAgICAgJE1haWwgPSAkT3V0bG9vay5BcHBsaWNhdGlvbi5DcmVhdGVJdGVtRnJvbVRlbXBsYXRlKCdIOlxIZWxwZGVza1xTY3JpcHRzXFRlbXBsYXRlLm9mdCcpCiAgICAgICAgJE1haWwuVG8gPSAkTWFuYWdlck1haWwKICAgICAgICAkTWFpbC5TdWJqZWN0ID0gIlNlY3VyaXR5IEdyb3VwIEFjY2VzcyBSZXF1ZXN0IC0gJE5ld1VzZXJOYW1lIgogICAgICAgIFtzdHJpbmddJE1haWwuQm9keSA9ICIkR3JlZXRpbmcgICRNYW5hZ2VyTmFtZQoKClBsZWFzZSBhcHByb3ZlL2RlbnkgJE5ld1VzZXJOYW1lIGZvciBhY2Nlc3MgdG8gdGhlIGZvbGxvd2luZyBncm91cChzKTogCiAKJEdyb3VwbmFtZXMKClRoZWlyIHRpdGxlIGlzICROZXdVc2VyVGl0bGUgYW5kIHRoZXkgd29yayBpbiAkTmV3VXNlckRlcGFydG1lbnQgZm9yICROZXdVc2VyTWFuYWdlciIKICAgICAgICAkTWFpbC5EaXNwbGF5KCkKICAgIH0KICAgICMgVGhpcyBpcyB0aGUgZW1haWwgdGhhdCBnb2VzIHRvIGVhY2ggYXBwcm92ZXIuIEl0IHVzZXMgdGhlIHZhcmlhYmxlcyB0byBmaWxsIGluIHJlbGF2ZW50IGluZm9ybWF0aW9uLgoKICAgICRHcm91cExpc3QgfCBFeHBvcnQtQ1NWICJJOlxOZXcgSGlyZSBMb2dzXCRuZXd1c2VyXCRPbGRVc2VyIEdyb3Vwcy5jc3YiCiAgICAjVGhpcyBkdW1wcyB0aGUgbG9nZmlsZSB0byB5b3VyIEkgRHJpdmUKCiAgICMgQ2xlYXItSG9zdCAKICAgIFdyaXRlLUhvc3QgJ1RoZSBzY3JpcHQgaGFzIGNvbXBsZXRlZC4gVGhlIGZvbGxvd2luZyBncm91cHMgbmVlZCBhdXRob3JpemF0aW9uOicgCiAgICBXcml0ZS1Ib3N0CiAgICAkR3JvdXBMaXN0CiAgICBJbnZva2UtSXRlbSAiSTpcTmV3IEhpcmUgTG9nc1wkbmV3dXNlclwkT2xkVXNlciBHcm91cHMuY3N2IgogICAgV3JpdGUtSG9zdCAKICAgIFdyaXRlLUhvc3QgIAogICAgUGF1c2U=
