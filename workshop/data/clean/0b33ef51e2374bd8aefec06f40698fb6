Functions-Aws-Ec2.ps1,a4d49618819a486ef5e42460820d9a27,Scan result is 1. IsMalware: 0,ZnVuY3Rpb24gV2FpdC1FYzJJbnN0YW5jZVJlYWNoZXNEZXNpcmVkU3RhdGUKewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtCiAgICAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW3N0cmluZ10kYXdzS2V5LAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtzdHJpbmddJGF3c1NlY3JldCwKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbc3RyaW5nXSRhd3NSZWdpb24sCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW3N0cmluZ10kaW5zdGFuY2VpZCwKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbc3RyaW5nXSRkZXNpcmVkc3RhdGUKICAgICkKCiAgICBpZiAoJHJvb3REaXJlY3RvcnkgLWVxICRudWxsKSB7IHRocm93ICJyb290RGlyZWN0b3J5IHNjcmlwdCBzY29wZWQgdmFyaWFibGUgbm90IHNldC4gVGhhdHMgYmFkLCBpdHMgdXNlZCB0byBmaW5kIGRlcGVuZGVuY2llcy4iIH0KICAgICRyb290RGlyZWN0b3J5UGF0aCA9ICRyb290RGlyZWN0b3J5LkZ1bGxOYW1lCiAgICAkY29tbW9uU2NyaXB0c0RpcmVjdG9yeVBhdGggPSAiJHJvb3REaXJlY3RvcnlQYXRoXHNjcmlwdHNcY29tbW9uIgoKICAgIC4gIiRjb21tb25TY3JpcHRzRGlyZWN0b3J5UGF0aFxGdW5jdGlvbnMtQXdzLnBzMSIKCiAgICBFbnN1cmUtQXdzUG93ZXJzaGVsbEZ1bmN0aW9uc0F2YWlsYWJsZQoKICAgIHdyaXRlLXZlcmJvc2UgIldhaXRpbmcgZm9yIHRoZSBFQzIgSW5zdGFuY2Ugd2l0aCBJZCBbJCgkaW5zdGFuY2VpZCldIHRvIHJlYWNoIFskZGVzaXJlZHN0YXRlXSBzdGF0ZS4iCiAgICAkaW5jcmVtZW50ID0gNQogICAgJHRvdGFsV2FpdFRpbWUgPSAwCiAgICAkdGltZW91dCA9IDM2MAogICAgd2hpbGUgKCR0cnVlKQogICAgewogICAgICAgICRhID0gR2V0LUVDMkluc3RhbmNlIC1GaWx0ZXIgQHtOYW1lID0gImluc3RhbmNlLWlkIjsgVmFsdWVzID0gJGluc3RhbmNlaWR9IC1SZWdpb24gJGF3c1JlZ2lvbiAtQWNjZXNzS2V5ICRhd3NLZXkgLVNlY3JldEtleSAkYXdzU2VjcmV0CiAgICAgICAgJHN0YXRlID0gJGEuSW5zdGFuY2VzWzBdLlN0YXRlLk5hbWUKCiAgICAgICAgaWYgKCRzdGF0ZSAtZXEgJGRlc2lyZWRzdGF0ZSkKICAgICAgICB7CiAgICAgICAgICAgIHdyaXRlLXZlcmJvc2UgIlRoZSBFQzIgSW5zdGFuY2Ugd2l0aCBJZCBbJCgkaW5zdGFuY2VpZCldIHRvb2sgWyR0b3RhbFdhaXRUaW1lXSBzZWNvbmRzIHRvIHJlYWNoIHRoZSBbJGRlc2lyZWRzdGF0ZV0gc3RhdGUuIgogICAgICAgICAgICBicmVhawogICAgICAgIH0KCiAgICAgICAgd3JpdGUtdmVyYm9zZSAiJChHZXQtRGF0ZSkgQ3VycmVudCBTdGF0ZSBpcyBbJHN0YXRlXSwgV2FpdGluZyBmb3IgWyRkZXNpcmVkc3RhdGVdLiIKCiAgICAgICAgU2xlZXAgLVNlY29uZHMgJGluY3JlbWVudAogICAgICAgICR0b3RhbFdhaXRUaW1lID0gJHRvdGFsV2FpdFRpbWUgKyAkaW5jcmVtZW50CiAgICAgICAgaWYgKCR0b3RhbFdhaXRUaW1lIC1ndCAkdGltZW91dCkKICAgICAgICB7CiAgICAgICAgICAgIHRocm93ICJUaGUgRUMyIEluc3RhbmNlIHdpdGggSWQgWyQoJGluc3RhbmNlaWQpXSBkaWQgbm90IHJlYWNoIHRoZSBbJGRlc2lyZWRzdGF0ZV0gc3RhdGUgaW4gWyR0aW1lb3V0XSBzZWNvbmRzLiIKICAgICAgICB9CiAgICB9Cn0KCmZ1bmN0aW9uIFdhaXQtRWMySW5zdGFuY2VSZWFkeQp7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0KICAgICgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbc3RyaW5nXSRhd3NLZXksCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW3N0cmluZ10kYXdzU2VjcmV0LAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtzdHJpbmddJGF3c1JlZ2lvbiwKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbc3RyaW5nXSRpbnN0YW5jZWlkCiAgICApCgogICAgaWYgKCRyb290RGlyZWN0b3J5IC1lcSAkbnVsbCkgeyB0aHJvdyAicm9vdERpcmVjdG9yeSBzY3JpcHQgc2NvcGVkIHZhcmlhYmxlIG5vdCBzZXQuIFRoYXRzIGJhZCwgaXRzIHVzZWQgdG8gZmluZCBkZXBlbmRlbmNpZXMuIiB9CiAgICAkcm9vdERpcmVjdG9yeVBhdGggPSAkcm9vdERpcmVjdG9yeS5GdWxsTmFtZQogICAgJGNvbW1vblNjcmlwdHNEaXJlY3RvcnlQYXRoID0gIiRyb290RGlyZWN0b3J5UGF0aFxzY3JpcHRzXGNvbW1vbiIKCiAgICAuICIkY29tbW9uU2NyaXB0c0RpcmVjdG9yeVBhdGhcRnVuY3Rpb25zLUVudW1lcmFibGVzLnBzMSIKICAgIC4gIiRjb21tb25TY3JpcHRzRGlyZWN0b3J5UGF0aFxGdW5jdGlvbnMtQXdzLnBzMSIKCiAgICBFbnN1cmUtQXdzUG93ZXJzaGVsbEZ1bmN0aW9uc0F2YWlsYWJsZQoKICAgIHdyaXRlLXZlcmJvc2UgIldhaXRpbmcgZm9yIHRoZSBFQzIgSW5zdGFuY2Ugd2l0aCBJZCBbJCgkaW5zdGFuY2VpZCldIHRvIGJlIHJlYWR5LiIKICAgICRpbmNyZW1lbnQgPSA1CiAgICAkdG90YWxXYWl0VGltZSA9IDAKICAgICR0aW1lb3V0ID0gNjAwCgogICAgJGVjMkNvbmZpZyA9IG5ldy1vYmplY3QgQW1hem9uLkVDMi5BbWF6b25FQzJDb25maWcKICAgICRlYzJDb25maWcuUmVnaW9uRW5kcG9pbnQgPSBbQW1hem9uLlJlZ2lvbkVuZHBvaW50XTo6R2V0QnlTeXN0ZW1OYW1lKCRhd3NSZWdpb24pCiAgICAkY2xpZW50ID0gW0FtYXpvbi5BV1NDbGllbnRGYWN0b3J5XTo6Q3JlYXRlQW1hem9uRUMyQ2xpZW50KCRhd3NLZXksICRhd3NTZWNyZXQsJGVjMkNvbmZpZykKCiAgICB3aGlsZSAoJHRydWUpCiAgICB7CiAgICAgICAgJGRlc2NyaWJlUmVxdWVzdCA9IE5ldy1PYmplY3QgQW1hem9uLkVDMi5Nb2RlbC5EZXNjcmliZUluc3RhbmNlU3RhdHVzUmVxdWVzdAogICAgICAgICRkZXNjcmliZVJlcXVlc3QuSW5zdGFuY2VJZHMuQWRkKCRpbnN0YW5jZWlkKQogICAgICAgICRkZXNjcmliZVJlc3BvbnNlID0gJGNsaWVudC5EZXNjcmliZUluc3RhbmNlU3RhdHVzKCRkZXNjcmliZVJlcXVlc3QpCgogICAgICAgICMgUmVhZHkgbWVhbnMgdGhhdCBhbGwgb2YgdGhlIGluc3RhbmNlIHN0YXR1cyBjaGVja3MgY29tZSBiYWNrIGFzICJwYXNzZWQiLiBUaGF0cyBwcmV0dHkgbXVjaAogICAgICAgICMgdGhlIGluc3RhbmNlIHJlYWNoYWJpbGl0eSBjaGVjaywgYnV0IEkgY2hlY2sgYWxsIGp1c3QgaW4gY2FzZS4KICAgICAgICAkaW5zdGFuY2VTdGF0dXMgPSAkZGVzY3JpYmVSZXNwb25zZS5EZXNjcmliZUluc3RhbmNlU3RhdHVzUmVzdWx0Lkluc3RhbmNlU3RhdHVzZXNbMF0KICAgICAgICBpZiAoJGluc3RhbmNlU3RhdHVzLlN0YXR1cy5EZXRhaWxzIHwgQWxsIC1QcmVkaWNhdGUgeyAkXy5TdGF0dXMgLWVxICJwYXNzZWQiIH0pCiAgICAgICAgewogICAgICAgICAgICB3cml0ZS12ZXJib3NlICJUaGUgRUMyIEluc3RhbmNlIHdpdGggSWQgWyQoJGluc3RhbmNlaWQpXSB0b29rIFskdG90YWxXYWl0VGltZV0gc2Vjb25kcyB0byBiZSByZWFkeS4iCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgfQoKICAgICAgICB3cml0ZS12ZXJib3NlICIkKEdldC1EYXRlKSBXYWl0aW5nIGZvciB0aGUgRUMyIEluc3RhbmNlIHdpdGggSWQgWyQoJGluc3RhbmNlaWQpXSB0byBiZSByZWFkeS4iCgogICAgICAgIFNsZWVwIC1TZWNvbmRzICRpbmNyZW1lbnQKICAgICAgICAkdG90YWxXYWl0VGltZSA9ICR0b3RhbFdhaXRUaW1lICsgJGluY3JlbWVudAogICAgICAgIGlmICgkdG90YWxXYWl0VGltZSAtZ3QgJHRpbWVvdXQpCiAgICAgICAgewogICAgICAgICAgICB0aHJvdyAiVGhlIEVDMiBJbnN0YW5jZSB3aXRoIElkIFskKCRpbnN0YW5jZWlkKV0gd2FzIG5vdCByZWFkeSBpbiBbJHRpbWVvdXRdIHNlY29uZHMuIgogICAgICAgIH0KICAgIH0KfQoKZnVuY3Rpb24gVGFnLU5hbWVFYzJJbnN0YW5jZQp7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0KICAgICgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbc3RyaW5nXSRhd3NLZXksCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW3N0cmluZ10kYXdzU2VjcmV0LAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtzdHJpbmddJGF3c1JlZ2lvbiwKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbc3RyaW5nXSRpbnN0YW5jZWlkLAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtzdHJpbmddJG5hbWUKICAgICkKCiAgICAkdGFncyA9IEAoKQogICAgJG5hbWVUYWcgPSBuZXctb2JqZWN0IEFtYXpvbi5FQzIuTW9kZWwuVGFnCiAgICAkbmFtZVRhZy5LZXkgPSAiTmFtZSIKICAgICRuYW1lVGFnLlZhbHVlID0gJG5hbWUKICAgICR0YWdzICs9ICRuYW1lVGFnCgogICAgd3JpdGUtdmVyYm9zZSAiTmFtaW5nIEluc3RhbmNlIFskaW5zdGFuY2VpZF0gWyRuYW1lXS4iCiAgICBOZXctRUMyVGFnIC1SZXNvdXJjZSAkaW5zdGFuY2VpZCAtVGFnICR0YWdzIC1BY2Nlc3NLZXkgJGF3c0tleSAtU2VjcmV0S2V5ICRhd3NTZWNyZXQgLVJlZ2lvbiAkYXdzUmVnaW9uCn0KCmZ1bmN0aW9uIFRhZy1NYWtlRWMySW5zdGFuY2VFeHBpcmFibGUKewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtCiAgICAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW3N0cmluZ10kYXdzS2V5LAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtzdHJpbmddJGF3c1NlY3JldCwKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbc3RyaW5nXSRhd3NSZWdpb24sCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW3N0cmluZ10kaW5zdGFuY2VpZAogICAgKQoKICAgICR0YWdzID0gQCgpCgogICAgJGV4cGlyZVRhZyA9IG5ldy1vYmplY3QgQW1hem9uLkVDMi5Nb2RlbC5UYWcKICAgICRleHBpcmVUYWcuS2V5ID0gImV4cGlyZSIKICAgICRleHBpcmVUYWcuVmFsdWUgPSAidHJ1ZSIKICAgICR0YWdzICs9ICRleHBpcmVUYWcKCiAgICB3cml0ZS12ZXJib3NlICJNYXJraW5nIEluc3RhbmNlIFskaW5zdGFuY2VpZF0gYXMgZXhwaXJhYmxlLiBJdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgdGVybWluYXRlZCBhZnRlciBzb21lIHBlcmlvZCAoaG91cnMpLiIKICAgIE5ldy1FQzJUYWcgLVJlc291cmNlICRpbnN0YW5jZWlkIC1UYWcgJHRhZ3MgLUFjY2Vzc0tleSAkYXdzS2V5IC1TZWNyZXRLZXkgJGF3c1NlY3JldCAtUmVnaW9uICRhd3NSZWdpb24KfQoKZnVuY3Rpb24gR2V0LUF3c0VjMkluc3RhbmNlCnsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbQogICAgKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtzdHJpbmddJGF3c0tleSwKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbc3RyaW5nXSRhd3NTZWNyZXQsCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW3N0cmluZ10kYXdzUmVnaW9uLAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtzdHJpbmddJGluc3RhbmNlaWQKICAgICkKCiAgICBpZiAoJHJvb3REaXJlY3RvcnkgLWVxICRudWxsKSB7IHRocm93ICJyb290RGlyZWN0b3J5IHNjcmlwdCBzY29wZWQgdmFyaWFibGUgbm90IHNldC4gVGhhdHMgYmFkLCBpdHMgdXNlZCB0byBmaW5kIGRlcGVuZGVuY2llcy4iIH0KICAgICRyb290RGlyZWN0b3J5UGF0aCA9ICRyb290RGlyZWN0b3J5LkZ1bGxOYW1lCiAgICAkY29tbW9uU2NyaXB0c0RpcmVjdG9yeVBhdGggPSAiJHJvb3REaXJlY3RvcnlQYXRoXHNjcmlwdHNcY29tbW9uIgoKICAgIC4gIiRjb21tb25TY3JpcHRzRGlyZWN0b3J5UGF0aFxGdW5jdGlvbnMtRW51bWVyYWJsZXMucHMxIgoKICAgICRpbnN0YW5jZSA9ICgoR2V0LUVDMkluc3RhbmNlIC1GaWx0ZXIgQHtOYW1lID0gImluc3RhbmNlLWlkIjsgVmFsdWVzID0gJGluc3RhbmNlSWR9IC1SZWdpb24gJGF3c1JlZ2lvbiAtQWNjZXNzS2V5ICRhd3NLZXkgLVNlY3JldEtleSAkYXdzU2VjcmV0KS5JbnN0YW5jZXMpIHwgU2luZ2xlCgogICAgcmV0dXJuICRpbnN0YW5jZQp9CgpmdW5jdGlvbiBLaWxsLUVjMkluc3RhbmNlCnsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbQogICAgKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtzdHJpbmddJGF3c0tleSwKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbc3RyaW5nXSRhd3NTZWNyZXQsCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW3N0cmluZ10kYXdzUmVnaW9uLAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtzdHJpbmddJGluc3RhbmNlaWQKICAgICkKCiAgICBpZiAoJHJvb3REaXJlY3RvcnkgLWVxICRudWxsKSB7IHRocm93ICJyb290RGlyZWN0b3J5IHNjcmlwdCBzY29wZWQgdmFyaWFibGUgbm90IHNldC4gVGhhdHMgYmFkLCBpdHMgdXNlZCB0byBmaW5kIGRlcGVuZGVuY2llcy4iIH0KICAgICRyb290RGlyZWN0b3J5UGF0aCA9ICRyb290RGlyZWN0b3J5LkZ1bGxOYW1lCiAgICAkY29tbW9uU2NyaXB0c0RpcmVjdG9yeVBhdGggPSAiJHJvb3REaXJlY3RvcnlQYXRoXHNjcmlwdHNcY29tbW9uIgoKICAgIC4gIiRjb21tb25TY3JpcHRzRGlyZWN0b3J5UGF0aFxGdW5jdGlvbnMtQXdzLnBzMSIKCiAgICBFbnN1cmUtQXdzUG93ZXJzaGVsbEZ1bmN0aW9uc0F2YWlsYWJsZQogICAgCiAgICB3cml0ZS12ZXJib3NlICJBdHRlbXB0aW5nIHRvIFRlcm1pbmF0ZSBFQzIgSW5zdGFuY2UgWyRpbnN0YW5jZUlkXS4iCiAgICAkdGVybWluYXRlUmVzdWx0ID0gU3RvcC1FQzJJbnN0YW5jZSAtSW5zdGFuY2UgJGluc3RhbmNlSWQgLVJlZ2lvbiAkYXdzUmVnaW9uIC1BY2Nlc3NLZXkgJGF3c0tleSAtU2VjcmV0S2V5ICRhd3NTZWNyZXQgLVRlcm1pbmF0ZSAtRm9yY2UKICAgIHdyaXRlLXZlcmJvc2UgIlRlcm1pbmF0ZWQgWyRpbnN0YW5jZUlkXS4iCn0KCmZ1bmN0aW9uIE5ldy1Bd3NFYzJJbnN0YW5jZQp7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0KICAgICgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbc3RyaW5nXSRhd3NLZXksCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW3N0cmluZ10kYXdzU2VjcmV0LAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtzdHJpbmddJGF3c1JlZ2lvbiwKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW2hhc2h0YWJsZV0kaW5zdGFuY2VQYXJhbWV0ZXJzLAogICAgICAgIFtzd2l0Y2hdJElzVGVtcG9yYXJ5LAogICAgICAgIFtWYWxpZGF0ZVNldCgnREVWJywnQU1JJyldCiAgICAgICAgW3N0cmluZ10kaW5zdGFuY2VQdXJwb3NlPSdVTktOT1dOJywKICAgICAgICBbc3dpdGNoXSR3YWl0CiAgICApCgogICAgdHJ5CiAgICB7CiAgICAgICAgaWYgKCRyb290RGlyZWN0b3J5IC1lcSAkbnVsbCkgeyB0aHJvdyAicm9vdERpcmVjdG9yeSBzY3JpcHQgc2NvcGVkIHZhcmlhYmxlIG5vdCBzZXQuIFRoYXRzIGJhZCwgaXRzIHVzZWQgdG8gZmluZCBkZXBlbmRlbmNpZXMuIiB9CgkJJHJvb3REaXJlY3RvcnlQYXRoID0gJHJvb3REaXJlY3RvcnkuRnVsbE5hbWUKCQkkY29tbW9uU2NyaXB0c0RpcmVjdG9yeVBhdGggPSAiJHJvb3REaXJlY3RvcnlQYXRoXHNjcmlwdHNcY29tbW9uIgoKICAgICAgICAuICIkY29tbW9uU2NyaXB0c0RpcmVjdG9yeVBhdGhcRnVuY3Rpb25zLUF3cy5wczEiCgogICAgICAgIEVuc3VyZS1Bd3NQb3dlcnNoZWxsRnVuY3Rpb25zQXZhaWxhYmxlCgogICAgICAgICRhdWdtZW50ZWRJbnN0YW5jZVBhcmFtcyA9IEB7CiAgICAgICAgICAgICJBY2Nlc3NLZXkiPSIkYXdzS2V5IjsKICAgICAgICAgICAgIlNlY3JldEtleSI9IiRhd3NTZWNyZXQiOwogICAgICAgICAgICAiUmVnaW9uIj0iJGF3c1JlZ2lvbiI7CiAgICAgICAgfQoKICAgICAgICBmb3JlYWNoICgka2V5IGluICRpbnN0YW5jZVBhcmFtZXRlcnMuS2V5cykKICAgICAgICB7CiAgICAgICAgICAgICRhdWdtZW50ZWRJbnN0YW5jZVBhcmFtcy5BZGQoJGtleSwgJGluc3RhbmNlUGFyYW1ldGVyc1ska2V5XSkKICAgICAgICB9CgogICAgICAgICRpbnN0YW5jZVJlcXVlc3QgPSBOZXctRUMySW5zdGFuY2UgQGF1Z21lbnRlZEluc3RhbmNlUGFyYW1zCiAgICAgICAgJGluc3RhbmNlID0gJGluc3RhbmNlUmVxdWVzdC5JbnN0YW5jZXNbMF0KICAgICAgICAkaW5zdGFuY2VJZCA9ICRpbnN0YW5jZS5JbnN0YW5jZUlkCgogICAgICAgIC4gIiRjb21tb25TY3JpcHRzRGlyZWN0b3J5UGF0aFxGdW5jdGlvbnMtQXdzLUVjMi5wczEiCiAgICAgICAgLiAiJGNvbW1vblNjcmlwdHNEaXJlY3RvcnlQYXRoXEZ1bmN0aW9ucy1FbnVtZXJhYmxlcy5wczEiCgogICAgICAgICRpbWFnZSA9IChHZXQtRWMySW1hZ2UgLUltYWdlSWQgJGluc3RhbmNlUGFyYW1ldGVyc1siSW1hZ2VJZCJdIC1SZWdpb24gJGF3c1JlZ2lvbiAtQWNjZXNzS2V5ICRhd3NLZXkgLVNlY3JldEtleSAkYXdzU2VjcmV0KSB8IFNpbmdsZQogICAgICAgICMgU29tZXRpbWVzIGlmIHlvdSB0cnkgdG8gcXVlcnkgdGhlIGZyZXNoIGluc3RhbmNlIGltbWVkaWF0ZWx5IGFmdGVyIGl0IGhhcyBqdXN0IGJlZW4gY3JlYXRlZCB5b3UgZ2V0IG5vdGhpbmcuIExldHMgYWRkIGEgc2xlZXAgdG8gYXZvaWQgdGhhdC4KICAgICAgICBTbGVlcCAtU2Vjb25kcyAyCiAgICAgICAgJGltYWdlTmFtZSA9ICRpbWFnZS5OYW1lCgogICAgICAgICR1c2VyID0gd2hvYW1pCiAgICAgICAgVGFnLU5hbWVFYzJJbnN0YW5jZSAtQXdzS2V5ICRhd3NLZXkgLUF3c1NlY3JldCAkYXdzU2VjcmV0IC1Bd3NSZWdpb24gJGF3c1JlZ2lvbiAtSW5zdGFuY2VJZCAkaW5zdGFuY2VJZCAtTmFtZSAiWyRpbnN0YW5jZVB1cnBvc2VdIFskdXNlcl0gJGltYWdlTmFtZSIKICAgICAgICBpZiAoISRJc1RlbXBvcmFyeSkKICAgICAgICB7CiAgICAgICAgICAgIFRhZy1NYWtlRWMySW5zdGFuY2VFeHBpcmFibGUgLUF3c0tleSAkYXdzS2V5IC1Bd3NTZWNyZXQgJGF3c1NlY3JldCAtQXdzUmVnaW9uICRhd3NSZWdpb24gLUluc3RhbmNlSWQgJGluc3RhbmNlSWQKICAgICAgICB9CgogICAgICAgIGlmICgkd2FpdCkKICAgICAgICB7CiAgICAgICAgICAgIFdhaXQtRWMySW5zdGFuY2VSZWFjaGVzRGVzaXJlZFN0YXRlIC1Bd3NLZXkgJGF3c0tleSAtQXdzU2VjcmV0ICRhd3NTZWNyZXQgLUF3c1JlZ2lvbiAkYXdzUmVnaW9uIC1JbnN0YW5jZUlkICRpbnN0YW5jZUlkIC1EZXNpcmVkU3RhdGUgInJ1bm5pbmciCiAgICAgICAgICAgIFdhaXQtRWMySW5zdGFuY2VSZWFkeSAtQXdzS2V5ICRhd3NLZXkgLUF3c1NlY3JldCAkYXdzU2VjcmV0IC1Bd3NSZWdpb24gJGF3c1JlZ2lvbiAtSW5zdGFuY2VJZCAkaW5zdGFuY2VJZAogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIEdldC1Bd3NFYzJJbnN0YW5jZSAtQXdzS2V5ICRhd3NLZXkgLUF3c1NlY3JldCAkYXdzU2VjcmV0IC1Bd3NSZWdpb24gJGF3c1JlZ2lvbiAtSW5zdGFuY2VJZCAkaW5zdGFuY2VJZAogICAgfQogICAgY2F0Y2gKICAgIHsKICAgICAgICBpZiAoIVtzdHJpbmddOjpJc051bGxPckVtcHR5KCRpbnN0YW5jZUlkKSkKICAgICAgICB7CiAgICAgICAgICAgIEtpbGwtRWMySW5zdGFuY2UgLUF3c0tleSAkYXdzS2V5IC1Bd3NTZWNyZXQgJGF3c1NlY3JldCAtQXdzUmVnaW9uICRhd3NSZWdpb24gLUluc3RhbmNlSWQgJGluc3RhbmNlSWQKICAgICAgICB9CgogICAgICAgIHRocm93ICRfCiAgICB9Cn0KCmZ1bmN0aW9uIE5ldy1FYzJJbnN0YW5jZUZvckVkaXQKewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtCiAgICAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW3N0cmluZ10kYXdzS2V5LAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtzdHJpbmddJGF3c1NlY3JldCwKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbc3RyaW5nXSRhd3NSZWdpb24sCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtoYXNodGFibGVdJGluc3RhbmNlUGFyYW1ldGVycywKICAgICAgICBbc3RyaW5nXSRyZW1vdGVVc2VybmFtZSwKICAgICAgICBbc3RyaW5nXSRyZW1vdGVQYXNzd29yZCwKICAgICAgICBbc3dpdGNoXSR1bmF0dGVuZGVkPSRmYWxzZSwKICAgICAgICBbc3RyaW5nXSRpbWFnZU5hbWUsCiAgICAgICAgW3N0cmluZ10kaW1hZ2VDb21tZW50CiAgICApCgogICAgdHJ5CiAgICB7CiAgICAgICAgaWYgKCRyb290RGlyZWN0b3J5IC1lcSAkbnVsbCkgeyB0aHJvdyAicm9vdERpcmVjdG9yeSBzY3JpcHQgc2NvcGVkIHZhcmlhYmxlIG5vdCBzZXQuIFRoYXRzIGJhZCwgaXRzIHVzZWQgdG8gZmluZCBkZXBlbmRlbmNpZXMuIiB9CgkJJHJvb3REaXJlY3RvcnlQYXRoID0gJHJvb3REaXJlY3RvcnkuRnVsbE5hbWUKCQkkY29tbW9uU2NyaXB0c0RpcmVjdG9yeVBhdGggPSAiJHJvb3REaXJlY3RvcnlQYXRoXHNjcmlwdHNcY29tbW9uIgoKICAgICAgICAuICIkY29tbW9uU2NyaXB0c0RpcmVjdG9yeVBhdGhcRnVuY3Rpb25zLUF3cy5wczEiCgogICAgICAgIEVuc3VyZS1Bd3NQb3dlcnNoZWxsRnVuY3Rpb25zQXZhaWxhYmxlCgogICAgICAgICRpbnN0YW5jZSA9IE5ldy1Bd3NFYzJJbnN0YW5jZSAtQXdzS2V5ICRhd3NLZXkgLUF3c1NlY3JldCAkYXdzU2VjcmV0IC1Bd3NSZWdpb24gJGF3c1JlZ2lvbiAtSW5zdGFuY2VQYXJhbWV0ZXJzICRpbnN0YW5jZVBhcmFtZXRlcnMgLVdhaXQgLUlzVGVtcG9yYXJ5IC1JbnN0YW5jZVB1cnBvc2UgIkFNSSIKICAgICAgICAkaW5zdGFuY2VJZCA9ICRpbnN0YW5jZS5JbnN0YW5jZUlkCgogICAgICAgIGlmICgtbm90ICR1bmF0dGVuZGVkKQogICAgICAgIHsKICAgICAgICAgICAgaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRyZW1vdGVVc2VybmFtZSkgLW9yIFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRyZW1vdGVQYXNzd29yZCkpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIk9uZSBvZiByZW1vdGUgdXNlcm5hbWUvcGFzc3dvcmQgd2FzIGVtcHR5LiBObyByZW1vdGUgY29ubmVjdGlvbiB0byB0aGUgaW5zdGFuY2Ugd2lsbCBiZSBvcGVuZWQuIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJHByaXZhdGVJcEFkZHJlc3MgPSAkaW5zdGFuY2UuUHJpdmF0ZUlwQWRkcmVzcwoKICAgICAgICAgICAgICAgIC4gIiRjb21tb25TY3JpcHRzRGlyZWN0b3J5UGF0aFxGdW5jdGlvbnMtUmVtb3RpbmcucHMxIgoKICAgICAgICAgICAgICAgICRyZW1vdGVQcm9jZXNzSWQgPSBOZXctUmVtb3RlRGVza3RvcFNlc3Npb24gLUNvbXB1dGVyTmFtZU9ySXAgJHByaXZhdGVJcEFkZHJlc3MgLVVzZXIgJHJlbW90ZVVzZXJuYW1lIC1QYXNzd29yZCAkcmVtb3RlUGFzc3dvcmQKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgTmV3LUF3c0VjMkltYWdlIC1Bd3NLZXkgJGF3c0tleSAtQXdzU2VjcmV0ICRhd3NTZWNyZXQgLUF3c1JlZ2lvbiAkYXdzUmVnaW9uIC1JbnN0YW5jZSAkaW5zdGFuY2UgLU5hbWUgJGltYWdlTmFtZSAtY29tbWVudCAkaW1hZ2VDb21tZW50IC11bmF0dGVuZGVkOiR1bmF0dGVuZGVkCgogICAgICAgIGlmICgkYXNrRm9yS2lsbCkKICAgICAgICB7CiAgICAgICAgICAgICRraWxsQW5zd2VyID0gUmVhZC1Ib3N0IC1Qcm9tcHQgIlByZXNzIGFueSBrZXkgdG8ga2lsbCB5b3VyIGluc3RhbmNlLiBFbnRlciAnc2F2ZScgdG8ga2VlcCB5b3VyIGluc3RhbmNlLiBNYWtlIHN1cmUgeW91IGNsZWFuIGl0IHVwIHRocm91Z2ggYW5vdGhlciBtZWNoYW5pc20gd2hlbiB5b3UgYXJlIGRvbmUiCiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgICRraWxsQW5zd2VyID0gIm11cmRlciIKICAgICAgICB9CiAgICB9CiAgICBmaW5hbGx5CiAgICB7CiAgICAgICAgaWYgKCFbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkaW5zdGFuY2VJZCkgLWFuZCAoJGtpbGxBbnN3ZXIgLW5lICJzYXZlIikpCiAgICAgICAgewogICAgICAgICAgICBLaWxsLUVjMkluc3RhbmNlIC1Bd3NLZXkgJGF3c0tleSAtQXdzU2VjcmV0ICRhd3NTZWNyZXQgLUF3c1JlZ2lvbiAkYXdzUmVnaW9uIC1JbnN0YW5jZUlkICRpbnN0YW5jZUlkCiAgICAgICAgfQogICAgfQp9CgpmdW5jdGlvbiBOZXctQXdzRWMySW1hZ2UKewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtCiAgICAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW3N0cmluZ10kYXdzS2V5LAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtzdHJpbmddJGF3c1NlY3JldCwKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbc3RyaW5nXSRhd3NSZWdpb24sCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FtYXpvbi5FQzIuTW9kZWwuSW5zdGFuY2VdJGluc3RhbmNlLAogICAgICAgIFtzdHJpbmddJGNvbW1lbnQsCiAgICAgICAgW3N0cmluZ10kbmFtZSwKICAgICAgICBbc3dpdGNoXSR1bmF0dGVuZGVkPSRmYWxzZQogICAgKQoKICAgIGlmICgkcm9vdERpcmVjdG9yeSAtZXEgJG51bGwpIHsgdGhyb3cgInJvb3REaXJlY3Rvcnkgc2NyaXB0IHNjb3BlZCB2YXJpYWJsZSBub3Qgc2V0LiBUaGF0cyBiYWQsIGl0cyB1c2VkIHRvIGZpbmQgZGVwZW5kZW5jaWVzLiIgfQoJJHJvb3REaXJlY3RvcnlQYXRoID0gJHJvb3REaXJlY3RvcnkuRnVsbE5hbWUKCSRjb21tb25TY3JpcHRzRGlyZWN0b3J5UGF0aCA9ICIkcm9vdERpcmVjdG9yeVBhdGhcc2NyaXB0c1xjb21tb24iCgogICAgLiAiJGNvbW1vblNjcmlwdHNEaXJlY3RvcnlQYXRoXEZ1bmN0aW9ucy1Bd3MucHMxIgoKICAgIEVuc3VyZS1Bd3NQb3dlcnNoZWxsRnVuY3Rpb25zQXZhaWxhYmxlCgogICAgaWYgKC1ub3QgJHVuYXR0ZW5kZWQpCiAgICB7CiAgICAgICAgJHNuYXBzaG90QW5zd2VyID0gUmVhZC1Ib3N0IC1Qcm9tcHQgIkVudGVyICdzbmFwc2hvdCcgdG8gY3JlYXRlIGFuIEFNSSBmcm9tIFskKCRpbnN0YW5jZS5JbnN0YW5jZUlkKV0iCiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgJHNuYXBzaG90QW5zd2VyID0gInNuYXBzaG90IgogICAgfQoKICAgIGlmICgkc25hcHNob3RBbnN3ZXIgLWVxICJzbmFwc2hvdCIpCiAgICB7CiAgICAgICAgLiAiJGNvbW1vblNjcmlwdHNEaXJlY3RvcnlQYXRoXEZ1bmN0aW9ucy1FbnVtZXJhYmxlcy5wczEiCgogICAgICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkbmFtZSkpCiAgICAgICAgewogICAgICAgICAgICAkaW1hZ2UgPSAoR2V0LUVjMkltYWdlIC1JbWFnZUlkICRpbnN0YW5jZS5JbWFnZUlkIC1SZWdpb24gJGF3c1JlZ2lvbiAtQWNjZXNzS2V5ICRhd3NLZXkgLVNlY3JldEtleSAkYXdzU2VjcmV0KSB8IFNpbmdsZQogICAgICAgICAgICAkaW1hZ2VOYW1lID0gJGltYWdlLk5hbWUKCiAgICAgICAgICAgICRuYW1lID0gR2V0LUluY3JlbWVudGVkVmVyc2lvbmVkSW1hZ2VOYW1lICRpbWFnZU5hbWUgCiAgICAgICAgfQoKICAgICAgICAuICIkY29tbW9uU2NyaXB0c0RpcmVjdG9yeVBhdGhcRnVuY3Rpb25zLVN0cmluZ3MucHMxIgoKICAgICAgICBpZiAoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJGNvbW1lbnQpKQogICAgICAgIHsKICAgICAgICAgICAgJHVzZXJEZXNjcmlwdGlvbiA9IFJlYWQtSG9zdCAtUHJvbXB0ICJFbnRlciBzb21lIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgeW91IGNoYW5nZWQiCiAgICAgICAgICAgICR1c2VyID0gd2hvYW1pCiAgICAgICAgICAgICRjb21tZW50ID0gU3RyaW5nTnVsbE9yRW1wdHlDb2FsZXNjZSAkdXNlckRlc2NyaXB0aW9uICJObyBpbmZvcm1hdGlvbiBlbnRlcmVkIGJ5IHVzZXIgWyR1c2VyXSB3aGVuIGNyZWF0aW5nIGltYWdlLiIKICAgICAgICB9CgogICAgICAgICRyZXN1bHQgPSBOZXctRWMySW1hZ2UgLUluc3RhbmNlSWQgJGluc3RhbmNlLkluc3RhbmNlSWQgLU5hbWUgIiRuYW1lIiAtRGVzY3JpcHRpb24gIiRjb21tZW50IiAtQWNjZXNzS2V5ICRhd3NLZXkgLVNlY3JldEtleSAkYXdzU2VjcmV0IC1SZWdpb24gJGF3c1JlZ2lvbgogICAgICAgICMgU29tZXRpbWVzIGlmIHlvdSB0cnkgdG8gcXVlcnkgdGhlIGZyZXNoIGltYWdlIGltbWVkaWF0ZWx5IGFmdGVyIGl0IGhhcyBqdXN0IGJlZW4gY3JlYXRlZCB5b3UgZ2V0IG5vdGhpbmcuIExldHMgYWRkIGEgc2xlZXAgdG8gYXZvaWQgdGhhdC4KICAgICAgICBTbGVlcCAtU2Vjb25kcyAyCiAgICAgICAgV2FpdC1BbWlBdmFpbGFibGUgLUFtaUlkICRyZXN1bHQgLUF3c0tleSAkYXdzS2V5IC1Bd3NTZWNyZXQgJGF3c1NlY3JldCAtQXdzUmVnaW9uICRhd3NSZWdpb24KCiAgICAgICAgcmV0dXJuICRyZXN1bHQKICAgIH0KfQoKZnVuY3Rpb24gR2V0LUluY3JlbWVudGVkVmVyc2lvbmVkSW1hZ2VOYW1lCnsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbQogICAgKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbc3RyaW5nXSRvbGRJbWFnZU5hbWUKICAgICkKCiAgICAkbmFtZVJlZ2V4ID0gJyg/JyduYW1lJycuKilWKD8nJ3ZlcnNpb24nJ1swLTldKyknCiAgICAkbWF0Y2ggPSBbcmVnZXhdOjpNYXRjaCgkb2xkSW1hZ2VOYW1lLCAkbmFtZVJlZ2V4KQogICAgaWYgKCEoJG1hdGNoLlN1Y2Nlc3MpKQogICAgewogICAgICAgIHJldHVybiAkb2xkSW1hZ2VOYW1lICsgIiBWMiIKICAgIH0KICAgICRvbGRWZXJzaW9uID0gW0ludDMyXTo6UGFyc2UoJG1hdGNoLkdyb3Vwc1sidmVyc2lvbiJdKQogICAgJG5ld1ZlcnNpb24gPSAkb2xkVmVyc2lvbiArIDEKCiAgICAkbmV3TmFtZSA9ICIkKCRtYXRjaC5Hcm91cHNbIm5hbWUiXSlWJG5ld1ZlcnNpb24iCgogICAgcmV0dXJuICRuZXdOYW1lCn0KCmZ1bmN0aW9uIFdhaXQtQW1pQXZhaWxhYmxlCnsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbQogICAgKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtzdHJpbmddJGF3c0tleSwKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbc3RyaW5nXSRhd3NTZWNyZXQsCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW3N0cmluZ10kYXdzUmVnaW9uLAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtzdHJpbmddJGFtaUlkLAogICAgICAgIFtpbnRdJHRpbWVvdXRTZWNvbmRzPTM2MAogICAgKQoKICAgIGlmICgkcm9vdERpcmVjdG9yeSAtZXEgJG51bGwpIHsgdGhyb3cgInJvb3REaXJlY3Rvcnkgc2NyaXB0IHNjb3BlZCB2YXJpYWJsZSBub3Qgc2V0LiBUaGF0cyBiYWQsIGl0cyB1c2VkIHRvIGZpbmQgZGVwZW5kZW5jaWVzLiIgfQoJJHJvb3REaXJlY3RvcnlQYXRoID0gJHJvb3REaXJlY3RvcnkuRnVsbE5hbWUKCSRjb21tb25TY3JpcHRzRGlyZWN0b3J5UGF0aCA9ICIkcm9vdERpcmVjdG9yeVBhdGhcc2NyaXB0c1xjb21tb24iCgogICAgLiAiJGNvbW1vblNjcmlwdHNEaXJlY3RvcnlQYXRoXEZ1bmN0aW9ucy1Bd3MucHMxIgogICAgLiAiJGNvbW1vblNjcmlwdHNEaXJlY3RvcnlQYXRoXEZ1bmN0aW9ucy1FbnVtZXJhYmxlcy5wczEiCgogICAgRW5zdXJlLUF3c1Bvd2Vyc2hlbGxGdW5jdGlvbnNBdmFpbGFibGUKCiAgICB3cml0ZS12ZXJib3NlICJXYWl0aW5nIGZvciB0aGUgQU1JIHdpdGggSWQgWyQoJGFtaUlkKV0gdG8gYmUgYXZhaWxhYmxlLiIKICAgICRpbmNyZW1lbnQgPSA1CiAgICAkdG90YWxXYWl0VGltZSA9IDAKICAgIHdoaWxlICgkdHJ1ZSkKICAgIHsKICAgICAgICAkYSA9IEdldC1FQzJJbWFnZSAtSW1hZ2VJZCAkYW1pSWQgLVJlZ2lvbiAkYXdzUmVnaW9uIC1BY2Nlc3NLZXkgJGF3c0tleSAtU2VjcmV0S2V5ICRhd3NTZWNyZXQKICAgICAgICAkc3RhdGUgPSAoJGEgfCBTaW5nbGUpLlN0YXRlLlZhbHVlCgogICAgICAgIGlmICgkc3RhdGUgLWVxICJhdmFpbGFibGUiKQogICAgICAgIHsKICAgICAgICAgICAgd3JpdGUtdmVyYm9zZSAiVGhlIEFNSSB3aXRoIElkIFskKCRhbWlJZCldIHRvb2sgWyR0b3RhbFdhaXRUaW1lXSBzZWNvbmRzIHRvIGJlIGF2YWlsYWJsZSIKICAgICAgICAgICAgYnJlYWsKICAgICAgICB9CgogICAgICAgIHdyaXRlLXZlcmJvc2UgIiQoR2V0LURhdGUpIEN1cnJlbnQgU3RhdGUgaXMgWyRzdGF0ZV0sIFdhaXRpbmcgZm9yIFthdmFpbGFibGVdLiIKCiAgICAgICAgU2xlZXAgLVNlY29uZHMgJGluY3JlbWVudAogICAgICAgICR0b3RhbFdhaXRUaW1lID0gJHRvdGFsV2FpdFRpbWUgKyAkaW5jcmVtZW50CiAgICAgICAgaWYgKCR0b3RhbFdhaXRUaW1lIC1ndCAkdGltZW91dFNlY29uZHMpCiAgICAgICAgewogICAgICAgICAgICB0aHJvdyAiVGhlIEVDMiBJbnN0YW5jZSB3aXRoIElkIFskKCRhbWlJZCldIHdhcyBub3QgW2F2YWlsYWJsZV0gaW4gWyR0aW1lb3V0U2Vjb25kc10gc2Vjb25kcy4iCiAgICAgICAgfQogICAgfQp9
