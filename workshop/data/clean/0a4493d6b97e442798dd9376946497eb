invoke_async.ps1,b1b62caab4e90db842596c674d050320,Scan result is 1. IsMalware: 0,IyBodHRwOi8vcG9zaGNvZGUub3JnLzQ1NDMKIyBJbnZva2UtYXN5bmMgYnkgSnVzdGluCiMgZXhhbXBsZSBvZiBQYXJhbWV0ZXIgaGFuZGxpbmcKcGFyYW0oCiNUaGUgZGF0YSBncm91cCB0byBwcm9jZXNzLCBzdWNoIGFzIHNlcnZlciBuYW1lcy4KW3BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUsVmFsdWVGcm9tUGlwZUxpbmU9JHRydWUpXQpbb2JqZWN0W11dJFNldCwKI1RoZSBwYXJhbWV0ZXIgbmFtZSB0aGF0IHRoZSBzZXQgYmVsb25ncyB0bywgc3VjaCBhcyBDb21wdXRlcm5hbWUuCltwYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KW3N0cmluZ10gJFNldFBhcmFtLAojVGhlIENtZGxldCBmb3IgRnVuY3Rpb24geW91J2QgbGlrZSB0byBwcm9jZXNzIHdpdGguCltwYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlLCBQYXJhbWV0ZXJTZXROYW1lPSdjbWRsZXQnKV0KW3N0cmluZ10kQ21kbGV0LAojVGhlIFNjcmlwdEJsb2NrIHlvdSdkIGxpa2UgdG8gcHJvY2VzcyB3aXRoCltwYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlLCBQYXJhbWV0ZXJTZXROYW1lPSdTY3JpcHRCbG9jaycpXQpbc2NyaXB0YmxvY2tdJFNjcmlwdEJsb2NrLApGdW5jdGlvbiBJbnZva2UtQXN5bmN7CiNhbnkgYWRpdGlvbmFsIHBhcmFtZXRlcnMgdG8gYmUgZm9yd2FyZGVkIHRvIHRoZSBjbWRsZXQvZnVuY3Rpb24vc2NyaXB0YmxvY2sKW2hhc2h0YWJsZV0kUGFyYW1zLAojbnVtYmVyIG9mIGpvYnMgdG8gc3BpbiB1cCwgZGVmYXVsdCBiZWluZyAxMC4KW2ludF0kVGhyZWFkQ291bnQ9MTAsCiNyZXR1cm4gcGVyZm9ybWFuY2UgZGF0YQpbc3dpdGNoXSRNZWFzdXJlCikKQmVnaW4KewoKICAgICRUaHJlYWRzID0gQCgpCiAgICAkTGVuZ3RoID0gJEpvYnNMZWZ0ID0gJFNldC5MZW5ndGgKCiAgICAkQ291bnQgPSAwCiAgICBpZigkTGVuZ3RoIC1sdCAkVGhyZWFkQ291bnQpeyRUaHJlYWRDb3VudD0kTGVuZ3RofQogICAgJHRpbWVyID0gQCgxLi4kVGhyZWFkQ291bnQgIHwgRm9yRWFjaC1PYmplY3R7JG51bGx9KQogICAgJEpvYnMgPSBAKDEuLiRUaHJlYWRDb3VudCAgfCBGb3JFYWNoLU9iamVjdHskbnVsbH0pCiAgICAKICAgIElmKCRQU0NtZGxldC5QYXJhbWV0ZXJTZXROYW1lIC1lcSAnY21kbGV0JykKICAgIHsKICAgICAgICAkQ21kVHlwZSA9IChHZXQtQ29tbWFuZCAkQ21kbGV0KS5Db21tYW5kVHlwZQogICAgICAgIGlmKCRDbWRUeXBlIC1lcSAnQWxpYXMnKQogICAgICAgIHsKICAgICAgICAgICAgJENtZFR5cGUgPSAoR2V0LUNvbW1hbmQgKEdldC1Db21tYW5kICRDbWRsZXQpLlJlc29sdmVkQ29tbWFuZE5hbWUpLkNvbW1hbmRUeXBlCiAgICAgICAgfQogICAgICAgIAogICAgICAgIElmKCRDbWRUeXBlIC1lcSAnRnVuY3Rpb24nKQogICAgICAgIHsKICAgICAgICAgICAgJFNjcmlwdEJsb2NrID0gKEdldC1JdGVtIEZ1bmN0aW9uOlwkQ21kbGV0KS5TY3JpcHRCbG9jawogICAgICAgICAgICAxLi4kVGhyZWFkQ291bnQgfCBGb3JFYWNoLU9iamVjdHsgJFRocmVhZHMgKz0gW3Bvd2Vyc2hlbGxdOjpDcmVhdGUoKS5BZGRTY3JpcHQoJFNjcmlwdEJsb2NrKX0KICAgICAgICB9CiAgICAgICAgRWxzZUlmKCRDbWRUeXBlIC1lcSAiQ21kbGV0IikKICAgICAgICB7CiAgICAgICAgICAgIDEuLiRUaHJlYWRDb3VudCAgfCBGb3JFYWNoLU9iamVjdHsgJFRocmVhZHMgKz0gW3Bvd2Vyc2hlbGxdOjpDcmVhdGUoKS5BZGRDb21tYW5kKCRDbWRsZXQpfQogICAgICAgIH0KICAgIH0KICAgIEVsc2UKICAgIHsKICAgICAgICAxLi4kVGhyZWFkQ291bnQgfCBGb3JFYWNoLU9iamVjdHsgJFRocmVhZHMgKz0gW3Bvd2Vyc2hlbGxdOjpDcmVhdGUoKS5BZGRTY3JpcHQoJFNjcmlwdEJsb2NrKX0KICAgIH0KCiAgICBJZigkUGFyYW1zKXskVGhyZWFkcyB8IEZvckVhY2gtT2JqZWN0eyRfLkFkZFBhcmFtZXRlcnMoJFBhcmFtcykgfCBPdXQtTnVsbH19Cgp9ClByb2Nlc3MKewogICAgd2hpbGUoJEpvYnNMZWZ0KQogICAgewogICAgICAgIGZvcigkaWR4ID0gMDsgJGlkeCAtbHQgKCRUaHJlYWRDb3VudC0xKSA7ICRpZHgrKykKICAgICAgICB7CiAgICAgICAgICAgICRTZXRQYXJhbU9iaiA9ICRUaHJlYWRzWyRpZHhdLkNvbW1hbmRzLkNvbW1hbmRzWzBdLlBhcmFtZXRlcnN8IFdoZXJlLU9iamVjdCB7JF8uTmFtZSAtZXEgJFNldFBhCnJhbX0KICAgICAgICAgICAgIAogICAgICAgICAgICBJZigkSm9ic1skaWR4XS5Jc0NvbXBsZXRlZCkgI2pvYiByYW4gb2ssIGNsZWFyIGl0IG91dAogICAgICAgICAgICB7ICAKICAgICAgICAgICAgICAgICRyZXN1bHQgPSAkbnVsbAogICAgICAgICAgICAgICAgaWYoJHRocmVhZHNbJGlkeF0uSW52b2NhdGlvblN0YXRlSW5mby5TdGF0ZSAtZXEgIkZhaWxlZCIpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgJHJlc3VsdCAgPSAkVGhyZWFkc1skaWR4XS5JbnZvY2F0aW9uU3RhdGVJbmZvLlJlYXNvbgogICAgICAgICAgICAgICAgICAgIFdyaXRlLUVycm9yICJTZXQgSXRlbTogJCgkU2V0UGFyYW1PYmouVmFsdWUpIEV4Y2VwdGlvbjogJHJlc3VsdCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHsgCiAgICAgICAgICAgICAgICAgICAgJHJlc3VsdCA9ICRUaHJlYWRzWyRpZHhdLkVuZEludm9rZSgkSm9ic1skaWR4XSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICR0cyA9IChOZXctVGltZVNwYW4gLVN0YXJ0ICR0aW1lclskaWR4XSAtRW5kIChHZXQtRGF0ZSkpCiAgICAgICAgICAgICAgICBpZigkTWVhc3VyZSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuZXctb2JqZWN0IHBzb2JqZWN0IC1Qcm9wZXJ0eSBAewogICAgICAgICAgICAgICAgICAgICAgICBUaW1lU3BhbiA9ICR0cwogICAgICAgICAgICAgICAgICAgICAgICBPdXRwdXQgPSAkcmVzdWx0CiAgICAgICAgICAgICAgICAgICAgICAgIFNldEl0ZW0gPSAkU2V0UGFyYW1PYmouVmFsdWV9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgJHJlc3VsdAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJEpvYnNbJGlkeF0gPSAkbnVsbAogICAgICAgICAgICAgICAgJEpvYnNMZWZ0LS0gI29uZSBsZXNzIGxlZnQKICAgICAgICAgICAgICAgIHdyaXRlLXZlcmJvc2UgIkNvbXBsZXRlZDogJCgkU2V0UGFyYW1PYmouVmFsdWUpIGluICR0cyIKICAgICAgICAgICAgICAgIHdyaXRlLXByb2dyZXNzIC1BY3Rpdml0eSAiUHJvY2Vzc2luZyBTZXQiIC1TdGF0dXMgIiRKb2JzTGVmdCBqb2JzIGxlZnQiIC1QZXJjZW50Q29tcGxldGUgKCgKJGxlbmd0aC0kam9ic2xlZnQpLyRsZW5ndGgqMTAwKQogICAgICAgICAgICB9CiAgICAgICAgICAgIElmKCgkQ291bnQgLWx0ICRMZW5ndGgpIC1hbmQgKCRKb2JzWyRpZHhdIC1lcSAkbnVsbCkpICNhZGQgam9iIGlmIHRoZXJlIGlzIG1vcmUgdG8gcHJvY2VzcwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB3cml0ZS12ZXJib3NlICJzdGFydGluZzogJCgkU2V0WyRDb3VudF0pIgogICAgICAgICAgICAgICAgJHRpbWVyWyRpZHhdID0gZ2V0LWRhdGUKICAgICAgICAgICAgICAgICRUaHJlYWRzWyRpZHhdLkNvbW1hbmRzLkNvbW1hbmRzWzBdLlBhcmFtZXRlcnMuUmVtb3ZlKCRTZXRQYXJhbU9iaikgfCBPdXQtTnVsbCAjY2hlY2sgZm9yIHMKdWNjZXNzPwogICAgICAgICAgICAgICAgJFRocmVhZHNbJGlkeF0uQWRkUGFyYW1ldGVyKCRTZXRQYXJhbSwkU2V0WyRDb3VudF0pIHwgT3V0LU51bGwKICAgICAgICAgICAgICAgICRKb2JzWyRpZHhdID0gJFRocmVhZHNbJGlkeF0uQmVnaW5JbnZva2UoKQogICAgICAgICAgICAgICAgJENvdW50KysKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICB9Cn0KRW5kCnsKICAgICRUaHJlYWRzIHwgRm9yRWFjaC1PYmplY3R7JF8ucnVuc3BhY2UuY2xvc2UoKTskXy5EaXNwb3NlKCl9Cn0KfQo=
