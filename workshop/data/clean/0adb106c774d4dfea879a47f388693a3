win_xazurepackresourceprovider.ps1,42414cc0b00215cd716c9d6251b625da,Scan result is 1. IsMalware: 0,IyFwb3dlcnNoZWxsCiMgPENPUFlSSUdIVD4KIyA8Q09ERUdFTk1FVEE+CiMKIyBUaGlzIGZpbGUgaXMgcGFydCBvZiBBbnNpYmxlCiMKIyBBbnNpYmxlIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKIyBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQojIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yCiMgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KIwojIEFuc2libGUgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKIyBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgojIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUKIyBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgojCiMgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKIyBhbG9uZyB3aXRoIEFuc2libGUuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uCgojIFdBTlRfSlNPTgojIFBPV0VSU0hFTExfQ09NTU9OClNldC1TdHJpY3RNb2RlIC1PZmYKJHBhcmFtcyA9IFBhcnNlLUFyZ3MgJGFyZ3MgLXN1cHBvcnRzX2NoZWNrX21vZGUgJHRydWUKJHJlc3VsdCA9IE5ldy1PYmplY3QgcHNvYmplY3QKU2V0LUF0dHIgJHJlc3VsdCAiY2hhbmdlZCIgJGZhbHNlCgoKCiNBVFRSSUJVVEU6QWRtaW5Vcmk7TUFOREFUT1JZOlRydWU7REVGQVVMVFZBTFVFOjtERVNDUklQVElPTjo7Q0hPSUNFUzoKJEFkbWluVXJpID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIEFkbWluVXJpIC1mYWlsaWZlbXB0eSAkVHJ1ZSAtcmVzdWx0b2JqICRyZXN1bHQKI0FUVFJJQlVURTpBdXRoZW50aWNhdGlvblNpdGU7TUFOREFUT1JZOlRydWU7REVGQVVMVFZBTFVFOjtERVNDUklQVElPTjo7Q0hPSUNFUzoKJEF1dGhlbnRpY2F0aW9uU2l0ZSA9IEdldC1BdHRyIC1vYmogJHBhcmFtcyAtbmFtZSBBdXRoZW50aWNhdGlvblNpdGUgLWZhaWxpZmVtcHR5ICRUcnVlIC1yZXN1bHRvYmogJHJlc3VsdAojQVRUUklCVVRFOkF6dXJlUGFja0FkbWluQ3JlZGVudGlhbF91c2VybmFtZTtNQU5EQVRPUlk6VHJ1ZTtERUZBVUxUVkFMVUU6O0RFU0NSSVBUSU9OOjtDSE9JQ0VTOgokQXp1cmVQYWNrQWRtaW5DcmVkZW50aWFsX3VzZXJuYW1lID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIEF6dXJlUGFja0FkbWluQ3JlZGVudGlhbF91c2VybmFtZSAtZmFpbGlmZW1wdHkgJFRydWUgLXJlc3VsdG9iaiAkcmVzdWx0CiNBVFRSSUJVVEU6QXp1cmVQYWNrQWRtaW5DcmVkZW50aWFsX3Bhc3N3b3JkO01BTkRBVE9SWTpUcnVlO0RFRkFVTFRWQUxVRTo7REVTQ1JJUFRJT046O0NIT0lDRVM6CiRBenVyZVBhY2tBZG1pbkNyZWRlbnRpYWxfcGFzc3dvcmQgPSBHZXQtQXR0ciAtb2JqICRwYXJhbXMgLW5hbWUgQXp1cmVQYWNrQWRtaW5DcmVkZW50aWFsX3Bhc3N3b3JkIC1mYWlsaWZlbXB0eSAkVHJ1ZSAtcmVzdWx0b2JqICRyZXN1bHQKI0FUVFJJQlVURTpOYW1lO01BTkRBVE9SWTpUcnVlO0RFRkFVTFRWQUxVRTo7REVTQ1JJUFRJT046O0NIT0lDRVM6CiROYW1lID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIE5hbWUgLWZhaWxpZmVtcHR5ICRUcnVlIC1yZXN1bHRvYmogJHJlc3VsdAojQVRUUklCVVRFOkFkbWluQXV0aGVudGljYXRpb25Nb2RlO01BTkRBVE9SWTpGYWxzZTtERUZBVUxUVkFMVUU6O0RFU0NSSVBUSU9OOjtDSE9JQ0VTOkJhc2ljLE5vbmUsV2luZG93cwokQWRtaW5BdXRoZW50aWNhdGlvbk1vZGUgPSBHZXQtQXR0ciAtb2JqICRwYXJhbXMgLW5hbWUgQWRtaW5BdXRoZW50aWNhdGlvbk1vZGUgLWZhaWxpZmVtcHR5ICRGYWxzZSAtcmVzdWx0b2JqICRyZXN1bHQKI0FUVFJJQlVURTpBZG1pbkF1dGhlbnRpY2F0aW9uVXNlcl91c2VybmFtZTtNQU5EQVRPUlk6RmFsc2U7REVGQVVMVFZBTFVFOjtERVNDUklQVElPTjo7Q0hPSUNFUzoKJEFkbWluQXV0aGVudGljYXRpb25Vc2VyX3VzZXJuYW1lID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIEFkbWluQXV0aGVudGljYXRpb25Vc2VyX3VzZXJuYW1lIC1mYWlsaWZlbXB0eSAkRmFsc2UgLXJlc3VsdG9iaiAkcmVzdWx0CiNBVFRSSUJVVEU6QWRtaW5BdXRoZW50aWNhdGlvblVzZXJfcGFzc3dvcmQ7TUFOREFUT1JZOkZhbHNlO0RFRkFVTFRWQUxVRTo7REVTQ1JJUFRJT046O0NIT0lDRVM6CiRBZG1pbkF1dGhlbnRpY2F0aW9uVXNlcl9wYXNzd29yZCA9IEdldC1BdHRyIC1vYmogJHBhcmFtcyAtbmFtZSBBZG1pbkF1dGhlbnRpY2F0aW9uVXNlcl9wYXNzd29yZCAtZmFpbGlmZW1wdHkgJEZhbHNlIC1yZXN1bHRvYmogJHJlc3VsdAojQVRUUklCVVRFOkFkbWluRm9yd2FyZGluZ0FkZHJlc3M7TUFOREFUT1JZOkZhbHNlO0RFRkFVTFRWQUxVRTo7REVTQ1JJUFRJT046O0NIT0lDRVM6CiRBZG1pbkZvcndhcmRpbmdBZGRyZXNzID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIEFkbWluRm9yd2FyZGluZ0FkZHJlc3MgLWZhaWxpZmVtcHR5ICRGYWxzZSAtcmVzdWx0b2JqICRyZXN1bHQKI0FUVFJJQlVURTpBbGxvd0Fub255bW91c0FjY2VzcztNQU5EQVRPUlk6RmFsc2U7REVGQVVMVFZBTFVFOjtERVNDUklQVElPTjo7Q0hPSUNFUzoKJEFsbG93QW5vbnltb3VzQWNjZXNzID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIEFsbG93QW5vbnltb3VzQWNjZXNzIC1mYWlsaWZlbXB0eSAkRmFsc2UgLXJlc3VsdG9iaiAkcmVzdWx0CiNBVFRSSUJVVEU6QWxsb3dNdWx0aXBsZUluc3RhbmNlcztNQU5EQVRPUlk6RmFsc2U7REVGQVVMVFZBTFVFOjtERVNDUklQVElPTjo7Q0hPSUNFUzoKJEFsbG93TXVsdGlwbGVJbnN0YW5jZXMgPSBHZXQtQXR0ciAtb2JqICRwYXJhbXMgLW5hbWUgQWxsb3dNdWx0aXBsZUluc3RhbmNlcyAtZmFpbGlmZW1wdHkgJEZhbHNlIC1yZXN1bHRvYmogJHJlc3VsdAojQVRUUklCVVRFOkRpc3BsYXlOYW1lO01BTkRBVE9SWTpGYWxzZTtERUZBVUxUVkFMVUU6O0RFU0NSSVBUSU9OOjtDSE9JQ0VTOgokRGlzcGxheU5hbWUgPSBHZXQtQXR0ciAtb2JqICRwYXJhbXMgLW5hbWUgRGlzcGxheU5hbWUgLWZhaWxpZmVtcHR5ICRGYWxzZSAtcmVzdWx0b2JqICRyZXN1bHQKI0FUVFJJQlVURTpFbmFibGVkO01BTkRBVE9SWTpGYWxzZTtERUZBVUxUVkFMVUU6O0RFU0NSSVBUSU9OOjtDSE9JQ0VTOgokRW5hYmxlZCA9IEdldC1BdHRyIC1vYmogJHBhcmFtcyAtbmFtZSBFbmFibGVkIC1mYWlsaWZlbXB0eSAkRmFsc2UgLXJlc3VsdG9iaiAkcmVzdWx0CiNBVFRSSUJVVEU6SGVhbHRoQ2hlY2tBdXRoZW50aWNhdGlvbk1vZGU7TUFOREFUT1JZOkZhbHNlO0RFRkFVTFRWQUxVRTo7REVTQ1JJUFRJT046O0NIT0lDRVM6QmFzaWMsTm9uZSxXaW5kb3dzCiRIZWFsdGhDaGVja0F1dGhlbnRpY2F0aW9uTW9kZSA9IEdldC1BdHRyIC1vYmogJHBhcmFtcyAtbmFtZSBIZWFsdGhDaGVja0F1dGhlbnRpY2F0aW9uTW9kZSAtZmFpbGlmZW1wdHkgJEZhbHNlIC1yZXN1bHRvYmogJHJlc3VsdAojQVRUUklCVVRFOkhlYWx0aENoZWNrQXV0aGVudGljYXRpb25Vc2VyX3VzZXJuYW1lO01BTkRBVE9SWTpGYWxzZTtERUZBVUxUVkFMVUU6O0RFU0NSSVBUSU9OOjtDSE9JQ0VTOgokSGVhbHRoQ2hlY2tBdXRoZW50aWNhdGlvblVzZXJfdXNlcm5hbWUgPSBHZXQtQXR0ciAtb2JqICRwYXJhbXMgLW5hbWUgSGVhbHRoQ2hlY2tBdXRoZW50aWNhdGlvblVzZXJfdXNlcm5hbWUgLWZhaWxpZmVtcHR5ICRGYWxzZSAtcmVzdWx0b2JqICRyZXN1bHQKI0FUVFJJQlVURTpIZWFsdGhDaGVja0F1dGhlbnRpY2F0aW9uVXNlcl9wYXNzd29yZDtNQU5EQVRPUlk6RmFsc2U7REVGQVVMVFZBTFVFOjtERVNDUklQVElPTjo7Q0hPSUNFUzoKJEhlYWx0aENoZWNrQXV0aGVudGljYXRpb25Vc2VyX3Bhc3N3b3JkID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIEhlYWx0aENoZWNrQXV0aGVudGljYXRpb25Vc2VyX3Bhc3N3b3JkIC1mYWlsaWZlbXB0eSAkRmFsc2UgLXJlc3VsdG9iaiAkcmVzdWx0CiNBVFRSSUJVVEU6SGVhbHRoQ2hlY2tGb3J3YXJkaW5nQWRkcmVzcztNQU5EQVRPUlk6RmFsc2U7REVGQVVMVFZBTFVFOjtERVNDUklQVElPTjo7Q0hPSUNFUzoKJEhlYWx0aENoZWNrRm9yd2FyZGluZ0FkZHJlc3MgPSBHZXQtQXR0ciAtb2JqICRwYXJhbXMgLW5hbWUgSGVhbHRoQ2hlY2tGb3J3YXJkaW5nQWRkcmVzcyAtZmFpbGlmZW1wdHkgJEZhbHNlIC1yZXN1bHRvYmogJHJlc3VsdAojQVRUUklCVVRFOkluc3RhbmNlRGlzcGxheU5hbWU7TUFOREFUT1JZOkZhbHNlO0RFRkFVTFRWQUxVRTo7REVTQ1JJUFRJT046O0NIT0lDRVM6CiRJbnN0YW5jZURpc3BsYXlOYW1lID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIEluc3RhbmNlRGlzcGxheU5hbWUgLWZhaWxpZmVtcHR5ICRGYWxzZSAtcmVzdWx0b2JqICRyZXN1bHQKI0FUVFJJQlVURTpJbnN0YW5jZUlkO01BTkRBVE9SWTpGYWxzZTtERUZBVUxUVkFMVUU6O0RFU0NSSVBUSU9OOjtDSE9JQ0VTOgokSW5zdGFuY2VJZCA9IEdldC1BdHRyIC1vYmogJHBhcmFtcyAtbmFtZSBJbnN0YW5jZUlkIC1mYWlsaWZlbXB0eSAkRmFsc2UgLXJlc3VsdG9iaiAkcmVzdWx0CiNBVFRSSUJVVEU6TWF4UXVvdGFVcGRhdGVCYXRjaFNpemU7TUFOREFUT1JZOkZhbHNlO0RFRkFVTFRWQUxVRTo7REVTQ1JJUFRJT046O0NIT0lDRVM6CiRNYXhRdW90YVVwZGF0ZUJhdGNoU2l6ZSA9IEdldC1BdHRyIC1vYmogJHBhcmFtcyAtbmFtZSBNYXhRdW90YVVwZGF0ZUJhdGNoU2l6ZSAtZmFpbGlmZW1wdHkgJEZhbHNlIC1yZXN1bHRvYmogJHJlc3VsdAojQVRUUklCVVRFOk5vdGlmaWNhdGlvbkF1dGhlbnRpY2F0aW9uTW9kZTtNQU5EQVRPUlk6RmFsc2U7REVGQVVMVFZBTFVFOjtERVNDUklQVElPTjo7Q0hPSUNFUzpCYXNpYyxOb25lLFdpbmRvd3MKJE5vdGlmaWNhdGlvbkF1dGhlbnRpY2F0aW9uTW9kZSA9IEdldC1BdHRyIC1vYmogJHBhcmFtcyAtbmFtZSBOb3RpZmljYXRpb25BdXRoZW50aWNhdGlvbk1vZGUgLWZhaWxpZmVtcHR5ICRGYWxzZSAtcmVzdWx0b2JqICRyZXN1bHQKI0FUVFJJQlVURTpOb3RpZmljYXRpb25BdXRoZW50aWNhdGlvblVzZXJfdXNlcm5hbWU7TUFOREFUT1JZOkZhbHNlO0RFRkFVTFRWQUxVRTo7REVTQ1JJUFRJT046O0NIT0lDRVM6CiROb3RpZmljYXRpb25BdXRoZW50aWNhdGlvblVzZXJfdXNlcm5hbWUgPSBHZXQtQXR0ciAtb2JqICRwYXJhbXMgLW5hbWUgTm90aWZpY2F0aW9uQXV0aGVudGljYXRpb25Vc2VyX3VzZXJuYW1lIC1mYWlsaWZlbXB0eSAkRmFsc2UgLXJlc3VsdG9iaiAkcmVzdWx0CiNBVFRSSUJVVEU6Tm90aWZpY2F0aW9uQXV0aGVudGljYXRpb25Vc2VyX3Bhc3N3b3JkO01BTkRBVE9SWTpGYWxzZTtERUZBVUxUVkFMVUU6O0RFU0NSSVBUSU9OOjtDSE9JQ0VTOgokTm90aWZpY2F0aW9uQXV0aGVudGljYXRpb25Vc2VyX3Bhc3N3b3JkID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIE5vdGlmaWNhdGlvbkF1dGhlbnRpY2F0aW9uVXNlcl9wYXNzd29yZCAtZmFpbGlmZW1wdHkgJEZhbHNlIC1yZXN1bHRvYmogJHJlc3VsdAojQVRUUklCVVRFOk5vdGlmaWNhdGlvbkZvcndhcmRpbmdBZGRyZXNzO01BTkRBVE9SWTpGYWxzZTtERUZBVUxUVkFMVUU6O0RFU0NSSVBUSU9OOjtDSE9JQ0VTOgokTm90aWZpY2F0aW9uRm9yd2FyZGluZ0FkZHJlc3MgPSBHZXQtQXR0ciAtb2JqICRwYXJhbXMgLW5hbWUgTm90aWZpY2F0aW9uRm9yd2FyZGluZ0FkZHJlc3MgLWZhaWxpZmVtcHR5ICRGYWxzZSAtcmVzdWx0b2JqICRyZXN1bHQKI0FUVFJJQlVURTpQYXNzdGhyb3VnaEVuYWJsZWQ7TUFOREFUT1JZOkZhbHNlO0RFRkFVTFRWQUxVRTo7REVTQ1JJUFRJT046O0NIT0lDRVM6CiRQYXNzdGhyb3VnaEVuYWJsZWQgPSBHZXQtQXR0ciAtb2JqICRwYXJhbXMgLW5hbWUgUGFzc3Rocm91Z2hFbmFibGVkIC1mYWlsaWZlbXB0eSAkRmFsc2UgLXJlc3VsdG9iaiAkcmVzdWx0CiNBVFRSSUJVVEU6UHNEc2NSdW5Bc0NyZWRlbnRpYWxfdXNlcm5hbWU7TUFOREFUT1JZOkZhbHNlO0RFRkFVTFRWQUxVRTo7REVTQ1JJUFRJT046O0NIT0lDRVM6CiRQc0RzY1J1bkFzQ3JlZGVudGlhbF91c2VybmFtZSA9IEdldC1BdHRyIC1vYmogJHBhcmFtcyAtbmFtZSBQc0RzY1J1bkFzQ3JlZGVudGlhbF91c2VybmFtZSAtZmFpbGlmZW1wdHkgJEZhbHNlIC1yZXN1bHRvYmogJHJlc3VsdAojQVRUUklCVVRFOlBzRHNjUnVuQXNDcmVkZW50aWFsX3Bhc3N3b3JkO01BTkRBVE9SWTpGYWxzZTtERUZBVUxUVkFMVUU6O0RFU0NSSVBUSU9OOjtDSE9JQ0VTOgokUHNEc2NSdW5Bc0NyZWRlbnRpYWxfcGFzc3dvcmQgPSBHZXQtQXR0ciAtb2JqICRwYXJhbXMgLW5hbWUgUHNEc2NSdW5Bc0NyZWRlbnRpYWxfcGFzc3dvcmQgLWZhaWxpZmVtcHR5ICRGYWxzZSAtcmVzdWx0b2JqICRyZXN1bHQKI0FUVFJJQlVURTpTdWJzY3JpcHRpb25TdGF0dXNQb2xsaW5nSW50ZXJ2YWw7TUFOREFUT1JZOkZhbHNlO0RFRkFVTFRWQUxVRTo7REVTQ1JJUFRJT046O0NIT0lDRVM6CiRTdWJzY3JpcHRpb25TdGF0dXNQb2xsaW5nSW50ZXJ2YWwgPSBHZXQtQXR0ciAtb2JqICRwYXJhbXMgLW5hbWUgU3Vic2NyaXB0aW9uU3RhdHVzUG9sbGluZ0ludGVydmFsIC1mYWlsaWZlbXB0eSAkRmFsc2UgLXJlc3VsdG9iaiAkcmVzdWx0CiNBVFRSSUJVVEU6VGVuYW50QXV0aGVudGljYXRpb25Nb2RlO01BTkRBVE9SWTpGYWxzZTtERUZBVUxUVkFMVUU6O0RFU0NSSVBUSU9OOjtDSE9JQ0VTOkJhc2ljLE5vbmUsV2luZG93cwokVGVuYW50QXV0aGVudGljYXRpb25Nb2RlID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIFRlbmFudEF1dGhlbnRpY2F0aW9uTW9kZSAtZmFpbGlmZW1wdHkgJEZhbHNlIC1yZXN1bHRvYmogJHJlc3VsdAojQVRUUklCVVRFOlRlbmFudEF1dGhlbnRpY2F0aW9uVXNlcl91c2VybmFtZTtNQU5EQVRPUlk6RmFsc2U7REVGQVVMVFZBTFVFOjtERVNDUklQVElPTjo7Q0hPSUNFUzoKJFRlbmFudEF1dGhlbnRpY2F0aW9uVXNlcl91c2VybmFtZSA9IEdldC1BdHRyIC1vYmogJHBhcmFtcyAtbmFtZSBUZW5hbnRBdXRoZW50aWNhdGlvblVzZXJfdXNlcm5hbWUgLWZhaWxpZmVtcHR5ICRGYWxzZSAtcmVzdWx0b2JqICRyZXN1bHQKI0FUVFJJQlVURTpUZW5hbnRBdXRoZW50aWNhdGlvblVzZXJfcGFzc3dvcmQ7TUFOREFUT1JZOkZhbHNlO0RFRkFVTFRWQUxVRTo7REVTQ1JJUFRJT046O0NIT0lDRVM6CiRUZW5hbnRBdXRoZW50aWNhdGlvblVzZXJfcGFzc3dvcmQgPSBHZXQtQXR0ciAtb2JqICRwYXJhbXMgLW5hbWUgVGVuYW50QXV0aGVudGljYXRpb25Vc2VyX3Bhc3N3b3JkIC1mYWlsaWZlbXB0eSAkRmFsc2UgLXJlc3VsdG9iaiAkcmVzdWx0CiNBVFRSSUJVVEU6VGVuYW50Rm9yd2FyZGluZ0FkZHJlc3M7TUFOREFUT1JZOkZhbHNlO0RFRkFVTFRWQUxVRTo7REVTQ1JJUFRJT046O0NIT0lDRVM6CiRUZW5hbnRGb3J3YXJkaW5nQWRkcmVzcyA9IEdldC1BdHRyIC1vYmogJHBhcmFtcyAtbmFtZSBUZW5hbnRGb3J3YXJkaW5nQWRkcmVzcyAtZmFpbGlmZW1wdHkgJEZhbHNlIC1yZXN1bHRvYmogJHJlc3VsdAojQVRUUklCVVRFOlRlbmFudFNvdXJjZVVyaVRlbXBsYXRlO01BTkRBVE9SWTpGYWxzZTtERUZBVUxUVkFMVUU6O0RFU0NSSVBUSU9OOjtDSE9JQ0VTOgokVGVuYW50U291cmNlVXJpVGVtcGxhdGUgPSBHZXQtQXR0ciAtb2JqICRwYXJhbXMgLW5hbWUgVGVuYW50U291cmNlVXJpVGVtcGxhdGUgLWZhaWxpZmVtcHR5ICRGYWxzZSAtcmVzdWx0b2JqICRyZXN1bHQKI0FUVFJJQlVURTpUZW5hbnRUYXJnZXRVcmlUZW1wbGF0ZTtNQU5EQVRPUlk6RmFsc2U7REVGQVVMVFZBTFVFOjtERVNDUklQVElPTjo7Q0hPSUNFUzoKJFRlbmFudFRhcmdldFVyaVRlbXBsYXRlID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIFRlbmFudFRhcmdldFVyaVRlbXBsYXRlIC1mYWlsaWZlbXB0eSAkRmFsc2UgLXJlc3VsdG9iaiAkcmVzdWx0CiNBVFRSSUJVVEU6VHlwZTtNQU5EQVRPUlk6RmFsc2U7REVGQVVMVFZBTFVFOjtERVNDUklQVElPTjo7Q0hPSUNFUzpDbG91ZFNlcnZpY2VQcm92aWRlcixTdGFuZGFyZCxVc2FnZVByb3ZpZGVyCiRUeXBlID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIFR5cGUgLWZhaWxpZmVtcHR5ICRGYWxzZSAtcmVzdWx0b2JqICRyZXN1bHQKI0FUVFJJQlVURTpVc2FnZUF1dGhlbnRpY2F0aW9uTW9kZTtNQU5EQVRPUlk6RmFsc2U7REVGQVVMVFZBTFVFOjtERVNDUklQVElPTjo7Q0hPSUNFUzpCYXNpYyxOb25lLFdpbmRvd3MKJFVzYWdlQXV0aGVudGljYXRpb25Nb2RlID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIFVzYWdlQXV0aGVudGljYXRpb25Nb2RlIC1mYWlsaWZlbXB0eSAkRmFsc2UgLXJlc3VsdG9iaiAkcmVzdWx0CiNBVFRSSUJVVEU6VXNhZ2VBdXRoZW50aWNhdGlvblVzZXJfdXNlcm5hbWU7TUFOREFUT1JZOkZhbHNlO0RFRkFVTFRWQUxVRTo7REVTQ1JJUFRJT046O0NIT0lDRVM6CiRVc2FnZUF1dGhlbnRpY2F0aW9uVXNlcl91c2VybmFtZSA9IEdldC1BdHRyIC1vYmogJHBhcmFtcyAtbmFtZSBVc2FnZUF1dGhlbnRpY2F0aW9uVXNlcl91c2VybmFtZSAtZmFpbGlmZW1wdHkgJEZhbHNlIC1yZXN1bHRvYmogJHJlc3VsdAojQVRUUklCVVRFOlVzYWdlQXV0aGVudGljYXRpb25Vc2VyX3Bhc3N3b3JkO01BTkRBVE9SWTpGYWxzZTtERUZBVUxUVkFMVUU6O0RFU0NSSVBUSU9OOjtDSE9JQ0VTOgokVXNhZ2VBdXRoZW50aWNhdGlvblVzZXJfcGFzc3dvcmQgPSBHZXQtQXR0ciAtb2JqICRwYXJhbXMgLW5hbWUgVXNhZ2VBdXRoZW50aWNhdGlvblVzZXJfcGFzc3dvcmQgLWZhaWxpZmVtcHR5ICRGYWxzZSAtcmVzdWx0b2JqICRyZXN1bHQKI0FUVFJJQlVURTpVc2FnZUZvcndhcmRpbmdBZGRyZXNzO01BTkRBVE9SWTpGYWxzZTtERUZBVUxUVkFMVUU6O0RFU0NSSVBUSU9OOjtDSE9JQ0VTOgokVXNhZ2VGb3J3YXJkaW5nQWRkcmVzcyA9IEdldC1BdHRyIC1vYmogJHBhcmFtcyAtbmFtZSBVc2FnZUZvcndhcmRpbmdBZGRyZXNzIC1mYWlsaWZlbXB0eSAkRmFsc2UgLXJlc3VsdG9iaiAkcmVzdWx0CiNBVFRSSUJVVEU6QXV0b0luc3RhbGxNb2R1bGU7TUFOREFUT1JZOkZhbHNlO0RFRkFVTFRWQUxVRTpmYWxzZTtERVNDUklQVElPTjpJZiB0cnVlLCB0aGUgcmVxdWlyZWQgZHNjIHJlc291cmNlL21vZHVsZSB3aWxsIGJlIGF1dG8taW5zdGFsbGVkIHVzaW5nIHRoZSBQb3dlcnNoZWxsIHBhY2thZ2UgbWFuYWdlcjtDSE9JQ0VTOnRydWUsZmFsc2UKJEF1dG9JbnN0YWxsTW9kdWxlID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIEF1dG9JbnN0YWxsTW9kdWxlIC1mYWlsaWZlbXB0eSAkRmFsc2UgLXJlc3VsdG9iaiAkcmVzdWx0IC1kZWZhdWx0IGZhbHNlCiNBVFRSSUJVVEU6QXV0b0NvbmZpZ3VyZUxjbTtNQU5EQVRPUlk6RmFsc2U7REVGQVVMVFZBTFVFOmZhbHNlO0RFU0NSSVBUSU9OOklmIHRydWUsIExDTSB3aWxsIGJlIGF1dG8tY29uZmlndXJlZCBmb3IgZGlyZWN0bHkgaW52b2tpbmcgRFNDIHJlc291cmNlcyAod2hpY2ggaXMgYSBvbmUtdGltZSByZXF1aXJlbWVudCBmb3IgQW5zaWJsZSBEU0MgbW9kdWxlcyk7Q0hPSUNFUzp0cnVlLGZhbHNlCiRBdXRvQ29uZmlndXJlTGNtID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIEF1dG9Db25maWd1cmVMY20gLWZhaWxpZmVtcHR5ICRGYWxzZSAtcmVzdWx0b2JqICRyZXN1bHQgLWRlZmF1bHQgZmFsc2UKSWYgKCRBZG1pbkF1dGhlbnRpY2F0aW9uTW9kZSkKewogICAgSWYgKCgnQmFzaWMnLCdOb25lJywnV2luZG93cycpIC1jb250YWlucyAkQWRtaW5BdXRoZW50aWNhdGlvbk1vZGUgKSB7CiAgICB9CiAgICBFbHNlCiAgICB7CiAgICAgICAgRmFpbC1Kc29uICRyZXN1bHQgIk9wdGlvbiBBZG1pbkF1dGhlbnRpY2F0aW9uTW9kZSBoYXMgaW52YWxpZCB2YWx1ZSAkQWRtaW5BdXRoZW50aWNhdGlvbk1vZGUuIFZhbGlkIHZhbHVlcyBhcmUgJ0Jhc2ljJywnTm9uZScsJ1dpbmRvd3MnIgogICAgfQp9CgoKSWYgKCRIZWFsdGhDaGVja0F1dGhlbnRpY2F0aW9uTW9kZSkKewogICAgSWYgKCgnQmFzaWMnLCdOb25lJywnV2luZG93cycpIC1jb250YWlucyAkSGVhbHRoQ2hlY2tBdXRoZW50aWNhdGlvbk1vZGUgKSB7CiAgICB9CiAgICBFbHNlCiAgICB7CiAgICAgICAgRmFpbC1Kc29uICRyZXN1bHQgIk9wdGlvbiBIZWFsdGhDaGVja0F1dGhlbnRpY2F0aW9uTW9kZSBoYXMgaW52YWxpZCB2YWx1ZSAkSGVhbHRoQ2hlY2tBdXRoZW50aWNhdGlvbk1vZGUuIFZhbGlkIHZhbHVlcyBhcmUgJ0Jhc2ljJywnTm9uZScsJ1dpbmRvd3MnIgogICAgfQp9CgoKSWYgKCROb3RpZmljYXRpb25BdXRoZW50aWNhdGlvbk1vZGUpCnsKICAgIElmICgoJ0Jhc2ljJywnTm9uZScsJ1dpbmRvd3MnKSAtY29udGFpbnMgJE5vdGlmaWNhdGlvbkF1dGhlbnRpY2F0aW9uTW9kZSApIHsKICAgIH0KICAgIEVsc2UKICAgIHsKICAgICAgICBGYWlsLUpzb24gJHJlc3VsdCAiT3B0aW9uIE5vdGlmaWNhdGlvbkF1dGhlbnRpY2F0aW9uTW9kZSBoYXMgaW52YWxpZCB2YWx1ZSAkTm90aWZpY2F0aW9uQXV0aGVudGljYXRpb25Nb2RlLiBWYWxpZCB2YWx1ZXMgYXJlICdCYXNpYycsJ05vbmUnLCdXaW5kb3dzJyIKICAgIH0KfQoKCklmICgkVGVuYW50QXV0aGVudGljYXRpb25Nb2RlKQp7CiAgICBJZiAoKCdCYXNpYycsJ05vbmUnLCdXaW5kb3dzJykgLWNvbnRhaW5zICRUZW5hbnRBdXRoZW50aWNhdGlvbk1vZGUgKSB7CiAgICB9CiAgICBFbHNlCiAgICB7CiAgICAgICAgRmFpbC1Kc29uICRyZXN1bHQgIk9wdGlvbiBUZW5hbnRBdXRoZW50aWNhdGlvbk1vZGUgaGFzIGludmFsaWQgdmFsdWUgJFRlbmFudEF1dGhlbnRpY2F0aW9uTW9kZS4gVmFsaWQgdmFsdWVzIGFyZSAnQmFzaWMnLCdOb25lJywnV2luZG93cyciCiAgICB9Cn0KCgpJZiAoJFR5cGUpCnsKICAgIElmICgoJ0Nsb3VkU2VydmljZVByb3ZpZGVyJywnU3RhbmRhcmQnLCdVc2FnZVByb3ZpZGVyJykgLWNvbnRhaW5zICRUeXBlICkgewogICAgfQogICAgRWxzZQogICAgewogICAgICAgIEZhaWwtSnNvbiAkcmVzdWx0ICJPcHRpb24gVHlwZSBoYXMgaW52YWxpZCB2YWx1ZSAkVHlwZS4gVmFsaWQgdmFsdWVzIGFyZSAnQ2xvdWRTZXJ2aWNlUHJvdmlkZXInLCdTdGFuZGFyZCcsJ1VzYWdlUHJvdmlkZXInIgogICAgfQp9CgoKSWYgKCRVc2FnZUF1dGhlbnRpY2F0aW9uTW9kZSkKewogICAgSWYgKCgnQmFzaWMnLCdOb25lJywnV2luZG93cycpIC1jb250YWlucyAkVXNhZ2VBdXRoZW50aWNhdGlvbk1vZGUgKSB7CiAgICB9CiAgICBFbHNlCiAgICB7CiAgICAgICAgRmFpbC1Kc29uICRyZXN1bHQgIk9wdGlvbiBVc2FnZUF1dGhlbnRpY2F0aW9uTW9kZSBoYXMgaW52YWxpZCB2YWx1ZSAkVXNhZ2VBdXRoZW50aWNhdGlvbk1vZGUuIFZhbGlkIHZhbHVlcyBhcmUgJ0Jhc2ljJywnTm9uZScsJ1dpbmRvd3MnIgogICAgfQp9CgoKSWYgKCRBdXRvSW5zdGFsbE1vZHVsZSkKewogICAgSWYgKCgndHJ1ZScsJ2ZhbHNlJykgLWNvbnRhaW5zICRBdXRvSW5zdGFsbE1vZHVsZSApIHsKICAgIH0KICAgIEVsc2UKICAgIHsKICAgICAgICBGYWlsLUpzb24gJHJlc3VsdCAiT3B0aW9uIEF1dG9JbnN0YWxsTW9kdWxlIGhhcyBpbnZhbGlkIHZhbHVlICRBdXRvSW5zdGFsbE1vZHVsZS4gVmFsaWQgdmFsdWVzIGFyZSAndHJ1ZScsJ2ZhbHNlJyIKICAgIH0KfQoKCklmICgkQXV0b0NvbmZpZ3VyZUxjbSkKewogICAgSWYgKCgndHJ1ZScsJ2ZhbHNlJykgLWNvbnRhaW5zICRBdXRvQ29uZmlndXJlTGNtICkgewogICAgfQogICAgRWxzZQogICAgewogICAgICAgIEZhaWwtSnNvbiAkcmVzdWx0ICJPcHRpb24gQXV0b0NvbmZpZ3VyZUxjbSBoYXMgaW52YWxpZCB2YWx1ZSAkQXV0b0NvbmZpZ3VyZUxjbS4gVmFsaWQgdmFsdWVzIGFyZSAndHJ1ZScsJ2ZhbHNlJyIKICAgIH0KfQoKCmlmICgkQXp1cmVQYWNrQWRtaW5DcmVkZW50aWFsX3VzZXJuYW1lKQp7CiRBenVyZVBhY2tBZG1pbkNyZWRlbnRpYWxfc2VjdXJlcGFzc3dvcmQgPSAkQXp1cmVQYWNrQWRtaW5DcmVkZW50aWFsX3Bhc3N3b3JkIHwgQ29udmVydFRvLVNlY3VyZVN0cmluZyAtYXNQbGFpblRleHQgLUZvcmNlCiRBenVyZVBhY2tBZG1pbkNyZWRlbnRpYWwgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCRBenVyZVBhY2tBZG1pbkNyZWRlbnRpYWxfdXNlcm5hbWUsJEF6dXJlUGFja0FkbWluQ3JlZGVudGlhbF9zZWN1cmVwYXNzd29yZCkKfQoKaWYgKCRBZG1pbkF1dGhlbnRpY2F0aW9uVXNlcl91c2VybmFtZSkKewokQWRtaW5BdXRoZW50aWNhdGlvblVzZXJfc2VjdXJlcGFzc3dvcmQgPSAkQWRtaW5BdXRoZW50aWNhdGlvblVzZXJfcGFzc3dvcmQgfCBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nIC1hc1BsYWluVGV4dCAtRm9yY2UKJEFkbWluQXV0aGVudGljYXRpb25Vc2VyID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgkQWRtaW5BdXRoZW50aWNhdGlvblVzZXJfdXNlcm5hbWUsJEFkbWluQXV0aGVudGljYXRpb25Vc2VyX3NlY3VyZXBhc3N3b3JkKQp9CgppZiAoJEhlYWx0aENoZWNrQXV0aGVudGljYXRpb25Vc2VyX3VzZXJuYW1lKQp7CiRIZWFsdGhDaGVja0F1dGhlbnRpY2F0aW9uVXNlcl9zZWN1cmVwYXNzd29yZCA9ICRIZWFsdGhDaGVja0F1dGhlbnRpY2F0aW9uVXNlcl9wYXNzd29yZCB8IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgLWFzUGxhaW5UZXh0IC1Gb3JjZQokSGVhbHRoQ2hlY2tBdXRoZW50aWNhdGlvblVzZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCRIZWFsdGhDaGVja0F1dGhlbnRpY2F0aW9uVXNlcl91c2VybmFtZSwkSGVhbHRoQ2hlY2tBdXRoZW50aWNhdGlvblVzZXJfc2VjdXJlcGFzc3dvcmQpCn0KCmlmICgkTm90aWZpY2F0aW9uQXV0aGVudGljYXRpb25Vc2VyX3VzZXJuYW1lKQp7CiROb3RpZmljYXRpb25BdXRoZW50aWNhdGlvblVzZXJfc2VjdXJlcGFzc3dvcmQgPSAkTm90aWZpY2F0aW9uQXV0aGVudGljYXRpb25Vc2VyX3Bhc3N3b3JkIHwgQ29udmVydFRvLVNlY3VyZVN0cmluZyAtYXNQbGFpblRleHQgLUZvcmNlCiROb3RpZmljYXRpb25BdXRoZW50aWNhdGlvblVzZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCROb3RpZmljYXRpb25BdXRoZW50aWNhdGlvblVzZXJfdXNlcm5hbWUsJE5vdGlmaWNhdGlvbkF1dGhlbnRpY2F0aW9uVXNlcl9zZWN1cmVwYXNzd29yZCkKfQoKaWYgKCRQc0RzY1J1bkFzQ3JlZGVudGlhbF91c2VybmFtZSkKewokUHNEc2NSdW5Bc0NyZWRlbnRpYWxfc2VjdXJlcGFzc3dvcmQgPSAkUHNEc2NSdW5Bc0NyZWRlbnRpYWxfcGFzc3dvcmQgfCBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nIC1hc1BsYWluVGV4dCAtRm9yY2UKJFBzRHNjUnVuQXNDcmVkZW50aWFsID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgkUHNEc2NSdW5Bc0NyZWRlbnRpYWxfdXNlcm5hbWUsJFBzRHNjUnVuQXNDcmVkZW50aWFsX3NlY3VyZXBhc3N3b3JkKQp9CgppZiAoJFRlbmFudEF1dGhlbnRpY2F0aW9uVXNlcl91c2VybmFtZSkKewokVGVuYW50QXV0aGVudGljYXRpb25Vc2VyX3NlY3VyZXBhc3N3b3JkID0gJFRlbmFudEF1dGhlbnRpY2F0aW9uVXNlcl9wYXNzd29yZCB8IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgLWFzUGxhaW5UZXh0IC1Gb3JjZQokVGVuYW50QXV0aGVudGljYXRpb25Vc2VyID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgkVGVuYW50QXV0aGVudGljYXRpb25Vc2VyX3VzZXJuYW1lLCRUZW5hbnRBdXRoZW50aWNhdGlvblVzZXJfc2VjdXJlcGFzc3dvcmQpCn0KCmlmICgkVXNhZ2VBdXRoZW50aWNhdGlvblVzZXJfdXNlcm5hbWUpCnsKJFVzYWdlQXV0aGVudGljYXRpb25Vc2VyX3NlY3VyZXBhc3N3b3JkID0gJFVzYWdlQXV0aGVudGljYXRpb25Vc2VyX3Bhc3N3b3JkIHwgQ29udmVydFRvLVNlY3VyZVN0cmluZyAtYXNQbGFpblRleHQgLUZvcmNlCiRVc2FnZUF1dGhlbnRpY2F0aW9uVXNlciA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJFVzYWdlQXV0aGVudGljYXRpb25Vc2VyX3VzZXJuYW1lLCRVc2FnZUF1dGhlbnRpY2F0aW9uVXNlcl9zZWN1cmVwYXNzd29yZCkKfQoKJERzY1Jlc291cmNlTmFtZSA9ICJ4QXp1cmVQYWNrUmVzb3VyY2VQcm92aWRlciIKCiREc2NNb2R1bGVOYW1lID0gInhhenVyZXBhY2siCgojVGhpcyBjb2RlIGNvbWVzIGZyb20gcG93ZXJzaGVsbDJfZHNjcmVzb3VyY2V2ZXJpZnkucHMxIGluIHRoZSBEU0MtLT5BbnNpYmxlIGNvZGVnZW4gdG9vbAoKI1ZlcmlmeSBwb3dlcnNoZWxsIHZlcnNpb24KaWYgKCgkcHN2ZXJzaW9udGFibGUucHN2ZXJzaW9uLm1ham9yIC1nZSA1KSAtYW5kICgkcHN2ZXJzaW9udGFibGUucHN2ZXJzaW9uLmJ1aWxkIC1nZSAxMDAxOCkpCnsKCSNEbyBub3RoaW5nCn0KRWxzZQp7CglGYWlsLUpzb24gJHJlc3VsdCAiTG9jYWwgcG93ZXJzaGVsbCB2ZXJzaW9uIGlzIG5vdCBhdCB0aGUgcmV1aXJlZCB2ZXJzaW9uIChmb3VuZCB2ZXJzaW9uICQoJFBzdmVyc2lvbnRhYmxlLnBzdmVyc2lvbi50b3N0cmluZygpKSApIgp9CgppZiAoJEF1dG9JbnN0YWxsTW9kdWxlKQp7CiAgICAkQXV0b0luc3RhbGxNb2R1bGUgPSAkQXV0b0luc3RhbGxNb2R1bGUgfCBjb252ZXJ0dG8tYm9vbAp9CgoKJFJlc291cmNlRXhpc3RzID0gR2V0LURzY1Jlc291cmNlICRkc2NyZXNvdXJjZW5hbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKCmlmICghJFJlc291cmNlRXhpc3RzKQp7CiAgICAjRG93bmxvYWQgdGhlIG1vZHVsZSBjb250YWluaW5nIHRoZSByZXNvdXJjZSBpZiB0aGF0J3MgYWxsb3dlZAogICAgaWYgKCRBdXRvSW5zdGFsbE1vZHVsZSB8IGNvbnZlcnR0by1ib29sKQogICAgewogICAgICAgICNVU2UgZmluZC1wYWNrYWdlIHRvIGF1dG8taW5zdGFsbCB0aGUgbnVnZXQgYmluYXJpZXMKICAgICAgICBGaW5kLVBhY2thZ2Ugc29tZXRoaW5nIC1Gb3JjZUJvb3RzdHJhcCAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IG91dC1udWxsCiAgICAgICAgJHJlcyA9IEZpbmQtZHNjcmVzb3VyY2UgJGRzY3Jlc291cmNlbmFtZQogICAgICAgIGluc3RhbGwtbW9kdWxlICRyZXMubW9kdWxlbmFtZSAtZm9yY2UKICAgICAgICBTZXQtQXR0ciAkcmVzdWx0ICJBdXRvSW5zdGFsbGVkTW9kdWxlIiAkcmVzLm1vZHVsZW5hbWUKICAgIH0KICAgIAogICAgJFJlc291cmNlRXhpc3RzID0gR2V0LURzY1Jlc291cmNlICRkc2NyZXNvdXJjZW5hbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKfQoKaWYgKCEkUmVzb3VyY2VFeGlzdHMpCnsKICAgIEZhaWwtSnNvbiAkcmVzdWx0ICJVbmFibGUgdG8gbG9jYXRlIERTQyBtb2R1bGUgJGRzY21vZHVsZW5hbWUgYW5kL29yIERTQyByZXNvdXJjZSAkZHNjcmVzb3VyY2VuYW1lIgp9CgojQ2hlY2sgdGhhdCBMQ00gaXMgaW4gdGhlIHJpZ2h0IHN0YXR1cwokTGNtID0gR2V0LURzY0xvY2FsQ29uZmlndXJhdGlvbk1hbmFnZXIKaWYgKCgkbGNtLlJlZnJlc2hNb2RlKSAtZXEgIkRpc2FibGVkIikKewogICAgI0FsbCBnb29kCn0KRWxzZQp7CiAgICBpZiAoKCRhdXRvY29uZmlndXJlTGNtIHwgY29udmVydHRvLWJvb2wpIC1lcSAkdHJ1ZSkKICAgIHsKICAgICAgICAkcmVmcmVzaG1vZGUgPSAiRGlzYWJsZWQiCiAgICAgICAgI1JlY29uZmlndXJlIExDTQogICAgICAgIFtEc2NMb2NhbENvbmZpZ3VyYXRpb25NYW5hZ2VyKCldCiAgICAgICAgQ29uZmlndXJhdGlvbiBNZXRhIHsKICAgICAgICAgICAgICAgU2V0dGluZ3MgewogICAgICAgICAgICAgICAgICAgUmVmcmVzaE1vZGUgPSAkUmVmcmVzaE1vZGUKICAgICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0cnkKICAgICAgICB7CiAgICAgICAgICAgICYgbWV0YQogICAgICAgICAgICBTZXQtRHNjTG9jYWxDb25maWd1cmF0aW9uTWFuYWdlciAtUGF0aCAuXE1ldGEgIC1FcnJvckFjdGlvbiBTdG9wIC1FcnJvclZhcmlhYmxlIGxjbWVycm9yCiAgICAKICAgICAgICB9CiAgICAgICAgQ2F0Y2gKICAgICAgICB7CiAgICAgICAgICAgIEZhaWwtanNvbiAkcmVzdWx0ICJFcnJvciByZWNvbmZpZ3VyaW5nIExDTSIgCiAgICAgICAgfQogICAgfQogICAgRWxzZQogICAgewogICAgICAgIEZhaWwtanNvbiAkcmVzdWx0ICJEU0MgTG9jYWwgQ29uZmlndXJhdGlvbiBNYW5hZ2VyIGlzIG5vdCBzZXQgdG8gZGlzYWJsZWQuIFNldCB0aGUgbW9kdWxlIG9wdGlvbiBBdXRvQ29uZmlndXJlTGNtIHRvIFRydWUgaW4gb3JkZXIgdG8gYXV0by1jb25maWd1cmUgTENNIiAKICAgIH0KCn0KCiRBdHRyaWJ1dGVzID0gJHBhcmFtcyB8IGdldC1tZW1iZXIgfCB3aGVyZSB7JF8uTWVtYmVyVFlwZSAtZXEgIm5vdGVwcm9wZXJ0eSJ9ICB8IHNlbGVjdCAtRXhwYW5kUHJvcGVydHkgTmFtZQokQXR0cmlidXRlcyA9ICRhdHRyaWJ1dGVzIHwgd2hlcmUgeyRfIC1uZSAiYXV0b2luc3RhbGxtb2R1bGUifQokQXR0cmlidXRlcyA9ICRhdHRyaWJ1dGVzIHwgd2hlcmUgeyRfIC1uZSAiQXV0b0NvbmZpZ3VyZUxjbSJ9CiRBdHRyaWJ1dGVzID0gJGF0dHJpYnV0ZXMgfCB3aGVyZSB7JF8gLW5vdGxpa2UgIl9hbnNpYmxlKiJ9CgoKaWYgKCEoJEF0dHJpYnV0ZXMpKQp7CiAgICBGYWlsLUpzb24gLW9iaiAkcmVzdWx0IC1tZXNzYWdlICJObyBhdHRyaWJ1dGVzIHNwZWNpZmllZCIKfQoKI0Fsd2F5cyByZXR1cm4gdGhlIG5hbWUKc2V0LWF0dHIgLW9iaiAkcmVzdWx0IC1uYW1lICJyZXNvdXJjZV9uYW1lIiAtdmFsdWUgJGRzY3Jlc291cmNlbmFtZQpzZXQtYXR0ciAtb2JqICRyZXN1bHQgLW5hbWUgIkF0dHJpYnV0ZXMiIC12YWx1ZSAkQXR0cmlidXRlcwoKJEF0dHJpYiA9IEB7fQoKPCMKJHBhcmFtcy5LZXlzIHwgZm9yZWFjaC1vYmplY3QgewogICAgJEF0dHJpYi5BZGQoJF8sJHBhcmFtcy5JdGVtKCRfKSkKICAgIHNldC1hdHRyIC1vYmogJHJlc3VsdCAtbmFtZSAkXyAtdmFsdWUgJHBhcmFtcy5JdGVtKCRfKQogICAgfQojPgoKJENoZWNrTW9kZSA9ICRGYWxzZQokQ2hlY2tGbGFnID0gJHBhcmFtcy5wc29iamVjdC5Qcm9wZXJ0aWVzIHwgd2hlcmUgeyRfLk5hbWUgLWVxICJfYW5zaWJsZV9jaGVja19tb2RlIn0KaWYgKCRDaGVja0ZsYWcpCnsKICAgIGlmICgoJENoZWNrRmxhZy5WYWx1ZSkgLWVxICRUcnVlKQogICAgewogICAgICAgICRDaGVja01vZGUgPSAkVHJ1ZSAgICAKICAgIH0KICAgIAp9CgokS2V5cyA9ICRwYXJhbXMucHNvYmplY3QuUHJvcGVydGllcyB8IHdoZXJlIHskXy5NZW1iZXJUWXBlIC1lcSAiTm90ZXByb3BlcnR5In0gfCB3aGVyZSB7JF8uTmFtZSAtbmUgInJlc291cmNlX25hbWUifSB8d2hlcmUgeyRfLk5hbWUgLW5lICJhdXRvaW5zdGFsbG1vZHVsZSJ9IHx3aGVyZSB7JF8uTmFtZSAtbmUgImF1dG9jb25maWd1cmVsY20ifSB8IHdoZXJlIHskXy5OYW1lIC1ub3RsaWtlICJfYW5zaWJsZSoifSB8ICBzZWxlY3QgLUV4cGFuZFByb3BlcnR5IE5hbWUKZm9yZWFjaCAoJGtleSBpbiAka2V5cykKewogICAgJEF0dHJpYi5hZGQoJGtleSwgKCRwYXJhbXMuJGtleSkpCiAgICBzZXQtYXR0ciAtb2JqICRyZXN1bHQgLW5hbWUgJGtleSAtdmFsdWUgKCRwYXJhbXMuJGtleSkKfQoKJENvbmZpZyA9IEB7CiAgIE5hbWUgPSAoJGRzY3Jlc291cmNlbmFtZSkKICAgUHJvcGVydHkgPSBAewogICAgICAgIH0KICAgIH0KCgokUmVzb3VyY2UgPSBHZXQtRHNjUmVzb3VyY2UgLU5hbWUgJGRzY3Jlc291cmNlbmFtZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQppZiAoISRSZXNvdXJjZSkKewogICAgRmFpbC1Kc29uIC1vYmogJHJlc3VsdCAtbWVzc2FnZSAiUmVzb3VyY2UgJGRzY3Jlc291cmNlbmFtZSBub3QgZm91bmQiCn0KCiNDb252ZXJ0IHBhcmFtcyB0byBjb3JyZWN0IGRhdGF0eXBlIGFuZCBpbmplY3QKI0NvbnZlcnQgcGFyYW1zIHRvIGNvcnJlY3QgZGF0YXR5cGUgYW5kIGluamVjdAokYXR0cmliLktleXMgfCBmb3JlYWNoLW9iamVjdCB7CiAgICAkS2V5ID0gJF8ucmVwbGFjZSgiaXRlbV9uYW1lIiwgIm5hbWUiKQogICAgJHByb3AgPSAkcmVzb3VyY2UuUHJvcGVydGllcyB8IHdoZXJlIHskXy5OYW1lIC1lcSAka2V5fQogICAgaWYgKCEkcHJvcCkKICAgIHsKICAgICAgICAjSWYgaXRzIGEgY3JlZGVudGlhbCBzcGVjaWZpZWQgYXMgImNyZWRlbnRpYWwiLCBBbnNpYmxlIHdpbGwgc3VwcG9ydCBjcmVkZW50aWFsX3VzZXJuYW1lIGFuZCBjcmVkZW50aWFsX3Bhc3N3b3JkLiBOZWVkIHRvIGNoZWNrIGZvciB0aGF0CiAgICAgICAgJHByb3AgPSAkcmVzb3VyY2UuUHJvcGVydGllcyB8IHdoZXJlIHskXy5OYW1lIC1lcSAka2V5LlJlcGxhY2UoIl91c2VybmFtZSIsIiIpfQogICAgICAgIGlmICgkcHJvcCkKICAgICAgICB7CiAgICAgICAgICAgICNXZSBuZWVkIHRvIGNvbnN0cnVjdCBhIGNyZWQgb2JqZWN0LiBBdCB0aGlzIHBvaW50IGtleXZhbHVlIGlzIHRoZSB1c2VybmFtZSwgc28gZ3JhYiB0aGUgcGFzc3dvcmQKICAgICAgICAgICAgJFByb3BVc2VyTmFtZVZhbHVlID0gJGF0dHJpYi5JdGVtKCRfKQogICAgICAgICAgICAkUHJvcFBhc3N3b3JkID0gJGtleS5SZXBsYWNlKCJfdXNlcm5hbWUiLCJfcGFzc3dvcmQiKQogICAgICAgICAgICAkUHJvcFBhc3N3b3JkVmFsdWUgPSAkYXR0cmliLiRQcm9wUGFzc3dvcmQKCiAgICAgICAgICAgICRjcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCAoJFByb3BVc2VyTmFtZVZhbHVlLCAoJFByb3BQYXNzd29yZFZhbHVlIHwgQ29udmVydFRvLVNlY3VyZVN0cmluZyAtQXNQbGFpblRleHQgLUZvcmNlKSkKICAgICAgICAgICAgW1N5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSRLZXlWYWx1ZSA9ICRjcmVkCiAgICAgICAgICAgICRjb25maWcuUHJvcGVydHkuQWRkKCRrZXkuUmVwbGFjZSgiX3VzZXJuYW1lIiwiIiksJEtleVZhbHVlKQogICAgICAgIH0KICAgICAgICBFbHNlSWYgKCRrZXkuQ29udGFpbnMoIl9wYXNzd29yZCIpKQogICAgICAgIHsKICAgICAgICAgICAgI0RvIG5vdGhpbmcuIFdlIHN1Y2sgaW4gdGhlIHBhc3N3b3JkIGluIHRoZSBoYW5kbGVyIGZvciBfdXNlcm5hbWUsIHNvIHdlIGNhbiBqdXN0IHNraXAgaXQuCiAgICAgICAgfQogICAgICAgIEVsc2UKICAgICAgICB7CiAgICAgICAgICAgIEZhaWwtSnNvbiAtb2JqICRyZXN1bHQgLW1lc3NhZ2UgIlByb3BlcnR5ICRrZXkgaW4gcmVzb3VyY2UgJGRzY3Jlc291cmNlbmFtZSBpcyBub3QgYSB2YWxpZCBwcm9wZXJ0eSIKICAgICAgICB9CiAgICAgICAgCiAgICB9CiAgICBFbHNlSWYgKCRwcm9wLlByb3BlcnR5VHlwZSAtZXEgIltzdHJpbmddIikKICAgIHsKICAgICAgICBbU3RyaW5nXSRLZXlWYWx1ZSA9ICRhdHRyaWIuSXRlbSgkXykKICAgICAgICAkY29uZmlnLlByb3BlcnR5LkFkZCgka2V5LCRLZXlWYWx1ZSkKICAgIH0KICAgIEVsc2VJZiAoJHByb3AuUHJvcGVydHlUeXBlIC1lcSAiW3N0cmluZ1tdXSIpCiAgICB7CiAgICAgICAgI0tleVZhbHVlIGlzIGFuIGFycmF5IG9mIHN0cmluZ3MKICAgICAgICBbU3RyaW5nXSRUZW1wS2V5VmFsdWUgPSAkYXR0cmliLkl0ZW0oJF8pCiAgICAgICAgW1N0cmluZ1tdXSRLZXlWYWx1ZSA9ICRUZW1wS2V5VmFsdWUuU3BsaXQoIiwiKS5UcmltKCkKCiAgICAgICAgJGNvbmZpZy5Qcm9wZXJ0eS5BZGQoJGtleSwkS2V5VmFsdWUpCiAgICB9CiAgICBFbHNlSWYgKCRwcm9wLlByb3BlcnR5VHlwZSAtZXEgIltVSW50MzJbXV0iKQogICAgewogICAgICAgICNLZXlWYWx1ZSBpcyBhbiBhcnJheSBvZiBpbnRlZ2VycwogICAgICAgIFtTdHJpbmddJFRlbXBLZXlWYWx1ZSA9ICRhdHRyaWIuSXRlbSgkXykKICAgICAgICBbVUludDMyW11dJEtleVZhbHVlID0gJGF0dHJpYi5JdGVtKCRfLnNwbGl0KCIsIikuVHJpbSgpKQogICAgICAgICRjb25maWcuUHJvcGVydHkuQWRkKCRrZXksJEtleVZhbHVlKQogICAgfQogICAgRWxzZUlmICgkcHJvcC5Qcm9wZXJ0eVR5cGUgLWVxICJbYm9vbF0iKQogICAgewogICAgICAgIGlmICgkYXR0cmliLkl0ZW0oJF8pIC1saWtlICJ0cnVlIikKICAgICAgICB7CiAgICAgICAgICAgIFtib29sXSRLZXlWYWx1ZSA9ICR0cnVlCiAgICAgICAgfQogICAgICAgIEVsc2VJZiAoJGF0dHJpYi5JdGVtKCRfKSAtbGlrZSAiZmFsc2UiKQogICAgICAgIHsKICAgICAgICAgICAgW2Jvb2xdJEtleVZhbHVlID0gJGZhbHNlCiAgICAgICAgfQogICAgICAgICRjb25maWcuUHJvcGVydHkuQWRkKCRrZXksJEtleVZhbHVlKQogICAgfQogICAgRWxzZUlmICgkcHJvcC5Qcm9wZXJ0eVR5cGUgLWVxICJbaW50XSIpCiAgICB7CiAgICAgICAgW2ludF0kS2V5VmFsdWUgPSAkYXR0cmliLkl0ZW0oJF8pCiAgICAgICAgJGNvbmZpZy5Qcm9wZXJ0eS5BZGQoJGtleSwkS2V5VmFsdWUpCiAgICB9CiAgICBFbHNlSWYgKCRwcm9wLlByb3BlcnR5VHlwZSAtZXEgIltDaW1JbnN0YW5jZVtdXSIpCiAgICB7CiAgICAgICNLZXlWYWx1ZSBpcyBhbiBhcnJheSBvZiBDaW1JbnN0YW5jZQogICAgICBbQ2ltSW5zdGFuY2VbXV0kS2V5VmFsID0gQCgpCiAgICAgIFtTdHJpbmddJFRlbXBLZXlWYWx1ZSA9ICRhdHRyaWIuSXRlbSgkXykKICAgICAgI05lZWQgdG8gc3BsaXQgb24gdGhlIHN0cmluZyB9LCBiZWNhdXNlIHNvbWUgcHJvcGVydHkgdmFsdWVzIGhhdmUgY29tbWFzIGluIHRoZW0KICAgICAgW1N0cmluZ1tdXSRLZXlWYWx1ZVN0ciA9ICRUZW1wS2V5VmFsdWUgLXNwbGl0KCJ9LCIpCiAgICAgICNHbyB0aHJvdWdoIGVhY2ggc3RyaW5nIG9mIHByb3BlcnRpZXMgYW5kIGNyZWF0ZSBhIGhhc2ggb2YgdGhlbQogICAgICBmb3JlYWNoKCRzdHIgaW4gJEtleVZhbHVlU3RyKQogICAgICB7CiAgICAgICAgW3N0cmluZ1tdXSRwcm9wZXJ0aWVzID0gJHN0ci5TcGxpdCgieyIpWzFdLlJlcGxhY2UoIn0iLCIiKS5UcmltKCkuU3BsaXQoW2Vudmlyb25tZW50XTo6TmV3TGluZSkuVHJpbSgpCiAgICAgICAgJHBycGggPSBAe30KICAgICAgICBmb3JlYWNoKCRwIGluICRwcm9wZXJ0aWVzKQogICAgICAgIHsKICAgICAgICAgICRwQXJyID0gJHAgLXNwbGl0ICI9IgogICAgICAgICAgI2lmIHRoZSB2YWx1ZSBjYW4gYmUgYW4gaW50IHdlIG11c3QgY29udmVydCBpdCB0byBhbiBpbnQKICAgICAgICAgIGlmKFtib29sXSgkcEFyclsxXSAtYXMgW2ludF0gLWlzIFtpbnRdKSkKICAgICAgICAgIHsKICAgICAgICAgICAgICAkcHJwaC5BZGQoJHBBcnJbMF0uVHJpbSgpLCRwQXJyWzFdLlRyaW0oKSAtYXMgW2ludF0pCiAgICAgICAgICB9CiAgICAgICAgICBlbHNlCiAgICAgICAgICB7CiAgICAgICAgICAgICAgJHBycGguQWRkKCRwQXJyWzBdLlRyaW0oKSwkcEFyclsxXS5UcmltKCkpCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICNjcmVhdGUgdGhlIG5ldyBDaW1JbnN0YW5jZQogICAgICAgICRjaW0gPSBOZXctQ2ltSW5zdGFuY2UgLUNsYXNzTmFtZSAkc3RyLlNwbGl0KCJ7IilbMF0uVHJpbSgpIC1Qcm9wZXJ0eSAkcHJwaCAtQ2xpZW50T25seQogICAgICAgICNhZGQgdGhlIG5ldyBDaW1JbnN0YW5jZSB0byB0aGUgYXJyYXkKICAgICAgICAkS2V5VmFsICs9ICRjaW0KICAgICAgfQogICAgICAkY29uZmlnLlByb3BlcnR5LkFkZCgka2V5LCRLZXlWYWwpCiAgICB9CiAgfQoKdHJ5CnsKICAgICNJbnZva2UgV01GNSBwcm9kdWN0aW9uIHByZXZpZXcgZGlmZmVyZW50bHkgdGhhbiBmZWIgcHJldmlldwogICAgJFRhcmdldFZlcnNpb24gPSBbdmVyc2lvbl06Om5ldygiNS4wLjEwNTE0LjYiKQogICAgaWYgKCRQU1ZlcnNpb25UYWJsZS5QU1ZlcnNpb24uQ29tcGFyZVRvKCRUYXJnZXRWZXJzaW9uKSAtZ2UgMCkKICAgIHsKICAgICAgICAjQ3VycmVudCBob3N0cyB2ZXJzaW9uIGlzIHByb2R1Y3Rpb24gcHJldm9ldyBvciBoaWdoZXIuIFVzZSBtb2R1bGVuYW1lIHdoZW4gaW52b2tpbmcuCiAgICAgICAgaWYgKCRyZXNvdXJjZS5Nb2R1bGVOYW1lIC1uZSAkbnVsbCkKICAgICAgICB7CiAgICAgICAgICAgICRQYXJhbXMgPSBAeyJNb2R1bGVuYW1lIj0kcmVzb3VyY2UuTW9kdWxlbmFtZX0gICAgCiAgICAgICAgfQogICAgICAgIGVsc2UgCiAgICAgICAgewogICAgICAgICAgICAkUGFyYW1zID0gQHsiTW9kdWxlbmFtZSI9IlBTRGVzaXJlZFN0YXRlQ29uZmlndXJhdGlvbiJ9ICAgIAogICAgICAgIH0KICAgICAgICAKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICAkUGFyYW1zID0gQHt9CiAgICB9CgogICAgJFRlc3RSZXN1bHQgPSBJbnZva2UtRHNjUmVzb3VyY2UgQENvbmZpZyAtTWV0aG9kIFRlc3QgQHBhcmFtcyAtRXJyb3JWYXJpYWJsZSBUZXN0RXJyb3IgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgIGlmICgkVGVzdEVycm9yKQogICAgewogICAgICAgdGhyb3cgKCRUZXN0RXJyb3JbMF0uRXhjZXB0aW9uLk1lc3NhZ2UpCiAgICB9CiAgICBFbHNlSWYgKCgkdGVzdFJlc3VsdC5JbkRlc2lyZWRTdGF0ZSkgLW5lICR0cnVlKSAKICAgIHsKICAgICAgICBpZiAoJENoZWNrTW9kZSAtZXEgJEZhbHNlKQogICAgICAgIHsKICAgICAgICAgICAgJFNldCA9IEludm9rZS1Ec2NSZXNvdXJjZSAtTWV0aG9kIFNldCBAQ29uZmlnICBAcGFyYW1zIC1FcnJvclZhcmlhYmxlIFNldEVycm9yIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlCiAgICAgICAgfQogICAgICAgIAogICAgICAgIFNldC1BdHRyICRyZXN1bHQgImNoYW5nZWQiICR0cnVlCiAgICAgICAgaWYgKChnZXQtdmFyaWFibGUgfCB3aGVyZSB7JF8uTmFtZSAtZXEgInNldGVycm9yIn0pIC1hbmQgKCRTZXRFcnJvci5Db3VudCAtZ3QgMCkpCiAgICAgICAgewogICAgICAgICAgIHRocm93ICgkU2V0RXJyb3JbMF0uRXhjZXB0aW9uLk1lc3NhZ2UpCiAgICAgICAgfQogICAgfQoKfQpDYXRjaAp7CiAgICBGYWlsLUpzb24gLW9iaiAkcmVzdWx0IC1tZXNzYWdlICRfWzBdLkV4Y2VwdGlvbi5NZXNzYWdlCn0KCgojc2V0LWF0dHIgLW9iaiAkcmVzdWx0IC1uYW1lICJwcm9wZXJ0eSIgLXZhbHVlICRwcm9wZXJ0eQpFeGl0LUpzb24gLW9iaiAkcmVzdWx0CgoKCgo=
