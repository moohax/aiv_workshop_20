deploy.ps1,5d0b6552a1765583cd7ee64fdd30ea23,Scan result is 1. IsMalware: 0,w6/Cu8K/JHN0YXJ0VGltZT1HZXQtRGF0ZQpXcml0ZS1Ib3N0ICJCZWdpbm5pbmcgZGVwbG95bWVudCBhdCAkc3RhcnR0aW1lIgoKSW1wb3J0LU1vZHVsZSBBenVyZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQoKI0RFUExPWU1FTlQgT1BUSU9OUwogICAgJHRlbXBsYXRlVG9EZXBsb3kgICAgICAgID0gIkZ1bGxEZXBsb3kuanNvbiIKICAgICMgTVVTVCBiZSB1bmlxdWUgZm9yIGFsbCB5b3VyIHNpbXVsdGFuZW91cy9jby1leGlzdGluZyBkZXBsb3ltZW50cyBvZiB0aGlzIEFETmFtZSBpbiB0aGUgc2FtZSByZWdpb24KICAgICRWTmV0QWRkclNwYWNlMm5kT2N0ZXQgICA9ICI8RU5URVIgQSBVTklRVUUgREVQTE9ZTUVOVCBOVU1CRVIsIDAtOT4iCgogICAgIyBNdXN0IGJlIHVuaXF1ZSBmb3Igc2ltdWx0YW5lb3VzL2NvLWV4aXN0aW5nIGRlcGxveW1lbnRzCiAgICAjIm1hc3RlciIgb3IgImRldiIKICAgICRSR05hbWUgICAgICAgICAgICAgICAgICA9ICI8WU9VUiBSRVNPVVJDRSBHUk9VUD4iCiAgICAkRGVwbG95UmVnaW9uICAgICAgICAgICAgPSAiPFNFTEVDVCBBWlVSRSBSRUdJT04+IgoKICAgICRCcmFuY2ggICAgICAgICAgICAgICAgICA9ICJtYXN0ZXIiCiAgICAkQXNzZXRMb2NhdGlvbiAgICAgICAgICAgPSAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2JyZXR0aGFja2VyL0FBRF9BREZTX0xhYi8kQnJhbmNoL0FBRF9BREZTX0xhYi8iCgogICAgJHVzZXJOYW1lICAgICAgICAgICAgICAgID0gIjxBRCBBRE1JTklTVFJBVE9SIExPR0lOPiIKICAgICRzZWNwYXNzd2QgICAgICAgICAgICAgICA9IMOi4oKsxZM8QUQgQURNSU5JU1RSQVRPUiBQQVNTV09SRD7DouKCrAogICAgJGFkRG9tYWluTmFtZSAgICAgICAgICAgID0gIjwyLVBBUlQgQUQgRE9NQUlOIE5BTUUsIExJS0UgQ09OVE9TTy5DT00+IgogICAgJHVzZXJzQXJyYXkgICAgICAgICAgICAgID0gQCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAeyAiRk5hbWUiPSAiQm9iIjsgICJMTmFtZSI9ICJKb25lcyI7ICAgICJTQU0iPSAiYmpvbmVzIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEB7ICJGTmFtZSI9ICJCaWxsIjsgIkxOYW1lIj0gIlNtaXRoIjsgICAgIlNBTSI9ICJic21pdGgiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQHsgIkZOYW1lIj0gIk1hcnkiOyAiTE5hbWUiPSAiUGhpbGxpcHMiOyAiU0FNIj0gIm1waGlsbGlwcyIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAeyAiRk5hbWUiPSAiU3VlIjsgICJMTmFtZSI9ICJKYWNrc29uIjsgICJTQU0iPSAic2phY2tzb24iIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICRkZWZhdWx0VXNlclBhc3N3b3JkICAgICA9ICJQQHNzdzByZCIKCiAgICAjIENsaWVudHNUb0RlcGxveSwgYXJyYXksIHBvc3NpYmxlIHZhbHVlczogIjciLCI4IiwiMTAtMTYwNyIsIjEwLTE1MTEiLCIxMC0xNzAzIgogICAgIyBFeGFtcGxlczogU2luZ2xlIFdpbjcgVk0gPSBAKCI3IikKICAgICMgICAgICAgICAgIFR3byBXaW43LCBvbmUgV2luMTAgQ3JlYXRvcnMgPSAiNyIsIjciLCIxMC0xNzAzIgogICAgJGNsaWVudHNUb0RlcGxveSAgICAgICAgID0gQCgiNyIpCiAgICAkUkRQV2lkdGggICAgICAgICAgICAgICAgPSAxOTIwCiAgICAkUkRQSGVpZ2h0ICAgICAgICAgICAgICAgPSAxMDgwCgogICAgI0VudGVyIHRoZSBmdWxsIEF6dXJlIEFSTSByZXNvdXJjZSBzdHJpbmcgdG8gdGhlIGxvY2F0aW9uIHdoZXJlIHlvdSBzdG9yZSB5b3VyIGNsaWVudCBpbWFnZXMuCiAgICAjWW91ciBpbWFnZXMgTVVTVCBiZSBuYW1lZDogT1NJbWFnZV9XaW48dmVyc2lvbj4KICAgICNQYXRoIHdpbGwgYmUgbGlrZTogIi9zdWJzY3JpcHRpb25zL3h4eHh4eHh4LXh4eHgteHh4eC14eHh4LXh4eHh4eHh4eHh4eC9yZXNvdXJjZUdyb3Vwcy88UkcgaG9sZGluZyB5b3VyIGltYWdlcz4vcHJvdmlkZXJzL01pY3Jvc29mdC5Db21wdXRlL2ltYWdlcy8iCiAgICAkY2xpZW50SW1hZ2VCYXNlUmVzb3VyY2UgPSAiPEFSTSByZXNvdXJjZSBwYXRoIHRvIHlvdXIgVk0gQ2xpZW50IGltYWdlIGJhc2U+IgoKICAgICMgVGhpcyB3aWxsIGRlcGxveSBYIG51bWJlciBvZiBkaXN0aW5jdCBBREZTIGZhcm1zLCBlYWNoIHdpdGggYSBzaW5nbGUgV0FQIHByb3h5IGRlcGxveWVkIGluIHRoZSBETVouCiAgICAkQWRmc0Zhcm1Db3VudCAgICAgICAgICAgPSAiMSI7CiNFTkQgREVQTE9ZTUVOVCBPUFRJT05TCgojRG90LXNvdXJjZWQgdmFyaWFibGUgb3ZlcnJpZGUgKG9wdGlvbmFsLCBjb21tZW50IG91dCBpZiBub3QgdXNpbmcpCi4gQzpcZGV2XEFfQ3VzdG9tRGVwbG95U2V0dGluZ3NcQUFEX0FERlNfTGFiLnBzMQoKI2Vuc3VyZSB3ZSdyZSBsb2dnZWQgaW4KR2V0LUF6dXJlUm1Db250ZXh0IC1FcnJvckFjdGlvbiBTdG9wCgojZGVwbG95CiRwYXJtcz1AewogICAgImFkbWluUGFzc3dvcmQiICAgICAgICAgICAgICAgPSAkc2VjcGFzc3dkOwogICAgImFkbWluVXNlcm5hbWUiICAgICAgICAgICAgICAgPSAkdXNlck5hbWU7CiAgICAiYWREb21haW5OYW1lIiAgICAgICAgICAgICAgICA9ICRBRERvbWFpbk5hbWU7CiAgICAiYXNzZXRMb2NhdGlvbiIgICAgICAgICAgICAgICA9ICRhc3NldExvY2F0aW9uOwogICAgInZpcnR1YWxOZXR3b3JrQWRkcmVzc1JhbmdlIiAgPSAiMTAuJFZOZXRBZGRyU3BhY2UybmRPY3RldC4wLjAvMTYiOwogICAgI1RoZSBmaXJzdCBJUCBkZXBsb3llZCBpbiB0aGUgQUQgc3VibmV0LCBmb3IgdGhlIERDCiAgICAiYWRJUCIgICAgICAgICAgICAgICAgICAgICAgICA9ICIxMC4kVk5ldEFkZHJTcGFjZTJuZE9jdGV0LjEuNCI7CiAgICAjVGhlIGZpcnN0IEFERlMgc2VydmVyIGRlcGxveWVkIGluIHRoZSBBRCBzdWJuZXQgLSBtdWx0aXBsZSBmYXJtcyB3aWxsIGluY3JlbWVudCBiZXlvbmQgdGhpcwogICAgImFkZnNJUCIgICAgICAgICAgICAgICAgICAgICAgPSAiMTAuJFZOZXRBZGRyU3BhY2UybmRPY3RldC4xLjUiOwogICAgImFkU3VibmV0QWRkcmVzc1JhbmdlIiAgICAgICAgPSAiMTAuJFZOZXRBZGRyU3BhY2UybmRPY3RldC4xLjAvMjQiOwogICAgImRtelN1Ym5ldEFkZHJlc3NSYW5nZSIgICAgICAgPSAiMTAuJFZOZXRBZGRyU3BhY2UybmRPY3RldC4yLjAvMjQiOwogICAgImNsaVN1Ym5ldEFkZHJlc3NSYW5nZSIgICAgICAgPSAiMTAuJFZOZXRBZGRyU3BhY2UybmRPY3RldC4zLjAvMjQiOwogICAgI2lmIG11bHRpcGxlIGRlcGxveW1lbnRzIHdpbGwgbmVlZCB0byByb3V0ZSBiZXR3ZWVuIHZOZXRzLCBiZSBzdXJlIHRvIG1ha2UgdGhpcyBkaXN0aW5jdCBiZXR3ZWVuIHRoZW0KICAgICJkZXBsb3ltZW50TnVtYmVyIiAgICAgICAgICAgID0gJFZOZXRBZGRyU3BhY2UybmRPY3RldDsKICAgICJjbGllbnRzVG9EZXBsb3kiICAgICAgICAgICAgID0gJGNsaWVudHNUb0RlcGxveTsKICAgICJjbGllbnRJbWFnZUJhc2VSZXNvdXJjZSIgICAgID0gJGNsaWVudEltYWdlQmFzZVJlc291cmNlOwogICAgIkFkZnNGYXJtQ291bnQiICAgICAgICAgICAgICAgPSAkQWRmc0Zhcm1Db3VudDsKICAgICJ1c2Vyc0FycmF5IiAgICAgICAgICAgICAgICAgID0gJHVzZXJzQXJyYXk7CiAgICAiZGVmYXVsdFVzZXJQYXNzd29yZCIgICAgICAgICA9ICJQQHNzdzByZCI7Cn0KCiRUZW1wbGF0ZUZpbGUgPSAiJCgkYXNzZXRMb2NhdGlvbikkdGVtcGxhdGVUb0RlcGxveSIgKyAiP3g9NSIKCnRyeSB7CiAgICBHZXQtQXp1cmVSbVJlc291cmNlR3JvdXAgLU5hbWUgJFJHTmFtZSAtRXJyb3JBY3Rpb24gU3RvcAogICAgV3JpdGUtSG9zdCAiUmVzb3VyY2UgZ3JvdXAgJFJHTmFtZSBleGlzdHMsIHVwZGF0aW5nIGRlcGxveW1lbnQiCn0KY2F0Y2ggewogICAgJFJHID0gTmV3LUF6dXJlUm1SZXNvdXJjZUdyb3VwIC1OYW1lICRSR05hbWUgLUxvY2F0aW9uICREZXBsb3lSZWdpb24gLVRhZyBAeyBTaHV0ZG93biA9ICJ0cnVlIjsgU3RhcnR1cCA9ICJmYWxzZSJ9CiAgICBXcml0ZS1Ib3N0ICJDcmVhdGVkIG5ldyByZXNvdXJjZSBncm91cCAkUkdOYW1lLiIKfQokdmVyc2lvbiArKwokZGVwbG95bWVudCA9IE5ldy1BenVyZVJtUmVzb3VyY2VHcm91cERlcGxveW1lbnQgLVJlc291cmNlR3JvdXBOYW1lICRSR05hbWUgLVRlbXBsYXRlUGFyYW1ldGVyT2JqZWN0ICRwYXJtcyAtVGVtcGxhdGVGaWxlICRUZW1wbGF0ZUZpbGUgLU5hbWUgImFkZnNEZXBsb3kkdmVyc2lvbiIgIC1Gb3JjZSAtVmVyYm9zZQoKaWYgKCRkZXBsb3ltZW50KSB7CiAgICBpZiAoLW5vdCAoR2V0LUNvbW1hbmQgR2V0LUZRRE5Gb3JWTSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSkpIHsKICAgICAgICAjbG9hZCBhZGQtb24gZnVuY3Rpb25zIHRvIGZhY2lsaXRhdGUgdGhlIFJEUCBjb25uZWN0b2lkIGNyZWF0aW9uIGJlbG93CiAgICAgICAgJHVybD0iJCgkYXNzZXRMb2NhdGlvbilTY3JpcHRzL0FkZG9ucy5wczEiCiAgICAgICAgJHRlbXBmaWxlID0gIiRlbnY6VEVNUFxBZGRvbnMucHMxIgogICAgICAgICR3ZWJjbGllbnQgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuV2ViQ2xpZW50CiAgICAgICAgJHdlYmNsaWVudC5Eb3dubG9hZEZpbGUoJHVybCwgJHRlbXBmaWxlKQogICAgICAgIC4gJHRlbXBmaWxlCiAgICB9CgogICAgJFJEUEZvbGRlciA9ICIkZW52OlVTRVJQUk9GSUxFXGRlc2t0b3BcJFJHTmFtZVwiCiAgICBpZiAoIShUZXN0LVBhdGggLVBhdGggJFJEUEZvbGRlcikpIHsKICAgICAgICBtZCAkUkRQRm9sZGVyCiAgICB9CiAgICAkQUROYW1lID0gJEFERG9tYWluTmFtZS5TcGxpdCgnLicpWzBdCiAgICAkdm1zID0gRmluZC1BenVyZVJtUmVzb3VyY2UgLVJlc291cmNlR3JvdXBOYW1lQ29udGFpbnMgJFJHTmFtZSB8IHdoZXJlIHsoJF8uUmVzb3VyY2VUeXBlIC1saWtlICJNaWNyb3NvZnQuQ29tcHV0ZS92aXJ0dWFsTWFjaGluZXMiKX0KICAgICRweGNvdW50PTAKICAgIGlmICgkdm1zKSB7CiAgICAgICAgZm9yZWFjaCAoJHZtIGluICR2bXMpIHsKICAgICAgICAgICAgJGZxZG49R2V0LUZRRE5Gb3JWTSAtUmVzb3VyY2VHcm91cE5hbWUgJFJHTmFtZSAtVk1OYW1lICR2bS5OYW1lCiAgICAgICAgICAgIE5ldy1SRFBDb25uZWN0b2lkIC1TZXJ2ZXJOYW1lICRmcWRuIC1Mb2dpbk5hbWUgIiQoJEFETmFtZSlcJCgkdXNlck5hbWUpIiAtUkRQTmFtZSAkdm0uTmFtZSAtT3V0cHV0RGlyZWN0b3J5ICRSRFBGb2xkZXIgLVdpZHRoICRSRFBXaWR0aCAtSGVpZ2h0ICRSRFBIZWlnaHQKICAgICAgICAgICAgaWYgKCR2bS5OYW1lLkluZGV4T2YoIlBYIikgLWd0IC0xKSB7CiAgICAgICAgICAgICAgICAkcHhjb3VudCsrCiAgICAgICAgICAgICAgICAkV3NoU2hlbGwgPSBOZXctT2JqZWN0IC1jb21PYmplY3QgV1NjcmlwdC5TaGVsbAogICAgICAgICAgICAgICAgJFNob3J0Y3V0ID0gJFdzaFNoZWxsLkNyZWF0ZVNob3J0Y3V0KCIkKCRSRFBGb2xkZXIpQURGU1Rlc3QkcHhjb3VudC5sbmsiKQogICAgICAgICAgICAgICAgJFNob3J0Y3V0LlRhcmdldFBhdGggPSAiaHR0cHM6Ly8kZnFkbi9hZGZzL2xzL2lkcGluaXRpYXRlZHNpZ25vbi5hc3B4IgogICAgICAgICAgICAgICAgJFNob3J0Y3V0Lkljb25Mb2NhdGlvbiA9ICIlUHJvZ3JhbUZpbGVzJVxJbnRlcm5ldCBFeHBsb3JlclxpZXhwbG9yZS5leGUsIDAiCiAgICAgICAgICAgICAgICAkU2hvcnRjdXQuU2F2ZSgpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgc3RhcnQgJFJEUEZvbGRlcgp9CgokZW5kVGltZT1HZXQtRGF0ZQoKV3JpdGUtSG9zdCAiIgpXcml0ZS1Ib3N0ICJUb3RhbCBEZXBsb3ltZW50IHRpbWU6IgpOZXctVGltZVNwYW4gLVN0YXJ0ICRzdGFydFRpbWUgLUVuZCAkZW5kVGltZSB8IFNlbGVjdCBIb3VycywgTWludXRlcywgU2Vjb25kcwo=
