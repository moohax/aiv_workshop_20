StorageCommon.tests.ps1,0795e5922ba80d9e67a5f92e3691cdcf,Scan result is 1. IsMalware: 0,JHNjcmlwdDpEU0NNb2R1bGVOYW1lICAgICAgPSAneFN0b3JhZ2UnCiRzY3JpcHQ6RFNDUmVzb3VyY2VOYW1lICAgID0gJ1N0b3JhZ2VDb21tb24nCgpJbXBvcnQtTW9kdWxlIC1OYW1lIChKb2luLVBhdGggLVBhdGggKEpvaW4tUGF0aCAtUGF0aCAoU3BsaXQtUGF0aCAkUFNTY3JpcHRSb290IC1QYXJlbnQpIC1DaGlsZFBhdGggJ1Rlc3RIZWxwZXJzJykgLUNoaWxkUGF0aCAnQ29tbW9uVGVzdEhlbHBlci5wc20xJykKCiNyZWdpb24gSEVBREVSCiMgVW5pdCBUZXN0IFRlbXBsYXRlIFZlcnNpb246IDEuMS4wCltTdHJpbmddICRzY3JpcHQ6bW9kdWxlUm9vdCA9IFNwbGl0LVBhdGggLVBhcmVudCAoU3BsaXQtUGF0aCAtUGFyZW50ICRQU1NjcmlwdFJvb3QpCmlmICggKC1ub3QgKFRlc3QtUGF0aCAtUGF0aCAoSm9pbi1QYXRoIC1QYXRoICRzY3JpcHQ6bW9kdWxlUm9vdCAtQ2hpbGRQYXRoICdEU0NSZXNvdXJjZS5UZXN0cycpKSkgLW9yIGAKICAgICAoLW5vdCAoVGVzdC1QYXRoIC1QYXRoIChKb2luLVBhdGggLVBhdGggJHNjcmlwdDptb2R1bGVSb290IC1DaGlsZFBhdGggJ0RTQ1Jlc291cmNlLlRlc3RzXFRlc3RIZWxwZXIucHNtMScpKSkgKQp7CiAgICAmIGdpdCBAKCdjbG9uZScsJ2h0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL0RzY1Jlc291cmNlLlRlc3RzLmdpdCcsKEpvaW4tUGF0aCAtUGF0aCAkc2NyaXB0Om1vZHVsZVJvb3QgLUNoaWxkUGF0aCAnXERTQ1Jlc291cmNlLlRlc3RzXCcpKQp9CgpJbXBvcnQtTW9kdWxlIChKb2luLVBhdGggLVBhdGggJHNjcmlwdDptb2R1bGVSb290IC1DaGlsZFBhdGggJ0RTQ1Jlc291cmNlLlRlc3RzXFRlc3RIZWxwZXIucHNtMScpIC1Gb3JjZQokVGVzdEVudmlyb25tZW50ID0gSW5pdGlhbGl6ZS1UZXN0RW52aXJvbm1lbnQgYAogICAgLURTQ01vZHVsZU5hbWUgJHNjcmlwdDpEU0NNb2R1bGVOYW1lIGAKICAgIC1EU0NSZXNvdXJjZU5hbWUgJHNjcmlwdDpEU0NSZXNvdXJjZU5hbWUgYAogICAgLVRlc3RUeXBlIFVuaXQKI2VuZHJlZ2lvbiBIRUFERVIKCiMgQmVnaW4gVGVzdGluZwp0cnkKewogICAgI3JlZ2lvbiBQZXN0ZXIgVGVzdHMKCiAgICAkTG9jYWxpemVkRGF0YSA9IEluTW9kdWxlU2NvcGUgJHNjcmlwdDpEU0NSZXNvdXJjZU5hbWUgewogICAgICAgICRMb2NhbGl6ZWREYXRhCiAgICB9CgogICAgI3JlZ2lvbiBQZXN0ZXIgVGVzdCBJbml0aWFsaXphdGlvbgogICAgJGRyaXZlTGV0dGVyR29vZCA9ICdDJwogICAgJGRyaXZlTGV0dGVyR29vZHdpdGhDb2xvbiA9ICdDOicKICAgICRkcml2ZUxldHRlckJhZCA9ICcxJwogICAgJGRyaXZlTGV0dGVyQmFkQ29sb24gPSAnOkMnCiAgICAkZHJpdmVMZXR0ZXJCYWRUb29Mb25nID0gJ0ZFOicKCiAgICAkYWNjZXNzUGF0aEdvb2QgPSAnYzpcR29vZCcKICAgICRhY2Nlc3NQYXRoR29vZFdpdGhTbGFzaCA9ICdjOlxHb29kXCcKICAgICRhY2Nlc3NQYXRoQmFkID0gJ2M6XEJhZCcKICAgICNlbmRyZWdpb24KCiAgICAjcmVnaW9uIEZ1bmN0aW9uIEFzc2VydC1Ecml2ZUxldHRlclZhbGlkCiAgICBEZXNjcmliZSAiU3RvcmFnZUNvbW1vblxBc3NlcnQtRHJpdmVMZXR0ZXJWYWxpZCIgewogICAgICAgIENvbnRleHQgJ2RyaXZlIGxldHRlciBpcyBnb29kLCBoYXMgbm8gY29sb24gYW5kIGNvbG9uIGlzIG5vdCByZXF1aXJlZCcgewogICAgICAgICAgICBJdCAic2hvdWxkIHJldHVybiAnJGRyaXZlTGV0dGVyR29vZCciIHsKICAgICAgICAgICAgICAgIEFzc2VydC1Ecml2ZUxldHRlclZhbGlkIC1Ecml2ZUxldHRlciAkZHJpdmVMZXR0ZXJHb29kIHwgU2hvdWxkIEJlICRkcml2ZUxldHRlckdvb2QKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQ29udGV4dCAnZHJpdmUgbGV0dGVyIGlzIGdvb2QsIGhhcyBubyBjb2xvbiBidXQgY29sb24gaXMgcmVxdWlyZWQnIHsKICAgICAgICAgICAgSXQgInNob3VsZCByZXR1cm4gJyRkcml2ZUxldHRlckdvb2R3aXRoQ29sb24nIiB7CiAgICAgICAgICAgICAgICBBc3NlcnQtRHJpdmVMZXR0ZXJWYWxpZCAtRHJpdmVMZXR0ZXIgJGRyaXZlTGV0dGVyR29vZCAtQ29sb24gfCBTaG91bGQgQmUgJGRyaXZlTGV0dGVyR29vZHdpdGhDb2xvbgogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBDb250ZXh0ICdkcml2ZSBsZXR0ZXIgaXMgZ29vZCwgaGFzIGEgY29sb24gYnV0IGNvbG9uIGlzIG5vdCByZXF1aXJlZCcgewogICAgICAgICAgICBJdCAic2hvdWxkIHJldHVybiAnJGRyaXZlTGV0dGVyR29vZCciIHsKICAgICAgICAgICAgICAgIEFzc2VydC1Ecml2ZUxldHRlclZhbGlkIC1Ecml2ZUxldHRlciAkZHJpdmVMZXR0ZXJHb29kd2l0aENvbG9uIHwgU2hvdWxkIEJlICRkcml2ZUxldHRlckdvb2QKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQ29udGV4dCAnZHJpdmUgbGV0dGVyIGlzIGdvb2QsIGhhcyBhIGNvbG9uIGFuZCBjb2xvbiBpcyByZXF1aXJlZCcgewogICAgICAgICAgICBJdCAic2hvdWxkIHJldHVybiAnJGRyaXZlTGV0dGVyR29vZHdpdGhDb2xvbiciIHsKICAgICAgICAgICAgICAgIEFzc2VydC1Ecml2ZUxldHRlclZhbGlkIC1Ecml2ZUxldHRlciAkZHJpdmVMZXR0ZXJHb29kd2l0aENvbG9uIC1Db2xvbiB8IFNob3VsZCBCZSAkZHJpdmVMZXR0ZXJHb29kd2l0aENvbG9uCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIENvbnRleHQgJ2RyaXZlIGxldHRlciBpcyBub24gYWxwaGEnIHsKICAgICAgICAgICAgJGVycm9yUmVjb3JkID0gR2V0LUludmFsaWRBcmd1bWVudFJlY29yZCBgCiAgICAgICAgICAgICAgICAtTWVzc2FnZSAkKCRMb2NhbGl6ZWREYXRhLkludmFsaWREcml2ZUxldHRlckZvcm1hdEVycm9yIC1mICRkcml2ZUxldHRlckJhZCkgYAogICAgICAgICAgICAgICAgLUFyZ3VtZW50TmFtZSAnRHJpdmVMZXR0ZXInCgogICAgICAgICAgICBJdCAnc2hvdWxkIHRocm93IEludmFsaWREcml2ZUxldHRlckZvcm1hdEVycm9yJyB7CiAgICAgICAgICAgICAgICB7IEFzc2VydC1Ecml2ZUxldHRlclZhbGlkIC1Ecml2ZUxldHRlciAkZHJpdmVMZXR0ZXJCYWQgfSB8IFNob3VsZCBUaHJvdyAkZXJyb3JSZWNvcmQKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQ29udGV4dCAnZHJpdmUgbGV0dGVyIGhhcyBhIGJhZCBjb2xvbiBsb2NhdGlvbicgewogICAgICAgICAgICAkZXJyb3JSZWNvcmQgPSBHZXQtSW52YWxpZEFyZ3VtZW50UmVjb3JkIGAKICAgICAgICAgICAgICAgIC1NZXNzYWdlICQoJExvY2FsaXplZERhdGEuSW52YWxpZERyaXZlTGV0dGVyRm9ybWF0RXJyb3IgLWYgJGRyaXZlTGV0dGVyQmFkQ29sb24pIGAKICAgICAgICAgICAgICAgIC1Bcmd1bWVudE5hbWUgJ0RyaXZlTGV0dGVyJwoKICAgICAgICAgICAgSXQgJ3Nob3VsZCB0aHJvdyBJbnZhbGlkRHJpdmVMZXR0ZXJGb3JtYXRFcnJvcicgewogICAgICAgICAgICAgICAgeyBBc3NlcnQtRHJpdmVMZXR0ZXJWYWxpZCAtRHJpdmVMZXR0ZXIgJGRyaXZlTGV0dGVyQmFkQ29sb24gfSB8IFNob3VsZCBUaHJvdyAkZXJyb3JSZWNvcmQKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQ29udGV4dCAnZHJpdmUgbGV0dGVyIGlzIHRvbyBsb25nJyB7CiAgICAgICAgICAgICRlcnJvclJlY29yZCA9IEdldC1JbnZhbGlkQXJndW1lbnRSZWNvcmQgYAogICAgICAgICAgICAgICAgLU1lc3NhZ2UgJCgkTG9jYWxpemVkRGF0YS5JbnZhbGlkRHJpdmVMZXR0ZXJGb3JtYXRFcnJvciAtZiAkZHJpdmVMZXR0ZXJCYWRUb29Mb25nKSBgCiAgICAgICAgICAgICAgICAtQXJndW1lbnROYW1lICdEcml2ZUxldHRlcicKCiAgICAgICAgICAgIEl0ICdzaG91bGQgdGhyb3cgSW52YWxpZERyaXZlTGV0dGVyRm9ybWF0RXJyb3InIHsKICAgICAgICAgICAgICAgIHsgQXNzZXJ0LURyaXZlTGV0dGVyVmFsaWQgLURyaXZlTGV0dGVyICRkcml2ZUxldHRlckJhZFRvb0xvbmcgfSB8IFNob3VsZCBUaHJvdyAkZXJyb3JSZWNvcmQKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgICNlbmRyZWdpb24KCiAgICAjcmVnaW9uIEZ1bmN0aW9uIEFzc2VydC1BY2Nlc3NQYXRoVmFsaWQKICAgIERlc2NyaWJlICJTdG9yYWdlQ29tbW9uXEFzc2VydC1BY2Nlc3NQYXRoVmFsaWQiIHsKICAgICAgICBNb2NrIGAKICAgICAgICAgICAgLUNvbW1hbmROYW1lIFRlc3QtUGF0aCBgCiAgICAgICAgICAgIC1Nb2R1bGVOYW1lIFN0b3JhZ2VDb21tb24gYAogICAgICAgICAgICAtTW9ja1dpdGggeyAkVHJ1ZSB9CgogICAgICAgIENvbnRleHQgJ3BhdGggaXMgZm91bmQsIHRyYWlsaW5nIHNsYXNoIGluY2x1ZGVkLCBub3QgcmVxdWlyZWQnIHsKICAgICAgICAgICAgSXQgInNob3VsZCByZXR1cm4gJyRhY2Nlc3NQYXRoR29vZCciIHsKICAgICAgICAgICAgICAgIEFzc2VydC1BY2Nlc3NQYXRoVmFsaWQgLUFjY2Vzc1BhdGggJGFjY2Vzc1BhdGhHb29kV2l0aFNsYXNoIHwgU2hvdWxkIEJlICRhY2Nlc3NQYXRoR29vZAogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBDb250ZXh0ICdwYXRoIGlzIGZvdW5kLCB0cmFpbGluZyBzbGFzaCBpbmNsdWRlZCwgcmVxdWlyZWQnIHsKICAgICAgICAgICAgSXQgInNob3VsZCByZXR1cm4gJyRhY2Nlc3NQYXRoR29vZFdpdGhTbGFzaCciIHsKICAgICAgICAgICAgICAgIEFzc2VydC1BY2Nlc3NQYXRoVmFsaWQgLUFjY2Vzc1BhdGggJGFjY2Vzc1BhdGhHb29kV2l0aFNsYXNoIC1TbGFzaCB8IFNob3VsZCBCZSAkYWNjZXNzUGF0aEdvb2RXaXRoU2xhc2gKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQ29udGV4dCAncGF0aCBpcyBmb3VuZCwgdHJhaWxpbmcgc2xhc2ggbm90IGluY2x1ZGVkLCByZXF1aXJlZCcgewogICAgICAgICAgICBJdCAic2hvdWxkIHJldHVybiAnJGFjY2Vzc1BhdGhHb29kV2l0aFNsYXNoJyIgewogICAgICAgICAgICAgICAgQXNzZXJ0LUFjY2Vzc1BhdGhWYWxpZCAtQWNjZXNzUGF0aCAkYWNjZXNzUGF0aEdvb2QgLVNsYXNoIHwgU2hvdWxkIEJlICRhY2Nlc3NQYXRoR29vZFdpdGhTbGFzaAogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBDb250ZXh0ICdwYXRoIGlzIGZvdW5kLCB0cmFpbGluZyBzbGFzaCBub3QgaW5jbHVkZWQsIG5vdCByZXF1aXJlZCcgewogICAgICAgICAgICBJdCAic2hvdWxkIHJldHVybiAnJGFjY2Vzc1BhdGhHb29kJyIgewogICAgICAgICAgICAgICAgQXNzZXJ0LUFjY2Vzc1BhdGhWYWxpZCAtQWNjZXNzUGF0aCAkYWNjZXNzUGF0aEdvb2QgfCBTaG91bGQgQmUgJGFjY2Vzc1BhdGhHb29kCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIE1vY2sgYAogICAgICAgICAgICAtQ29tbWFuZE5hbWUgVGVzdC1QYXRoIGAKICAgICAgICAgICAgLU1vZHVsZU5hbWUgU3RvcmFnZUNvbW1vbiBgCiAgICAgICAgICAgIC1Nb2NrV2l0aCB7ICRGYWxzZSB9CgogICAgICAgIENvbnRleHQgJ2RyaXZlIGlzIG5vdCBmb3VuZCcgewogICAgICAgICAgICAkZXJyb3JSZWNvcmQgPSBHZXQtSW52YWxpZEFyZ3VtZW50UmVjb3JkIGAKICAgICAgICAgICAgICAgIC1NZXNzYWdlICQoJExvY2FsaXplZERhdGEuSW52YWxpZEFjY2Vzc1BhdGhFcnJvciAtZiAkYWNjZXNzUGF0aEJhZCkgYAogICAgICAgICAgICAgICAgLUFyZ3VtZW50TmFtZSAnQWNjZXNzUGF0aCcKCiAgICAgICAgICAgIEl0ICdzaG91bGQgdGhyb3cgSW52YWxpZEFjY2Vzc1BhdGhFcnJvcicgewogICAgICAgICAgICAgICAgeyBBc3NlcnQtQWNjZXNzUGF0aFZhbGlkIGAKICAgICAgICAgICAgICAgICAgICAtQWNjZXNzUGF0aCAkYWNjZXNzUGF0aEJhZCB9IHwgU2hvdWxkIFRocm93ICRlcnJvclJlY29yZAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgI2VuZHJlZ2lvbgp9CmZpbmFsbHkKewogICAgI3JlZ2lvbiBGT09URVIKICAgIFJlc3RvcmUtVGVzdEVudmlyb25tZW50IC1UZXN0RW52aXJvbm1lbnQgJFRlc3RFbnZpcm9ubWVudAogICAgI2VuZHJlZ2lvbgoKfQo=
