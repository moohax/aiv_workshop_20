Automation.psm1,5e94cd3336228ab4e8bb5e19df688444,Scan result is 1. IsMalware: 0,ï»¿#requires -Version 3.0 -Modules Microsoft.PowerShell.Utility
$ErrorActionPreference = 'Stop'

#region Get-PackageModuleBase gets the locations for Ionic.Zip.dll, settings.xml and icon from the $PSModulePath and returns $module
function Get-PackageModuleBase
{
    param
    (
        [parameter(Mandatory)]
        [validateset('1.9.1.8','1.10.1.0')]
        [string]
        $Version
    )

    $ModuleBase = (Get-Module -ListAvailable -Refresh Automation) | Where-Object -Property Version -Match $Version

    $module = [pscustomobject]@{
        AssemblyBase = "$($ModuleBase.ModuleBase)\Ionic.Zip.dll"
        Version      = $ModuleBase.Version.ToString()
        XmlBase      = [xml]$(Get-Content -Path "$($ModuleBase.ModuleBase)\settings.xml")
        Icon         = "$($ModuleBase.ModuleBase)\powershell.ico"
    }

    return $module
}
#endregion

#region Set-PackageAssembly loads the Ionic.Zip.dll file and returns as $assembly
function Set-PackageAssembly
{

    $module = Get-PackageModuleBase -Version '1.9.1.8'
    Add-Type -Path $module.AssemblyBase

    $ZipFile = [Ionic.Zip.ZipFile]
    $Options = [Ionic.Zip.SelfExtractorSaveOptions]

    $assembly = [pscustomobject]@{
        ZipFile = $ZipFile
        Options = $Options
    }

    return $assembly
}
#endregion

#region Set-UserDefinedExtractDirectory prompts the user to set a custom extract directory
function Set-UserDefinedExtractDirectory
{
    $ExtractDirectory = Read-Host -Prompt 'Enter the path to extract temporary files'

    if($ExtractDirectory.Contains("'"))
    {
        $ExtractDirectory = $ExtractDirectory.Replace("'",'')
    }

    return $ExtractDirectory
}
#endregion

#region Set-NIPRExtractDirectory automatically sets the DefaultExtractDirectory property to the local CCM/Cache/Temp directory
function Set-NIPRExtractDirectory
{
    $ExtractDirectory = "C:\Windows\SysWow64\CCM\Cache\Temp\$(New-Guid)"
    return $ExtractDirectory
}
#endregion

#region Set-PackageXml sets the automation build package parameters and returns $settings
function Set-PackageXml
{

    $module           = Get-PackageModuleBase -Version '1.9.1.8'
    $Xml              = $module.XmlBase

    $NetworkPath      = $Xml.Configuration.NetworkPath
    $ConfigPath       = $xml.Configuration.ConfigPath
    $TFSPath          = (Resolve-Path -Path "C:\Users\$env:USERNAME\Desktop\C2*\Versions\").Path
    $UserDesktop      = (Resolve-Path -Path "C:\Users\$env:USERNAME\Desktop").Path
    $TextWriter       = [Console]::Out
    $CompressionLevel = 'BestCompression'
    $Iconfile         = $module.Icon
    $ExtractDirectory = "C:\sie\Authorized\Applications\Temp\$(New-Guid)"

    $settings = [pscustomobject]@{
        Xml                         = $Xml
        NetworkPath                 = $NetworkPath
        ConfigPath                  = $ConfigPath
        TFSPath                     = $TFSPath
        UserDesktop                 = $UserDesktop
        StatusMessageTextWriter     = $TextWriter
        CompressionLevel            = $CompressionLevel
        IconFile                    = $Iconfile
        DefaultExtractDirectory     = $ExtractDirectory
    }

    return $settings
}
#endregion

#region Expand-Package allows for a self-extracting archive (SFX) to be expanded/unzipped. For use independently or in conjunction with the New-Package function.
function Expand-Package
{
    <#
            .SYNOPSIS
            Ability to expand a SFX program

            .PARAMETER Path
            Requires the parameter -Name. Provide only the directory where the source files are located (e.g: J:\Projects\PowerShell\Adobe AIR\1.2.3.4)

            .PARAMETER FilePath
            Provide the full path to the SFX program (e.g: J:\Projects\PowerShell\Adobe AIR\1.2.3.4\Adobe AIR 1.2.3.4.exe)

            .PARAMETER Name
            Requires the parameter -Path. Provide only the file name (e.g: Adobe AIR 1.2.3.4.exe)

            .EXAMPLE
            PS C:\Users\jesse> New-Package -Path 'J:\Projects\PowerShell\Adobe AIR\1.2.3.4' -Name 'Adobe AIR 1.2.3.4' -Expand

            Modified               Size     Ratio   Packed    Name
            ------------------------------------------------------------------------
            2016-06-16 11:24:36    10753776    3%   10434276 AdobeAIRInstaller.exe
            extract file J:\Projects\PowerShell\Adobe AIR\1.2.3.4\AdobeAIRInstaller.exe...
            2016-08-24 13:52:34    5181       73%   1397     Adobe AIR 1.2.3.4.ps1
            extract file J:\Projects\PowerShell\Adobe AIR\1.2.3.4\Adobe AIR 1.2.3.4.ps1...
            VERBOSE: Performing the operation "Remove File" on target "J:\Projects\PowerShell\Adobe AIR\1.2.3.4\Adobe AIR 1.2.3.4.exe".

            .EXAMPLE
            PS C:\Users\jesse> Expand-Package -Path 'C:\users\jesse\desktop\Adobe AIR\' -Name 'Adobe AIR 1.2.3.4'

            Modified               Size     Ratio   Packed    Name
            ------------------------------------------------------------------------
            2016-06-16 11:24:36    10753776    3%   10434276 AdobeAIRInstaller.exe
            extract file C:\users\jesse\desktop\Adobe AIR\AdobeAIRInstaller.exe...
            2016-08-24 13:52:34    5181       73%   1397     Adobe AIR 1.2.3.4.ps1
            extract file C:\users\jesse\desktop\Adobe AIR\Adobe AIR 1.2.3.4.ps1...
            VERBOSE: Performing the operation "Remove File" on target "C:\users\jesse\desktop\Adobe AIR\Adobe AIR 1.2.3.4.exe".

            .EXAMPLE
            PS C:\Users\jesse> Expand-Package -FilePath 'C:\users\jesse\desktop\Adobe AIR\Adobe AIR 1.2.3.4.exe'

            Modified               Size     Ratio   Packed    Name
            ------------------------------------------------------------------------
            2016-06-16 11:24:36    10753776    3%   10434276 AdobeAIRInstaller.exe
            extract file C:\users\jesse\desktop\Adobe AIR\AdobeAIRInstaller.exe...
            2016-08-24 13:52:34    5181       73%   1397     Adobe AIR 1.2.3.4.ps1
            extract file C:\users\jesse\desktop\Adobe AIR\Adobe AIR 1.2.3.4.ps1...
            VERBOSE: Performing the operation "Remove File" on target "C:\users\jesse\desktop\Adobe AIR\Adobe AIR 1.2.3.4.exe".

    #>
    [Cmdletbinding(DefaultParameterSetName = 'Path')]
    param(
        [Parameter(Mandatory, ParameterSetName = 'Path')]
        [ValidateScript({Test-Path -Path $_ })]
        [string]
        $Path,

        [Parameter(Mandatory, ParameterSetName = 'FilePath')]
        [ValidateScript({Test-Path -Path $_ })]
        [string]
        $FilePath,

        [Parameter(Mandatory, ParameterSetName = 'Path')]
        [ValidateNotNull()]
        [string]
        $Name
    )

    $module   = Get-PackageModuleBase
    $assembly = Set-PackageAssembly
    $settings = Set-PackageXml

    if($FilePath)
    {
        $FileName = $assembly.ZipFile::Read($FilePath)
        $Path     = Split-Path -Path $FilePath -Parent
        $ZipFile  = (Resolve-Path -Path $FilePath).Path
    }
    elseif($Name)
    {
        $Name     = $Name + '.exe'
        $FileName = $assembly.ZipFile::Read("$Path\$Name")
        $ZipFile  = (Resolve-Path -Path "$Path\$Name").Path
    }

    $FileName.StatusMessageTextWriter = $settings.StatusMessageTextWriter
    $FileName.ExtractAll($Path)
    $FileName.Dispose()
    Remove-Item -Path $ZipFile -Verbose
}
#endregion

#region New-Package is the main function to build the automation self-extracting archive (SFX)
function New-Package
{
    <#
            .SYNOPSIS
            Ability to create or expand a SFX zip program

            .PARAMETER Path
            Provide the path where the source files are located (e.g: J:\Projects\PowerShell\Adobe AIR\1.2.3.4)

            .PARAMETER Name
            Provide the package name

            .PARAMETER Script
            Provide the PowerShell script, if any, to be executed when SFX is unzipped

            .PARAMETER Workspace
            Choose your current working location (e.g: Desktop, Network, None)

            .PARAMETER ExtractType
            If specified, choose from either UserDefined or NIPR which has two different locations of extraction directories

            .PARAMETER Expand
            If specified, the Expand-Package function is called and both Name and Path parameters are passed in

            .PARAMETER EnableDateTimeStamp
            If specified, this will stamp the package with the date and time in hour:minute:second. Helpful to know how many iterations of a package has been created

            .PARAMETER WindowStyle
            Choose the PowerShell default window style (e.g: Normal, Minimized, Maximized. Default is Hidden)

            .EXAMPLE
            PS C:\Users\jesse> New-Package -Path 'J:\Projects\PowerShell\Adobe AIR\5.6.7.8'
            VERBOSE: Workspace set to Network
            VERBOSE: Performing the operation "Copy File" on target "Item: C:\Users\jesse\Desktop\C2\Versions\3.6.24\Adobe AIR
            5.6.7.8.ps1 Destination: J:\Projects\PowerShell\Adobe AIR\5.6.7.8\Adobe AIR 5.6.7.8.ps1".
            adding J:\Projects\PowerShell\Adobe AIR\5.6.7.8...
            adding J:\Projects\PowerShell\Adobe AIR\5.6.7.8\AdobeAIRInstaller.exe...
            adding J:\Projects\PowerShell\Adobe AIR\5.6.7.8\Adobe AIR 5.6.7.8.ps1...
            saving....
            VERBOSE: Performing the operation "Move File" on target "Item: C:\Users\jesse\Adobe AIR 5.6.7.8.exe Destination:
            C:\Users\jesse\Desktop\Adobe AIR 5.6.7.8.exe".
            VERBOSE: Performing the operation "Copy File" on target "Item: C:\Users\jesse\Desktop\Adobe AIR 5.6.7.8.exe
            Destination: J:\Projects\PowerShell\Adobe AIR\5.6.7.8\Adobe AIR 5.6.7.8.exe".
            Zipped Automation: Adobe AIR 5.6.7.8.exe

            .EXAMPLE
            PS C:\Users\jesse> New-Package -Path 'J:\Projects\PowerShell\VideoLAN (VLC Player)\2.2.2' -Name 'VLC Player 2.2.2' -Script 'VLC Player 2.2.2'
            VERBOSE: Workspace set to Network
            VERBOSE: Performing the operation "Copy File" on target "Item: C:\Users\jesse\Desktop\C2\Versions\3.6.24\VLC Player
            2.2.2.ps1 Destination: J:\Projects\PowerShell\VideoLAN (VLC Player)\2.2.2\VLC Player 2.2.2.ps1".
            adding J:\Projects\PowerShell\VideoLAN (VLC Player)\2.2.2...
            adding J:\Projects\PowerShell\VideoLAN (VLC Player)\2.2.2\vlc-2.2.1-win32.exe...
            adding J:\Projects\PowerShell\VideoLAN (VLC Player)\2.2.2\vlc-2.2.1-win32.msi...
            adding J:\Projects\PowerShell\VideoLAN (VLC Player)\2.2.2\vlc-2.2.1-win64.exe...
            adding J:\Projects\PowerShell\VideoLAN (VLC Player)\2.2.2\vlc-2.2.1-win64.msi...
            adding J:\Projects\PowerShell\VideoLAN (VLC Player)\2.2.2\VLC Player 2.2.2.ps1...
            saving....
            VERBOSE: Performing the operation "Move File" on target "Item: C:\Users\jesse\VLC Player 2.2.2.exe Destination:
            C:\Users\jesse\Desktop\VLC Player 2.2.2.exe".
            VERBOSE: Performing the operation "Copy File" on target "Item: C:\Users\jesse\Desktop\VLC Player 2.2.2.exe Destination:
            J:\Projects\PowerShell\VideoLAN (VLC Player)\2.2.2\VLC Player 2.2.2.exe".
            Zipped Automation: VLC Player 2.2.2.exe

            .EXAMPLE
            PS C:\Users\jesse> New-Package -Path 'C:\users\jesse\desktop\Branding\1.2.3.4\' -Workspace Desktop
            VERBOSE: Workspace set to Desktop
            Provide a filename: Branding 1.2.3.4
            Provide a script name: Branding 1.2.3.4
            adding C:\users\jesse\desktop\Branding\1.2.3.4\...
            adding C:\users\jesse\desktop\Branding\1.2.3.4\Branding 1.2.3.4.ps1...
            adding C:\users\jesse\desktop\Branding\1.2.3.4\Programs.xml...
            adding C:\users\jesse\desktop\Branding\1.2.3.4\UnclassPrograms.xml...
            saving....
            VERBOSE: Performing the operation "Move File" on target "Item: C:\Users\jesse\Branding 1.2.3.4.exe Destination:
            C:\Users\jesse\Desktop\Branding 1.2.3.4.exe".
            VERBOSE: Performing the operation "Copy File" on target "Item: C:\Users\jesse\Desktop\Branding 1.2.3.4.exe Destination:
            C:\users\jesse\desktop\Branding\1.2.3.4\Branding 1.2.3.4.exe".
            Zipped Automation: Branding 1.2.3.4.exe

            .EXAMPLE
            PS C:\Users\jesse> New-Package -Path 'C:\users\jesse\desktop\Just-A-Zip\' -Name 'Just A Zip' -Workspace None
            VERBOSE: Workspace set to None
            WARNING: Script set to null
            adding C:\users\jesse\desktop\Just-A-Zip\...
            adding C:\users\jesse\desktop\Just-A-Zip\Beginning C- Object-Oriented Programming, 2nd Edition.pdf...
            adding C:\users\jesse\desktop\Just-A-Zip\Functional Programming in C-.pdf...
            adding C:\users\jesse\desktop\Just-A-Zip\Microsoft System Center PowerShell Essentials.pdf...
            adding C:\users\jesse\desktop\Just-A-Zip\The C# Player's Guide - RB Whitaker.pdf...
            adding C:\users\jesse\desktop\Just-A-Zip\Windows PowerShell Best Practices.pdf...
            saving....
            VERBOSE: Performing the operation "Move File" on target "Item: C:\Users\jesse\Just-A-Zip.exe Destination:
            C:\Users\jesse\Desktop\Just-A-Zip.exe".
            VERBOSE: Performing the operation "Copy File" on target "Item: C:\Users\jesse\Desktop\Just-A-Zip.exe Destination:
            C:\users\jesse\desktop\Just-A-Zip\Just-A-Zip.exe".
            Zipped Automation: Just-A-Zip.exe

            .EXAMPLE
            PS C:\Users\jesse> New-Package -Path 'J:\Projects\PowerShell\Adobe AIR\23.0.0.258' -EnableDateTimeStamp
            VERBOSE: Workspace set to Network
            VERBOSE: Performing the operation "Copy File" on target "Item: C:\Users\jesse\Desktop\C2\Versions\3.6.25\Adobe AIR
            23.0.0.258.ps1 Destination: J:\Projects\PowerShell\Adobe AIR\23.0.0.258\Adobe AIR 23.0.0.258.ps1".
            VERBOSE: Enabling DateTime Stamp
            adding J:\Projects\PowerShell\Adobe AIR\23.0.0.258...
            adding J:\Projects\PowerShell\Adobe AIR\23.0.0.258\AdobeAIRInstaller.exe...
            adding J:\Projects\PowerShell\Adobe AIR\23.0.0.258\Adobe AIR 23.0.0.258.ps1...
            saving....
            VERBOSE: Performing the operation "Move File" on target "Item: C:\Users\jesse\Adobe AIR 23.0.0.258-20160926-112037.exe
            Destination: C:\Users\jesse\Desktop\Adobe AIR 23.0.0.258-20160926-112037.exe".
            VERBOSE: Performing the operation "Remove File" on target "J:\Projects\PowerShell\Adobe
            AIR\23.0.0.258\AdobeAIRInstaller.exe".
            VERBOSE: Performing the operation "Remove File" on target "J:\Projects\PowerShell\Adobe AIR\23.0.0.258\Adobe AIR
            23.0.0.258.ps1".
            VERBOSE: Performing the operation "Copy File" on target "Item: C:\Users\jesse\Desktop\Adobe AIR
            23.0.0.258-20160926-112037.exe Destination: J:\Projects\PowerShell\Adobe AIR\23.0.0.258\Adobe AIR
            23.0.0.258-20160926-112037.exe".
            Zipped Automation: Adobe AIR 23.0.0.258-20160926-112037.exe

            .EXAMPLE
            PS C:\Users\jesse> New-Package -Path 'C:\Users\jesse\Desktop\PEX' -Workspace None -ExtractType NIPR
            VERBOSE: Workspace set to None
            WARNING: Script set to null
            VERBOSE: Updating the DefaultExtractDirectory to the local CCM\Cache directory
            adding C:\Users\jesse\Desktop\PEX...
            adding C:\Users\jesse\Desktop\PEX\Pex_File_1.txt...
            saving....
            VERBOSE: Performing the operation "Move File" on target "Item: C:\Users\jesse\PEX.exe Destination:
            C:\Users\jesse\Desktop\PEX.exe".
            VERBOSE: Performing the operation "Remove File" on target "C:\Users\jesse\Desktop\PEX\Pex_File_1.txt".
            VERBOSE: Performing the operation "Copy File" on target "Item: C:\Users\jesse\Desktop\PEX.exe Destination:
            C:\Users\jesse\Desktop\PEX\PEX.exe".
            Zipped Automation: PEX.exe
    #>
    [cmdletbinding()]
    param(
        [Parameter(Mandatory)]
        [ValidateScript({Test-Path -Path $_ })]
        [string]
        $Path,

        [string]
        $Name,

        [string]
        $Script,

        [ValidateSet('Desktop','Network','None')]
        [string]
        $Workspace = 'Network',

        [ValidateSet('NIPR','UserDefined')]
        [string]
        $ExtractType,

        [switch]
        $Expand,

        [switch]
        $EnableDateTimeStamp,

        [ValidateSet('Normal','Hidden','Minimized','Maximized')]
        [string]
        $WindowStyle = 'Hidden'
    )

    $Path     = (Resolve-Path -Path $Path).Path
    $module   = Get-PackageModuleBase -Version '1.9.1.8' # Sets paths for Ionic.Zip.dll/settings.xml
    $assembly = Set-PackageAssembly # Loads paths for Ionic.Zip.dll
    $settings = Set-PackageXml # Sets the default settings for the self-extracting archive (SFX) package
    $Location = (Get-Location).Path

    Write-Host "Using Automation module version: $($module.Version)" -ForegroundColor Cyan

    if($Expand.IsPresent)
    {
        $cache = [pscustomobject]@{
            Name = $Name
            Path = $Path
        }

        $Name = $cache.Name
        $Path = $cache.Path
        Expand-Package -Name $Name -Path $Path

        return
    }
    
    switch($Workspace)
    {
        'Desktop'
        {
            Write-Verbose -Message "Workspace set to $Workspace" -Verbose

            $Name = Read-Host 'Provide a filename'
            if($Name)
            {
                $Name = $Name + '.exe'
            }
            elseif($Name -eq $null)
            {
                $Name = $null
            }

            $Script = Read-Host 'Provide a script name'
            if($Script)
            {
                $Script = $Script + '.ps1'
            }
            elseif($Script -eq $null)
            {
                $Script = $null
            }
        }
        'Network'
        {
            Write-Verbose -Message "Workspace set to $Workspace" -Verbose
            if($Name)
            {
                $Name = $Name + '.exe'
            }
            else
            {
                $ParentPath = ($Path | Split-Path -Parent)
                $ParentPath = ($ParentPath | Split-Path -Leaf)
                $LeafPath = ($Path | Split-Path -Leaf)
                $Name = "$ParentPath $LeafPath.exe"
            }

            if($Script)
            {
                $Script = $Script + '.ps1'
            }
            else
            {
                $Script = "$ParentPath $LeafPath.ps1"
            }

            # Set-Location -Path $settings.TFSPath required to search for the $Script. Expected action: Should only Get-ChildItem from the $TFSPath\*
            Set-Location -Path $settings.TFSPath
            
            $file = Get-ChildItem -Path $TFSPath -Recurse -File -Filter $Script
            Set-Location -Path $Location
            
            if($file)
            {
                $file.FullName | Copy-Item -Destination $Path -Force -Verbose
                $NetworkPath = $settings.NetworkPath
                $ConfigPath = $settings.ConfigPath

                foreach($Program in $settings.Xml.Configuration.Program.Name)
                {
                    if($Path -match $Program)
                    {
                        Copy-Item -Path "$NetworkPath$Program$ConfigPath" -Destination $Path -Force -Verbose
                    }
                }
            }
            elseif($file -eq $null)
            {
                Write-Error -Message "Failed to copy file. No valid script was found for $Script in $($settings.TFSPath)"
            }
        }
        'None'
        {
            Write-Verbose -Message "Workspace set to $Workspace" -Verbose
            $Name = ($Path | Split-Path -Leaf) + '.exe'
            $Script = $null
            Write-Warning -Message 'Script set to null'
        }
    }

    # New construct from function Set-PackageAssembly
    $ZipFile = $assembly.ZipFile::new()
    $Options = $assembly.Options::new()

    if($EnableDateTimeStamp.IsPresent)
    {
        Write-Verbose -Message 'Enabling DateTime Stamp' -Verbose
        $Name = $Name.Replace('.exe',"")
        $Name = "$Name-$(Get-Date -Format 'yyyyMMdd')-$(Get-Date -Format 'hhmmss').exe"
    }

    if($WindowStyle -ne 'Hidden')
    {
        Write-Verbose -Message 'Added -NoExit parameter to the PostExtractCommandLine property' -Verbose
        $PostExtractCommandLine = "powershell.exe -NoExit -WindowStyle $WindowStyle -file `"$Script`""
    }
    else
    {
        $PostExtractCommandLine = "powershell.exe -WindowStyle $WindowStyle -file `"$Script`""
    }

    switch($ExtractType)
    {
        'UserDefined'
        { 
            $DefaultExtractDirectory = Set-UserDefinedExtractDirectory
        }
        'NIPR'
        {
            $DefaultExtractDirectory = Set-NIPRExtractDirectory
        }
        Default
        {
            $DefaultExtractDirectory = $Options.DefaultExtractDirectory = $settings.DefaultExtractDirectory
        }
    }

    $ZipFile.StatusMessageTextWriter = $settings.StatusMessageTextWriter
    $ZipFile.CompressionLevel = $settings.CompressionLevel
    $ZipFile.AddDirectory($Path)
    $Options.ProductName = $Name
    $Options.IconFile = $settings.IconFile
    $Options.DefaultExtractDirectory = $DefaultExtractDirectory
    $Options.ExtractExistingFile = $ZipFile.ExtractExistingFile = 'OverwriteSilently'
    $Options.PostExtractCommandLine = $PostExtractCommandLine
    $Options.RemoveUnpackedFilesAfterExecute = $true
    $Options.Quiet = $true
    $ZipFile.SaveSelfExtractor($Name,$Options)
    $ZipFile.Dispose()

    $PkgPath = "$HOME\$Name","$((Get-Location).Path)\$Name"
    
    foreach($pkg in $PkgPath)
    {
        if(Test-Path -Path $pkg -ErrorAction SilentlyContinue)
        {
            Move-Item -Path $pkg -Destination $settings.UserDesktop -Verbose -ErrorAction SilentlyContinue
        }
    }

    Remove-Item -Path "$Path\*" -Recurse -Verbose -ErrorAction Continue
    Copy-Item -Path "$($settings.UserDesktop)\$Name" -Destination $Path -Verbose
    Write-Host "Zipped Automation: $($ZipFile.Name)" -BackgroundColor Black -ForegroundColor Green
}
#endregion
