Clean-CMSoftwareUpdateGroups.ps1,4aa99bb2f8376eddf5ca819513e45b11,Scan result is 1. IsMalware: 0,w6/Cu8K/PCMKLlNZTk9QU0lTCiAgICBQZXJmb3JtIGEgY2xlYW4gdXAgb2YgZXhwaXJlZCBhbmQvb3Igc3VwZXJzZGVkIFNvZnR3YXJlIFVwZGF0ZXMgaW4gYWxsIFNvZnR3YXJlIFVwZGF0ZSBHcm91cHMKLkRFU0NSSVBUSU9OCiAgICBVc2UgdGhpcyBzY3JpcHQgaWYgeW91IG5lZWQgdG8gcGVyZm9ybSBhIGNsZWFuIHVwIG9mIGV4cGlyZWQgYW5kL29yIHN1cGVyc2VkZWQgU29mdHdhcmUgVXBkYXRlcyBmcm9tIGFsbCBTb2Z0d2FyZSBVcGdyYWRlIEdyb3VwcyBpbiBDb25maWdNZ3IKLlBBUkFNRVRFUiBTaXRlU2VydmVyCiAgICBTaXRlIHNlcnZlciBuYW1lIHdpdGggU01TIFByb3ZpZGVyIGluc3RhbGxlZAouUEFSQU1FVEVSIE9wdGlvbgogICAgU2VsZWN0IGFuIG9wdGlvbiB0byBjbGVhbiBlaXRoZXIgRXhwaXJlZE9ubHksIFN1cGVyc2VkZWRPbmx5IG9yIEV4cGlyZWRTdXBlcnNlZGVkIFNvZnR3YXJlIFVwZGF0ZXMgZnJvbSBlYWNoIFNvZnR3YXJlIFVwZGF0ZSBHcm91cAouUEFSQU1FVEVSIFJlbW92ZUNvbnRlbnQKICAgIFJlbW92ZSB0aGUgY29udGVudCBmb3IgdGhvc2UgU29mdHdhcmUgVXBkYXRlcyB0aGF0IHdpbGwgYmUgcmVtb3ZlZCBmcm9tIGEgU29mdHdhcmUgVXBncmFkZSBHcm91cAouUEFSQU1FVEVSIFNob3dQcm9ncmVzcwogICAgU2hvdyBhIHByb2dyZXNzYmFyIGRpc3BsYXlpbmcgdGhlIGN1cnJlbnQgb3BlcmF0aW9uCi5FWEFNUExFCiAgICBDbGVhbiBTb2Z0d2FyZSBVcGRhdGUgR3JvdXBzIGZyb20gZXhwaXJlZCBTb2Z0d2FyZSBVcGRhdGVzLCB3aGlsZSBzaG93aW5nIHRoZSBjdXJyZW50IHByb2dyZXNzIGFuZCByZW1vdmluZyBkb3dubG9hZGVkIGNvbnRlbnQsIG9uIGEgUHJpbWFyeSBTaXRlIHNlcnZlciBjYWxsZWQgJ0NNMDEnOgogICAgLlxDbGVhbi1DTVNvZnR3YXJlVXBkYXRlR3JvdXBzLnBzMSAtU2l0ZVNlcnZlciBDTTAxIC1PcHRpb24gRXhwaXJlZE9ubHkgLVJlbW92ZUNvbnRlbnQgLVNob3dQcm9ncmVzcwoKICAgIENsZWFuIFNvZnR3YXJlIFVwZGF0ZSBHcm91cHMgZnJvbSBzdXBlcnNlZGVkIFNvZnR3YXJlIFVwZGF0ZXMsIHdoaWxlIHNob3dpbmcgdGhlIGN1cnJlbnQgcHJvZ3Jlc3MsIG9uIGEgUHJpbWFyeSBTaXRlIHNlcnZlciBjYWxsZWQgJ0NNMDEnOgogICAgLlxDbGVhbi1DTVNvZnR3YXJlVXBkYXRlR3JvdXBzLnBzMSAtU2l0ZVNlcnZlciBDTTAxIC1PcHRpb24gU3VwZXJzZWRlZE9ubHkgLVNob3dQcm9ncmVzcwoKICAgIENsZWFuIFNvZnR3YXJlIFVwZGF0ZSBHcm91cHMgZnJvbSBleHBpcmVkIGFuZCBzdXBlcnNkZWQgU29mdHdhcmUgVXBkYXRlcyB3aXRoIHZlcmJvc2Ugb3V0cHV0LCBvbiBhIFByaW1hcnkgU2l0ZSBzZXJ2ZXIgY2FsbGVkICdDTTAxJzoKICAgIC5cQ2xlYW4tQ01Tb2Z0d2FyZVVwZGF0ZUdyb3Vwcy5wczEgLVNpdGVTZXJ2ZXIgQ00wMSAtT3B0aW9uIEV4cGlyZWRTdXBlcnNlZGVkIC1WZXJib3NlCiAgICAKLk5PVEVTCiAgICBOYW1lOiAgICAgICAgQ2xlYW4tQ01Tb2Z0d2FyZVVwZGF0ZUdyb3Vwcy5wczEKICAgIEF1dGhvcjogICAgICBOaWNrb2xhaiBBbmRlcnNlbgogICAgQ29udGFjdDogICAgIEBOaWNrb2xhakEKICAgIENyZWF0ZWQ6ICAgICAyMDE1LTEyLTE3CiAgICBWZXJzaW9uOiAgICAgMi4xCiM+CltDbWRsZXRCaW5kaW5nKFN1cHBvcnRzU2hvdWxkUHJvY2Vzcz0kdHJ1ZSldCnBhcmFtKAogICAgW3BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUsIEhlbHBNZXNzYWdlPSJTaXRlIHNlcnZlciB3aGVyZSB0aGUgU01TIFByb3ZpZGVyIGlzIGluc3RhbGxlZCIpXQogICAgW1ZhbGlkYXRlU2NyaXB0KHtUZXN0LUNvbm5lY3Rpb24gLUNvbXB1dGVyTmFtZSAkXyAtQ291bnQgMSAtUXVpZXR9KV0KICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICBbc3RyaW5nXSRTaXRlU2VydmVyLAoKICAgIFtwYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlLCBIZWxwTWVzc2FnZT0iU2VsZWN0IGFuIG9wdGlvbiB0byBjbGVhbiBlaXRoZXIgRXhwaXJlZE9ubHksIFN1cGVyc2VkZWRPbmx5IG9yIEV4cGlyZWRTdXBlcnNlZGVkIFNvZnR3YXJlIFVwZGF0ZXMgZnJvbSBlYWNoIFNvZnR3YXJlIFVwZGF0ZSBHcm91cCIpXQogICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgIFtWYWxpZGF0ZVNldCgiRXhwaXJlZE9ubHkiLCJTdXBlcnNlZGVkT25seSIsIkV4cGlyZWRTdXBlcnNlZGVkIildCiAgICBbc3RyaW5nXSRPcHRpb24sCgogICAgW3BhcmFtZXRlcihNYW5kYXRvcnk9JGZhbHNlLCBIZWxwTWVzc2FnZT0iUmVtb3ZlIHRoZSBjb250ZW50IGZvciB0aG9zZSBTb2Z0d2FyZSBVcGRhdGVzIHRoYXQgd2lsbCBiZSByZW1vdmVkIGZyb20gYSBTb2Z0d2FyZSBVcGdyYWRlIEdyb3VwIildCiAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgW3N3aXRjaF0kUmVtb3ZlQ29udGVudCwKCiAgICBbcGFyYW1ldGVyKE1hbmRhdG9yeT0kZmFsc2UsIEhlbHBNZXNzYWdlPSJTaG93IGEgcHJvZ3Jlc3NiYXIgZGlzcGxheWluZyB0aGUgY3VycmVudCBvcGVyYXRpb24iKV0KICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICBbc3dpdGNoXSRTaG93UHJvZ3Jlc3MKKQpCZWdpbiB7CiAgICAjIERldGVybWluZSBTaXRlQ29kZSBmcm9tIFdNSQogICAgdHJ5IHsKICAgICAgICBXcml0ZS1WZXJib3NlICJEZXRlcm1pbmluZyBTaXRlIENvZGUgZm9yIFNpdGUgc2VydmVyOiAnJCgkU2l0ZVNlcnZlciknIgogICAgICAgICRTaXRlQ29kZU9iamVjdHMgPSBHZXQtV21pT2JqZWN0IC1OYW1lc3BhY2UgInJvb3RcU01TIiAtQ2xhc3MgU01TX1Byb3ZpZGVyTG9jYXRpb24gLUNvbXB1dGVyTmFtZSAkU2l0ZVNlcnZlciAtRXJyb3JBY3Rpb24gU3RvcAogICAgICAgIGZvcmVhY2ggKCRTaXRlQ29kZU9iamVjdCBpbiAkU2l0ZUNvZGVPYmplY3RzKSB7CiAgICAgICAgICAgIGlmICgkU2l0ZUNvZGVPYmplY3QuUHJvdmlkZXJGb3JMb2NhbFNpdGUgLWVxICR0cnVlKSB7CiAgICAgICAgICAgICAgICAkU2l0ZUNvZGUgPSAkU2l0ZUNvZGVPYmplY3QuU2l0ZUNvZGUKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIlNpdGUgQ29kZTogJCgkU2l0ZUNvZGUpIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgY2F0Y2ggW1N5c3RlbS5VbmF1dGhvcml6ZWRBY2Nlc3NFeGNlcHRpb25dIHsKICAgICAgICBXcml0ZS1XYXJuaW5nIC1NZXNzYWdlICJBY2Nlc3MgZGVuaWVkIiA7IGJyZWFrCiAgICB9CiAgICBjYXRjaCBbU3lzdGVtLkV4Y2VwdGlvbl0gewogICAgICAgIFdyaXRlLVdhcm5pbmcgLU1lc3NhZ2UgIlVuYWJsZSB0byBkZXRlcm1pbmUgU2l0ZSBDb2RlIiA7IGJyZWFrCiAgICB9CiAgICAjIFRlbXBvcmFyaWx5IHNldCBFcnJvckFjdGlvblByZWZlcmVuY2UKICAgICRFcnJvckFjdGlvblByZWZlcmVuY2UgPSAiU3RvcCIKICAgICMgU2V0IFByb2dyZXNzQ291bnQKICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbIlNob3dQcm9ncmVzcyJdKSB7CiAgICAgICAgJFByb2dyZXNzQ291bnQgPSAwCiAgICB9Cn0KUHJvY2VzcyB7CiAgICB0cnkgewogICAgICAgICRTdGFydFRpbWUgPSBbRGlhZ25vc3RpY3MuU3RvcHdhdGNoXTo6U3RhcnROZXcoKQogICAgICAgICRTVUdSZXN1bHRzID0gKEdldC1XbWlPYmplY3QgLU5hbWVzcGFjZSAicm9vdFxTTVNcc2l0ZV8kKCRTaXRlQ29kZSkiIC1DbGFzcyBTTVNfQXV0aG9yaXphdGlvbkxpc3QgLUNvbXB1dGVyTmFtZSAkU2l0ZVNlcnZlciAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IE1lYXN1cmUtT2JqZWN0KS5Db3VudAogICAgICAgIGlmICgkU1VHUmVzdWx0cyAtZ2UgMSkgewogICAgICAgICAgICAjIEdldCBsaXN0IG9mIHJlbW92YWJsZSBTb2Z0d2FyZSBVcGRhdGVzCiAgICAgICAgICAgIHN3aXRjaCAoJE9wdGlvbikgewogICAgICAgICAgICAgICAgIkV4cGlyZWRPbmx5IiB7CiAgICAgICAgICAgICAgICAgICAgJFF1ZXJ5ID0gIlNFTEVDVCBTVS5DSV9JRCBGUk9NIFNNU19Tb2Z0d2FyZVVwZGF0ZSBBUyBTVSBKT0lOIFNNU19DSVJlbGF0aW9uIEFTIENJUiBPTiBTVS5DSV9JRCA9IENJUi5Ub0NJSUQgV0hFUkUgQ0lSLlJlbGF0aW9uVHlwZSA9IDEgQU5EIFNVLklzRXhwaXJlZCA9IDEgQU5EIFNVLklzU3VwZXJzZWRlZCA9IDAiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAiU3VwZXJzZWRlZE9ubHkiIHsKICAgICAgICAgICAgICAgICAgICAkUXVlcnkgPSAiU0VMRUNUIFNVLkNJX0lEIEZST00gU01TX1NvZnR3YXJlVXBkYXRlIEFTIFNVIEpPSU4gU01TX0NJUmVsYXRpb24gQVMgQ0lSIE9OIFNVLkNJX0lEID0gQ0lSLlRvQ0lJRCBXSEVSRSBDSVIuUmVsYXRpb25UeXBlID0gMSBBTkQgU1UuSXNFeHBpcmVkID0gMCBBTkQgU1UuSXNTdXBlcnNlZGVkID0gMSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICJFeHBpcmVkU3VwZXJzZWRlZCIgewogICAgICAgICAgICAgICAgICAgICRRdWVyeSA9ICJTRUxFQ1QgU1UuQ0lfSUQgRlJPTSBTTVNfU29mdHdhcmVVcGRhdGUgQVMgU1UgSk9JTiBTTVNfQ0lSZWxhdGlvbiBBUyBDSVIgT04gU1UuQ0lfSUQgPSBDSVIuVG9DSUlEIFdIRVJFIENJUi5SZWxhdGlvblR5cGUgPSAxIEFORCAoU1UuSXNFeHBpcmVkID0gMSBPUiBTVS5Jc1N1cGVyc2VkZWQgPSAxKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJFJlbW92YWJsZVVwZGF0ZXMgPSBHZXQtV21pT2JqZWN0IC1OYW1lc3BhY2UgInJvb3RcU01TXHNpdGVfJCgkU2l0ZUNvZGUpIiAtUXVlcnkgJFF1ZXJ5IC1Db21wdXRlck5hbWUgJFNpdGVTZXJ2ZXIgLUVycm9yQWN0aW9uIFN0b3AKICAgICAgICAgICAgICAgICRSZW1vdmFibGVVcGRhdGVzTGlzdCA9IE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3RlbS5Db2xsZWN0aW9ucy5BcnJheUxpc3QKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRSZW1vdmFibGVVcGRhdGUgaW4gJFJlbW92YWJsZVVwZGF0ZXMpIHsKICAgICAgICAgICAgICAgICAgICAkUmVtb3ZhYmxlVXBkYXRlc0xpc3QuQWRkKCRSZW1vdmFibGVVcGRhdGUuQ0lfSUQpIHwgT3V0LU51bGwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCBbU3lzdGVtLkV4Y2VwdGlvbl0gewogICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAtTWVzc2FnZSAiVW5hYmxlIHRvIGRldGVybWluZSByZW1vdmFibGUgU29mdHdhcmUgVXBkYXRlcyBmcm9tIHNlbGVjdGVkIG9wdGlvbiIKICAgICAgICAgICAgfQogICAgICAgICAgICAjIEVudW1lcmF0ZSBlYWNoIFNvZnR3YXJlIFVwZGF0ZSBHcm91cAogICAgICAgICAgICAkQXV0aG9yaXphdGlvbkxpc3RzID0gR2V0LVdtaU9iamVjdCAtTmFtZXNwYWNlICJyb290XFNNU1xzaXRlXyQoJFNpdGVDb2RlKSIgLUNsYXNzIFNNU19BdXRob3JpemF0aW9uTGlzdCAtQ29tcHV0ZXJOYW1lICRTaXRlU2VydmVyIC1FcnJvckFjdGlvbiBTdG9wCiAgICAgICAgICAgIGZvcmVhY2ggKCRBdXRob3JpemF0aW9uTGlzdCBpbiAkQXV0aG9yaXphdGlvbkxpc3RzKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICJTdGFydCBwcm9jZXNzaW5nICckKCRBdXRob3JpemF0aW9uTGlzdC5Mb2NhbGl6ZWREaXNwbGF5TmFtZSknIgogICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1siU2hvd1Byb2dyZXNzIl0pIHsKICAgICAgICAgICAgICAgICAgICAkUHJvZ3Jlc3NDb3VudCsrCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBXcml0ZS1Qcm9ncmVzcyAtQWN0aXZpdHkgIlByb2Nlc3NpbmcgU29mdHdhcmUgVXBkYXRlcyBHcm91cHMiIC1JZCAxIC1TdGF0dXMgIiQoJFByb2dyZXNzQ291bnQpIC8gJCgkU1VHUmVzdWx0cykiIC1DdXJyZW50T3BlcmF0aW9uICJDdXJyZW50IFNvZnR3YXJlIFVwZGF0ZSBHcm91cDogJyQoJEF1dGhvcml6YXRpb25MaXN0LkxvY2FsaXplZERpc3BsYXlOYW1lKSciIC1QZXJjZW50Q29tcGxldGUgKCgkUHJvZ3Jlc3NDb3VudCAvICRTVUdSZXN1bHRzKSAqIDEwMCkKICAgICAgICAgICAgICAgICRBdXRob3JpemF0aW9uTGlzdCA9IFt3bWldIiQoJEF1dGhvcml6YXRpb25MaXN0Ll9fUEFUSCkiCiAgICAgICAgICAgICAgICAkVXBkYXRlc0NvdW50ID0gJEF1dGhvcml6YXRpb25MaXN0LlVwZGF0ZXMuQ291bnQKICAgICAgICAgICAgICAgICRVcGRhdGVzTGlzdCA9IE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3RlbS5Db2xsZWN0aW9ucy5BcnJheUxpc3QKICAgICAgICAgICAgICAgICRSZW1vdmVkVXBkYXRlc0xpc3QgPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBTeXN0ZW0uQ29sbGVjdGlvbnMuQXJyYXlMaXN0CiAgICAgICAgICAgICAgICAjIEVudW1lcmF0ZSBlYWNoIFNvZnR3YXJlIFVwZGF0ZSBpbiBjdXJyZW50IFNvZnR3YXJlIFVwZGF0ZSBHcm91cCBpZiBlbGlnaWJsZSBmb3IgcmVtb3ZhbAogICAgICAgICAgICAgICAgZm9yZWFjaCAoJFVwZGF0ZSBpbiAoJEF1dGhvcml6YXRpb25MaXN0LlVwZGF0ZXMpKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRVcGRhdGUgLW5vdGluICRSZW1vdmFibGVVcGRhdGVzTGlzdCkgewogICAgICAgICAgICAgICAgICAgICAgICAkVXBkYXRlc0xpc3QuQWRkKCRVcGRhdGUpIHwgT3V0LU51bGwKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRSZW1vdmVkVXBkYXRlc0xpc3QuQWRkKCRVcGRhdGUpIHwgT3V0LU51bGwKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAjIFVwZGF0ZSBTb2Z0d2FyZSBVcGRhdGUgR3JvdXAgdXBkYXRlcyBpZiBjb3VudCBvZiBvYmplY3RzIGluIFVwZGF0ZXNMaXN0IGlzIGxlc3MgdGhhbiBiZWZvcmUKICAgICAgICAgICAgICAgIGlmICgkVXBkYXRlc0NvdW50IC1ndCAkVXBkYXRlc0xpc3QuQ291bnQpIHsKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQ21kbGV0LlNob3VsZFByb2Nlc3MoIiQoJEF1dGhvcml6YXRpb25MaXN0LkxvY2FsaXplZERpc3BsYXlOYW1lKSIsIkNsZWFuICckKCRVcGRhdGVzQ291bnQgLSAoJFVwZGF0ZXNMaXN0LkNvdW50KSknIHVwZGF0ZXMiKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRVcGRhdGVzTGlzdC5Db3VudCAtZ2UgMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRBdXRob3JpemF0aW9uTGlzdC5VcGRhdGVzID0gJFVwZGF0ZXNMaXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEF1dGhvcml6YXRpb25MaXN0LlB1dCgpIHwgT3V0LU51bGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICJTdWNjZXNzZnVsbHkgY2xlYW5lZCB1cCAkKCRVcGRhdGVzQ291bnQgLSAoJFVwZGF0ZXNMaXN0LkNvdW50KSkgdXBkYXRlcyBmcm9tICckKCRBdXRob3JpemF0aW9uTGlzdC5Mb2NhbGl6ZWREaXNwbGF5TmFtZSknIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEF1dGhvcml6YXRpb25MaXN0LlVwZGF0ZXMgPSBAKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQXV0aG9yaXphdGlvbkxpc3QuUHV0KCkgfCBPdXQtTnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIlN1Y2Nlc3NmdWxseSBjbGVhbmVkIHVwIGFsbCB1cGRhdGVzIGZyb20gJyQoJEF1dGhvcml6YXRpb25MaXN0LkxvY2FsaXplZERpc3BsYXlOYW1lKSciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIyBSZW1vdmUgY29udGVudCBmb3IgZWFjaCBDSV9JRCBpbiB0aGUgUmVtb3ZlZFVwZGF0ZXNMaXN0IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbIlJlbW92ZUNvbnRlbnQiXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRGVwbG95bWVudFBhY2thZ2VMaXN0ID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLkNvbGxlY3Rpb25zLkFycmF5TGlzdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRDSV9JRCBpbiAkUmVtb3ZlZFVwZGF0ZXNMaXN0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIkNvbGxlY3RpbmcgY29udGVudCBkYXRhIGZvciBDSV9JRDogJCgkQ0lfSUQpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQ29udGVudFF1ZXJ5ID0gIlNFTEVDVCBTTVNfUGFja2FnZVRvQ29udGVudC5Db250ZW50SUQsU01TX1BhY2thZ2VUb0NvbnRlbnQuUGFja2FnZUlEIGZyb20gU01TX1BhY2thZ2VUb0NvbnRlbnQgSk9JTiBTTVNfQ0lUb0NvbnRlbnQgT04gU01TX0NJVG9Db250ZW50LkNvbnRlbnRJRCA9IFNNU19QYWNrYWdlVG9Db250ZW50LkNvbnRlbnRJRCBXSEVSRSBTTVNfQ0lUb0NvbnRlbnQuQ0lfSUQgSU4gKCQoJENJX0lEKSkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRDb250ZW50RGF0YSA9IEdldC1XbWlPYmplY3QgLU5hbWVzcGFjZSAicm9vdFxTTVNcc2l0ZV8kKCRTaXRlQ29kZSkiIC1RdWVyeSAkQ29udGVudFF1ZXJ5IC1Db21wdXRlck5hbWUgJFNpdGVTZXJ2ZXIgLUVycm9yQWN0aW9uIFN0b3AKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAiRm91bmQgJyQoKCRDb250ZW50RGF0YSB8IE1lYXN1cmUtT2JqZWN0KS5Db3VudCknIG9iamVjdHMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRDb250ZW50IGluICRDb250ZW50RGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJENvbnRlbnRJRCA9ICRDb250ZW50IHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgQ29udGVudElECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUGFja2FnZUlEID0gJENvbnRlbnQgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBQYWNrYWdlSUQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICREZXBsb3ltZW50UGFja2FnZSA9IFt3bWldIlxcJCgkU2l0ZVNlcnZlcilccm9vdFxTTVNcc2l0ZV8kKCRTaXRlQ29kZSk6U01TX1NvZnR3YXJlVXBkYXRlc1BhY2thZ2UuUGFja2FnZUlEPSckKCRQYWNrYWdlSUQpJyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkRGVwbG95bWVudFBhY2thZ2UuUGFja2FnZUlEIC1ub3RpbiAkRGVwbG95bWVudFBhY2thZ2VMaXN0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJERlcGxveW1lbnRQYWNrYWdlTGlzdC5BZGQoJERlcGxveW1lbnRQYWNrYWdlLlBhY2thZ2VJRCkgfCBPdXQtTnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRQU0NtZGxldC5TaG91bGRQcm9jZXNzKCIkKCRQYWNrYWdlSUQpIiwiUmVtb3ZlIENvbnRlbnRJRCAnJCgkQ29udGVudElEKSciKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIkF0dGVtcHRpbmcgdG8gcmVtb3ZlIENvbnRlbnRJRCAnJCgkQ29udGVudElEKScgZnJvbSBQYWNrYWdlSUQgJyQoJFBhY2thZ2VJRCknIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRSZXR1cm5WYWx1ZSA9ICREZXBsb3ltZW50UGFja2FnZS5SZW1vdmVDb250ZW50KCRDb250ZW50SUQsICRmYWxzZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFJldHVyblZhbHVlLlJldHVyblZhbHVlIC1lcSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIlN1Y2Nlc3NmdWxseSByZW1vdmVkIENvbnRlbnRJRCAnJCgkQ29udGVudElEKScgZnJvbSBQYWNrYWdlSUQgJyQoJFBhY2thZ2VJRCknIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIFtFeGNlcHRpb25dIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nIC1NZXNzYWdlICJBbiBlcnJvciBvY2N1cmVkIHdoZW4gYXR0ZW1wdGluZyB0byByZW1vdmUgQ29udGVudElEICckKCRDb250ZW50SUQpJyBmcm9tICckKCRQYWNrYWdlSUQpJyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXRjaCBbRXhjZXB0aW9uXSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgLU1lc3NhZ2UgIlVuYWJsZSB0byBzYXZlIGNoYW5nZXMgdG8gJyQoJEF1dGhvcml6YXRpb25MaXN0LkxvY2FsaXplZERpc3BsYXlOYW1lKSciIDsgYnJlYWsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICJObyBjaGFuZ2VzIGRldGVjdGVkLCB3aWxsIG5vdCB1cGRhdGUgJyQoJEF1dGhvcml6YXRpb25MaXN0LkxvY2FsaXplZERpc3BsYXlOYW1lKSciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAjIFJlZnJlc2ggY29udGVudCBzb3VyY2UgZm9yIGFsbCBEZXBsb3ltZW50IFBhY2thZ2VzIGluIHRoZSBEZXBsb3ltZW50UGFja2FnZUxpc3QgYXJyYXkKICAgICAgICAgICAgICAgIGlmICgoJERlcGxveW1lbnRQYWNrYWdlTGlzdC5Db3VudCAtZ2UgMSkgLWFuZCAoJFBTQm91bmRQYXJhbWV0ZXJzWyJSZW1vdmVDb250ZW50Il0pKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJERQYWNrYWdlSUQgaW4gJERlcGxveW1lbnRQYWNrYWdlTGlzdCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQ21kbGV0LlNob3VsZFByb2Nlc3MoIiQoJERQYWNrYWdlSUQpIiwiUmVmcmVzaCBjb250ZW50IHNvdXJjZSIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRFBhY2thZ2UgPSBbd21pXSJcXCQoJFNpdGVTZXJ2ZXIpXHJvb3RcU01TXHNpdGVfJCgkU2l0ZUNvZGUpOlNNU19Tb2Z0d2FyZVVwZGF0ZXNQYWNrYWdlLlBhY2thZ2VJRD0nJCgkRFBhY2thZ2VJRCknIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAiQXR0ZW1wdGluZyB0byByZWZyZXNoIGNvbnRlbnQgc291cmNlIGZvciBEZXBsb3ltZW50IFBhY2thZ2UgJyQoJERQYWNrYWdlLk5hbWUpJyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRSZXR1cm5WYWx1ZSA9ICREUGFja2FnZS5SZWZyZXNoUGtnU291cmNlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkUmV0dXJuVmFsdWUuUmV0dXJuVmFsdWUgLWVxIDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICJTdWNjZXNzZnVsbHkgcmVmcmVzaGVkIGNvbnRlbnQgc291cmNlIGZvciBEZXBsb3ltZW50IFBhY2thZ2UgJyQoJERQYWNrYWdlLk5hbWUpJyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgV3JpdGUtV2FybmluZyAtTWVzc2FnZSAiVW5hYmxlIHRvIGxvY2F0ZSBhbnkgU29mdHdhcmUgVXBkYXRlIEdyb3VwcyIKICAgICAgICB9CiAgICB9CiAgICBjYXRjaCBbRXhjZXB0aW9uXSB7CiAgICAgICAgV3JpdGUtRXJyb3IgLU1lc3NhZ2UgJF8uRXhjZXB0aW9uLk1lc3NhZ2UKICAgIH0KfQpFbmQgewogICAgIyBUZW1wb3JhcmlseSBzZXQgRXJyb3JBY3Rpb25QcmVmZXJlbmNlCiAgICAkRXJyb3JBY3Rpb25QcmVmZXJlbmNlID0gIkNvbnRpbnVlIgogICAgIyBDb21wbGV0ZSB3cml0ZSBwcm9ncmVzcyBhY3Rpdml0eSAgICAKICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbIlNob3dQcm9ncmVzcyJdKSB7CiAgICAgICAgV3JpdGUtUHJvZ3Jlc3MgLUFjdGl2aXR5ICJQcm9jZXNzaW5nIFNvZnR3YXJlIFVwZGF0ZSBHcm91cHMiIC1Db21wbGV0ZWQgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgIH0KICAgICMgT3V0cHV0IHNjcmlwdCBleGVjdGlvbiB0aW1lCiAgICAkU3RhcnRUaW1lLlN0b3AoKQogICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAiU2NyaXB0IGV4ZWN1dGlvbjogJCgkU3RhcnRUaW1lLkVsYXBzZWQuTWludXRlcykgbWluIGFuZCAkKCRTdGFydFRpbWUuRWxhcHNlZC5TZWNvbmRzKSBzZWNvbmRzIgp9
