AllUSersAllHostsProfile.ps1,ab295b803125df36731a9948d10c01b5,Scan result is 1. IsMalware: 0,ï»¿<#
.Synopsis
  Powershell customizations for all users, all hosts
.DESCRIPTION
  Powershell customizations for all users, all hosts, read on login. 
  $profile can contain: 
  Variables the user wishes to set
  Aliases for commands, functions and PSDrives
  PSDrive providers the user wishes to customize
  User created functions that you always want available
  And actions to take on logon, setting start directory, running commands, etc.
  The user can add to these by using their own $profile located in 
     C:\Users\<UserName>\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1
.EXAMPLE
   Fire up PowerShell! or
   . $profile (dot sourcing)
.EXAMPLE
To set up your profile:
Open PowerShell and type (No quotes!!)
    "New-Item -itemtype file -path $profile -force"
Open the new file in ISE (the Integrated Scripting Environment) (Again...No Quotes!!)
    "ise $profile"
A new editor will open, named appropriately.
Copy/Paste this text into the editor and save. 
(Two Ctrl-As will copy everything from a OneNote page)
Than type 
". $profile" (that is... dot space $profile) and enter
Or close PowerShell and re-open and...
All Done!
# All users, all hosts Profile - 20131019
# Martin Wiedmeyer - Dell Services
#>
$PVER = "AllUsersAllHostsProfile 1.47 - 20140824 - 06:43 Central"

#$ErrorActionPreference = "SilentlyContinue"
 
# *** Variables *** 
#New-Variable -Name ProfileFolder -Value (Split-Path $PROFILE -Parent) ` -Description MrEd_Variable 
#New-Variable -Name IseProfile ` -Value (Join-Path -Path (Split-Path $PROFILE -Parent) ` -ChildPath Microsoft.PowerShellISE_profile.ps1) ` -Description MrEd_Variable 
#New-Variable -Name MyComputers -Value Hyperv,Win7-PC -Description MrEd_Variable 
New-Variable -name temp -value $([io.path]::gettemppath()) -Description MrEd_Variable 
#Set-Variable -Name MaximumHistoryCount -Value 128 -Description MrEd_Variable  ***The default is 4096***
Set-Variable -Name PSEmailServer -Value smtp-out.us.dell.com 
#Set-Variable -Name PSSessionConfigurationName -value WithProfile
New-Variable -Name VIMPATH -Value "D:\opas\apps\vim\vim74\vim.exe"
New-Variable -Name WD -Value "D:\OPAS\Work\"

# *** Update the PATH to include our scripts directory for the current user only, in their current sesson ***
$env:PATH += ";D:\OPAS\Scripts;D:\OPAS\Apps;D:\OPAS\Apps\vim\vim74;D:\opas\utilities\Bare Metal Software"

# Add the custom formatting files to the session, placing them at the beginning of the path
Update-FormatData -PrependPath D:\OPAS\Modules\OPAS.format.ps1xml

# Add the shared Module pdir to the $PSModulePath
$env:PSModulePath = $env:PSModulePath + ";D:\OPAS\Modules"

# Change the Path permantly for the entire machine
#[Environment]::SetEnvironmentVariable("PATH", "D:\OPAS\Scripts;" + $env:Path, 'Machine')

# *** Alias ***

<# DO NOT USE THIS!!! Removes the "-" from cmdlets
#Get-Command -CommandType cmdlet |  
#Foreach-Object {  
# Set-Alias -name ( $_.name -replace "-","") -value $_.name -description MrEd_Alias 
#} #end Get-Command 
#>
New-Alias -name Show-RAdmin -value Show-OPASAdminCommands -Description 'Show the OPASv3 Admin Remedy Command set'
New-Alias -name Show-IAdmin -value Show-OPASAdminCommandsInf -Description 'Show the OPASv3 Admin Infrastructure Command set'
New-Alias -name radm -value Show-OPASAdminCommands -Description 'Show the OPASv3 Admin Remedy Command set'
New-Alias -name iadm -value Show-OPASAdminCommandsInf -Description 'Show the OPASv3 Admin Infrastructure Command set'
New-Alias -Name Get-StartTime -Value Get-ATSRT.ps1 -Description 'AR/MT status and start time'
New-Alias -Name atsrt -Value Get-ATSRT.ps1 -Description 'AR/MT status and start time'
#New-Alias -name arscmth -value Get-ARInfo.ps1 -Description 'CPU, Memory, Threads and Handles for ARS processes'
#Alias for a function in the profile
#New-Alias -name arsproc -value Get-ProcMemThreadHandleAllAR.ps1 -Description 'Find all ARS processes'
#New-Alias -name arsst -value Get-ARSStartTime -Description 'ARS Start Time - locally'
#New-Alias -name Get-ARSVersion -value Get-ARSRunningVersion.ps1 -Description 'Get ARS running version and last process restart'
New-Alias -name bmcsvc -value Get-BMCservices -Description 'ARS service status'
New-Alias -name arup -value Get-ARSup -Description 'Is ARS up?'
New-Alias -name cda -value Set-LocationARS -Description 'CD to the ARS dir'
New-Alias -Name cdd -Value GoTo-DocsFolder -Description 'Go to My Documents'
New-Alias -Name cddb -Value Set-LocationARSDB -Description 'Go to the DB dir'
New-Alias -name cdl -value Set-LocationARSLogs -Description 'CD to D:\Logs'
New-Alias -name cdm -value Set-LocationMT -Description 'CD to the MT dir'
New-Alias -name cdmt -value GoTo-MyTempDir -Description 'CD to My TEMP dir'
New-Alias -Name cds -Value GoTo-PowershellFolder -Description 'Go to PSH scripts location'
New-Alias -Name cdss -Value Set-LocationSharedScripts -Description 'Go to shared scripts location'
New-Alias -name cdt -value Set-LocationTomcat -Description 'CD to the Tomcat 7 dir'
New-Alias -name cdw -value Set-LocationWork -Description 'CD to the Work dir'
#New-Alias -name artime -value  -Description 'Time the AR server process started'
New-Alias -Name Get-Inventory -Value CompInv_v2.ps1 -Description 'Realtime computer inventory, output to Excel' 
New-Alias -Name compinv -Value CompInv_v2.ps1 -Description 'Realtime computer inventory, output to Excel' 
New-Alias -name cppro -value Copy-AllUsersAllHostsProfileToEnvs.ps1 -Description 'Copy the AllUsersAllHosts profile out to all machines after editing'
New-Alias -name flushmt -value Restart-TomcatAndFlushCache.ps1 -description 'Restart tomcat and/or flush the MT caches'
New-Alias -name fqi -value Find-QuickInventory.ps1 -description 'Find server hardware configs quickly'
New-Alias -name gs -value  Get-Service -description 'Get-Service'
New-Alias -name gadinfo -value Get-ADInfo.ps1 -description 'Get info on the ITSM team accounts and groups in Active Directory'
New-Alias -name Update-Admin -value Update-LocalAdminRemotely_multiple-hosts.ps1 -description 'View, add or remove members of the Local Admin group on all MT and AR servers'
New-Alias -name uadm -value Update-LocalAdminRemotely.ps1 -description 'View, add or remove members of the Local Admin group on all MT and AR servers'
New-Alias -name Find-ARCrashes -value Get-ARCrashesFromEventLogs -description 'Audit ARS Craches on all AR servers'
New-Alias -name farc -value Get-ARCrashesFromEventLogs -description 'Audit ARS Craches on all AR servers'
New-Alias -name Find_CritandErr -value Find-CriticalandErrorEvents -description 'Find EventLog Crital and ErrorEvents'
New-Alias -name fceevt -value Find-CriticalandErrorEvents -description 'Find EventLog Crital and ErrorEvents'
New-Alias -name ffsas -value Find-FileSharesAndSecure.ps1 -Description 'Find all file shares open to everyone, remove Everypne and allow ITSM_NON_PROD_ENVIRONMENT read only'
New-Alias -Name garp -Value Get-ArProcs.ps1 -description 'Get ARS processes in Prod or Non-Prod'
New-Alias -Name Get-ARSLicense -Value Get-BMCARSLicenses.ps1 -description 'Get ARS licensing information'
New-Alias -Name galic -Value Get-BMCARSLicenses.ps1 -description 'Get ARS licensing information'
New-Alias -Name Get-ARSMTH -Value Get-ProcMemThreadHandleARS.ps1 -description 'Get Memory used, Threadcount and Handle count for ARS in Prod or Non-Prod'
New-Alias -Name garsmth -Value Get-ProcMemThreadHandleARS.ps1 -description 'Get Memory used, Threadcount and Handle count for ARS in Prod or Non-Prod'
New-Alias -Name garss -Value Get-ArsSvc -description 'Get Status of the ARS Service'
New-Alias -Name Get-ARSVersion -Value Get-ArsRunningVersion.ps1 -description 'Get the current version running on our ARS machines'
New-Alias -Name garsver -Value Get-ArsRunningVersion.ps1 -description 'Get the current version running on our ARS machines'
New-Alias -Name Get-DiskInfo -Value Get-CandDSpaceFree.ps1 -description 'Used and Free for C & D on all machines'
New-Alias -Name gcd -Value Get-CandDSpaceFree.ps1 -description 'Used and Free for C & D on all machines'
New-Alias -name gdrpt -value Get-DirectReports -description 'Get a users direct reports'
New-Alias -name gladmin -value Get-LocalAdmin -description 'See the members of the local machines Admin group'
New-Alias -name Get-Logon -value Get-LoggedOnUsers_W_Progress.ps1 -description 'See users logged on with RD to OPASv3 servers'
New-Alias -name glogon -value Get-LoggedOnUsers_W_Progress.ps1 -description 'See users logged on with RD to OPASv3 servers'
New-Alias -Name gmts -Value Get-MTSvc -description 'Get Status of the MT (tomcat7) Service'
New-Alias -Name gmtstat -Value Get-MTStatus.ps1 -description 'Get Status of the MT from arsys/shared/statuscheck.jsp'
New-Alias -name gloalo -value Get-LoggedOnandLogout -description 'Find the logons of a specific account and logout if found'
New-Alias -name Get-Pairing -value Get-MTtoARPairs.ps1 -description 'Get MT/AR pairs'
New-Alias -name gpairing -value Get-MTtoARPairs.ps1 -description 'Get MT/AR pairs'
New-Alias -name gpr -value  Get-Process -description 'Get-Process'
New-Alias -Name grds -Value Get-RDSessions.ps1 -description 'Get RDS Sessions on the OPAS servers'
New-Alias -Name gtp -Value Get-TopProc.ps1 -description 'Get top processes on the OPAS servers'
New-Alias -name ic -value Invoke-Command -description 'Run a command on multiple remote machines'
New-Alias -name lastlog -value Get-LogonHistory.ps1 -Description 'Last logons on an individual server'
New-Alias -name Get-BootTime -value Get-LastReboot.ps1 -Description 'Last reboot times'
New-Alias -name lastboot -value Get-LastReboot.ps1 -Description 'Last reboot times'
New-Alias -name larsproc -value Get-ARSProcessesLoc -Description 'Find all ARS processes - locally'
New-Alias -name larsst -value Get-ARSStartTimeLoc -Description 'ARS Start Time - locally'
New-Alias -name lbmcsvc -value Get-BMCservicesLoc -Description 'ARS service status - locally'
New-Alias -name lcdt -value Set-LocationMyLocalTemp -Description 'Cd to your local Temp dir to view and monitor ARS install logs'
New-Alias -name Read-DBLog -value Get-LessDB -Description 'Open a file in the db directory with less'
New-Alias -name ldb -value Get-LessDB -Description 'Open a file in the db directory with less'
New-Alias -name Read-DBLogBT -value Get-BareTailDB -Description 'Open a file in the db directory with BareTail'
New-Alias -name bdb -value Get-BareTailDB -Description 'Open a file in the db directory with BareTail'
New-Alias -name Read-EmailLog -value Get-LessEmailLog -Description 'Open a file in the EmailLogs directory on AP16 with less'
New-Alias -name lemail -value Get-LessEmailLog -Description 'Open a file in the EmailLogs directory on AP16 with less'
New-Alias -name Read-EmailLogBT -value Get-BareTailEmailLog -Description 'Open a file in the EmailLogs directory on AP16 with BareTail'
New-Alias -name bemail -value Get-BareTailEmailLog -Description 'Open a file in the EmailLogs directory on AP16 with BareTail'
New-Alias -name lgars -value Get-ARSSvcLocal -description 'Get-Service locally for the BMC Action Request System'
New-Alias -name lldb -value Get-LessDBLoc -Description 'Open a file in the local db directory with less'
New-Alias -name Read-Arerror -value Get-LessArerror -Description 'Open arerror.log with less'
New-Alias -name lerr -value Get-LessArerror -Description 'Open arerror.log with less'
New-Alias -name Read-ArerrorBT -value Get-BareTailArerror -Description 'Open arerror.log with BareTail'
New-Alias -name berr -value Get-BareTailArerror -Description 'Open arerror.log with BareTail'
New-Alias -name llerr -value Get-LessArerrorLoc -Description 'Open arerror.log with less'
New-Alias -name lllog -value Get-LessLogLoc -Description 'Open a local log file with less'
New-Alias -name Read-Log -value Get-LessLog -Description 'Open a local log file with less'
New-Alias -name llog -value Get-LessLog -Description 'Open a local log file with less'
New-Alias -name Read-LogBT -value Get-BareTailLog -Description 'Open a local log file with less'
New-Alias -name blog -value Get-BareTailLog -Description 'Open a local log file with less'
#New-Alias -name mtrof -value Restart-TomcatAndOrFlushCache.ps1 -description 'Restart tomcat and/or flush the MT caches'
#New-Alias -name mtrof1 -value Restart-OneTomcatAndOrFlushCache.ps1 -description 'Restart tomcat and/or flush the cache'
New-Alias -name lsd -value Get-Directory -Description 'List only directories in the CWD'
New-Alias -name lss -value Get-GCISort -Description 'List files by LastWriteTime in the CWD'
New-Alias -name ml -value Show-MenuList -Description 'Reminder of menu display commands'
New-Alias -name startars -value Start-ARS -Description 'Start ARS Local or Remote'
#New-Alias -name lstopars -value Stop-ARSLocal -Description 'Stop ARSLocal'
New-Alias -name gmtver -value Get-MTVersion.ps1 -Description 'Get Version of the MTs'
New-Alias -name mvoldarslog -value Invoke-MoveOld_AR_LogFiles.ps1 -Description 'Clean up ARS logfiles'
New-Alias -name mvoldmtlog -value Invoke-MoveOld_MT_LogFiles.ps1 -Description 'Clean up MT and tomcat logfiles'
New-Alias -name o -value Show-OPASCommands -Description 'Show the OPASv3 Command set'
New-Alias -name p -value Get-Profile -description 'Edit the profile'
New-Alias -name pv -value Show-PVER -Description 'Display the version of the current $profile'
New-Alias -name pss -value Enter-PSS -Description 'Remote PowerShell Session with $profile'
New-Alias -Name Recache-ARS  -value Invoke-ARSignal.ps1 -Description 'Run arsignal in any environment'
New-Alias -Name rars  -value Invoke-ARSignal.ps1 -Description 'Run arsignal in any environment'
New-Alias -name restartmt -value Restart-Tomcat.ps1 -description 'Restart tomcat'
New-Alias -name rmoldlog -value Remove-OldLogs.ps1 -Description 'Delete D:\TEMP\Old_logs in either non-prod or prod'
New-Alias -name rstartars -value Start-ARSRemote -Description 'Start ARS'
New-Alias -Name runsig -value Invoke-ARSignal.ps1 -Description 'Run arsignal in any environment'
New-Alias -name Search-ARSConfig -value Search-StringInARCfg.ps1 -Description 'Find a string in ar.cfg '
New-Alias -name sarcfg -value Search-StringInARCfg.ps1 -Description 'Find a string in ar.cfg '
New-Alias -name sadinfo -value Set-ADInfo.ps1 -description 'Set membership of ITSM groups in Active Directory'
New-Alias -name staars -value Start-ARS -Description 'Start ARS'
New-Alias -name stoars -value Stop-ARS -Description 'Stop ARS'
New-Alias -name syn -value Sync-Profile -description 'Reload (dot source) $PSHOME\profile.ps1'
New-Alias -name terr -value Get-TailArerror -Description 'Tail the arerror.log'
New-Alias -name tlog -value Get-TailLog -Description 'Tail any log in D:\Logs'
New-Alias -name ulamh -value Update-LocalAdminMultipleHosts.ps1 -Description 'Update local admin groups remotely'
New-ALias -name up -value Update-Profile -Description "Dot source $Profile.AllUsersAllHosts"
New-Alias -name v -value Get-VerbSort -Description 'Get-Verb, sorted by verb'
New-Alias -name vi -value "D:\opas\apps\vim\vim74\vim.exe" -Description 'vim'
New-Alias -name vim -value "D:\opas\apps\vim\vim74\vim.exe" -Description 'vim'
New-Alias -name wars -value Watch-ARS -Description 'Monitor ARS CPU & RAM utilization'
New-Alias -name wcpu -value Watch-CPU -Description 'Monitor total CPU utilization'
New-Alias -name wtom -value Watch-Tomcat -Description 'Monitor Tomcat CPU utilization'

$OPASCommands = @"
o - Show the OPASv3 PowerShell Command set

NOTE: All commands require Admin permisions on the target server(s)

AR Log Commands - A single AR server will be selected by the prompts in the script
===========
Get-TailArerror [terr] - Watch an arerror.log as it is written - Prompts for the ARS server from which to read the log
Get-TailLog [tlog] - Watch any log from D:\logs as it is written - Prompts for the ARS server from which to read the log
Read-Arerror [lerr] - Open and browse an arerror.log with less
Read-ArerrorBT [berr] - Open and browse an arerror.log with BareTail
Read-DBLog [ldb] - Open a file in the db directory with less
Read-DBLogBT [bdb] - Open a file in the db directory with BareTail
Read-EmailLog [lemail] - Open a file in the email log directory on AP16 with less
Read-EmailLogBT [bemail] - Open a file in the email log directory on AP16 with BareTail
Read-Log [llog] - Open and browse any logfile in D:\logs with less
Read-LogBT [blog] - Open and browse any logfile in D:\logs with BareTail

MT Commands - run from a Management server
===========
On any single MT or on the MTs in any of our environments, sequentially:
flushmt - Restart tomcat and flush the cache 
restartmt - Restart tomcat only


OPASv3 Maintenance Commands
===========================
Get-ADInfo [gadinfo] - Get information on the ITSM team's users and groups in Active Directory
Get-BootTime [lastboot] - Last OS reboot times. Prompts allow the selecton of the environment and MT, ARS, FIT or Boomi
Get-DiskInfo [gcd] - See Used and Free for C & D drives on all machines
Get-MTStatus [gmtstat] - Get Status of the MT from arsys/shared/statuscheck.jsp
Get-Pairing [gpairing] - View the MT and AR pairs in Prod, Non-prod or both
Get-StartTime [atsrt] - ARS and Tomcat (MT) Status and Restart times. Prompts allow the selecton of the environment and MT or AR server
Get-TopProc [gtp] - Get the top processes on OPAS servers
Watch-ARS [wars] - Monitor the CPU and RAM use of ARS on a single machine, updated every second, Ctrl-C to end
Watch-CPU [wcpu] - Monitor the total CPU use of a single machine, updated every second, Ctrl-C to end
Watch-Tomcat [wtom] - Monitor the CPU and RAM use of Tomcat 7 on a single machine, updated every second, Ctrl-C to end

Show-Radmin [radm] - Show the OPASv3 PowerShell Admin Remedy Command set
Show-IAdmin [iadm] - Show the OPASv3 PowerShell Admin Infrastructure Command set
"@


$OPASAdminCommands = @" 

NOTE: All commands require Admin permisions on the target server(s)

======================
Remedy Admin Commands
======================
Status
------
Get-ARSVersion [garsver] - Get ARS running version and last process restart
Get-ARSLicense [galic] -Get ARS licensing information
Get-ARSMTH [garsmth] - Get Memory used, Threadcount and Handle count for ARS in Prod or Non-Prod
Get-MTVersion [gmtver] - Get the version of the Mid-Tiers in the OPAS v3 environments
Get-Pairing [gpairing] - Get the MT and AR pairs in Prod, Non-prod or both
Get-StartTime [atsrt] - ARS and Tomcat (MT) status and restart times. Prompts allow the selecton of the environment and MT or AR server
Show-PVER [pv] - Display the version of the current `$profile

Search
------
Search-ARSConfig [sarcfg] - Find a string in ar.cfg on all ARS machines, chose environment

Services
-------- 
Get-ARSSvc [garss] - Get Status of the ARS Service
Get-MTSvc [gmts]- Get Status of the NT (tomcat7) Service
Start-ARS [staars] - Stop, then start the ARS service and track elapsed time for ARS startup (locally or remotely)
Stop-ARS [stoars] - Stop the ARS service (locally or remotely)
(Under Construction) Recache-ARS [rars] - Run Arsignal. Prompts allow you to select the environment

Show-RAdmin [radm] - Show the OPASv3 PowerShell Admin Remedy Command set
Show-IAdmin [iadm] - Show the OPASv3 PowerShell Admin Infrastructure Command set
"@

$OPASAdminCommandsInf = @" 

NOTE: All commands require Admin permisions on the target server(s)

================
Active Directory
================
Get-ADInfo [gadinfo] - Get information on the ITSM team's users and groups in Active Directory
Set-ADInfo [sadinfo] - Set membership of ITSM groups in Active Directory (You must be owner of the group to add or remove members)
Get-DirectReports [gdrpt] - Get a User's Direct Reports

=============================
Infrastructure Admin Commands
=============================
Find-CritandErr [fceevt] - Find EventLog Crital and Error Events
Find-FileSharesAndSecure [ffsas] - Find all file shares open to Everyone, remove Everyone and allow ITSM_NON_PROD_ENVIRONMENT read only
Find-QuickInventory [fqi] - Get hardware config info quickly
Get-Inventory [compinv] - Create a spreadsheet of hardware and OS details by polling servers in real time 
                         (Excel must be installed on the local machine to run successfully - use AUSDWITSM3FIT01)
Update-Admin [uadm] - Add, View or remove members of the Local Admin group on all MT and AR servers
Get-DiskInfo [gcd] - See Used and Free for C & D drives on all machines
Get-LoggedOnandLogout [gloalo] - Get the logons of a specific account and logout if found
Get-LogonHistory [lastlog] - Last Logons on a particular server
Get-LastReboot [lastboot] - Last OS reboot times. Prompts allow the selecton of the environment and MT, ARS, FIT or Boomi
Get-RDSessions [grds] - Get current Remote Desktop logons on Prod and Non-prod servers
Invoke-MoveOld_AR_LogFiles [mvOldARSlog] - Move ARS logfiles over 60 days old to D:\TEMP\Old_Logs\ARS
Invoke-MoveOld_MT_LogFiles [mvOldMTlog] - Move MT and Tomcat logfiles over 60 days old to D:\TEMP\Old_Logs\MT
Remove-OldLogs [rmOldLog] - Removes all D:\TEMP\Old_Logs directories from either Non-Prod or Prod
Watch-CPU [wcpu] - Monitor the total CPU use of a single machine, updated every second, Ctrl-C to end

====================
Interactive Remoting
====================
Enter-PSS [pss] - Interactive, secure PowerShell Session to a remote computer with OPASv3 team command functionality. Prompt driven target selection.

==============================================
Interactive Navigation Aliases - 
in PowerShell locally or when remoted with pss
==============================================
cda - CD to the ARS dir
cdm - CD to the MT dir
cdt - CD to the Tomcat 7 dir
cdd - CD to My (your) Documents
cds - CD to your personal PowerShell scripts directory
cdss - CD to the shared PowerShell scripts directory
lsd - list only directories in the CWD
lss - sort files in the CWD with most recent files on the bottom.

Show-RAdmin [radm] - Show the OPASv3 PowerShell Admin Remedy Command set
Show-IAdmin [iadm] - Show the OPASv3 PowerShell Admin Infrastructure Command set
"@

$Reminder = @"
"ml" for a menu list
"@

$MenuList = @"
Enter"o" for a list of "o"PASv3 ARS and MT commands`nradm for Remedy Admin commands or`niadm for Infrastructure Admin commands
"@

$ServerName = hostname

# *** PS Drive *** 
#None created or customized yetâ€¦
 
# *** Function *** 
Function Add-LogAccess
  {
    if (!(Test-Path D:\LogAccess))
       { 
         New-Item D:\LogAccess -type Directory
       }
    if (!(Test-Path D:\LogAccess\$Global:ARServer))
       {
         New-Item D:\LogAccess\$Global:ARServer -type Directory > $null
         New-Symlink D:\LogAccess\$Global:ARServer\db \\$Global:ARServer\db > $null
         New-Symlink D:\LogAccess\$Global:ARServer\logs \\$Global:ARServer\logs > $null
       }
  }
Function Get-SpecialFolder {   

  param([System.Environment+SpecialFolder]$Alias)   

  [Environment]::GetFolderPath([System.Environment+SpecialFolder]$alias)   

}  # end function Get-SpecialFolder. 

$DocsFolder  = Get-SpecialFolder MyDocuments 

$PowerShellScriptsFolder = "$DocsFolder"+"\WindowsPowerShell\Scripts"

$PowerShellModulesFolder = "$DocsFolder"+"\WindowsPowerShell\Modules"  

$MyTempDir = "C:\Users\$env:username\AppData\Local\Temp"

Function GoTo-PowershellFolder 
    {  
        if (!(Test-Path $PowerShellScriptsFolder) -and !($Host.Name -eq "ServerRemoteHost"))
        {
          #If this is the initial logon session, create the personal PowerShell directories
          New-Item -Path $PowerShellScriptsFolder -Type Directory -Force |Out-Null
          New-Item -Path $PowerShellModulesFolder -Type Directory -Force|Out-Null
          Set-Location "$PowerShellScriptsFolder" 
        }
        else
        {
          Set-Location "$PowerShellScriptsFolder" 
        }  # end function GoTo-PowershellFolder 
    }
       
Function GoTo-DocsFolder 
    {  
        Set-Location $docsfolder 
    }  # end function GoTo-DocsFolder  

Function GoTo-MyTempDir
    {
    Set-Location $MyTempDir
    } #end Function GoTo-MyTempDir

Function Enter-PSS
    { 
      #Param($Server)
      Select-Server
      Write-Output "Establishing a secure session with $Script:Server with OPASv3 team functionality"
      #enter-pssession $Script:Server -Authentication CredSSP -ConfigurationName withprofile
      enter-pssession $Script:Server -ConfigurationName withprofile
      $MenuItem = "Enter-PSS"
      Write-OPASLog
    } #end function Enter-PSS

Function Find-CriticalandErrorEvents
  {
  Select-Server
  Get-WinEvent -FilterHashtable @{LogName="System","Application"; Level=1,2} -ComputerName $Script:Server -ErrorAction SilentlyContinue|fl|more
  }

function Get-ARSProcesses 
    {
    Select-ARS
    Write-Output "AR Processes on $Global:ARServer"
    $ARSProcesses = Get-Process -ComputerName $Global:ARServer ar*

    if (!($ARSProcesses))
        {
        Write-Output 'ARS is not running on' $Global:ARServer
        }
    else
        {
        $ARSProcesses
        }
  $MenuItem = "Get-ARSProcesses"
 Write-OPASLog
    } # end function Get-ARSProcesses

function Get-ARSProcessesLoc
    {
    $ARServer = hostname
    Write-Output "AR Processes on $ARServer"
    $ARSProcesses = Get-Process -ComputerName $ARServer ar*

    if (!($ARSProcesses))
        {
        Write-Output 'ARS is not running on' $ARServer
        }
    else
        {
        $ARSProcesses
        }
  $MenuItem = "Get-ARSProcessesLoc"
  Write-OPASLog
    } # end function Get-ARSProcessesLoc

Function Get-ARSStartTimeLoc
    { 
    $ARServer = hostname
    $AROK = (Get-Process arserver -ErrorAction SilentlyContinue).starttime
    if ($AROK)
      {
        Write-Output "`nThe arserver process started at $AROK on $ARServer`n"
      }
    else
      {
        Write-Output "`nARS is not running on $ARServer`n"
      } 
      $MenuItem = "Get-ARSStartTimeLoc"
      Write-OPASLog
    }#End Function Get-ARSStartTimeLoc

Function Get-ARTime
    { 
    Select-ARS
    $AROK = invoke-command -ComputerName $Global:ARServer {(Get-Process arserver).starttime}
    if ($AROK)
      {
        Write-Output "`nThe arserver process started at $AROK on $Global:ARServer"
      }
    else
      {
        Write-Output "`nARS is not running on $Global:ARServer"
      } 
      $MenuItem = "Get-ARTime"
     Write-OPASLog
    }#End Function Get-ARTime

Function Get-ARSSvc
    {
    Select-ARS
    $GetARSSvc = Get-Service -ComputerName $Global:ARServer *Action* -ErrorAction SilentlyContinue  |Format-Table -AutoSize
    if (!($GetARSSvc))
      {
        Write-Output `n"Action Request System Services are not running on $Global:ARServer`n";return
      }
    else 
      {
        $GetARSSvc
      }
     $MenuItem = "Get-ARSSvc"
     Write-OPASLog
    } #end function Get-ARSSvc

function Get-BareTailArerror 
    {
    Select-ARS
    $Local = hostname
    if ($Global:ARServer -eq $Local) 
        {
          Set-Location "D:\Program Files\BMC Software\ARSystem\Arserver\Db"
        }
    else 
        {
          Add-LogAccess
          Set-Location -path "D:\LogAccess\$Global:ARServer\Db"
        }
    baretail .\arerror.log
    cdd
  $MenuItem = "Get-BareTailArerror"
  Write-OPASLog
    } # end of function Get-BareTailArerror

function Get-BareTailArerrorLoc
    {
    Set-Location -path "D:\Program Files\BMC Software\ARSystem\Arserver\db"
    baretail .\arerror.log
    cdd
  $MenuItem = "Get-BareTailArerrorLoc"
  Write-OPASLog
  cdd
    } # end of function Get-BareTailArerrorLoc

function Get-BareTailDB 
    {
    Select-ARS
    $Local = hostname
    if ($Global:ARServer -eq $Local) 
        {
          Set-Location "D:\Program Files\BMC Software\ARSystem\Arserver\Db"
        }
    else 
        {
          Add-LogAccess
          Set-Location -path "D:\LogAccess\$Global:ARServer\Db"
        }
    lss
    $BareTailFile = Read-Host "File to open"
    #Set-Pager
    #$Open = $Pager .\$BareTailFile
    baretail .\$BareTailFile
   cdd
  $menuitem = "Get-BareTailDB"
  Write-OPASLog
    } # end of function Get-BareTailDB

function Get-BareTailEmailLog
    {
    Set-Location -path "D:\LogAccess\AUSPWITSM3AP16\EMAIL_Logs"
    lss
    $BareTailFile = Read-Host "File to open"
    baretail .\$BareTailFile
    #cdd
  $MenuItem = "Get-BareTailEmailLog"
  #Write-BareTailEmailLog
    } # end of function Get-BareTailEmailLog


function Get-BareTailDBLoc
    {
    Set-Location -path "D:\Program Files\BMC Software\ARSystem\Arserver\db"
    lss
    $BareTailFile = Read-Host "File to open"
    baretail .\$BareTailFile
    cdd
  $MenuItem = "Get-BareTailDBLoc"
  Write-OPASLog
  cdd
    } # end of function Get-BareTailArerrorLoc

function Get-BareTailLog 
    {
    Select-ARS
    Add-LogAccess
    Set-Location -path "D:\LogAccess\$Global:ARServer\logs"
    Get-ChildItem *.log|sort LastWriteTime
    $LogFile = Read-Host "Logfile to open`nScroll to find the file`nCopy and paste the name or type it`nCtrl-C to exit"
    if (!($LogFile))
      {
        continue
      }
    baretail $LogFile
   
  $MenuItem = "Get-BareTailLog"
 Write-OPASLog
  cdd
    } # end of function Get-BareTailArerror

function Get-LocalAdmin
    {
      $ADMINS = get-wmiobject -query "select * from win32_groupuser where GroupComponent=""Win32_Group.Domain='$env:computername',Name='administrators'""" | % {$_.partcomponent}

        foreach ($a in $ADMINS)
          { 
            $a.split('\"')[7]
          }
       $MenuItem = "Get-LocalAdmin"
       Write-OPASLog
    } # end of function Get-LocalAdmin

function Get-BareTailLogLoc
    {
    Set-Location -path "D:\logs"
    $LogCheck = Get-ChildItem *.log|sort LastWriteTime
    if (!($LogCheck))
      {
        Write-Output "No logfiles in D:\logs";continue
      }
    $LogCheck
    $LogFile = Read-Host "Logfile to open`nScroll to find the file`nCopy and paste the name or type it`nCtrl-C to exit"
    if (!($LogFile))
      {
        continue
      }
    baretail $LogFile
  $MenuItem = "Get-BareTailLogLoc"
 Write-OPASLog
    } # end of function Get-BareTailArerrorLoc

Function Get-BMCservices
    {
    Select-ARS
    Get-Service -Computername $Global:ARServer "BMC*"|format-table -AutoSize
  $MenuItem = "Get-BMCServices"
  Write-OPASLog
    } #end function Get-BMCservices

Function Get-BMCservicesLoc
    {
    $ARServer = hostname
    Get-Service "BMC*"|format-table -AutoSize
  $MenuItem = "Get-BMCServicesLoc"
  Write-OPASLog
    } #end function Get-BMCservicesLoc

function Get-Directory
    {
    Get-ChildItem -Directory
  $MenuItem = "Get-Directory"
  Write-OPASLog
    } # end of function Get-Directory    

function Get-FunctionName 
  { 
    (Get-Variable MyInvocation -Scope 1).Value.MyCommand.Name;
  }

function Get-GCISort
    {
    Get-ChildItem |sort lastwritetime
  $MenuItem = "Get-GCISort"
  Write-OPASLog
    } # end of function Get-GCISort

function Get-LessArerror 
    {
    Select-ARS
    $Local = hostname
    if ($Global:ARServer -eq $Local) 
        {
          Set-Location "D:\Program Files\BMC Software\ARSystem\Arserver\Db"
        }
    else 
        {
          Add-LogAccess
          Set-Location -path "D:\LogAccess\$Global:ARServer\Db"
        }
    less .\arerror.log
    cdd
  $MenuItem = "Get-LessArerror"
  Write-OPASLog
    } # end of function Get-LessArerror

function Get-LessArerrorLoc
    {
    Set-Location -path "D:\Program Files\BMC Software\ARSystem\Arserver\db"
    less .\arerror.log
    cdd
  $MenuItem = "Get-LessArerrorLoc"
  Write-OPASLog
  cdd
    } # end of function Get-LessArerrorLoc

function Get-LessDB 
    {
    Select-ARS
    $Local = hostname
    if ($Global:ARServer -eq $Local) 
        {
          Set-Location "D:\Program Files\BMC Software\ARSystem\Arserver\Db"
        }
    else 
        {
          Add-LogAccess
          Set-Location -path "D:\LogAccess\$Global:ARServer\Db"
        }
    lss
    $LessFile = Read-Host "File to open"
    #Set-Pager
    #$Open = $Pager .\$LessFile
    less .\$LessFile
   cdd
  $menuitem = "Get-LessDB"
  Write-OPASLog
    } # end of function Get-LessDB

function Get-LessEmailLog
    {
    Set-Location -path "D:\LogAccess\AUSPWITSM3AP16\EMAIL_Logs"
    lss
    $LessFile = Read-Host "File to open"
    less .\$LessFile
    #cdd
  $MenuItem = "Get-LessEmailLog"
  #Write-LessEmailLog
    } # end of function Get-LessEmailLog


function Get-LessDBLoc
    {
    Set-Location -path "D:\Program Files\BMC Software\ARSystem\Arserver\db"
    lss
    $LessFile = Read-Host "File to open"
    less .\$LessFile
    cdd
  $MenuItem = "Get-LessDBLoc"
  Write-OPASLog
  cdd
    } # end of function Get-LessArerrorLoc

function Get-LessLog 
    {
    Select-ARS
    Add-LogAccess
    Set-Location -path "D:\LogAccess\$Global:ARServer\logs"
    Get-ChildItem *.log|sort LastWriteTime
    $LogFile = Read-Host "Logfile to open`nScroll to find the file`nCopy and paste the name or type it`nCtrl-C to exit"
    if (!($LogFile))
      {
        continue
      }
    less $LogFile
   
  $MenuItem = "Get-LessLog"
 Write-OPASLog
  cdd
    } # end of function Get-LessArerror

function Get-LocalAdmin
    {
      $ADMINS = get-wmiobject -query "select * from win32_groupuser where GroupComponent=""Win32_Group.Domain='$env:computername',Name='administrators'""" | % {$_.partcomponent}

        foreach ($a in $ADMINS)
          { 
            $a.split('\"')[7]
          }
       $MenuItem = "Get-LocalAdmin"
       Write-OPASLog
    } # end of function Get-LocalAdmin

function Get-LessLogLoc
    {
    Set-Location -path "D:\logs"
    $LogCheck = Get-ChildItem *.log|sort LastWriteTime
    if (!($LogCheck))
      {
        Write-Output "No logfiles in D:\logs";continue
      }
    $LogCheck
    $LogFile = Read-Host "Logfile to open`nScroll to find the file`nCopy and paste the name or type it`nCtrl-C to exit"
    if (!($LogFile))
      {
        continue
      }
    less $LogFile
  $MenuItem = "Get-LessLogLoc"
 Write-OPASLog
    } # end of function Get-LessArerrorLoc


Function Get-MTSvc
    {
    Select-MT
    $GetMTSvc = Get-Service -ComputerName $Global:MTServer tomcat7 -ErrorAction SilentlyContinue  |Format-Table -AutoSize
    if (!($GETMTSVC))
      {
        Write-Output `n"Mid-Tier (Tomcat7) Services are not running on $Global:MTServer`n";return
      }
    else 
      {
        $GetMTSvc
      }
     $MenuItem = "Get-MTSvc"
     Write-OPASLog
    } #end function Get-MTSvc

Function Get-RemoteLocalAdmin
  {
  Start-Job -Name GetLocalAdmins -ScriptBlock {Get-LocalAdministratorsRemotely.ps1}
  $MenuItem = "Get-LocalAdmin"
  Write-OPASLog
  } #End function Get-LocalAdmin

<#Function Get-ServiceARS
  {
  Get-Service "BMC Remedy Action*"
  $MenuItem = "Get-ServiceARS"
  Write-OPASLog
  } #End function Get-ServiceARS
  #>     
function Get-TailArerror 
    {
    Select-ARS
    Set-Location -path "\\$Global:ARServer\Db"
    Get-FileTail .\arerror.log -count 200 -wait
    cdd
  $MenuItem = "Get-TailArerror"
 Write-OPASLog
    } # end of function Get-TailArerror

function Get-TailLog 
    {
    Select-ARS
    Set-Location -path "\\$Global:ARServer\Logs"
    Get-ChildItem *.log\Format-Wide -col 3
    $LogFile = Read-Host "Logfile to watch interactively`n(Scroll to find the file, Copy and paste the name or type it)"
    $LineCount = Read-Host "Number of lines to display when opening the file"
    if (!($LogFile))
      {
        continue
      }
    if (!($LineCount))
      {
        continue
      }
    Get-FileTail .\$LogFile -count $LineCount -wait
    cdd
  $MenuItem = "Get-TailLog"
 Write-OPASLog
    } # end of function Get-TailArerror

Function Get-Profile 
    {
    ise $profile 
   $MenuItem = "Get-Profile"
   Write-OPASLog
    } #end function get-profile 

Function Get-VerbSort
    {
      Get-Verb|sort verb|Format-Table -AutoSize
       $MenuItem = Get-VerbSort
       Write-OPASLog
    } # end function Get-ARSstatus #>

<#Function Get-ARSup
    {
    Select-ARS
    if (Get-Service -Computername $Global:ARServer "BMC REMEDY Acti*" | ? { $_.Status -eq "Running" } )
        {
        Write-Output "`nARS is UP on $Global:ARServer!"        }
    else
        {
        Write-Output "`nARS is not running on $Global:ARServer"
        }
        $MenuItem = Select-ARS
       Write-OPASLog
    } # end function Get-ARSstatus #>

function HowLongWasThat 
  { 
  (get-history ($MyInvocation.HistoryId -1)).endexecutiontime.subtract((get-history ($MyInvocation.HistoryId -1)).startexecutiontime).totalseconds 
   $MenuItem = "HowLongWasThat"
   Write-OPASLog
  } # end function HowLongWasThat

function Prompt 
    {
    if ([System.IntPtr]::Size -eq 8) {$size = '64 bit'}
    else {$size = '32 bit'}  
    
    $CurrentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $SecPrin = New-Object Security.Principal.WindowsPrincipal $CurrentUser
    
    if
    ($SecPrin.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))
    {$Admin = 'Administrator'}
    else {$Admin = 'non-Administrator'}
    
    if ($Host.Name -eq "ServerRemoteHost")
       {$Remote = "[REMOTE SESSION]"}
    else {$Remote = $null}

    $host.ui.RawUI.WindowTitle = "$Reminder   $Admin    $Size    $Remote"
    
    "$env:COMPUTERNAME :: $(get-location) 
PS>"

     } # End function Prompt

<#
function Prompt 
    {
    if ($Host.Name -eq "ServerRemoteHost")
      {
    ": $(get-location)
    $CommandReminder
PS>"
        }
else
        {
       "$env:COMPUTERNAME :: $(get-location)
    $CommandReminder
PS>"
        }
} # End function Prompt
#>

Function Select-ARS
{
    $Global:ARServer = $null

    $Pre = Read-Host "`nDisplay a list of (M)achines, choose the (L)ocal machine or `nbuild a name in (P)rod, (U)AT, (S)IT, (D)ev or (R)&D?"
    Switch ($Pre)
    {
    D
      {
        $Prefix = "AUSDWITSM3"
      }
    L
      {
        $Global:ARServer = $env:COMPUTERNAME
      }
    M
      {
        Get-Content D:\OPAS\WORK\ALL_ARS.txt|Format-Wide -col 4
        $Global:ARServer = Read-Host "Please copy/paste the target machine name here"
        return
      }
    P
      {
        $Prefix = "AUSPWITSM3"
      }
    R
      {
        $Prefix = "AUSDWITSM3"
      }

    S
      {
        $Prefix = "AUSSWITSM3"
      }

    U
      {
        $Prefix = "AUSUWITSM"
      }

    }
    
    if ($Global:ARServer)
      {
        return
      }

        $ARMT = "AP"

     if ($Prefix -eq "AUSSWITSM3" -and $ARMT -eq "AP")
      {
        $SITChoice = Read-host "(1)AUSUWITSMIDM01 or (2)AUSSWITSM3AP01"
        switch ($SITChoice)
        {
          1
            {
              $Global:ARServer = "AUSUWITSMIDM01"
            }
          2
            {
              $Global:ARServer = "AUSSWITSM3AP01"
            }
        }
      }

   $Num = Read-Host "Last two digits of the Server name?"
         if ($Num -eq "07")
            {
              $Global:ARServer = "AUSITSM2PRDAP07"
            }
          elseif ($Num -eq "08")
            {
              $Global:ARServer = "AUSITSM2PRDAP08"
            }
          elseif ($Num -eq "09")
            {
              $Global:ARServer = "AUSITSM2PRDAP09"
            }
          elseif ($Prefix -eq "AUSUWITSM" -and $Num -eq "01")
            {
              $UATARS = Read-Host "(1) AUSUWITSMMSAP01, Admin in UAT or (2) AUSUWITSMAP01"
                switch ($UATARS)
                  {
                    1
                      {
                        $Global:ARServer = "AUSUWITSMMSAP01"
                      }
                    2
                      {
                        $Global:ARServer = "$Prefix$ARMT$NUM"
                        Write-Output "the name is $Global:ARServer"
                      }
                   }

           }
          elseif ($Num -eq "01")
            {
              $01ARS = Read-Host "(1) AUSPWITSM3AP01 or (2) AUSSM2PRDAPWS01"
                switch ($01ARS)
                 {
                   1
                     {
                      $Global:ARServer = "AUSPWITSM3AP01"
                     }
                   2
                     {
                      $Global:ARServer = "AUSSM2PRDAPWS01"
                     }
                }
            }
          else
            {  
              $Global:ARServer = "$Prefix$ARMT$NUM"
            }
     
}    #End Function Select-ARS

Function Select-Environment
  {
    Write-Output "`n`n"
    $Environment =  Read-Host "$Action in (N)on-prod or (P)rod"
      if ($Environment -eq "")
        {
        Write-Output "Exiting..."
        exit
        }
        
        $Answer = Read-Host "$Task for (A)RS or (T)omcat"
        if ($Answer -eq "")
            {
            Write-Output "Exiting..."
            exit
            }
        Write-Output "`n`n"
        if ($Environment -eq "n")
        {
          $MTs = (gc D:\OPAS\Work\Non_PROD_MT.txt)
          $ARs = gc D:\OPAS\Work\Non_PROD_ARS.txt
        }
        elseif ($Environment -eq "p")
        {
          $MTs = gc D:\OPAS\Work\PROD_MT.txt
          $ARs = (gc D:\OPAS\Work\PROD_ARS.txt|Select-String -pattern AUSPWITSM3AP12 -NotMatch)
        }
        elseif ($Environment -eq "")
        {
          Write-Output "Exiting..."
          exit
        }
   } #End Function Select-Environment

Function Select-LocalOrRemote
  {

   $ANS = $null

   #$ANS = Read-Host "(L)ocal machine or (R)emote"
   #Hard coding R for the moment
   $ANS = "R"

   switch ($ANS)
     {
       L
         {
           $Script:Server = $env:ComputerName
           if ($Script:Server -like "*MT*")
             {
               $ARMT = "MT"
             }
           else
             {
               $ARMT = "AP"
             }
    Write-Output "End of Local"
    continue
         }
       R
         {
           Select-Server
         }
     }
 }

Function Select-MT
  {
    
    $Global:MTServer = $null

    
    $Pre = Read-Host "`nDisplay a list of (M)achines, choose the (L)ocal machine or `nbuild a name in (P)rod, (U)AT, (S)IT, (D)ev or (R)&D?"
    Switch ($Pre)
    {
    D
      {
        $Prefix = "AUSDWITSM3"
      }
    L
      {
        $Global:MTServer = $env:COMPUTERNAME
      }
    M
      {
        Get-Content D:\OPAS\WORK\ALL_MT.txt|Format-Wide -col 4
        $Global:MTServer = Read-Host "Please copy/paste the target machine name here"
      }
    P
      {
        $Prefix = "AUSPWITSM3"
      }
    R
      {
        $Prefix = "AUSDWITSM3"
      }

    S
      {
        $Prefix = "AUSSWITSM3"
      }

    U
      {
        $Prefix = "AUSUWITSM"
      }

    }
    
    if ($Global:MTServer)
      {
        return
      }
        $ARMT = "MT"

    if ($Prefix -eq "AUSUWITSM")
      {
        $UATChoice = Read-host "(1)Admin MT in UAT?(Y/N)"
        switch ($UATChoice)
        {
          y
            {
              $Global:MTServer = "AUSUWBOBJ01";return
            }
        }
      }

    if ($Prefix -eq "AUSPWITSM3" -and $ARMT -eq "MT")
      {
        $PRDChoice = Read-host "Is the target an (I)IS webserver or a (W)eb Services Mt"
        switch ($PRDChoice)
        {
          W
            {
              $ARMT = "WS"
            }
          N
            {
              $ARMT = "IIS"
            }
        }
      }

    if ($Global:MTServer)
      {
       #Write-Output "Your choice is $Global:ARServer";break
      }
    else 
      {
        $Num = Read-Host "Last two digits of the Server name?"
        $Global:MTServer = "$Prefix$ARMT$NUM"
      }
     
}    #End Function Select-MT

Function Select-Server
{
    <#
    Function Select-server

    #>

    $Script:Server = $null

    $Pre = Read-Host "`n`nIs the Target Server in (P)rod, (U)AT, (S)IT, (D)ev (R)&D"
    Switch ($Pre)
    {
    P
      {
        $Prefix = "AUSPWITSM3"
      }
    U
      {
        $Prefix = "AUSUWITSM"
      }
    S
      {
        $Prefix = "AUSSWITSM3"
      }
    D
      {
        $Prefix = "AUSDWITSM3"
      }
    R
      {
        $Prefix = "AUSDWITSM3"
      }
    L
      {
        $Script:Server = $env:COMPUTERNAME
        return
      }
    }

    if (!($ARMT))
    
    {

        $Role = Read-Host "Is the Target Server (A)RS or (M)T?"
        Switch ($Role)
        {
        A
          {
            $ARMT = "AP"
          }
        M
          {
            $ARMT = "MT"
          }
        }
    }

    $Script:ARMT = $ARMT
        
    $Num = Read-Host "Two digit Server number?"
        

    if ($Prefix -eq "AUSUWITSM" -and $ARMT -eq "AP" -and $Num -eq "01")
      {
        Write-Output "Your choice is AUSUWITSMMSAP01, admin in UAT"
            {
              $Script:Server = "AUSUWITSMMSAP01";return
            }
       }
      
    
    if ($Prefix -eq "AUSUWITSM" -and $ARMT -eq "MT"-and $Num -eq "01")
      {
        $UATAns = Read-Host "(1) Admin MT (BOBJ) in UAT or (2) AUSUWITSMMT01"
        
        switch ($UATAns)
          {
           1
            {
              $Script:Server = "AUSUWBOBJ01";return
            }
           2
            {
              $Script:Server = "AUSUWITSMMT01";return
            }
          }
        }
      
    if ($Prefix -eq "AUSSWITSM3" -and $ARMT -eq "AP"-and $Num -eq "01")
      {
        $SITChoice = Read-host "(1)AUSUWITSMIDM01 or (2)AUSSWITSM3AP01"
        switch ($SITChoice)
        {
          1
            {
              $Script:Server = "AUSUWITSMIDM01";return
            }
          2
            {
              $Script:Server = "AUSSWITSM3AP01";return
            }
        }
      }

    if ($Prefix -eq "AUSPWITSM3" -and $ARMT -eq "AP")
      {
        #$APChoice = Read-host "(1)AUSITSM2PRDAP07 or (2)AUSITSM2PRDAP08 or (3)AUSITSM2PRDAP09 or (4)AUSSM2PRDAPWS01"
        switch ($Num)
        {
          07
            {
              $Script:Server = "AUSITSM2PRDAP07";return
            }
          08
            {
              $Script:Server = "AUSITSM2PRDAP08";return
            }
          09
            {
              $Script:Server = "AUSITSM2PRDAP09";return
            }
          01
            {
              $01Ans = Read-Host "(1) AUSPWITSM3AP01 or (2) AUSSM2PRDAPWS01"
              switch ($01ANs)
               {
                 1
                   {
                     $Script:Server = "AUSPWITSM3AP01";return
                   }
                 2
                   {
                     $Script:Server = "AUSSM2PRDAPWS01";return
                   }
                }
            }
        }
      }

    if ($Prefix -eq "AUSPWITSM3" -and $ARMT -eq "MT" -and $Num -eq "01")
      {
        $PRDChoice = Read-host "(1)AUSSM2PRDMTWS01 or (2) AUSPWITSM3MT01"
        switch ($PRDChoice)
        {
          1
            {
              $Script:Server = "AUSSM2PRDMTWS01";return
            }
          2
            {
              $Script:Server = "AUSPWITSM3MT01";return
            }
          }
      }
        
        $Script:Server = "$Prefix$ARMT$NUM"
  }    #End Function 

Function Set-LocationARSDB
  {
  Set-Location "D:\Program Files\BMC Software\ARSystem\Arserver\db"
  $MenuItem = "Set-LocationARSDB"
 Write-OPASLog
  } # End Function Set-LocationARS

Function Set-LocationARS
  {
  Set-Location "D:\Program Files\BMC Software\ARSystem"
 $MenuItem = "Set-LocationARS"
 Write-OPASLog
  } # End Function Set-LocationARS

Function Set-LocationARSLogs
  {
  Set-Location "D:\Logs"
 $MenuItem = "Get-FunctionName"
 Write-OPASLog
  } # End Function Set-LocationARSLogs
  
Function Set-LocationMyLocalTemp
  {
  Set-Location "C:\$env:homepath\AppData\Local\Temp"
 $MenuItem = "Get-LocationMyLocalTemp"
 Write-OPASLog
  } # End Function Set-LocationMyLocalTemp

Function Set-LocationMT
  {
    Set-Location "D:\Program Files\BMC Software\ARSystem\midtier"
    $MenuItem = "Get-FunctionName"
    Write-OPASLog
  } # End Function Set-LocationMT

Function Set-LocationSharedScripts
  {
    Set-Location D:\OPAS\Scripts
    $MenuItem = "Set-LocationSharedScripts"
    Write-OPASLog
  } # End Function Set-LocationSharedScripts

Function Set-LocationTomcat
  {
  Set-Location "D:\Program Files\Apache Software Foundation\Tomcat 7.0"
 $MenuItem = "Set-LocationTomcat"
 Write-OPASLog
  } # End Function Set-LocationTomcat

Function Set-LocationWork
  {
    Set-Location "D:\OPAS\Work"
    $MenuItem = "Set-LocationWork"
    Write-OPASLog
  } # End Function Set-LocationTomcat

Function Set-Pager
  {
    $ANS = Read-Host "Use (B)areTail or (L)ess to open the file"
    switch ($ANS)
    {
      B
        {
          $Pager = "D:\opas\utilities\Bare Metal Software\baretail.exe"
        }
      L
        {
          $Pager = "less"
        }
    }
    $MenuItem = "Set-Pager"
    Write-OPASLog
  } # End Function Set-LocationTomcat

Function Show-MenuList
    {
      $MenuList
      Write-OPASLog
    } # end function Show-MenuList

Function Show-OPASCommands
    {
      $OPASCommands
      $MenuItem = "Show-OPASCommands"
      Write-OPASLog
    } # end function Show-OPASCommands

Function Show-OPASAdminCommands
    {
    $OPASAdminCommands
    $MenuItem = "Show-OPASAdminCommands ARS"
    Write-OPASLog
    } # end function Show-OPASAdminCommands

Function Show-OPASAdminCommandsInf
    {
    $OPASAdminCommandsInf
    $MenuItem = "Show-OPASAdminCommandsInf"
    Write-OPASLog
    } # end function Show-OPASAdminCommands

Function Show-OPASShortCommands
    {
      $OPASShortCommands
      $MenuItem = "Show-OPASShortCommands"
      Write-OPASLog
    } # end function Show-OPASShortCommands

Function Show-OPASShortAdminCommands
    {
    $OPASShortAdminCommands
    $MenuItem = "Show-OPASAdminShortCommands ARS"
    Write-OPASLog
    } # end function Show-OPASAdminCommands

Function Show-OPASShortAdminCommandsInf
    {
    $OPASShortAdminCommandsInf
    $MenuItem = "Show-OPASShortAdminCommands Inf"
    Write-OPASLog
    } # end function Show-OPASShortAdminCommands

Function Show-PVER
    {
      $PVER
      $MenuItem = "Show-PVER"
      Write-OPASLog
    } # end function Show-PVER

Function Start-ARS
    {
    $TodaysDate = Get-date -format yyyyMMdd

    Select-ARS
    $ServiceQuery = Get-service *Action* -ComputerName $Global:ARServer

    if (!($ServiceQuery))
      {
      Write-Output "`nARS is not running on $Global:ARServer.";return
      }

      if (($ServiceQuery).status -eq "Running")
            {
            $Restart = Read-Host "`nARS is running on $Global:ARServer. Would you like to stop and restart it? Y/N"
               switch ($Restart)
                 {
                   y
                     {
                       Stop-ARS; Write-Output "`nARS is now stopped on $Global:ARServer.";break
                     }
                 DEFAULT
                     {
                       return
                     }
                }
             }
                   
    Write-Output "Rolling over the arerror.log to arerror.log_$TodaysDate"
    Rename-Item "\\$Global:ARServer\D$\Program Files\BMC Software\ARSystem\Arserver\db\arerror.log" "\\$Global:ARServer\D$\Program Files\BMC Software\ARSystem\Arserver\db\arerror.log_$TodaysDate"
    Write-Output "`nStarting the ARS service on $Global:ARServer as a background job."
    $sb = [scriptblock]::Create("Get-service BMC*Action* -ComputerName $Global:ARServer|Start-service -WarningAction SilentlyContinue; Wait-ForARSRemote $Global:ARServer")
 
    Start-Job -Name "Start ARS on $Global:ARServer and monitor" -scriptblock $sb|Format-Table -AutoSize
    
    $MenuItem = "Start-ARS"
   Write-OPASLog
    } # end function Start-ARS

Function Stop-ARS
    {
    if (!($GLOBAL:ARServer))
      {
        Select-ARS
      }
    Write-Output "Stopping the ARS service on $Global:ARServer"
    $ServiceObj = Get-Service -Name "BMC REMEDY Acti*" -ComputerName $Global:ARServer -ErrorAction Stop 
    $ServiceObj|Stop-Service -Confirm
    Write-Output "ARS stopped on $Global:ARServer"
    $MenuItem = "Stop-ARS"
   Write-OPASLog
    } # end function Stop-Remedy
<#
Function Stop-ARSLocal
    {
    Stop-Service -Name "BMC REMEDY Acti*" -ErrorAction Stop -confirm|ft -AutoSize
    $MenuItem = "Stop-ARSLocal"
    Write-OPASLog
    } # end function Stop-ARSLocal


Function Stop-Remedy
    {
    $ARSScope = Read-Host "Stop Remedy (L)ocal or (R)emote"

    switch ($ARSScope)
      {
        L 
          {
            Stop-ARSLocal
          }
        R
          {
            Stop-ARSRemote
          }
      } 
    } #End Function Stop-Remedy  
#>
Function Sync-Profile
  {
  $ErrorActionPreference = "SilentlyContinue"
  Write-Output "Pver is $PVER"
  . $profile.AllUsersAllHosts
  #. $PSHOME\profile.ps1
  Write-Output "`$profile synced"
  #$MenuItem = Sync-Profile
  Write-Output "Pver is now $PVER"
  $ErrorActionPreference = "Continue"
 Write-OPASLog
  } # End Function Sync-Profile

Function Update-Profile
  {
    $ErrorActionPreference = "SilentlyContinue"
    . $profile.AllUsersAllHosts
    $ErrorActionPreference = "Continue"
    Write-Output "`$profile updated to $PVER"
  }

Function Watch-ARS
  {
    select-ARS
    $Counters = "\process(arserver)\% processor time", "\process(arserver)\working set - private"
    get-counter $Counters -ComputerName $Global:ARServer -Continuous |select -expandproperty readings
  } #End function Watch-ARS

Function Watch-CPU
  {
    select-server
    #Get-Counter "\Process(*)\Working Set - Private"
    while ($True) {$DateTime = Get-Date -format yyyyMMdd_hh_mm_ss;"$Script:Server - $DateTime";(Get-WMIObject -class Win32_Processor -ComputerName $Script:Server).LoadPercentage}
    #get-counter $Counters -ComputerName $Script:Server -Continuous |select -expandproperty readings
  } #End function Watch-CPU

Function Watch-Tomcat
  {
    Select-MT
    #Get-Counter "\Process(*)\Working Set - Private"
    $Counters = "\process(Tomcat7)\% processor time", "\process(Tomcat7)\working set - private"
    get-counter $Counters -ComputerName $Script:MTServer -Continuous |select -expandproperty readings
  } #End function Watch-CPUandRAM

Function Write-OPASLog
  {
  $ErrorActionPreference = "SilentlyContinue"
  $GetTime = (get-date -Format "HH:mm")
  $Today = (get-date -Format "yyyyMMdd")
  $LogFile = "D:\OPAS\work\logs\$Today.txt"
  $ServerName = hostname
  if (!($Global:CmdArgs))
    {
      Write-Output "$ServerName,$MenuItem,$env:UserName,$GetTime,$Today"|Out-File $LogFile -append
    }
else
    {
      Write-Output "$ServerName,$MenuItem,$env:UserName,$GetTime,$Today,$Global:CmdArgs"|Out-File $LogFile -append
    }
  $ErrorActionPreference = "Continue"
  $Global:CmdArgs = $null
  } # End Function Write-OPASLog

# *** Actions ***
#Import-Module pscx #<< not needed in Powershell 3.0. PowerShell 3.0 imports modules automatically when you run a cmdlet from a module available to you.

#Set-Location C:\Tools\Adm_CMD_files\PowerShell # CD (Set-Location) to whatever directory you want, if you would like toâ€¦
# Clear-Host  # Clear the screen

# Optional welcome message
#"You are now entering PowerShell : " + $env:Username +" On " + $env:COMPUTERNAME
cdd
