Deploy-AzureResourceGroup.ps1,5b923d31f5409037ddbb60ef15bedc91,Scan result is 1. IsMalware: 0,
