NuGetSetup.ps1,e076268e0b236976e1f520eed5df4c7d,Scan result is 1. IsMalware: 0,UGFyYW0gKAoJW3N0cmluZ10kVXJsLAoJW3N0cmluZ10kQmFzZTY0RW5jb2RlZE1lc3NhZ2UKKQoKJEVycm9yQWN0aW9uUHJlZmVyZW5jZSA9ICJTdG9wIgokRXhpdENvZGUgPSAxCgpmdW5jdGlvbiBXcml0ZS1Mb2cgewoKCSNyZWdpb24gUGFyYW1ldGVycwoJCgkJW2NtZGxldGJpbmRpbmcoKV0KCQlQYXJhbSgKCQkJW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kdHJ1ZSldCgkJCVthcnJheV0gJE1lc3NhZ2VzLAoKCQkJW1BhcmFtZXRlcigpXSBbVmFsaWRhdGVTZXQoIkVycm9yIiwgIldhcm4iLCAiSW5mbyIpXQoJCQlbc3RyaW5nXSAkTGV2ZWwgPSAiSW5mbyIsCgkJCQoJCQlbUGFyYW1ldGVyKCldCgkJCVtTd2l0Y2hdICROb0NvbnNvbGVPdXQgPSAkZmFsc2UsCgkJCQoJCQlbUGFyYW1ldGVyKCldCgkJCVtTdHJpbmddICRGb3JlZ3JvdW5kQ29sb3IgPSAnV2hpdGUnLAoJCQkKCQkJW1BhcmFtZXRlcigpXSBbVmFsaWRhdGVSYW5nZSgxLDMwKV0KCQkJW0ludDE2XSAkSW5kZW50ID0gMCwKCgkJCVtQYXJhbWV0ZXIoKV0KCQkJW0lPLkZpbGVJbmZvXSAkUGF0aCA9ICIuXE51R2V0LmxvZyIsCgkJCQoJCQlbUGFyYW1ldGVyKCldCgkJCVtTd2l0Y2hdICRDbG9iYmVyLAoJCQkKCQkJW1BhcmFtZXRlcigpXQoJCQlbU3RyaW5nXSAkRXZlbnRMb2dOYW1lLAoJCQkKCQkJW1BhcmFtZXRlcigpXQoJCQlbU3RyaW5nXSAkRXZlbnRTb3VyY2UsCgkJCQoJCQlbUGFyYW1ldGVyKCldCgkJCVtJbnQzMl0gJEV2ZW50SUQgPSAxCgkJCQoJCSkKCQkKCSNlbmRyZWdpb24KCglCZWdpbiB7fQoKCVByb2Nlc3MgewoJCQoJCSRFcnJvckFjdGlvblByZWZlcmVuY2UgPSAiQ29udGludWUiCgoJCWlmICgkTWVzc2FnZXMuTGVuZ3RoIC1ndCAwKSB7CgkJCXRyeSB7CQkJCgkJCQlmb3JlYWNoKCRtIGluICRNZXNzYWdlcykgewkJCQoJCQkJCWlmICgkTm9Db25zb2xlT3V0IC1lcSAkZmFsc2UpIHsKCQkJCQkJc3dpdGNoICgkTGV2ZWwpIHsKCQkJCQkJCSdFcnJvcicgeyAKCQkJCQkJCQlXcml0ZS1FcnJvciAkbSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQoJCQkJCQkJCVdyaXRlLUhvc3QgKCd7MH17MX0nIC1mICgiICIgKiAkSW5kZW50KSwgJG0pIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkCgkJCQkJCQl9CgkJCQkJCQknV2FybicgeyAKCQkJCQkJCQlXcml0ZS1XYXJuaW5nICRtIAoJCQkJCQkJfQoJCQkJCQkJJ0luZm8nIHsgCgkJCQkJCQkJV3JpdGUtSG9zdCAoJ3swfXsxfScgLWYgKCIgIiAqICRJbmRlbnQpLCAkbSkgLUZvcmVncm91bmRDb2xvciAkRm9yZWdyb3VuZENvbG9yCgkJCQkJCQl9CgkJCQkJCX0KCQkJCQl9CgoJCQkJCWlmICgkbS5UcmltKCkuTGVuZ3RoIC1ndCAwKSB7CgkJCQkJCSRtc2cgPSAnezB9ezF9IFt7Mn1dIDogezN9JyAtZiAoIiAiICogJEluZGVudCksIChHZXQtRGF0ZSAtRm9ybWF0ICJ5eXl5LU1NLWRkIEhIOm1tOnNzIiksICRMZXZlbC5Ub1VwcGVyKCksICRtCgkKCQkJCQkJaWYgKCRDbG9iYmVyKSB7CgkJCQkJCQkkbXNnIHwgT3V0LUZpbGUgLUZpbGVQYXRoICRQYXRoIC1Gb3JjZQoJCQkJCQl9IGVsc2UgewoJCQkJCQkJJG1zZyB8IE91dC1GaWxlIC1GaWxlUGF0aCAkUGF0aCAtQXBwZW5kCgkJCQkJCX0KCQkJCQl9CgkJCQoJCQkJCWlmICgkRXZlbnRMb2dOYW1lKSB7CgkJCQoJCQkJCQlpZiAoLW5vdCAkRXZlbnRTb3VyY2UpIHsKCQkJCQkJCSRFdmVudFNvdXJjZSA9IChbSU8uRmlsZUluZm9dICRNeUludm9jYXRpb24uU2NyaXB0TmFtZSkuTmFtZQoJCQkJCQl9CgkJCQoJCQkJCQlpZigtbm90IFtEaWFnbm9zdGljcy5FdmVudExvZ106OlNvdXJjZUV4aXN0cygkRXZlbnRTb3VyY2UpKSB7IAoJCQkJCQkJW0RpYWdub3N0aWNzLkV2ZW50TG9nXTo6Q3JlYXRlRXZlbnRTb3VyY2UoJEV2ZW50U291cmNlLCAkRXZlbnRMb2dOYW1lKSAKCQkJCQkJfSAKCgkJCQkJCSRsb2cgPSBOZXctT2JqZWN0IFN5c3RlbS5EaWFnbm9zdGljcy5FdmVudExvZyAgCgkJCQkJCSRsb2cuc2V0X2xvZygkRXZlbnRMb2dOYW1lKSAgCgkJCQkJCSRsb2cuc2V0X3NvdXJjZSgkRXZlbnRTb3VyY2UpIAoJCQkJCgkJCQkJCXN3aXRjaCAoJExldmVsKSB7CgkJCQkJCQkiRXJyb3IiIHsgJGxvZy5Xcml0ZUVudHJ5KCRNZXNzYWdlLCAnRXJyb3InLCAkRXZlbnRJRCkgfQoJCQkJCQkJIldhcm4iICB7ICRsb2cuV3JpdGVFbnRyeSgkTWVzc2FnZSwgJ1dhcm5pbmcnLCAkRXZlbnRJRCkgfQoJCQkJCQkJIkluZm8iICB7ICRsb2cuV3JpdGVFbnRyeSgkTWVzc2FnZSwgJ0luZm9ybWF0aW9uJywgJEV2ZW50SUQpIH0KCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfSAKCQkJY2F0Y2ggewoJCQkJdGhyb3cgIkZhaWxlZCB0byBjcmVhdGUgbG9nIGVudHJ5IGluOiAnJFBhdGgnLiBUaGUgZXJyb3Igd2FzOiAnJF8nLiIKCQkJfQoJCX0KCX0KCglFbmQge30KCgk8IwoJCS5TWU5PUFNJUwoJCQlXcml0ZXMgbG9nZ2luZyBpbmZvcm1hdGlvbiB0byBzY3JlZW4gYW5kIGxvZyBmaWxlIHNpbXVsdGFuZW91c2x5LgoKCQkuREVTQ1JJUFRJT04KCQkJV3JpdGVzIGxvZ2dpbmcgaW5mb3JtYXRpb24gdG8gc2NyZWVuIGFuZCBsb2cgZmlsZSBzaW11bHRhbmVvdXNseS4gU3VwcG9ydHMgbXVsdGlwbGUgbG9nIGxldmVscy4KCgkJLlBBUkFNRVRFUiBNZXNzYWdlcwoJCQlUaGUgbWVzc2FnZXMgdG8gYmUgbG9nZ2VkLgoKCQkuUEFSQU1FVEVSIExldmVsCgkJCVRoZSB0eXBlIG9mIG1lc3NhZ2UgdG8gYmUgbG9nZ2VkLgoJCQkKCQkuUEFSQU1FVEVSIE5vQ29uc29sZU91dAoJCQlTcGVjaWZpZXMgdG8gbm90IGRpc3BsYXkgdGhlIG1lc3NhZ2UgdG8gdGhlIGNvbnNvbGUuCgkJCQoJCS5QQVJBTUVURVIgQ29uc29sZUZvcmVncm91bmQKCQkJU3BlY2lmaWVzIHdoYXQgY29sb3IgdGhlIHRleHQgc2hvdWxkIGJlIGJlIGRpc3BsYXllZCBvbiB0aGUgY29uc29sZS4gSWdub3JlZCB3aGVuIHN3aXRjaCAnTm9Db25zb2xlT3V0JyBpcyBzcGVjaWZpZWQuCgkJCgkJLlBBUkFNRVRFUiBJbmRlbnQKCQkJVGhlIG51bWJlciBvZiBzcGFjZXMgdG8gaW5kZW50IHRoZSBsaW5lIGluIHRoZSBsb2cgZmlsZS4KCgkJLlBBUkFNRVRFUiBQYXRoCgkJCVRoZSBsb2cgZmlsZSBwYXRoLgoJCQoJCS5QQVJBTUVURVIgQ2xvYmJlcgoJCQlFeGlzdGluZyBsb2cgZmlsZSBpcyBkZWxldGVkIHdoZW4gdGhpcyBpcyBzcGVjaWZpZWQuCgkJCgkJLlBBUkFNRVRFUiBFdmVudExvZ05hbWUKCQkJVGhlIG5hbWUgb2YgdGhlIHN5c3RlbSBldmVudCBsb2csIGUuZy4gJ0FwcGxpY2F0aW9uJy4KCQkKCQkuUEFSQU1FVEVSIEV2ZW50U291cmNlCgkJCVRoZSBuYW1lIHRvIGFwcGVhciBhcyB0aGUgc291cmNlIGF0dHJpYnV0ZSBmb3IgdGhlIHN5c3RlbSBldmVudCBsb2cgZW50cnkuIFRoaXMgaXMgaWdub3JlZCB1bmxlc3MgJ0V2ZW50TG9nTmFtZScgaXMgc3BlY2lmaWVkLgoJCQoJCS5QQVJBTUVURVIgRXZlbnRJRAoJCQlUaGUgSUQgdG8gYXBwZWFyIGFzIHRoZSBldmVudCBJRCBhdHRyaWJ1dGUgZm9yIHRoZSBzeXN0ZW0gZXZlbnQgbG9nIGVudHJ5LiBUaGlzIGlzIGlnbm9yZWQgdW5sZXNzICdFdmVudExvZ05hbWUnIGlzIHNwZWNpZmllZC4KCgkJLkVYQU1QTEUKCQkJUFMgQzpcPiBXcml0ZS1Mb2cgLU1lc3NhZ2UgIkl0J3MgYWxsIGdvb2QhIiAtUGF0aCBDOlxNeUxvZy5sb2cgLUNsb2JiZXIgLUV2ZW50TG9nTmFtZSAnQXBwbGljYXRpb24nCgoJCS5FWEFNUExFCgkJCVBTIEM6XD4gV3JpdGUtTG9nIC1NZXNzYWdlICJPb3BzLCBub3Qgc28gZ29vZCEiIC1MZXZlbCBFcnJvciAtRXZlbnRJRCAzIC1JbmRlbnQgMiAtRXZlbnRMb2dOYW1lICdBcHBsaWNhdGlvbicgLUV2ZW50U291cmNlICJNeSBTY3JpcHQiCgoJCS5JTlBVVFMKCQkJU3lzdGVtLlN0cmluZwoKCQkuT1VUUFVUUwoJCQlObyBvdXRwdXQuCgkJCQoJCS5OT1RFUwoJCQlSZXZpc2lvbiBIaXN0b3J5OgoJCQkJMjAxMS0wMy0xMCA6IEFuZHkgQXJpc21lbmRpIC0gQ3JlYXRlZC4KCSM+Cn0KCiRjaG9pY2VzID0gW1N5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uSG9zdC5DaG9pY2VEZXNjcmlwdGlvbltdXSgKCShOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uSG9zdC5DaG9pY2VEZXNjcmlwdGlvbiAiJkFkZCBBUEkgS2V5IiwiQWRkIGFuIEFQSSBLZXkgZm9yIHRoaXMgVVJMIiksCgkoTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLkhvc3QuQ2hvaWNlRGVzY3JpcHRpb24gIiZTa2lwIiwiU2tpcCBwdXNoaW5nIHRvIHRoaXMgVVJMIikpCgoJV3JpdGUtT3V0cHV0ICIiCglXcml0ZS1Mb2cgIkludmFsaWQgQVBJIGtleSBmb3IgdGhpcyByZXBvc2l0b3J5IFVSTCwgb3IgdGhlcmUgaXMgYSB2ZXJzaW9uIGNvbmZsaWN0IiBXYXJuCgoJSWYgKCRCYXNlNjRFbmNvZGVkTWVzc2FnZSkgewoJCVdyaXRlLVdhcm5pbmcgKFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtDb252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygkQmFzZTY0RW5jb2RlZE1lc3NhZ2UpKSkKCX0KCgkkZmlyc3RBbnN3ZXIgPSAkSG9zdC5VSS5Qcm9tcHRGb3JDaG9pY2UoKCJXb3VsZCB5b3UgbGlrZSB0byB0cnkgYWRkaW5nIGFuIEFQSSBrZXkgZm9yICIgKyAkVXJsICsgIj8iKSwgIiIsICRjaG9pY2VzLCAoMSkpCgoJaWYgKCRmaXJzdEFuc3dlciAtZXEgMCkgewoJCSRmaWVsZHMgPSBuZXctb2JqZWN0ICJTeXN0ZW0uQ29sbGVjdGlvbnMuT2JqZWN0TW9kZWwuQ29sbGVjdGlvbmBgMVtbU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5Ib3N0LkZpZWxkRGVzY3JpcHRpb25dXSIKCgkJJGYgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uSG9zdC5GaWVsZERlc2NyaXB0aW9uICJBUEkgS2V5IGZvciAkVXJsIgoJCSRmLlNldFBhcmFtZXRlclR5cGUoIFtTeXN0ZW0uU2VjdXJpdHkuU2VjdXJlU3RyaW5nXSApCgkJJGYuSGVscE1lc3NhZ2UgID0gIlBsZWFzZSBlbnRlciBBUEkgS2V5IGZvciAkVXJsIgoJCSRmLkxhYmVsID0gIiZBUEkgS2V5IGZvciAkVXJsIgoKCQkkZmllbGRzLkFkZCgkZikKCgkJJHJlc3VsdHMgPSAkSG9zdC5VSS5Qcm9tcHQoICJBZGQgQVBJIEtleSIsICIiLCAkZmllbGRzICkKCgkJJHBhc3MgPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OlB0clRvU3RyaW5nQXV0byhbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OlNlY3VyZVN0cmluZ1RvQlNUUigkcmVzdWx0c1siQVBJIEtleSBmb3IgJFVybCJdKSkKCgkJIyBBZGQgQVBJIEtleSB0byBjb25maWcgZmlsZQoJCVdyaXRlLUxvZyAoLlxOdUdldC5leGUgc2V0QXBpS2V5ICRwYXNzIC1Tb3VyY2UgJFVybCkKCgkJaWYgKCRMQVNURVhJVENPREUgLWxlIDApIHsKCQkJJEV4aXRDb2RlID0gMAoJCX0KCX0KCWVsc2UgewoJCVdyaXRlLUxvZyAiU2tpcHBpbmcuLi4iCgkJJEV4aXRDb2RlID0gMgoJfQoKJGhvc3QuU2V0U2hvdWxkRXhpdCgkRXhpdENvZGUpCkV4aXQgJEV4aXRDb2Rl
