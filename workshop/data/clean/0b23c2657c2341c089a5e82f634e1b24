KeePassConfig.ps1,e2ee83ffd2dcf6c7add8d2121389d767,Scan result is 1. IsMalware: 0,I3JlcXVpcmVzIC12ZXJzaW9uIDIKCmZ1bmN0aW9uIEZpbmQtS2VlUGFzc2NvbmZpZyB7CjwjCiAgICAuU1lOT1BTSVMKCiAgICAgICAgRmluZHMgYW5kIHBhcnNlcyBhbnkgS2VlUGFzcy5jb25maWcueG1sICgyLlgpIGFuZCBLZWVQYXNzLmluaSAoMS5YKSBmaWxlcy4KCiAgICAgICAgQXV0aG9yOiBAaGFybWoweQogICAgICAgIExpY2Vuc2U6IEJTRCAzLUNsYXVzZQogICAgICAgIFJlcXVpcmVkIERlcGVuZGVuY2llczogTm9uZQogICAgICAgIE9wdGlvbmFsIERlcGVuZGVuY2llczogTm9uZQoKICAgIC5ERVNDUklQVElPTgoKICAgICAgICBUaGlzIGZ1bmN0aW9uIHNlYXJjaGVzIGZvciBhbnkgS2VlUGFzcy5jb25maWcueG1sIChLZWVQYXNzIDIuWCkgYW5kIEtlZVBhc3MuaW5pICgxLlgpIGZpbGVzIGluIEM6XFVzZXJzXAogICAgICAgIGFuZCBDOlxQcm9ncmFtIEZpbGVzW3g4Nl1cIGJ5IGRlZmF1bHQsIG9yIGFueSBwYXRoIHNwZWNpZmllZCBieSAtUGF0aC4gRm9yIGFueSBmaWxlcyBmb3VuZCwgaXQgd2lsbCAKICAgICAgICBwYXJzZSB0aGUgWE1MIGFuZCBvdXRwdXQgaW5mb3JtYXRpb24gcmVsZXZhbnQgdG8gdGhlIGRhdGFiYXNlIGxvY2F0aW9uIGFuZCBrZXlmaWxlL3VzZXIgbWFzdGVyIGtleSBpbmZvcm1hdGlvbi4KCiAgICAuUEFSQU1FVEVSIFBhdGgKCiAgICAgICAgT3B0aW9uYWwgcGF0aCB0byBhIEtlZVBhc3MuY29uZmlnLnhtbC9LZWVQYXNzLmluaSBmaWxlIG9yIHNwZWNpZmljIGZvbGRlciB0byBzZWFyY2ggZm9yIEtlZVBhc3MgY29uZmlnIGZpbGVzLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gRmluZC1LZWVQYXNzY29uZmlnCgogICAgICAgIERlZmF1bHREYXRhYmFzZVBhdGggICAgOiBDOlxVc2Vyc1x0ZXN0dXNlclxEZXNrdG9wXERhdGFiYXNlMi5rZGIKICAgICAgICBTZWN1cmVEZXNrdG9wICAgICAgICAgIDoKICAgICAgICBMYXN0VXNlZEZpbGUgICAgICAgICAgIDogQzpcVXNlcnNcdGVzdHVzZXJcRGVza3RvcFxEYXRhYmFzZTMua2RiCiAgICAgICAgRGVmYXVsdEtleUZpbGVQYXRoICAgICA6IEM6XFVzZXJzXHRlc3R1c2VyXERlc2t0b3Bcay5iaW4KICAgICAgICBEZWZhdWx0VXNlckFjY291bnREYXRhIDoKICAgICAgICBSZWNlbnRseVVzZWQgICAgICAgICAgIDoge0M6XFVzZXJzXHRlc3R1c2VyXERlc2t0b3BcRGF0YWJhc2UzLmtkYiwgQzpcVXNlcnNcdGVzdHVzZXJcRGVza3RvcFxrMi5iaW59CiAgICAgICAgS2VlUGFzc0NvbmZpZ1BhdGggICAgICA6IEM6XFVzZXJzXHRlc3R1c2VyXERlc2t0b3BcYmxhaFxLZWVQYXNzLTEuMzFcS2VlUGFzcy5pbmkKCiAgICAgICAgRGVmYXVsdERhdGFiYXNlUGF0aCAgICA6IEM6XFVzZXJzXHRlc3R1c2VyXERlc2t0b3BcTmV3RGF0YWJhc2Uua2RieAogICAgICAgIFNlY3VyZURlc2t0b3AgICAgICAgICAgOiBGYWxzZQogICAgICAgIExhc3RVc2VkRmlsZSAgICAgICAgICAgOiBDOlxVc2Vyc1x0ZXN0dXNlclxEZXNrdG9wXE5ld0RhdGFiYXNlLmtkYngKICAgICAgICBEZWZhdWx0S2V5RmlsZVBhdGggICAgIDogQzpcVXNlcnNcdGVzdHVzZXJcRGVza3RvcFxibGFoXEtlZVBhc3MtMi4zNFxLZWVQYXNzLmNobQogICAgICAgIERlZmF1bHRVc2VyQWNjb3VudERhdGEgOiBAe1VzZXJEb21haW49VEVTVExBQjsgVXNlcktlZVBhc3NEUEFQSUJsb2I9QzpcVXNlcnNcdGVzdHVzZXJcQXBwRGF0YVxSb2FtaW5nXEtlZVBhc3NcUHJvdGVjdGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVzZXJLZXkuYmluOyBVc2VyU2lkPVMtMS01LTIxLTQ1NjIxODY4OC00MjE2NjIxNDYyLTE0OTEzNjkyOTAtMTIxMDsgVXNlck5hbWU9dGVzdHVzZXI7IFVzZXJNYXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVyS2V5RmlsZXM9U3lzdGVtLk9iamVjdFtdfQogICAgICAgIFJlY2VudGx5VXNlZCAgICAgICAgICAgOiB7QzpcVXNlcnNcdGVzdHVzZXJcRGVza3RvcFxOZXdEYXRhYmFzZS5rZGJ4fQogICAgICAgIEtlZVBhc3NDb25maWdQYXRoICAgICAgOiBDOlxVc2Vyc1x0ZXN0dXNlclxEZXNrdG9wXGJsYWhcS2VlUGFzcy0yLjM0XEtlZVBhc3MuY29uZmlnLnhtbAojPgoKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVTY3JpcHQoe1Rlc3QtUGF0aCAtUGF0aCAkXyB9KV0KICAgICAgICBbQWxpYXMoJ0Z1bGxOYW1lJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRQYXRoCiAgICApCgogICAgQkVHSU4gewoKICAgICAgICBmdW5jdGlvbiBsb2NhbDpHZXQtSW5pQ29udGVudCB7CiAgICAgICAgPCMKICAgICAgICAgICAgLlNZTk9QU0lTCgogICAgICAgICAgICAgICAgVGhpcyBoZWxwZXIgcGFyc2VzIGFuIC5pbmkgZmlsZSBpbnRvIGEgcHJvcGVyIFBvd2VyU2hlbGwgb2JqZWN0LgoKICAgICAgICAgICAgICAgIEF1dGhvcjogJ1RoZSBTY3JpcHRpbmcgR3V5cycKICAgICAgICAgICAgICAgIExpbms6IGh0dHBzOi8vYmxvZ3MudGVjaG5ldC5taWNyb3NvZnQuY29tL2hleXNjcmlwdGluZ2d1eS8yMDExLzA4LzIwL3VzZS1wb3dlcnNoZWxsLXRvLXdvcmstd2l0aC1hbnktaW5pLWZpbGUvCgogICAgICAgICAgICAuTElOSwoKICAgICAgICAgICAgICAgIGh0dHBzOi8vYmxvZ3MudGVjaG5ldC5taWNyb3NvZnQuY29tL2hleXNjcmlwdGluZ2d1eS8yMDExLzA4LzIwL3VzZS1wb3dlcnNoZWxsLXRvLXdvcmstd2l0aC1hbnktaW5pLWZpbGUvCiAgICAgICAgIz4KICAgICAgICAgICAgW0NtZGxldEJpbmRpbmcoKV0KICAgICAgICAgICAgUGFyYW0oCiAgICAgICAgICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JFRydWUpXQogICAgICAgICAgICAgICAgW0FsaWFzKCdGdWxsTmFtZScpXQogICAgICAgICAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHsgVGVzdC1QYXRoIC1QYXRoICRfIH0pXQogICAgICAgICAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICAgICAgICAgJFBhdGgKICAgICAgICAgICAgKQoKICAgICAgICAgICAgUFJPQ0VTUyB7CiAgICAgICAgICAgICAgICBGb3JFYWNoKCRUYXJnZXRQYXRoIGluICRQYXRoKSB7CiAgICAgICAgICAgICAgICAgICAgJEluaU9iamVjdCA9IEB7fQogICAgICAgICAgICAgICAgICAgIFN3aXRjaCAtUmVnZXggLUZpbGUgJFRhcmdldFBhdGggewogICAgICAgICAgICAgICAgICAgICAgICAiXlxbKC4rKVxdIiAjIFNlY3Rpb24KICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNlY3Rpb24gPSAkbWF0Y2hlc1sxXS5UcmltKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJbmlPYmplY3RbJFNlY3Rpb25dID0gQHt9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQ29tbWVudENvdW50ID0gMAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICJeKDsuKikkIiAjIENvbW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFZhbHVlID0gJG1hdGNoZXNbMV0uVHJpbSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQ29tbWVudENvdW50ID0gJENvbW1lbnRDb3VudCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICROYW1lID0gJ0NvbW1lbnQnICsgJENvbW1lbnRDb3VudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEluaU9iamVjdFskU2VjdGlvbl1bJE5hbWVdID0gJFZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIiguKz8pXHMqPSguKikiICMgS2V5CiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICROYW1lLCAkVmFsdWUgPSAkbWF0Y2hlc1sxLi4yXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE5hbWUgPSAkTmFtZS5UcmltKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRWYWx1ZXMgPSAkVmFsdWUuc3BsaXQoJywnKSB8IEZvckVhY2gtT2JqZWN0IHskXy5UcmltKCl9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkVmFsdWVzIC1pc25vdCBbU3lzdGVtLkFycmF5XSkgeyRWYWx1ZXMgPSBAKCRWYWx1ZXMpfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEluaU9iamVjdFskU2VjdGlvbl1bJE5hbWVdID0gJFZhbHVlcwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRJbmlPYmplY3QKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gTG9jYWw6R2V0LUtlZVBhc3NJTklGaWVsZHMgewogICAgICAgICAgICAjIGhlbHBlciB0aGF0IHBhcnNlcyBhIDEuWCBLZWVQYXNzLmluaSBpbnRvIGEgY3VzdG9tIG9iamVjdAogICAgICAgICAgICBbQ21kbGV0QmluZGluZygpXQogICAgICAgICAgICBQYXJhbSAoCiAgICAgICAgICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSldCiAgICAgICAgICAgICAgICBbVmFsaWRhdGVTY3JpcHQoeyBUZXN0LVBhdGggLVBhdGggJF8gfSldCiAgICAgICAgICAgICAgICBbU3RyaW5nXQogICAgICAgICAgICAgICAgJFBhdGgKICAgICAgICAgICAgKQoKICAgICAgICAgICAgJEtlZVBhc3NJTklQYXRoID0gUmVzb2x2ZS1QYXRoIC1QYXRoICRQYXRoCiAgICAgICAgICAgICRLZWVQYXNzSU5JUGF0aFBhcmVudCA9ICRLZWVQYXNzSU5JUGF0aCB8IFNwbGl0LVBhdGggLVBhcmVudAogICAgICAgICAgICAkS2VlUGFzc0lOSSA9IEdldC1JbmlDb250ZW50IC1QYXRoICRLZWVQYXNzSU5JUGF0aAogICAgICAgICAgICAkUmVjZW50bHlVc2VkID0gQCgpCgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgaWYoJEtlZVBhc3NJTkkuS2VlUGFzcy5LZWVMYXN0RGIpIHsKICAgICAgICAgICAgICAgICAgICAkTGFzdFVzZWRGaWxlID0gUmVzb2x2ZS1QYXRoIC1QYXRoICIkS2VlUGFzc0lOSVBhdGhQYXJlbnRcJCgkS2VlUGFzc0lOSS5LZWVQYXNzLktlZUxhc3REYikiIC1FcnJvckFjdGlvbiBTdG9wCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2gge30KCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBpZigkS2VlUGFzc0lOSS5LZWVQYXNzLktlZUtleVNvdXJjZUlEMCkgewogICAgICAgICAgICAgICAgICAgICREZWZhdWx0RGF0YWJhc2VQYXRoID0gUmVzb2x2ZS1QYXRoIC1QYXRoICRLZWVQYXNzSU5JLktlZVBhc3MuS2VlS2V5U291cmNlSUQwIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2gge30KCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBpZigkS2VlUGFzc0lOSS5LZWVQYXNzLktlZUtleVNvdXJjZVZhbHVlMCkgewogICAgICAgICAgICAgICAgICAgICREZWZhdWx0S2V5RmlsZVBhdGggPSBSZXNvbHZlLVBhdGggLVBhdGggJEtlZVBhc3NJTkkuS2VlUGFzcy5LZWVLZXlTb3VyY2VWYWx1ZTAgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7fQoKICAgICAgICAgICAgIyBncmFiIGFueSBhZGRpdGlvbmFsIGNhY2hlZCBkYXRhYmFzZXMva2V5IGluZm9ybWF0aW9uCiAgICAgICAgICAgICRLZWVQYXNzSU5JLktlZVBhc3MuS2V5cyB8IFdoZXJlLU9iamVjdCB7JF8gLW1hdGNoICdLZWVLZXlTb3VyY2VJRFsxLTldKyd9IHwgRm9yZWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAkSUQgPSAkX1stMV0KICAgICAgICAgICAgICAgICAgICAkUmVjZW50bHlVc2VkICs9ICRLZWVQYXNzSU5JLktlZXBhc3NbIktlZUtleVNvdXJjZUlEJHtJRH0iXQogICAgICAgICAgICAgICAgICAgICRSZWNlbnRseVVzZWQgKz0gJEtlZVBhc3NJTkkuS2VlcGFzc1siS2VlS2V5U291cmNlVmFsdWUke0lEfSJdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaHt9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRLZWVQYXNzSU5JUHJvcGVydGllcyA9IEB7CiAgICAgICAgICAgICAgICAnS2VlUGFzc0NvbmZpZ1BhdGgnID0gJEtlZVBhc3NJTklQYXRoCiAgICAgICAgICAgICAgICAnU2VjdXJlRGVza3RvcCcgPSAkTnVsbAogICAgICAgICAgICAgICAgJ0xhc3RVc2VkRmlsZScgPSAkTGFzdFVzZWRGaWxlCiAgICAgICAgICAgICAgICAnUmVjZW50bHlVc2VkJyA9ICRSZWNlbnRseVVzZWQKICAgICAgICAgICAgICAgICdEZWZhdWx0RGF0YWJhc2VQYXRoJyA9ICREZWZhdWx0RGF0YWJhc2VQYXRoCiAgICAgICAgICAgICAgICAnRGVmYXVsdEtleUZpbGVQYXRoJyA9ICREZWZhdWx0S2V5RmlsZVBhdGgKICAgICAgICAgICAgICAgICdEZWZhdWx0VXNlckFjY291bnREYXRhJyA9ICROdWxsCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJEtlZVBhc3NJTklJbmZvID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5ICRLZWVQYXNzSU5JUHJvcGVydGllcwogICAgICAgICAgICAkS2VlUGFzc0lOSUluZm8uUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnS2VlUGFzcy5Db25maWcnKQogICAgICAgICAgICAkS2VlUGFzc0lOSUluZm8KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIExvY2FsOkdldC1LZWVQYXNzWE1MRmllbGRzIHsKICAgICAgICAgICAgIyBoZWxwZXIgdGhhdCBwYXJzZXMgYSAyLlggS2VlUGFzcy5jb25maWcueG1sIGludG8gYSBjdXN0b20gb2JqZWN0CiAgICAgICAgICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICAgICAgICAgIFBhcmFtICgKICAgICAgICAgICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSRUcnVlKV0KICAgICAgICAgICAgICAgIFtWYWxpZGF0ZVNjcmlwdCh7IFRlc3QtUGF0aCAtUGF0aCAkXyB9KV0KICAgICAgICAgICAgICAgIFtTdHJpbmddCiAgICAgICAgICAgICAgICAkUGF0aAogICAgICAgICAgICApCgogICAgICAgICAgICAkS2VlUGFzc1hNTFBhdGggPSBSZXNvbHZlLVBhdGggLVBhdGggJFBhdGgKICAgICAgICAgICAgJEtlZVBhc3NYTUxQYXRoUGFyZW50ID0gJEtlZVBhc3NYTUxQYXRoIHwgU3BsaXQtUGF0aCAtUGFyZW50CiAgICAgICAgICAgIFtYbWxdJEtlZVBhc3NYTUwgPSBHZXQtQ29udGVudCAtUGF0aCAkS2VlUGFzc1hNTFBhdGgKCiAgICAgICAgICAgICRMYXN0VXNlZEZpbGUgPSAnJwogICAgICAgICAgICAkUmVjZW50bHlVc2VkID0gQCgpCiAgICAgICAgICAgICREZWZhdWx0RGF0YWJhc2VQYXRoID0gJycKICAgICAgICAgICAgJERlZmF1bHRLZXlGaWxlUGF0aCA9ICcnCiAgICAgICAgICAgICREZWZhdWx0VXNlckFjY291bnREYXRhID0gJE51bGwKCiAgICAgICAgICAgIGlmKCRLZWVQYXNzWE1MLkNvbmZpZ3VyYXRpb24uQXBwbGljYXRpb24uTGFzdFVzZWRGaWxlKSB7CiAgICAgICAgICAgICAgICAkTGFzdFVzZWRGaWxlID0gUmVzb2x2ZS1QYXRoIC1QYXRoICIkS2VlUGFzc1hNTFBhdGhQYXJlbnRcJCgkS2VlUGFzc1hNTC5Db25maWd1cmF0aW9uLkFwcGxpY2F0aW9uLkxhc3RVc2VkRmlsZS5QYXRoKSIgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYoJEtlZVBhc3NYTUwuQ29uZmlndXJhdGlvbi5BcHBsaWNhdGlvbi5Nb3N0UmVjZW50bHlVc2VkLkl0ZW1zKSB7CiAgICAgICAgICAgICAgICAkS2VlUGFzc1hNTC5Db25maWd1cmF0aW9uLkFwcGxpY2F0aW9uLk1vc3RSZWNlbnRseVVzZWQuSXRlbXMgfCBGb3JlYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgUmVzb2x2ZS1QYXRoIC1QYXRoICIkS2VlUGFzc1hNTFBhdGhQYXJlbnRcJCgkXy5Db25uZWN0aW9uSW5mby5QYXRoKSIgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgfCBGb3JlYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICRSZWNlbnRseVVzZWQgKz0gJF8KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKCRLZWVQYXNzWE1MLkNvbmZpZ3VyYXRpb24uRGVmYXVsdHMuS2V5U291cmNlcy5Bc3NvY2lhdGlvbi5EYXRhYmFzZVBhdGgpIHsKICAgICAgICAgICAgICAgICREZWZhdWx0RGF0YWJhc2VQYXRoID0gUmVzb2x2ZS1QYXRoIC1QYXRoICIkS2VlUGFzc1hNTFBhdGhQYXJlbnRcJCgkS2VlUGFzc1hNTC5Db25maWd1cmF0aW9uLkRlZmF1bHRzLktleVNvdXJjZXMuQXNzb2NpYXRpb24uRGF0YWJhc2VQYXRoKSIgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYoJEtlZVBhc3NYTUwuQ29uZmlndXJhdGlvbi5EZWZhdWx0cy5LZXlTb3VyY2VzLkFzc29jaWF0aW9uLktleUZpbGVQYXRoKSB7CiAgICAgICAgICAgICAgICAkRGVmYXVsdEtleUZpbGVQYXRoID0gUmVzb2x2ZS1QYXRoIC1QYXRoICIkS2VlUGFzc1hNTFBhdGhQYXJlbnRcJCgkS2VlUGFzc1hNTC5Db25maWd1cmF0aW9uLkRlZmF1bHRzLktleVNvdXJjZXMuQXNzb2NpYXRpb24uS2V5RmlsZVBhdGgpIiAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQogICAgICAgICAgICB9CgogICAgICAgICAgICAkRGVmYXVsdFVzZXJBY2NvdW50ID0gJEtlZVBhc3NYTUwuQ29uZmlndXJhdGlvbi5EZWZhdWx0cy5LZXlTb3VyY2VzLkFzc29jaWF0aW9uLlVzZXJBY2NvdW50IC1lcSAndHJ1ZScKCiAgICAgICAgICAgICRTZWN1cmVEZXNrdG9wID0gJEtlZVBhc3NYTUwuQ29uZmlndXJhdGlvbi5TZWN1cml0eS5NYXN0ZXJLZXlPblNlY3VyZURlc2t0b3AgLWVxICd0cnVlJwoKICAgICAgICAgICAgaWYoJERlZmF1bHRVc2VyQWNjb3VudCkgewoKICAgICAgICAgICAgICAgICRVc2VyUGF0aCA9ICRQYXRoLlNwbGl0KCdcJylbMC4uMl0gLWpvaW4gJ1wnCgogICAgICAgICAgICAgICAgJFVzZXJNYXN0ZXJLZXlGb2xkZXIgPSBHZXQtQ2hpbGRJdGVtIC1QYXRoICIkVXNlclBhdGhcQXBwRGF0YVxSb2FtaW5nXE1pY3Jvc29mdFxQcm90ZWN0XCIgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgfCBTZWxlY3QtT2JqZWN0IC1GaXJzdCAxIC1FeHBhbmRQcm9wZXJ0eSBGdWxsTmFtZQoKICAgICAgICAgICAgICAgIGlmKCRVc2VyTWFzdGVyS2V5Rm9sZGVyKSB7CgogICAgICAgICAgICAgICAgICAgICRVc2VyU2lkID0gJFVzZXJNYXN0ZXJLZXlGb2xkZXIgfCBTcGxpdC1QYXRoIC1MZWFmCgogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyU2lkT2JqZWN0ID0gKE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXIoJFVzZXJTaWQpKQogICAgICAgICAgICAgICAgICAgICAgICAkVXNlck5hbWVEb21haW4gPSAkVXNlclNpZE9iamVjdC5UcmFuc2xhdGUoW1N5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuTlRBY2NvdW50XSkuVmFsdWUKCiAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyRG9tYWluLCAkVXNlck5hbWUgPSAkVXNlck5hbWVEb21haW4uU3BsaXQoJ1wnKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIlVuYWJsZSB0byB0cmFuc2xhdGUgU0lEIGZyb20gJFVzZXJNYXN0ZXJLZXlGb2xkZXIgLCBkZWZhdWx0aW5nIHRvIHVzZXIgbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJOYW1lID0gJFVzZXJQYXRoLlNwbGl0KCdcJylbLTFdCiAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyRG9tYWluID0gJE51bGwKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICRVc2VyTWFzdGVyS2V5RmlsZXMgPSBAKCwgJChHZXQtQ2hpbGRJdGVtIC1QYXRoICRVc2VyTWFzdGVyS2V5Rm9sZGVyIC1Gb3JjZSB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IEZ1bGxOYW1lKSApCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkVXNlclNpZCA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgJFVzZXJOYW1lID0gJE51bGwKICAgICAgICAgICAgICAgICAgICAkVXNlckRvbWFpbiA9ICROdWxsCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJFVzZXJLZWVQYXNzRFBBUElCbG9iID0gR2V0LUl0ZW0gLVBhdGggIiRVc2VyUGF0aFxBcHBEYXRhXFJvYW1pbmdcS2VlUGFzc1xQcm90ZWN0ZWRVc2VyS2V5LmJpbiIgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBGdWxsTmFtZQoKICAgICAgICAgICAgICAgICRVc2VyTWFzdGVyS2V5UHJvcGVydGllcyA9IEB7CiAgICAgICAgICAgICAgICAgICAgJ1VzZXJTaWQnID0gJFVzZXJTaWQKICAgICAgICAgICAgICAgICAgICAnVXNlck5hbWUnID0gJFVzZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgJ1VzZXJEb21haW4nID0gJFVzZXJEb21haW4KICAgICAgICAgICAgICAgICAgICAnVXNlcktlZVBhc3NEUEFQSUJsb2InID0gJFVzZXJLZWVQYXNzRFBBUElCbG9iCiAgICAgICAgICAgICAgICAgICAgJ1VzZXJNYXN0ZXJLZXlGaWxlcycgPSAkVXNlck1hc3RlcktleUZpbGVzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkRGVmYXVsdFVzZXJBY2NvdW50RGF0YSA9IE5ldy1PYmplY3QgLVR5cGVOYW1lIFBTT2JqZWN0IC1Qcm9wZXJ0eSAkVXNlck1hc3RlcktleVByb3BlcnRpZXMKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJEtlZVBhc3NYbWxQcm9wZXJ0aWVzID0gQHsKICAgICAgICAgICAgICAgICdLZWVQYXNzQ29uZmlnUGF0aCcgPSAkS2VlUGFzc1hNTFBhdGgKICAgICAgICAgICAgICAgICdTZWN1cmVEZXNrdG9wJyA9ICRTZWN1cmVEZXNrdG9wCiAgICAgICAgICAgICAgICAnTGFzdFVzZWRGaWxlJyA9ICRMYXN0VXNlZEZpbGUKICAgICAgICAgICAgICAgICdSZWNlbnRseVVzZWQnID0gJFJlY2VudGx5VXNlZAogICAgICAgICAgICAgICAgJ0RlZmF1bHREYXRhYmFzZVBhdGgnID0gJERlZmF1bHREYXRhYmFzZVBhdGgKICAgICAgICAgICAgICAgICdEZWZhdWx0S2V5RmlsZVBhdGgnID0gJERlZmF1bHRLZXlGaWxlUGF0aAogICAgICAgICAgICAgICAgJ0RlZmF1bHRVc2VyQWNjb3VudERhdGEnID0gJERlZmF1bHRVc2VyQWNjb3VudERhdGEKICAgICAgICAgICAgfQogICAgICAgICAgICAkS2VlUGFzc1htbEluZm8gPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBQU09iamVjdCAtUHJvcGVydHkgJEtlZVBhc3NYbWxQcm9wZXJ0aWVzCiAgICAgICAgICAgICRLZWVQYXNzWG1sSW5mby5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdLZWVQYXNzLkNvbmZpZycpCiAgICAgICAgICAgICRLZWVQYXNzWG1sSW5mbwogICAgICAgIH0KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBpZigkUFNCb3VuZFBhcmFtZXRlcnNbJ1BhdGgnXSkgewogICAgICAgICAgICAkWG1sRmlsZVBhdGhzID0gJFBhdGgKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICMgcG9zc2libGUgbG9jYXRpb25zIGZvciBLZWVQYXNzIGNvbmZpZ3MKICAgICAgICAgICAgJFhtbEZpbGVQYXRocyA9IEAoIiQoJEVudjpXaW5EaXIgfCBTcGxpdC1QYXRoIC1RdWFsaWZpZXIpXFVzZXJzXCIpCiAgICAgICAgICAgICRYbWxGaWxlUGF0aHMgKz0gIiR7ZW52OlByb2dyYW1GaWxlcyh4ODYpfVwiCiAgICAgICAgICAgICRYbWxGaWxlUGF0aHMgKz0gIiR7ZW52OlByb2dyYW1GaWxlc31cIgogICAgICAgIH0KCiAgICAgICAgJFhtbEZpbGVQYXRocyB8IEZvcmVhY2gtT2JqZWN0IHsgR2V0LUNoaWxkSXRlbSAtUGF0aCAkXyAtUmVjdXJzZSAtSW5jbHVkZSBAKCdLZWVQYXNzLmNvbmZpZy54bWwnLCAnS2VlUGFzcy5pbmknKSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB9IHwgV2hlcmUtT2JqZWN0IHsgJF8gfSB8IEZvcmVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiUGFyc2luZyBLZWVQYXNzIGNvbmZpZyBmaWxlICckKCRfLkZ1bGxuYW1lKSciCgogICAgICAgICAgICBpZigkXy5FeHRlbnNpb24gLWVxICcueG1sJykgewogICAgICAgICAgICAgICAgR2V0LUtlZVBhc3NYTUxGaWVsZHMgLVBhdGggJF8uRnVsbG5hbWUKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIEdldC1LZWVQYXNzSU5JRmllbGRzIC1QYXRoICRfLkZ1bGxuYW1lCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtS2VlUGFzc0NvbmZpZ1RyaWdnZXIgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIEV4dHJhY3RzIG91dCB0aGUgdHJpZ2dlciBzcGVjaWZpY2F0aW9ucyBmcm9tIGEgS2VlUGFzcyAyLlggY29uZmlndXJhdGlvbiBYTUwgZmlsZS4KCiAgICAgICAgQXV0aG9yOiBAaGFybWoweQogICAgICAgIExpY2Vuc2U6IEJTRCAzLUNsYXVzZQogICAgICAgIFJlcXVpcmVkIERlcGVuZGVuY2llczogTm9uZQogICAgICAgIE9wdGlvbmFsIERlcGVuZGVuY2llczogTm9uZQoKICAgIC5ERVNDUklQVElPTgoKICAgICAgICBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgdGhlIHBhdGggdG8gYSBLZWVQYXNzLmNvbmZpZy54bWwgZmlsZSBvciB0aGUgaW5wdXQgZnJvbSBGaW5kLUtlZVBhc3NDb25maWcsCiAgICAgICAgcmVhZHMgdGhlIGNvbmZpZ3VyYXRpb24gWE1MLCByZXBsYWNlcyBldmVudC9hY3Rpb24gR1VJRHMgd2l0aCB0aGVpciByZWFkYWJsZSBuYW1lcywgYW5kIG91dHB1dHMKICAgICAgICBlYWNoIHRyaWdnZXIgYXMgYSBjdXN0b20gUFNPYmplY3QuCgogICAgLlBBUkFNRVRFUiBQYXRoCgogICAgICAgIFJlcXVpcmVkIHBhdGggdG8gYSBLZWVQYXNzLmNvbmZpZy54bWwgZmlsZSBvciBhbiBvYmplY3QgcmVzdWx0IGZyb20gRmluZC1LZWVQYXNzQ29uZmlnLgoKICAgIC5FWEFNUExFCgogICAgICAgIFBTIEM6XD4gJFRyaWdnZXJzID0gRmluZC1LZWVQYXNzY29uZmlnIHwgR2V0LUtlZVBhc3NDb25maWdUcmlnZ2VyCiAgICAgICAgUFMgQzpcPiAkVHJpZ2dlcnMKCgogICAgICAgIEtlZVBhc3NYTUxQYXRoIDogQzpcVXNlcnNcaGFybWoweS5URVNUTEFCXERlc2t0b3Bca2VlcGFzc1xLZWVQYXNzLTIuMzRcS2VlUGFzcy5jb25maWcueG1sCiAgICAgICAgR3VpZCAgICAgICAgICAgOiBwYWd3S2ptaDhVNldiY3BsVWJRbktnPT0KICAgICAgICBOYW1lICAgICAgICAgICA6IGJsYWgKICAgICAgICBFbmFibGVkICAgICAgICA6IGZhbHNlCiAgICAgICAgSW5pdGlhbGx5T24gICAgOiBmYWxzZQogICAgICAgIEV2ZW50cyAgICAgICAgIDogRXZlbnRzCiAgICAgICAgQ29uZGl0aW9ucyAgICAgOgogICAgICAgIEFjdGlvbnMgICAgICAgIDogQWN0aW9ucwoKCgogICAgICAgIFBTIEM6XD4gJFRyaWdnZXJzLkV2ZW50cy5FdmVudAoKICAgICAgICBOYW1lICAgICAgICAgICAgICAgICBQYXJhbWV0ZXJzCiAgICAgICAgLS0tLSAgICAgICAgICAgICAgICAgLS0tLS0tLS0tLQogICAgICAgIE9wZW5lZCBkYXRhYmFzZSBmaWxlIFBhcmFtZXRlcnMKCgogICAgICAgIFBTIEM6XD4gJFRyaWdnZXJzLkFjdGlvbnMuQWN0aW9uCgogICAgICAgIE5hbWUgICAgICAgICAgICAgICAgICAgUGFyYW1ldGVycwogICAgICAgIC0tLS0gICAgICAgICAgICAgICAgICAgLS0tLS0tLS0tLQogICAgICAgIEV4cG9ydCBhY3RpdmUgZGF0YWJhc2UgUGFyYW1ldGVycwojPgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSldCiAgICAgICAgW09iamVjdFtdXQogICAgICAgICRQYXRoCiAgICApCiAgICBCRUdJTiB7CiAgICAgICAgJEV2ZW50R1VJRHMgPSBAewogICAgICAgICAgICAnMU03TnRVdVlUL0ttcWVKVkpoN0k2QT09JyA9ICdBcHBsaWNhdGlvbiBpbml0aWFsaXplZCcKICAgICAgICAgICAgJzJQTWU2Y3hwU0J1Snhmemk2a3RxbHc9PScgPSAnQXBwbGljYXRpb24gc3RhcnRlZCBhbmQgcmVhZHknCiAgICAgICAgICAgICdnb3EzcTdFY1RyK0FPVFkva1hHWGVBPT0nID0gJ0FwcGxpY2F0aW9uIGV4aXQnCiAgICAgICAgICAgICc1ZjhUQm9XNFFZbTVCdmFlS3p0QXB3PT0nID0gJ09wZW5lZCBkYXRhYmFzZSBmaWxlJwogICAgICAgICAgICAnbGNHbS9YSjhRTWVpK1ZzUG9KbGpIQT09JyA9ICdTYXZpbmcgZGF0YWJhc2UgZmlsZScKICAgICAgICAgICAgJ3M2ajkvbmdUU21xY1hkVzZoRHFiamc9PScgPSAnU2F2ZWQgZGF0YWJhc2UgZmlsZScKICAgICAgICAgICAgJ2pPcmVtcWdYU1JtakwvUWVPeDNzU1E9PScgPSAnQ2xvc2luZyBkYXRhYmFzZSBmaWxlIChiZWZvcmUgc2F2aW5nKScKICAgICAgICAgICAgJ2xQcHc1YkUvUVNhbVRnWlAyTU5zbFE9PScgPSAnQ2xvc2luZyBkYXRhYmFzZSBmaWxlIChhZnRlciBzYXZpbmcpJwogICAgICAgICAgICAnUDM1ZXhpcFVURmlWUklYNzhtOVczQT09JyA9ICdDb3BpZWQgZW50cnkgZGF0YSB0byBjbGlwYm9hcmQnCiAgICAgICAgICAgICdqUkxVbXZMTFQvZW83OC9hckdKb21RPT0nID0gJ1VzZXIgaW50ZXJmYWNlIHN0YXRlIHVwZGF0ZWQnCiAgICAgICAgICAgICdSMGRaa3BlblE2SzVhQjhmd3ZlYmtnPT0nID0gJ0N1c3RvbSB0b29sYmFyIGJ1dHRvbiBjbGlja2VkJwogICAgICAgIH0KCiAgICAgICAgJEFjdGlvbkdVSURzID0gQHsKICAgICAgICAgICAgJzJ1WDRPd2N3VEJPZTd5NjZ5MjdreHc9PScgPSAnRXhlY3V0ZSBjb21tYW5kIGxpbmUgLyBVUkwnCiAgICAgICAgICAgICd0a2Ftbjk2VVM3bWJyanlrZnN3UTZnPT0nID0gJ0NoYW5nZSB0cmlnZ2VyIG9uL29mZiBzdGF0ZScKICAgICAgICAgICAgJy9VRlYxWG1QUlBxcmlmTDRjTytVdUE9PScgPSAnT3BlbiBkYXRhYmFzZSBmaWxlJwogICAgICAgICAgICAnOVZkaFMvaE1RVjJwRTNvNXpSRHd2UT09JyA9ICdTYXZlIGFjdGl2ZSBkYXRhYmFzZScKICAgICAgICAgICAgJ0lxMTM1QmQ0VHUyWnRGY2RBck90VFE9PScgPSAnU3luY2hyb25pemUgYWN0aXZlIGRhdGFiYXNlIHdpdGggYSBmaWxlL1VSTCcKICAgICAgICAgICAgJ2dPWi9Ubkx4UUVXUmRoOHNJOWpzdmc9PScgPSAnSW1wb3J0IGludG8gYWN0aXZlIGRhdGFiYXNlJwogICAgICAgICAgICAnRDVwclc4N1ZScjY1Tk8yeFA1UklJZz09JyA9ICdFeHBvcnQgYWN0aXZlIGRhdGFiYXNlJwogICAgICAgICAgICAnVzc5Rm5WUy9TYjJYK3l6dVg1a0tadz09JyA9ICdDbG9zZSBhY3RpdmUgZGF0YWJhc2UnCiAgICAgICAgICAgICdQN2d6TGRZV1RvZVpCV1RiRmt6V0pnPT0nID0gJ0FjdGl2YXRlIGRhdGFiYXNlIChzZWxlY3QgdGFiKScKICAgICAgICAgICAgJ096MCtNZVN6UXFhNnpOWEFPNnlwYVE9PScgPSAnV2FpdCcKICAgICAgICAgICAgJ0NmZVBjeVRzVCt5SXRpWFZNUFEwYmc9PScgPSAnU2hvdyBtZXNzYWdlIGJveCcKICAgICAgICAgICAgJ1FHbWxObGNiUjVLcHMzTmxNT0RQd3c9PScgPSAnUGVyZm9ybSBnbG9iYWwgYXV0by10eXBlJwogICAgICAgICAgICAnTVhDUHJXU1RRL1dVN3NnYUkyNHlUUT09JyA9ICdQZXJmb3JtIGF1dG8tdHlwZSB3aXRoIHNlbGVjdGVkIGVudHJ5JwogICAgICAgICAgICAnUXVnM2dYUFRUdXlCU0o0N05xeURoQT09JyA9ICdTaG93IGVudHJpZXMgYnkgdGFnJwogICAgICAgICAgICAnbFlHUFJabG1TWWlyUG9ib0dwWm9OZz09JyA9ICdBZGQgY3VzdG9tIHRvb2xiYXIgYnV0dG9uJwogICAgICAgICAgICAnMW0xQm9teXlSTHFrU0FwQitnbEllUT09JyA9ICdSZW1vdmUgY3VzdG9tIHRvb2xiYXIgYnV0dG9uJwogICAgICAgIH0KICAgIH0KICAgIFBST0NFU1MgewoKICAgICAgICBGb3JFYWNoKCRPYmplY3QgaW4gJFBhdGgpIHsKICAgICAgICAgICAgaWYoJE9iamVjdCAtaXMgW1N0cmluZ10pIHsKICAgICAgICAgICAgICAgICRLZWVQYXNzWE1MUGF0aCA9ICRPYmplY3QKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCRPYmplY3QuUFNPYmplY3QuUHJvcGVydGllc1snS2VlUGFzc0NvbmZpZ1BhdGgnXSkgewogICAgICAgICAgICAgICAgJEtlZVBhc3NYTUxQYXRoID0gW1N0cmluZ10kT2JqZWN0LktlZVBhc3NDb25maWdQYXRoCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZWlmICgkT2JqZWN0LlBTT2JqZWN0LlByb3BlcnRpZXNbJ1BhdGgnXSkgewogICAgICAgICAgICAgICAgJEtlZVBhc3NYTUxQYXRoID0gW1N0cmluZ10kT2JqZWN0LlBhdGgKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCRPYmplY3QuUFNPYmplY3QuUHJvcGVydGllc1snRnVsbE5hbWUnXSkgewogICAgICAgICAgICAgICAgJEtlZVBhc3NYTUxQYXRoID0gW1N0cmluZ10kT2JqZWN0LkZ1bGxOYW1lCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkS2VlUGFzc1hNTFBhdGggPSBbU3RyaW5nXSRPYmplY3QKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYoJEtlZVBhc3NYTUxQYXRoIC1hbmQgKCRLZWVQYXNzWE1MUGF0aCAtbWF0Y2ggJy5cLnhtbCQnKSAtYW5kIChUZXN0LVBhdGggLVBhdGggJEtlZVBhc3NYTUxQYXRoKSApIHsKICAgICAgICAgICAgICAgICRLZWVQYXNzWE1MUGF0aCA9IFJlc29sdmUtUGF0aCAtUGF0aCAkS2VlUGFzc1hNTFBhdGgKCiAgICAgICAgICAgICAgICAkS2VlUGFzc1hNTCA9IChbeG1sXShHZXQtQ29udGVudCAtUGF0aCAkS2VlUGFzc1hNTFBhdGgpKS5Jbm5lclhtbAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkRXZlbnRHVUlEcy5LZXlzIHwgRm9yZWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRLZWVQYXNzWE1MID0gJEtlZVBhc3NYTUwuUmVwbGFjZSgkXywgJEV2ZW50R1VJRHNbJF9dKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRBY3Rpb25HVUlEcy5LZXlzIHwgRm9yZWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRLZWVQYXNzWE1MID0gJEtlZVBhc3NYTUwuUmVwbGFjZSgkXywgJEFjdGlvbkdVSURzWyRfXSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRLZWVQYXNzWE1MID0gJEtlZVBhc3NYTUwuUmVwbGFjZSgnVHlwZUd1aWQnLCAnTmFtZScpCiAgICAgICAgICAgICAgICAkS2VlUGFzc1hNTCA9IFt4bWxdJEtlZVBhc3NYTUwKCiAgICAgICAgICAgICAgICAkVHJpZ2dlcnMgPSAkS2VlUGFzc1hNTC5TZWxlY3ROb2RlcygnQ29uZmlndXJhdGlvbi9BcHBsaWNhdGlvbi9UcmlnZ2VyU3lzdGVtL1RyaWdnZXJzJykKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJFRyaWdnZXJzIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kIFRyaWdnZXIgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgJF8uUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnS2VlUGFzcy5UcmlnZ2VyJykKICAgICAgICAgICAgICAgICAgICAkXyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdLZWVQYXNzQ29uZmlnUGF0aCcgJEtlZVBhc3NYTUxQYXRoLlBhdGgKICAgICAgICAgICAgICAgICAgICAkXwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gQWRkLUtlZVBhc3NDb25maWdUcmlnZ2VyIHsKPCMKICAgIC5TWU5PUFNJUwoKICAgICAgICBBZGRzIGEgS2VlUGFzcyBleGZpbHRyYXRpb24gdHJpZ2dlciB0byBhIEtlZVBhc3MuY29uZmlnLnhtbCBwYXRoIG9yIHJlc3VsdCBmcm9tIEZpbmQtS2VlUGFzc0NvbmZpZy4KCiAgICAgICAgQXV0aG9yOiBAaGFybWoweQogICAgICAgIExpY2Vuc2U6IEJTRCAzLUNsYXVzZQogICAgICAgIFJlcXVpcmVkIERlcGVuZGVuY2llczogTm9uZQogICAgICAgIE9wdGlvbmFsIERlcGVuZGVuY2llczogTm9uZQoKICAgIC5ERVNDUklQVElPTgoKICAgICAgICBJbnNlcnRzIGEgY3VzdG9tIEtlZVBhc3MuY29uZmlnLnhtbCB0cmlnZ2VyIGludG8gYSBLZWVQYXNzIGZpbGUgbG9jYXRpb24uIFRoZSB0cmlnZ2VyIC1BY3Rpb24gY2FuIGVpdGhlcgogICAgICAgIGV4cG9ydCBhIGRhdGFiYXNlIHRvICRFeHBvcnRQYXRoIHdoZW5ldmVyIGEgZGF0YWJhc2UgaXMgb3BlbiAoJ0V4cG9ydERhdGFiYXNlJykgb3Igd3JpdGUgYW4gZGF0YSBjb3BpZWQgb24gdGhlCiAgICAgICAgY2xpcGJvYXJkIGZyb20gS2VlUGFzcyB0byAkRXhwb3J0UGF0aCAoJ0V4ZmlsRGF0YUNvcGllZCcpLgoKICAgIC5QQVJBTUVURVIgUGF0aAoKICAgICAgICBSZXF1aXJlZCBwYXRoIHRvIGEgS2VlUGFzcy5jb25maWcueG1sIGZpbGUgb3IgYW4gb2JqZWN0IHJlc3VsdCBmcm9tIEZpbmQtS2VlUGFzc0NvbmZpZy4KCiAgICAuUEFSQU1FVEVSIEFjdGlvbgoKICAgICAgICBFaXRoZXIgJ0V4cG9ydERhdGFiYXNlJyAoZXhwb3J0IG9wZW5lZCBkYXRhYmFzZXMgdG8gJEV4cG9ydFBhdGgpIG9yICdFeGZpbERhdGFDb3BpZWQnIChleHBvcnQKICAgICAgICBjb3BpZWQgZGF0YSB0byAkRXhwb3J0UGF0aCkuCgogICAgLlBBUkFNRVRFUiBFeHBvcnRQYXRoCgogICAgICAgIFRoZSBwYXRoIHRvIGV4cG9ydCBkYXRhIGFuZC9vciB0aGUgJFRyaWdnZXJOYW1lLnZicyB0by4KICAgIAogICAgLlBBUkFNRVRFUiBUcmlnZ2VyTmFtZQoKICAgICAgICBUaGUgbmFtZSBmb3IgdGhlIHRyaWdnZXIsIGRlZmF1bHQgdG8gJ0RlYnVnJy4KCiAgICAuRVhBTVBMRQoKICAgICAgICBQUyBDOlw+ICdDOlxVc2Vyc1xoYXJtajB5LlRFU1RMQUJcRGVza3RvcFxrZWVwYXNzXEtlZVBhc3MtMi4zNFxLZWVQYXNzLmNvbmZpZy54bWwnIHwgRmluZC1LZWVQYXNzY29uZmlnIHwgQWRkLUtlZVBhc3NDb25maWdUcmlnZ2VyIC1WZXJib3NlCiAgICAgICAgVkVSQk9TRTogS2VlUGFzcyBYTUwgc2V0IHRvIGV4cG9ydCBkYXRhYmFzZSB0byBDOlxVc2Vyc1xoYXJtajB5LlRFU1RMQUJcQXBwRGF0YVxSb2FtaW5nXEtlZVBhc3MKICAgICAgICBWRVJCT1NFOiBDOlxVc2Vyc1xoYXJtajB5LlRFU1RMQUJcRGVza3RvcFxrZWVwYXNzXEtlZVBhc3MtMi4zNFxLZWVQYXNzLmNvbmZpZy54bWwgYmFja2Rvb3JlZAogICAgICAgIFBTIEM6XD4gRmluZC1LZWVQYXNzY29uZmlnIEM6XFVzZXJzXCB8IEdldC1LZWVQYXNzQ29uZmlnVHJpZ2dlcgoKCiAgICAgICAgS2VlUGFzc0NvbmZpZ1BhdGggOiBDOlxVc2Vyc1xoYXJtajB5LlRFU1RMQUJcRGVza3RvcFxrZWVwYXNzXEtlZVBhc3MtMi4zNFxLZWVQYXNzLmNvbmZpZy54bWwKICAgICAgICBHdWlkICAgICAgICAgICAgICA6IFB0YlF2RVFwMDBLRlNxVnRlVmRCZXc9PQogICAgICAgIE5hbWUgICAgICAgICAgICAgIDogRGVidWcKICAgICAgICBFdmVudHMgICAgICAgICAgICA6IEV2ZW50cwogICAgICAgIENvbmRpdGlvbnMgICAgICAgIDoKICAgICAgICBBY3Rpb25zICAgICAgICAgICA6IEFjdGlvbnMKIz4KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW09iamVjdFtdXQogICAgICAgICRQYXRoLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMSldCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdFeHBvcnREYXRhYmFzZScsICdFeGZpbERhdGFDb3BpZWQnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRBY3Rpb24gPSAnRXhwb3J0RGF0YWJhc2UnLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMildCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHtUZXN0LVBhdGggLVBhdGggJF8gfSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRXhwb3J0UGF0aCA9ICIke0VudjpBUFBEQVRBfVxLZWVQYXNzIiwKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDMpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVHJpZ2dlck5hbWUgPSAnRGVidWcnCiAgICApCiAgICBCRUdJTiB7CgogICAgICAgICRFeHBvcnRQYXRoRm9sZGVyID0gUmVzb2x2ZS1QYXRoIC1QYXRoICRFeHBvcnRQYXRoIC1FcnJvckFjdGlvbiBTdG9wCiAgICAgICAgaWYgKChHZXQtSXRlbSAtUGF0aCAkRXhwb3J0UGF0aEZvbGRlcikgLWlzbm90IFtTeXN0ZW0uSU8uRGlyZWN0b3J5SW5mb10pIHsKICAgICAgICAgICAgdGhyb3cgJ0V4cG9ydFBhdGggbXVzdCBiZSBhIGRpcmVjdG9yeSEnCiAgICAgICAgfQoKICAgICAgICBpZigkQWN0aW9uIC1lcSAnRXhwb3J0RGF0YWJhc2UnKSB7CiAgICAgICAgICAgICMgJ09wZW5lZCBkYXRhYmFzZSBmaWxlJwogICAgICAgICAgICAkRXZlbnRUcmlnZ2VyR1VJRCA9ICc1ZjhUQm9XNFFZbTVCdmFlS3p0QXB3PT0nCgogICAgICAgICAgICAjICdFeHBvcnQgYWN0aXZlIGRhdGFiYXNlJwogICAgICAgICAgICAkQWN0aW9uR1VJRCA9ICdENXByVzg3VlJyNjVOTzJ4UDVSSUlnPT0nCgogICAgICAgICAgICAkVHJpZ2dlclhNTCA9IFt4bWxdIEAiCjxUcmlnZ2VyPgogICAgPEd1aWQ+JChbQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKFtTeXN0ZW0uR1VJRF06Ok5ld0d1aWQoKS5Ub0J5dGVBcnJheSgpKSk8L0d1aWQ+CiAgICA8TmFtZT4kVHJpZ2dlck5hbWU8L05hbWU+CiAgICA8RXZlbnRzPgogICAgICAgIDxFdmVudD4KICAgICAgICAgICAgPFR5cGVHdWlkPiRFdmVudFRyaWdnZXJHVUlEPC9UeXBlR3VpZD4KICAgICAgICAgICAgPFBhcmFtZXRlcnM+CiAgICAgICAgICAgICAgICA8UGFyYW1ldGVyPjA8L1BhcmFtZXRlcj4KICAgICAgICAgICAgICAgIDxQYXJhbWV0ZXIgLz4KICAgICAgICAgICAgPC9QYXJhbWV0ZXJzPgogICAgICAgIDwvRXZlbnQ+CiAgICA8L0V2ZW50cz4KICAgIDxDb25kaXRpb25zIC8+CiAgICA8QWN0aW9ucz4KICAgICAgICA8QWN0aW9uPgogICAgICAgICAgICA8VHlwZUd1aWQ+JEFjdGlvbkdVSUQ8L1R5cGVHdWlkPgogICAgICAgICAgICA8UGFyYW1ldGVycz4KICAgICAgICAgICAgICAgIDxQYXJhbWV0ZXI+JCgkRXhwb3J0UGF0aClce0RCX0JBU0VOQU1FfS5jc3Y8L1BhcmFtZXRlcj4KICAgICAgICAgICAgICAgIDxQYXJhbWV0ZXI+S2VlUGFzcyBDU1YgKDEueCk8L1BhcmFtZXRlcj4KICAgICAgICAgICAgICAgIDxQYXJhbWV0ZXIgLz4KICAgICAgICAgICAgICAgIDxQYXJhbWV0ZXIgLz4KICAgICAgICAgICAgPC9QYXJhbWV0ZXJzPgogICAgICAgIDwvQWN0aW9uPgogICAgPC9BY3Rpb25zPgo8L1RyaWdnZXI+CiJACiAgICAgICAgICAgIAogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJLZWVQYXNzIFhNTCBzZXQgdG8gZXhwb3J0IGRhdGFiYXNlIHRvICRFeHBvcnRQYXRoIgogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgIyAnRXhmaWxEYXRhQ29waWVkJwoKICAgICAgICAgICAgIyAnQ29waWVkIGVudHJ5IGRhdGEgdG8gY2xpcGJvYXJkJwogICAgICAgICAgICAkRXZlbnRUcmlnZ2VyR1VJRCA9ICdQMzVleGlwVVRGaVZSSVg3OG05VzNBPT0nCgogICAgICAgICAgICAjICdFeGVjdXRlIGNvbW1hbmQgbGluZSAvIFVSTCcKICAgICAgICAgICAgJEFjdGlvbkdVSUQgPSAnMnVYNE93Y3dUQk9lN3k2NnkyN2t4dz09JwoKICAgICAgICAgICAgJEV4ZmlsVkJTTG9jYXRpb24gPSAiJEV4cG9ydFBhdGhcJCgkVHJpZ2dlck5hbWUpLnZicyIKCiAgICAgICAgICAgICMgd3JpdGUgb3V0IFZCUyB0byBsb2NhdGlvbiBhYm92ZQogICAgICAgICAgICAkRXhmaWxWQlMgPSBAIgpTZXQgb2JqQXJncyA9IFdzY3JpcHQuQXJndW1lbnRzCkRpbSBvRlMgOiBTZXQgb0ZTID0gQ3JlYXRlT2JqZWN0KCJTY3JpcHRpbmcuRmlsZVN5c3RlbU9iamVjdCIpCkRpbSBvYmpGaWxlIDogU2V0IG9iakZpbGUgPSBvRlMuT3BlblRleHRGaWxlKCIkRXhwb3J0UGF0aFwkKCRUcmlnZ2VyTmFtZSkudHh0IiwgOCwgVHJ1ZSkKRm9yIEVhY2ggc3RyQXJnIGluIG9iakFyZ3MKICAgIG9iakZpbGUuV3JpdGUgc3RyQXJnICYgIiwiCk5leHQKb2JqRmlsZS5Xcml0ZSB2YkNyTGYKb2JqRmlsZS5DbG9zZQoiQAogICAgICAgICAgICAKICAgICAgICAgICAgJEV4ZmlsVkJTIHwgT3V0LUZpbGUgLUVuY29kaW5nIEFTQ0lJIC1GaWxlUGF0aCAkRXhmaWxWQlNMb2NhdGlvbgogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFeGZpbCBWQlMgb3V0cHV0IHRvICRFeGZpbFZCU0xvY2F0aW9uIHNldCB0byBleHBvcnQgZGF0YSB0byAkRXhwb3J0UGF0aFwkKCRUcmlnZ2VyTmFtZSkudHh0IgoKICAgICAgICAgICAgJFRyaWdnZXJYTUwgPSBbeG1sXSBAIgo8VHJpZ2dlcj4KICAgIDxHdWlkPiQoW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZyhbU3lzdGVtLkdVSURdOjpOZXdHdWlkKCkuVG9CeXRlQXJyYXkoKSkpPC9HdWlkPgogICAgPE5hbWU+JFRyaWdnZXJOYW1lPC9OYW1lPgogICAgPEV2ZW50cz4KICAgICAgICA8RXZlbnQ+CiAgICAgICAgICAgIDxUeXBlR3VpZD4kRXZlbnRUcmlnZ2VyR1VJRDwvVHlwZUd1aWQ+CiAgICAgICAgICAgIDxQYXJhbWV0ZXJzPgogICAgICAgICAgICAgICAgPFBhcmFtZXRlcj4wPC9QYXJhbWV0ZXI+CiAgICAgICAgICAgICAgICA8UGFyYW1ldGVyIC8+CiAgICAgICAgICAgIDwvUGFyYW1ldGVycz4KICAgICAgICA8L0V2ZW50PgogICAgPC9FdmVudHM+CiAgICA8Q29uZGl0aW9ucyAvPgogICAgPEFjdGlvbnM+CiAgICAgICAgPEFjdGlvbj4KICAgICAgICAgICAgPFR5cGVHdWlkPiRBY3Rpb25HVUlEPC9UeXBlR3VpZD4KICAgICAgICAgICAgPFBhcmFtZXRlcnM+CiAgICAgICAgICAgICAgICA8UGFyYW1ldGVyPiVXSU5ESVIlXFN5c3RlbTMyXHdzY3JpcHQuZXhlPC9QYXJhbWV0ZXI+CiAgICAgICAgICAgICAgICA8UGFyYW1ldGVyPiRFeGZpbFZCU0xvY2F0aW9uICJ7VElUTEV9IiAie1VSTH0iICJ7VVNFUk5BTUV9IiAie1BBU1NXT1JEfSIgIntOT1RFU30iPC9QYXJhbWV0ZXI+CiAgICAgICAgICAgICAgICA8UGFyYW1ldGVyPkZhbHNlPC9QYXJhbWV0ZXI+CiAgICAgICAgICAgIDwvUGFyYW1ldGVycz4KICAgICAgICA8L0FjdGlvbj4KICAgIDwvQWN0aW9ucz4KPC9UcmlnZ2VyPgoiQAoKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiS2VlUGFzcyBYTUwgc2V0IHRvIHRyaWdnZXIgJEV4ZmlsVkJTTG9jYXRpb24iCiAgICAgICAgfQogICAgfQoKICAgIFBST0NFU1MgewoKICAgICAgICBGb3JFYWNoKCRPYmplY3QgaW4gJFBhdGgpIHsKICAgICAgICAgICAgaWYoJE9iamVjdCAtaXMgW1N0cmluZ10pIHsKICAgICAgICAgICAgICAgICRLZWVQYXNzWE1MUGF0aCA9ICRPYmplY3QKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCRPYmplY3QuUFNPYmplY3QuUHJvcGVydGllc1snS2VlUGFzc0NvbmZpZ1BhdGgnXSkgewogICAgICAgICAgICAgICAgJEtlZVBhc3NYTUxQYXRoID0gW1N0cmluZ10kT2JqZWN0LktlZVBhc3NDb25maWdQYXRoCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZWlmICgkT2JqZWN0LlBTT2JqZWN0LlByb3BlcnRpZXNbJ1BhdGgnXSkgewogICAgICAgICAgICAgICAgJEtlZVBhc3NYTUxQYXRoID0gW1N0cmluZ10kT2JqZWN0LlBhdGgKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCRPYmplY3QuUFNPYmplY3QuUHJvcGVydGllc1snRnVsbE5hbWUnXSkgewogICAgICAgICAgICAgICAgJEtlZVBhc3NYTUxQYXRoID0gW1N0cmluZ10kT2JqZWN0LkZ1bGxOYW1lCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkS2VlUGFzc1hNTFBhdGggPSBbU3RyaW5nXSRPYmplY3QKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYoJEtlZVBhc3NYTUxQYXRoIC1hbmQgKCRLZWVQYXNzWE1MUGF0aCAtbWF0Y2ggJy5cLnhtbCQnKSAtYW5kIChUZXN0LVBhdGggLVBhdGggJEtlZVBhc3NYTUxQYXRoKSApIHsKICAgICAgICAgICAgICAgICRLZWVQYXNzWE1MUGF0aCA9IFJlc29sdmUtUGF0aCAtUGF0aCAkS2VlUGFzc1hNTFBhdGgKCiAgICAgICAgICAgICAgICAkS2VlUGFzc1hNTCA9IFt4bWxdKEdldC1Db250ZW50IC1QYXRoICRLZWVQYXNzWE1MUGF0aCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJFJhbmRvbUdVSUQgPSBbU3lzdGVtLkdVSURdOjpOZXdHdWlkKCkuVG9CeXRlQXJyYXkoKQoKICAgICAgICAgICAgICAgIGlmICgkS2VlUGFzc1hNTC5Db25maWd1cmF0aW9uLkFwcGxpY2F0aW9uLlRyaWdnZXJTeXN0ZW0uVHJpZ2dlcnMgLWlzIFtTdHJpbmddKSB7CiAgICAgICAgICAgICAgICAgICAgJFRyaWdnZXJzID0gJEtlZVBhc3NYTUwuQ3JlYXRlRWxlbWVudCgnVHJpZ2dlcnMnKQogICAgICAgICAgICAgICAgICAgICROdWxsID0gJFRyaWdnZXJzLkFwcGVuZENoaWxkKCRLZWVQYXNzWE1MLkltcG9ydE5vZGUoJFRyaWdnZXJYTUwuVHJpZ2dlciwgJFRydWUpKQogICAgICAgICAgICAgICAgICAgICROdWxsID0gJEtlZVBhc3NYTUwuQ29uZmlndXJhdGlvbi5BcHBsaWNhdGlvbi5UcmlnZ2VyU3lzdGVtLlJlcGxhY2VDaGlsZCgkVHJpZ2dlcnMsICRLZWVQYXNzWE1MLkNvbmZpZ3VyYXRpb24uQXBwbGljYXRpb24uVHJpZ2dlclN5c3RlbS5TZWxlY3RTaW5nbGVOb2RlKCdUcmlnZ2VycycpKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJE51bGwgPSAkS2VlUGFzc1hNTC5Db25maWd1cmF0aW9uLkFwcGxpY2F0aW9uLlRyaWdnZXJTeXN0ZW0uVHJpZ2dlcnMuQXBwZW5kQ2hpbGQoJEtlZVBhc3NYTUwuSW1wb3J0Tm9kZSgkVHJpZ2dlclhNTC5UcmlnZ2VyLCAkVHJ1ZSkpCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJEtlZVBhc3NYTUwuU2F2ZSgkS2VlUGFzc1hNTFBhdGgpCgogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiJEtlZVBhc3NYTUxQYXRoIGJhY2tkb29yZWQiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBSZW1vdmUtS2VlUGFzc0NvbmZpZ1RyaWdnZXIgewo8IwogICAgLlNZTk9QU0lTCgogICAgICAgIFJlbW92ZXMgYSBLZWVQYXNzIGV4ZmlsdHJhdGlvbiB0cmlnZ2VyIHRvIGEgS2VlUGFzcy5jb25maWcueG1sIHBhdGggb3IgcmVzdWx0IGZyb20gRmluZC1LZWVQYXNzQ29uZmlnLgoKICAgICAgICBBdXRob3I6IEBoYXJtajB5CiAgICAgICAgTGljZW5zZTogQlNEIDMtQ2xhdXNlCiAgICAgICAgUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBOb25lCiAgICAgICAgT3B0aW9uYWwgRGVwZW5kZW5jaWVzOiBOb25lCgogICAgLkRFU0NSSVBUSU9OCgogICAgICAgIFJlbW92ZXMgYW55IGN1c3RvbSBhIGN1c3RvbSBLZWVQYXNzLmNvbmZpZy54bWwgdHJpZ2dlciBpbnRvIGEgS2VlUGFzcyBmaWxlIGxvY2F0aW9uLiBUaGUgdHJpZ2dlciAtQWN0aW9uIGNhbiBlaXRoZXIKICAgICAgICBleHBvcnQgYSBkYXRhYmFzZSB0byAkRXhwb3J0UGF0aCB3aGVuZXZlciBhIGRhdGFiYXNlIGlzIG9wZW4gKCdFeHBvcnREYXRhYmFzZScpIG9yIHdyaXRlIGFuIGRhdGEgY29waWVkIG9uIHRoZQogICAgICAgIGNsaXBib2FyZCBmcm9tIEtlZVBhc3MgdG8gJEV4cG9ydFBhdGggKCdFeGZpbERhdGFDb3BpZWQnKS4KCiAgICAuUEFSQU1FVEVSIFBhdGgKCiAgICAgICAgUmVxdWlyZWQgcGF0aCB0byBhIEtlZVBhc3MuY29uZmlnLnhtbCBmaWxlIG9yIGFuIG9iamVjdCByZXN1bHQgZnJvbSBGaW5kLUtlZVBhc3NDb25maWcuCgogICAgLlBBUkFNRVRFUiBBY3Rpb24KCiAgICAgICAgRWl0aGVyICdFeHBvcnREYXRhYmFzZScgKGV4cG9ydCBvcGVuZWQgZGF0YWJhc2VzIHRvICRFeHBvcnRQYXRoKSBvciAnRXhmaWxEYXRhQ29waWVkJyAoZXhwb3J0CiAgICAgICAgY29waWVkIGRhdGEgdG8gJEV4cG9ydFBhdGgpLgoKICAgIC5QQVJBTUVURVIgRXhwb3J0UGF0aAoKICAgICAgICBUaGUgcGF0aCB0byBleHBvcnQgZGF0YSBhbmQvb3IgdGhlICRUcmlnZ2VyTmFtZS52YnMgdG8uCiAgICAKICAgIC5QQVJBTUVURVIgVHJpZ2dlck5hbWUKCiAgICAgICAgVGhlIG5hbWUgZm9yIHRoZSB0cmlnZ2VyLCBkZWZhdWx0IHRvICdEZWJ1ZycuCgogICAgLkVYQU1QTEUKCiAgICAgICAgUFMgQzpcPiBGaW5kLUtlZVBhc3Njb25maWcgQzpcdXNlcnNcIHwgUmVtb3ZlLUtlZVBhc3NDb25maWdUcmlnZ2VyCgoKICAgICAgICBHdWlkICAgICAgIDogd0VJcFo2MXZrMHlWNXVFTmU1ejBvQT09CiAgICAgICAgTmFtZSAgICAgICA6IERlYnVnCiAgICAgICAgRXZlbnRzICAgICA6IEV2ZW50cwogICAgICAgIENvbmRpdGlvbnMgOgogICAgICAgIEFjdGlvbnMgICAgOiBBY3Rpb25zCgoKCiAgICAgICAgUFMgQzpcPiBGaW5kLUtlZVBhc3Njb25maWcgQzpcdXNlcnNcIHwgR2V0LUtlZVBhc3NDb25maWdUcmlnZ2VyCiAgICAgICAgUFMgQzpcPgojPgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbT2JqZWN0W11dCiAgICAgICAgJFBhdGgsCgogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAxKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRyaWdnZXJOYW1lID0gJyonCiAgICApCgogICAgUFJPQ0VTUyB7CiAgICAgICAgCiAgICAgICAgRm9yRWFjaCgkT2JqZWN0IGluICRQYXRoKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICBpZigkT2JqZWN0IC1pcyBbU3RyaW5nXSkgewogICAgICAgICAgICAgICAgJEtlZVBhc3NYTUxQYXRoID0gJE9iamVjdAogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZiAoJE9iamVjdC5QU09iamVjdC5Qcm9wZXJ0aWVzWydLZWVQYXNzQ29uZmlnUGF0aCddKSB7CiAgICAgICAgICAgICAgICAkS2VlUGFzc1hNTFBhdGggPSBbU3RyaW5nXSRPYmplY3QuS2VlUGFzc0NvbmZpZ1BhdGgKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCRPYmplY3QuUFNPYmplY3QuUHJvcGVydGllc1snUGF0aCddKSB7CiAgICAgICAgICAgICAgICAkS2VlUGFzc1hNTFBhdGggPSBbU3RyaW5nXSRPYmplY3QuUGF0aAogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZiAoJE9iamVjdC5QU09iamVjdC5Qcm9wZXJ0aWVzWydGdWxsTmFtZSddKSB7CiAgICAgICAgICAgICAgICAkS2VlUGFzc1hNTFBhdGggPSBbU3RyaW5nXSRPYmplY3QuRnVsbE5hbWUKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRLZWVQYXNzWE1MUGF0aCA9IFtTdHJpbmddJE9iamVjdAogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJLZWVQYXNzWE1MUGF0aDogJEtlZVBhc3NYTUxQYXRoIgoKICAgICAgICAgICAgaWYoJEtlZVBhc3NYTUxQYXRoIC1hbmQgKCRLZWVQYXNzWE1MUGF0aCAtbWF0Y2ggJy5cLnhtbCQnKSAtYW5kIChUZXN0LVBhdGggLVBhdGggJEtlZVBhc3NYTUxQYXRoKSApIHsKICAgICAgICAgICAgICAgICRLZWVQYXNzWE1MUGF0aCA9IFJlc29sdmUtUGF0aCAtUGF0aCAkS2VlUGFzc1hNTFBhdGgKCiAgICAgICAgICAgICAgICAkS2VlUGFzc1hNTCA9IFt4bWxdKEdldC1Db250ZW50IC1QYXRoICRLZWVQYXNzWE1MUGF0aCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJFJhbmRvbUdVSUQgPSBbU3lzdGVtLkdVSURdOjpOZXdHdWlkKCkuVG9CeXRlQXJyYXkoKQoKICAgICAgICAgICAgICAgIGlmICgkS2VlUGFzc1hNTC5Db25maWd1cmF0aW9uLkFwcGxpY2F0aW9uLlRyaWdnZXJTeXN0ZW0uVHJpZ2dlcnMgLWlzbm90IFtTdHJpbmddKSB7CgogICAgICAgICAgICAgICAgICAgICRDaGlsZHJlbiA9ICRLZWVQYXNzWE1MLkNvbmZpZ3VyYXRpb24uQXBwbGljYXRpb24uVHJpZ2dlclN5c3RlbS5UcmlnZ2VycyB8IEZvckVhY2gtT2JqZWN0IHskXy5UcmlnZ2VyfSB8IFdoZXJlLU9iamVjdCB7JF8uTmFtZSAtbGlrZSAkVHJpZ2dlck5hbWV9CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiUmVtb3ZpbmcgdHJpZ2dlcnMgbWF0Y2hpbmcgbmFtZSAkVHJpZ2dlck5hbWUiCiAgICAgICAgICAgICAgICAgICAgRm9yRWFjaCgkQ2hpbGQgaW4gJENoaWxkcmVuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRLZWVQYXNzWE1MLkNvbmZpZ3VyYXRpb24uQXBwbGljYXRpb24uVHJpZ2dlclN5c3RlbS5UcmlnZ2Vycy5SZW1vdmVDaGlsZCgkQ2hpbGQpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAkS2VlUGFzc1hNTC5TYXZlKCRLZWVQYXNzWE1MUGF0aCkKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIkS2VlUGFzc1hNTFBhdGggdHJpZ2dlcnMgcmVtb3ZlZCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJFcnJvciBzZXR0aW5nIHBhdGggJEtlZVBhc3NYTUxQYXRoIDogJF8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo=
