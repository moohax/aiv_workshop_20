Write-ErrorLog.Tests.ps1,ee10395c177b757e5ed4abfbaf328f3b,Scan result is 1. IsMalware: 0,CiRNb2R1bGVQYXRoID0gUmVzb2x2ZS1QYXRoIC1QYXRoICIkUFNTY3JpcHRSb290XC4uXC4uXE1vZHVsZXMiIHwgRm9yRWFjaC1PYmplY3QgUGF0aAokTW9kdWxlTmFtZSA9IEdldC1DaGlsZEl0ZW0gLVBhdGggJE1vZHVsZVBhdGggfCBTZWxlY3QtT2JqZWN0IC1GaXJzdCAxIC1FeHBhbmRQcm9wZXJ0eSBCYXNlTmFtZQoKUmVtb3ZlLU1vZHVsZSAtTmFtZSAkTW9kdWxlTmFtZSAtRm9yY2UgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKSW1wb3J0LU1vZHVsZSAtTmFtZSAiJE1vZHVsZVBhdGhcJE1vZHVsZU5hbWUiIC1Gb3JjZQoKSW5Nb2R1bGVTY29wZSBTY3JpcHRMb2dnZXIgewoKICAgIERlc2NyaWJlICdXcml0ZS1FcnJvckxvZycgewoKICAgICAgICBDb250ZXh0ICdNb2NrSW5uZXJDYWxsJyB7CgogICAgICAgICAgICBNb2NrIFdyaXRlLUxvZyAtTW9kdWxlTmFtZSBTY3JpcHRMb2dnZXIgLVBhcmFtZXRlckZpbHRlciB7ICRMZXZlbCAtZXEgJ0Vycm9yJyB9CgogICAgICAgICAgICBJdCAnSW5uZXJMZXZlbCcgewoKICAgICAgICAgICAgICAgIFdyaXRlLUVycm9yTG9nIC1NZXNzYWdlICdNeSBFcnJvcicKCiAgICAgICAgICAgICAgICBBc3NlcnQtTW9ja0NhbGxlZCBXcml0ZS1Mb2cgLVRpbWVzIDEKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQ29udGV4dCAnTW9ja0lubmVyQ2FsbEVycm9yUmVjb3JkJyB7CgogICAgICAgICAgICBNb2NrIFdyaXRlLUxvZyAtTW9kdWxlTmFtZSBTY3JpcHRMb2dnZXIgLVBhcmFtZXRlckZpbHRlciB7ICRFcnJvclJlY29yZC5DYXRlZ29yeUluZm8uUmVhc29uIC1lcSAnUnVudGltZUV4Y2VwdGlvbicgfQoKICAgICAgICAgICAgSXQgJ0lubmVyTGV2ZWwnIHsKCiAgICAgICAgICAgICAgICBXcml0ZS1FcnJvckxvZyAtRXJyb3JSZWNvcmQgJCh0cnkgeyAwIC8gMCB9IGNhdGNoIHsgJF8gfSkKCiAgICAgICAgICAgICAgICBBc3NlcnQtTW9ja0NhbGxlZCBXcml0ZS1Mb2cgLVRpbWVzIDEKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQ29udGV4dCAnT3V0cHV0JyB7CgogICAgICAgICAgICBNb2NrIEdldC1EYXRlIC1Nb2R1bGVOYW1lIFNjcmlwdExvZ2dlciB7IFtEYXRlVGltZV0gJzIwMDAtMTItMzEgMDE6MDI6MDMnIH0KCiAgICAgICAgICAgIE1vY2sgU2hvdy1FcnJvck1lc3NhZ2UgLU1vZHVsZU5hbWUgU2NyaXB0TG9nZ2VyIC1QYXJhbWV0ZXJGaWx0ZXIgeyAkTWVzc2FnZSAtZXEgJ015IEVycm9yJyB9CgogICAgICAgICAgICBCZWZvcmVBbGwgewoKICAgICAgICAgICAgICAgICRQYXRoID0gJ1Rlc3REcml2ZTpcdGVzdC5sb2cnCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEl0ICdMb2dGaWxlJyB7CgogICAgICAgICAgICAgICAgU3RhcnQtU2NyaXB0TG9nZ2VyIC1QYXRoICRQYXRoIC1Ob0V2ZW50TG9nIC1Ob0NvbnNvbGVPdXRwdXQKCiAgICAgICAgICAgICAgICBXcml0ZS1FcnJvckxvZyAtTWVzc2FnZSAnTXkgRXJyb3InCgogICAgICAgICAgICAgICAgJENvbnRlbnQgPSBHZXQtQ29udGVudCAtUGF0aCAkUGF0aAogICAgICAgICAgICAgICAgJENvbnRlbnQgfCBTaG91bGQgQmUgIjIwMDAtMTItMzEgICAwMTowMjowMyAgICRFbnY6Q29tcHV0ZXJOYW1lICAgJEVudjpVc2VybmFtZSAgIEVycm9yICAgICAgICAgTXkgRXJyb3IiCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEl0ICdFdmVudExvZycgewoKICAgICAgICAgICAgICAgIFN0YXJ0LVNjcmlwdExvZ2dlciAtUGF0aCAkUGF0aCAtTm9Mb2dGaWxlIC1Ob0NvbnNvbGVPdXRwdXQKCiAgICAgICAgICAgICAgICAkQmVmb3JlID0gR2V0LURhdGUKCiAgICAgICAgICAgICAgICBXcml0ZS1FcnJvckxvZyAtTWVzc2FnZSAnTXkgRXJyb3InCgogICAgICAgICAgICAgICAgJEV2ZW50ID0gR2V0LUV2ZW50TG9nIC1Mb2dOYW1lICdXaW5kb3dzIFBvd2VyU2hlbGwnIC1Tb3VyY2UgJ1Bvd2VyU2hlbGwnIC1JbnN0YW5jZUlkIDAgLUVudHJ5VHlwZSBFcnJvciAtQWZ0ZXIgJEJlZm9yZSAtTmV3ZXN0IDEKCiAgICAgICAgICAgICAgICAkRXZlbnQgfCBTaG91bGQgTm90IEJlICRudWxsCiAgICAgICAgICAgICAgICAkRXZlbnQuRXZlbnRJRCAgICAgICAgfCBTaG91bGQgQmUgMAogICAgICAgICAgICAgICAgJEV2ZW50LkNhdGVnb3J5TnVtYmVyIHwgU2hvdWxkIEJlIDAKICAgICAgICAgICAgICAgICRFdmVudC5FbnRyeVR5cGUgICAgICB8IFNob3VsZCBCZSAnRXJyb3InCiAgICAgICAgICAgICAgICAkRXZlbnQuTWVzc2FnZSAgICAgICAgfCBTaG91bGQgQmUgIlRoZSBkZXNjcmlwdGlvbiBmb3IgRXZlbnQgSUQgJzAnIGluIFNvdXJjZSAnUG93ZXJTaGVsbCcgY2Fubm90IGJlIGZvdW5kLiAgVGhlIGxvY2FsIGNvbXB1dGVyIG1heSBub3QgaGF2ZSB0aGUgbmVjZXNzYXJ5IHJlZ2lzdHJ5IGluZm9ybWF0aW9uIG9yIG1lc3NhZ2UgRExMIGZpbGVzIHRvIGRpc3BsYXkgdGhlIG1lc3NhZ2UsIG9yIHlvdSBtYXkgbm90IGhhdmUgcGVybWlzc2lvbiB0byBhY2Nlc3MgdGhlbS4gIFRoZSBmb2xsb3dpbmcgaW5mb3JtYXRpb24gaXMgcGFydCBvZiB0aGUgZXZlbnQ6J015IEVycm9yJyIKICAgICAgICAgICAgICAgICRFdmVudC5Tb3VyY2UgICAgICAgICB8IFNob3VsZCBCZSAnUG93ZXJTaGVsbCcKICAgICAgICAgICAgICAgICRFdmVudC5JbnN0YW5jZUlkICAgICB8IFNob3VsZCBCZSAwCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEl0ICdDb25zb2xlT3V0cHV0JyB7CgogICAgICAgICAgICAgICAgU3RhcnQtU2NyaXB0TG9nZ2VyIC1QYXRoICRQYXRoIC1Ob0xvZ0ZpbGUgLU5vRXZlbnRMb2cKCiAgICAgICAgICAgICAgICAkQmVmb3JlID0gR2V0LURhdGUKCiAgICAgICAgICAgICAgICBXcml0ZS1FcnJvckxvZyAtTWVzc2FnZSAnTXkgRXJyb3InCgogICAgICAgICAgICAgICAgQXNzZXJ0LU1vY2tDYWxsZWQgLUNvbW1hbmROYW1lICdTaG93LUVycm9yTWVzc2FnZScgLVRpbWVzIDEgLUV4YWN0bHkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgQWZ0ZXJFYWNoIHsKCiAgICAgICAgICAgICAgICBHZXQtU2NyaXB0TG9nZ2VyIHwgUmVtb3ZlLUl0ZW0gLUZvcmNlCiAgICAgICAgICAgICAgICBTdG9wLVNjcmlwdExvZ2dlcgogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBDb250ZXh0ICdPdXRwdXRFcnJvclJlY29yZCcgewoKICAgICAgICAgICAgTW9jayBHZXQtRGF0ZSAtTW9kdWxlTmFtZSBTY3JpcHRMb2dnZXIgeyBbRGF0ZVRpbWVdICcyMDAwLTEyLTMxIDAxOjAyOjAzJyB9CgogICAgICAgICAgICBNb2NrIFNob3ctRXJyb3JNZXNzYWdlIC1Nb2R1bGVOYW1lIFNjcmlwdExvZ2dlciAtUGFyYW1ldGVyRmlsdGVyIHsgJE1lc3NhZ2UgLWxpa2UgJ0F0dGVtcHRlZCB0byBkaXZpZGUgYnkgemVyby4qJyB9CgogICAgICAgICAgICBCZWZvcmVBbGwgewoKICAgICAgICAgICAgICAgICRQYXRoID0gJ1Rlc3REcml2ZTpcdGVzdC5sb2cnCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEl0ICdMb2dGaWxlJyB7CgogICAgICAgICAgICAgICAgU3RhcnQtU2NyaXB0TG9nZ2VyIC1QYXRoICRQYXRoIC1Ob0V2ZW50TG9nIC1Ob0NvbnNvbGVPdXRwdXQKCiAgICAgICAgICAgICAgICBXcml0ZS1FcnJvckxvZyAtRXJyb3JSZWNvcmQgJCh0cnkgeyAwIC8gMCB9IGNhdGNoIHsgJF8gfSkKCiAgICAgICAgICAgICAgICAkQ29udGVudCA9IEdldC1Db250ZW50IC1QYXRoICRQYXRoCiAgICAgICAgICAgICAgICAkQ29udGVudCB8IFNob3VsZCBCZUxpa2UgIjIwMDAtMTItMzEgICAwMTowMjowMyAgICRFbnY6Q29tcHV0ZXJOYW1lICAgJEVudjpVc2VybmFtZSAgIEVycm9yICAgICAgICAgQXR0ZW1wdGVkIHRvIGRpdmlkZSBieSB6ZXJvLiAoUnVudGltZUV4Y2VwdGlvbjogKlxVbml0XFdyaXRlLUVycm9yTG9nLlRlc3RzLnBzMToxMDkgY2hhcjo1MykiCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEl0ICdFdmVudExvZycgewoKICAgICAgICAgICAgICAgIFN0YXJ0LVNjcmlwdExvZ2dlciAtUGF0aCAkUGF0aCAtTm9Mb2dGaWxlIC1Ob0NvbnNvbGVPdXRwdXQKCiAgICAgICAgICAgICAgICAkQmVmb3JlID0gR2V0LURhdGUKCiAgICAgICAgICAgICAgICBXcml0ZS1FcnJvckxvZyAtRXJyb3JSZWNvcmQgJCh0cnkgeyAwIC8gMCB9IGNhdGNoIHsgJF8gfSkKCiAgICAgICAgICAgICAgICAkRXZlbnQgPSBHZXQtRXZlbnRMb2cgLUxvZ05hbWUgJ1dpbmRvd3MgUG93ZXJTaGVsbCcgLVNvdXJjZSAnUG93ZXJTaGVsbCcgLUluc3RhbmNlSWQgMCAtRW50cnlUeXBlIEVycm9yIC1BZnRlciAkQmVmb3JlIC1OZXdlc3QgMQoKICAgICAgICAgICAgICAgICRFdmVudCB8IFNob3VsZCBOb3QgQmUgJG51bGwKICAgICAgICAgICAgICAgICRFdmVudC5FdmVudElEICAgICAgICB8IFNob3VsZCBCZSAwCiAgICAgICAgICAgICAgICAkRXZlbnQuQ2F0ZWdvcnlOdW1iZXIgfCBTaG91bGQgQmUgMAogICAgICAgICAgICAgICAgJEV2ZW50LkVudHJ5VHlwZSAgICAgIHwgU2hvdWxkIEJlICdFcnJvcicKICAgICAgICAgICAgICAgICRFdmVudC5JbnN0YW5jZUlkICAgICB8IFNob3VsZCBCZSAwCiAgICAgICAgICAgICAgICAkRXZlbnQuU291cmNlICAgICAgICAgfCBTaG91bGQgQmUgJ1Bvd2VyU2hlbGwnCiAgICAgICAgICAgICAgICAkRXZlbnQuTWVzc2FnZSAgICAgICAgfCBTaG91bGQgQmVMaWtlICJUaGUgZGVzY3JpcHRpb24gZm9yIEV2ZW50IElEICcwJyBpbiBTb3VyY2UgJ1Bvd2VyU2hlbGwnIGNhbm5vdCBiZSBmb3VuZC4gIFRoZSBsb2NhbCBjb21wdXRlciBtYXkgbm90IGhhdmUgdGhlIG5lY2Vzc2FyeSByZWdpc3RyeSBpbmZvcm1hdGlvbiBvciBtZXNzYWdlIERMTCBmaWxlcyB0byBkaXNwbGF5IHRoZSBtZXNzYWdlLCBvciB5b3UgbWF5IG5vdCBoYXZlIHBlcm1pc3Npb24gdG8gYWNjZXNzIHRoZW0uICBUaGUgZm9sbG93aW5nIGluZm9ybWF0aW9uIGlzIHBhcnQgb2YgdGhlIGV2ZW50OidBdHRlbXB0ZWQgdG8gZGl2aWRlIGJ5IHplcm8uIChSdW50aW1lRXhjZXB0aW9uOiAqXFVuaXRcV3JpdGUtRXJyb3JMb2cuVGVzdHMucHMxOjEyMSBjaGFyOjUzKSciCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEl0ICdDb25zb2xlT3V0cHV0JyB7CgogICAgICAgICAgICAgICAgU3RhcnQtU2NyaXB0TG9nZ2VyIC1QYXRoICRQYXRoIC1Ob0xvZ0ZpbGUgLU5vRXZlbnRMb2cKCiAgICAgICAgICAgICAgICAkQmVmb3JlID0gR2V0LURhdGUKCiAgICAgICAgICAgICAgICB0cnkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAwIC8gMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2F0Y2gKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1FcnJvckxvZyAtRXJyb3JSZWNvcmQgJF8KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBBc3NlcnQtTW9ja0NhbGxlZCAtQ29tbWFuZE5hbWUgJ1Nob3ctRXJyb3JNZXNzYWdlJyAtVGltZXMgMSAtRXhhY3RseQogICAgICAgICAgICB9CgogICAgICAgICAgICBBZnRlckVhY2ggewoKICAgICAgICAgICAgICAgIEdldC1TY3JpcHRMb2dnZXIgfCBSZW1vdmUtSXRlbSAtRm9yY2UKICAgICAgICAgICAgICAgIFN0b3AtU2NyaXB0TG9nZ2VyCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0K
