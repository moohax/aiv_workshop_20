install.ps1,67c042f848858bc71d27beece21b7d54,Scan result is 1. IsMalware: 0,IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIyBDb3B5cmlnaHQgMjAxMSAtIFByZXNlbnQgUmVhbERpbWVuc2lvbnMgU29mdHdhcmUsIExMQywgYW5kIHRoZQojIG9yaWdpbmFsIGF1dGhvcnMvY29udHJpYnV0b3JzIGZyb20gQ2hvY29sYXRleUdhbGxlcnkKIyBhdCBodHRwczovL2dpdGh1Yi5jb20vY2hvY29sYXRleS9jaG9jb2xhdGV5Lm9yZwojCiMgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiMgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgojIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAojCiMgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKIwojIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKIyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAojIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgojIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKIyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCiMgRW52aXJvbm1lbnQgVmFyaWFibGVzLCBzcGVjaWZpZWQgYXMgJGVudjpOQU1FIGluIFBvd2VyU2hlbGwuZXhlIGFuZCAlTkFNRSUgaW4gY21kLmV4ZS4KIyBGb3IgZXhwbGljaXQgcHJveHksIHBsZWFzZSBzZXQgJGVudjpjaG9jb2xhdGV5UHJveHlMb2NhdGlvbiBhbmQgb3B0aW9uYWxseSAkZW52OmNob2NvbGF0ZXlQcm94eVVzZXIgYW5kICRlbnY6Y2hvY29sYXRleVByb3h5UGFzc3dvcmQKIyBGb3IgYW4gZXhwbGljaXQgdmVyc2lvbiBvZiBDaG9jb2xhdGV5LCBwbGVhc2Ugc2V0ICRlbnY6Y2hvY29sYXRleVZlcnNpb24gPSAndmVyc2lvbm51bWJlcicKIyBUbyB0YXJnZXQgYSBkaWZmZXJlbnQgdXJsIGZvciBjaG9jb2xhdGV5Lm51cGtnLCBwbGVhc2Ugc2V0ICRlbnY6Y2hvY29sYXRleURvd25sb2FkVXJsID0gJ2Z1bGwgdXJsIHRvIG51cGtnIGZpbGUnCiMgTk9URTogJGVudjpjaG9jb2xhdGV5RG93bmxvYWRVcmwgZG9lcyBub3Qgd29yayB3aXRoICRlbnY6Y2hvY29sYXRleVZlcnNpb24uCiMgVG8gdXNlIDd6aXAgKHJlcXVpcmVzIGFkZGl0aW9uYWwgZG93bmxvYWQpIGluc3RlYWQgb2YgYnVpbHQtaW4gY29tcHJlc3Npb24sIHBsZWFzZSBzZXQgJGVudjpjaG9jb2xhdGV5VXNlV2luZG93c0NvbXByZXNzaW9uID0gJ2ZhbHNlJwojIFRvIGJ5cGFzcyB0aGUgdXNlIG9mIGFueSBwcm94eSwgcGxlYXNlIHNldCAkZW52OmNob2NvbGF0ZXlJZ25vcmVQcm94eSA9ICd0cnVlJwoKI3NwZWNpZmljYWxseSB1c2UgdGhlIEFQSSB0byBnZXQgdGhlIGxhdGVzdCB2ZXJzaW9uIChiZWxvdykKJHVybCA9ICcnCgokY2hvY29sYXRleVZlcnNpb24gPSAkZW52OmNob2NvbGF0ZXlWZXJzaW9uCmlmICghW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJGNob2NvbGF0ZXlWZXJzaW9uKSl7CiAgV3JpdGUtT3V0cHV0ICJEb3dubG9hZGluZyBzcGVjaWZpYyB2ZXJzaW9uIG9mIENob2NvbGF0ZXk6ICRjaG9jb2xhdGV5VmVyc2lvbiIKICAkdXJsID0gImh0dHBzOi8vY2hvY29sYXRleS5vcmcvYXBpL3YyL3BhY2thZ2UvY2hvY29sYXRleS8kY2hvY29sYXRleVZlcnNpb24iCn0KCiRjaG9jb2xhdGV5RG93bmxvYWRVcmwgPSAkZW52OmNob2NvbGF0ZXlEb3dubG9hZFVybAppZiAoIVtzdHJpbmddOjpJc051bGxPckVtcHR5KCRjaG9jb2xhdGV5RG93bmxvYWRVcmwpKXsKICBXcml0ZS1PdXRwdXQgIkRvd25sb2FkaW5nIENob2NvbGF0ZXkgZnJvbSA6ICRjaG9jb2xhdGV5RG93bmxvYWRVcmwiCiAgJHVybCA9ICIkY2hvY29sYXRleURvd25sb2FkVXJsIgp9CgppZiAoJGVudjpURU1QIC1lcSAkbnVsbCkgewogICRlbnY6VEVNUCA9IEpvaW4tUGF0aCAkZW52OlN5c3RlbURyaXZlICd0ZW1wJwp9CiRjaG9jVGVtcERpciA9IEpvaW4tUGF0aCAkZW52OlRFTVAgImNob2NvbGF0ZXkiCiR0ZW1wRGlyID0gSm9pbi1QYXRoICRjaG9jVGVtcERpciAiY2hvY0luc3RhbGwiCmlmICghW1N5c3RlbS5JTy5EaXJlY3RvcnldOjpFeGlzdHMoJHRlbXBEaXIpKSB7W1N5c3RlbS5JTy5EaXJlY3RvcnldOjpDcmVhdGVEaXJlY3RvcnkoJHRlbXBEaXIpfQokZmlsZSA9IEpvaW4tUGF0aCAkdGVtcERpciAiY2hvY29sYXRleS56aXAiCgojIFBvd2VyU2hlbGwgdjIvMyBjYWNoZXMgdGhlIG91dHB1dCBzdHJlYW0uIFRoZW4gaXQgdGhyb3dzIGVycm9ycyBkdWUKIyB0byB0aGUgRmlsZVN0cmVhbSBub3QgYmVpbmcgd2hhdCBpcyBleHBlY3RlZC4gRml4ZXMgIlRoZSBPUyBoYW5kbGUncwojIHBvc2l0aW9uIGlzIG5vdCB3aGF0IEZpbGVTdHJlYW0gZXhwZWN0ZWQuIERvIG5vdCB1c2UgYSBoYW5kbGUKIyBzaW11bHRhbmVvdXNseSBpbiBvbmUgRmlsZVN0cmVhbSBhbmQgaW4gV2luMzIgY29kZSBvciBhbm90aGVyCiMgRmlsZVN0cmVhbS4iCmZ1bmN0aW9uIEZpeC1Qb3dlclNoZWxsT3V0cHV0UmVkaXJlY3Rpb25CdWcgewogICRwb3NoTWFqb3JWZXJpb24gPSAkUFNWZXJzaW9uVGFibGUuUFNWZXJzaW9uLk1ham9yCgogIGlmICgkcG9zaE1ham9yVmVyaW9uIC1sdCA0KSB7CiAgICB0cnl7CiAgICAgICMgaHR0cDovL3d3dy5sZWVob2xtZXMuY29tL2Jsb2cvMjAwOC8wNy8zMC93b3JrYXJvdW5kLXRoZS1vcy1oYW5kbGVzLXBvc2l0aW9uLWlzLW5vdC13aGF0LWZpbGVzdHJlYW0tZXhwZWN0ZWQvIHBsdXMgY29tbWVudHMKICAgICAgJGJpbmRpbmdGbGFncyA9IFtSZWZsZWN0aW9uLkJpbmRpbmdGbGFnc10gIkluc3RhbmNlLE5vblB1YmxpYyxHZXRGaWVsZCIKICAgICAgJG9iamVjdFJlZiA9ICRob3N0LkdldFR5cGUoKS5HZXRGaWVsZCgiZXh0ZXJuYWxIb3N0UmVmIiwgJGJpbmRpbmdGbGFncykuR2V0VmFsdWUoJGhvc3QpCiAgICAgICRiaW5kaW5nRmxhZ3MgPSBbUmVmbGVjdGlvbi5CaW5kaW5nRmxhZ3NdICJJbnN0YW5jZSxOb25QdWJsaWMsR2V0UHJvcGVydHkiCiAgICAgICRjb25zb2xlSG9zdCA9ICRvYmplY3RSZWYuR2V0VHlwZSgpLkdldFByb3BlcnR5KCJWYWx1ZSIsICRiaW5kaW5nRmxhZ3MpLkdldFZhbHVlKCRvYmplY3RSZWYsIEAoKSkKICAgICAgW3ZvaWRdICRjb25zb2xlSG9zdC5HZXRUeXBlKCkuR2V0UHJvcGVydHkoIklzU3RhbmRhcmRPdXRwdXRSZWRpcmVjdGVkIiwgJGJpbmRpbmdGbGFncykuR2V0VmFsdWUoJGNvbnNvbGVIb3N0LCBAKCkpCiAgICAgICRiaW5kaW5nRmxhZ3MgPSBbUmVmbGVjdGlvbi5CaW5kaW5nRmxhZ3NdICJJbnN0YW5jZSxOb25QdWJsaWMsR2V0RmllbGQiCiAgICAgICRmaWVsZCA9ICRjb25zb2xlSG9zdC5HZXRUeXBlKCkuR2V0RmllbGQoInN0YW5kYXJkT3V0cHV0V3JpdGVyIiwgJGJpbmRpbmdGbGFncykKICAgICAgJGZpZWxkLlNldFZhbHVlKCRjb25zb2xlSG9zdCwgW0NvbnNvbGVdOjpPdXQpCiAgICAgIFt2b2lkXSAkY29uc29sZUhvc3QuR2V0VHlwZSgpLkdldFByb3BlcnR5KCJJc1N0YW5kYXJkRXJyb3JSZWRpcmVjdGVkIiwgJGJpbmRpbmdGbGFncykuR2V0VmFsdWUoJGNvbnNvbGVIb3N0LCBAKCkpCiAgICAgICRmaWVsZDIgPSAkY29uc29sZUhvc3QuR2V0VHlwZSgpLkdldEZpZWxkKCJzdGFuZGFyZEVycm9yV3JpdGVyIiwgJGJpbmRpbmdGbGFncykKICAgICAgJGZpZWxkMi5TZXRWYWx1ZSgkY29uc29sZUhvc3QsIFtDb25zb2xlXTo6RXJyb3IpCiAgICB9IGNhdGNoIHsKICAgICAgV3JpdGUtT3V0cHV0ICJVbmFibGUgdG8gYXBwbHkgcmVkaXJlY3Rpb24gZml4LiIKICAgIH0KICB9Cn0KCkZpeC1Qb3dlclNoZWxsT3V0cHV0UmVkaXJlY3Rpb25CdWcKCmZ1bmN0aW9uIEdldC1Eb3dubG9hZGVyIHsKcGFyYW0gKAogIFtzdHJpbmddJHVybAogKQoKICAkZG93bmxvYWRlciA9IG5ldy1vYmplY3QgU3lzdGVtLk5ldC5XZWJDbGllbnQKCiAgJGRlZmF1bHRDcmVkcyA9IFtTeXN0ZW0uTmV0LkNyZWRlbnRpYWxDYWNoZV06OkRlZmF1bHRDcmVkZW50aWFscwogIGlmICgkZGVmYXVsdENyZWRzIC1uZSAkbnVsbCkgewogICAgJGRvd25sb2FkZXIuQ3JlZGVudGlhbHMgPSAkZGVmYXVsdENyZWRzCiAgfQoKICAkaWdub3JlUHJveHkgPSAkZW52OmNob2NvbGF0ZXlJZ25vcmVQcm94eQogIGlmICgkaWdub3JlUHJveHkgLW5lICRudWxsIC1hbmQgJGlnbm9yZVByb3h5IC1lcSAndHJ1ZScpIHsKICAgIFdyaXRlLURlYnVnICJFeHBsaWNpdGx5IGJ5cGFzc2luZyBwcm94eSBkdWUgdG8gdXNlciBlbnZpcm9ubWVudCB2YXJpYWJsZSIKICAgICRkb3dubG9hZGVyLlByb3h5ID0gW1N5c3RlbS5OZXQuR2xvYmFsUHJveHlTZWxlY3Rpb25dOjpHZXRFbXB0eVdlYlByb3h5KCkKICB9IGVsc2UgewogICAgIyBjaGVjayBpZiBhIHByb3h5IGlzIHJlcXVpcmVkCiAgICAkZXhwbGljaXRQcm94eSA9ICRlbnY6Y2hvY29sYXRleVByb3h5TG9jYXRpb24KICAgICRleHBsaWNpdFByb3h5VXNlciA9ICRlbnY6Y2hvY29sYXRleVByb3h5VXNlcgogICAgJGV4cGxpY2l0UHJveHlQYXNzd29yZCA9ICRlbnY6Y2hvY29sYXRleVByb3h5UGFzc3dvcmQKICAgIGlmICgkZXhwbGljaXRQcm94eSAtbmUgJG51bGwgLWFuZCAkZXhwbGljaXRQcm94eSAtbmUgJycpIHsKICAgICAgIyBleHBsaWNpdCBwcm94eQogICAgICAkcHJveHkgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuV2ViUHJveHkoJGV4cGxpY2l0UHJveHksICR0cnVlKQogICAgICBpZiAoJGV4cGxpY2l0UHJveHlQYXNzd29yZCAtbmUgJG51bGwgLWFuZCAkZXhwbGljaXRQcm94eVBhc3N3b3JkIC1uZSAnJykgewogICAgICAgICRwYXNzd2QgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICRleHBsaWNpdFByb3h5UGFzc3dvcmQgLUFzUGxhaW5UZXh0IC1Gb3JjZQogICAgICAgICRwcm94eS5DcmVkZW50aWFscyA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwgKCRleHBsaWNpdFByb3h5VXNlciwgJHBhc3N3ZCkKICAgICAgfQoKICAgICAgV3JpdGUtRGVidWcgIlVzaW5nIGV4cGxpY2l0IHByb3h5IHNlcnZlciAnJGV4cGxpY2l0UHJveHknLiIKICAgICAgJGRvd25sb2FkZXIuUHJveHkgPSAkcHJveHkKCiAgICB9IGVsc2VpZiAoISRkb3dubG9hZGVyLlByb3h5LklzQnlwYXNzZWQoJHVybCkpIHsKICAgICAgIyBzeXN0ZW0gcHJveHkgKHBhc3MgdGhyb3VnaCkKICAgICAgJGNyZWRzID0gJGRlZmF1bHRDcmVkcwogICAgICBpZiAoJGNyZWRzIC1lcSAkbnVsbCkgewogICAgICAgIFdyaXRlLURlYnVnICJEZWZhdWx0IGNyZWRlbnRpYWxzIHdlcmUgbnVsbC4gQXR0ZW1wdGluZyBiYWNrdXAgbWV0aG9kIgogICAgICAgICRjcmVkID0gZ2V0LWNyZWRlbnRpYWwKICAgICAgICAkY3JlZHMgPSAkY3JlZC5HZXROZXR3b3JrQ3JlZGVudGlhbCgpOwogICAgICB9CgogICAgICAkcHJveHlhZGRyZXNzID0gJGRvd25sb2FkZXIuUHJveHkuR2V0UHJveHkoJHVybCkuQXV0aG9yaXR5CiAgICAgIFdyaXRlLURlYnVnICJVc2luZyBzeXN0ZW0gcHJveHkgc2VydmVyICckcHJveHlhZGRyZXNzJy4iCiAgICAgICRwcm94eSA9IE5ldy1PYmplY3QgU3lzdGVtLk5ldC5XZWJQcm94eSgkcHJveHlhZGRyZXNzKQogICAgICAkcHJveHkuQ3JlZGVudGlhbHMgPSAkY3JlZHMKICAgICAgJGRvd25sb2FkZXIuUHJveHkgPSAkcHJveHkKICAgIH0KICB9CgogIHJldHVybiAkZG93bmxvYWRlcgp9CgpmdW5jdGlvbiBEb3dubG9hZC1TdHJpbmcgewpwYXJhbSAoCiAgW3N0cmluZ10kdXJsCiApCiAgJGRvd25sb2FkZXIgPSBHZXQtRG93bmxvYWRlciAkdXJsCgogIHJldHVybiAkZG93bmxvYWRlci5Eb3dubG9hZFN0cmluZygkdXJsKQp9CgpmdW5jdGlvbiBEb3dubG9hZC1GaWxlIHsKcGFyYW0gKAogIFtzdHJpbmddJHVybCwKICBbc3RyaW5nXSRmaWxlCiApCiAgV3JpdGUtT3V0cHV0ICJEb3dubG9hZGluZyAkdXJsIHRvICRmaWxlIgogICRkb3dubG9hZGVyID0gR2V0LURvd25sb2FkZXIgJHVybAoKICAkZG93bmxvYWRlci5Eb3dubG9hZEZpbGUoJHVybCwgJGZpbGUpCn0KCmlmICgkdXJsIC1lcSAkbnVsbCAtb3IgJHVybCAtZXEgJycpIHsKICBXcml0ZS1PdXRwdXQgIkdldHRpbmcgbGF0ZXN0IHZlcnNpb24gb2YgdGhlIENob2NvbGF0ZXkgcGFja2FnZSBmb3IgZG93bmxvYWQuIgogICR1cmwgPSAnaHR0cHM6Ly9jaG9jb2xhdGV5Lm9yZy9hcGkvdjIvUGFja2FnZXMoKT8kZmlsdGVyPSgoSWQlMjBlcSUyMCUyN2Nob2NvbGF0ZXklMjcpJTIwYW5kJTIwKG5vdCUyMElzUHJlcmVsZWFzZSkpJTIwYW5kJTIwSXNMYXRlc3RWZXJzaW9uJwogIFt4bWxdJHJlc3VsdCA9IERvd25sb2FkLVN0cmluZyAkdXJsCiAgJHVybCA9ICRyZXN1bHQuZmVlZC5lbnRyeS5jb250ZW50LnNyYwp9CgojIERvd25sb2FkIHRoZSBDaG9jb2xhdGV5IHBhY2thZ2UKRG93bmxvYWQtRmlsZSAkdXJsICRmaWxlCgojIERldGVybWluZSB1bnppcHBpbmcgbWV0aG9kCiR1bnppcE1ldGhvZCA9ICc3emlwJwokdXNlV2luZG93c0NvbXByZXNzaW9uID0gJGVudjpjaG9jb2xhdGV5VXNlV2luZG93c0NvbXByZXNzaW9uCmlmICgkdXNlV2luZG93c0NvbXByZXNzaW9uIC1uZSAkbnVsbCAtYW5kICR1c2VXaW5kb3dzQ29tcHJlc3Npb24gLWVxICdmYWxzZScpIHsKICBXcml0ZS1PdXRwdXQgJ1VzaW5nIDd6aXAgdG8gdW56aXAuJwogICR1bnppcE1ldGhvZCA9ICc3emlwJwp9CgojIHVuemlwIHRoZSBwYWNrYWdlCldyaXRlLU91dHB1dCAiRXh0cmFjdGluZyAkZmlsZSB0byAkdGVtcERpci4uLiIKaWYgKCR1bnppcE1ldGhvZCAtZXEgJzd6aXAnKSB7CiAgIyBkb3dubG9hZCA3emlwCiAgV3JpdGUtT3V0cHV0ICJEb3dubG9hZGluZyA3LVppcCBjb21tYW5kbGluZSB0b29sIGZpcnN0IgogICQ3emFFeGUgPSBKb2luLVBhdGggJHRlbXBEaXIgJzd6YS5leGUnCiAgRG93bmxvYWQtRmlsZSAnaHR0cHM6Ly9jaG9jb2xhdGV5Lm9yZy83emEuZXhlJyAiJDd6YUV4ZSIKICBTdGFydC1Qcm9jZXNzICIkN3phRXhlIiAtQXJndW1lbnRMaXN0ICJ4IC1vYCIkdGVtcERpcmAiIC15IGAiJGZpbGVgIiIgLVdhaXQgLU5vTmV3V2luZG93Cn0gZWxzZSB7CiAgdHJ5IHsKICAgICRzaGVsbEFwcGxpY2F0aW9uID0gbmV3LW9iamVjdCAtY29tIHNoZWxsLmFwcGxpY2F0aW9uCiAgICAkemlwUGFja2FnZSA9ICRzaGVsbEFwcGxpY2F0aW9uLk5hbWVTcGFjZSgkZmlsZSkKICAgICRkZXN0aW5hdGlvbkZvbGRlciA9ICRzaGVsbEFwcGxpY2F0aW9uLk5hbWVTcGFjZSgkdGVtcERpcikKICAgICRkZXN0aW5hdGlvbkZvbGRlci5Db3B5SGVyZSgkemlwUGFja2FnZS5JdGVtcygpLDB4MTApCiAgfSBjYXRjaCB7CiAgICB0aHJvdyAiVW5hYmxlIHRvIHVuemlwIHBhY2thZ2UgdXNpbmcgYnVpbHQtaW4gY29tcHJlc3Npb24uIFNldCBgJGVudjpjaG9jb2xhdGV5VXNlV2luZG93c0NvbXByZXNzaW9uID0gJ2ZhbHNlJyBhbmQgY2FsbCBpbnN0YWxsIGFnYWluIHRvIHVzZSA3emlwIHRvIHVuemlwLiBFcnJvcjogYG4gJF8iCiAgfQp9CgojIENhbGwgY2hvY29sYXRleSBpbnN0YWxsCldyaXRlLU91dHB1dCAiSW5zdGFsbGluZyBjaG9jb2xhdGV5IG9uIHRoaXMgbWFjaGluZSIKJHRvb2xzRm9sZGVyID0gSm9pbi1QYXRoICR0ZW1wRGlyICJ0b29scyIKJGNob2NJbnN0YWxsUFMxID0gSm9pbi1QYXRoICR0b29sc0ZvbGRlciAiY2hvY29sYXRleUluc3RhbGwucHMxIgoKJiAkY2hvY0luc3RhbGxQUzEKCldyaXRlLU91dHB1dCAnRW5zdXJpbmcgY2hvY29sYXRleSBjb21tYW5kcyBhcmUgb24gdGhlIHBhdGgnCiRjaG9jSW5zdGFsbFZhcmlhYmxlTmFtZSA9ICJDaG9jb2xhdGV5SW5zdGFsbCIKJGNob2NvUGF0aCA9IFtFbnZpcm9ubWVudF06OkdldEVudmlyb25tZW50VmFyaWFibGUoJGNob2NJbnN0YWxsVmFyaWFibGVOYW1lKQppZiAoJGNob2NvUGF0aCAtZXEgJG51bGwgLW9yICRjaG9jb1BhdGggLWVxICcnKSB7CiAgJGNob2NvUGF0aCA9ICdDOlxQcm9ncmFtRGF0YVxDaG9jb2xhdGV5Jwp9CgokY2hvY29FeGVQYXRoID0gSm9pbi1QYXRoICRjaG9jb1BhdGggJ2JpbicKCmlmICgkKCRlbnY6UGF0aCkuVG9Mb3dlcigpLkNvbnRhaW5zKCQoJGNob2NvRXhlUGF0aCkuVG9Mb3dlcigpKSAtZXEgJGZhbHNlKSB7CiAgJGVudjpQYXRoID0gW0Vudmlyb25tZW50XTo6R2V0RW52aXJvbm1lbnRWYXJpYWJsZSgnUGF0aCcsW1N5c3RlbS5FbnZpcm9ubWVudFZhcmlhYmxlVGFyZ2V0XTo6TWFjaGluZSk7Cn0KCldyaXRlLU91dHB1dCAnRW5zdXJpbmcgY2hvY29sYXRleS5udXBrZyBpcyBpbiB0aGUgbGliIGZvbGRlcicKJGNob2NvUGtnRGlyID0gSm9pbi1QYXRoICRjaG9jb1BhdGggJ2xpYlxjaG9jb2xhdGV5JwokbnVwa2cgPSBKb2luLVBhdGggJGNob2NvUGtnRGlyICdjaG9jb2xhdGV5Lm51cGtnJwppZiAoIVtTeXN0ZW0uSU8uRGlyZWN0b3J5XTo6RXhpc3RzKCRjaG9jb1BrZ0RpcikpIHsgW1N5c3RlbS5JTy5EaXJlY3RvcnldOjpDcmVhdGVEaXJlY3RvcnkoJGNob2NvUGtnRGlyKTsgfQpDb3B5LUl0ZW0gIiRmaWxlIiAiJG51cGtnIiAtRm9yY2UgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKCiMgU0lHICMgQmVnaW4gc2lnbmF0dXJlIGJsb2NrCiMgTUlJTld3WUpLb1pJaHZjTkFRY0NvSUlOVERDQ0RVZ0NBUUV4RHpBTkJnbGdoa2dCWlFNRUFnRUZBREI1QmdvcgojIEJnRUVBWUkzQWdFRW9Hc3dhVEEwQmdvckJnRUVBWUkzQWdFZU1DWUNBd0VBQUFRUUg4dzdZRmxMQ0U2M0pOTEcKIyBLWDd6VVFJQkFBSUJBQUlCQUFJQkFBSUJBREF4TUEwR0NXQ0dTQUZsQXdRQ0FRVUFCQ0JUSW10UXRoU3Y0RUlMCiMgNXBuYVFsM2h1Yks4eUptNVc4dVN5SCtSbTNxUG9LQ0NDbmd3Z2dVd01JSUVHS0FEQWdFQ0FoQUVDUmdiWDlXNwojIFpuVlRRN1Z2bFZBSU1BMEdDU3FHU0liM0RRRUJDd1VBTUdVeEN6QUpCZ05WQkFZVEFsVlRNUlV3RXdZRFZRUUsKIyBFd3hFYVdkcFEyVnlkQ0JKYm1NeEdUQVhCZ05WQkFzVEVIZDNkeTVrYVdkcFkyVnlkQzVqYjIweEpEQWlCZ05WCiMgQkFNVEcwUnBaMmxEWlhKMElFRnpjM1Z5WldRZ1NVUWdVbTl2ZENCRFFUQWVGdzB4TXpFd01qSXhNakF3TURCYQojIEZ3MHlPREV3TWpJeE1qQXdNREJhTUhJeEN6QUpCZ05WQkFZVEFsVlRNUlV3RXdZRFZRUUtFd3hFYVdkcFEyVnkKIyBkQ0JKYm1NeEdUQVhCZ05WQkFzVEVIZDNkeTVrYVdkcFkyVnlkQzVqYjIweE1UQXZCZ05WQkFNVEtFUnBaMmxECiMgWlhKMElGTklRVElnUVhOemRYSmxaQ0JKUkNCRGIyUmxJRk5wWjI1cGJtY2dRMEV3Z2dFaU1BMEdDU3FHU0liMwojIERRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRDQwN01jZnc0UnIyZDNCOU1MTVVrWno5RDdSWm14T3R0RTlYL2wKIyBxSjNiTXRkeDZuYWRCUzYzai9xU1E4Q2wrWW5VTnhuWHRxcnduSWFsMkNXc0Rua29PbjdwMFdmVHh2c3BKOGZUCiMgZXlPVTVKRWpscEIzZ3ZtaGhDTm1FbFF6VUhTeEtDYTdKR25Dd2xMeUZHZUtpVVhVTGFHajZZZ3NJSld1SEVxSAojIENOOE05ZUpOWUJpK3FzU3lybkF4WmpOeFBxeHdvcXZPZitsOHk1S2g1VHN4SE0vcThncmtWN3RLdGVsMDVpdisKIyBiTXQrZERrMkRaRHY1TFZPcEtucWFncXJoUE9zWjA2MXhQZU0wU0FsSStzSVpENVNsc0h5RHhMMHhZNFB3YUxvCiMgTEZIM2M3eTloYkZpZzNOQmdnZmtPSXRxY3lEUUQyUnpQSjZmcGpPcC9SbmZKWlBSQWdNQkFBR2pnZ0hOTUlJQgojIHlUQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTFVZER3RUIvd1FFQXdJQmhqQVRCZ05WSFNVRUREQUsKIyBCZ2dyQmdFRkJRY0RBekI1QmdnckJnRUZCUWNCQVFSdE1Hc3dKQVlJS3dZQkJRVUhNQUdHR0doMGRIQTZMeTl2CiMgWTNOd0xtUnBaMmxqWlhKMExtTnZiVEJEQmdnckJnRUZCUWN3QW9ZM2FIUjBjRG92TDJOaFkyVnlkSE11WkdsbgojIGFXTmxjblF1WTI5dEwwUnBaMmxEWlhKMFFYTnpkWEpsWkVsRVVtOXZkRU5CTG1OeWREQ0JnUVlEVlIwZkJIb3cKIyBlREE2b0RpZ05vWTBhSFIwY0RvdkwyTnliRFF1WkdsbmFXTmxjblF1WTI5dEwwUnBaMmxEWlhKMFFYTnpkWEpsCiMgWkVsRVVtOXZkRU5CTG1OeWJEQTZvRGlnTm9ZMGFIUjBjRG92TDJOeWJETXVaR2xuYVdObGNuUXVZMjl0TDBScAojIFoybERaWEowUVhOemRYSmxaRWxFVW05dmRFTkJMbU55YkRCUEJnTlZIU0FFU0RCR01EZ0dDbUNHU0FHRy9Xd0EKIyBBZ1F3S2pBb0JnZ3JCZ0VGQlFjQ0FSWWNhSFIwY0hNNkx5OTNkM2N1WkdsbmFXTmxjblF1WTI5dEwwTlFVekFLCiMgQmdoZ2hrZ0JodjFzQXpBZEJnTlZIUTRFRmdRVVdzUzVleW9LbzZYcWNRUEFZUGt0OW1WMURsZ3dId1lEVlIwagojIEJCZ3dGb0FVUmV1aXIvU1N5NEl4TFZHTHA2Y2huZk50eUE4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEN3MKIyBEVm9rcy9NaTBSWElMSHdsS1hhb0hWMGNMVG9heE84d1lkZCtDMkQ5d3owUHhLK0wvZThxM3lCVk43RGg5dEdTCiMgZFE5UnRHNmxqbHJpWGlTQlRoQ2s3ajl4am1NT0UwdXQxMTlFZWZNMkZBYUs5NXhHVGx6L2tMRWJCdzZSRmZ1NgojIHI3VlJ3bzBrcmlUR3h5Y3FvU2tvR2pweEtBSThMcEdqd0NVUjRwd1VSNkY2YUdpdm02ZGNJRnpaY2JFTWo3dW8KIyArTVVTYUovUFFNdEFSS1VUOE9aa0RDVUlRakt5Tm9va0F2NHZjbjRjMTBsRmx1aFpIZW42ZEdScnN1dG1ROXF6CiMgc0l6VjZRM2Q5Z0VnenBreFl6MElHaGl6Z1p0UHhwTVFCdndIZ2ZxTDJ2bUNTZmRpYnFGVCtoS1VHSVV1a3BIcQojIGFHeEVNckptb2VjWXBKcGtVZTh3Z2dWQU1JSUVLS0FEQWdFQ0FoQUhkR2J0b21kdk91eVNGOUl3VTNFUU1BMEcKIyBDU3FHU0liM0RRRUJDd1VBTUhJeEN6QUpCZ05WQkFZVEFsVlRNUlV3RXdZRFZRUUtFd3hFYVdkcFEyVnlkQ0JKCiMgYm1NeEdUQVhCZ05WQkFzVEVIZDNkeTVrYVdkcFkyVnlkQzVqYjIweE1UQXZCZ05WQkFNVEtFUnBaMmxEWlhKMAojIElGTklRVElnUVhOemRYSmxaQ0JKUkNCRGIyUmxJRk5wWjI1cGJtY2dRMEV3SGhjTk1UWXdNekkwTURBd01EQXcKIyBXaGNOTVRjd016STRNVEl3TURBd1dqQjlNUXN3Q1FZRFZRUUdFd0pWVXpFUE1BMEdBMVVFQ0JNR1MyRnVjMkZ6CiMgTVE4d0RRWURWUVFIRXdaVWIzQmxhMkV4SlRBakJnTlZCQW9USEZKbFlXeEVhVzFsYm5OcGIyNXpJRk52Wm5SMwojIFlYSmxMQ0JNVEVNeEpUQWpCZ05WQkFNVEhGSmxZV3hFYVcxbGJuTnBiMjV6SUZOdlpuUjNZWEpsTENCTVRFTXcKIyBnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDNTJZUzJXS1VwQnRka0R5SjNHMFFtCiMgNDJ2K1creXFyN0RlZGlWekllQ2pIcEtOa21teE84K2xTK25uaUZEam9GR08xSkcvRzNaeXdWUkZsTTFMS0hlUAojIE0xZU9ONndUMEgxZ3ZoeHBNenl1Qy9TUlc5d3ZNdFRsdkhuamRUTFcwNk9lOXR2R2tRa1RNOHJiendSRElaOW8KIyBkZFQ4QnhIU09tR2VsckFOOUN3S2Y2MHppdzhqS0xabnVBdVp3U2drWDVLN3d2T3M4dmlxeWRsbnQ3ejNXeWltCiMgTCt3anVlODVNcGE3anlqSWZuVXFzc04xcXo0bmNlK2U4OUN4VEQyQWJXakd3bmZUY1RnbWozRVVTSlJRZ0RSawojIEorTy9zVnpTL1Y3NnhhakxvUHZJNFpsQXNNcGVLM3B0TFlxdmlVM1phTlV6TFFXRmp1V3FjM2ZoamJXREZGNTEKIyBBZ01CQUFHamdnSEZNSUlCd1RBZkJnTlZIU01FR0RBV2dCUmF4TGw3S2dxanBlcHhBOEJnK1MzMlpYVU9XREFkCiMgQmdOVkhRNEVGZ1FVVDBHZ3Z4dndyT3FNalhROHl3N1FEYWdJVko0d0RnWURWUjBQQVFIL0JBUURBZ2VBTUJNRwojIEExVWRKUVFNTUFvR0NDc0dBUVVGQndNRE1IY0dBMVVkSHdSd01HNHdOYUF6b0RHR0wyaDBkSEE2THk5amNtd3oKIyBMbVJwWjJsalpYSjBMbU52YlM5emFHRXlMV0Z6YzNWeVpXUXRZM010WnpFdVkzSnNNRFdnTTZBeGhpOW9kSFJ3CiMgT2k4dlkzSnNOQzVrYVdkcFkyVnlkQzVqYjIwdmMyaGhNaTFoYzNOMWNtVmtMV056TFdjeExtTnliREJNQmdOVgojIEhTQUVSVEJETURjR0NXQ0dTQUdHL1d3REFUQXFNQ2dHQ0NzR0FRVUZCd0lCRmh4b2RIUndjem92TDNkM2R5NWsKIyBhV2RwWTJWeWRDNWpiMjB2UTFCVE1BZ0dCbWVCREFFRUFUQ0JoQVlJS3dZQkJRVUhBUUVFZURCMk1DUUdDQ3NHCiMgQVFVRkJ6QUJoaGhvZEhSd09pOHZiMk56Y0M1a2FXZHBZMlZ5ZEM1amIyMHdUZ1lJS3dZQkJRVUhNQUtHUW1oMAojIGRIQTZMeTlqWVdObGNuUnpMbVJwWjJsalpYSjBMbU52YlM5RWFXZHBRMlZ5ZEZOSVFUSkJjM04xY21Wa1NVUkQKIyBiMlJsVTJsbmJtbHVaME5CTG1OeWREQU1CZ05WSFJNQkFmOEVBakFBTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCCiMgQVFBRDZLMmxkZkR4N2hPWnhXNnNtWWtpVjRseFhZNGJld3hHdi9naDJoaldnTGlRL3Nvcm56MmZIRG5pL2tPZgojIHFobjgvM0t2WWQ0VjMzUXFNcWptL3FzUnB3amo5TkMvUTJCR3VUZzBheDNlL1o5Wkl2Y1lCNHh4OENSYkdLc2UKIyBSOWxpeGdNQUpaTUNXeUd6QUMvRTNYWCtCWDNCNnk4TjV6QklLUlkxTTd4dWIrTE03elc5TEdNaFgzZTU2SjdHCiMgVUY3ekl6UTdaa2FKemZ4RmJWdkV6Mi9LTm9OR2lDbUE3WTBiaU1YcFg5NzMwRGJnNForQjRTVWU0azRXUExTLwojIDNnb0FxOGxWTUZ0b3FTaHZ5dnJtWXRqMmdGalFtSDNCelNDU1JackFGYldZRENnYTU3RnE3QTR4ckYyaTY3a0cKIyBvbGp6ZVArLzM1d3VvT2xyZ2duMkV1SjFNWUlDT1RDQ0FqVUNBUUV3Z1lZd2NqRUxNQWtHQTFVRUJoTUNWVk14CiMgRlRBVEJnTlZCQW9UREVScFoybERaWEowSUVsdVl6RVpNQmNHQTFVRUN4TVFkM2QzTG1ScFoybGpaWEowTG1OdgojIGJURXhNQzhHQTFVRUF4TW9SR2xuYVVObGNuUWdVMGhCTWlCQmMzTjFjbVZrSUVsRUlFTnZaR1VnVTJsbmJtbHUKIyBaeUJEUVFJUUIzUm03YUpuYnpyc2toZlNNRk54RURBTkJnbGdoa2dCWlFNRUFnRUZBS0NCaERBWUJnb3JCZ0VFCiMgQVlJM0FnRU1NUW93Q0tBQ2dBQ2hBb0FBTUJrR0NTcUdTSWIzRFFFSkF6RU1CZ29yQmdFRUFZSTNBZ0VFTUJ3RwojIENpc0dBUVFCZ2pjQ0FRc3hEakFNQmdvckJnRUVBWUkzQWdFVk1DOEdDU3FHU0liM0RRRUpCREVpQkNEWm55T1UKIyBDOURrM085S0ZHWUFobHVnaVFnckNyYkQ1RU9XM0RiQk8zWE9BREFOQmdrcWhraUc5dzBCQVFFRkFBU0NBUUJUCiMgeEZ4VUJXZzRzSXRNVktwT2ZvM0F6S2J5V2RHTkJ2NEZvNDJmV2JRcWdGbU1hWlNUa3p0Q2x3S3VxTHBDS1Z1aAojIE5VYnQwWEJ4cDIrMTdTSTIvaDh6SktPUS9WOTgvaU9iTUNxOFhsUnlPejFIRjJ2Q0NyWFdkaEs1SlZRMUppdHQKIyBEWkZEZVRQZ2plekFhSGNHcWNsR3gyWFhBME1WRE5hWW5aaXE3VGhhWXJxRlNseXRxa2tmWnBEQ2NUT2IvYjZCCiMgQXdHOFVPK2cyekNTbjBwSU5FakJEWUEzSnI2ZHltT2NtK0MyTU0ydGxjWFdXRW9VdHhhQS95OXRzcWRmSFFCTwojIGMrZUY0YS94cUxUeGYyK09TOXhPOEpFWkozMHRlcUp3a1pZM3Rxd1NDdnZCVUkydlo2dVR4b0JBNWMrcHVMOTMKIyBUSi9GQmJUeGx3NWJzQzlqNFF3YQojIFNJRyAjIEVuZCBzaWduYXR1cmUgYmxvY2sK
