Invoke-PSDeploy.Tests.ps1,45734c247f3f54e3b914f3d808cebac6,Scan result is 1. IsMalware: 0,aWYoLW5vdCAkRU5WOkJIUHJvamVjdFBhdGgpCnsKICAgIFNldC1CdWlsZEVudmlyb25tZW50IC1QYXRoICRQU1NjcmlwdFJvb3RcLi4gLUZvcmNlCn0KUmVtb3ZlLU1vZHVsZSAkRU5WOkJIUHJvamVjdE5hbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKSW1wb3J0LU1vZHVsZSAoSm9pbi1QYXRoICRFTlY6QkhQcm9qZWN0UGF0aCAkRU5WOkJIUHJvamVjdE5hbWUpIC1Gb3JjZQoKSW5Nb2R1bGVTY29wZSAnUFNEZXBsb3knIHsKICAgICRQU1ZlcnNpb24gPSAkUFNWZXJzaW9uVGFibGUuUFNWZXJzaW9uLk1ham9yCiAgICAkUHJvamVjdFJvb3QgPSAkRU5WOkJIUHJvamVjdFBhdGgKICAgIAogICAgJFZlcmJvc2UgPSBAe30KICAgIGlmKCRFTlY6QkhCcmFuY2hOYW1lIC1ub3RsaWtlICJtYXN0ZXIiIC1vciAkZW52OkJIQ29tbWl0TWVzc2FnZSAtbWF0Y2ggIiF2ZXJib3NlIikKICAgIHsKICAgICAgICAkVmVyYm9zZS5hZGQoIlZlcmJvc2UiLCRUcnVlKQogICAgfSAgCgogICAgRGVzY3JpYmUgIkludm9rZS1QU0RlcGxveSBQUyRQU1ZlcnNpb24iIHsKICAgICAgICAkSW50ZWdyYXRpb25UYXJnZXQgPSAiVGVzdERyaXZlOlwiCgogICAgICAgIENvbnRleHQgJ0hhbmRsZXMgRGVwZW5kZW5jaWVzJyB7ICAgICAgICAKICAgICAgICAgICAgJE5vb3BPdXRwdXQgPSBJbnZva2UtUFNEZXBsb3kgQHZlcmJvc2UgLVBhdGggJFByb2plY3RSb290XFRlc3RzXGFydGlmYWN0c1xEZXBsb3ltZW50c0RlcGVuZGVuY2llcy5wc2RlcGxveS5wczEgLUZvcmNlCgogICAgICAgICAgICBJdCAnU2hvdWxkIGhhdmUgNCBEZXBsb3ltZW50cycgewogICAgICAgICAgICAgICAgJE5vb3BPdXRwdXQuRGVwbG95bWVudC5Db3VudCB8IFNob3VsZCBiZSA0CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEl0ICdTaG91bGQgaGF2ZSBleHBlY3RlZCBEZXBsb3ltZW50TmFtZScgewogICAgICAgICAgICAgICAgJE5vb3BPdXRwdXQuRGVwbG95bWVudFswXS5EZXBsb3ltZW50TmFtZSB8IFNob3VsZCBCZSAnTW9kdWxlRmlsZXMtRmlsZXMnCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEl0ICdTaG91bGQgaGF2ZSBleHBlY3RlZCBEZXBsb3ltZW50TmFtZScgewogICAgICAgICAgICAgICAgJE5vb3BPdXRwdXQuRGVwbG95bWVudFszXS5EZXBsb3ltZW50TmFtZSB8IFNob3VsZCBCZSAnTW9kdWxlRmlsZXMtTWlzYycKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAgICAgPCMKICAgICAgICAgICAgIyBPcGVuIHRvIHN1Z2dlc3Rpb25zIG9uIGdldHRpbmcgdGhpcyB3b3JraW5nLgogICAgICAgICAgICAjIElmIHlvdSBzZXQgYSB2YXJpYWJsZSBpbiB5b3VyIHNlc3Npb24gYW5kIHJ1biBQU0RlcGxveSwgaXQgd2lsbCBzZWUgdGhhdCB2YXJpYWJsZQogICAgICAgICAgICAjIEJhcnJpbmcgYW55IGJ1Z3MsIG9mIGNvdXJzZSA6ICkKICAgICAgICAgICAgSXQgJ1Nob3VsZCBydW4gaW4gdGhlIGN1cnJlbnQgc2NvcGUgdG8gYWxsb3cgdmFyaWFibGUgdXNhZ2UnIHsKICAgICAgICAgICAgICAgICROb29wT3V0cHV0ID0gSW52b2tlLVBTRGVwbG95IC1QYXRoIERlcGxveW1lbnRzRGVwZW5kZW5jaWVzLnBzZGVwbG95LnBzMSAtRm9yY2UKICAgICAgICAgICAgICAgICROb29wT3V0cHV0LkdldFZhcmlhYmxlIHwgV2hlcmUgeyRfLk5hbWUgLWVxICdNeVZhcmlhYmxlJ30gfCBTZWxlY3QgLUV4cGFuZFByb3BlcnR5IFZhbHVlIHwgU2hvdWxkIEJlIDQyCiAgICAgICAgICAgIH0KICAgICAgICAgICAgIz4KICAgICAgICBDb250ZXh0ICdOZXN0ZWQgUFNEZXBsb3kucHMxIEZpbGVzJyB7CgogICAgICAgICAgICBJdCAnU2hvdWxkIGZpbmQgYWxsIG5lc3RlZCBQU0RlcGxveS5wczEgZmlsZXMnIHsKICAgICAgICAgICAgICAgICROb29wT3V0cHV0ID0gSW52b2tlLVBTRGVwbG95ICBAdmVyYm9zZSAtUGF0aCAkUHJvamVjdFJvb3RcVGVzdHNcYXJ0aWZhY3RzXE1vZHVsZXMgLUZvcmNlCiAgICAgICAgICAgICAgICAkTm9vcE91dHB1dC5EZXBsb3ltZW50LkNvdW50IHwgU2hvdWxkIGJlIDIKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQ29udGV4dCAnSGFuZGxlcyBUYWdzJyB7CgogICAgICAgICAgICBJdCAnU2hvdWxkIGZpbHRlciBkZXBsb3ltZW50cyBieSBQcm9kIHRhZ3MnIHsKICAgICAgICAgICAgICAgICROb29wT3V0cHV0ID0gSW52b2tlLVBTRGVwbG95IEBWZXJib3NlIC1QYXRoICRQcm9qZWN0Um9vdFxUZXN0c1xhcnRpZmFjdHNcRGVwbG95bWVudHNUYWdzLnBzZGVwbG95LnBzMSAtVGFncyBQcm9kIC1Gb3JjZQogICAgICAgICAgICAgICAgJE5vb3BPdXRwdXQuQ291bnQgfCBTaG91bGQgQmUgMgogICAgICAgICAgICB9CgogICAgICAgICAgICBJdCAnU2hvdWxkIGZpbHRlciBkZXBsb3ltZW50cyBieSBEZXYgdGFncycgewogICAgICAgICAgICAgICAgJE5vb3BPdXRwdXQgPSBJbnZva2UtUFNEZXBsb3kgQFZlcmJvc2UgLVBhdGggJFByb2plY3RSb290XFRlc3RzXGFydGlmYWN0c1xEZXBsb3ltZW50c1RhZ3MucHNkZXBsb3kucHMxIC1UYWdzIERldiAtRm9yY2UKICAgICAgICAgICAgICAgICROb29wT3V0cHV0LkNvdW50IHwgU2hvdWxkIEJlIDIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgSXQgJ1Nob3VsZCBhY2NlcHQgbXVsdGlwbGUgdGFncycgewogICAgICAgICAgICAgICAgJE5vb3BPdXRwdXQgPSBJbnZva2UtUFNEZXBsb3kgQFZlcmJvc2UgLVBhdGggJFByb2plY3RSb290XFRlc3RzXGFydGlmYWN0c1xEZXBsb3ltZW50c1RhZ3MucHNkZXBsb3kucHMxIC1UYWdzIERldiwgUHJvZCAtRm9yY2UKICAgICAgICAgICAgICAgICROb29wT3V0cHV0LkNvdW50IHwgU2hvdWxkIEJlIDQKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQ29udGV4dCAnSGFuZGxlcyBQcmUgYW5kIFBvc3QgU2NyaXB0YmxvY2sgd2l0aG91dCBTa2lwT25FcnJvcicgewogICAgICAgICAgICAkTm9vcE91dHB1dCA9IEludm9rZS1QU0RlcGxveSBAVmVyYm9zZSAtUGF0aCAkUHJvamVjdFJvb3RcVGVzdHNcYXJ0aWZhY3RzXERlcGxveW1lbnRzQmVmb3JlQWZ0ZXIucHNkZXBsb3kucHMxIC1Gb3JjZSAtVGFncyBGYWxzZQoKICAgICAgICAgICAgSXQgJ1Nob3VsZCBoYXZlIGV4cGVjdGVkIGNvdW50JyB7ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJE5vb3BPdXRwdXQuQ291bnQgfCBTaG91bGQgQmUgMwogICAgICAgICAgICB9CgogICAgICAgICAgICBJdCAnU2hvdWxkIFJldHVybiBQcmVzY3JpcHQnIHsKICAgICAgICAgICAgICAgICROb29wT3V0cHV0WzBdIHwgU2hvdWxkIGJlICJTZXR0aW5nIHRoaW5ncyB1cCBmb3IgYSBkZXBsb3ltZW50Li4uIgogICAgICAgICAgICB9CgogICAgICAgICAgICBJdCAnU2hvdWxkIG5vdCBTa2lwIG9uIEVycm9yJyB7CiAgICAgICAgICAgICAgICAkTm9vcE91dHB1dFsxXS5EZXBsb3ltZW50LlByZVNjcmlwdC5Ta2lwT25FcnJvci5Jc1ByZXNlbnQgfCBTaG91bGQgYmUgJEZhbHNlCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEl0ICdTaG91bGQgUmV0dXJuIFBvc3RzY3JpcHQnIHsKICAgICAgICAgICAgICAgICROb29wT3V0cHV0WzJdIHwgU2hvdWxkIGJlICJUZWFyaW5nIHRoaW5ncyBkb3duIGZyb20gYSBkZXBsb3ltZW50Li4uIgogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBDb250ZXh0ICdIYW5kbGVzIFByZSBhbmQgUG9zdCBTY3JpcHRibG9jayB3aXRoIFNraXBPbkVycm9yJyB7CiAgICAgICAgICAgICROb29wT3V0cHV0ID0gSW52b2tlLVBTRGVwbG95IEBWZXJib3NlIC1QYXRoICRQcm9qZWN0Um9vdFxUZXN0c1xhcnRpZmFjdHNcRGVwbG95bWVudHNCZWZvcmVBZnRlci5wc2RlcGxveS5wczEgLUZvcmNlIC1UYWdzIFRydWUKCiAgICAgICAgICAgIEl0ICdTaG91bGQgaGF2ZSBleHBlY3RlZCBjb3VudCcgeyAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICROb29wT3V0cHV0LkNvdW50IHwgU2hvdWxkIEJlIDMKICAgICAgICAgICAgfQoKICAgICAgICAgICAgSXQgJ1Nob3VsZCBSZXR1cm4gUHJlc2NyaXB0JyB7CiAgICAgICAgICAgICAgICAkTm9vcE91dHB1dFswXSB8IFNob3VsZCBiZSAiU2V0dGluZyB0aGluZ3MgdXAgZm9yIGEgZGVwbG95bWVudC4uLiIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgSXQgJ1Nob3VsZCBub3QgU2tpcCBvbiBFcnJvcicgewogICAgICAgICAgICAgICAgJE5vb3BPdXRwdXRbMV0uRGVwbG95bWVudC5QcmVTY3JpcHQuU2tpcE9uRXJyb3IuSXNQcmVzZW50IHwgU2hvdWxkIGJlICRUcnVlCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEl0ICdTaG91bGQgUmV0dXJuIFBvc3RzY3JpcHQnIHsKICAgICAgICAgICAgICAgICROb29wT3V0cHV0WzJdIHwgU2hvdWxkIGJlICJUZWFyaW5nIHRoaW5ncyBkb3duIGZyb20gYSBkZXBsb3ltZW50Li4uIgogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBDb250ZXh0ICdUYXNrIERlcGxveW1lbnQnIHsKCiAgICAgICAgICAgIEl0ICdTaG91bGQgaGFuZGxlIHRhc2sgc2NyaXB0YmxvY2sgImRlcGxveW1lbnRzIicgewogICAgICAgICAgICAgICAgJERlcGxveW1lbnRzID0gQCggSW52b2tlLVBTRGVwbG95IEB2ZXJib3NlIC1QYXRoICRQcm9qZWN0Um9vdFxUZXN0c1xhcnRpZmFjdHNcRGVwbG95bWVudHNUYXNrcy5wc2RlcGxveS5wczEgLUZvcmNlICkKICAgICAgICAgICAgICAgICREZXBsb3ltZW50c1swXSB8IFNob3VsZCBCZSAnUnVubmluZyBhIHRhc2shJwogICAgICAgICAgICB9CgogICAgICAgICAgICBJdCAnU2hvdWxkIGhhbmRsZSB0YXNrIHBzMSAiZGVwbG95bWVudHMiJyB7CiAgICAgICAgICAgICAgICAkRGVwbG95bWVudHMgPSBAKCBJbnZva2UtUFNEZXBsb3kgQHZlcmJvc2UgLVBhdGggJFByb2plY3RSb290XFRlc3RzXGFydGlmYWN0c1xEZXBsb3ltZW50c1Rhc2tzUFMxLnBzZGVwbG95LnBzMSAtRm9yY2UgKQogICAgICAgICAgICAgICAgJERlcGxveW1lbnRzWzBdIHwgU2hvdWxkIEJlICdtbWhtbScKICAgICAgICAgICAgfQogICAgICAgIH0gICAgICAgICAgICAKCiAgICAgICAgQ29udGV4dCAnRGVwbG95aW5nIEZpbGUgd2l0aCBwczEnIHsKICAgICAgICAgICAgSW52b2tlLVBTRGVwbG95IEBWZXJib3NlIC1QYXRoICIkUHJvamVjdFJvb3RcVGVzdHNcYXJ0aWZhY3RzXEludGVncmF0aW9uRmlsZS5QU0RlcGxveS5wczEiIC1Gb3JjZQoKICAgICAgICAgICAgSXQgJ1Nob3VsZCBkZXBsb3kgZmlsZTEucHMxJyB7ICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkUmVzdWx0cyA9IFRlc3QtUGF0aCAoSm9pbi1QYXRoIC1QYXRoICRJbnRlZ3JhdGlvblRhcmdldCAtQ2hpbGRwYXRoIEZpbGUxLnBzMSkgCiAgICAgICAgICAgICAgICAkUmVzdWx0cyB8IFNob3VsZCBCZSAkVHJ1ZSAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQ29udGV4dCAnRGVwbG95aW5nIEZpbGUgd2l0aCBwczEgdG8gZm9sZGVyIHRoYXQgZG9lcyBub3QgZXhpc3QnIHsKICAgICAgICAgICAgSW52b2tlLVBTRGVwbG95IEBWZXJib3NlIC1QYXRoICIkUHJvamVjdFJvb3RcVGVzdHNcYXJ0aWZhY3RzXEludGVncmF0aW9uRmlsZVRvTm9uRXhpc3RpbmdGb2xkZXIuUFNEZXBsb3kucHMxIiAtRm9yY2UKCiAgICAgICAgICAgIEl0ICdTaG91bGQgZGVwbG95IGZpbGUxLnBzMScgewogICAgICAgICAgICAgICAgJFJlc3VsdHMgPSBUZXN0LVBhdGggKEpvaW4tUGF0aCAtUGF0aCAiJCgkSW50ZWdyYXRpb25UYXJnZXQpTm9uXEV4aXN0aW5nXEZvbGRlclwiIC1DaGlsZHBhdGggRmlsZTEucHMxKQogICAgICAgICAgICAgICAgJFJlc3VsdHMgfCBTaG91bGQgQmUgJFRydWUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgSXQgJ1Nob3VsZCBkZXBsb3kgZmlsZTIucHMxJyB7CiAgICAgICAgICAgICAgICAkUmVzdWx0cyA9IFRlc3QtUGF0aCAoSm9pbi1QYXRoIC1QYXRoICIkKCRJbnRlZ3JhdGlvblRhcmdldClOb25cRXhpc3RpbmdcRm9sZGVyXCIgLUNoaWxkcGF0aCBGaWxlMi5wczEpCiAgICAgICAgICAgICAgICAkUmVzdWx0cyB8IFNob3VsZCBCZSAkVHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBDb250ZXh0ICdEZXBsb3lpbmcgRm9sZGVyIHdpdGggcHMxJyB7CiAgICAgICAgICAgIEludm9rZS1QU0RlcGxveSBAVmVyYm9zZSAtUGF0aCAiJFByb2plY3RSb290XFRlc3RzXGFydGlmYWN0c1xJbnRlZ3JhdGlvbkZvbGRlci5QU0RlcGxveS5wczEiIC1Gb3JjZQoKICAgICAgICAgICAgSXQgJ1Nob3VsZCBkZXBsb3kgRmlsZTIucHMxJyB7ICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICRSZXN1bHRzID0gVGVzdC1QYXRoIChKb2luLVBhdGggLVBhdGggJEludGVncmF0aW9uVGFyZ2V0IC1DaGlsZHBhdGggRmlsZTIucHMxKSAKICAgICAgICAgICAgICAgICRSZXN1bHRzIHwgU2hvdWxkIEJlICRUcnVlCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEl0ICdTaG91bGQgZGVwbG95ICJDcmF6eU1vZHVsZVxBIGZpbGUudHh0IicgewogICAgICAgICAgICAgICAgJFJlc3VsdHMgPSBUZXN0LVBhdGggKEpvaW4tUGF0aCAtUGF0aCAkSW50ZWdyYXRpb25UYXJnZXQgLUNoaWxkUGF0aCAnQ3JhenlNb2R1bGVcQSBmaWxlLnR4dCcpIAogICAgICAgICAgICAgICAgJFJlc3VsdHMgfCBTaG91bGQgQmUgJFRydWUgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIENvbnRleHQgJ0hhbmRsaW5nIHBhdGhzIHdpdGggc3BhY2VzJyB7CiAgICAgICAgICAgIEludm9rZS1QU0RlcGxveSBAVmVyYm9zZSAtUGF0aCAiJFByb2plY3RSb290XFRlc3RzXGFydGlmYWN0c1xEZXBsb3lQYXRoV2l0aFNwYWNlcy5wc2RlcGxveS5wczEiIC1Gb3JjZQoKICAgICAgICAgICAgSXQgJ1Nob3VsZCBkZXBsb3kgcGF0aCB3aXRoIHNwYWNlcycgewogICAgICAgICAgICAgICAgJFJlc3VsdHMgPSBUZXN0LVBhdGggKEpvaW4tUGF0aCAtUGF0aCAkSW50ZWdyYXRpb25UYXJnZXQgLUNoaWxkUGF0aCAnU28gRG9lcyBUaGlzIE9uZVxIYXMgU3BhY2VzLnR4dCcpCiAgICAgICAgICAgICAgICAkUmVzdWx0cyB8IFNob3VsZCBCZSAkVHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9
