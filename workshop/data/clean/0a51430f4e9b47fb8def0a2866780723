MSFT_xWebsite.psm1,f8d3f4283ce4e59fa54916034508e12d,Scan result is 1. IsMalware: 0,I3JlcXVpcmVzIC1WZXJzaW9uIDQuMCAtTW9kdWxlcyBDaW1DbWRsZXRzCgojIExvYWQgdGhlIEhlbHBlciBNb2R1bGUKSW1wb3J0LU1vZHVsZSAtTmFtZSAiJFBTU2NyaXB0Um9vdFwuLlxIZWxwZXIucHNtMSIgLVZlcmJvc2U6JGZhbHNlCgojIExvY2FsaXplZCBtZXNzYWdlcwpkYXRhIExvY2FsaXplZERhdGEKewogICAgIyBjdWx0dXJlPSJlbi1VUyIKICAgIENvbnZlcnRGcm9tLVN0cmluZ0RhdGEgLVN0cmluZ0RhdGEgQCcKRXJyb3JXZWJzaXRlTm90Rm91bmQgPSBUaGUgcmVxdWVzdGVkIHdlYnNpdGUgInswfSIgY2Fubm90IGJlIGZvdW5kIG9uIHRoZSB0YXJnZXQgbWFjaGluZS4KRXJyb3JXZWJzaXRlRGlzY292ZXJ5RmFpbHVyZSA9IEZhaWx1cmUgdG8gZ2V0IHRoZSByZXF1ZXN0ZWQgd2Vic2l0ZSAiezB9IiBpbmZvcm1hdGlvbiBmcm9tIHRoZSB0YXJnZXQgbWFjaGluZS4KRXJyb3JXZWJzaXRlQ3JlYXRpb25GYWlsdXJlID0gRmFpbHVyZSB0byBzdWNjZXNzZnVsbHkgY3JlYXRlIHRoZSB3ZWJzaXRlICJ7MH0iLiBFcnJvcjogInsxfSIuCkVycm9yV2Vic2l0ZVJlbW92YWxGYWlsdXJlID0gRmFpbHVyZSB0byBzdWNjZXNzZnVsbHkgcmVtb3ZlIHRoZSB3ZWJzaXRlICJ7MH0iLiBFcnJvcjogInsxfSIuCkVycm9yV2Vic2l0ZUJpbmRpbmdVcGRhdGVGYWlsdXJlID0gRmFpbHVyZSB0byBzdWNjZXNzZnVsbHkgdXBkYXRlIHRoZSBiaW5kaW5ncyBmb3Igd2Vic2l0ZSAiezB9Ii4gRXJyb3I6ICJ7MX0iLgpFcnJvcldlYnNpdGVCaW5kaW5nSW5wdXRJbnZhbGlkYXRpb24gPSBEZXNpcmVkIHdlYnNpdGUgYmluZGluZ3MgYXJlIG5vdCB2YWxpZCBmb3Igd2Vic2l0ZSAiezB9Ii4KRXJyb3JXZWJzaXRlQ29tcGFyZUZhaWx1cmUgPSBGYWlsdXJlIHRvIHN1Y2Nlc3NmdWxseSBjb21wYXJlIHByb3BlcnRpZXMgZm9yIHdlYnNpdGUgInswfSIuIEVycm9yOiAiezF9Ii4KRXJyb3JXZWJCaW5kaW5nQ2VydGlmaWNhdGUgPSBGYWlsdXJlIHRvIGFkZCBjZXJ0aWZpY2F0ZSB0byB3ZWIgYmluZGluZy4gUGxlYXNlIG1ha2Ugc3VyZSB0aGF0IHRoZSBjZXJ0aWZpY2F0ZSB0aHVtYnByaW50ICJ7MH0iIGlzIHZhbGlkLiBFcnJvcjogInsxfSIuCkVycm9yV2Vic2l0ZVN0YXRlRmFpbHVyZSA9IEZhaWx1cmUgdG8gc3VjY2Vzc2Z1bGx5IHNldCB0aGUgc3RhdGUgb2YgdGhlIHdlYnNpdGUgInswfSIuIEVycm9yOiAiezF9Ii4KRXJyb3JXZWJzaXRlQmluZGluZ0NvbmZsaWN0T25TdGFydCA9IFdlYnNpdGUgInswfSIgY291bGQgbm90IGJlIHN0YXJ0ZWQgZHVlIHRvIGJpbmRpbmcgY29uZmxpY3QuIEVuc3VyZSB0aGF0IHRoZSBiaW5kaW5nIGluZm9ybWF0aW9uIGZvciB0aGlzIHdlYnNpdGUgZG9lcyBub3QgY29uZmxpY3Qgd2l0aCBhbnkgZXhpc3Rpbmcgd2Vic2l0ZSdzIGJpbmRpbmdzIGJlZm9yZSB0cnlpbmcgdG8gc3RhcnQgaXQuCkVycm9yV2ViQmluZGluZ0ludmFsaWRJUEFkZHJlc3MgPSBGYWlsdXJlIHRvIHZhbGlkYXRlIHRoZSBJUEFkZHJlc3MgcHJvcGVydHkgdmFsdWUgInswfSIuIEVycm9yOiAiezF9Ii4KRXJyb3JXZWJCaW5kaW5nSW52YWxpZFBvcnQgPSBGYWlsdXJlIHRvIHZhbGlkYXRlIHRoZSBQb3J0IHByb3BlcnR5IHZhbHVlICJ7MH0iLiBUaGUgcG9ydCBudW1iZXIgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIgYmV0d2VlbiAxIGFuZCA2NTUzNS4KRXJyb3JXZWJCaW5kaW5nTWlzc2luZ0JpbmRpbmdJbmZvcm1hdGlvbiA9IFRoZSBCaW5kaW5nSW5mb3JtYXRpb24gcHJvcGVydHkgaXMgcmVxdWlyZWQgZm9yIGJpbmRpbmdzIG9mIHR5cGUgInswfSIuCkVycm9yV2ViQmluZGluZ01pc3NpbmdDZXJ0aWZpY2F0ZVRodW1icHJpbnQgPSBUaGUgQ2VydGlmaWNhdGVUaHVtYnByaW50IHByb3BlcnR5IGlzIHJlcXVpcmVkIGZvciBiaW5kaW5ncyBvZiB0eXBlICJ7MH0iLgpWZXJib3NlU2V0VGFyZ2V0VXBkYXRlZFBoeXNpY2FsUGF0aCA9IFBoeXNpY2FsIFBhdGggZm9yIHdlYnNpdGUgInswfSIgaGFzIGJlZW4gdXBkYXRlZCB0byAiezF9Ii4KVmVyYm9zZVNldFRhcmdldFVwZGF0ZWRBcHBsaWNhdGlvblBvb2wgPSBBcHBsaWNhdGlvbiBQb29sIGZvciB3ZWJzaXRlICJ7MH0iIGhhcyBiZWVuIHVwZGF0ZWQgdG8gInsxfSIuClZlcmJvc2VTZXRUYXJnZXRVcGRhdGVkQmluZGluZ0luZm8gPSBCaW5kaW5ncyBmb3Igd2Vic2l0ZSAiezB9IiBoYXZlIGJlZW4gdXBkYXRlZC4KVmVyYm9zZVNldFRhcmdldFVwZGF0ZWRFbmFibGVkUHJvdG9jb2xzID0gRW5hYmxlZCBQcm90b2NvbHMgZm9yIHdlYnNpdGUgInswfSIgaGF2ZSBiZWVuIHVwZGF0ZWQgdG8gInsxfSIuClZlcmJvc2VTZXRUYXJnZXRVcGRhdGVkU3RhdGUgPSBTdGF0ZSBmb3Igd2Vic2l0ZSAiezB9IiBoYXMgYmVlbiB1cGRhdGVkIHRvICJ7MX0iLgpWZXJib3NlU2V0VGFyZ2V0V2Vic2l0ZUNyZWF0ZWQgPSBTdWNjZXNzZnVsbHkgY3JlYXRlZCB3ZWJzaXRlICJ7MH0iLgpWZXJib3NlU2V0VGFyZ2V0V2Vic2l0ZVN0YXJ0ZWQgPSBTdWNjZXNzZnVsbHkgc3RhcnRlZCB3ZWJzaXRlICJ7MH0iLgpWZXJib3NlU2V0VGFyZ2V0V2Vic2l0ZVJlbW92ZWQgPSBTdWNjZXNzZnVsbHkgcmVtb3ZlZCB3ZWJzaXRlICJ7MH0iLgpWZXJib3NlVGVzdFRhcmdldEZhbHNlRW5zdXJlID0gVGhlIEVuc3VyZSBzdGF0ZSBmb3Igd2Vic2l0ZSAiezB9IiBkb2VzIG5vdCBtYXRjaCB0aGUgZGVzaXJlZCBzdGF0ZS4KVmVyYm9zZVRlc3RUYXJnZXRGYWxzZVBoeXNpY2FsUGF0aCA9IFBoeXNpY2FsIFBhdGggb2Ygd2Vic2l0ZSAiezB9IiBkb2VzIG5vdCBtYXRjaCB0aGUgZGVzaXJlZCBzdGF0ZS4KVmVyYm9zZVRlc3RUYXJnZXRGYWxzZVN0YXRlID0gVGhlIHN0YXRlIG9mIHdlYnNpdGUgInswfSIgZG9lcyBub3QgbWF0Y2ggdGhlIGRlc2lyZWQgc3RhdGUuClZlcmJvc2VUZXN0VGFyZ2V0RmFsc2VBcHBsaWNhdGlvblBvb2wgPSBBcHBsaWNhdGlvbiBQb29sIGZvciB3ZWJzaXRlICJ7MH0iIGRvZXMgbm90IG1hdGNoIHRoZSBkZXNpcmVkIHN0YXRlLgpWZXJib3NlVGVzdFRhcmdldEZhbHNlQmluZGluZ0luZm8gPSBCaW5kaW5ncyBmb3Igd2Vic2l0ZSAiezB9IiBkbyBub3QgbWF0Y2ggdGhlIGRlc2lyZWQgc3RhdGUuClZlcmJvc2VUZXN0VGFyZ2V0RmFsc2VFbmFibGVkUHJvdG9jb2xzID0gRW5hYmxlZCBQcm90b2NvbHMgZm9yIHdlYnNpdGUgInswfSIgZG8gbm90IG1hdGNoIHRoZSBkZXNpcmVkIHN0YXRlLgpWZXJib3NlVGVzdFRhcmdldEZhbHNlRGVmYXVsdFBhZ2UgPSBEZWZhdWx0IFBhZ2UgZm9yIHdlYnNpdGUgInswfSIgZG9lcyBub3QgbWF0Y2ggdGhlIGRlc2lyZWQgc3RhdGUuClZlcmJvc2VUZXN0VGFyZ2V0VHJ1ZVJlc3VsdCA9IFRoZSB0YXJnZXQgcmVzb3VyY2UgaXMgYWxyZWFkeSBpbiB0aGUgZGVzaXJlZCBzdGF0ZS4gTm8gYWN0aW9uIGlzIHJlcXVpcmVkLgpWZXJib3NlVGVzdFRhcmdldEZhbHNlUmVzdWx0ID0gVGhlIHRhcmdldCByZXNvdXJjZSBpcyBub3QgaW4gdGhlIGRlc2lyZWQgc3RhdGUuClZlcmJvc2VDb252ZXJ0VG9XZWJCaW5kaW5nSWdub3JlQmluZGluZ0luZm9ybWF0aW9uID0gQmluZGluZ0luZm9ybWF0aW9uIGlzIGlnbm9yZWQgZm9yIGJpbmRpbmdzIG9mIHR5cGUgInswfSIgaW4gY2FzZSBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIGlzIHNwZWNpZmllZDogSVBBZGRyZXNzLCBQb3J0LCBIb3N0TmFtZS4KVmVyYm9zZUNvbnZlcnRUb1dlYkJpbmRpbmdEZWZhdWx0UG9ydCA9IFBvcnQgaXMgbm90IHNwZWNpZmllZC4gVGhlIGRlZmF1bHQgInswfSIgcG9ydCAiezF9IiB3aWxsIGJlIHVzZWQuClZlcmJvc2VDb252ZXJ0VG9XZWJCaW5kaW5nRGVmYXVsdENlcnRpZmljYXRlU3RvcmVOYW1lID0gQ2VydGlmaWNhdGVTdG9yZU5hbWUgaXMgbm90IHNwZWNpZmllZC4gVGhlIGRlZmF1bHQgdmFsdWUgInswfSIgd2lsbCBiZSB1c2VkLgpWZXJib3NlVGVzdEJpbmRpbmdJbmZvU2FtZUlQQWRkcmVzc1BvcnRIb3N0TmFtZSA9IEJpbmRpbmdJbmZvIGNvbnRhaW5zIG11bHRpcGxlIGl0ZW1zIHdpdGggdGhlIHNhbWUgSVBBZGRyZXNzLCBQb3J0LCBhbmQgSG9zdE5hbWUgY29tYmluYXRpb24uClZlcmJvc2VUZXN0QmluZGluZ0luZm9TYW1lUG9ydERpZmZlcmVudFByb3RvY29sID0gQmluZGluZ0luZm8gY29udGFpbnMgaXRlbXMgdGhhdCBzaGFyZSB0aGUgc2FtZSBQb3J0IGJ1dCBoYXZlIGRpZmZlcmVudCBQcm90b2NvbHMuClZlcmJvc2VUZXN0QmluZGluZ0luZm9TYW1lUHJvdG9jb2xCaW5kaW5nSW5mb3JtYXRpb24gPSBCaW5kaW5nSW5mbyBjb250YWlucyBtdWx0aXBsZSBpdGVtcyB3aXRoIHRoZSBzYW1lIFByb3RvY29sIGFuZCBCaW5kaW5nSW5mb3JtYXRpb24gY29tYmluYXRpb24uClZlcmJvc2VUZXN0QmluZGluZ0luZm9JbnZhbGlkQ2F0Y2ggPSBVbmFibGUgdG8gdmFsaWRhdGUgQmluZGluZ0luZm86ICJ7MH0iLgpWZXJib3NlVXBkYXRlRGVmYXVsdFBhZ2VVcGRhdGVkID0gRGVmYXVsdCBwYWdlIGZvciB3ZWJzaXRlICJ7MH0iIGhhcyBiZWVuIHVwZGF0ZWQgdG8gInsxfSIuCidACn0KCmZ1bmN0aW9uIEdldC1UYXJnZXRSZXNvdXJjZQp7CiAgICA8IwogICAgLlNZTk9QU1lTCiAgICAgICAgVGhlIEdldC1UYXJnZXRSZXNvdXJjZSBjbWRsZXQgaXMgdXNlZCB0byBmZXRjaCB0aGUgc3RhdHVzIG9mIHJvbGUgb3IgV2Vic2l0ZSBvbiB0aGUgdGFyZ2V0IG1hY2hpbmUuCiAgICAgICAgSXQgZ2l2ZXMgdGhlIFdlYnNpdGUgaW5mbyBvZiB0aGUgcmVxdWVzdGVkIHJvbGUvZmVhdHVyZSBvbiB0aGUgdGFyZ2V0IG1hY2hpbmUuCiAgICAjPgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFtPdXRwdXRUeXBlKFtIYXNodGFibGVdKV0KICAgIHBhcmFtCiAgICAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICROYW1lCiAgICApCgogICAgQXNzZXJ0LU1vZHVsZQoKICAgICRXZWJzaXRlID0gR2V0LVdlYnNpdGUgfCBXaGVyZS1PYmplY3QgLUZpbHRlclNjcmlwdCB7JF8uTmFtZSAtZXEgJE5hbWV9CgogICAgaWYgKCRXZWJzaXRlLkNvdW50IC1lcSAwKSAjIE5vIFdlYnNpdGUgZXhpc3RzIHdpdGggdGhpcyBuYW1lCiAgICB7CiAgICAgICAgJEVuc3VyZVJlc3VsdCA9ICdBYnNlbnQnCiAgICB9CiAgICBlbHNlaWYgKCRXZWJzaXRlLkNvdW50IC1lcSAxKSAjIEEgc2luZ2xlIFdlYnNpdGUgZXhpc3RzIHdpdGggdGhpcyBuYW1lCiAgICB7CiAgICAgICAgJEVuc3VyZVJlc3VsdCA9ICdQcmVzZW50JwoKICAgICAgICAkQ2ltQmluZGluZ3MgPSBAKENvbnZlcnRUby1DaW1CaW5kaW5nIC1JbnB1dE9iamVjdCAkV2Vic2l0ZS5iaW5kaW5ncy5Db2xsZWN0aW9uKQoKICAgICAgICAkQWxsRGVmYXVsdFBhZ2VzID0gQCgKICAgICAgICAgICAgR2V0LVdlYkNvbmZpZ3VyYXRpb24gLUZpbHRlciAnLy9kZWZhdWx0RG9jdW1lbnQvZmlsZXMvKicgLVBTUGF0aCAiSUlTOlxTaXRlc1wkTmFtZSIgfAogICAgICAgICAgICBGb3JFYWNoLU9iamVjdCAtUHJvY2VzcyB7V3JpdGUtT3V0cHV0IC1JbnB1dE9iamVjdCAkXy52YWx1ZX0KICAgICAgICApCiAgICB9CiAgICBlbHNlICMgTXVsdGlwbGUgd2Vic2l0ZXMgd2l0aCB0aGUgc2FtZSBuYW1lIGV4aXN0LiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQgYW5kIGlzIGFuIGVycm9yCiAgICB7CiAgICAgICAgJEVycm9yTWVzc2FnZSA9ICRMb2NhbGl6ZWREYXRhLkVycm9yV2Vic2l0ZURpc2NvdmVyeUZhaWx1cmUgLWYgJE5hbWUKICAgICAgICBOZXctVGVybWluYXRpbmdFcnJvciAtRXJyb3JJZCAnV2Vic2l0ZURpc2NvdmVyeUZhaWx1cmUnIC1FcnJvck1lc3NhZ2UgJEVycm9yTWVzc2FnZSAtRXJyb3JDYXRlZ29yeSAnSW52YWxpZFJlc3VsdCcKICAgIH0KCiAgICAjIEFkZCBhbGwgd2Vic2l0ZSBwcm9wZXJ0aWVzIHRvIHRoZSBoYXNoIHRhYmxlCiAgICByZXR1cm4gQHsKICAgICAgICBFbnN1cmUgICAgICAgICAgID0gJEVuc3VyZVJlc3VsdAogICAgICAgIE5hbWUgICAgICAgICAgICAgPSAkTmFtZQogICAgICAgIFBoeXNpY2FsUGF0aCAgICAgPSAkV2Vic2l0ZS5QaHlzaWNhbFBhdGgKICAgICAgICBTdGF0ZSAgICAgICAgICAgID0gJFdlYnNpdGUuU3RhdGUKICAgICAgICBBcHBsaWNhdGlvblBvb2wgID0gJFdlYnNpdGUuQXBwbGljYXRpb25Qb29sCiAgICAgICAgQmluZGluZ0luZm8gICAgICA9ICRDaW1CaW5kaW5ncwogICAgICAgIERlZmF1bHRQYWdlICAgICAgPSAkQWxsRGVmYXVsdFBhZ2VzCiAgICAgICAgRW5hYmxlZFByb3RvY29scyA9ICRXZWJzaXRlLkVuYWJsZWRQcm90b2NvbHMKICAgIH0KfQoKZnVuY3Rpb24gU2V0LVRhcmdldFJlc291cmNlCnsKICAgIDwjCiAgICAuU1lOT1BTWVMKICAgICAgICBUaGUgU2V0LVRhcmdldFJlc291cmNlIGNtZGxldCBpcyB1c2VkIHRvIGNyZWF0ZSwgZGVsZXRlIG9yIGNvbmZpZ3VyZSBhIHdlYnNpdGUgb24gdGhlIHRhcmdldCBtYWNoaW5lLgogICAgIz4KICAgIFtDbWRsZXRCaW5kaW5nKFN1cHBvcnRzU2hvdWxkUHJvY2VzcyA9ICR0cnVlKV0KICAgIHBhcmFtCiAgICAoCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdQcmVzZW50JywgJ0Fic2VudCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEVuc3VyZSA9ICdQcmVzZW50JywKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICROYW1lLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFBoeXNpY2FsUGF0aCwKCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdTdGFydGVkJywgJ1N0b3BwZWQnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTdGF0ZSA9ICdTdGFydGVkJywKCiAgICAgICAgW1ZhbGlkYXRlTGVuZ3RoKDEsIDY0KV0gIyBUaGUgYXBwbGljYXRpb24gcG9vbCBuYW1lIG11c3QgY29udGFpbiBiZXR3ZWVuIDEgYW5kIDY0IGNoYXJhY3RlcnMKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBcHBsaWNhdGlvblBvb2wsCgogICAgICAgIFtNaWNyb3NvZnQuTWFuYWdlbWVudC5JbmZyYXN0cnVjdHVyZS5DaW1JbnN0YW5jZVtdXQogICAgICAgICRCaW5kaW5nSW5mbywKCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICREZWZhdWx0UGFnZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRW5hYmxlZFByb3RvY29scwogICAgKQoKICAgIEFzc2VydC1Nb2R1bGUKCiAgICAkV2Vic2l0ZSA9IEdldC1XZWJzaXRlIHwgV2hlcmUtT2JqZWN0IC1GaWx0ZXJTY3JpcHQgeyRfLk5hbWUgLWVxICROYW1lfQoKICAgIGlmICgkRW5zdXJlIC1lcSAnUHJlc2VudCcpCiAgICB7CiAgICAgICAgaWYgKCRXZWJzaXRlIC1uZSAkbnVsbCkKICAgICAgICB7CiAgICAgICAgICAgICMgVXBkYXRlIFBoeXNpY2FsIFBhdGggaWYgcmVxdWlyZWQKICAgICAgICAgICAgaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRQaHlzaWNhbFBhdGgpIC1lcSAkZmFsc2UgLWFuZCAkV2Vic2l0ZS5QaHlzaWNhbFBhdGggLW5lICRQaHlzaWNhbFBhdGgpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggIklJUzpcU2l0ZXNcJE5hbWUiIC1OYW1lIHBoeXNpY2FsUGF0aCAtVmFsdWUgJFBoeXNpY2FsUGF0aCAtRXJyb3JBY3Rpb24gU3RvcAogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAoJExvY2FsaXplZERhdGEuVmVyYm9zZVNldFRhcmdldFVwZGF0ZWRQaHlzaWNhbFBhdGggLWYgJE5hbWUsICRQaHlzaWNhbFBhdGgpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgVXBkYXRlIEFwcGxpY2F0aW9uIFBvb2wgaWYgcmVxdWlyZWQKICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgnQXBwbGljYXRpb25Qb29sJykgLWFuZCAkV2Vic2l0ZS5BcHBsaWNhdGlvblBvb2wgLW5lICRBcHBsaWNhdGlvblBvb2wpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggIklJUzpcU2l0ZXNcJE5hbWUiIC1OYW1lIGFwcGxpY2F0aW9uUG9vbCAtVmFsdWUgJEFwcGxpY2F0aW9uUG9vbCAtRXJyb3JBY3Rpb24gU3RvcAogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAoJExvY2FsaXplZERhdGEuVmVyYm9zZVNldFRhcmdldFVwZGF0ZWRBcHBsaWNhdGlvblBvb2wgLWYgJE5hbWUsICRBcHBsaWNhdGlvblBvb2wpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgVXBkYXRlIEJpbmRpbmdzIGlmIHJlcXVpcmVkCiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnMuQ29udGFpbnNLZXkoJ0JpbmRpbmdJbmZvJykgLWFuZCAkQmluZGluZ0luZm8gLW5lICRudWxsKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoLW5vdCAoVGVzdC1XZWJzaXRlQmluZGluZyAtTmFtZSAkTmFtZSAtQmluZGluZ0luZm8gJEJpbmRpbmdJbmZvKSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBVcGRhdGUtV2Vic2l0ZUJpbmRpbmcgLU5hbWUgJE5hbWUgLUJpbmRpbmdJbmZvICRCaW5kaW5nSW5mbwogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgKCRMb2NhbGl6ZWREYXRhLlZlcmJvc2VTZXRUYXJnZXRVcGRhdGVkQmluZGluZ0luZm8gLWYgJE5hbWUpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgVXBkYXRlIEVuYWJsZWQgUHJvdG9jb2xzIGlmIHJlcXVpcmVkCiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnMuQ29udGFpbnNLZXkoJ0VuYWJsZWRQcm90b2NvbHMnKSAtYW5kICRXZWJzaXRlLkVuYWJsZWRQcm90b2NvbHMgLW5lICRFbmFibGVkUHJvdG9jb2xzKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICJJSVM6XFNpdGVzXCROYW1lIiAtTmFtZSBlbmFibGVkUHJvdG9jb2xzIC1WYWx1ZSAkRW5hYmxlZFByb3RvY29scyAtRXJyb3JBY3Rpb24gU3RvcAogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAoJExvY2FsaXplZERhdGEuVmVyYm9zZVNldFRhcmdldFVwZGF0ZWRFbmFibGVkUHJvdG9jb2xzIC1mICROYW1lLCAkRW5hYmxlZFByb3RvY29scykKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBVcGRhdGUgRGVmYXVsdCBQYWdlcyBpZiByZXF1aXJlZAogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdEZWZhdWx0UGFnZScpIC1hbmQgJERlZmF1bHRQYWdlIC1uZSAkbnVsbCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgVXBkYXRlLURlZmF1bHRQYWdlIC1OYW1lICROYW1lIC1EZWZhdWx0UGFnZSAkRGVmYXVsdFBhZ2UKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBVcGRhdGUgU3RhdGUgaWYgcmVxdWlyZWQKICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgnU3RhdGUnKSAtYW5kICRXZWJzaXRlLlN0YXRlIC1uZSAkU3RhdGUpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmICgkU3RhdGUgLWVxICdTdGFydGVkJykKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAjIEVuc3VyZSB0aGF0IHRoZXJlIGFyZSBubyBvdGhlciBydW5uaW5nIHdlYnNpdGVzIHdpdGggYmluZGluZyBpbmZvcm1hdGlvbiB0aGF0IHdpbGwgY29uZmxpY3Qgd2l0aCB0aGlzIHdlYnNpdGUgYmVmb3JlIHN0YXJ0aW5nCiAgICAgICAgICAgICAgICAgICAgaWYgKC1ub3QgKENvbmZpcm0tVW5pcXVlQmluZGluZyAtTmFtZSAkTmFtZSAtRXhjbHVkZVN0b3BwZWQpKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBSZXR1cm4gZXJyb3IgYW5kIGRvIG5vdCBzdGFydCB0aGUgd2Vic2l0ZQogICAgICAgICAgICAgICAgICAgICAgICAkRXJyb3JNZXNzYWdlID0gJExvY2FsaXplZERhdGEuRXJyb3JXZWJzaXRlQmluZGluZ0NvbmZsaWN0T25TdGFydCAtZiAkTmFtZQogICAgICAgICAgICAgICAgICAgICAgICBOZXctVGVybWluYXRpbmdFcnJvciAtRXJyb3JJZCAnV2Vic2l0ZUJpbmRpbmdDb25mbGljdE9uU3RhcnQnIC1FcnJvck1lc3NhZ2UgJEVycm9yTWVzc2FnZSAtRXJyb3JDYXRlZ29yeSAnSW52YWxpZFJlc3VsdCcKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHRyeQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgU3RhcnQtV2Vic2l0ZSAtTmFtZSAkTmFtZSAtRXJyb3JBY3Rpb24gU3RvcAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXRjaAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgJEVycm9yTWVzc2FnZSA9ICRMb2NhbGl6ZWREYXRhLkVycm9yV2Vic2l0ZVN0YXRlRmFpbHVyZSAtZiAkTmFtZSwgJF8uRXhjZXB0aW9uLk1lc3NhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgTmV3LVRlcm1pbmF0aW5nRXJyb3IgLUVycm9ySWQgJ1dlYnNpdGVTdGF0ZUZhaWx1cmUnIC1FcnJvck1lc3NhZ2UgJEVycm9yTWVzc2FnZSAtRXJyb3JDYXRlZ29yeSAnSW52YWxpZE9wZXJhdGlvbicKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgdHJ5CiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBTdG9wLVdlYnNpdGUgLU5hbWUgJE5hbWUgLUVycm9yQWN0aW9uIFN0b3AKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY2F0Y2gKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICRFcnJvck1lc3NhZ2UgPSAkTG9jYWxpemVkRGF0YS5FcnJvcldlYnNpdGVTdGF0ZUZhaWx1cmUgLWYgJE5hbWUsICRfLkV4Y2VwdGlvbi5NZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICAgIE5ldy1UZXJtaW5hdGluZ0Vycm9yIC1FcnJvcklkICdXZWJzaXRlU3RhdGVGYWlsdXJlJyAtRXJyb3JNZXNzYWdlICRFcnJvck1lc3NhZ2UgLUVycm9yQ2F0ZWdvcnkgJ0ludmFsaWRPcGVyYXRpb24nCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgKCRMb2NhbGl6ZWREYXRhLlZlcmJvc2VTZXRUYXJnZXRVcGRhdGVkU3RhdGUgLWYgJE5hbWUsICRTdGF0ZSkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlICMgQ3JlYXRlIHdlYnNpdGUgaWYgaXQgZG9lcyBub3QgZXhpc3QKICAgICAgICB7CiAgICAgICAgICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkUGh5c2ljYWxQYXRoKSkgewogICAgICAgICAgICAgICAgdGhyb3cgIlRoZSBQaHlzaWNhbFBhdGggcGFyYW1ldGVyIG11c3QgYmUgcHJvdmlkZWQgZm9yIGEgd2Vic2l0ZSB0byBiZSBjcmVhdGVkIgogICAgICAgICAgICB9CgogICAgICAgICAgICB0cnkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJFBTQm91bmRQYXJhbWV0ZXJzLkdldEVudW1lcmF0b3IoKSB8CiAgICAgICAgICAgICAgICBXaGVyZS1PYmplY3QgLUZpbHRlclNjcmlwdCB7CiAgICAgICAgICAgICAgICAgICAgJF8uS2V5IC1pbiAoR2V0LUNvbW1hbmQgLU5hbWUgTmV3LVdlYnNpdGUgLU1vZHVsZSBXZWJBZG1pbmlzdHJhdGlvbikuUGFyYW1ldGVycy5LZXlzCiAgICAgICAgICAgICAgICB9IHwKICAgICAgICAgICAgICAgIEZvckVhY2gtT2JqZWN0IC1CZWdpbiB7CiAgICAgICAgICAgICAgICAgICAgJE5ld1dlYnNpdGVTcGxhdCA9IEB7fQogICAgICAgICAgICAgICAgfSAtUHJvY2VzcyB7CiAgICAgICAgICAgICAgICAgICAgJE5ld1dlYnNpdGVTcGxhdC5BZGQoJF8uS2V5LCAkXy5WYWx1ZSkKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAjIElmIHRoZXJlIGFyZSBubyBvdGhlciB3ZWJzaXRlcywgc3BlY2lmeSB0aGUgSWQgcGFyYW1ldGVyIGZvciB0aGUgbmV3IHdlYnNpdGUuCiAgICAgICAgICAgICAgICAjIE90aGVyd2lzZSBhbiBlcnJvciBjYW4gb2NjdXIgb24gc3lzdGVtcyBydW5uaW5nIFdpbmRvd3MgU2VydmVyIDIwMDggUjIuCiAgICAgICAgICAgICAgICBpZiAoLW5vdCAoR2V0LVdlYnNpdGUpKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICROZXdXZWJzaXRlU3BsYXQuQWRkKCdJZCcsIDEpCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJFdlYnNpdGUgPSBOZXctV2Vic2l0ZSBATmV3V2Vic2l0ZVNwbGF0IC1FcnJvckFjdGlvbiBTdG9wCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICgkTG9jYWxpemVkRGF0YS5WZXJib3NlU2V0VGFyZ2V0V2Vic2l0ZUNyZWF0ZWQgLWYgJE5hbWUpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2gKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJEVycm9yTWVzc2FnZSA9ICRMb2NhbGl6ZWREYXRhLkVycm9yV2Vic2l0ZUNyZWF0aW9uRmFpbHVyZSAtZiAkTmFtZSwgJF8uRXhjZXB0aW9uLk1lc3NhZ2UKICAgICAgICAgICAgICAgIE5ldy1UZXJtaW5hdGluZ0Vycm9yIC1FcnJvcklkICdXZWJzaXRlQ3JlYXRpb25GYWlsdXJlJyAtRXJyb3JNZXNzYWdlICRFcnJvck1lc3NhZ2UgLUVycm9yQ2F0ZWdvcnkgJ0ludmFsaWRPcGVyYXRpb24nCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFN0b3AtV2Vic2l0ZSAtTmFtZSAkV2Vic2l0ZS5OYW1lIC1FcnJvckFjdGlvbiBTdG9wCgogICAgICAgICAgICAjIENsZWFyIGRlZmF1bHQgYmluZGluZ3MgaWYgbmV3IGJpbmRpbmdzIGRlZmluZWQgYW5kIGFyZSBkaWZmZXJlbnQKICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgnQmluZGluZ0luZm8nKSAtYW5kICRCaW5kaW5nSW5mbyAtbmUgJG51bGwpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmICgtbm90IChUZXN0LVdlYnNpdGVCaW5kaW5nIC1OYW1lICROYW1lIC1CaW5kaW5nSW5mbyAkQmluZGluZ0luZm8pKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIFVwZGF0ZS1XZWJzaXRlQmluZGluZyAtTmFtZSAkTmFtZSAtQmluZGluZ0luZm8gJEJpbmRpbmdJbmZvCiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAoJExvY2FsaXplZERhdGEuVmVyYm9zZVNldFRhcmdldFVwZGF0ZWRCaW5kaW5nSW5mbyAtZiAkTmFtZSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBVcGRhdGUgRW5hYmxlZCBQcm90b2NvbHMgaWYgcmVxdWlyZWQKICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgnRW5hYmxlZFByb3RvY29scycpIC1hbmQgJFdlYnNpdGUuRW5hYmxlZFByb3RvY29scyAtbmUgJEVuYWJsZWRQcm90b2NvbHMpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggIklJUzpcU2l0ZXNcJE5hbWUiIC1OYW1lIGVuYWJsZWRQcm90b2NvbHMgLVZhbHVlICRFbmFibGVkUHJvdG9jb2xzIC1FcnJvckFjdGlvbiBTdG9wCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICgkTG9jYWxpemVkRGF0YS5WZXJib3NlU2V0VGFyZ2V0VXBkYXRlZEVuYWJsZWRQcm90b2NvbHMgLWYgJE5hbWUsICRFbmFibGVkUHJvdG9jb2xzKQogICAgICAgICAgICB9CgogICAgICAgICAgICAjIFVwZGF0ZSBEZWZhdWx0IFBhZ2VzIGlmIHJlcXVpcmVkCiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnMuQ29udGFpbnNLZXkoJ0RlZmF1bHRQYWdlJykgLWFuZCAkRGVmYXVsdFBhZ2UgLW5lICRudWxsKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBVcGRhdGUtRGVmYXVsdFBhZ2UgLU5hbWUgJE5hbWUgLURlZmF1bHRQYWdlICREZWZhdWx0UGFnZQogICAgICAgICAgICB9CgogICAgICAgICAgICAjIFN0YXJ0IHdlYnNpdGUgaWYgcmVxdWlyZWQKICAgICAgICAgICAgaWYgKCRTdGF0ZSAtZXEgJ1N0YXJ0ZWQnKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAjIEVuc3VyZSB0aGF0IHRoZXJlIGFyZSBubyBvdGhlciBydW5uaW5nIHdlYnNpdGVzIHdpdGggYmluZGluZyBpbmZvcm1hdGlvbiB0aGF0IHdpbGwgY29uZmxpY3Qgd2l0aCB0aGlzIHdlYnNpdGUgYmVmb3JlIHN0YXJ0aW5nCiAgICAgICAgICAgICAgICBpZiAoLW5vdCAoQ29uZmlybS1VbmlxdWVCaW5kaW5nIC1OYW1lICROYW1lIC1FeGNsdWRlU3RvcHBlZCkpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIyBSZXR1cm4gZXJyb3IgYW5kIGRvIG5vdCBzdGFydCB0aGUgd2Vic2l0ZQogICAgICAgICAgICAgICAgICAgICRFcnJvck1lc3NhZ2UgPSAkTG9jYWxpemVkRGF0YS5FcnJvcldlYnNpdGVCaW5kaW5nQ29uZmxpY3RPblN0YXJ0IC1mICROYW1lCiAgICAgICAgICAgICAgICAgICAgTmV3LVRlcm1pbmF0aW5nRXJyb3IgLUVycm9ySWQgJ1dlYnNpdGVCaW5kaW5nQ29uZmxpY3RPblN0YXJ0JyAtRXJyb3JNZXNzYWdlICRFcnJvck1lc3NhZ2UgLUVycm9yQ2F0ZWdvcnkgJ0ludmFsaWRSZXN1bHQnCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdHJ5CiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgU3RhcnQtV2Vic2l0ZSAtTmFtZSAkTmFtZSAtRXJyb3JBY3Rpb24gU3RvcAogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgKCRMb2NhbGl6ZWREYXRhLlZlcmJvc2VTZXRUYXJnZXRXZWJzaXRlU3RhcnRlZCAtZiAkTmFtZSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgJEVycm9yTWVzc2FnZSA9ICRMb2NhbGl6ZWREYXRhLkVycm9yV2Vic2l0ZVN0YXRlRmFpbHVyZSAtZiAkTmFtZSwgJF8uRXhjZXB0aW9uLk1lc3NhZ2UKICAgICAgICAgICAgICAgICAgICBOZXctVGVybWluYXRpbmdFcnJvciAtRXJyb3JJZCAnV2Vic2l0ZVN0YXRlRmFpbHVyZScgLUVycm9yTWVzc2FnZSAkRXJyb3JNZXNzYWdlIC1FcnJvckNhdGVnb3J5ICdJbnZhbGlkT3BlcmF0aW9uJwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgZWxzZSAjIFJlbW92ZSB3ZWJzaXRlCiAgICB7CiAgICAgICAgdHJ5CiAgICAgICAgewogICAgICAgICAgICBSZW1vdmUtV2Vic2l0ZSAtTmFtZSAkTmFtZSAtRXJyb3JBY3Rpb24gU3RvcAogICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICgkTG9jYWxpemVkRGF0YS5WZXJib3NlU2V0VGFyZ2V0V2Vic2l0ZVJlbW92ZWQgLWYgJE5hbWUpCiAgICAgICAgfQogICAgICAgIGNhdGNoCiAgICAgICAgewogICAgICAgICAgICAkRXJyb3JNZXNzYWdlID0gJExvY2FsaXplZERhdGEuRXJyb3JXZWJzaXRlUmVtb3ZhbEZhaWx1cmUgLWYgJE5hbWUsICRfLkV4Y2VwdGlvbi5NZXNzYWdlCiAgICAgICAgICAgIE5ldy1UZXJtaW5hdGluZ0Vycm9yIC1FcnJvcklkICdXZWJzaXRlUmVtb3ZhbEZhaWx1cmUnIC1FcnJvck1lc3NhZ2UgJEVycm9yTWVzc2FnZSAtRXJyb3JDYXRlZ29yeSAnSW52YWxpZE9wZXJhdGlvbicKICAgICAgICB9CiAgICB9Cn0KCmZ1bmN0aW9uIFRlc3QtVGFyZ2V0UmVzb3VyY2UKewogICAgPCMKICAgIC5TWU5PUFNZUwogICAgICAgIFRoZSBUZXN0LVRhcmdldFJlc291cmNlIGNtZGxldCBpcyB1c2VkIHRvIHZhbGlkYXRlIGlmIHRoZSByb2xlIG9yIGZlYXR1cmUgaXMgaW4gYSBzdGF0ZSBhcyBleHBlY3RlZCBpbiB0aGUgaW5zdGFuY2UgZG9jdW1lbnQuCiAgICAjPgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFtPdXRwdXRUeXBlKFtCb29sZWFuXSldCiAgICBwYXJhbQogICAgKAogICAgICAgIFtWYWxpZGF0ZVNldCgnUHJlc2VudCcsICdBYnNlbnQnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRFbnN1cmUgPSAnUHJlc2VudCcsCgogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTmFtZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkUGh5c2ljYWxQYXRoLAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ1N0YXJ0ZWQnLCAnU3RvcHBlZCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFN0YXRlID0gJ1N0YXJ0ZWQnLAoKICAgICAgICBbVmFsaWRhdGVMZW5ndGgoMSwgNjQpXSAjIFRoZSBhcHBsaWNhdGlvbiBwb29sIG5hbWUgbXVzdCBjb250YWluIGJldHdlZW4gMSBhbmQgNjQgY2hhcmFjdGVycwogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFwcGxpY2F0aW9uUG9vbCwKCiAgICAgICAgW01pY3Jvc29mdC5NYW5hZ2VtZW50LkluZnJhc3RydWN0dXJlLkNpbUluc3RhbmNlW11dCiAgICAgICAgJEJpbmRpbmdJbmZvLAoKICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJERlZmF1bHRQYWdlLAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICRFbmFibGVkUHJvdG9jb2xzCiAgICApCgogICAgQXNzZXJ0LU1vZHVsZQoKICAgICRJbkRlc2lyZWRTdGF0ZSA9ICR0cnVlCgogICAgJFdlYnNpdGUgPSBHZXQtV2Vic2l0ZSB8IFdoZXJlLU9iamVjdCAtRmlsdGVyU2NyaXB0IHskXy5OYW1lIC1lcSAkTmFtZX0KCiAgICAjIENoZWNrIEVuc3VyZQogICAgaWYgKCgkRW5zdXJlIC1lcSAnUHJlc2VudCcgLWFuZCAkV2Vic2l0ZSAtZXEgJG51bGwpIC1vciAoJEVuc3VyZSAtZXEgJ0Fic2VudCcgLWFuZCAkV2Vic2l0ZSAtbmUgJG51bGwpKQogICAgewogICAgICAgICRJbkRlc2lyZWRTdGF0ZSA9ICRmYWxzZQogICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgKCRMb2NhbGl6ZWREYXRhLlZlcmJvc2VUZXN0VGFyZ2V0RmFsc2VFbnN1cmUgLWYgJE5hbWUpCiAgICB9CgogICAgIyBPbmx5IGNoZWNrIHByb3BlcnRpZXMgaWYgd2Vic2l0ZSBleGlzdHMKICAgIGlmICgkRW5zdXJlIC1lcSAnUHJlc2VudCcgLWFuZCAkV2Vic2l0ZSAtbmUgJG51bGwpCiAgICB7CiAgICAgICAgIyBDaGVjayBQaHlzaWNhbCBQYXRoIHByb3BlcnR5CiAgICAgICAgaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRQaHlzaWNhbFBhdGgpIC1lcSAkZmFsc2UgLWFuZCAkV2Vic2l0ZS5QaHlzaWNhbFBhdGggLW5lICRQaHlzaWNhbFBhdGgpCiAgICAgICAgewogICAgICAgICAgICAkSW5EZXNpcmVkU3RhdGUgPSAkZmFsc2UKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAoJExvY2FsaXplZERhdGEuVmVyYm9zZVRlc3RUYXJnZXRGYWxzZVBoeXNpY2FsUGF0aCAtZiAkTmFtZSkKICAgICAgICB9CgogICAgICAgICMgQ2hlY2sgU3RhdGUKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdTdGF0ZScpIC1hbmQgJFdlYnNpdGUuU3RhdGUgLW5lICRTdGF0ZSkKICAgICAgICB7CiAgICAgICAgICAgICRJbkRlc2lyZWRTdGF0ZSA9ICRmYWxzZQogICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICgkTG9jYWxpemVkRGF0YS5WZXJib3NlVGVzdFRhcmdldEZhbHNlU3RhdGUgLWYgJE5hbWUpCiAgICAgICAgfQoKICAgICAgICAjIENoZWNrIEFwcGxpY2F0aW9uIFBvb2wgcHJvcGVydHkKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdBcHBsaWNhdGlvblBvb2wnKSAtYW5kICRXZWJzaXRlLkFwcGxpY2F0aW9uUG9vbCAtbmUgJEFwcGxpY2F0aW9uUG9vbCkKICAgICAgICB7CiAgICAgICAgICAgICRJbkRlc2lyZWRTdGF0ZSA9ICRmYWxzZQogICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICgkTG9jYWxpemVkRGF0YS5WZXJib3NlVGVzdFRhcmdldEZhbHNlQXBwbGljYXRpb25Qb29sIC1mICROYW1lKQogICAgICAgIH0KCiAgICAgICAgIyBDaGVjayBCaW5kaW5nIHByb3BlcnRpZXMKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdCaW5kaW5nSW5mbycpIC1hbmQgJEJpbmRpbmdJbmZvIC1uZSAkbnVsbCkKICAgICAgICB7CiAgICAgICAgICAgIGlmICgtbm90IChUZXN0LVdlYnNpdGVCaW5kaW5nIC1OYW1lICROYW1lIC1CaW5kaW5nSW5mbyAkQmluZGluZ0luZm8pKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAkSW5EZXNpcmVkU3RhdGUgPSAkZmFsc2UKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgKCRMb2NhbGl6ZWREYXRhLlZlcmJvc2VUZXN0VGFyZ2V0RmFsc2VCaW5kaW5nSW5mbyAtZiAkTmFtZSkKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgIyBDaGVjayBFbmFibGVkIFByb3RvY29scwogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnMuQ29udGFpbnNLZXkoJ0VuYWJsZWRQcm90b2NvbHMnKSAtYW5kICRXZWJzaXRlLkVuYWJsZWRQcm90b2NvbHMgLW5lICRFbmFibGVkUHJvdG9jb2xzKQogICAgICAgIHsKICAgICAgICAgICAgJEluRGVzaXJlZFN0YXRlID0gJGZhbHNlCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgKCRMb2NhbGl6ZWREYXRhLlZlcmJvc2VUZXN0VGFyZ2V0RmFsc2VFbmFibGVkUHJvdG9jb2xzIC1mICROYW1lKQogICAgICAgIH0KCiAgICAgICAgIyBDaGVjayBEZWZhdWx0IFBhZ2VzCiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgnRGVmYXVsdFBhZ2UnKSAtYW5kICREZWZhdWx0UGFnZSAtbmUgJG51bGwpCiAgICAgICAgewogICAgICAgICAgICAkQWxsRGVmYXVsdFBhZ2VzID0gQCgKICAgICAgICAgICAgICAgIEdldC1XZWJDb25maWd1cmF0aW9uIC1GaWx0ZXIgJy8vZGVmYXVsdERvY3VtZW50L2ZpbGVzLyonIC1QU1BhdGggIklJUzpcU2l0ZXNcJE5hbWUiIHwKICAgICAgICAgICAgICAgIEZvckVhY2gtT2JqZWN0IC1Qcm9jZXNzIHtXcml0ZS1PdXRwdXQgLUlucHV0T2JqZWN0ICRfLnZhbHVlfQogICAgICAgICAgICApCgogICAgICAgICAgICBmb3JlYWNoICgkUGFnZSBpbiAkRGVmYXVsdFBhZ2UpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmICgkQWxsRGVmYXVsdFBhZ2VzIC1pbm90Y29udGFpbnMgJFBhZ2UpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgJEluRGVzaXJlZFN0YXRlID0gJGZhbHNlCiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAoJExvY2FsaXplZERhdGEuVmVyYm9zZVRlc3RUYXJnZXRGYWxzZURlZmF1bHRQYWdlIC1mICROYW1lKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgIH0KCiAgICBpZiAoJEluRGVzaXJlZFN0YXRlIC1lcSAkdHJ1ZSkKICAgIHsKICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICgkTG9jYWxpemVkRGF0YS5WZXJib3NlVGVzdFRhcmdldFRydWVSZXN1bHQpCiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAoJExvY2FsaXplZERhdGEuVmVyYm9zZVRlc3RUYXJnZXRGYWxzZVJlc3VsdCkKICAgIH0KCiAgICByZXR1cm4gJEluRGVzaXJlZFN0YXRlCn0KCiNyZWdpb24gSGVscGVyIEZ1bmN0aW9ucwoKZnVuY3Rpb24gQ29uZmlybS1VbmlxdWVCaW5kaW5nCnsKICAgIDwjCiAgICAuU1lOT1BTSVMKICAgICAgICBIZWxwZXIgZnVuY3Rpb24gdXNlZCB0byB2YWxpZGF0ZSB0aGF0IHRoZSB3ZWJzaXRlJ3MgYmluZGluZyBpbmZvcm1hdGlvbiBpcyB1bmlxdWUgdG8gb3RoZXIgd2Vic2l0ZXMuCiAgICAgICAgUmV0dXJucyBGYWxzZSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGJpbmRpbmdzIGlzIGFscmVhZHkgYXNzaWduZWQgdG8gYW5vdGhlciB3ZWJzaXRlLgogICAgLlBBUkFNRVRFUiBOYW1lCiAgICAgICAgU3BlY2lmaWVzIHRoZSBuYW1lIG9mIHRoZSB3ZWJzaXRlLgogICAgLlBBUkFNRVRFUiBFeGNsdWRlU3RvcHBlZAogICAgICAgIE9taXRzIHN0b3BwZWQgd2Vic2l0ZXMuCiAgICAuTk9URVMKICAgICAgICBUaGlzIGZ1bmN0aW9uIHRlc3RzIHN0YW5kYXJkICgnaHR0cCcgYW5kICdodHRwcycpIGJpbmRpbmdzIG9ubHkuCiAgICAgICAgSXQgaXMgdGVjaG5pY2FsbHkgcG9zc2libGUgdG8gYXNzaWduIGlkZW50aWNhbCBub24tc3RhbmRhcmQgYmluZGluZ3MgKHN1Y2ggYXMgJ25ldC50Y3AnKSB0byBkaWZmZXJlbnQgd2Vic2l0ZXMuCiAgICAjPgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFtPdXRwdXRUeXBlKFtCb29sZWFuXSldCiAgICBwYXJhbQogICAgKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkZmFsc2UpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEV4Y2x1ZGVTdG9wcGVkCiAgICApCgogICAgJFdlYnNpdGUgPSBHZXQtV2Vic2l0ZSB8IFdoZXJlLU9iamVjdCAtRmlsdGVyU2NyaXB0IHskXy5OYW1lIC1lcSAkTmFtZX0KCiAgICBpZiAoLW5vdCAkV2Vic2l0ZSkKICAgIHsKICAgICAgICAkRXJyb3JNZXNzYWdlID0gJExvY2FsaXplZERhdGEuRXJyb3JXZWJzaXRlTm90Rm91bmQgLWYgJE5hbWUKICAgICAgICBOZXctVGVybWluYXRpbmdFcnJvciAtRXJyb3JJZCAnV2Vic2l0ZU5vdEZvdW5kJyAtRXJyb3JNZXNzYWdlICRFcnJvck1lc3NhZ2UgLUVycm9yQ2F0ZWdvcnkgJ0ludmFsaWRSZXN1bHQnCiAgICB9CgogICAgJFJlZmVyZW5jZU9iamVjdCA9IEAoCiAgICAgICAgJFdlYnNpdGUuYmluZGluZ3MuQ29sbGVjdGlvbiB8CiAgICAgICAgV2hlcmUtT2JqZWN0IC1GaWx0ZXJTY3JpcHQgeyRfLnByb3RvY29sIC1pbiBAKCdodHRwJywgJ2h0dHBzJyl9IHwKICAgICAgICBDb252ZXJ0VG8tV2ViQmluZGluZyAtVmVyYm9zZTokZmFsc2UKICAgICkKCiAgICBpZiAoJEV4Y2x1ZGVTdG9wcGVkKQogICAgewogICAgICAgICRPdGhlcldlYnNpdGVGaWx0ZXIgPSB7JF8uTmFtZSAtbmUgJFdlYnNpdGUuTmFtZSAtYW5kICRfLlN0YXRlIC1uZSAnU3RvcHBlZCd9CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgJE90aGVyV2Vic2l0ZUZpbHRlciA9IHskXy5OYW1lIC1uZSAkV2Vic2l0ZS5OYW1lfQogICAgfQoKICAgICREaWZmZXJlbmNlT2JqZWN0ID0gQCgKICAgICAgICBHZXQtV2Vic2l0ZSB8CiAgICAgICAgV2hlcmUtT2JqZWN0IC1GaWx0ZXJTY3JpcHQgJE90aGVyV2Vic2l0ZUZpbHRlciB8CiAgICAgICAgRm9yRWFjaC1PYmplY3QgLVByb2Nlc3MgeyRfLmJpbmRpbmdzLkNvbGxlY3Rpb259IHwKICAgICAgICBXaGVyZS1PYmplY3QgLUZpbHRlclNjcmlwdCB7JF8ucHJvdG9jb2wgLWluIEAoJ2h0dHAnLCAnaHR0cHMnKX0gfAogICAgICAgIENvbnZlcnRUby1XZWJCaW5kaW5nIC1WZXJib3NlOiRmYWxzZQogICAgKQoKICAgICMgQXNzdW1lIHRoYXQgYmluZGluZ3MgYXJlIHVuaXF1ZQogICAgJFJlc3VsdCA9ICR0cnVlCgogICAgJENvbXBhcmVTcGxhdCA9IEB7CiAgICAgICAgUmVmZXJlbmNlT2JqZWN0ICA9ICRSZWZlcmVuY2VPYmplY3QKICAgICAgICBEaWZmZXJlbmNlT2JqZWN0ID0gJERpZmZlcmVuY2VPYmplY3QKICAgICAgICBQcm9wZXJ0eSAgICAgICAgID0gQCgncHJvdG9jb2wnLCAnYmluZGluZ0luZm9ybWF0aW9uJykKICAgICAgICBFeGNsdWRlRGlmZmVyZW50ID0gJHRydWUKICAgICAgICBJbmNsdWRlRXF1YWwgICAgID0gJHRydWUKICAgIH0KCiAgICBpZiAoQ29tcGFyZS1PYmplY3QgQENvbXBhcmVTcGxhdCkKICAgIHsKICAgICAgICAkUmVzdWx0ID0gJGZhbHNlCiAgICB9CgogICAgcmV0dXJuICRSZXN1bHQKfQoKZnVuY3Rpb24gQ29udmVydFRvLUNpbUJpbmRpbmcKewogICAgPCMKICAgIC5TWU5PUFNJUwogICAgICAgIENvbnZlcnRzIElJUyA8YmluZGluZz4gZWxlbWVudHMgdG8gaW5zdGFuY2VzIG9mIHRoZSBNU0ZUX3hXZWJCaW5kaW5nSW5mb3JtYXRpb24gQ0lNIGNsYXNzLgogICAgIz4KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBbT3V0cHV0VHlwZShbTWljcm9zb2Z0Lk1hbmFnZW1lbnQuSW5mcmFzdHJ1Y3R1cmUuQ2ltSW5zdGFuY2VdKV0KICAgIHBhcmFtCiAgICAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkdHJ1ZSldCiAgICAgICAgW0FsbG93RW1wdHlDb2xsZWN0aW9uKCldCiAgICAgICAgW0FsbG93TnVsbCgpXQogICAgICAgIFtPYmplY3RbXV0KICAgICAgICAkSW5wdXRPYmplY3QKICAgICkKICAgIGJlZ2luCiAgICB7CiAgICAgICAgJENpbUNsYXNzTmFtZSA9ICdNU0ZUX3hXZWJCaW5kaW5nSW5mb3JtYXRpb24nCiAgICAgICAgJENpbU5hbWVzcGFjZSA9ICdyb290L21pY3Jvc29mdC9XaW5kb3dzL0Rlc2lyZWRTdGF0ZUNvbmZpZ3VyYXRpb24nCiAgICB9CiAgICBwcm9jZXNzCiAgICB7CiAgICAgICAgZm9yZWFjaCAoJEJpbmRpbmcgaW4gJElucHV0T2JqZWN0KQogICAgICAgIHsKICAgICAgICAgICAgW0hhc2h0YWJsZV0kQ2ltUHJvcGVydGllcyA9IEB7CiAgICAgICAgICAgICAgICBQcm90b2NvbCAgICAgICAgICAgPSBbU3RyaW5nXSRCaW5kaW5nLnByb3RvY29sCiAgICAgICAgICAgICAgICBCaW5kaW5nSW5mb3JtYXRpb24gPSBbU3RyaW5nXSRCaW5kaW5nLmJpbmRpbmdJbmZvcm1hdGlvbgogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJEJpbmRpbmcuUHJvdG9jb2wgLWluIEAoJ2h0dHAnLCAnaHR0cHMnKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaWYgKCRCaW5kaW5nLmJpbmRpbmdJbmZvcm1hdGlvbiAtbWF0Y2ggJ15cWyguKj8pXF1cOiguKj8pXDooLio/KSQnKSAjIEV4dHJhY3QgSVB2NiBhZGRyZXNzCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgJElQQWRkcmVzcyA9ICRNYXRjaGVzWzFdCiAgICAgICAgICAgICAgICAgICAgJFBvcnQgICAgICA9ICRNYXRjaGVzWzJdCiAgICAgICAgICAgICAgICAgICAgJEhvc3ROYW1lICA9ICRNYXRjaGVzWzNdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgJElQQWRkcmVzcywgJFBvcnQsICRIb3N0TmFtZSA9ICRCaW5kaW5nLmJpbmRpbmdJbmZvcm1hdGlvbiAtc3BsaXQgJ1w6JwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChbU3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkSVBBZGRyZXNzKSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAkSVBBZGRyZXNzID0gJyonCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJENpbVByb3BlcnRpZXMuQWRkKCdJUEFkZHJlc3MnLCBbU3RyaW5nXSRJUEFkZHJlc3MpCiAgICAgICAgICAgICAgICAkQ2ltUHJvcGVydGllcy5BZGQoJ1BvcnQnLCAgICAgIFtVSW50MTZdJFBvcnQpCiAgICAgICAgICAgICAgICAkQ2ltUHJvcGVydGllcy5BZGQoJ0hvc3ROYW1lJywgIFtTdHJpbmddJEhvc3ROYW1lKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJENpbVByb3BlcnRpZXMuQWRkKCdJUEFkZHJlc3MnLCBbU3RyaW5nXTo6RW1wdHkpCiAgICAgICAgICAgICAgICAkQ2ltUHJvcGVydGllcy5BZGQoJ1BvcnQnLCAgICAgIFtVSW50MTZdOjpNaW5WYWx1ZSkKICAgICAgICAgICAgICAgICRDaW1Qcm9wZXJ0aWVzLkFkZCgnSG9zdE5hbWUnLCAgW1N0cmluZ106OkVtcHR5KQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoW0Vudmlyb25tZW50XTo6T1NWZXJzaW9uLlZlcnNpb24gLWdlICc2LjInKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAkQ2ltUHJvcGVydGllcy5BZGQoJ1NzbEZsYWdzJywgW1N0cmluZ10kQmluZGluZy5zc2xGbGFncykKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJENpbVByb3BlcnRpZXMuQWRkKCdDZXJ0aWZpY2F0ZVRodW1icHJpbnQnLCBbU3RyaW5nXSRCaW5kaW5nLmNlcnRpZmljYXRlSGFzaCkKICAgICAgICAgICAgJENpbVByb3BlcnRpZXMuQWRkKCdDZXJ0aWZpY2F0ZVN0b3JlTmFtZScsICBbU3RyaW5nXSRCaW5kaW5nLmNlcnRpZmljYXRlU3RvcmVOYW1lKQoKICAgICAgICAgICAgTmV3LUNpbUluc3RhbmNlIC1DbGFzc05hbWUgJENpbUNsYXNzTmFtZSAtTmFtZXNwYWNlICRDaW1OYW1lc3BhY2UgLVByb3BlcnR5ICRDaW1Qcm9wZXJ0aWVzIC1DbGllbnRPbmx5CiAgICAgICAgfQogICAgfQp9CgpmdW5jdGlvbiBDb252ZXJ0VG8tV2ViQmluZGluZwp7CiAgICA8IwogICAgLlNZTk9QU0lTCiAgICAgICAgQ29udmVydHMgaW5zdGFuY2VzIG9mIHRoZSBNU0ZUX3hXZWJCaW5kaW5nSW5mb3JtYXRpb24gQ0lNIGNsYXNzIHRvIHRoZSBJSVMgPGJpbmRpbmc+IGVsZW1lbnQgcmVwcmVzZW50YXRpb24uCiAgICAuTElOSwogICAgICAgIGh0dHBzOi8vd3d3Lmlpcy5uZXQvY29uZmlncmVmZXJlbmNlL3N5c3RlbS5hcHBsaWNhdGlvbmhvc3Qvc2l0ZXMvc2l0ZS9iaW5kaW5ncy9iaW5kaW5nCiAgICAjPgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtCiAgICAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkdHJ1ZSldCiAgICAgICAgW0FsbG93RW1wdHlDb2xsZWN0aW9uKCldCiAgICAgICAgW0FsbG93TnVsbCgpXQogICAgICAgIFtPYmplY3RbXV0KICAgICAgICAkSW5wdXRPYmplY3QKICAgICkKICAgIHByb2Nlc3MKICAgIHsKICAgICAgICBmb3JlYWNoICgkQmluZGluZyBpbiAkSW5wdXRPYmplY3QpCiAgICAgICAgewogICAgICAgICAgICAkT3V0cHV0T2JqZWN0ID0gQHsKICAgICAgICAgICAgICAgIHByb3RvY29sID0gJEJpbmRpbmcuUHJvdG9jb2wKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCRCaW5kaW5nIC1pcyBbTWljcm9zb2Z0Lk1hbmFnZW1lbnQuSW5mcmFzdHJ1Y3R1cmUuQ2ltSW5zdGFuY2VdKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoJEJpbmRpbmcuUHJvdG9jb2wgLWluIEAoJ2h0dHAnLCAnaHR0cHMnKSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpZiAoLW5vdCBbU3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkQmluZGluZy5CaW5kaW5nSW5mb3JtYXRpb24pKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC1ub3QgW1N0cmluZ106OklzTnVsbE9yRW1wdHkoJEJpbmRpbmcuSVBBZGRyZXNzKSAtb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1ub3QgW1N0cmluZ106OklzTnVsbE9yRW1wdHkoJEJpbmRpbmcuUG9ydCkgLW9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtbm90IFtTdHJpbmddOjpJc051bGxPckVtcHR5KCRCaW5kaW5nLkhvc3ROYW1lKQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJc0pvaW5SZXF1aXJlZCA9ICR0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICgkTG9jYWxpemVkRGF0YS5WZXJib3NlQ29udmVydFRvV2ViQmluZGluZ0lnbm9yZUJpbmRpbmdJbmZvcm1hdGlvbiAtZiAkQmluZGluZy5Qcm90b2NvbCkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJc0pvaW5SZXF1aXJlZCA9ICRmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICRJc0pvaW5SZXF1aXJlZCA9ICR0cnVlCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAjIENvbnN0cnVjdCB0aGUgYmluZGluZ0luZm9ybWF0aW9uIGF0dHJpYnV0ZQogICAgICAgICAgICAgICAgICAgIGlmICgkSXNKb2luUmVxdWlyZWQgLWVxICR0cnVlKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgJElQQWRkcmVzc1N0cmluZyA9IEZvcm1hdC1JUEFkZHJlc3NTdHJpbmcgLUlucHV0U3RyaW5nICRCaW5kaW5nLklQQWRkcmVzcyAtRXJyb3JBY3Rpb24gU3RvcAoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFtTdHJpbmddOjpJc051bGxPckVtcHR5KCRCaW5kaW5nLlBvcnQpKQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCRCaW5kaW5nLlByb3RvY29sKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdodHRwJyAgeyRQb3J0TnVtYmVyU3RyaW5nID0gJzgwJ30KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaHR0cHMnIHskUG9ydE51bWJlclN0cmluZyA9ICc0NDMnfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgKCRMb2NhbGl6ZWREYXRhLlZlcmJvc2VDb252ZXJ0VG9XZWJCaW5kaW5nRGVmYXVsdFBvcnQgLWYgJEJpbmRpbmcuUHJvdG9jb2wsICRQb3J0TnVtYmVyU3RyaW5nKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFRlc3QtUG9ydE51bWJlciAtSW5wdXRTdHJpbmcgJEJpbmRpbmcuUG9ydCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUG9ydE51bWJlclN0cmluZyA9ICRCaW5kaW5nLlBvcnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRXJyb3JNZXNzYWdlID0gJExvY2FsaXplZERhdGEuRXJyb3JXZWJCaW5kaW5nSW52YWxpZFBvcnQgLWYgJEJpbmRpbmcuUG9ydAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5ldy1UZXJtaW5hdGluZ0Vycm9yIC1FcnJvcklkICdXZWJCaW5kaW5nSW52YWxpZFBvcnQnIC1FcnJvck1lc3NhZ2UgJEVycm9yTWVzc2FnZSAtRXJyb3JDYXRlZ29yeSAnSW52YWxpZEFyZ3VtZW50JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAkQmluZGluZ0luZm9ybWF0aW9uID0gJElQQWRkcmVzc1N0cmluZywgJFBvcnROdW1iZXJTdHJpbmcsICRCaW5kaW5nLkhvc3ROYW1lIC1qb2luICc6JwogICAgICAgICAgICAgICAgICAgICAgICAkT3V0cHV0T2JqZWN0LkFkZCgnYmluZGluZ0luZm9ybWF0aW9uJywgW1N0cmluZ10kQmluZGluZ0luZm9ybWF0aW9uKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAkT3V0cHV0T2JqZWN0LkFkZCgnYmluZGluZ0luZm9ybWF0aW9uJywgW1N0cmluZ10kQmluZGluZy5CaW5kaW5nSW5mb3JtYXRpb24pCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGlmIChbU3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkQmluZGluZy5CaW5kaW5nSW5mb3JtYXRpb24pKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgJEVycm9yTWVzc2FnZSA9ICRMb2NhbGl6ZWREYXRhLkVycm9yV2ViQmluZGluZ01pc3NpbmdCaW5kaW5nSW5mb3JtYXRpb24gLWYgJEJpbmRpbmcuUHJvdG9jb2wKICAgICAgICAgICAgICAgICAgICAgICAgTmV3LVRlcm1pbmF0aW5nRXJyb3IgLUVycm9ySWQgJ1dlYkJpbmRpbmdNaXNzaW5nQmluZGluZ0luZm9ybWF0aW9uJyAtRXJyb3JNZXNzYWdlICRFcnJvck1lc3NhZ2UgLUVycm9yQ2F0ZWdvcnkgJ0ludmFsaWRBcmd1bWVudCcKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE91dHB1dE9iamVjdC5BZGQoJ2JpbmRpbmdJbmZvcm1hdGlvbicsIFtTdHJpbmddJEJpbmRpbmcuQmluZGluZ0luZm9ybWF0aW9uKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAjIFNTTC1yZWxhdGVkIHByb3BlcnRpZXMKICAgICAgICAgICAgICAgIGlmICgkQmluZGluZy5Qcm90b2NvbCAtZXEgJ2h0dHBzJykKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpZiAoW1N0cmluZ106OklzTnVsbE9yRW1wdHkoJEJpbmRpbmcuQ2VydGlmaWNhdGVUaHVtYnByaW50KSkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICRFcnJvck1lc3NhZ2UgPSAkTG9jYWxpemVkRGF0YS5FcnJvcldlYkJpbmRpbmdNaXNzaW5nQ2VydGlmaWNhdGVUaHVtYnByaW50IC1mICRCaW5kaW5nLlByb3RvY29sCiAgICAgICAgICAgICAgICAgICAgICAgIE5ldy1UZXJtaW5hdGluZ0Vycm9yIC1FcnJvcklkICdXZWJCaW5kaW5nTWlzc2luZ0NlcnRpZmljYXRlVGh1bWJwcmludCcgLUVycm9yTWVzc2FnZSAkRXJyb3JNZXNzYWdlIC1FcnJvckNhdGVnb3J5ICdJbnZhbGlkQXJndW1lbnQnCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoW1N0cmluZ106OklzTnVsbE9yRW1wdHkoJEJpbmRpbmcuQ2VydGlmaWNhdGVTdG9yZU5hbWUpKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgJENlcnRpZmljYXRlU3RvcmVOYW1lID0gJ01ZJwogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICgkTG9jYWxpemVkRGF0YS5WZXJib3NlQ29udmVydFRvV2ViQmluZGluZ0RlZmF1bHRDZXJ0aWZpY2F0ZVN0b3JlTmFtZSAtZiAkQ2VydGlmaWNhdGVTdG9yZU5hbWUpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICRDZXJ0aWZpY2F0ZVN0b3JlTmFtZSA9ICRCaW5kaW5nLkNlcnRpZmljYXRlU3RvcmVOYW1lCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAkT3V0cHV0T2JqZWN0LkFkZCgnY2VydGlmaWNhdGVIYXNoJywgICAgICBbU3RyaW5nXSRCaW5kaW5nLkNlcnRpZmljYXRlVGh1bWJwcmludCkKICAgICAgICAgICAgICAgICAgICAkT3V0cHV0T2JqZWN0LkFkZCgnY2VydGlmaWNhdGVTdG9yZU5hbWUnLCBbU3RyaW5nXSRDZXJ0aWZpY2F0ZVN0b3JlTmFtZSkKCiAgICAgICAgICAgICAgICAgICAgaWYgKFtFbnZpcm9ubWVudF06Ok9TVmVyc2lvbi5WZXJzaW9uIC1nZSAnNi4yJykKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICRPdXRwdXRPYmplY3QuQWRkKCdzc2xGbGFncycsIFtJbnQ2NF0kQmluZGluZy5Tc2xGbGFncykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIyBJZ25vcmUgU1NMLXJlbGF0ZWQgcHJvcGVydGllcyBmb3Igbm9uLVNTTCBiaW5kaW5ncwogICAgICAgICAgICAgICAgICAgICRPdXRwdXRPYmplY3QuQWRkKCdjZXJ0aWZpY2F0ZUhhc2gnLCAgICAgIFtTdHJpbmddOjpFbXB0eSkKICAgICAgICAgICAgICAgICAgICAkT3V0cHV0T2JqZWN0LkFkZCgnY2VydGlmaWNhdGVTdG9yZU5hbWUnLCBbU3RyaW5nXTo6RW1wdHkpCgogICAgICAgICAgICAgICAgICAgIGlmIChbRW52aXJvbm1lbnRdOjpPU1ZlcnNpb24uVmVyc2lvbiAtZ2UgJzYuMicpCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAkT3V0cHV0T2JqZWN0LkFkZCgnc3NsRmxhZ3MnLCBbSW50NjRdMCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICA8IwogICAgICAgICAgICAgICAgICAgIFdlYkFkbWluaXN0cmF0aW9uIGNhbiB0aHJvdyB0aGUgZm9sbG93aW5nIGV4Y2VwdGlvbiBpZiB0aGVyZSBhcmUgbm9uLXN0YW5kYXJkIGJpbmRpbmdzIChzdWNoIGFzICduZXQudGNwJyk6CiAgICAgICAgICAgICAgICAgICAgJ1RoZSBkYXRhIGlzIGludmFsaWQuIChFeGNlcHRpb24gZnJvbSBIUkVTVUxUOiAweDgwMDcwMDBEKScKCiAgICAgICAgICAgICAgICAgICAgU3RlcHMgdG8gcmVwcm9kdWNlOgogICAgICAgICAgICAgICAgICAgIDEpIEFkZCAnbmV0LnRjcCcgYmluZGluZwogICAgICAgICAgICAgICAgICAgIDIpIEV4ZWN1dGUge0dldC1XZWJzaXRlIHwgRm9yRWFjaC1PYmplY3QgeyRfLmJpbmRpbmdzLkNvbGxlY3Rpb259IHwgU2VsZWN0LU9iamVjdCAqfQoKICAgICAgICAgICAgICAgICAgICBXb3JrYXJvdW5kIGlzIHRvIGNyZWF0ZSBhIG5ldyBjdXN0b20gb2JqZWN0IGFuZCB1c2UgZG90IG5vdGF0aW9uIHRvIGFjY2VzcyBiaW5kaW5nIHByb3BlcnRpZXMuCiAgICAgICAgICAgICAgICAjPgoKICAgICAgICAgICAgICAgICRPdXRwdXRPYmplY3QuQWRkKCdiaW5kaW5nSW5mb3JtYXRpb24nLCAgIFtTdHJpbmddJEJpbmRpbmcuYmluZGluZ0luZm9ybWF0aW9uKQogICAgICAgICAgICAgICAgJE91dHB1dE9iamVjdC5BZGQoJ2NlcnRpZmljYXRlSGFzaCcsICAgICAgW1N0cmluZ10kQmluZGluZy5jZXJ0aWZpY2F0ZUhhc2gpCiAgICAgICAgICAgICAgICAkT3V0cHV0T2JqZWN0LkFkZCgnY2VydGlmaWNhdGVTdG9yZU5hbWUnLCBbU3RyaW5nXSRCaW5kaW5nLmNlcnRpZmljYXRlU3RvcmVOYW1lKQoKICAgICAgICAgICAgICAgIGlmIChbRW52aXJvbm1lbnRdOjpPU1ZlcnNpb24uVmVyc2lvbiAtZ2UgJzYuMicpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgJE91dHB1dE9iamVjdC5BZGQoJ3NzbEZsYWdzJywgW0ludDY0XSRCaW5kaW5nLnNzbEZsYWdzKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBXcml0ZS1PdXRwdXQgLUlucHV0T2JqZWN0IChbUFNDdXN0b21PYmplY3RdJE91dHB1dE9iamVjdCkKICAgICAgICB9CiAgICB9Cn0KCmZ1bmN0aW9uIEZvcm1hdC1JUEFkZHJlc3NTdHJpbmcKewogICAgPCMKICAgIC5TWU5PUFNZUwogICAgICAgIEZvcm1hdHMgdGhlIGlucHV0IElQIGFkZHJlc3Mgc3RyaW5nIGZvciB1c2UgaW4gdGhlIGJpbmRpbmdJbmZvcm1hdGlvbiBhdHRyaWJ1dGUuCiAgICAjPgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFtPdXRwdXRUeXBlKFtTdHJpbmddKV0KICAgIHBhcmFtCiAgICAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldCiAgICAgICAgW0FsbG93RW1wdHlTdHJpbmcoKV0KICAgICAgICBbQWxsb3dOdWxsKCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkSW5wdXRTdHJpbmcKICAgICkKCiAgICBpZiAoW1N0cmluZ106OklzTnVsbE9yRW1wdHkoJElucHV0U3RyaW5nKSAtb3IgJElucHV0U3RyaW5nIC1lcSAnKicpCiAgICB7CiAgICAgICAgJE91dHB1dFN0cmluZyA9ICcqJwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIHRyeQogICAgICAgIHsKICAgICAgICAgICAgJElQQWRkcmVzcyA9IFtJUEFkZHJlc3NdOjpQYXJzZSgkSW5wdXRTdHJpbmcpCgogICAgICAgICAgICBzd2l0Y2ggKCRJUEFkZHJlc3MuQWRkcmVzc0ZhbWlseSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJ0ludGVyTmV0d29yaycKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAkT3V0cHV0U3RyaW5nID0gJElQQWRkcmVzcy5JUEFkZHJlc3NUb1N0cmluZwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJ0ludGVyTmV0d29ya1Y2JwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICRPdXRwdXRTdHJpbmcgPSAnW3swfV0nIC1mICRJUEFkZHJlc3MuSVBBZGRyZXNzVG9TdHJpbmcKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjYXRjaAogICAgICAgIHsKICAgICAgICAgICAgJEVycm9yTWVzc2FnZSA9ICRMb2NhbGl6ZWREYXRhLkVycm9yV2ViQmluZGluZ0ludmFsaWRJUEFkZHJlc3MgLWYgJElucHV0U3RyaW5nLCAkXy5FeGNlcHRpb24uTWVzc2FnZQogICAgICAgICAgICBOZXctVGVybWluYXRpbmdFcnJvciAtRXJyb3JJZCAnV2ViQmluZGluZ0ludmFsaWRJUEFkZHJlc3MnIC1FcnJvck1lc3NhZ2UgJEVycm9yTWVzc2FnZSAtRXJyb3JDYXRlZ29yeSAnSW52YWxpZEFyZ3VtZW50JwogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gJE91dHB1dFN0cmluZwp9CgpmdW5jdGlvbiBUZXN0LUJpbmRpbmdJbmZvCnsKICAgIDwjCiAgICAuU1lOT1BTWVMKICAgICAgICBWYWxpZGF0ZXMgdGhlIGRlc2lyZWQgYmluZGluZyBpbmZvcm1hdGlvbiAoaS5lLiBubyBkdXBsaWNhdGUgSVAgYWRkcmVzcywgcG9ydCwgYW5kIGhvc3QgbmFtZSBjb21iaW5hdGlvbnMpLgogICAgIz4KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBbT3V0cHV0VHlwZShbQm9vbGVhbl0pXQogICAgcGFyYW0KICAgICgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV0KICAgICAgICBbTWljcm9zb2Z0Lk1hbmFnZW1lbnQuSW5mcmFzdHJ1Y3R1cmUuQ2ltSW5zdGFuY2VbXV0KICAgICAgICAkQmluZGluZ0luZm8KICAgICkKCiAgICAkSXNWYWxpZCA9ICR0cnVlCgogICAgdHJ5CiAgICB7CiAgICAgICAgIyBOb3JtYWxpemUgdGhlIGlucHV0IChoZWxwZXIgZnVuY3Rpb25zIHdpbGwgcGVyZm9ybSBhZGRpdGlvbmFsIHZhbGlkYXRpb25zKQogICAgICAgICRCaW5kaW5ncyA9IEAoQ29udmVydFRvLVdlYkJpbmRpbmcgLUlucHV0T2JqZWN0ICRCaW5kaW5nSW5mbyB8IENvbnZlcnRUby1DaW1CaW5kaW5nKQogICAgICAgICRTdGFuZGFyZEJpbmRpbmdzID0gQCgkQmluZGluZ3MgfCBXaGVyZS1PYmplY3QgLUZpbHRlclNjcmlwdCB7JF8uUHJvdG9jb2wgLWluIEAoJ2h0dHAnLCAnaHR0cHMnKX0pCiAgICAgICAgJE5vblN0YW5kYXJkQmluZGluZ3MgPSBAKCRCaW5kaW5ncyB8IFdoZXJlLU9iamVjdCAtRmlsdGVyU2NyaXB0IHskXy5Qcm90b2NvbCAtbm90aW4gQCgnaHR0cCcsICdodHRwcycpfSkKCiAgICAgICAgaWYgKCRTdGFuZGFyZEJpbmRpbmdzLkNvdW50IC1uZSAwKQogICAgICAgIHsKICAgICAgICAgICAgIyBJUCBhZGRyZXNzLCBwb3J0LCBhbmQgaG9zdCBuYW1lIGNvbWJpbmF0aW9uIG11c3QgYmUgdW5pcXVlCiAgICAgICAgICAgIGlmICgoJFN0YW5kYXJkQmluZGluZ3MgfCBHcm91cC1PYmplY3QgLVByb3BlcnR5IElQQWRkcmVzcywgUG9ydCwgSG9zdE5hbWUpIHwgV2hlcmUtT2JqZWN0IC1GaWx0ZXJTY3JpcHQgeyRfLkNvdW50IC1uZSAxfSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJElzVmFsaWQgPSAkZmFsc2UKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgKCRMb2NhbGl6ZWREYXRhLlZlcmJvc2VUZXN0QmluZGluZ0luZm9TYW1lSVBBZGRyZXNzUG9ydEhvc3ROYW1lKQogICAgICAgICAgICB9CgogICAgICAgICAgICAjIEEgc2luZ2xlIHBvcnQgY2Fubm90IGJlIHNpbXVsdGFuZW91c2x5IHNwZWNpZmllZCBmb3IgYmluZGluZ3Mgd2l0aCBkaWZmZXJlbnQgcHJvdG9jb2xzCiAgICAgICAgICAgIGZvcmVhY2ggKCRHcm91cEJ5UG9ydCBpbiAoJFN0YW5kYXJkQmluZGluZ3MgfCBHcm91cC1PYmplY3QgLVByb3BlcnR5IFBvcnQpKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoKCRHcm91cEJ5UG9ydC5Hcm91cCB8IEdyb3VwLU9iamVjdCAtUHJvcGVydHkgUHJvdG9jb2wpLkxlbmd0aCAtbmUgMSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAkSXNWYWxpZCA9ICRmYWxzZQogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgKCRMb2NhbGl6ZWREYXRhLlZlcmJvc2VUZXN0QmluZGluZ0luZm9TYW1lUG9ydERpZmZlcmVudFByb3RvY29sKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICgkTm9uU3RhbmRhcmRCaW5kaW5ncy5Db3VudCAtbmUgMCkKICAgICAgICB7CiAgICAgICAgICAgIGlmICgoJE5vblN0YW5kYXJkQmluZGluZ3MgfCBHcm91cC1PYmplY3QgLVByb3BlcnR5IFByb3RvY29sLCBCaW5kaW5nSW5mb3JtYXRpb24pIHwgV2hlcmUtT2JqZWN0IC1GaWx0ZXJTY3JpcHQgeyRfLkNvdW50IC1uZSAxfSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJElzVmFsaWQgPSAkZmFsc2UKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgKCRMb2NhbGl6ZWREYXRhLlZlcmJvc2VUZXN0QmluZGluZ0luZm9TYW1lUHJvdG9jb2xCaW5kaW5nSW5mb3JtYXRpb24pCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBjYXRjaAogICAgewogICAgICAgICRJc1ZhbGlkID0gJGZhbHNlCiAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAoJExvY2FsaXplZERhdGEuVmVyYm9zZVRlc3RCaW5kaW5nSW5mb0ludmFsaWRDYXRjaCAtZiAkXy5FeGNlcHRpb24uTWVzc2FnZSkKICAgIH0KCiAgICByZXR1cm4gJElzVmFsaWQKfQoKZnVuY3Rpb24gVGVzdC1Qb3J0TnVtYmVyCnsKICAgIDwjCiAgICAuU1lOT1BTWVMKICAgICAgICBWYWxpZGF0ZXMgdGhhdCBhbiBpbnB1dCBzdHJpbmcgcmVwcmVzZW50cyBhIHZhbGlkIHBvcnQgbnVtYmVyLgogICAgICAgIFRoZSBwb3J0IG51bWJlciBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciBiZXR3ZWVuIDEgYW5kIDY1NTM1LgogICAgIz4KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBbT3V0cHV0VHlwZShbQm9vbGVhbl0pXQogICAgcGFyYW0KICAgICgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV0KICAgICAgICBbQWxsb3dFbXB0eVN0cmluZygpXQogICAgICAgIFtBbGxvd051bGwoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRJbnB1dFN0cmluZwogICAgKQoKICAgIHRyeQogICAgewogICAgICAgICRJc1ZhbGlkID0gW1VJbnQxNl0kSW5wdXRTdHJpbmcgLW5lIDAKICAgIH0KICAgIGNhdGNoCiAgICB7CiAgICAgICAgJElzVmFsaWQgPSAkZmFsc2UKICAgIH0KCiAgICByZXR1cm4gJElzVmFsaWQKfQoKZnVuY3Rpb24gVGVzdC1XZWJzaXRlQmluZGluZwp7CiAgICA8IwogICAgLlNZTk9QU0lTCiAgICAgICAgSGVscGVyIGZ1bmN0aW9uIHVzZWQgdG8gdmFsaWRhdGUgYW5kIGNvbXBhcmUgd2Vic2l0ZSBiaW5kaW5ncyBvZiBjdXJyZW50IHRvIGRlc2lyZWQuCiAgICAgICAgUmV0dXJucyBUcnVlIGlmIGJpbmRpbmdzIGRvIG5vdCBuZWVkIHRvIGJlIHVwZGF0ZWQuCiAgICAjPgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFtPdXRwdXRUeXBlKFtCb29sZWFuXSldCiAgICBwYXJhbQogICAgKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldCiAgICAgICAgW01pY3Jvc29mdC5NYW5hZ2VtZW50LkluZnJhc3RydWN0dXJlLkNpbUluc3RhbmNlW11dCiAgICAgICAgJEJpbmRpbmdJbmZvCiAgICApCgogICAgJEluRGVzaXJlZFN0YXRlID0gJHRydWUKCiAgICAjIEVuc3VyZSB0aGF0IGRlc2lyZWQgYmluZGluZyBpbmZvcm1hdGlvbiBpcyB2YWxpZCAoaS5lLiBubyBkdXBsaWNhdGUgSVAgYWRkcmVzcywgcG9ydCwgYW5kIGhvc3QgbmFtZSBjb21iaW5hdGlvbnMpLgogICAgaWYgKC1ub3QgKFRlc3QtQmluZGluZ0luZm8gLUJpbmRpbmdJbmZvICRCaW5kaW5nSW5mbykpCiAgICB7CiAgICAgICAgJEVycm9yTWVzc2FnZSA9ICRMb2NhbGl6ZWREYXRhLkVycm9yV2Vic2l0ZUJpbmRpbmdJbnB1dEludmFsaWRhdGlvbiAtZiAkTmFtZQogICAgICAgIE5ldy1UZXJtaW5hdGluZ0Vycm9yIC1FcnJvcklkICdXZWJzaXRlQmluZGluZ0lucHV0SW52YWxpZGF0aW9uJyAtRXJyb3JNZXNzYWdlICRFcnJvck1lc3NhZ2UgLUVycm9yQ2F0ZWdvcnkgJ0ludmFsaWRSZXN1bHQnCiAgICB9CgogICAgdHJ5CiAgICB7CiAgICAgICAgJFdlYnNpdGUgPSBHZXQtV2Vic2l0ZSB8IFdoZXJlLU9iamVjdCAtRmlsdGVyU2NyaXB0IHskXy5OYW1lIC1lcSAkTmFtZX0KCiAgICAgICAgIyBOb3JtYWxpemUgYmluZGluZyBvYmplY3RzIHRvIGVuc3VyZSB0aGV5IGhhdmUgdGhlIHNhbWUgcmVwcmVzZW50YXRpb24KICAgICAgICAkQ3VycmVudEJpbmRpbmdzID0gQChDb252ZXJ0VG8tV2ViQmluZGluZyAtSW5wdXRPYmplY3QgJFdlYnNpdGUuYmluZGluZ3MuQ29sbGVjdGlvbiAtVmVyYm9zZTokZmFsc2UpCiAgICAgICAgJERlc2lyZWRCaW5kaW5ncyA9IEAoQ29udmVydFRvLVdlYkJpbmRpbmcgLUlucHV0T2JqZWN0ICRCaW5kaW5nSW5mbyAtVmVyYm9zZTokZmFsc2UpCgogICAgICAgICRQcm9wZXJ0aWVzVG9Db21wYXJlID0gJ3Byb3RvY29sJywgJ2JpbmRpbmdJbmZvcm1hdGlvbicsICdjZXJ0aWZpY2F0ZUhhc2gnLCAnY2VydGlmaWNhdGVTdG9yZU5hbWUnCgogICAgICAgICMgVGhlIHNzbEZsYWdzIGF0dHJpYnV0ZSB3YXMgYWRkZWQgaW4gSUlTIDguMC4KICAgICAgICAjIFRoaXMgY2hlY2sgaXMgbmVlZGVkIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIFdpbmRvd3MgU2VydmVyIDIwMDggUjIuCiAgICAgICAgaWYgKFtFbnZpcm9ubWVudF06Ok9TVmVyc2lvbi5WZXJzaW9uIC1nZSAnNi4yJykKICAgICAgICB7CiAgICAgICAgICAgICRQcm9wZXJ0aWVzVG9Db21wYXJlICs9ICdzc2xGbGFncycKICAgICAgICB9CgogICAgICAgIGlmIChDb21wYXJlLU9iamVjdCAtUmVmZXJlbmNlT2JqZWN0ICRDdXJyZW50QmluZGluZ3MgLURpZmZlcmVuY2VPYmplY3QgJERlc2lyZWRCaW5kaW5ncyAtUHJvcGVydHkgJFByb3BlcnRpZXNUb0NvbXBhcmUpCiAgICAgICAgewogICAgICAgICAgICAkSW5EZXNpcmVkU3RhdGUgPSAkZmFsc2UKICAgICAgICB9CiAgICB9CiAgICBjYXRjaAogICAgewogICAgICAgICRFcnJvck1lc3NhZ2UgPSAkTG9jYWxpemVkRGF0YS5FcnJvcldlYnNpdGVDb21wYXJlRmFpbHVyZSAtZiAkTmFtZSwgJF8uRXhjZXB0aW9uLk1lc3NhZ2UKICAgICAgICBOZXctVGVybWluYXRpbmdFcnJvciAtRXJyb3JJZCAnV2Vic2l0ZUNvbXBhcmVGYWlsdXJlJyAtRXJyb3JNZXNzYWdlICRFcnJvck1lc3NhZ2UgLUVycm9yQ2F0ZWdvcnkgJ0ludmFsaWRSZXN1bHQnCiAgICB9CgogICAgcmV0dXJuICRJbkRlc2lyZWRTdGF0ZQp9CgpmdW5jdGlvbiBVcGRhdGUtRGVmYXVsdFBhZ2UKewogICAgPCMKICAgIC5TWU5PUFNJUwogICAgICAgIEhlbHBlciBmdW5jdGlvbiB1c2VkIHRvIHVwZGF0ZSBkZWZhdWx0IHBhZ2VzIG9mIHdlYnNpdGUuCiAgICAjPgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtCiAgICAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICREZWZhdWx0UGFnZQogICAgKQoKICAgICRBbGxEZWZhdWx0UGFnZXMgPSBAKAogICAgICAgIEdldC1XZWJDb25maWd1cmF0aW9uIC1GaWx0ZXIgJy8vZGVmYXVsdERvY3VtZW50L2ZpbGVzLyonIC1QU1BhdGggIklJUzpcU2l0ZXNcJE5hbWUiIHwKICAgICAgICBGb3JFYWNoLU9iamVjdCAtUHJvY2VzcyB7V3JpdGUtT3V0cHV0IC1JbnB1dE9iamVjdCAkXy52YWx1ZX0KICAgICkKCiAgICBmb3JlYWNoICgkUGFnZSBpbiAkRGVmYXVsdFBhZ2UpCiAgICB7CiAgICAgICAgaWYgKCRBbGxEZWZhdWx0UGFnZXMgLWlub3Rjb250YWlucyAkUGFnZSkKICAgICAgICB7CiAgICAgICAgICAgIEFkZC1XZWJDb25maWd1cmF0aW9uIC1GaWx0ZXIgJy8vZGVmYXVsdERvY3VtZW50L2ZpbGVzJyAtUFNQYXRoICJJSVM6XFNpdGVzXCROYW1lIiAtVmFsdWUgQHt2YWx1ZSA9ICRQYWdlfQogICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICgkTG9jYWxpemVkRGF0YS5WZXJib3NlVXBkYXRlRGVmYXVsdFBhZ2VVcGRhdGVkIC1mICROYW1lLCAkUGFnZSkKICAgICAgICB9CiAgICB9Cn0KCmZ1bmN0aW9uIFVwZGF0ZS1XZWJzaXRlQmluZGluZwp7CiAgICA8IwogICAgLlNZTk9QU0lTCiAgICAgICAgVXBkYXRlcyB3ZWJzaXRlIGJpbmRpbmdzLgogICAgIz4KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbQogICAgKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkZmFsc2UpXQogICAgICAgIFtNaWNyb3NvZnQuTWFuYWdlbWVudC5JbmZyYXN0cnVjdHVyZS5DaW1JbnN0YW5jZVtdXQogICAgICAgICRCaW5kaW5nSW5mbwogICAgKQoKICAgICMgVXNlIEdldC1XZWJDb25maWd1cmF0aW9uIGluc3RlYWQgb2YgR2V0LVdlYnNpdGUgdG8gcmV0cmlldmUgWFBhdGggb2YgdGhlIHRhcmdldCB3ZWJzaXRlLgogICAgIyBYUGF0aCAtRmlsdGVyIGlzIGNhc2Utc2Vuc2l0aXZlLiBVc2UgV2hlcmUtT2JqZWN0IHRvIGdldCB0aGUgdGFyZ2V0IHdlYnNpdGUgYnkgbmFtZS4KICAgICRXZWJzaXRlID0gR2V0LVdlYkNvbmZpZ3VyYXRpb24gLUZpbHRlciAnL3N5c3RlbS5hcHBsaWNhdGlvbkhvc3Qvc2l0ZXMvc2l0ZScgfAogICAgICAgIFdoZXJlLU9iamVjdCAtRmlsdGVyU2NyaXB0IHskXy5OYW1lIC1lcSAkTmFtZX0KCiAgICBpZiAoLW5vdCAkV2Vic2l0ZSkKICAgIHsKICAgICAgICAkRXJyb3JNZXNzYWdlID0gJExvY2FsaXplZERhdGEuRXJyb3JXZWJzaXRlTm90Rm91bmQgLWYgJE5hbWUKICAgICAgICBOZXctVGVybWluYXRpbmdFcnJvciAtRXJyb3JJZCAnV2Vic2l0ZU5vdEZvdW5kJyAtRXJyb3JNZXNzYWdlICRFcnJvck1lc3NhZ2UgLUVycm9yQ2F0ZWdvcnkgJ0ludmFsaWRSZXN1bHQnCiAgICB9CgogICAgQ29udmVydFRvLVdlYkJpbmRpbmcgLUlucHV0T2JqZWN0ICRCaW5kaW5nSW5mbyAtRXJyb3JBY3Rpb24gU3RvcCB8CiAgICBGb3JFYWNoLU9iamVjdCAtQmVnaW4gewoKICAgICAgICBDbGVhci1XZWJDb25maWd1cmF0aW9uIC1GaWx0ZXIgIiQoJFdlYnNpdGUuSXRlbVhQYXRoKS9iaW5kaW5ncyIgLUZvcmNlIC1FcnJvckFjdGlvbiBTdG9wCgogICAgfSAtUHJvY2VzcyB7CgogICAgICAgICRQcm9wZXJ0aWVzID0gJF8KCiAgICAgICAgdHJ5CiAgICAgICAgewogICAgICAgICAgICBBZGQtV2ViQ29uZmlndXJhdGlvbiAtRmlsdGVyICIkKCRXZWJzaXRlLkl0ZW1YUGF0aCkvYmluZGluZ3MiIC1WYWx1ZSBAewogICAgICAgICAgICAgICAgcHJvdG9jb2wgPSAkUHJvcGVydGllcy5wcm90b2NvbAogICAgICAgICAgICAgICAgYmluZGluZ0luZm9ybWF0aW9uID0gJFByb3BlcnRpZXMuYmluZGluZ0luZm9ybWF0aW9uCiAgICAgICAgICAgIH0gLUZvcmNlIC1FcnJvckFjdGlvbiBTdG9wCiAgICAgICAgfQogICAgICAgIGNhdGNoCiAgICAgICAgewogICAgICAgICAgICAkRXJyb3JNZXNzYWdlID0gJExvY2FsaXplZERhdGEuRXJyb3JXZWJzaXRlQmluZGluZ1VwZGF0ZUZhaWx1cmUgLWYgJE5hbWUsICRfLkV4Y2VwdGlvbi5NZXNzYWdlCiAgICAgICAgICAgIE5ldy1UZXJtaW5hdGluZ0Vycm9yIC1FcnJvcklkICdXZWJzaXRlQmluZGluZ1VwZGF0ZUZhaWx1cmUnIC1FcnJvck1lc3NhZ2UgJEVycm9yTWVzc2FnZSAtRXJyb3JDYXRlZ29yeSAnSW52YWxpZFJlc3VsdCcKICAgICAgICB9CgogICAgICAgIGlmICgkUHJvcGVydGllcy5wcm90b2NvbCAtZXEgJ2h0dHBzJykKICAgICAgICB7CiAgICAgICAgICAgIGlmIChbRW52aXJvbm1lbnRdOjpPU1ZlcnNpb24uVmVyc2lvbiAtZ2UgJzYuMicpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRyeQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIFNldC1XZWJDb25maWd1cmF0aW9uUHJvcGVydHkgLUZpbHRlciAiJCgkV2Vic2l0ZS5JdGVtWFBhdGgpL2JpbmRpbmdzL2JpbmRpbmdbbGFzdCgpXSIgLU5hbWUgc3NsRmxhZ3MgLVZhbHVlICRQcm9wZXJ0aWVzLnNzbEZsYWdzIC1Gb3JjZSAtRXJyb3JBY3Rpb24gU3RvcAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2F0Y2gKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAkRXJyb3JNZXNzYWdlID0gJExvY2FsaXplZERhdGEuRXJyb3JXZWJzaXRlQmluZGluZ1VwZGF0ZUZhaWx1cmUgLWYgJE5hbWUsICRfLkV4Y2VwdGlvbi5NZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgTmV3LVRlcm1pbmF0aW5nRXJyb3IgLUVycm9ySWQgJ1dlYnNpdGVCaW5kaW5nVXBkYXRlRmFpbHVyZScgLUVycm9yTWVzc2FnZSAkRXJyb3JNZXNzYWdlIC1FcnJvckNhdGVnb3J5ICdJbnZhbGlkUmVzdWx0JwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICB0cnkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJEJpbmRpbmcgPSBHZXQtV2ViQ29uZmlndXJhdGlvbiAtRmlsdGVyICIkKCRXZWJzaXRlLkl0ZW1YUGF0aCkvYmluZGluZ3MvYmluZGluZ1tsYXN0KCldIiAtRXJyb3JBY3Rpb24gU3RvcAogICAgICAgICAgICAgICAgJEJpbmRpbmcuQWRkU3NsQ2VydGlmaWNhdGUoJFByb3BlcnRpZXMuY2VydGlmaWNhdGVIYXNoLCAkUHJvcGVydGllcy5jZXJ0aWZpY2F0ZVN0b3JlTmFtZSkKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAkRXJyb3JNZXNzYWdlID0gJExvY2FsaXplZERhdGEuRXJyb3JXZWJCaW5kaW5nQ2VydGlmaWNhdGUgLWYgJFByb3BlcnRpZXMuY2VydGlmaWNhdGVIYXNoLCAkXy5FeGNlcHRpb24uTWVzc2FnZQogICAgICAgICAgICAgICAgTmV3LVRlcm1pbmF0aW5nRXJyb3IgLUVycm9ySWQgJ1dlYkJpbmRpbmdDZXJ0aWZpY2F0ZScgLUVycm9yTWVzc2FnZSAkRXJyb3JNZXNzYWdlIC1FcnJvckNhdGVnb3J5ICdJbnZhbGlkT3BlcmF0aW9uJwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgIH0KCn0KCiNlbmRyZWdpb24K
