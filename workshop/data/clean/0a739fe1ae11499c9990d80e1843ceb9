machinecheck.ps1,a50586a498f98892af9da99023f706fc,Scan result is 1. IsMalware: 0,##################################################
# MACHINE CHECK WRITTEN BY NOOPZEN  - 2010
##################################################

param ($servername, $Env, $MachineClass, $Feature, $Release, $Component, $Program, $Winlist, $ProgList, $Path, $Debug, $nohtml)

$GLOBAL:RootPath = $Path
$GLOBAL:target = $servername
$GLOBAL:HTML = 1
#$RootPath = "E:\Dev_Drop\josh\scripts\evt\"
$date = get-date
$tmp = $date.GetDateTimeFormats()
$datestr = $tmp[1]
#"Date is $datestr"
$date_time = $tmp[65]
#"Date_time  is $date_time"
$year = (get-date).ToString('yyyy')
#$year
$DatePrefix = (get-date).ToString('yyyyMMdd')
#$DatePrefix
$GLOBAL:Env = $Env
#
if(($myInvocation.BoundParameters).count -eq 0){
write-host -f red "`nNO ARGUMENTS SUPPLIED`n"
write-host -f cyan "To run in automated mode, supply the following arguments:"  '.\machinecheck.ps1 -Env "<ENVIRONMENT>" -MachineClass "<MACHINE CLASS>" -Feature "<FEATURE>" -Release "<RELEASE>" -servername "<SERVERNAME>"' 
}

$GLOBAL:HTML = "1"
#if any of these, do not write HTML
if($ProgList.length -gt 0){ $GLOBAL:HTML = "1"}
if($Winlist.length -gt 0){ $GLOBAL:HTML = "1"}
if($Program.length -gt 0){ $GLOBAL:HTML = "1"}
if($Component.length -gt 0){ $GLOBAL:HTML = "1"}


#if any of these, do not write HTML
if($ProgList.length -gt 0){ $GLOBAL:HTML = "1"}
if($Winlist.length -gt 0){ $GLOBAL:HTML = "1"}
if($Program.length -gt 0){ $GLOBAL:HTML = "1"}
if($Component.length -gt 0){ $GLOBAL:HTML = "1"}


if(($GLOBAL:HTML).length -gt 0){}
else{
$report_path = "" + $GLOBAL:RootPath + "\htm_report_" + $Env + "_" + $DatePrefix +"\" 
#write-host $report_path 

if(!(Test-Path $report_path)){mkdir $report_path}


$report_file = $report_path + $servername + '_' + $MachineClass + "_" + $DatePrefix  + ".htm"
#write-host $report_file

}

$cmdline = "`n" + '.\machinecheck_html.ps1 -Env "' + $Env + '" -MachineClass "' + $MachineClass + '" -Feature "' + $Feature + '" -Release "' + $Release + '" -servername "' + $servername +'"' + "`n"
#write-host $cmdline
#write-host $MachineClass  
  
$GLOBAL:FAIL = 0
$GLOBAL:WARN = 0

##################################################
# Get-Fileversions: takes networkpath  as argument.
# Checks to if a file is present
# Pass is file is present, fail if not. 
##################################################
function Get-FileVersion($location)
{
    get-command $location | foreach {$_.FileVersionInfo} | foreach{$_.FileVersion}
}

###############################################################################
#ping-ip 
################################################################################
function ping-ip {  
    param( $ip )  
    trap {$false; continue} 
    $timeout = 2000  
    $object = New-Object system.Net.NetworkInformation.Ping 
    (($object.Send($ip, $timeout)).Status -eq 'Success')
 }

####################
###SQL  FUNCTIONS
####################
function exec-query( $sql,$parameters=@{},$conn,$timeout=30,[switch]$help){
 if ($help){
 $msg = @"
Execute a sql statement.  Parameters are allowed.
Input parameters should be a dictionary of parameter names and values.
Return value will usually be a list of datarows.
"@
 Write-Host $msg
 return
 }
 $cmd=new-object system.Data.SqlClient.SqlCommand($sql,$conn)
 $cmd.CommandTimeout=$timeout
 foreach($p in $parameters.Keys){
 [Void] $cmd.Parameters.AddWithValue("@$p",$parameters[$p])
 }
 $ds=New-Object system.Data.DataSet
 $da=New-Object system.Data.SqlClient.SqlDataAdapter($cmd)
 $da.fill($ds) | Out-Null

 return $ds
}


function query_sp2 {
	param( $queryp ) 
    $conn=new-object data.sqlclient.sqlconnection "Server=SQLSERVER_IP;Integrated Security=True;Database=bscmt"
    $temp = exec-query $queryp -conn $conn
    $outdb = $temp
    #$outdb.tables[0] | %{$item = $_.BSMT_ITEM; $test = $_.BSMT_TEST; write-host "$item ; $test"}
    return $outdb
        
}

function query_invesntory {
	param( $queryp ) 
    $conn=new-object data.sqlclient.sqlconnection "Server=SQLSERVER_IP;Integrated Security=True;Database=inv_hd"
    $temp = exec-query $queryp -conn $conn
    $outdb = $temp
    #$outdb.tables[0] | %{$item = $_.BSMT_ITEM; $test = $_.BSMT_TEST; write-host "$item ; $test"}
    return $outdb
        
}


function query_sql_server {
	param( $sqlserver, $sqldb, $queryp ) 
	$connstring = '"Server=' + $sqlserver + ';Integrated Security=True;Database=' + $sqldb + '"'
    $conn=new-object data.sqlclient.sqlconnection $connstring
    $temp = exec-query $queryp -conn $conn
    $outdb = $temp
    #$outdb.tables[0] | %{$item = $_.BSMT_ITEM; $test = $_.BSMT_TEST; write-host "$item ; $test"}
    return $outdb
        
}



####################
###END SQL  FUNCTIONS
####################


#$msmq = (Get-RegKey $servername "SOFTWARE\Microsoft\MSMQ\Parameters" "CurrentBuild" "MSMQ")
function Get-RegKeyOrig
{
    param( $key, $regstring, $feat, $expected_value)
    #$regstring = "CurrentBuild"
	#$key="Software\Microsoft\MSMQ\Parameters";
    $keytype=[Microsoft.Win32.RegistryHive]::LocalMachine;
    $remotebase=[Microsoft.Win32.Registrykey]::Openremotebasekey($keytype,$GLOBAL:target);
    #$remotebase
    $regkey=$remotebase.OpenSubkey($key);
	#$regkey
    $regvalue = $regkey.GetValue($regstring) 
	if( $regvalue -eq $expected_value){
    #$ret = "$feat `tPASS: Version: $regvalue"
    #$ret = "$feat : $regvalue"	
    write-Host -f green "$ret :`tPASS"
	return("0")
	}
	else {$ret = "$feat : $regvalue :`tFAIL"
	write-Host -f red $ret 	
	return("1")
	}
}



#$msmq = (Get-RegKey $servername "SOFTWARE\Microsoft\MSMQ\Parameters" "CurrentBuild" "MSMQ")
#GET_REGKEY HKLocalMachine
function Get-RegKey
{
    param($key, $regstring, $expected_value, $feat)
    #$regstring = "CurrentBuild"
	#$key="Software\Microsoft\MSMQ\Parameters";
    $keytype=[Microsoft.Win32.RegistryHive]::LocalMachine;
    $remotebase=[Microsoft.Win32.Registrykey]::Openremotebasekey($keytype,$GLOBAL:target);
    #$remotebase
    $regkey=$remotebase.OpenSubkey($key);
	#$regkey
    $regvalue = $regkey.GetValue($regstring) 
	if( $regvalue -eq $expected_value){
    $ret = "$feat `tPASS: Version: $regvalue"
    $ret = "$feat : $regvalue"	
    #write-green "$ret :`tPASS"
    return("0")
	}
	else {$ret = "$feat : $regvalue :`tFAIL"
	#write-red $ret 	
    return("1")
	}
}




function Get-IpakVersion($regstring)
{
	$key="SOFTWARE\Microsoft\msnipak";
    $keytype=[Microsoft.Win32.RegistryHive]::LocalMachine;
    $remotebase=[Microsoft.Win32.Registrykey]::Openremotebasekey($keytype,$GLOBAL:target);
    $regkey=$remotebase.OpenSubkey($key);
	#write-host $regkey.getvalue($regstring)
    return ( $regkey.GetValue($regstring));
}


function ORIGGet-IpakVersion($target, $regstring)
{
	$key="SOFTWARE\Microsoft\msnipak";
    $keytype=[Microsoft.Win32.RegistryHive]::LocalMachine;
    $remotebase=[Microsoft.Win32.Registrykey]::Openremotebasekey($keytype,$target);
    $regkey=$remotebase.OpenSubkey($key);
    return ( $regkey.GetValue($regstring));
}


#Get-HotFix [[-Id] <string[]>] [-ComputerName <string[]>]

function Get-AppFab
{
    if(Get-HotFix -Id "KB970622" -Computername $GLOBAL:target) {
		#write-Host -f green "AppFabric:`tPASS"; 
		return("0")
		} 
	else {
		#write-Host -f green "AppFabric install:`tFAIL"; 
		return("1")
		}

}










function Get-powershellv2
{
	$regstring = "PowerShellVersion"
	
	$key="SOFTWARE\Microsoft\PowerShell\1\PowerShellEngine";
    $keytype=[Microsoft.Win32.RegistryHive]::LocalMachine;
    $remotebase=[Microsoft.Win32.Registrykey]::Openremotebasekey($keytype,$GLOBAL:target);
    $regkey=$remotebase.OpenSubkey($key);
	$regvalue = $regkey.GetValue($regstring) 
	if( $regvalue -eq "2.0"){
	#write-green "Powershell V2.0: $regvalue `:tPASS"
    return("0")
	}
	else {
	#write-red "Powershell V2.0:  $regvalue `t:FAIL"
    return("1")
	}
}

function Get-InstalledPrograms {
	$programs_installed = @{};
	#$win32_product = @(get-wmiobject -class 'Win32_Product' -computer $server);
	$win32_product = @(get-wmiobject -computer $GLOBAL:target -query "select Name, Version from Win32_Product");
	
	foreach ($product in $win32_product) {
		$name = $product.Name;
		$version = $product.Version;
		if ($name -ne $null) {
			$programs_installed.$name = $version;
			write-Host -f gray "$name $version";
		}
	}
	return $programs_installed;
}

function Get-InstalledProgs3 {
	$programs_installed = @();
	#$win32_product = @(get-wmiobject -class 'Win32_Product' -computer $server);
	$win32_product = @(get-wmiobject  -computer $GLOBAL:target -query "select Name, Version from Win32_Product");
	
	foreach ($product in $win32_product) {
		$name = $product.Name;
		$version = $product.Version;
		if ($name -ne $null) {
			$programs_installed += "$name $version";
			#write-Host -f gray "$name $version";
		}
	}
	return ($programs_installed | sort)
}


function Get-InstalledProgs {
	$programs_installed = @();
	#$win32_product = @(get-wmiobject -class 'Win32_Product' -computer $server);
	#$win32_product = @(get-wmiobject  -computer $GLOBAL:target -query "select Name, Version from Win32_Product");
	#$win32_product = invoke-command -computername $GLOBAL:target -scriptblock{@(get-wmiobject -query "select Name, Version from Win32_Product");}
	
	
	$programs_installed = invoke-command -computername $GLOBAL:target -scriptblock{$out = @{}
	$Keys = Get-ChildItem HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall
	$Items = $keys | foreach-object {Get-ItemProperty $_.PsPath}
	$items | %{$major = $_.VersionMajor; $minor = $_.versionminor; $version = $_.version; $ver =  "$major" + "." +  "$minor" + "." +  "$version"; if($_.DisplayName){$out[$_.DisplayName] = "$ver"} else {};   }
	$keys = gci HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall
	$items = $keys | foreach-object {Get-ItemProperty $_.PsPath}
	$items | %{$major = $_.VersionMajor; $minor = $_.versionminor; $version = $_.version; $ver =  "$major" + "." +  "$minor" + "." +  "$version"; if($_.DisplayName){$out[$_.DisplayName] = "$ver"} else {};  }
	$ret = @()
	foreach ($key in $out.Keys){$ret += ("$key "  + $out[$key])}
	$ret
	}
	
	return ($programs_installed | sort)
}



function Get-Program($prog, $ver) {
    $win32_product = $GLOBAL:installed_progs -match "$prog.*$ver.*" 
	#$win32_product = @(get-wmiobject  -computer $GLOBAL:target -query "select Name, Version from Win32_Product where Name like '`%$prog`%'");
	if(!$win32_product){
		#write-red "$prog NOT INSTALLED:`tFAIL ";
		$return = 1 }
	else {
        				#write-green "$prog $ver INSTALLED :`tPASS";
						$return = 0
						}
 
		return($return)
        }




function Get-InstalledComponents {
	$components_installed	= @();

	$reg_paths	= @('SOFTWARE\Microsoft\Windows\CurrentVersion'`
			+ '\Setup\Oc Manager\Subcomponents');
	$reg_paths	+= @('SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion'`
			+ '\Setup\Oc Manager\Subcomponents');

	$hkey	= 'LocalMachine';
	$reg	= [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($hkey, $GLOBAL:target);
	foreach ($reg_path in $reg_paths) {
		$reg_key	= $reg.OpenSubKey($reg_path);
		if ($reg_key -eq $null) {
			continue;
		}
		$names	= $reg_key.GetValueNames();

		foreach ($name in $names) {
			$value	= $reg_key.GetValue($name);
			if ($value -gt 0) {
				$components_installed += @($name);
			}
		}
		$reg_key.close();
	}
	$reg.close();

	if ($components_installed.count -lt 1) {
		trap { ;
		continue } $features = @(get-wmiobject -class 'Win32_ServerFeature' `
					-computer $target -erroraction 'Stop');

		foreach ($feature in $features) {
			$components_installed += @($feature.name);
		}
	}		

	return ($components_installed | sort);
}

#`


function Get-FileVersion($location)
{
    get-command $location | foreach {$_.FileVersionInfo} | foreach{$_.FileVersion}
}



function CompareVersions($serverIpakVersion, $officialIpakVersion)
{
	$officialIpakVersion = $officialIpakVersion -replace ", ","."
	#write-host "Comparing $serverIpakVersion with $officialIpakVersion";
	if($serverIpakVersion.contains("Incomplete"))
		{
			write-red "$serverIpakVersion `tFAIL" ;
            return("1")
		}
	elseif(!($serverIpakVersion.contains($officialIpakVersion)))
		{
			write-yellow "$serverIpakVersion is out of date"  ;
            return("0")
		}

	else
		{
			#write-green  "$serverIpakVersion :`tPASS" ;
            return("0")
		}
}


function check-sql{
#Check to see if SQL is installed
$sqlIpakVersion = Get-IpakVersion "SQL";
if($sqlIpakVersion -ne $null){
	CompareIpakVersions $sqlIpakVersion $officialIpakVersions;
	}
else{
	write-red "SQL NOT INSTALLED: `tFAIL" ;
	return("1")
	}
}

function check-iis{
#Check to see if there is IIS installed
$iisIpakVersion = Get-IpakVersion "IIS";
if($iisIpakVersion -ne $null){
	CompareIpakVersions $iisIpakVersion $officialIpakVersions;
	}
else{
	write-red "IIS NOT INSTALLED:  `tFAIL" ;
	return("1")
	}

}

function check-win2k8R2{
#Check to see if there is IIS installed
$winIpakVersion = Get-IpakVersion "Windows";
#write-host $winIpakVersion
    if($winIpakVersion -ne $null){
        if($winIpakVersion.contains("2008R2")){CompareIpakVersions $winIpakVersion $officialIpakVersions;}
        else{
			write-red "Not running 2k8R2.  Running $winIpakVersion`tFAIL" ;
			return("1")
			}
        }
    else{
        write-red "OS  $winIpakVersion $GLOBAL:target `tFAIL" ;
        return("1")
        }
}

function check-win2k8SP1{
#Check to see if there is IIS installed
$winIpakVersion = Get-IpakVersion "Windows";
#write-host $winIpakVersion
    if($winIpakVersion -ne $null){
        if($winIpakVersion.contains("2008SP1")){CompareIpakVersions $winIpakVersion $officialIpakVersions;}
        else{
			write-red "Not running WIN2k8SP1.  Running $winIpakVersion`tFAIL" ;
			return("1")
			}
        }
    else{
        write-red "OS $winIpakVersion `tFAIL" ;
        return("1")
        }

}

function check-win2k8SP2{
#Check to see if there is IIS installed
$winIpakVersion = Get-IpakVersion "Windows";
#write-host $winIpakVersion
    if($winIpakVersion -ne $null){
        if($winIpakVersion.contains("2008SP2")){CompareIpakVersions $winIpakVersion $officialIpakVersions;}
        else{
		write-red "Not running WIN2k8SP2.  Running $winIpakVersion`tFAIL" ;
		return("1")}
        }
    else{
        write-red "OS $winIpakVersion`tFAIL" ;
        return("1")
        }

}

function check-file($file_path, $file_name){
    $full_path = $file_path + "\" + $file_name
    if(Test-Path $full_path){
        #write-green  "$full_path: `nPASS" ;
		return("0")
        }
    else{
        #write-red "$full_path : `tFAIL" ;
		return("1")
        }
}


function check_iisconfig($value){
	$path = "//$GLOBAL:target/C$/Windows/System32/inetsrv/config/applicationHost.config"
	if(Test-Path $path){
		$iisconfig = gc $path
		if($iisconfig -like "*$value*"){
        #write-green  "$value :`tPASS" ;
		return("0")
        }
    else{
        #write-red "$value :`tFAIL" ;
		return("1")
        }
	}
}

function check_ie8{
	$path = "//" + $GLOBAL:target + "/c$/Program Files (x86)/Internet Explorer/"
	if(Test-Path $path){
		$ietest = gci "$path/iexplore.exe"
		#write-host $ietest.VersionInfo
		if($ietest.VersionInfo -like "*8.0*"){
        	#write-green  "IE8 $ietest :`tPASS" ;
			return("0")
        	}
    	else{
        	#write-red "IE8 $ietest :`tFAIL" ;
			return("1")
        	}
	}
    	else{
        	#write-red "IE8 PATH NOT FOUND $PATH :`tFAIL" ;
			return("1")
        	}

}


function Get-InstalledPrograms {
	$programs_installed = @{};
	#$win32_product = @(get-wmiobject -class 'Win32_Product' -computer $GLOBAL:target);
	$win32_product = @(get-wmiobject -computer $GLOBAL:target -query "select Name, Version from Win32_Product");
	
	foreach ($product in $win32_product) {
		$name = $product.Name;
		$version = $product.Version;
		if ($name -ne $null) {
			$programs_installed.$name = $version;
			write-Host -f gray "$name : Version: $version";
		}
	}
	return $programs_installed;
}


function Get-InstalledComponents {
	$components_installed	= @();

	$reg_paths	= @('SOFTWARE\Microsoft\Windows\CurrentVersion'`
			+ '\Setup\Oc Manager\Subcomponents');
	$reg_paths	+= @('SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion'`
			+ '\Setup\Oc Manager\Subcomponents');

	$hkey	= 'LocalMachine';
	$reg	= [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($hkey, $GLOBAL:target);
	foreach ($reg_path in $reg_paths) {
		$reg_key	= $reg.OpenSubKey($reg_path);
		if ($reg_key -eq $null) {
			continue;
		}
		$names	= $reg_key.GetValueNames();

		foreach ($name in $names) {
			$value	= $reg_key.GetValue($name);
			if ($value -gt 0) {
				$components_installed += @($name);
			}
		}
		$reg_key.close();
	}
	$reg.close();

	if ($components_installed.count -lt 1) {
		trap { ;
		continue } $features = @(get-wmiobject -class 'Win32_ServerFeature' `
					-computer $GLOBAL:target -erroraction 'Stop');

		foreach ($feature in $features) {
			$components_installed += @($feature.name);
		}
	}		

	return ($components_installed | sort);
}

function get-webservice-status{
$wwwservice = get-service w3svc -computername $GLOBAL:target
$status = $wwwservice.status
 if ($status -eq "running"){
	return("0")
        }
    else{
	return("1")
        }
}


function get-service-status($service){
	$status  = (get-service $service -computername $GLOBAL:target).status
 	if ($status -eq "running"){
		return("0")
        	}
    	else{
		return("1")
        	}
}



function do_nothing{
return(0)
}



function check-installed-windows-features($component){
    if ($GLOBAL:installed_components -eq $component){
		
        #write-green  "$component :`tPASS" ;return("0")
	return("0")
        }
    else{
        #write-red "$component :`tFAIL" ;return("1")
	return("1")
        }
} 




function eval_response_code{
param($testitem, $response)
 if($response -eq "0"){
	write-green "$testitem : `tPASS"
	#return($response)
 }
 else{
  write-red "$testitem : `tFAIL"
  #return($response)
  }

}







function test-silverlight-crossdomain{
$path = '\\' + $GLOBAL:target + '\E$\Content\IisDrop\clientaccesspolicy.xml'
$result = Test-Path $path
#write-host " $result $path "
return($result)
}

function send-mail {
	param(
	    [string[]] $to = $(throw "Please specify the destination mail address"),
	    [string] $subject = "<No Subject>",
	    [string] $body = $(throw "Please specify the message content"),
	    [string] $smtpHost = $(throw "Please specify a mail server."),
	    [string] $from = "$($env:UserName)@example.com"
	  )
	
	## Create the mail message
	$email = New-Object System.Net.Mail.MailMessage 
	$email.isBodyhtml = $true 
	
	
	
	## Populate its fields
	foreach($mailTo in $to)
	{
	    $email.To.Add($mailTo)
	}

	$email.From = $from
	$email.Subject = $subject
	$email.Body = $body

	## Send the mail
	$client = New-Object System.Net.Mail.SmtpClient $smtpHost
	$client.UseDefaultCredentials = $true
	$client.Send($email)


}




function write-green {
	param($string)
	write-Host -f green "$string"
}


function write-red {
	param($string)
	write-Host -f red "$string"
}


function write-yellow {
	param($string)
	write-Host -f yellow "$string"
}


function write-cyan {
	param($string1, $string2)
	write-Host -f cyan "$string1 : $string2"
}

function write-gray {
	param($string1, $string2)
	write-Host -f gray "$string1 : $string2"
}



function write-link {
	param($string1, $string2,$string3, $string4)
	write-Host -f green "$string1 : $string3"
}

function write-red-link {
	param($string1, $string2,$string3, $string4)
	write-Host -f red "$string1 : $string3"
}

function write-yellow-link {
	param($string1, $string2,$string3, $string4)
	write-Host -f yellow "$string1 : $string3"
}


function write-html-header{
}

function write-report-header{

}

function write-report-footer {
}


function write-html-footer {
}

function write-html-footer {
}




#GET_REGKEY HKCurrentUser
function Get-RegKeyCU
{
    param($key, $regstring, $expected_value, $feat)
    #$regstring = "CurrentBuild"
	#$key="Software\Microsoft\MSMQ\Parameters";
    $keytype=[Microsoft.Win32.RegistryHive]::CurrentUser;
    $remotebase=[Microsoft.Win32.Registrykey]::Openremotebasekey($keytype,$GLOBAL:target);
    #$remotebase
    $regkey=$remotebase.OpenSubkey($key);
	#$regkey
    $regvalue = $regkey.GetValue($regstring) 
	if( $regvalue -eq $expected_value){
    $ret = "$feat `tPASS: Version: $regvalue"
    $ret = "$feat : $regvalue"	
    #write-green "$ret :`tPASS"
    return("0")
	}
	else {$ret = "$feat : $regvalue :`tFAIL"
	#write-red $ret 	
    return("1")
	}
}

#generic get-firewallrule
function Get-FirewallRule {
	 param($rulename)
	#$test = netsh -r $GLOBAL:target advfirewall firewall show rule name="Allow 64 octopus"
	$test =invoke-command -ComputerName $GLOBAL:target -scriptblock{netsh advfirewall firewall show rule name="*"}
	if($test -like "*no rules*"){
		return("1")
		}
	else{
		return("0")
		}
}


function generic_get_wmi{
	param($W32Class, $Name, $Value)
	$checkval = Get-WmiObject -class $W32Class -computer $GLOBAL:target
	$compval = $checkval.$Name

	if($compval -eq $Value)
	{
		#write-output "Values Match"
		exit 0    
	}
	else
	{
		#write-output "$compval does not match $Value"
		exit 1

	}

}



function get-app-pool-status {
	param($app_pool)
	$block = { 
		import-module 'webAdministration'
		(Get-WebAppPoolState "$app_pool").value; 
		}
	
	#write-host -f cyan "Testing $target"
	$state = Invoke-Command -computername $target -ScriptBlock $block
	if($state -eq "stopped"){write-host -f red "$pool $state"; $return = 1;}
	else{write-host -f green "$pool $state"; $return = 0;}
	return $return
}
	
function get-sql-perms{
	$block = {
		Add-PSSnapin SqlServerCmdletSnapin100
		Add-PSSnapin SqlServerProviderSnapin100
		set-Location SQLSERVER:\SQL
		Set-Location SQLSERVER:\SQL\localhost\DEFAULT\Databases
		gci  | format-list -property PSChildName
		gci .\AppFabPers\Users
	}

	$state = Invoke-Command -computername $target -ScriptBlock $block
	if($state -eq "stopped"){write-host -f red "$pool $state"; return 1;}
	else{write-host -f green "$pool $state";
	
	}
}

function Get-DomainFirewallRuleDetails {
	$output = invoke-command -ComputerName $GLOBAL:target -scriptblock{netsh advfirewall monitor show firewall}
	$buffer = @()
	$hashtmp = @{}
	$found = 0

	foreach($line in $output){
		if($line -like "*Profile Settings:*"){
			if($found -gt 0){
				#write-host "buffer is $buffer"
				$hashtmp[$rulename]=@()
				$hashtmp[$rulename]=$buffer
				}
			$rulename = ($line -replace ":","").trimend()
			#write-host -f cyan "Rule name is $rulename";
			$buffer = @()
			$found++
		}
		else{
			$buffer += $line;
		}
	}	
	

	if(($hashtmp["Domain Profile Settings"] -like "*AllowInbound,AllowOutbound*")){
		#write-host -f cyan $hashtmp["Domain Profile Settings"] 
		return 0
		}
	else{
	#write-host -f cyan $hashtmp["Domain Profile Settings"] 
	return 1
	}
	
}

function Get-FirewallRuleDetails {
	param($rulename)
	$output = invoke-command -ComputerName $GLOBAL:target -scriptblock{netsh advfirewall firewall show rule name="all" dir="in" type="dynamic"}
	$tempvar = @()
	$hashtmp = @{}

	foreach($line in $output){
		if($line -like "Rule Name*"){
			$hashtmp[$rulename]=@()
			$hashtmp[$rulename]=$tempvar
			$rulename = $line -replace "Rule Name:                            ","";
			write-host -f cyan "Rule name is $rulename";
			$tempvar = @()
			}
		else{
			$tempvar += $line;
		}		
	}
	
	#$test = netsh -r $GLOBAL:target advfirewall firewall show rule name="Allow 64 octopus"

	if($hashtmp[$rulename]){
		write-host $hashtmp[$rulename]
		return("0")
		}
	else{
		return("1")
		}
}


function get-webpage{
	param($url)
	$url = 'http://' +$GLOBAL:target + '/' + $url
	$req = [system.Net.WebRequest]::Create($url) 
	$req.timeout = 10000
	$res = $req.GetResponse() 
	#$res.StatusCode 
	$status_code = [int]$res.StatusCode 
	if($status_code -eq 200){return(0)}
	else{return (1)}
}



function get-generic-webpage{
	param($url)
	$url = 'http://' + $url
	$req = [system.Net.WebRequest]::Create($url) 
	$req.timeout = 10000
	$res = $req.GetResponse() 
	#$res.StatusCode 
	$status_code = [int]$res.StatusCode 
	if($status_code -eq 200){return(0)}
	else{return (1)}
}
	

function get-webpage-remote{
	param($url)
	$url = 'http://' + $url
	$block = '$req = [system.Net.WebRequest]::Create("' + $url + '") 
	$req.timeout = 10000
	$res = $req.GetResponse() 
	#$res.StatusCode 
	$status_code = [int]$res.StatusCode
	#write-host $status_code
	return $status_code'
	$output = invoke-command -ComputerName $GLOBAL:target -scriptblock{param($sendblock); invoke-expression $sendblock} -argumentlist ($block)
	
	if($output -eq 200){
		#write-host $output
		return(0)
	}
	else{
	#write-host $output
	return (1)
	}
}



function check-admin-sec-group{
$secpolicy =  Invoke-Command -computername $GLOBAL:target -scriptblock {net localgroup administrators}
if($GLOBAL:Env -eq "INT"){ $match = "*administrators*"}
elseif($GLOBAL:Env -eq "PROD"){ $match = "*administrators*"}
else{$match = "*guest*"}

#write-host "match is $match env is $GLOBAL:Env" 
if($secpolicy -like $match){return(0)}
else{return (1)}
}

function test-incoming-port{
Param($port=135)
	$srv = $GLOBAL:target
	$timeout=1000
	$ErrorActionPreference = "SilentlyContinue"
 
	# Create TCP Client
	$tcpclient = new-Object system.Net.Sockets.TcpClient
 
	# Tell TCP Client to connect to machine on Port
	$iar = $tcpclient.BeginConnect($srv,$port,$null,$null)
 
	# Set the wait time
	$wait = $iar.AsyncWaitHandle.WaitOne($timeout,$false)
 
	# Check to see if the connection is done
	if(!$wait)
	{
		# Close the connection and report timeout
		$tcpclient.Close()
		if($verbose){Write-Host "Connection Timeout"}
		Return $false
	}
	else
	{
		# Close the connection and report the error if there is one
		$error.Clear()
		$tcpclient.EndConnect($iar) | out-Null
		if(!$?){if($verbose){write-host $error[0]};$failed = $true}
		$tcpclient.Close()
	}
 
	# Return $true if connection Establish else $False
	if($failed){return $false}else{return $true}
}


function test-outgoing-port{
	Param($srv, $port=135)
	$timeout=1000
	$ErrorActionPreference = "SilentlyContinue"
	$block = '
		# Create TCP Client
		$tcpclient = new-Object system.Net.Sockets.TcpClient
		# Tell TCP Client to connect to machine on Port
		$iar = $tcpclient.BeginConnect("' + $srv + '","' + $port + '",$null,$null)
		# Set the wait time
		$wait = $iar.AsyncWaitHandle.WaitOne(' + $timeout + ',$false)
		# Check to see if the connection is done
		if(!$wait)
		{
			# Close the connection and report timeout
			$tcpclient.Close()
			if($verbose){Write-Host "Connection Timeout"}
			Return $false
		}
		else
		{
			# Close the connection and report the error if there is one
			$error.Clear()
			$tcpclient.EndConnect($iar) | out-Null
			if(!$?){if($verbose){write-host $error[0]};$failed = $true}
			$tcpclient.Close()
			# Return $true if connection Establish else $False
			if($failed){ Return $false}else{ Return $true}
		}'
 

	#write-host $block
	$output = invoke-command -ComputerName $GLOBAL:target -scriptblock{param($sendblock); invoke-expression $sendblock} -argumentlist ($block)
	#write-host $output
	return $output
}



function check-cert{
	param($url)
	$block = '
		$cert = gci cert:\LocalMachine\My\ | ?{$_.subject -match "' + $url + '"}
		if($cert){return $true}
		else{return $false}
	'
	$output = invoke-command -ComputerName $GLOBAL:target -scriptblock{param($sendblock); invoke-expression $sendblock} -argumentlist ($block)
	#write-host $output
	return $output
}

function check-validation-cert{
	if($GLOBAL:Env -eq "Int"){$check_url = "validation.int.windows.microsoft.com"}
	elseif($GLOBAL:Env -eq "Funct"){$check_url = "tst"}
	elseif($GLOBAL:Env -eq "Perf"){$check_url = "perf"}
	else{$check_url = "validation.test.loc"}
	(check-cert $check_url)
}

function check-share-permissions{
param($sharename, $account_name)
	$loctest = $NULL
	$location = "\\" + $GLOBAL:target + "\" + $sharename
	#"
	gci $location -ea silentlycontinue | %{
	$folder = $_
	$accesscontrol = $_.getaccesscontrol()
	$accesscontrol.access | %{
		if($_.IdentityReference -eq $account_name){
			write-green  "$folder $account_name:`tPASS"; 
			$loctest++}
			}
	return("0")
    }
	if($loctest -eq $NULL){
		#write-red "$folder $account_name :`tFAIL";
		return("1")}
}


function Check-RegKeyIEH
{
    param($key, $regstring, $expected_value, $feat) 
   $keytype=[Microsoft.Win32.RegistryHive]::LocalMachine;
    $remotebase=[Microsoft.Win32.Registrykey]::Openremotebasekey($keytype,$GLOBAL:target);
    $regkey=$remotebase.OpenSubkey($key);
    $regvalue = $regkey.GetValue($regstring) 
                if( $regvalue -eq $expected_value){
    $ret = "$feat `tPASS: Version: $regvalue"
    $ret = "$feat : $regvalue"         
    write-green "$ret :`tFAIL"
                return("1")
                }
else {
$ret = "$feat : $regvalue :`tPASS"
                write-red $ret   
                return("0")
                }
}

function Check-RegKeyIEHCU
{
    param($key, $regstring, $expected_value, $feat) 
   $keytype=[Microsoft.Win32.RegistryHive]::CurrentUser;
    $remotebase=[Microsoft.Win32.Registrykey]::Openremotebasekey($keytype,$GLOBAL:target);
    $regkey=$remotebase.OpenSubkey($key);
    $regvalue = $regkey.GetValue($regstring) 
                if( $regvalue -eq $expected_value){
    $ret = "$feat `tPASS: Version: $regvalue"
    $ret = "$feat : $regvalue"         
    write-green "$ret :`tFAIL"
                return("1")
                }
else {
$ret = "$feat : $regvalue :`tPASS"
                write-red $ret   
                return("0")
                }
}

function check-hotfix
{
	param($hotfixid)
    if(Get-HotFix -ea silentlycontinue -Id "$hotfixid" -Computername $GLOBAL:target) {
		#write-Host -f green "$hotfixid:`tPASS"; 
		return("0")
		} 
	else {
		#write-Host -f green "$hotfixid:`tFAIL"; 
		return("1")
		}

}

function check-validation-permissions{
	$accounts = @()
	
	if($GLOBAL:Env -eq "int"){$accounts = 'localhost\guest', '*primusSG*'}
	if($GLOBAL:Env -eq "prod"){$accounts = '*SG*'}
	if($GLOBAL:Env -eq "onebox"){$accounts = '*SG*'}
    if($GLOBAL:Env -eq "funct"){$accounts = '*SG*'}
	
	#(check-share-permissions '\PRIMUS' '*SG*')
	foreach($acct in $accounts){
	(check-share-permissions '\d$'  $acct)
	}

	}

function check_runas_network_service {
	$start_name = (get-wmiobject -computer $GLOBAL:target -query "select StartName from Win32_Service where Name = 'MSSQLSERVER'").StartName 
	if($start_name  -eq "NT Authority\NetworkService")
		{
			write-output "Account is running under Network Service"
			return("0")
		}
	Else
		{
			write-output "Account is not running under Network Service"
			return("1")
		}
}



#MAINSECTION


if ((ping-ip $servername)){

	if($Component){
		$installed_components = (Get-InstalledComponents $servername)
		check-installed-windows-features $Component
		EXIT
	}

	elseif($Program){
		(Get-Program $servername $Program)
		EXIT
	}
	elseif($ProgList){
	$installed_progs  = (Get-InstalledPrograms $servername)
	EXIT
	}
	elseif($WinList){
	(Get-InstalledComponents $servername)
	EXIT
	}

