Movefolders.ps1,e6ea2daacdc1ba826354f0dc6009b044,Scan result is 1. IsMalware: 0,w6/Cu8K/IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIwojICAgUHJlcmVxdWlzaXRlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMKIyAgIERvd25sb2FkIGFuZCBJbnN0YWxsIFNoYXJlcG9pbnQgQ2xpZW50IENvbXBvbmVudHMgU0RLICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjCiMgICBTaGFyZXBvaW50IDIwMTMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIwojICAgaHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9lbi11cy9kb3dubG9hZC9kZXRhaWxzLmFzcHg/aWQ9MzU1ODUgICAgICAgICAgICAgICAgICAgICMKIyAgIFNoYXJlcG9pbnQgMjAxNiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjCiMgICBodHRwczovL3d3dy5taWNyb3NvZnQuY29tL2VuLXVzL2Rvd25sb2FkL2RldGFpbHMuYXNweD9pZD01MTY3OSAgICAgICAgICAgICAgICAgICAgIwojICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMKIyAgIEF1dGhvcjogU2ViYXN0aWFuIElsZGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjCiMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKClt2b2lkXVtTeXN0ZW0uUmVmbGVjdGlvbi5Bc3NlbWJseV06OkxvYWRXaXRoUGFydGlhbE5hbWUoJ01pY3Jvc29mdC5WaXN1YWxCYXNpYycpClt2b2lkXVtTeXN0ZW0uUmVmbGVjdGlvbi5Bc3NlbWJseV06OkxvYWRXaXRoUGFydGlhbE5hbWUoIlN5c3RlbS5XaW5kb3dzLkZvcm1zIikKCmlmKChUZXN0LVBhdGggLVBhdGggIkM6XFByb2dyYW0gRmlsZXNcQ29tbW9uIEZpbGVzXG1pY3Jvc29mdCBzaGFyZWRcV2ViIFNlcnZlciBFeHRlbnNpb25zXDE2XElTQVBJIikpewogICAgQWRkLVR5cGUgLVBhdGggIkM6XFByb2dyYW0gRmlsZXNcQ29tbW9uIEZpbGVzXG1pY3Jvc29mdCBzaGFyZWRcV2ViIFNlcnZlciBFeHRlbnNpb25zXDE2XElTQVBJXE1pY3Jvc29mdC5TaGFyZVBvaW50LkNsaWVudC5kbGwiCiAgICBBZGQtVHlwZSAtUGF0aCAiQzpcUHJvZ3JhbSBGaWxlc1xDb21tb24gRmlsZXNcbWljcm9zb2Z0IHNoYXJlZFxXZWIgU2VydmVyIEV4dGVuc2lvbnNcMTZcSVNBUElcTWljcm9zb2Z0LlNoYXJlUG9pbnQuQ2xpZW50LlJ1bnRpbWUuZGxsIgp9CmVsc2VpZigoVGVzdC1QYXRoIC1QYXRoICJDOlxQcm9ncmFtIEZpbGVzXENvbW1vbiBGaWxlc1xtaWNyb3NvZnQgc2hhcmVkXFdlYiBTZXJ2ZXIgRXh0ZW5zaW9uc1wxNVxJU0FQSSIpKXsKICAgIEFkZC1UeXBlIC1QYXRoICJDOlxQcm9ncmFtIEZpbGVzXENvbW1vbiBGaWxlc1xtaWNyb3NvZnQgc2hhcmVkXFdlYiBTZXJ2ZXIgRXh0ZW5zaW9uc1wxNVxJU0FQSVxNaWNyb3NvZnQuU2hhcmVQb2ludC5DbGllbnQuZGxsIgogICAgQWRkLVR5cGUgLVBhdGggIkM6XFByb2dyYW0gRmlsZXNcQ29tbW9uIEZpbGVzXG1pY3Jvc29mdCBzaGFyZWRcV2ViIFNlcnZlciBFeHRlbnNpb25zXDE1XElTQVBJXE1pY3Jvc29mdC5TaGFyZVBvaW50LkNsaWVudC5SdW50aW1lLmRsbCIKfQplbHNlewogICAgdGhyb3cgW1N5c3RlbS5JTy5GaWxlTm90Rm91bmRFeGNlcHRpb25dIk5vIFNoYXJlcG9pbnQgQ2xpZW50IENvbXBvbmVudHMgaXMgaW5zdGFsbGVkLiIKICAgICNJbnN0YWxsLVByZXJlcXVpc2l0ZXMgLVZlcnNpb24gMTYKfQpbc3dpdGNoXSRpc1N1cHBvcnRlZCB8IE91dC1OdWxsCiRnbG9iYWw6Zm9sZGVyUGF0aAokZ2xvYmFsOm5ld1NpdGUKJGdsb2JhbDpTaGFyZXBvaW50Um9vdAokVW5TdXBwb3J0ZWRGaWxlRXh0ZW5zaW9ucyAgPSAgICIuYWRlIiwgIi5hZHAiLCAiLmFzYSIsICIuYXNoeCIsICIuYXNteCIsICIuYXNwIiwgIi5iYXMiLCAiLmJhdCIsICIuY2R4IiwgIi5jZXIiLCAiLmNobSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi5jbGFzcyIsICIuY21kIiwgIi5jb20iLCAiLmNvbmZpZyIsICIuY250IiwgIi5jcGwiLCAiLmNydCIsICIuY3NoIiwgIi5kZXIiLCAiLmRsbCIsICIuZXhlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLmZ4cCIsICIuZ2FkZ2V0IiwgIi5ncnAiLCAiLmhscCIsICIuaHBqIiwgIi5odGEiLCAiLmh0ciIsICIuaHR3IiwgIi5pZGEiLCAiLmlkYyIsICIuaWRxIiwgIi5pbnMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIuaXNwIiwgIi5pdHMiLCAiLmpzb24iLCAiLmtzaCIsICIubG5rIiwgIi5tYWQiLCAiLm1hZiIsICIubWFnIiwgIi5tYW0iLCAiLm1hcSIsICIubWFyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLm1hcyIsICIubWF0IiwgIi5tYXUiLCAiLm1hdiIsICIubWF3IiwgIi5tY2YiLCAiLm1kYSIsICIubWRiIiwgIi5tZGUiLCAiLm1kdCIsICIubWR3IiwgIi5tZHoiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIubXMtb25lLXN0dWIiLCAiLm1zYyIsICIubXNoIiwgIi5tc2gxIiwgIi5tc2gxeG1sIiwgIi5tc2gyIiwgIi5tc2gyeG1sIiwgIi5tc2h4bWwiLCAiLm1zaSIsICIubXNwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLm1zdCIsICIub3BzIiwgIi5wY2QiLCAiLnBpZiIsICIucGwiLCAiLnByZiIsICIucHJnIiwgIi5wcmludGVyIiwgIi5wczEiLCAiLnBzMXhtbCIsICIucHMyIiwgIi5wczJ4bWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIucHNjMSIsICIucHNjMiIsICIucHN0IiwgIi5yZWciLCAiLnJlbSIsICIuc2NmIiwgIi5zY3IiLCAiLnNjdCIsICIuc2hiIiwgIi5zaHMiLCAiLnNodG0iLCAiLnNodG1sIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLnNvYXAiLCAiLnN0bSIsICIuc3ZjIiwgIi51cmwiLCAiLnZiIiwgIi52YmUiLCAiLnZicyIsICIudnNpeCIsICIud3MiLCAiLndzYyIsICIud3NmIiwgIi53c2giLCAiLnhhbWx4IgokVW5TdXBwb3J0ZWRDaGFyICAgICAgICAgICAgPSAgICciJywgJyMnLCAnJScsICcqJywgJzonLCAnPCcsICc+JywgJz8nLCAnLycsICdcJywgJ3wnCgpmdW5jdGlvbiBTZWxlY3QtRm9sZGVyewogICAgcGFyYW0oW3N0cmluZ10kRGVzY3JpcHRpb249IlNlbGVjdCBGb2xkZXIiLAogICAgICAgICAgW3N0cmluZ10kUm9vdEZvbGRlcj0iRGVza3RvcCIpCiAgICAgCiAgICAkb2JqRm9ybSA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9sZGVyQnJvd3NlckRpYWxvZwogICAgJG9iakZvcm0uUm9vdGZvbGRlciA9ICRSb290Rm9sZGVyCiAgICAkb2JqRm9ybS5EZXNjcmlwdGlvbiA9ICREZXNjcmlwdGlvbgogICAgJFNob3cgPSAkb2JqRm9ybS5TaG93RGlhbG9nKCkKICAgIGlmKCRTaG93IC1lcSAiT0siKXsKICAgICAgICAkZ2xvYmFsOmZvbGRlclBhdGggPSAgJG9iakZvcm0uU2VsZWN0ZWRQYXRoCiAgICB9ZWxzZXsKICAgICAgICBXcml0ZS1FcnJvciAiT3BlcmF0aW9uIGNhbmNlbGxlZCBieSB1c2VyLiIKICAgIH0KfQpmdW5jdGlvbiBPdXQtTG9nZmlsZSgkZmlsZW5hbWUpewogICAgaWYoKFRlc3QtUGF0aCAtUGF0aCAiJFBTU2NyaXB0Um9vdFxsb2dmaWxlLmxvZyIpIC1lcSAkZmFsc2UpewogICAgICAgIE5ldy1JdGVtIC1QYXRoICIkUFNTY3JpcHRSb290XGxvZ2ZpbGUubG9nIiB8IE91dC1OdWxsCiAgICB9ICAgICAKICAgIEFkZC1Db250ZW50IC1QYXRoICIkUFNTY3JpcHRSb290XGxvZ2ZpbGUubG9nIiAtVmFsdWUgJGZpbGVuYW1lLmZ1bGxuYW1lCn0KCmZ1bmN0aW9uIEluc3RhbGwtUHJlcmVxdWlzaXRlc3sKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbcGFyYW1ldGVyKCBNYW5kYXRvcnkgPSAkdHJ1ZSApXQogICAgICAgIFtWYWxpZGF0ZVNldCgxMywxNildW2ludF0kVmVyc2lvbgogICAgKQogICAgQkVHSU57CiAgICAgICAgaWYoJFZlcnNpb24gLWVxIDEzKXsKICAgICAgICAgICAgJG1zaWZpbGUgPSAiJFBTU2NyaXB0Um9vdFxmaWxlIgogICAgICAgIH0KICAgICAgICBpZigkVmVyc2lvbiAtZXEgMTYpewogICAgICAgICAgICAkbXNpZmlsZSA9ICIkUFNTY3JpcHRSb290XFByZXJlcXVpc2l0ZXNcU2hhcmVwb2ludDE2Lm1zaSIKICAgICAgICB9CiAgICAgICAgJGFyZ3VtZW50cyA9IEAoCiAgICAgICAgICAgICIvaSIKICAgICAgICAgICAgImAiJG1zaWZpbGVgIiIKICAgICAgICAgICAgIi9xbiIKICAgICAgICAgICAgIi9ub3Jlc3RhcnQiCiAgICAgICAgKQogICAgfQogICAgUFJPQ0VTU3sKICAgICAgICBXcml0ZS1WZXJib3NlICJJbnN0YWxsaW5nLi4uLi4iCiAgICAgICAgJHByb2Nlc3MgPSBTdGFydC1Qcm9jZXNzIC1GaWxlUGF0aCAiJFBTU2NyaXB0Um9vdFxQcmVyZXF1aXNpdGVzXFNoYXJlcG9pbnQxNi5tc2kiIC9xbiAtV2FpdCAtUGFzc1RocnUKICAgICAgICBpZigkcHJvY2Vzcy5FeGl0Q29kZSAtZXEgMCl7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkNsaWVudCBDb21wb25lbnRzIHdhcyBzdWNjZXNzZnVsbHkgaW5zdGFsbGVkISIKICAgICAgICB9CiAgICAgICAgZWxzZXsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiQ291bGRudCBpbnN0YWxsLCBFeGl0IGNvZGUgJCgkcHJvY2Vzcy5FeGl0Q29kZSkiCiAgICAgICAgfQogICAgfQogICAgRU5EewogICAgfQp9CgpmdW5jdGlvbiBTZWxlY3QtU2l0ZXsKICAgICR3ZWJVUkwgPSBbTWljcm9zb2Z0LlZpc3VhbEJhc2ljLmludGVyYWN0aW9uXTo6SW5wdXRCb3goIkVudGVyIGZ1bGwgVVJMIGZvciBzaXRlYG5gbmBuIisKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkV4YW1wbGU6IGh0dHBzOi8vQ29tcGFueW5hbWUuc2hhcmVwb2ludC5jb20vd2ZmZF9pdC8iLCAiVVJMIikKICAgIGlmKCR3ZWJVUkwgLWVxICRudWxsIC1vciAkd2ViVVJMIC1lcSAiIil7CiAgICAgICAgVGhyb3cgIlVSTCBjYW5ub3QgYmUgbnVsbCIKICAgICAgICBleGl0CiAgICB9CiAgICAkZ2xvYmFsOmNvbnRleHQgPSBOZXctT2JqZWN0IE1pY3Jvc29mdC5TaGFyZXBvaW50LkNsaWVudC5DbGllbnRDb250ZXh0KCR3ZWJVUkwpCiAgICAkY3JlZGVudGlhbHMgPSAoR2V0LUNyZWRlbnRpYWwpCiAgICAkZm9sZGVyUGF0aHMgPSAkZ2xvYmFsOmZvbGRlclBhdGguU3BsaXQoJ1wnKQogICAgJGdsb2JhbDpuZXdTaXRlID0gJGZvbGRlclBhdGhzWyRmb2xkZXJQYXRocy5Db3VudC0xXQogICAgJGNyZWQgPSBOZXctT2JqZWN0IE1pY3Jvc29mdC5TaGFyZVBvaW50LkNsaWVudC5TaGFyZVBvaW50T25saW5lQ3JlZGVudGlhbHMoJGNyZWRlbnRpYWxzLlVzZXJOYW1lLCAkY3JlZGVudGlhbHMuUGFzc3dvcmQpCiAgICAkZ2xvYmFsOmNvbnRleHQuQ3JlZGVudGlhbHMgPSAkY3JlZAogICAgJExpYklucHV0ID0gW01pY3Jvc29mdC5WaXN1YWxCYXNpYy5JbnRlcmFjdGlvbl06OklucHV0Qm94KCJFbnRlciB0aGUgRG9jdW1lbnQgbGlicmFyeSB3aGVyZSB5b3Ugd2FudCBtb3ZlIHRvLmBuYG5gbiIrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkV4YW1wbGU6IFByb2plY3RzL1Byb2plY3ROYW1lL2ZvbGRlciIsICJEb2N1bWVudCBMaWJyYXJ5IikKICAgICRnbG9iYWw6U2hhcmVwb2ludFJvb3QgPSAiU2hhcmVkIERvY3VtZW50cy8iKyRMaWJJbnB1dAogICAgcmV0dXJuICRnbG9iYWw6U2hhcmVwb2ludFJvb3QKfQoKZnVuY3Rpb24gU3RhcnQtTW92ZXsKICAgIHRyeXsKICAgICAgICBDbGVhci1Ib3N0CiAgICAgICAgV3JpdGUtSG9zdCAiQ29ubmVjdGlvbiB0byBTaGFyZXBvaW50IFNpdGUuLi5gbmBuYG5gbmBuYG4iIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93CiAgICAgICAgJHdlYiA9ICRnbG9iYWw6Y29udGV4dC5XZWIKICAgICAgICAkZ2xvYmFsOmNvbnRleHQuTG9hZCgkd2ViKQogICAgICAgICRnbG9iYWw6Y29udGV4dC5FeGVjdXRlUXVlcnkoKQogICAgICAgICRmb2xkZXIgPSAkd2ViLkZvbGRlcnMuQWRkKCRnbG9iYWw6U2hhcmVwb2ludFJvb3QgKyAnLycgKyAkZ2xvYmFsOm5ld1NpdGUpCiAgICAgICAgJGdsb2JhbDpjb250ZXh0LkxvYWQoJGZvbGRlcikKICAgICAgICAkZ2xvYmFsOmNvbnRleHQuRXhlY3V0ZVF1ZXJ5KCkKICAgICAgICAkRG9jTGliID0gJHdlYi5HZXRGb2xkZXJCeVNlcnZlclJlbGF0aXZlVXJsKCR3ZWIuU2VydmVyUmVsYXRpdmVVcmwgKyAnLycgKyAkZ2xvYmFsOlNoYXJlcG9pbnRSb290KQogICAgICAgICRnbG9iYWw6Y29udGV4dC5Mb2FkKCREb2NMaWIpCiAgICAgICAgJGdsb2JhbDpjb250ZXh0LkV4ZWN1dGVRdWVyeSgpCiAgICB9Y2F0Y2h7CiAgICAgICAgdGhyb3cgIkNvdWxkIG5vdCBjb25uZWN0IHRvIHRoaXMgc2hhcmVwb2ludCBzaXRlIgogICAgICAgIGV4aXQKICAgIH0KICAgICRpID0gMQogICAgI3Byb2dyZXNzIGJhcgogICAgJEZvcm0uQ2xvc2UoKQogICAgJGZvcm0xLlNob3coKSB8IE91dC1OdWxsCiAgICAkZm9ybTEuRm9jdXMoKXwgT3V0LU51bGwKICAgICRGaWxlcyA9IEdldC1DaGlsZEl0ZW0gLVBhdGggJGdsb2JhbDpmb2xkZXJQYXRoIC1SZWN1cnNlCiAgICBmb3JlYWNoICgkRmlsZSBpbiAkRmlsZXMpIHsKICAgICAgICAkcHJvZ3Jlc3NCYXIxLlZhbHVlID0gKCRpLyRGaWxlcy5Db3VudCkqMTAwCiAgICAgICAgJGxhYmVsMS5UZXh0ID0gIk1vdmluZyAkZmlsZSIKICAgICAgICAkZm9ybTEuUmVmcmVzaCgpCgogICAgICAgICRleHRlbnNpb24gPSBbU3lzdGVtLklPLlBhdGhdOjpHZXRFeHRlbnNpb24oJEZpbGUpCiAgICAgICAgRm9yZWFjaCgkVW5TdXBwb3J0ZWRGaWxlRXh0ZW5zaW9uIGluICRVblN1cHBvcnRlZEZpbGVFeHRlbnNpb25zKXsKICAgICAgICAgICAgaWYoJGV4dGVuc2lvbiAtZXEgJFVuU3VwcG9ydGVkRmlsZUV4dGVuc2lvbil7CiAgICAgICAgICAgICAgICAkaXNTdXBwb3J0ZWQgPSAkZmFsc2UKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgJGlzU3VwcG9ydGVkID0gJHRydWUKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZigkaXNTdXBwb3J0ZWQpewogICAgICAgICAgICAkc3RyaW5nID0gJEZpbGUuRnVsbE5hbWUKICAgICAgICAgICAgJHN0cmluZyA9ICRzdHJpbmcuU3BsaXQoJzonKQogICAgICAgICAgICAkUmVsYXRpdmVmb2xkZXIgPSAkc3RyaW5nWzFdLlJlcGxhY2UoJ1wnLCAnLycpCiAgICAgICAgICAgIGlmKChHZXQtSXRlbSAkRmlsZS5mdWxsbmFtZSkgLWlzIFtTeXN0ZW0uSU8uRGlyZWN0b3J5SW5mb10pewogICAgICAgICAgICAgICAgI1dyaXRlLUhvc3QgIkNyZWF0aW5nIERpcmVjdG9yeSAkRmlsZSIgLUZvcmVncm91bmRDb2xvciBHcmVlbgogICAgICAgICAgICAgICAgJGZvbGRlciA9ICR3ZWIuRm9sZGVycy5BZGQoJGdsb2JhbDpTaGFyZXBvaW50Um9vdCArICRSZWxhdGl2ZWZvbGRlcikKICAgICAgICAgICAgICAgICRnbG9iYWw6Y29udGV4dC5Mb2FkKCRmb2xkZXIpCiAgICAgICAgICAgICAgICAkZ2xvYmFsOmNvbnRleHQuRXhlY3V0ZVF1ZXJ5KCkgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgJFJlbGF0aXZlZm9sZGVyMSA9ICRSZWxhdGl2ZWZvbGRlci5SZXBsYWNlKCcvJyskRmlsZS5OYW1lLCAnJykKICAgICAgICAgICAgICAgICNXcml0ZS1Ib3N0ICJVcGxvYWRpbmcgJEZpbGUiIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4KICAgICAgICAgICAgICAgICRuZXdQYXRoID0gJHdlYi5HZXRGb2xkZXJCeVNlcnZlclJlbGF0aXZlVXJsKCR3ZWIuU2VydmVyUmVsYXRpdmVVcmwgKyAnLycgKyAkZ2xvYmFsOlNoYXJlcG9pbnRSb290ICsgJFJlbGF0aXZlZm9sZGVyMSkKICAgICAgICAgICAgICAgICRnbG9iYWw6Y29udGV4dC5Mb2FkKCRuZXdQYXRoKQogICAgICAgICAgICAgICAgJEZpbGVGdWxsTmFtZSA9ICRGaWxlLkZ1bGxOYW1lCiAgICAgICAgICAgICAgICAkRmlsZVN0cmVhbSA9IE5ldy1PYmplY3QgSU8uRmlsZVN0cmVhbSgkRmlsZUZ1bGxOYW1lLCBbU3lzdGVtLklPLkZpbGVNb2RlXTo6T3BlbikKICAgICAgICAgICAgICAgICRGaWxlQ3JlYXRpb25JbmZvID0gTmV3LU9iamVjdCBNaWNyb3NvZnQuU2hhcmVQb2ludC5DbGllbnQuRmlsZUNyZWF0aW9uSW5mb3JtYXRpb24KICAgICAgICAgICAgICAgICRGaWxlQ3JlYXRpb25JbmZvLk92ZXJ3cml0ZSA9ICR0cnVlCiAgICAgICAgICAgICAgICAkRmlsZUNyZWF0aW9uSW5mby5Db250ZW50U3RyZWFtID0gJEZpbGVTdHJlYW0KICAgICAgICAgICAgICAgICRGaWxlQ3JlYXRpb25JbmZvLlVSTCA9ICRGaWxlLk5hbWUKICAgICAgICAgICAgICAgICRGaWxlVXBsb2FkID0gJG5ld1BhdGguRmlsZXMuQWRkKCRGaWxlQ3JlYXRpb25JbmZvKQogICAgICAgICAgICAgICAgJGdsb2JhbDpjb250ZXh0LkxvYWQoJEZpbGVVcGxvYWQpCiAgICAgICAgICAgICAgICAkZ2xvYmFsOmNvbnRleHQuRXhlY3V0ZVF1ZXJ5KCkKICAgICAgICAgICAgfQogICAgICAgIH1lbHNlewogICAgICAgICAgICAjV3JpdGUtSG9zdCAiVW5zdXBwb3J0ZWQgZmlsZWZvcm1hdCAkRmlsZSIgLUZvcmVncm91bmRDb2xvciBSZWQKICAgICAgICAgICAgT3V0LUxvZ2ZpbGUgLWZpbGVuYW1lICRGaWxlCiAgICAgICAgfQogICAgICAgICRpKysKICAgIH0KICAgIFdyaXRlLUhvc3QgIkNvbXBsZXRlZCEiIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4KICAgICRmb3JtMS5DbG9zZSgpCn0KCiMgR1VJCiRGb3JtID0gTmV3LU9iamVjdCBzeXN0ZW0uV2luZG93cy5Gb3Jtcy5Gb3JtCiRGb3JtLlRleHQgPSAiTW92ZSBmb2xkZXJzIHRvIFNoYXJlcG9pbnQiCiRGb3JtLlRvcE1vc3QgPSAkdHJ1ZQokRm9ybS5XaWR0aCA9IDU3NAokRm9ybS5IZWlnaHQgPSA0MDUKCiRidXR0b24yID0gTmV3LU9iamVjdCBzeXN0ZW0ud2luZG93cy5Gb3Jtcy5CdXR0b24KJGJ1dHRvbjIuVGV4dCA9ICJTZWxlY3QgRm9sZGVyIgokYnV0dG9uMi5XaWR0aCA9IDk1CiRidXR0b24yLkhlaWdodCA9IDMwCiRidXR0b24yLkFkZF9DbGljayh7CiAgICBTZWxlY3QtRm9sZGVyCiAgICAkbGFiZWwxMS5UZXh0ID0gJGdsb2JhbDpmb2xkZXJQYXRoCn0pCiRidXR0b24yLmxvY2F0aW9uID0gbmV3LW9iamVjdCBzeXN0ZW0uZHJhd2luZy5wb2ludCgyMiwxNjEpCiRidXR0b24yLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiCiRGb3JtLmNvbnRyb2xzLkFkZCgkYnV0dG9uMikKCiRidXR0b24zID0gTmV3LU9iamVjdCBzeXN0ZW0ud2luZG93cy5Gb3Jtcy5CdXR0b24KJGJ1dHRvbjMuVGV4dCA9ICJTZWxlY3Qgc2l0ZSIKJGJ1dHRvbjMuV2lkdGggPSA5NQokYnV0dG9uMy5IZWlnaHQgPSAzMAokYnV0dG9uMy5BZGRfQ2xpY2soewogICAgJHNoYXJlU2l0ZSA9IFNlbGVjdC1TaXRlCiAgICAkbGFiZWwxMC5UZXh0ID0gJHNoYXJlU2l0ZQp9KQokYnV0dG9uMy5sb2NhdGlvbiA9IG5ldy1vYmplY3Qgc3lzdGVtLmRyYXdpbmcucG9pbnQoMjIsMjIwKQokYnV0dG9uMy5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIgokRm9ybS5jb250cm9scy5BZGQoJGJ1dHRvbjMpCgokYnV0dG9uNCA9IE5ldy1PYmplY3Qgc3lzdGVtLndpbmRvd3MuRm9ybXMuQnV0dG9uCiRidXR0b240LlRleHQgPSAiU3RhcnQiCiRidXR0b240LldpZHRoID0gODIKJGJ1dHRvbjQuSGVpZ2h0ID0gMzAKJGJ1dHRvbjQuQWRkX0NsaWNrKHsKICAgIFN0YXJ0LU1vdmUKICAgICMkRm9ybS5DbG9zZSgpCn0pCiRidXR0b240LmxvY2F0aW9uID0gbmV3LW9iamVjdCBzeXN0ZW0uZHJhd2luZy5wb2ludCg0NDMsMzAyKQokYnV0dG9uNC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIgokRm9ybS5jb250cm9scy5BZGQoJGJ1dHRvbjQpCgokbGFiZWwxMCA9IE5ldy1PYmplY3Qgc3lzdGVtLndpbmRvd3MuRm9ybXMuTGFiZWwKJGxhYmVsMTAuVGV4dCA9ICIiCiRsYWJlbDEwLkF1dG9TaXplID0gJHRydWUKJGxhYmVsMTAuV2lkdGggPSAyNQokbGFiZWwxMC5IZWlnaHQgPSAxMAokbGFiZWwxMC5sb2NhdGlvbiA9IG5ldy1vYmplY3Qgc3lzdGVtLmRyYXdpbmcucG9pbnQoMTQ0LDIyNCkKJGxhYmVsMTAuRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCIKJEZvcm0uY29udHJvbHMuQWRkKCRsYWJlbDEwKQoKJGxhYmVsMTEgPSBOZXctT2JqZWN0IHN5c3RlbS53aW5kb3dzLkZvcm1zLkxhYmVsCiRsYWJlbDExLlRleHQgPSAiIgokbGFiZWwxMS5BdXRvU2l6ZSA9ICR0cnVlCiRsYWJlbDExLldpZHRoID0gMjUKJGxhYmVsMTEuSGVpZ2h0ID0gMTAKJGxhYmVsMTEubG9jYXRpb24gPSBuZXctb2JqZWN0IHN5c3RlbS5kcmF3aW5nLnBvaW50KDE0NCwxNjcpCiRsYWJlbDExLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiCiRGb3JtLmNvbnRyb2xzLkFkZCgkbGFiZWwxMSkKCiRmb3JtMSA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9ybQokZm9ybTEuVGV4dCA9ICJNb3ZpbmcgRmlsZXMiCiRmb3JtMS5IZWlnaHQgPSAxMDAKJGZvcm0xLldpZHRoID0gNDAwCiRmb3JtMS5CYWNrQ29sb3IgPSAid2hpdGUiCiRmb3JtMS5Gb3JtQm9yZGVyU3R5bGUgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9ybUJvcmRlclN0eWxlXTo6Rml4ZWRTaW5nbGUgCiRmb3JtMS5TdGFydFBvc2l0aW9uID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm1TdGFydFBvc2l0aW9uXTo6Q2VudGVyU2NyZWVuCgokbGFiZWwxID0gTmV3LU9iamVjdCBzeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbAokbGFiZWwxLlRleHQgPSAibm90IHN0YXJ0ZWQiCiRsYWJlbDEuTGVmdD01CiRsYWJlbDEuVG9wPSAxMAokbGFiZWwxLldpZHRoPSAoNDAwIC0gMjApCiRsYWJlbDEuSGVpZ2h0PTE1CiRsYWJlbDEuRm9udD0gIlZlcmRhbmEiCgokZm9ybTEuY29udHJvbHMuYWRkKCRsYWJlbDEpCiRwcm9ncmVzc0JhcjEgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLlByb2dyZXNzQmFyCiRwcm9ncmVzc0JhcjEuTmFtZSA9ICdwcm9ncmVzc0JhcjEnCiRwcm9ncmVzc0JhcjEuVG9wID0gJHRydWUKJHByb2dyZXNzQmFyMS5WYWx1ZSA9IDAKJHByb2dyZXNzQmFyMS5TdHlsZT0iQ29udGludW91cyIKICAgIAokU3lzdGVtX0RyYXdpbmdfU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZQokU3lzdGVtX0RyYXdpbmdfU2l6ZS5XaWR0aCA9ICg0MDAgLSA0MCkKJFN5c3RlbV9EcmF3aW5nX1NpemUuSGVpZ2h0ID0gMjAKJHByb2dyZXNzQmFyMS5TaXplID0gJFN5c3RlbV9EcmF3aW5nX1NpemUKJHByb2dyZXNzQmFyMS5MZWZ0ID0gNQokcHJvZ3Jlc3NCYXIxLlRvcCA9IDQwCiRmb3JtMS5Db250cm9scy5BZGQoJHByb2dyZXNzQmFyMSkKClt2b2lkXSRGb3JtLlNob3dEaWFsb2coKQokRm9ybS5EaXNwb3NlKCkK
