Clear-DisabledUsers.ps1,b7933be26be6f689c512a2b8fe13981e,Scan result is 1. IsMalware: 0,ï»¿Param ( 

    [switch]$debugMode = $false

 )

 # Attempts to open a file and trap the resulting error if the file is already open/locked
 function Test-FileLock {
    
    param (
    
        [string]$filePath
        
    )

    $filelocked = $true
    $fileInfo = New-Object System.IO.FileInfo $filePath

    trap {

        Set-Variable -name Filelocked -value $false -scope 1
        continue

    }

    $fileStream = $fileInfo.Open( [System.IO.FileMode]::OpenOrCreate, [System.IO.FileAccess]::ReadWrite, [System.IO.FileShare]::None )
    
    if ($fileStream) {

        $fileStream.Close()

    }

    $filelocked

}

#ÐŸÐ¾Ð¸ÑÐº Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»ÐµÐ¹ Ð² Ñ†ÐµÐ»ÐµÐ²Ñ‹Ñ… OU, Ð¾Ñ‚ÐºÐ»ÑŽÑ‡ÐµÐ½Ð½Ñ‹Ñ… Ð·Ð°Ð´Ð°Ð½Ð½Ð¾Ðµ ÐºÐ¾Ð»Ð¸Ñ‡ÐµÑÑ‚Ð²Ð¾ Ð´Ð½ÐµÐ¹ Ð½Ð°Ð·Ð°Ð´
function find-users {

    $Date = (Get-Date)
    $Date = $Date.AddDays(-3)
    $Users = $NULL

    Try {

        $Users = @( Get-QADUser -LastChangedBefore $Date -Disabled -SearchRoot "OU=Sochi,DC=SOCHI-2014,DC=RU" )
        $Users += Get-QADUser -SearchRoot "OU=Sochi,DC=SOCHI-2014,DC=RU" -AccountExpiresBefore $Date

    } Catch {

        write-log $Error[0].Exception
        write-log $Error[0].InvocationInfo.Line

    }

    Try {

       $Users += Get-QADUser -LastChangedBefore $Date -Disabled -SearchRoot "OU=Moscow,DC=SOCHI-2014,DC=RU"
       $Users += Get-QADUser -SearchRoot "OU=Moscow,DC=SOCHI-2014,DC=RU" -AccountExpiresBefore $Date

    } Catch {

        write-log $Error[0].Exception
        write-log $Error[0].InvocationInfo.Line

    }

    If ( $Users ) {

        Write-Log "Users found"
        $Users = $Users | Select-Object -First 20
        Return $Users

    } else {

        Write-Log "Users not found"
        Exit

    }

}

#ÐŸÐ¾Ð¸ÑÐº Ð½Ð° ÐºÐ°ÐºÐ¸Ðµ ÐºÐ¾Ð¼Ð¿ÑŒÑŽÑ‚ÐµÑ€Ñ‹ Ð·Ð°Ñ…Ð¾Ð´Ð¸Ð» Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»ÑŒ
function find-profiles {

    $computers = Get-ChildItem \\msk-support\ActiveUsers -Filter ( $ADUser.SamAccountName + '@wts*' ) | %{[regex]::Replace( [regex]::replace( $_,'.*@','' ),'\.txt$','' )}
    return $computers

}

#Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð¿Ñ€Ð¾Ñ„Ð¸Ð»ÐµÐ¹ Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»Ñ Ð½Ð° Ð½Ð°Ð¹Ð´ÐµÐ½Ð½Ñ‹Ñ… ÐºÐ¾Ð¼Ð¿ÑŒÑŽÑ‚ÐµÑ€Ð°Ñ…
function delete-profiles {

    write-log  ("ÐÐ°Ñ‡Ð¸Ð½Ð°ÐµÐ¼ ÑƒÐ´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð¿Ñ€Ð¾Ñ„Ð¸Ð»ÐµÐ¹ Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»Ñ: " + $ADUser.SamAccountName)
    $computers = @()
    $computers = find-profiles
    write-log "Trying to search user profile on $computers"
    $SAM = $ADUser.SamAccountName

    ForEach ($computer in $computers) {

        $Profile = $null

        Try {

            $Profile = Get-WmiObject Win32_UserProfile -computer $computer -filter "localpath='C:\\Users\\$SAM'"

        } catch {
        
             write-log $Error[0].Exception
             write-log $Error[0].InvocationInfo.Line

        }
        
        If ($Profile) {

            write-log "Profile on $computer is found. Removing"

            If ( -not($debugMode) ) {

                Try {

                    $Profile.delete()

                } Catch {

                    write-log $Error[0].Exception
                    write-log $Error[0].InvocationInfo.Line

                }

            }

        } else {

            write-log "Profile on $computer is not found"

        }

    }

}

#Ð›Ð¾Ð³Ð¸Ñ€Ð¾Ð²Ð°Ð½Ð¸Ðµ Ð´ÐµÐ¹ÑÑ‚Ð²Ð¸Ð¹
function Write-Log {

    Param ( 

        [Parameter( Mandatory = $True, Position = 0, ValueFromPipeline = $True )]
        [String]$Message

     )
        
        Write-Host $Message
        $Message = ( Get-date ).ToString( "T" ) + "  " + $Message
        Out-File $PathToLogFile -InputObject $Message -Append

}

#Ð”Ð°Ð½Ð½Ð°Ñ Ñ„ÑƒÐ½ÐºÑ†Ð¸Ñ Ð²Ð¾Ð·Ð²Ñ€Ð°Ñ‰Ð°ÐµÑ‚ ÐºÐ°Ñ‚Ð°Ð»Ð¾Ð³, Ð² ÐºÐ¾Ñ‚Ð¾Ñ€Ð¾Ð¼ Ñ…Ñ€Ð°Ð½Ð¸Ñ‚ÑÑ Ð½Ð°Ñˆ ÑÐºÑ€Ð¸Ð¿Ñ‚
function Get-ScriptDirectory {

    $Invocation = ( Get-Variable MyInvocation -Scope 1 ).Value
    Split-Path $Invocation.MyCommand.Path
    
}

#Ð—Ð°Ð¿ÑƒÑÐº ÑÐºÑÐ¿Ð¾Ñ€Ñ‚Ð° Ð¿Ð¾Ñ‡Ñ‚Ð¾Ð²Ñ‹Ñ… ÑÑ‰Ð¸ÐºÐ¾Ð² Ð¾Ñ‚ÐºÐ»ÑŽÑ‡ÐµÐ½Ð½Ñ‹Ñ… Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»ÐµÐ¹
function Export-MailboxesToPST {

    Get-MailboxExportRequest -Status Failed | Remove-MailboxExportRequest -Confirm:$False -ErrorAction SilentlyContinue | Out-Null


    ForEach ($ADUser in $ADUsers) {

        $UserMailbox = $Null

        If ( $ADUser.mail ) {

            Try {

                $UserMailbox = get-mailbox $( $ADUser.mail )

            } Catch {

                write-log $Error[0].Exception
                write-log $Error[0].InvocationInfo.Line

            }

        }

        if ( $UserMailbox ) {
              
            if ( !(Get-MailboxExportRequest -Mailbox $UserMailbox.Alias ) ) {

                write-log  ( "ÐÐ°Ñ‡Ð¸Ð½Ð°ÐµÐ¼ ÑÐºÑÐ¿Ð¾Ñ€Ñ‚ Ð¿Ð¾Ñ‡Ñ‚Ð¾Ð²Ð¾Ð³Ð¾ ÑÑ‰Ð¸ÐºÐ° " + $ADUser.SamAccountName + " Ð² Ñ„Ð°Ð¹Ð»." )
            
                Try {

                    New-MailboxExportRequest -Mailbox $UserMailbox.Alias -FilePath ( "\\exch-mb27\e$\PST\" + $ADUser.sAMAccountName + ".pst" ) -WhatIf:$debugMode
            
                } catch {

                    write-log $Error[0].Exception
                    write-log $Error[0].InvocationInfo.Line
         
                }

            }
        } else {

            write-log ( "Ð£ Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»Ñ " + $ADUser.SamAccountName + " Ð½ÐµÑ‚ Ð¿Ð¾Ñ‡Ñ‚Ð¾Ð²Ð¾Ð³Ð¾ ÑÑ‰Ð¸ÐºÐ°" )
            Set-ADUser -Identity $ADUser.SamAccountName -EmailAddress $NULL
            
        }

    }

}

function Restart-FailedMailboxExportRequests {

    $FaiedExportRequests = Get-MailboxExportRequest -Status Failed

    ForEach ( $FaiedExportRequest in $FaiedExportRequests ) {

        write-log ( "Ð­ÐºÑÐ¿Ð¾Ñ€Ñ‚ Ð¿Ð¾Ñ‡Ñ‚Ð¾Ð²Ð¾Ð³Ð¾ ÑÑ‰Ð¸ÐºÐ° " + $FaiedExportRequest.Mailbox + " Ð² PST Ð·Ð°Ð²ÐµÑ€ÑˆÐ¸Ð»ÑÑ Ð¾ÑˆÐ¸Ð±ÐºÐ¾Ð¹" )
        $FaiedExportRequest | Resume-MailboxExportRequest -WhatIf:$debugMode
        write-log  "Ð’Ð¾Ð·Ð¾Ð±Ð½Ð¾Ð²Ð»ÑÐµÐ¼ ÑÐºÑÐ¿Ð¾Ñ€Ñ‚ Ð¿Ð¾Ñ‡Ñ‚Ð¾Ð²Ð¾Ð³Ð¾ ÑÑ‰Ð¸ÐºÐ° Ð² PST"

    }

}

function Restart-MailboxExportRequestsWithFullRights {

    $CompletedExportRequests = MailboxExportRequest -Status Completed
                   
    ForEach ( $CompletedExportRequest in $CompletedExportRequests ) {

        If ( ( Get-Item $CompletedExportRequest.FilePath ).Length -eq 271360 ) {

            write-log ( "Ð­ÐºÑÐ¿Ð¾Ñ€Ñ‚ Ð¿Ð¾Ñ‡Ñ‚Ð¾Ð²Ð¾Ð³Ð¾ ÑÑ‰Ð¸ÐºÐ° " + $CompletedExportRequest.Mailbox + " Ð² PST Ð·Ð°Ð²ÐµÑ€ÑˆÐ¸Ð»ÑÑ Ð¾ÑˆÐ¸Ð±ÐºÐ¾Ð¹. Ð Ð°Ð·Ð¼ÐµÑ€ Ð²Ñ‹Ñ…Ð¾Ð´Ð½Ð¾Ð³Ð¾ Ñ„Ð°Ð¹Ð»Ð° Ñ€Ð°Ð²ÐµÐ½ 265Kb. ÐÐµÐ¾Ð±Ñ…Ð¾Ð´Ð¸Ð¼Ð¾ Ð¿Ñ€ÐµÐ´Ð¾ÑÑ‚Ð°Ð²Ð¸Ñ‚ÑŒ ÑƒÑ‡ÐµÑ‚Ð½Ð¾Ð¹ Ð·Ð°Ð¿Ð¸ÑÐ¸, Ð¾Ñ‚ Ð¸Ð¼ÐµÐ½Ð¸ ÐºÐ¾Ñ‚Ð¾Ñ€Ð¾Ð¹ Ð·Ð°Ð¿ÑƒÑÐºÐ°ÐµÑ‚ÑÑ ÑÐºÑ€Ð¸Ð¿Ñ‚, Ð´Ð¾ÑÑ‚ÑƒÐ¿ ÑƒÑ€Ð¾Ð²Ð½Ñ Full Access Ðº Ð´Ð°Ð½Ð½Ð¾Ð¼Ñƒ Ð¿Ð¾Ñ‡Ñ‚Ð¾Ð²Ð¾Ð¼Ñƒ ÑÑ‰Ð¸ÐºÑƒ." )
            $CurrentUser = [Environment]::UserName
            Add-MailboxPermission -Identity $CompletedExportRequest.Mailbox -User $CurrentUser -AccessRights 'FullAccess' -ErrorAction SilentlyContinue | Out-Null
            Start-Sleep 15
            write-log ('Ð£Ð´Ð°Ð»ÑÐµÐ¼ Ñ„Ð°Ð¹Ð» ÑÐºÑÐ¿Ð¾Ñ€Ñ‚Ð° ' + $CompletedExportRequest.FilePath)
            Remove-Item -Path $CompletedExportRequest.FilePath -Force -Confirm:$False -WhatIf:$debugMode -ErrorAction SilentlyContinue
            write-log "Ð£Ð´Ð°Ð»ÑÐµÐ¼ Ð·Ð°Ð¿Ñ€Ð¾Ñ ÑÐºÑÐ¿Ð¾Ñ€Ñ‚Ð°"
            $CompletedExportRequest | Remove-MailboxExportRequest -WhatIf:$debugMode -Confirm:$False
            write-log "ÐŸÐµÑ€ÐµÑÐ¾Ð·Ð´Ð°ÐµÐ¼ Ð·Ð°Ð¿Ñ€Ð¾Ñ ÑÐºÑÐ¿Ð¾Ñ€Ñ‚Ð°"
            New-MailboxExportRequest -Mailbox $CompletedExportRequest.Mailbox -FilePath $CompletedExportRequest.FilePath  -WhatIf:$debugMode -Confirm:$False
            
        }

    }

}

function Disable-MailboxWithComplitedExport {

    $CompletedExportRequests = Get-MailboxExportRequest  | ? { $_.Status -match "Completed" }

    ForEach ( $CompletedExportRequest in $CompletedExportRequests ) {

        write-log ( "Ð­ÐºÑÐ¿Ð¾Ñ€Ñ‚ Ð¿Ð¾Ñ‡Ñ‚Ð¾Ð²Ð¾Ð³Ð¾ ÑÑ‰Ð¸ÐºÐ° " + $CompletedExportRequest.Mailbox + " Ð² PST Ð·Ð°Ð²ÐµÑ€ÑˆÐµÐ½." )
        $CompletedExportRequest | Remove-MailboxExportRequest -WhatIf:$debugMode -Confirm:$False
        write-log "ÐžÑ‚ÐºÐ»ÑŽÑ‡Ð°ÐµÐ¼ Ð¿Ð¾Ñ‡Ñ‚Ð¾Ð²Ñ‹Ð¹ ÑÑ‰Ð¸Ðº"
        Disable-Mailbox $CompletedExportRequest.Mailbox -Confirm:$False -WhatIf:$debugMode

    }

}

function Check-ExportFinishing {

    $Flag = $False
    $ExportRequests = Get-MailboxExportRequest
    $FaiedExportRequests = $ExportRequests | ? { $_.Status -eq "Failed" }
        
    If ( -not($ExportRequests) ) {

        $Flag = $True
        write-log "Ð’ÑÐµ ÑÐºÑÐ¿Ð¾Ñ€Ñ‚Ñ‹ Ð·Ð°Ð²ÐµÑ€ÑˆÐµÐ½Ñ‹"

    } ElseIf ( $ExportRequests.Count -eq $FaiedExportRequests.Count ) {

        $Flag = $True
        $FaiedExportRequests | Remove-MailboxExportRequest -WhatIf:$debugMode -Confirm:$False

        ForEach ($FaiedExportRequest in $FaiedExportRequests) {

            write-log ( "Ð­ÐºÑÐ¿Ð¾Ñ€Ñ‚ Ð¿Ð¾Ñ‡Ñ‚Ð¾Ð²Ð¾Ð³Ð¾ ÑÑ‰Ð¸ÐºÐ° " + $FaiedExportRequest.Mailbox + " Ð² PST Ð·Ð°Ð²ÐµÑ€ÑˆÐ¸Ð»ÑÑ Ð¾ÑˆÐ¸Ð±ÐºÐ¾Ð¹" )
               
        }

    }

    Return $Flag
}

function Check-ExportState {

    $Timer = 90

    do {
        
        Write-Host ( ( Get-date ).ToString( "T" ) + " Waiting of export completion" ) -ForegroundColor Green

        Try {

            Get-MailboxExportRequest | Get-MailboxExportRequestStatistics | Select-Object -Property SourceAlias,SourceDatabase,PercentComplete,BytesTransferredPerMinute | Sort-Object -Property Status,Identity | Format-Table -AutoSize
                    
        } Catch {

                write-log $Error[0].Exception
                write-log $Error[0].InvocationInfo.Line

        }
        
        Start-Sleep $Timer
        $Timer = $Timer - 1

                
        Restart-FailedMailboxExportRequests
        Restart-MailboxExportRequestsWithFullRights
        Disable-MailboxWithComplitedExport
        Check-ExportFinishing

    } until ( Check-ExportFinishing -or $Timer -eq 0)

}

#ÐŸÐµÑ€ÐµÐ¼ÐµÑ‰ÐµÐ½Ð¸Ðµ Ð²Ñ‹Ð³Ñ€ÑƒÐ¶ÐµÐ½Ð½Ñ‹Ñ… Ð² PST Ñ„Ð°Ð¹Ð»Ñ‹ Ð¿Ð¾Ñ‡Ñ‚Ð¾Ð²Ñ‹Ñ… ÑÑ‰Ð¸ÐºÐ¾Ð² Ð½Ð° Ñ„Ð°Ð¹Ð»Ð¾Ð²Ñ‹Ð¹ Ñ€ÐµÑÑƒÑ€Ñ Ð°Ñ€Ñ…Ð¸Ð²Ð°.
function Move-ArchivePSTFiles {

    ForEach ( $ADUser in $ADUsers ) {

        $PSTFilePath = "\\exch-mb27\e$\PST\" + $ADUser.sAMAccountName + ".pst"
        $NewPSTFilePath = "\\file-06\d$\PST_backup\Ð£Ð´Ð°Ð»ÐµÐ½Ð½Ñ‹Ðµ Ñ ÑÐµÑ€Ð²ÐµÑ€Ð°\" + ( [regex]::match( $PSTFilePath, "[^\\]*$" ).Value )

        If ( ( Test-Path $PSTFilePath ) -and ( Test-FileLock $PSTFilePath ) ) {
    
            write-log ( "ÐŸÐµÑ€ÐµÐ½Ð¾ÑÐ¸Ð¼ Ñ„Ð°Ð¹Ð» ÑÐºÑÐ¿Ð¾Ñ€Ñ‚Ð° Ð² Ð½Ð¾Ð²Ð¾Ðµ Ñ€Ð°ÑÐ¿Ð¾Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ " + $NewPSTFilePath )
            move-item -LiteralPath $PSTFilePath -Destination $NewPSTFilePath -Force -Confirm:$False -WhatIf:$debugMode -ErrorAction SilentlyContinue
            
        }
                
    }

}

function Clean-ExportDirectory {

write-log  'ÐŸÐµÑ€ÐµÐ½Ð¾ÑÐ¸Ð¼ Ð²ÑÐµ Ñ„Ð°Ð¹Ð»Ñ‹ Ð¸Ð· \\exch-mb27\e$\PST\ Ð² \\file-06\d$\PST_backup\Ð£Ð´Ð°Ð»ÐµÐ½Ð½Ñ‹Ðµ Ñ ÑÐµÑ€Ð²ÐµÑ€Ð°\'
move-item -Path "\\exch-mb27\e$\PST\*.pst"  -Destination "\\exch-mb27\e$\PST" -Force -Confirm:$False -WhatIf:$debugMode -ErrorAction SilentlyContinue
            
}

#Ð—Ð°ÐºÑ€Ñ‹Ñ‚Ð¸Ðµ ÑƒÐ´Ð°Ð»ÐµÐ½Ð½Ð¾Ð¹ ÑÐµÑÑÐ¸Ð¸ PS Ð¸ Ð·Ð°Ð²ÐµÑ€ÑˆÐµÐ½Ð¸Ðµ Ñ€Ð°Ð±Ð¾Ñ‚Ñ‹ ÑÐºÑ€Ð¸Ð¿Ñ‚Ð°.
function Finalize-Script {

    if ( $Session ) {

        Remove-PSSession $Session

    }

    write-log  "Ð—Ð°ÐºÑ€Ñ‹Ð²Ð°ÐµÐ¼ PSSession Ð´Ð¾ ÑÐµÑ€Ð²ÐµÑ€Ð° Exchange"
    write-log  "Ð¡ÐºÑ€Ð¸Ð¿Ñ‚ Ð·Ð°Ð²ÐµÑ€ÑˆÐ¸Ð» Ñ€Ð°Ð±Ð¾Ñ‚Ñƒ"
    exit

}

function Clean-ADUserGroups {

    foreach ( $Group in $ADUser.MemberOf ) {

        if ( !( $Group -match "DV-users|MS-dax|Domain Users" ) ) {

            write-log ( "ÐŸÐ¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»ÑŒ " + $ADUser.SamAccountName + " ÑƒÐ´Ð°Ð»ÑÐµÑ‚ÑÑ Ð¸Ð· Ð³Ñ€ÑƒÐ¿Ð¿Ñ‹ $Group")

            Try {

                Remove-AdGroupMember -Identity $Group -members $ADUser.SamAccountName -Confirm:$false -WhatIf:$debugMode
    
            } catch {

                write-log $Error[0].Exception
                write-log $Error[0].InvocationInfo.Line

            }

        }

    }

}

function Move-ADUserToOUForDisabledUsers {

    If ( $AdUser.DN -match "OU=Sochi" ) {
    
        $MoveToOU = "Sochi"
        
    } else {
    
        $MoveToOU = "Moscow"

    }
  
    $DestinationOU = "OU="+$MoveToOU+",OU=Disabled Users,DC=SOCHI-2014,DC=RU"
    write-log  "ÐŸÐµÑ€ÐµÐ½Ð¾ÑÐ¸Ð¼ ÑƒÑ‡ÐµÑ‚Ð½ÑƒÑŽ Ð·Ð°Ð¿Ð¸ÑÑŒ $Username Ð² $DestinationOU"

    Try {

        Get-ADUser -Identity $ADUser.SamAccountName | Move-ADObject -TargetPath $DestinationOU -WhatIf:$debugMode

    } catch {

        write-log $Error[0].Exception
        write-log $Error[0].InvocationInfo.Line

    }

}

Function Block-User {

    $GroupLogPath = Join-Path ( $CurrentDirectory ) "\$( $ADUser.SamAccountName ).xml"
    ( $ADUser.MemberOf | ConvertTo-XML â€“NoTypeInformation ).Save( $GroupLogPath )
    write-log ( "Ð¡Ð¿Ð¸ÑÐ¾Ðº Ð³Ñ€ÑƒÐ¿Ð¿ Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»Ñ " + $ADUser.SamAccountName + " Ð²Ñ‹Ð³Ñ€ÑƒÐ¶ÐµÐ½ Ð² $GroupLogPath" )
    $ADUser | fl | Out-File -FilePath ( [regex]::Replace( $GroupLogPath,'xml$','txt' ) )
    write-log "Ð’Ñ‹Ð³Ñ€ÑƒÐ¶ÐµÐ½Ñ‹ Ð°Ñ‚Ñ€Ð¸Ð±ÑƒÑ‚Ñ‹ ÑƒÑ‡ÐµÑ‚Ð½Ð¾Ð¹ Ð·Ð°Ð¿Ð¸ÑÐ¸ Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»Ñ $Username Ð² .txt Ñ„Ð°Ð¹Ð»"
    Clean-ADUserGroups
    write-log ( "Ð‘Ð»Ð¾ÐºÐ¸Ñ€ÑƒÐµÐ¼ ÑƒÑ‡ÐµÑ‚Ð½ÑƒÑŽ Ð·Ð°Ð¿Ð¸ÑÑŒ Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»Ñ " + $ADUser.SamAccountName )
    Disable-ADAccount $ADUser.SamAccountName -WhatIf:$debugMode
    write-log ( "Ð£Ð´Ð°Ð»ÑÐµÐ¼ Ð¸Ð½Ñ„Ð¾Ñ€Ð¼Ð°Ñ†Ð¸ÑŽ Ð¾ Ñ‚ÐµÐ»ÐµÑ„Ð¾Ð½Ð°Ñ… Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»Ñ " + $ADUser.SamAccountName )
    Set-ADUser -Identity $AdUser.SamAccountName -MobilePhone $Null -OfficePhone $Null -HomePhone $Null -WhatIf:$debugMode
    Move-ADUserToOUForDisabledUsers

  
}

function Create-PSSessionToExchange {

    param (

        [string]$ExchServer = 'exch-cas02-n1'

    )

    write-log "ÐŸÐ¾Ð¿Ñ‹Ñ‚ÐºÐ° ÑÐ¾Ð·Ð´Ð°Ñ‚ÑŒ PSSession Ð´Ð¾ ÑÐµÑ€Ð²ÐµÑ€Ð° $ExchServer"
    $ExchSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri ( "http://" + $ExchServer + "/Powershell/" ) -authentication Kerberos -ErrorAction SilentlyContinue
    Import-PSSession $ExchSession -AllowClobber | Out-Null
    if ( $ExchSession ) {

        write-log  "Ð£Ð´Ð°Ð»ÐµÐ½Ð½Ð°Ñ PS-ÑÐµÑÑÐ¸Ñ ÑÐ¾Ð·Ð´Ð°Ð½Ð°";
        Return $ExchSession

    } else {

        write-log  "Ð£Ð´Ð°Ð»ÐµÐ½Ð½Ð°Ñ PS-ÑÐµÑÑÐ¸Ñ Ð½Ðµ ÑÐ¾Ð·Ð´Ð°Ð½Ð°"
        exit

    }




}

$CurrentDirectory = Get-ScriptDirectory
$ErrorActionPreferenceState = $ErrorActionPreference
$ErrorActionPreference = "Stop"
import-module activedirectory
add-pssnapin quest.activeroles.admanagement
$PathToLogFile = $CurrentDirectory + "\Clear-DisabledUsers_" + (Get-Date -format yyyy-MM-dd_HH-mm-ss) + ".txt"
$Session = $null
$Session = Create-PSSessionToExchange
$ADUsers = $NULL
$ADUsers = Find-Users
$ADUsers | ft -AutoSize SamAccountName,Description,Title
Start-Sleep 10
Write-Host  "Export Mailboxes To PST" -ForegroundColor Green
#Clean-ExportDirectory
Export-MailboxesToPST
Write-Host "Check Export State" -ForegroundColor Green
Check-ExportState
Start-Sleep 15
Write-Host "Move Archive PST Files" -ForegroundColor Green
#Move-ArchivePSTFiles

ForEach ( $ADUser in $ADUsers ) {

    delete-profiles
    Block-User
        
}

$ErrorActionPreference = $ErrorActionPreferenceState
Finalize-Script
