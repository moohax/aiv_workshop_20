win_xwindowsoptionalfeature.ps1,3c4cca145ff7f5b5aad8453908735397,Scan result is 1. IsMalware: 0,IyFwb3dlcnNoZWxsCiMgPENPUFlSSUdIVD4KIyA8Q09ERUdFTk1FVEE+CiMKIyBUaGlzIGZpbGUgaXMgcGFydCBvZiBBbnNpYmxlCiMKIyBBbnNpYmxlIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKIyBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQojIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yCiMgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KIwojIEFuc2libGUgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKIyBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgojIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUKIyBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgojCiMgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKIyBhbG9uZyB3aXRoIEFuc2libGUuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uCgojIFdBTlRfSlNPTgojIFBPV0VSU0hFTExfQ09NTU9OClNldC1TdHJpY3RNb2RlIC1PZmYKJHBhcmFtcyA9IFBhcnNlLUFyZ3MgJGFyZ3MgLXN1cHBvcnRzX2NoZWNrX21vZGUgJHRydWUKJHJlc3VsdCA9IE5ldy1PYmplY3QgcHNvYmplY3QKU2V0LUF0dHIgJHJlc3VsdCAiY2hhbmdlZCIgJGZhbHNlCgoKCiNBVFRSSUJVVEU6TmFtZTtNQU5EQVRPUlk6VHJ1ZTtERUZBVUxUVkFMVUU6O0RFU0NSSVBUSU9OOjtDSE9JQ0VTOgokTmFtZSA9IEdldC1BdHRyIC1vYmogJHBhcmFtcyAtbmFtZSBOYW1lIC1mYWlsaWZlbXB0eSAkVHJ1ZSAtcmVzdWx0b2JqICRyZXN1bHQKI0FUVFJJQlVURTpFbnN1cmU7TUFOREFUT1JZOkZhbHNlO0RFRkFVTFRWQUxVRTo7REVTQ1JJUFRJT046O0NIT0lDRVM6QWJzZW50LFByZXNlbnQKJEVuc3VyZSA9IEdldC1BdHRyIC1vYmogJHBhcmFtcyAtbmFtZSBFbnN1cmUgLWZhaWxpZmVtcHR5ICRGYWxzZSAtcmVzdWx0b2JqICRyZXN1bHQKI0FUVFJJQlVURTpMb2dMZXZlbDtNQU5EQVRPUlk6RmFsc2U7REVGQVVMVFZBTFVFOjtERVNDUklQVElPTjo7Q0hPSUNFUzpFcnJvcnNBbmRXYXJuaW5nLEVycm9yc0FuZFdhcm5pbmdBbmRJbmZvcm1hdGlvbixFcnJvcnNPbmx5CiRMb2dMZXZlbCA9IEdldC1BdHRyIC1vYmogJHBhcmFtcyAtbmFtZSBMb2dMZXZlbCAtZmFpbGlmZW1wdHkgJEZhbHNlIC1yZXN1bHRvYmogJHJlc3VsdAojQVRUUklCVVRFOkxvZ1BhdGg7TUFOREFUT1JZOkZhbHNlO0RFRkFVTFRWQUxVRTo7REVTQ1JJUFRJT046O0NIT0lDRVM6CiRMb2dQYXRoID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIExvZ1BhdGggLWZhaWxpZmVtcHR5ICRGYWxzZSAtcmVzdWx0b2JqICRyZXN1bHQKI0FUVFJJQlVURTpOb1dpbmRvd3NVcGRhdGVDaGVjaztNQU5EQVRPUlk6RmFsc2U7REVGQVVMVFZBTFVFOjtERVNDUklQVElPTjo7Q0hPSUNFUzoKJE5vV2luZG93c1VwZGF0ZUNoZWNrID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIE5vV2luZG93c1VwZGF0ZUNoZWNrIC1mYWlsaWZlbXB0eSAkRmFsc2UgLXJlc3VsdG9iaiAkcmVzdWx0CiNBVFRSSUJVVEU6UHNEc2NSdW5Bc0NyZWRlbnRpYWxfdXNlcm5hbWU7TUFOREFUT1JZOkZhbHNlO0RFRkFVTFRWQUxVRTo7REVTQ1JJUFRJT046O0NIT0lDRVM6CiRQc0RzY1J1bkFzQ3JlZGVudGlhbF91c2VybmFtZSA9IEdldC1BdHRyIC1vYmogJHBhcmFtcyAtbmFtZSBQc0RzY1J1bkFzQ3JlZGVudGlhbF91c2VybmFtZSAtZmFpbGlmZW1wdHkgJEZhbHNlIC1yZXN1bHRvYmogJHJlc3VsdAojQVRUUklCVVRFOlBzRHNjUnVuQXNDcmVkZW50aWFsX3Bhc3N3b3JkO01BTkRBVE9SWTpGYWxzZTtERUZBVUxUVkFMVUU6O0RFU0NSSVBUSU9OOjtDSE9JQ0VTOgokUHNEc2NSdW5Bc0NyZWRlbnRpYWxfcGFzc3dvcmQgPSBHZXQtQXR0ciAtb2JqICRwYXJhbXMgLW5hbWUgUHNEc2NSdW5Bc0NyZWRlbnRpYWxfcGFzc3dvcmQgLWZhaWxpZmVtcHR5ICRGYWxzZSAtcmVzdWx0b2JqICRyZXN1bHQKI0FUVFJJQlVURTpSZW1vdmVGaWxlc09uRGlzYWJsZTtNQU5EQVRPUlk6RmFsc2U7REVGQVVMVFZBTFVFOjtERVNDUklQVElPTjo7Q0hPSUNFUzoKJFJlbW92ZUZpbGVzT25EaXNhYmxlID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIFJlbW92ZUZpbGVzT25EaXNhYmxlIC1mYWlsaWZlbXB0eSAkRmFsc2UgLXJlc3VsdG9iaiAkcmVzdWx0CiNBVFRSSUJVVEU6QXV0b0luc3RhbGxNb2R1bGU7TUFOREFUT1JZOkZhbHNlO0RFRkFVTFRWQUxVRTpmYWxzZTtERVNDUklQVElPTjpJZiB0cnVlLCB0aGUgcmVxdWlyZWQgZHNjIHJlc291cmNlL21vZHVsZSB3aWxsIGJlIGF1dG8taW5zdGFsbGVkIHVzaW5nIHRoZSBQb3dlcnNoZWxsIHBhY2thZ2UgbWFuYWdlcjtDSE9JQ0VTOnRydWUsZmFsc2UKJEF1dG9JbnN0YWxsTW9kdWxlID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIEF1dG9JbnN0YWxsTW9kdWxlIC1mYWlsaWZlbXB0eSAkRmFsc2UgLXJlc3VsdG9iaiAkcmVzdWx0IC1kZWZhdWx0IGZhbHNlCiNBVFRSSUJVVEU6QXV0b0NvbmZpZ3VyZUxjbTtNQU5EQVRPUlk6RmFsc2U7REVGQVVMVFZBTFVFOmZhbHNlO0RFU0NSSVBUSU9OOklmIHRydWUsIExDTSB3aWxsIGJlIGF1dG8tY29uZmlndXJlZCBmb3IgZGlyZWN0bHkgaW52b2tpbmcgRFNDIHJlc291cmNlcyAod2hpY2ggaXMgYSBvbmUtdGltZSByZXF1aXJlbWVudCBmb3IgQW5zaWJsZSBEU0MgbW9kdWxlcyk7Q0hPSUNFUzp0cnVlLGZhbHNlCiRBdXRvQ29uZmlndXJlTGNtID0gR2V0LUF0dHIgLW9iaiAkcGFyYW1zIC1uYW1lIEF1dG9Db25maWd1cmVMY20gLWZhaWxpZmVtcHR5ICRGYWxzZSAtcmVzdWx0b2JqICRyZXN1bHQgLWRlZmF1bHQgZmFsc2UKSWYgKCRFbnN1cmUpCnsKICAgIElmICgoJ0Fic2VudCcsJ1ByZXNlbnQnKSAtY29udGFpbnMgJEVuc3VyZSApIHsKICAgIH0KICAgIEVsc2UKICAgIHsKICAgICAgICBGYWlsLUpzb24gJHJlc3VsdCAiT3B0aW9uIEVuc3VyZSBoYXMgaW52YWxpZCB2YWx1ZSAkRW5zdXJlLiBWYWxpZCB2YWx1ZXMgYXJlICdBYnNlbnQnLCdQcmVzZW50JyIKICAgIH0KfQoKCklmICgkTG9nTGV2ZWwpCnsKICAgIElmICgoJ0Vycm9yc0FuZFdhcm5pbmcnLCdFcnJvcnNBbmRXYXJuaW5nQW5kSW5mb3JtYXRpb24nLCdFcnJvcnNPbmx5JykgLWNvbnRhaW5zICRMb2dMZXZlbCApIHsKICAgIH0KICAgIEVsc2UKICAgIHsKICAgICAgICBGYWlsLUpzb24gJHJlc3VsdCAiT3B0aW9uIExvZ0xldmVsIGhhcyBpbnZhbGlkIHZhbHVlICRMb2dMZXZlbC4gVmFsaWQgdmFsdWVzIGFyZSAnRXJyb3JzQW5kV2FybmluZycsJ0Vycm9yc0FuZFdhcm5pbmdBbmRJbmZvcm1hdGlvbicsJ0Vycm9yc09ubHknIgogICAgfQp9CgoKSWYgKCRBdXRvSW5zdGFsbE1vZHVsZSkKewogICAgSWYgKCgndHJ1ZScsJ2ZhbHNlJykgLWNvbnRhaW5zICRBdXRvSW5zdGFsbE1vZHVsZSApIHsKICAgIH0KICAgIEVsc2UKICAgIHsKICAgICAgICBGYWlsLUpzb24gJHJlc3VsdCAiT3B0aW9uIEF1dG9JbnN0YWxsTW9kdWxlIGhhcyBpbnZhbGlkIHZhbHVlICRBdXRvSW5zdGFsbE1vZHVsZS4gVmFsaWQgdmFsdWVzIGFyZSAndHJ1ZScsJ2ZhbHNlJyIKICAgIH0KfQoKCklmICgkQXV0b0NvbmZpZ3VyZUxjbSkKewogICAgSWYgKCgndHJ1ZScsJ2ZhbHNlJykgLWNvbnRhaW5zICRBdXRvQ29uZmlndXJlTGNtICkgewogICAgfQogICAgRWxzZQogICAgewogICAgICAgIEZhaWwtSnNvbiAkcmVzdWx0ICJPcHRpb24gQXV0b0NvbmZpZ3VyZUxjbSBoYXMgaW52YWxpZCB2YWx1ZSAkQXV0b0NvbmZpZ3VyZUxjbS4gVmFsaWQgdmFsdWVzIGFyZSAndHJ1ZScsJ2ZhbHNlJyIKICAgIH0KfQoKCmlmICgkUHNEc2NSdW5Bc0NyZWRlbnRpYWxfdXNlcm5hbWUpCnsKJFBzRHNjUnVuQXNDcmVkZW50aWFsX3NlY3VyZXBhc3N3b3JkID0gJFBzRHNjUnVuQXNDcmVkZW50aWFsX3Bhc3N3b3JkIHwgQ29udmVydFRvLVNlY3VyZVN0cmluZyAtYXNQbGFpblRleHQgLUZvcmNlCiRQc0RzY1J1bkFzQ3JlZGVudGlhbCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJFBzRHNjUnVuQXNDcmVkZW50aWFsX3VzZXJuYW1lLCRQc0RzY1J1bkFzQ3JlZGVudGlhbF9zZWN1cmVwYXNzd29yZCkKfQoKJERzY1Jlc291cmNlTmFtZSA9ICJ4V2luZG93c09wdGlvbmFsRmVhdHVyZSIKCiREc2NNb2R1bGVOYW1lID0gInhwc2Rlc2lyZWRzdGF0ZWNvbmZpZ3VyYXRpb24iCgojVGhpcyBjb2RlIGNvbWVzIGZyb20gcG93ZXJzaGVsbDJfZHNjcmVzb3VyY2V2ZXJpZnkucHMxIGluIHRoZSBEU0MtLT5BbnNpYmxlIGNvZGVnZW4gdG9vbAoKI1ZlcmlmeSBwb3dlcnNoZWxsIHZlcnNpb24KaWYgKCgkcHN2ZXJzaW9udGFibGUucHN2ZXJzaW9uLm1ham9yIC1nZSA1KSAtYW5kICgkcHN2ZXJzaW9udGFibGUucHN2ZXJzaW9uLmJ1aWxkIC1nZSAxMDAxOCkpCnsKCSNEbyBub3RoaW5nCn0KRWxzZQp7CglGYWlsLUpzb24gJHJlc3VsdCAiTG9jYWwgcG93ZXJzaGVsbCB2ZXJzaW9uIGlzIG5vdCBhdCB0aGUgcmV1aXJlZCB2ZXJzaW9uIChmb3VuZCB2ZXJzaW9uICQoJFBzdmVyc2lvbnRhYmxlLnBzdmVyc2lvbi50b3N0cmluZygpKSApIgp9CgppZiAoJEF1dG9JbnN0YWxsTW9kdWxlKQp7CiAgICAkQXV0b0luc3RhbGxNb2R1bGUgPSAkQXV0b0luc3RhbGxNb2R1bGUgfCBjb252ZXJ0dG8tYm9vbAp9CgoKJFJlc291cmNlRXhpc3RzID0gR2V0LURzY1Jlc291cmNlICRkc2NyZXNvdXJjZW5hbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKCmlmICghJFJlc291cmNlRXhpc3RzKQp7CiAgICAjRG93bmxvYWQgdGhlIG1vZHVsZSBjb250YWluaW5nIHRoZSByZXNvdXJjZSBpZiB0aGF0J3MgYWxsb3dlZAogICAgaWYgKCRBdXRvSW5zdGFsbE1vZHVsZSB8IGNvbnZlcnR0by1ib29sKQogICAgewogICAgICAgICNVU2UgZmluZC1wYWNrYWdlIHRvIGF1dG8taW5zdGFsbCB0aGUgbnVnZXQgYmluYXJpZXMKICAgICAgICBGaW5kLVBhY2thZ2Ugc29tZXRoaW5nIC1Gb3JjZUJvb3RzdHJhcCAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IG91dC1udWxsCiAgICAgICAgJHJlcyA9IEZpbmQtZHNjcmVzb3VyY2UgJGRzY3Jlc291cmNlbmFtZQogICAgICAgIGluc3RhbGwtbW9kdWxlICRyZXMubW9kdWxlbmFtZSAtZm9yY2UKICAgICAgICBTZXQtQXR0ciAkcmVzdWx0ICJBdXRvSW5zdGFsbGVkTW9kdWxlIiAkcmVzLm1vZHVsZW5hbWUKICAgIH0KICAgIAogICAgJFJlc291cmNlRXhpc3RzID0gR2V0LURzY1Jlc291cmNlICRkc2NyZXNvdXJjZW5hbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKfQoKaWYgKCEkUmVzb3VyY2VFeGlzdHMpCnsKICAgIEZhaWwtSnNvbiAkcmVzdWx0ICJVbmFibGUgdG8gbG9jYXRlIERTQyBtb2R1bGUgJGRzY21vZHVsZW5hbWUgYW5kL29yIERTQyByZXNvdXJjZSAkZHNjcmVzb3VyY2VuYW1lIgp9CgojQ2hlY2sgdGhhdCBMQ00gaXMgaW4gdGhlIHJpZ2h0IHN0YXR1cwokTGNtID0gR2V0LURzY0xvY2FsQ29uZmlndXJhdGlvbk1hbmFnZXIKaWYgKCgkbGNtLlJlZnJlc2hNb2RlKSAtZXEgIkRpc2FibGVkIikKewogICAgI0FsbCBnb29kCn0KRWxzZQp7CiAgICBpZiAoKCRhdXRvY29uZmlndXJlTGNtIHwgY29udmVydHRvLWJvb2wpIC1lcSAkdHJ1ZSkKICAgIHsKICAgICAgICAkcmVmcmVzaG1vZGUgPSAiRGlzYWJsZWQiCiAgICAgICAgI1JlY29uZmlndXJlIExDTQogICAgICAgIFtEc2NMb2NhbENvbmZpZ3VyYXRpb25NYW5hZ2VyKCldCiAgICAgICAgQ29uZmlndXJhdGlvbiBNZXRhIHsKICAgICAgICAgICAgICAgU2V0dGluZ3MgewogICAgICAgICAgICAgICAgICAgUmVmcmVzaE1vZGUgPSAkUmVmcmVzaE1vZGUKICAgICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0cnkKICAgICAgICB7CiAgICAgICAgICAgICYgbWV0YQogICAgICAgICAgICBTZXQtRHNjTG9jYWxDb25maWd1cmF0aW9uTWFuYWdlciAtUGF0aCAuXE1ldGEgIC1FcnJvckFjdGlvbiBTdG9wIC1FcnJvclZhcmlhYmxlIGxjbWVycm9yCiAgICAKICAgICAgICB9CiAgICAgICAgQ2F0Y2gKICAgICAgICB7CiAgICAgICAgICAgIEZhaWwtanNvbiAkcmVzdWx0ICJFcnJvciByZWNvbmZpZ3VyaW5nIExDTSIgCiAgICAgICAgfQogICAgfQogICAgRWxzZQogICAgewogICAgICAgIEZhaWwtanNvbiAkcmVzdWx0ICJEU0MgTG9jYWwgQ29uZmlndXJhdGlvbiBNYW5hZ2VyIGlzIG5vdCBzZXQgdG8gZGlzYWJsZWQuIFNldCB0aGUgbW9kdWxlIG9wdGlvbiBBdXRvQ29uZmlndXJlTGNtIHRvIFRydWUgaW4gb3JkZXIgdG8gYXV0by1jb25maWd1cmUgTENNIiAKICAgIH0KCn0KCiRBdHRyaWJ1dGVzID0gJHBhcmFtcyB8IGdldC1tZW1iZXIgfCB3aGVyZSB7JF8uTWVtYmVyVFlwZSAtZXEgIm5vdGVwcm9wZXJ0eSJ9ICB8IHNlbGVjdCAtRXhwYW5kUHJvcGVydHkgTmFtZQokQXR0cmlidXRlcyA9ICRhdHRyaWJ1dGVzIHwgd2hlcmUgeyRfIC1uZSAiYXV0b2luc3RhbGxtb2R1bGUifQokQXR0cmlidXRlcyA9ICRhdHRyaWJ1dGVzIHwgd2hlcmUgeyRfIC1uZSAiQXV0b0NvbmZpZ3VyZUxjbSJ9CiRBdHRyaWJ1dGVzID0gJGF0dHJpYnV0ZXMgfCB3aGVyZSB7JF8gLW5vdGxpa2UgIl9hbnNpYmxlKiJ9CgoKaWYgKCEoJEF0dHJpYnV0ZXMpKQp7CiAgICBGYWlsLUpzb24gLW9iaiAkcmVzdWx0IC1tZXNzYWdlICJObyBhdHRyaWJ1dGVzIHNwZWNpZmllZCIKfQoKI0Fsd2F5cyByZXR1cm4gdGhlIG5hbWUKc2V0LWF0dHIgLW9iaiAkcmVzdWx0IC1uYW1lICJyZXNvdXJjZV9uYW1lIiAtdmFsdWUgJGRzY3Jlc291cmNlbmFtZQpzZXQtYXR0ciAtb2JqICRyZXN1bHQgLW5hbWUgIkF0dHJpYnV0ZXMiIC12YWx1ZSAkQXR0cmlidXRlcwoKJEF0dHJpYiA9IEB7fQoKPCMKJHBhcmFtcy5LZXlzIHwgZm9yZWFjaC1vYmplY3QgewogICAgJEF0dHJpYi5BZGQoJF8sJHBhcmFtcy5JdGVtKCRfKSkKICAgIHNldC1hdHRyIC1vYmogJHJlc3VsdCAtbmFtZSAkXyAtdmFsdWUgJHBhcmFtcy5JdGVtKCRfKQogICAgfQojPgoKJENoZWNrTW9kZSA9ICRGYWxzZQokQ2hlY2tGbGFnID0gJHBhcmFtcy5wc29iamVjdC5Qcm9wZXJ0aWVzIHwgd2hlcmUgeyRfLk5hbWUgLWVxICJfYW5zaWJsZV9jaGVja19tb2RlIn0KaWYgKCRDaGVja0ZsYWcpCnsKICAgIGlmICgoJENoZWNrRmxhZy5WYWx1ZSkgLWVxICRUcnVlKQogICAgewogICAgICAgICRDaGVja01vZGUgPSAkVHJ1ZSAgICAKICAgIH0KICAgIAp9CgokS2V5cyA9ICRwYXJhbXMucHNvYmplY3QuUHJvcGVydGllcyB8IHdoZXJlIHskXy5NZW1iZXJUWXBlIC1lcSAiTm90ZXByb3BlcnR5In0gfCB3aGVyZSB7JF8uTmFtZSAtbmUgInJlc291cmNlX25hbWUifSB8d2hlcmUgeyRfLk5hbWUgLW5lICJhdXRvaW5zdGFsbG1vZHVsZSJ9IHx3aGVyZSB7JF8uTmFtZSAtbmUgImF1dG9jb25maWd1cmVsY20ifSB8IHdoZXJlIHskXy5OYW1lIC1ub3RsaWtlICJfYW5zaWJsZSoifSB8ICBzZWxlY3QgLUV4cGFuZFByb3BlcnR5IE5hbWUKZm9yZWFjaCAoJGtleSBpbiAka2V5cykKewogICAgJEF0dHJpYi5hZGQoJGtleSwgKCRwYXJhbXMuJGtleSkpCiAgICBzZXQtYXR0ciAtb2JqICRyZXN1bHQgLW5hbWUgJGtleSAtdmFsdWUgKCRwYXJhbXMuJGtleSkKfQoKJENvbmZpZyA9IEB7CiAgIE5hbWUgPSAoJGRzY3Jlc291cmNlbmFtZSkKICAgUHJvcGVydHkgPSBAewogICAgICAgIH0KICAgIH0KCgokUmVzb3VyY2UgPSBHZXQtRHNjUmVzb3VyY2UgLU5hbWUgJGRzY3Jlc291cmNlbmFtZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQppZiAoISRSZXNvdXJjZSkKewogICAgRmFpbC1Kc29uIC1vYmogJHJlc3VsdCAtbWVzc2FnZSAiUmVzb3VyY2UgJGRzY3Jlc291cmNlbmFtZSBub3QgZm91bmQiCn0KCiNDb252ZXJ0IHBhcmFtcyB0byBjb3JyZWN0IGRhdGF0eXBlIGFuZCBpbmplY3QKI0NvbnZlcnQgcGFyYW1zIHRvIGNvcnJlY3QgZGF0YXR5cGUgYW5kIGluamVjdAokYXR0cmliLktleXMgfCBmb3JlYWNoLW9iamVjdCB7CiAgICAkS2V5ID0gJF8ucmVwbGFjZSgiaXRlbV9uYW1lIiwgIm5hbWUiKQogICAgJHByb3AgPSAkcmVzb3VyY2UuUHJvcGVydGllcyB8IHdoZXJlIHskXy5OYW1lIC1lcSAka2V5fQogICAgaWYgKCEkcHJvcCkKICAgIHsKICAgICAgICAjSWYgaXRzIGEgY3JlZGVudGlhbCBzcGVjaWZpZWQgYXMgImNyZWRlbnRpYWwiLCBBbnNpYmxlIHdpbGwgc3VwcG9ydCBjcmVkZW50aWFsX3VzZXJuYW1lIGFuZCBjcmVkZW50aWFsX3Bhc3N3b3JkLiBOZWVkIHRvIGNoZWNrIGZvciB0aGF0CiAgICAgICAgJHByb3AgPSAkcmVzb3VyY2UuUHJvcGVydGllcyB8IHdoZXJlIHskXy5OYW1lIC1lcSAka2V5LlJlcGxhY2UoIl91c2VybmFtZSIsIiIpfQogICAgICAgIGlmICgkcHJvcCkKICAgICAgICB7CiAgICAgICAgICAgICNXZSBuZWVkIHRvIGNvbnN0cnVjdCBhIGNyZWQgb2JqZWN0LiBBdCB0aGlzIHBvaW50IGtleXZhbHVlIGlzIHRoZSB1c2VybmFtZSwgc28gZ3JhYiB0aGUgcGFzc3dvcmQKICAgICAgICAgICAgJFByb3BVc2VyTmFtZVZhbHVlID0gJGF0dHJpYi5JdGVtKCRfKQogICAgICAgICAgICAkUHJvcFBhc3N3b3JkID0gJGtleS5SZXBsYWNlKCJfdXNlcm5hbWUiLCJfcGFzc3dvcmQiKQogICAgICAgICAgICAkUHJvcFBhc3N3b3JkVmFsdWUgPSAkYXR0cmliLiRQcm9wUGFzc3dvcmQKCiAgICAgICAgICAgICRjcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCAoJFByb3BVc2VyTmFtZVZhbHVlLCAoJFByb3BQYXNzd29yZFZhbHVlIHwgQ29udmVydFRvLVNlY3VyZVN0cmluZyAtQXNQbGFpblRleHQgLUZvcmNlKSkKICAgICAgICAgICAgW1N5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSRLZXlWYWx1ZSA9ICRjcmVkCiAgICAgICAgICAgICRjb25maWcuUHJvcGVydHkuQWRkKCRrZXkuUmVwbGFjZSgiX3VzZXJuYW1lIiwiIiksJEtleVZhbHVlKQogICAgICAgIH0KICAgICAgICBFbHNlSWYgKCRrZXkuQ29udGFpbnMoIl9wYXNzd29yZCIpKQogICAgICAgIHsKICAgICAgICAgICAgI0RvIG5vdGhpbmcuIFdlIHN1Y2sgaW4gdGhlIHBhc3N3b3JkIGluIHRoZSBoYW5kbGVyIGZvciBfdXNlcm5hbWUsIHNvIHdlIGNhbiBqdXN0IHNraXAgaXQuCiAgICAgICAgfQogICAgICAgIEVsc2UKICAgICAgICB7CiAgICAgICAgICAgIEZhaWwtSnNvbiAtb2JqICRyZXN1bHQgLW1lc3NhZ2UgIlByb3BlcnR5ICRrZXkgaW4gcmVzb3VyY2UgJGRzY3Jlc291cmNlbmFtZSBpcyBub3QgYSB2YWxpZCBwcm9wZXJ0eSIKICAgICAgICB9CiAgICAgICAgCiAgICB9CiAgICBFbHNlSWYgKCRwcm9wLlByb3BlcnR5VHlwZSAtZXEgIltzdHJpbmddIikKICAgIHsKICAgICAgICBbU3RyaW5nXSRLZXlWYWx1ZSA9ICRhdHRyaWIuSXRlbSgkXykKICAgICAgICAkY29uZmlnLlByb3BlcnR5LkFkZCgka2V5LCRLZXlWYWx1ZSkKICAgIH0KICAgIEVsc2VJZiAoJHByb3AuUHJvcGVydHlUeXBlIC1lcSAiW3N0cmluZ1tdXSIpCiAgICB7CiAgICAgICAgI0tleVZhbHVlIGlzIGFuIGFycmF5IG9mIHN0cmluZ3MKICAgICAgICBbU3RyaW5nXSRUZW1wS2V5VmFsdWUgPSAkYXR0cmliLkl0ZW0oJF8pCiAgICAgICAgW1N0cmluZ1tdXSRLZXlWYWx1ZSA9ICRUZW1wS2V5VmFsdWUuU3BsaXQoIiwiKS5UcmltKCkKCiAgICAgICAgJGNvbmZpZy5Qcm9wZXJ0eS5BZGQoJGtleSwkS2V5VmFsdWUpCiAgICB9CiAgICBFbHNlSWYgKCRwcm9wLlByb3BlcnR5VHlwZSAtZXEgIltVSW50MzJbXV0iKQogICAgewogICAgICAgICNLZXlWYWx1ZSBpcyBhbiBhcnJheSBvZiBpbnRlZ2VycwogICAgICAgIFtTdHJpbmddJFRlbXBLZXlWYWx1ZSA9ICRhdHRyaWIuSXRlbSgkXykKICAgICAgICBbVUludDMyW11dJEtleVZhbHVlID0gJGF0dHJpYi5JdGVtKCRfLnNwbGl0KCIsIikuVHJpbSgpKQogICAgICAgICRjb25maWcuUHJvcGVydHkuQWRkKCRrZXksJEtleVZhbHVlKQogICAgfQogICAgRWxzZUlmICgkcHJvcC5Qcm9wZXJ0eVR5cGUgLWVxICJbYm9vbF0iKQogICAgewogICAgICAgIGlmICgkYXR0cmliLkl0ZW0oJF8pIC1saWtlICJ0cnVlIikKICAgICAgICB7CiAgICAgICAgICAgIFtib29sXSRLZXlWYWx1ZSA9ICR0cnVlCiAgICAgICAgfQogICAgICAgIEVsc2VJZiAoJGF0dHJpYi5JdGVtKCRfKSAtbGlrZSAiZmFsc2UiKQogICAgICAgIHsKICAgICAgICAgICAgW2Jvb2xdJEtleVZhbHVlID0gJGZhbHNlCiAgICAgICAgfQogICAgICAgICRjb25maWcuUHJvcGVydHkuQWRkKCRrZXksJEtleVZhbHVlKQogICAgfQogICAgRWxzZUlmICgkcHJvcC5Qcm9wZXJ0eVR5cGUgLWVxICJbaW50XSIpCiAgICB7CiAgICAgICAgW2ludF0kS2V5VmFsdWUgPSAkYXR0cmliLkl0ZW0oJF8pCiAgICAgICAgJGNvbmZpZy5Qcm9wZXJ0eS5BZGQoJGtleSwkS2V5VmFsdWUpCiAgICB9CiAgICBFbHNlSWYgKCRwcm9wLlByb3BlcnR5VHlwZSAtZXEgIltDaW1JbnN0YW5jZVtdXSIpCiAgICB7CiAgICAgICNLZXlWYWx1ZSBpcyBhbiBhcnJheSBvZiBDaW1JbnN0YW5jZQogICAgICBbQ2ltSW5zdGFuY2VbXV0kS2V5VmFsID0gQCgpCiAgICAgIFtTdHJpbmddJFRlbXBLZXlWYWx1ZSA9ICRhdHRyaWIuSXRlbSgkXykKICAgICAgI05lZWQgdG8gc3BsaXQgb24gdGhlIHN0cmluZyB9LCBiZWNhdXNlIHNvbWUgcHJvcGVydHkgdmFsdWVzIGhhdmUgY29tbWFzIGluIHRoZW0KICAgICAgW1N0cmluZ1tdXSRLZXlWYWx1ZVN0ciA9ICRUZW1wS2V5VmFsdWUgLXNwbGl0KCJ9LCIpCiAgICAgICNHbyB0aHJvdWdoIGVhY2ggc3RyaW5nIG9mIHByb3BlcnRpZXMgYW5kIGNyZWF0ZSBhIGhhc2ggb2YgdGhlbQogICAgICBmb3JlYWNoKCRzdHIgaW4gJEtleVZhbHVlU3RyKQogICAgICB7CiAgICAgICAgW3N0cmluZ1tdXSRwcm9wZXJ0aWVzID0gJHN0ci5TcGxpdCgieyIpWzFdLlJlcGxhY2UoIn0iLCIiKS5UcmltKCkuU3BsaXQoW2Vudmlyb25tZW50XTo6TmV3TGluZSkuVHJpbSgpCiAgICAgICAgJHBycGggPSBAe30KICAgICAgICBmb3JlYWNoKCRwIGluICRwcm9wZXJ0aWVzKQogICAgICAgIHsKICAgICAgICAgICRwQXJyID0gJHAgLXNwbGl0ICI9IgogICAgICAgICAgI2lmIHRoZSB2YWx1ZSBjYW4gYmUgYW4gaW50IHdlIG11c3QgY29udmVydCBpdCB0byBhbiBpbnQKICAgICAgICAgIGlmKFtib29sXSgkcEFyclsxXSAtYXMgW2ludF0gLWlzIFtpbnRdKSkKICAgICAgICAgIHsKICAgICAgICAgICAgICAkcHJwaC5BZGQoJHBBcnJbMF0uVHJpbSgpLCRwQXJyWzFdLlRyaW0oKSAtYXMgW2ludF0pCiAgICAgICAgICB9CiAgICAgICAgICBlbHNlCiAgICAgICAgICB7CiAgICAgICAgICAgICAgJHBycGguQWRkKCRwQXJyWzBdLlRyaW0oKSwkcEFyclsxXS5UcmltKCkpCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICNjcmVhdGUgdGhlIG5ldyBDaW1JbnN0YW5jZQogICAgICAgICRjaW0gPSBOZXctQ2ltSW5zdGFuY2UgLUNsYXNzTmFtZSAkc3RyLlNwbGl0KCJ7IilbMF0uVHJpbSgpIC1Qcm9wZXJ0eSAkcHJwaCAtQ2xpZW50T25seQogICAgICAgICNhZGQgdGhlIG5ldyBDaW1JbnN0YW5jZSB0byB0aGUgYXJyYXkKICAgICAgICAkS2V5VmFsICs9ICRjaW0KICAgICAgfQogICAgICAkY29uZmlnLlByb3BlcnR5LkFkZCgka2V5LCRLZXlWYWwpCiAgICB9CiAgfQoKdHJ5CnsKICAgICNJbnZva2UgV01GNSBwcm9kdWN0aW9uIHByZXZpZXcgZGlmZmVyZW50bHkgdGhhbiBmZWIgcHJldmlldwogICAgJFRhcmdldFZlcnNpb24gPSBbdmVyc2lvbl06Om5ldygiNS4wLjEwNTE0LjYiKQogICAgaWYgKCRQU1ZlcnNpb25UYWJsZS5QU1ZlcnNpb24uQ29tcGFyZVRvKCRUYXJnZXRWZXJzaW9uKSAtZ2UgMCkKICAgIHsKICAgICAgICAjQ3VycmVudCBob3N0cyB2ZXJzaW9uIGlzIHByb2R1Y3Rpb24gcHJldm9ldyBvciBoaWdoZXIuIFVzZSBtb2R1bGVuYW1lIHdoZW4gaW52b2tpbmcuCiAgICAgICAgaWYgKCRyZXNvdXJjZS5Nb2R1bGVOYW1lIC1uZSAkbnVsbCkKICAgICAgICB7CiAgICAgICAgICAgICRQYXJhbXMgPSBAeyJNb2R1bGVuYW1lIj0kcmVzb3VyY2UuTW9kdWxlbmFtZX0gICAgCiAgICAgICAgfQogICAgICAgIGVsc2UgCiAgICAgICAgewogICAgICAgICAgICAkUGFyYW1zID0gQHsiTW9kdWxlbmFtZSI9IlBTRGVzaXJlZFN0YXRlQ29uZmlndXJhdGlvbiJ9ICAgIAogICAgICAgIH0KICAgICAgICAKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICAkUGFyYW1zID0gQHt9CiAgICB9CgogICAgJFRlc3RSZXN1bHQgPSBJbnZva2UtRHNjUmVzb3VyY2UgQENvbmZpZyAtTWV0aG9kIFRlc3QgQHBhcmFtcyAtRXJyb3JWYXJpYWJsZSBUZXN0RXJyb3IgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgIGlmICgkVGVzdEVycm9yKQogICAgewogICAgICAgdGhyb3cgKCRUZXN0RXJyb3JbMF0uRXhjZXB0aW9uLk1lc3NhZ2UpCiAgICB9CiAgICBFbHNlSWYgKCgkdGVzdFJlc3VsdC5JbkRlc2lyZWRTdGF0ZSkgLW5lICR0cnVlKSAKICAgIHsKICAgICAgICBpZiAoJENoZWNrTW9kZSAtZXEgJEZhbHNlKQogICAgICAgIHsKICAgICAgICAgICAgJFNldCA9IEludm9rZS1Ec2NSZXNvdXJjZSAtTWV0aG9kIFNldCBAQ29uZmlnICBAcGFyYW1zIC1FcnJvclZhcmlhYmxlIFNldEVycm9yIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlCiAgICAgICAgfQogICAgICAgIAogICAgICAgIFNldC1BdHRyICRyZXN1bHQgImNoYW5nZWQiICR0cnVlCiAgICAgICAgaWYgKChnZXQtdmFyaWFibGUgfCB3aGVyZSB7JF8uTmFtZSAtZXEgInNldGVycm9yIn0pIC1hbmQgKCRTZXRFcnJvci5Db3VudCAtZ3QgMCkpCiAgICAgICAgewogICAgICAgICAgIHRocm93ICgkU2V0RXJyb3JbMF0uRXhjZXB0aW9uLk1lc3NhZ2UpCiAgICAgICAgfQogICAgfQoKfQpDYXRjaAp7CiAgICBGYWlsLUpzb24gLW9iaiAkcmVzdWx0IC1tZXNzYWdlICRfWzBdLkV4Y2VwdGlvbi5NZXNzYWdlCn0KCgojc2V0LWF0dHIgLW9iaiAkcmVzdWx0IC1uYW1lICJwcm9wZXJ0eSIgLXZhbHVlICRwcm9wZXJ0eQpFeGl0LUpzb24gLW9iaiAkcmVzdWx0CgoKCgo=
