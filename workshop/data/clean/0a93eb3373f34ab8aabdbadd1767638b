MSFT_xSQLServerDatabase.Tests.ps1,143ca6565251e5cf057a045f3d2c1e65,Scan result is 1. IsMalware: 0,JHNjcmlwdDpEU0NNb2R1bGVOYW1lICAgICAgPSAneFNRTFNlcnZlcicKJHNjcmlwdDpEU0NSZXNvdXJjZU5hbWUgICAgPSAnTVNGVF94U1FMU2VydmVyRGF0YWJhc2UnCgojcmVnaW9uIEhFQURFUgoKIyBVbml0IFRlc3QgVGVtcGxhdGUgVmVyc2lvbjogMS4xLjAKW1N0cmluZ10gJHNjcmlwdDptb2R1bGVSb290ID0gU3BsaXQtUGF0aCAtUGFyZW50IChTcGxpdC1QYXRoIC1QYXJlbnQgJFBTU2NyaXB0Um9vdCkKaWYgKCAoLW5vdCAoVGVzdC1QYXRoIC1QYXRoIChKb2luLVBhdGggLVBhdGggJHNjcmlwdDptb2R1bGVSb290IC1DaGlsZFBhdGggJ0RTQ1Jlc291cmNlLlRlc3RzJykpKSAtb3IgYAogICAgICgtbm90IChUZXN0LVBhdGggLVBhdGggKEpvaW4tUGF0aCAtUGF0aCAkc2NyaXB0Om1vZHVsZVJvb3QgLUNoaWxkUGF0aCAnRFNDUmVzb3VyY2UuVGVzdHNcVGVzdEhlbHBlci5wc20xJykpKSApCnsKICAgICYgZ2l0IEAoJ2Nsb25lJywnaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvRHNjUmVzb3VyY2UuVGVzdHMuZ2l0JywoSm9pbi1QYXRoIC1QYXRoICRzY3JpcHQ6bW9kdWxlUm9vdCAtQ2hpbGRQYXRoICdcRFNDUmVzb3VyY2UuVGVzdHNcJykpCn0KCkltcG9ydC1Nb2R1bGUgKEpvaW4tUGF0aCAtUGF0aCAkc2NyaXB0Om1vZHVsZVJvb3QgLUNoaWxkUGF0aCAnRFNDUmVzb3VyY2UuVGVzdHNcVGVzdEhlbHBlci5wc20xJykgLUZvcmNlCgokVGVzdEVudmlyb25tZW50ID0gSW5pdGlhbGl6ZS1UZXN0RW52aXJvbm1lbnQgYAogICAgLURTQ01vZHVsZU5hbWUgJHNjcmlwdDpEU0NNb2R1bGVOYW1lIGAKICAgIC1EU0NSZXNvdXJjZU5hbWUgJHNjcmlwdDpEU0NSZXNvdXJjZU5hbWUgYAogICAgLVRlc3RUeXBlIFVuaXQgCgojZW5kcmVnaW9uIEhFQURFUgoKIyBCZWdpbiBUZXN0aW5nCnRyeQp7CiAgICAjcmVnaW9uIFBlc3RlciBUZXN0IEluaXRpYWxpemF0aW9uCgogICAgIyBMb2FkaW5nIG1vY2tlZCBjbGFzc2VzCiAgICBBZGQtVHlwZSAtUGF0aCAoSm9pbi1QYXRoIC1QYXRoICRzY3JpcHQ6bW9kdWxlUm9vdCAtQ2hpbGRQYXRoICdUZXN0c1xVbml0XFN0dWJzXFNNTy5jcycpCgogICAgJG5vZGVOYW1lID0gJ2xvY2FsaG9zdCcKICAgICRpbnN0YW5jZU5hbWUgPSAnTVNTUUxTRVJWRVInCgogICAgJGRlZmF1bHRQYXJhbWV0ZXJzID0gQHsKICAgICAgICBTUUxJbnN0YW5jZU5hbWUgPSAkaW5zdGFuY2VOYW1lCiAgICAgICAgU1FMU2VydmVyID0gJG5vZGVOYW1lCiAgICB9CgogICAgI2VuZHJlZ2lvbiBQZXN0ZXIgVGVzdCBJbml0aWFsaXphdGlvbgoKICAgIERlc2NyaWJlICIkKCRzY3JpcHQ6RFNDUmVzb3VyY2VOYW1lKVxHZXQtVGFyZ2V0UmVzb3VyY2UiIHsKICAgICAgICBNb2NrIC1Db21tYW5kTmFtZSBDb25uZWN0LVNRTCAtTW9ja1dpdGggewogICAgICAgICAgICByZXR1cm4gTmV3LU9iamVjdCBPYmplY3QgfCAKICAgICAgICAgICAgICAgIEFkZC1NZW1iZXIgU2NyaXB0UHJvcGVydHkgRGF0YWJhc2VzIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gQHsKICAgICAgICAgICAgICAgICAgICAgICAgJ0FkdmVudHVyZVdvcmtzJyA9IEAoICggTmV3LU9iamVjdCBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZW1lbnQuU21vLkRhdGFiYXNlIC1Bcmd1bWVudExpc3QgQCggJG51bGwsICdBZHZlbnR1cmVXb3JrcycpICkgKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gLVBhc3NUaHJ1IC1Gb3JjZSAKICAgICAgICB9IC1Nb2R1bGVOYW1lICRzY3JpcHQ6RFNDUmVzb3VyY2VOYW1lIC1WZXJpZmlhYmxlCgogICAgICAgIENvbnRleHQgJ1doZW4gdGhlIHN5c3RlbSBpcyBub3QgaW4gdGhlIGRlc2lyZWQgc3RhdGUnIHsKICAgICAgICAgICAgJHRlc3RQYXJhbWV0ZXJzID0gJGRlZmF1bHRQYXJhbWV0ZXJzCiAgICAgICAgICAgICR0ZXN0UGFyYW1ldGVycyArPSBAewogICAgICAgICAgICAgICAgTmFtZSA9ICdVbmtub3duRGF0YWJhc2UnCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRyZXN1bHQgPSBHZXQtVGFyZ2V0UmVzb3VyY2UgQHRlc3RQYXJhbWV0ZXJzCgogICAgICAgICAgICBJdCAnU2hvdWxkIHJldHVybiB0aGUgc3RhdGUgYXMgYWJzZW50JyB7CiAgICAgICAgICAgICAgICAkcmVzdWx0LkVuc3VyZSB8IFNob3VsZCBCZSAnQWJzZW50JwogICAgICAgICAgICB9CgogICAgICAgICAgICBJdCAnU2hvdWxkIHJldHVybiB0aGUgc2FtZSB2YWx1ZXMgYXMgcGFzc2VkIGFzIHBhcmFtZXRlcnMnIHsKICAgICAgICAgICAgICAgICRyZXN1bHQuU1FMU2VydmVyIHwgU2hvdWxkIEJlICR0ZXN0UGFyYW1ldGVycy5TUUxTZXJ2ZXIKICAgICAgICAgICAgICAgICRyZXN1bHQuU1FMSW5zdGFuY2VOYW1lIHwgU2hvdWxkIEJlICR0ZXN0UGFyYW1ldGVycy5TUUxJbnN0YW5jZU5hbWUKICAgICAgICAgICAgICAgICRyZXN1bHQuTmFtZSB8IFNob3VsZCBCZSAkdGVzdFBhcmFtZXRlcnMuTmFtZQogICAgICAgICAgICB9CgogICAgICAgICAgICBJdCAnU2hvdWxkIGNhbGwgdGhlIG1vY2sgZnVuY3Rpb24gQ29ubmVjdC1TUUwnIHsKICAgICAgICAgICAgICAgICBBc3NlcnQtTW9ja0NhbGxlZCBDb25uZWN0LVNRTCAtRXhhY3RseSAtVGltZXMgMSAtTW9kdWxlTmFtZSAkc2NyaXB0OkRTQ1Jlc291cmNlTmFtZSAtU2NvcGUgQ29udGV4dAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgCiAgICAgICAgQ29udGV4dCAnV2hlbiB0aGUgc3lzdGVtIGlzIGluIHRoZSBkZXNpcmVkIHN0YXRlIGZvciBhIGRhdGFiYXNlJyB7CiAgICAgICAgICAgICR0ZXN0UGFyYW1ldGVycyA9ICRkZWZhdWx0UGFyYW1ldGVycwogICAgICAgICAgICAkdGVzdFBhcmFtZXRlcnMgKz0gQHsKICAgICAgICAgICAgICAgIE5hbWUgPSAnQWR2ZW50dXJlV29ya3MnCiAgICAgICAgICAgIH0KICAgIAogICAgICAgICAgICAkcmVzdWx0ID0gR2V0LVRhcmdldFJlc291cmNlIEB0ZXN0UGFyYW1ldGVycwoKICAgICAgICAgICAgSXQgJ1Nob3VsZCByZXR1cm4gdGhlIHN0YXRlIGFzIHByZXNlbnQnIHsKICAgICAgICAgICAgICAgICRyZXN1bHQuRW5zdXJlIHwgU2hvdWxkIEJlICdQcmVzZW50JwogICAgICAgICAgICB9CgogICAgICAgICAgICBJdCAnU2hvdWxkIHJldHVybiB0aGUgc2FtZSB2YWx1ZXMgYXMgcGFzc2VkIGFzIHBhcmFtZXRlcnMnIHsKICAgICAgICAgICAgICAgICRyZXN1bHQuU1FMU2VydmVyIHwgU2hvdWxkIEJlICR0ZXN0UGFyYW1ldGVycy5TUUxTZXJ2ZXIKICAgICAgICAgICAgICAgICRyZXN1bHQuU1FMSW5zdGFuY2VOYW1lIHwgU2hvdWxkIEJlICR0ZXN0UGFyYW1ldGVycy5TUUxJbnN0YW5jZU5hbWUKICAgICAgICAgICAgICAgICRyZXN1bHQuTmFtZSB8IFNob3VsZCBCZSAkdGVzdFBhcmFtZXRlcnMuTmFtZQogICAgICAgICAgICB9CgogICAgICAgICAgICBJdCAnU2hvdWxkIGNhbGwgdGhlIG1vY2sgZnVuY3Rpb24gQ29ubmVjdC1TUUwnIHsKICAgICAgICAgICAgICAgICBBc3NlcnQtTW9ja0NhbGxlZCBDb25uZWN0LVNRTCAtRXhhY3RseSAtVGltZXMgMSAtTW9kdWxlTmFtZSAkc2NyaXB0OkRTQ1Jlc291cmNlTmFtZSAtU2NvcGUgQ29udGV4dAogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBBc3NlcnQtVmVyaWZpYWJsZU1vY2tzCiAgICB9CiAgICAKICAgIERlc2NyaWJlICIkKCRzY3JpcHQ6RFNDUmVzb3VyY2VOYW1lKVxUZXN0LVRhcmdldFJlc291cmNlIiB7CiAgICAgICAgTW9jayAtQ29tbWFuZE5hbWUgQ29ubmVjdC1TUUwgLU1vY2tXaXRoIHsKICAgICAgICAgICAgcmV0dXJuIE5ldy1PYmplY3QgT2JqZWN0IHwgCiAgICAgICAgICAgICAgICBBZGQtTWVtYmVyIFNjcmlwdFByb3BlcnR5IERhdGFiYXNlcyB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEB7CiAgICAgICAgICAgICAgICAgICAgICAgICdBZHZlbnR1cmVXb3JrcycgPSBAKCAoIE5ldy1PYmplY3QgTWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VtZW50LlNtby5EYXRhYmFzZSAtQXJndW1lbnRMaXN0IEAoICRudWxsLCAnQWR2ZW50dXJlV29ya3MnKSApICkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IC1QYXNzVGhydSAtRm9yY2UgCiAgICAgICAgfSAtTW9kdWxlTmFtZSAkc2NyaXB0OkRTQ1Jlc291cmNlTmFtZSAtVmVyaWZpYWJsZQoKICAgICAgICBDb250ZXh0ICdXaGVuIHRoZSBzeXN0ZW0gaXMgbm90IGluIHRoZSBkZXNpcmVkIHN0YXRlJyB7CiAgICAgICAgICAgIEl0ICdTaG91bGQgcmV0dXJuIHRoZSBzdGF0ZSBhcyBhYnNlbnQgd2hlbiBkZXNpcmVkIGRhdGFiYXNlIGRvZXMgbm90IGV4aXN0JyB7CiAgICAgICAgICAgICAgICAkdGVzdFBhcmFtZXRlcnMgPSAkZGVmYXVsdFBhcmFtZXRlcnMKICAgICAgICAgICAgICAgICR0ZXN0UGFyYW1ldGVycyArPSBAewogICAgICAgICAgICAgICAgICAgIE5hbWUgPSAnVW5rbm93bkRhdGFiYXNlJwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRyZXN1bHQgPSBUZXN0LVRhcmdldFJlc291cmNlIEB0ZXN0UGFyYW1ldGVycwogICAgICAgICAgICAgICAgJHJlc3VsdCB8IFNob3VsZCBCZSAkZmFsc2UKCiAgICAgICAgICAgICAgICBBc3NlcnQtTW9ja0NhbGxlZCBDb25uZWN0LVNRTCAtRXhhY3RseSAtVGltZXMgMSAtTW9kdWxlTmFtZSAkc2NyaXB0OkRTQ1Jlc291cmNlTmFtZSAtU2NvcGUgSXQgCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEl0ICdTaG91bGQgcmV0dXJuIHRoZSBzdGF0ZSBhcyBwcmVzZW50IHdoZW4gZGVzaXJlZCBkYXRhYmFzZSBleGlzdCcgewogICAgICAgICAgICAgICAgJHRlc3RQYXJhbWV0ZXJzID0gJGRlZmF1bHRQYXJhbWV0ZXJzCiAgICAgICAgICAgICAgICAkdGVzdFBhcmFtZXRlcnMgKz0gQHsKICAgICAgICAgICAgICAgICAgICBOYW1lID0gJ0FkdmVudHVyZVdvcmtzJwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRyZXN1bHQgPSBUZXN0LVRhcmdldFJlc291cmNlIEB0ZXN0UGFyYW1ldGVycwogICAgICAgICAgICAgICAgJHJlc3VsdCB8IFNob3VsZCBCZSAkdHJ1ZQoKICAgICAgICAgICAgICAgIEFzc2VydC1Nb2NrQ2FsbGVkIENvbm5lY3QtU1FMIC1FeGFjdGx5IC1UaW1lcyAxIC1Nb2R1bGVOYW1lICRzY3JpcHQ6RFNDUmVzb3VyY2VOYW1lIC1TY29wZSBJdCAKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQ29udGV4dCAnV2hlbiB0aGUgc3lzdGVtIGlzIGluIHRoZSBkZXNpcmVkIHN0YXRlJyB7CiAgICAgICAgICAgIEl0ICdTaG91bGQgcmV0dXJuIHRoZSBzdGF0ZSBhcyBwcmVzZW50IHdoZW4gZGVzaXJlZCBkYXRhYmFzZSBleGlzdCcgewogICAgICAgICAgICAgICAgJHRlc3RQYXJhbWV0ZXJzID0gJGRlZmF1bHRQYXJhbWV0ZXJzCiAgICAgICAgICAgICAgICAkdGVzdFBhcmFtZXRlcnMgKz0gQHsKICAgICAgICAgICAgICAgICAgICBOYW1lID0gJ0FkdmVudHVyZVdvcmtzJwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRyZXN1bHQgPSBUZXN0LVRhcmdldFJlc291cmNlIEB0ZXN0UGFyYW1ldGVycwogICAgICAgICAgICAgICAgJHJlc3VsdCB8IFNob3VsZCBCZSAkdHJ1ZQoKICAgICAgICAgICAgICAgIEFzc2VydC1Nb2NrQ2FsbGVkIENvbm5lY3QtU1FMIC1FeGFjdGx5IC1UaW1lcyAxIC1Nb2R1bGVOYW1lICRzY3JpcHQ6RFNDUmVzb3VyY2VOYW1lIC1TY29wZSBJdCAKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgSXQgJ1Nob3VsZCByZXR1cm4gdGhlIHN0YXRlIGFzIGFic2VudCB3aGVuIGRlc2lyZWQgZGF0YWJhc2UgZG9lcyBub3QgZXhpc3QnIHsKICAgICAgICAgICAgICAgICR0ZXN0UGFyYW1ldGVycyA9ICRkZWZhdWx0UGFyYW1ldGVycwogICAgICAgICAgICAgICAgJHRlc3RQYXJhbWV0ZXJzICs9IEB7CiAgICAgICAgICAgICAgICAgICAgTmFtZSA9ICdVbmtub3duRGF0YWJhc2UnCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJHJlc3VsdCA9IFRlc3QtVGFyZ2V0UmVzb3VyY2UgQHRlc3RQYXJhbWV0ZXJzCiAgICAgICAgICAgICAgICAkcmVzdWx0IHwgU2hvdWxkIEJlICRmYWxzZQoKICAgICAgICAgICAgICAgIEFzc2VydC1Nb2NrQ2FsbGVkIENvbm5lY3QtU1FMIC1FeGFjdGx5IC1UaW1lcyAxIC1Nb2R1bGVOYW1lICRzY3JpcHQ6RFNDUmVzb3VyY2VOYW1lIC1TY29wZSBJdCAKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQXNzZXJ0LVZlcmlmaWFibGVNb2NrcwogICAgfQogICAgCiAgICBEZXNjcmliZSAiJCgkc2NyaXB0OkRTQ1Jlc291cmNlTmFtZSlcU2V0LVRhcmdldFJlc291cmNlIiB7CiAgICAgICAgTW9jayAtQ29tbWFuZE5hbWUgQ29ubmVjdC1TUUwgLU1vY2tXaXRoIHsKICAgICAgICAgICAgcmV0dXJuIE5ldy1PYmplY3QgT2JqZWN0IHwgCiAgICAgICAgICAgICAgICBBZGQtTWVtYmVyIFNjcmlwdFByb3BlcnR5IERhdGFiYXNlcyB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEB7CiAgICAgICAgICAgICAgICAgICAgICAgICdBZHZlbnR1cmVXb3JrcycgPSBAKCAoIE5ldy1PYmplY3QgTWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VtZW50LlNtby5EYXRhYmFzZSAtQXJndW1lbnRMaXN0IEAoICRudWxsLCAnQWR2ZW50dXJlV29ya3MnKSApICkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IC1QYXNzVGhydSAtRm9yY2UgCiAgICAgICAgfSAtTW9kdWxlTmFtZSAkc2NyaXB0OkRTQ1Jlc291cmNlTmFtZSAtVmVyaWZpYWJsZQoKICAgICAgICBNb2NrIC1Db21tYW5kTmFtZSBOZXctU3FsRGF0YWJhc2UgLU1vY2tXaXRoIHt9IC1Nb2R1bGVOYW1lICRzY3JpcHQ6RFNDUmVzb3VyY2VOYW1lIC1WZXJpZmlhYmxlICAgICAgICAKICAgICAgICBNb2NrIC1Db21tYW5kTmFtZSBSZW1vdmUtU3FsRGF0YWJhc2UgLU1vY2tXaXRoIHt9IC1Nb2R1bGVOYW1lICRzY3JpcHQ6RFNDUmVzb3VyY2VOYW1lIC1WZXJpZmlhYmxlCgogICAgICAgIENvbnRleHQgJ1doZW4gdGhlIHN5c3RlbSBpcyBub3QgaW4gdGhlIGRlc2lyZWQgc3RhdGUnIHsKICAgICAgICAgICAgSXQgJ1Nob3VsZCBjYWxsIHRoZSBmdW5jdGlvbiBOZXctU3FsRGF0YWJhc2Ugd2hlbiBkZXNpcmVkIGRhdGFiYXNlIHNob3VsZCBiZSBwcmVzZW50JyB7CiAgICAgICAgICAgICAgICAkdGVzdFBhcmFtZXRlcnMgPSAkZGVmYXVsdFBhcmFtZXRlcnMKICAgICAgICAgICAgICAgICR0ZXN0UGFyYW1ldGVycyArPSBAewogICAgICAgICAgICAgICAgICAgIE5hbWUgPSAnTmV3RGF0YWJhc2UnCiAgICAgICAgICAgICAgICAgICAgRW5zdXJlID0gJ1ByZXNlbnQnCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgU2V0LVRhcmdldFJlc291cmNlIEB0ZXN0UGFyYW1ldGVycwoKICAgICAgICAgICAgICAgIEFzc2VydC1Nb2NrQ2FsbGVkIENvbm5lY3QtU1FMIC1FeGFjdGx5IC1UaW1lcyAxIC1Nb2R1bGVOYW1lICRzY3JpcHQ6RFNDUmVzb3VyY2VOYW1lIC1TY29wZSBJdAogICAgICAgICAgICAgICAgQXNzZXJ0LU1vY2tDYWxsZWQgTmV3LVNxbERhdGFiYXNlIC1FeGFjdGx5IC1UaW1lcyAxIC1Nb2R1bGVOYW1lICRzY3JpcHQ6RFNDUmVzb3VyY2VOYW1lIC1TY29wZSBJdAogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBDb250ZXh0ICdXaGVuIHRoZSBzeXN0ZW0gaXMgbm90IGluIHRoZSBkZXNpcmVkIHN0YXRlJyB7CiAgICAgICAgICAgIEl0ICdTaG91bGQgY2FsbCB0aGUgZnVuY3Rpb24gUmVtb3ZlLVNxbERhdGFiYXNlIHdoZW4gZGVzaXJlZCBkYXRhYmFzZSBzaG91bGQgYmUgYWJzZW50JyB7CiAgICAgICAgICAgICAgICAkdGVzdFBhcmFtZXRlcnMgPSAkZGVmYXVsdFBhcmFtZXRlcnMKICAgICAgICAgICAgICAgICR0ZXN0UGFyYW1ldGVycyArPSBAewogICAgICAgICAgICAgICAgICAgIE5hbWUgPSAnQWR2ZW50dXJlV29ya3MnCiAgICAgICAgICAgICAgICAgICAgRW5zdXJlID0gJ0Fic2VudCcKICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgU2V0LVRhcmdldFJlc291cmNlIEB0ZXN0UGFyYW1ldGVycwoKICAgICAgICAgICAgICAgIEFzc2VydC1Nb2NrQ2FsbGVkIENvbm5lY3QtU1FMIC1FeGFjdGx5IC1UaW1lcyAxIC1Nb2R1bGVOYW1lICRzY3JpcHQ6RFNDUmVzb3VyY2VOYW1lIC1TY29wZSBJdAogICAgICAgICAgICAgICAgQXNzZXJ0LU1vY2tDYWxsZWQgUmVtb3ZlLVNxbERhdGFiYXNlIC1FeGFjdGx5IC1UaW1lcyAxIC1Nb2R1bGVOYW1lICRzY3JpcHQ6RFNDUmVzb3VyY2VOYW1lIC1TY29wZSBJdAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CmZpbmFsbHkKewogICAgI3JlZ2lvbiBGT09URVIKCiAgICBSZXN0b3JlLVRlc3RFbnZpcm9ubWVudCAtVGVzdEVudmlyb25tZW50ICRUZXN0RW52aXJvbm1lbnQgCgogICAgI2VuZHJlZ2lvbgp9Cg==
