merge-toc.ps1,6391a5bcc97316e49aab20065a6d4a9c,Scan result is 1. IsMalware: 0,w6/Cu8K/cGFyYW0oCltTdHJpbmddICRyZWZEb2NQYXRoID0gImRvY3MtcmVmLWF1dG9nZW4iLApbU3RyaW5nXSAkY29uY2VwdERvY1BhdGggPSAiZG9jcy1yZWYtY29uY2VwdHVhbCIsCltTdHJpbmddICR0aXRsZU1hcHBpbmdGaWxlTmFtZSA9ICJ0aXRsZU1hcHBpbmcuanNvbiIKKQoKCmZ1bmN0aW9uIFNvcnQtUmVmTGluZXMKewogIHBhcmFtKCRyZWZMaW5lcykKICAkcGFyZW50cyA9IG5ldy1vYmplY3Qgc3lzdGVtLmNvbGxlY3Rpb25zLnN0YWNrCiAgJHJlZlRvYyA9IEAoKQogICAgJFRleHRJbmZvID0gKEdldC1DdWx0dXJlKS5UZXh0SW5mbwoKICAkcGFyZW50SXRlbSA9ICROdWxsCiAgJHByZXZpb3VzSXRlbSA9ICROdWxsCgogIGZvcmVhY2goJGxpbmUgaW4gJHJlZkxpbmVzKQogIHsKICAgICR0b2NMaW5lID0gTmV3LU9iamVjdCBTeXN0ZW0uT2JqZWN0CiAgICAkY3VyTGV2ZWwgPSAwCiAgICAkaW5kZXggPSAwOwoKICAgIHdoaWxlKCRpbmRleCAtbHQgJGxpbmUuTGVuZ3RoIC1hbmQgJGxpbmVbJGluZGV4XSAtZXEgJyMnKQogICAgewogICAgICArKyRpbmRleAogICAgICArKyRjdXJMZXZlbAogICAgfQoKICAgICRvcmlnaW5hbFRpdGxlID0gRmluZC1Ub2NUaXRsZSAkbGluZQogICAgJG9yaWdpbmFsSHJlZiA9IEZpbmQtVG9jSHJlZiAkbGluZQogICAgJHVuYWx0ZXJlZFRpdGxlID0gJG9yaWdpbmFsVGl0bGUKCgoKICAgIFdyaXRlLUhvc3QgJGxpbmUgLUZvcmVncm91bmRDb2xvciBSZWQKICAgIGlmICgkcHJldmlvdXNJdGVtIC1uZSAkTnVsbCkKICAgIHsKICAgICAgaWYgKCRwcmV2aW91c0l0ZW0uTGV2ZWwgLWVxICRjdXJMZXZlbCkKICAgICAgewogICAgICAgICNubyBjaGFuZ2UgdG8gcGFyZW50IGl0ZW0KICAgICAgICAjJHBhcmVudEl0ZW0gPSAkcGFyZW50SXRlbQogICAgICB9CiAgICAgIGVsc2VpZiAoJHByZXZpb3VzSXRlbS5MZXZlbCAtbHQgJGN1ckxldmVsKSB7CiAgICAgICMgIGlmICMjIEEKICAgICAgIyAgVGhlbiAjIyMgQgogICAgICAgICRwYXJlbnRJdGVtID0gJHByZXZpb3VzSXRlbTsKICAgICAgICAkcGFyZW50cy5QdXNoKCRwYXJlbnRJdGVtKTsKICAgICAgfQogICAgICBlbHNlaWYgKCRwcmV2aW91c0l0ZW0uTGV2ZWwgLWd0ICRjdXJMZXZlbCkgewogICAgICAgIAogICAgICAgICMgIyBSZWYKICAgICAgICAjICMjIEEKICAgICAgICAjICMjIyBCCiAgICAgICAgIyAjIyBDCgogICAgICAgICMgIyBSZWYKICAgICAgICAjICMjIEEKICAgICAgICAjICMjIEIKICAgICAgICAjICMjIyBDCiAgICAgICAgIyAjIyMgRAogICAgICAgICMgIyMjIyBFCiAgICAgICAgIyAjIyMgRgogICAgICAgICMgIyMgRwoKCiAgICAgICAgV2hpbGUoJHBhcmVudEl0ZW0uTGV2ZWwgLWdlICRjdXJMZXZlbCAtYW5kICRwYXJlbnRzLkNvdW50IC1ndCAwKQogICAgICAgIHsKICAgICAgICAgICAgV3JpdGUtSG9zdCAiQmVmb3JlIFBvcDogQ3VycmVudCBQYXJlbnQgIiArICRwYXJlbnRJdGVtLlRvY1RpdGxlCiAgICAgICAgICAgICRwYXJlbnRJdGVtID0gJHBhcmVudHMuUG9wKCkKICAgICAgICB9CgogICAgICAgIGlmICgkcGFyZW50SXRlbSAtbmUgJG51bGwpCiAgICAgICAgewogICAgICAgICAgICAkcGFyZW50cy5QdXNoKCRwYXJlbnRJdGVtKQogICAgICAgIH0KCiAgICAgIH0KCiAgICB9CgogICAgIyBVcGRhdGUgVGl0bGUgV2l0aCBOZXcgVmFsdWUKICAgIGlmKCRTY3JpcHQ6dGl0bGVNYXAuQ29udGFpbnNLZXkoJHVuYWx0ZXJlZFRpdGxlKSkKICAgIHsKICAgICAgICAkbWFwSXRlbSA9ICRTY3JpcHQ6dGl0bGVNYXAuR2V0X0l0ZW0oJHVuYWx0ZXJlZFRpdGxlKQogICAgICAgICR0b2NUaXRsZSA9ICRtYXBJdGVtLlRvY1RpdGxlCgogICAgICAgICRvcmlnaW5hbFRpdGxlID0gJHRvY1RpdGxlCgogICAgICAgICRsaW5lID0gJGxpbmUuUmVwbGFjZSgkdW5hbHRlcmVkVGl0bGUsICR0b2NUaXRsZSkKICAgICAgICAkbGluZSA9ICRsaW5lLlRyaW1FbmQoJyknKSArICcgIicgKyAkdW5hbHRlcmVkVGl0bGUgKyAnIiknIAogICAgfQogICAgZWxzZSB7CiAgICAgICAgJHBhcmVudFRleHQgPSAiYXoiCgogICAgICAgIGlmICgkcGFyZW50SXRlbSAtbmUgJE51bGwgLWFuZCAkcGFyZW50SXRlbS5PcmlnaW5hbFRpdGxlIC1uZSAnUmVmZXJlbmNlJykKICAgICAgICB7CiAgICAgICAgICAgICRwYXJlbnRUZXh0ID0gJHBhcmVudEl0ZW0uT3JpZ2luYWxUaXRsZQogICAgICAgIH0KCiAgICAgICAgI25vdGhpbmcgaW4gdGhlIG1hcHBpbmcsIHNob3VsZCBkbyAqZGVmYXVsdCogcmVwbGFjZQogICAgICAgIGlmICgkcGFyZW50VGV4dCAtbmUgJE51bGwgLWFuZCAkdW5hbHRlcmVkVGl0bGUgLW1hdGNoICRwYXJlbnRUZXh0KQogICAgICAgIHsKICAgICAgICAgICAgJG5ld1RpdGxlID0gJHVuYWx0ZXJlZFRpdGxlIC1yZXBsYWNlICRwYXJlbnRUZXh0LCcnCiAgICAgICAgICAgICRuZXdUaXRsZSA9ICRuZXdUaXRsZS5UcmltKCkKCiAgICAgICAgICAgICRuZXdUaXRsZSA9ICRUZXh0SW5mby5Ub1RpdGxlQ2FzZSgkbmV3VGl0bGUpCgogICAgICAgICAgICAkb3JpZ2luYWxUaXRsZSA9ICRuZXdUaXRsZQoKICAgICAgICAgICAgJGxpbmUgPSAkbGluZS5SZXBsYWNlKCR1bmFsdGVyZWRUaXRsZSwgJG5ld1RpdGxlKQogICAgICAgICAgICAkbGluZSA9ICRsaW5lLlRyaW1FbmQoJyknKSArICcgIicgKyAkdW5hbHRlcmVkVGl0bGUgKyAnIiknIAogICAgICAgIH0KICAgIH0KCiAgICAjIGlmIGhyZWYgZW5kcyB3aXRoIGFuIGFuY2hvciwgaXQgc2hvdWxkIGJlIHNvcnRlZCBiZWZvcmUgZ3JvdXBzL3N1Yi1ncm91cHMgKHNvIGFkZCB6enogdG8gdGhvc2UgdGl0bGVzIGZvciBzb3J0aW5nKQogICAgaWYgKCRvcmlnaW5hbEhyZWYgLU1hdGNoICcjJykKICAgIHsKICAgIH0KICAgIGVsc2UgewogICAgICAgICRvcmlnaW5hbFRpdGxlID0gInp6eiIgKyAkb3JpZ2luYWxUaXRsZQogICAgfQoKCiAgICAjIGluY2x1ZGUgcGFyZW50IHRleHQsIHNvIHRoYXQgc29ydGluZyBkb2Vzbid0IGJyZWFrIHRoZSBuZXN0aW5nCiAgICBpZiAoJHBhcmVudEl0ZW0gLW5lICROdWxsKSB7CiAgICAgICRzb3J0S2V5ID0gJHBhcmVudEl0ZW0uU29ydEtleSArICIuIiArICRvcmlnaW5hbFRpdGxlCiAgICB9CiAgICBlbHNlIHsKICAgICAgICNObyBQYXJlbnQKICAgICAgJHNvcnRLZXkgPSAkb3JpZ2luYWxUaXRsZQogICAgfQoKCiAgICAkdG9jTGluZSB8IEFkZC1NZW1iZXIgLXR5cGUgTm90ZVByb3BlcnR5IC1uYW1lIFNvcnRLZXkgLXZhbHVlICRzb3J0S2V5CgoKICAgICR0b2NMaW5lIHwgQWRkLU1lbWJlciAtdHlwZSBOb3RlUHJvcGVydHkgLW5hbWUgTGV2ZWwgLXZhbHVlICRjdXJMZXZlbAogICAgJHRvY0xpbmUgfCBBZGQtTWVtYmVyIC10eXBlIE5vdGVQcm9wZXJ0eSAtbmFtZSBUb2NUaXRsZSAtdmFsdWUgJG9yaWdpbmFsVGl0bGUKICAgICR0b2NMaW5lIHwgQWRkLU1lbWJlciAtdHlwZSBOb3RlUHJvcGVydHkgLW5hbWUgT3JpZ2luYWxUaXRsZSAtdmFsdWUgJHVuYWx0ZXJlZFRpdGxlCgogICAgJHRvY0xpbmUgfCBBZGQtTWVtYmVyIC10eXBlIE5vdGVQcm9wZXJ0eSAtbmFtZSBPcmlnaW5hbExpbmUgLXZhbHVlICRsaW5lCgogICAgJHJlZlRvYyArPSAkdG9jTGluZQoKICAgICRwcmV2aW91c0l0ZW0gPSAkdG9jTGluZQogIH0KCgoKICAkcmVmVG9jID0gJHJlZlRvYyB8IFNvcnQtT2JqZWN0IC1Qcm9wZXJ0eSBTb3J0S2V5CgogICRyZXR1cm5MaW5lcyA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuTGlzdFtTeXN0ZW0uU3RyaW5nXQoKICBmb3JlYWNoICgkaXRlbSBpbiAkcmVmVG9jKSB7CiAgICAkcmV0dXJuTGluZXMuQWRkKCRpdGVtLk9yaWdpbmFsTGluZSkKICAgIFdyaXRlLUhvc3QgJGl0ZW0uT3JpZ2luYWxMaW5lIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93CiAgfQoKICAkcmVmTGluZXMuQ2xlYXIoKQogICRyZWZMaW5lcy5BZGRSYW5nZSgkcmV0dXJuTGluZXMpCgogIFdyaXRlLUhvc3QgIkZpbmlzaGluZyBzb3J0IG9mIFRPQyIKfQoKCmZ1bmN0aW9uIEluc2VydC1SZWZUT0MKewogIHBhcmFtKFtTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5MaXN0W1N5c3RlbS5TdHJpbmddXSAkZmluYWxMaW5lcywKICAgICAgICBbU3RyaW5nXSAkcmVmVG9jRmlsZSwKICAgICAgICBbU3RyaW5nXSAkdG9wUmVmR3JvdXBOYW1lLAogICAgICAgIFtTdHJpbmddICRwcmVmaXgpCgogICRyZWZMaW5lcyA9IEdldC1Db250ZW50ICRyZWZUb2NGaWxlCgogICRyZWZMaW5lQ29sbCA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuTGlzdFtTeXN0ZW0uU3RyaW5nXQoKICBmb3JlYWNoKCRsaW5lIGluICRyZWZMaW5lcykKICB7CiAgICAkcmVmTGluZUNvbGwuQWRkKCRsaW5lKQogIH0KCiAgU29ydC1SZWZMaW5lcyAkcmVmTGluZUNvbGwKCiAgJHJlZkxpbmVzID0gJHJlZkxpbmVDb2xsLlRvQXJyYXkoKQoKICAkZmlyc3RMaW5lID0gJHRydWUKCiAgZm9yZWFjaCgkbGluZSBpbiAkcmVmTGluZXMpCiAgewogICAgaWYoJGZpcnN0TGluZSkKICAgIHsKICAgICAgJGZpcnN0TGluZSA9ICRmYWxzZQogICAgICAkb3JpZ2luYWxUaXRsZSA9IEZpbmQtVG9jVGl0bGUgJGxpbmUKICAgICAgJGxpbmUgPSAkbGluZS5SZXBsYWNlKCRvcmlnaW5hbFRpdGxlLCAkdG9wUmVmR3JvdXBOYW1lKQogICAgfQogICAgJGZpbmFsTGluZXMuQWRkKCRwcmVmaXggKyAkbGluZSkKICB9Cn0KCmZ1bmN0aW9uIEZpbmQtVG9jVGl0bGUKewogIHBhcmFtKFtTdHJpbmddICRsaW5lKQoKICBpZihbU3RyaW5nXTo6SXNOdWxsT3JXaGl0ZVNwYWNlKCRsaW5lKSkKICB7CiAgICByZXR1cm4gJG51bGwKICB9CiAgJGxlZnRQb3MgPSAkbGluZS5JbmRleE9mKCdbJyk7CiAgJHJpZ2h0UG9zID0gJGxpbmUuSW5kZXhPZignXScpOwogIGlmKCRsZWZ0UG9zIC1nZSAwIC1hbmQgJHJpZ2h0UG9zIC1ndCAkbGVmdFBvcykKICB7CiAgICByZXR1cm4gJGxpbmUuU3Vic3RyaW5nKCRsZWZ0UG9zICsgMSwgJHJpZ2h0UG9zIC0gJGxlZnRQb3MgLTEpCiAgfQogIHJldHVybiAkbnVsbAp9CgpmdW5jdGlvbiBGaW5kLVRvY0hyZWYKewogIHBhcmFtKFtTdHJpbmddICRsaW5lKQoKICBpZihbU3RyaW5nXTo6SXNOdWxsT3JXaGl0ZVNwYWNlKCRsaW5lKSkKICB7CiAgICByZXR1cm4gJG51bGwKICB9CiAgJGxlZnRQb3MgPSAkbGluZS5JbmRleE9mKCcoJyk7CiAgJHJpZ2h0UG9zID0gJGxpbmUuSW5kZXhPZignKScpOwogIGlmKCRsZWZ0UG9zIC1nZSAwIC1hbmQgJHJpZ2h0UG9zIC1ndCAkbGVmdFBvcykKICB7CiAgICByZXR1cm4gJGxpbmUuU3Vic3RyaW5nKCRsZWZ0UG9zICsgMSwgJHJpZ2h0UG9zIC0gJGxlZnRQb3MgLTEpCiAgfQogIHJldHVybiAkbnVsbAp9CgoKZnVuY3Rpb24gSW5pdGlhbGl6ZS1UaXRsZU1hcAp7CiAgcGFyYW0oW1N0cmluZ10gJHRpdGxlTWFwcGluZ0ZpbGVOYW1lKQoKICBpZihbU3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkdGl0bGVNYXBwaW5nRmlsZU5hbWUpKQogIHsgcmV0dXJuIH0KCiAgJHRpdGxlTWFwcGluZ1NyYyA9IEdldC1Db250ZW50IC1SYXcgLVBhdGggJHRpdGxlTWFwcGluZ0ZpbGVOYW1lIHwgQ29udmVydEZyb20tSnNvbgogIGZvcmVhY2ggKCRpdGVtIGluICR0aXRsZU1hcHBpbmdTcmMuUFNPYmplY3QuTWVtYmVycykgewoKICAgICRpdGVtS2V5ID0gJGl0ZW0uTmFtZQogICAgJFRvY1RpdGxlID0gJGl0ZW0uUFNPYmplY3QuUHJvcGVydGllcy5WYWx1ZS5Ub2NUaXRsZQogICAgJFBhZ2VUaXRsZSA9ICRpdGVtLlBTT2JqZWN0LlByb3BlcnRpZXMuVmFsdWUuUGFnZVRpdGxlCiAgICAkbmV3T2JqID0gTmV3LU9iamVjdCBTeXN0ZW0uT2JqZWN0CiAgICAkbmV3T2JqIHwgQWRkLU1lbWJlciAtdHlwZSBOb3RlUHJvcGVydHkgLW5hbWUgIlRvY1RpdGxlIiAtdmFsdWUgJFRvY1RpdGxlCiAgICAkbmV3T2JqIHwgQWRkLU1lbWJlciAtdHlwZSBOb3RlUHJvcGVydHkgLW5hbWUgIlBhZ2VUaXRsZSIgLXZhbHVlICRQYWdlVGl0bGUKCiAgICAkU2NyaXB0OnRpdGxlTWFwLkFkZCgkaXRlbUtleSwkbmV3T2JqKQogIH0KfQoKZnVuY3Rpb24gUmVwbGFjZS1Db250ZW50VGl0bGUKewogIGZvcmVhY2goJG5hbWUgaW4gJFNjcmlwdDp0aXRsZU1hcC5LZXlzKQogIHsKICAgIFdyaXRlLUhvc3QgInRpdGxlTWFwIEtleTogIiAkbmFtZQoKICAgICNmaW5kIHB5Y2xpeW1sIGZpbGUKICAgIGlmKCRuYW1lIC1lcSAnYXonKQogICAgewogICAgICAkeW1sRmlsZVBhdGggPSAiaW5kZXgiCiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICR5bWxGaWxlUGF0aCA9ICRuYW1lLlN1YlN0cmluZygzKS5TcGxpdCgnICcpIC1qb2luICcvJwogICAgfQogICAgJHltbEZpbGVQYXRoID0gIiRyZWZEb2NQYXRoLyR5bWxGaWxlUGF0aC5weWNsaXltbCIKICAgIGlmKFRlc3QtUGF0aCAkeW1sRmlsZVBhdGgpCiAgICB7CiAgICAgIFdyaXRlLUhvc3QgIlJlcGxhY2luZyB0aXRsZSBmb3IgJHltbEZpbGVQYXRoIgogICAgICAkbGluZXMgPSBHZXQtQ29udGVudCAkeW1sRmlsZVBhdGgKICAgICAgJGZpbmFsTGluZXMgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkxpc3RbU3lzdGVtLlN0cmluZ10KICAgICAgJG9yaWdpbmFsTmFtZUxpbmUgPSAibmFtZTogIiArICRuYW1lCiAgICAgIGZvcmVhY2goJGxpbmUgaW4gJGxpbmVzKQogICAgICB7CiAgICAgICAgaWYoJGxpbmUuU3RhcnRzV2l0aCgibmFtZTogIikpCiAgICAgICAgewogICAgICAgICAgI1dyaXRlLUhvc3QgIlJlcGxhY2luZyBUaGlzIExpbmU6ICIgJGxpbmUKICAgICAgICAgICRwYWdlVGl0bGUgPSAkU2NyaXB0OnRpdGxlTWFwLkdldF9JdGVtKCRuYW1lKS5QYWdlVGl0bGUKICAgICAgICAgICRsaW5lID0gIm5hbWU6ICckcGFnZVRpdGxlIC0gJG5hbWUnIgogICAgICAgICAgI1dyaXRlLUhvc3QgIldpdGggdGhpczogIiAkbGluZQogICAgICAgIH0KICAgICAgICAkZmluYWxMaW5lcy5BZGQoJGxpbmUpCiAgICAgIH0KICAgICAgU2V0LUNvbnRlbnQgJHltbEZpbGVQYXRoICRmaW5hbExpbmVzCiAgICB9CiAgfQp9CgpXcml0ZS1Ib3N0ICJTdGFydCBtZXJnaW5nIFRPQyBpbiBmb2xkZXI6ICRyZWZEb2NQYXRoIGFuZCAkY29uY2VwdERvY1BhdGgiCgokY29uY2VwdFRvY0ZpbGUgPSBbU3lzdGVtLklPLlBhdGhdOjpDb21iaW5lKCRjb25jZXB0RG9jUGF0aCwgIlRPQy5tZCIpCmlmKC1ub3QgKFRlc3QtUGF0aCAkY29uY2VwdFRvY0ZpbGUpKQp7CiAgV3JpdGUtSG9zdCAiQ29uY2VwdHVhbCB0b2MgZmlsZSAkY29uY2VwdFRvY0ZpbGUgZG9lc24ndCBleGlzdCIgCiAgZXhpdCgxKSAKfQoKJGNvbmNlcHRMaW5lcyA9IEdldC1Db250ZW50ICRjb25jZXB0VG9jRmlsZQokcmVmVG9jRmlsZSA9IFtTeXN0ZW0uSU8uUGF0aF06OkNvbWJpbmUoJHJlZkRvY1BhdGgsICJyZWZUT0MubWQiKQoKJGZpbmFsVG9jTGluZXMgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkxpc3RbU3lzdGVtLlN0cmluZ10KJGluY2x1ZGVSZWZEb2MgPSAkZmFsc2UKJGxldmVsID0gMAoKZm9yZWFjaCgkbGluZSBpbiAkY29uY2VwdExpbmVzKQp7CiAgaWYoW1N5c3RlbS5TdHJpbmddOjpJc051bGxPcldoaXRlU3BhY2UoJGxpbmUpKQogIHsgYnJlYWsgfQoKICAkY3VyTGV2ZWwgPSAwCiAgJGluZGV4ID0gMDsKICB3aGlsZSgkaW5kZXggLWx0ICRsaW5lLkxlbmd0aCAtYW5kICRsaW5lWyRpbmRleF0gLWVxICcjJykKICB7CiAgICArKyRpbmRleAogICAgKyskY3VyTGV2ZWwKICB9CiAgaWYoJGN1ckxldmVsIC1lcSAwKQogIHsKICAgIFdyaXRlLUhvc3QgIlVuZXhwZWN0ZWQgdG9jIGNvbnRlbnQ6ICRsaW5lIgogICAgZXhpdCgxKQogIH0KCiAgaWYoJGxldmVsIC1lcSAwIC1hbmQgJGN1ckxldmVsIC1uZSAxKQogIHsKICAgIFdyaXRlLUhvc3QgIkZpcnN0IHRvYyBsaW5lIG11c3QgYmUgc3RhcnQgd2l0aCBvbmx5IG9uZSAjOiAkbGluZSIKICAgIGV4aXQoMSkKICB9CiAgCiAgaWYoJGN1ckxldmVsIC1ndCAkbGV2ZWwgKyAxKQogIHsKICAgIFdyaXRlLUhvc3QgIkludmFsaWQgdG9jIGxpbmU6ICRsaW5lIgogICAgZXhpdCgxKQogIH0KCiAgJHRpdGxlTWFwID0gQHt9CiAgSW5pdGlhbGl6ZS1UaXRsZU1hcCAkdGl0bGVNYXBwaW5nRmlsZU5hbWUKCgogICRsZXZlbCA9ICRjdXJMZXZlbAogIGlmKCRsaW5lLkluZGV4T2YoInJlZlRPQy5tZCIsIFtTeXN0ZW0uU3RyaW5nQ29tcGFyaXNvbl06Ok9yZGluYWxJZ25vcmVDYXNlKSAtZ2UgMCkKICB7CiAgICAkaW5jbHVkZVJlZkRvYyA9ICR0cnVlCiAgICAkcHJlZml4SW5kZW50ID0gIiMiKigkbGV2ZWwtMSkKICAgICR0b3BSZWZHcm91cE5hbWUgPSBGaW5kLVRvY1RpdGxlICRsaW5lCiAgICBJbnNlcnQtUmVmVE9DICRmaW5hbFRvY0xpbmVzICRyZWZUb2NGaWxlICR0b3BSZWZHcm91cE5hbWUgJHByZWZpeEluZGVudAogIH0KICBlbHNlCiAgewogICAgI2ZpeCB0aGUgbGluayB0byBwb2ludCBjb3JyZWN0IGNvbmNlcHR1YWwgZG9jLCBsZWF2ZSBhYnNvbHV0ZSBsaW5rIGFsb25lCiAgICAkbGluZSA9ICRsaW5lIC1yZXBsYWNlICdcXVsgXSpcKFsgXSooW2EtekEtWl0pJywnXShfQ09OQ0VQVERPQ1BBVEhfJDEnCiAgICAkbGluZSA9ICRsaW5lLlJlcGxhY2UoIl9DT05DRVBURE9DUEFUSF8iLCAiLi4vJGNvbmNlcHREb2NQYXRoLyIpCiAgICAkZmluYWxUb2NMaW5lcy5BZGQoJGxpbmUpCiAgfQp9CgpSZXBsYWNlLUNvbnRlbnRUaXRsZQoKJHRvY0ZpbGUgPSBbU3lzdGVtLklPLlBhdGhdOjpDb21iaW5lKCRyZWZEb2NQYXRoLCAiVE9DLm1kIikKU2V0LUNvbnRlbnQgJHRvY0ZpbGUgJGZpbmFsVG9jTGluZXMKCldyaXRlLUhvc3QgIkNvbXBsZXRlIG1lcmdpbmcgVE9DIgo=
