PsGet.psm1,8e778323d005aa41146799d9b17576a9,Scan result is 1. IsMalware: 0,PCMKLlNZTk9QU0lTCiAgICBQb3dlclNoZWxsIG1vZHVsZSBpbnN0YWxsYXRpb24gc3R1ZmYuCiAgICBVUkw6IGh0dHBzOi8vZ2l0aHViLmNvbS9wc2dldC9wc2dldAogICAgQmFzZWQgb24gaHR0cDovL3Bvc2hjb2RlLm9yZy8xODc1IEluc3RhbGwtTW9kdWxlIGJ5IEpvZWwgQmVubmV0dAojPgojcmVxdWlyZXMgLVZlcnNpb24gMi4wCgojcmVnaW9uIFNldHVwCgpXcml0ZS1EZWJ1ZyAnU2V0IHVwIHRoZSBnbG9iYWwgc2NvcGUgY29uZmlnIHZhcmlhYmxlcy4nCiRnbG9iYWw6VXNlck1vZHVsZUJhc2VQYXRoID0gSm9pbi1QYXRoIC1QYXRoIChbRW52aXJvbm1lbnRdOjpHZXRGb2xkZXJQYXRoKCdNeURvY3VtZW50cycpKSAtQ2hpbGRQYXRoICdXaW5kb3dzUG93ZXJTaGVsbFxNb2R1bGVzJwokZ2xvYmFsOkNvbW1vbkdsb2JhbE1vZHVsZUJhc2VQYXRoID0gSm9pbi1QYXRoIC1QYXRoICRlbnY6Q29tbW9uUHJvZ3JhbUZpbGVzIC1DaGlsZFBhdGggJ01vZHVsZXMnCgppZiAoLW5vdCAoVGVzdC1QYXRoIC1QYXRoOnZhcmlhYmxlOmdsb2JhbDpQc0dldERpcmVjdG9yeVVybCkpIHsKICAgICRnbG9iYWw6UHNHZXREaXJlY3RvcnlVcmwgPSAnaHR0cHM6Ly9naXRodWIuY29tL3BzZ2V0L3BzZ2V0L3Jhdy9tYXN0ZXIvRGlyZWN0b3J5LnhtbCcKfQojIE5PVEU6ICRnbG9iYWw6UHNHZXREZXN0aW5hdGlvbk1vZHVsZVBhdGggaXMgdXNlZCBieSBJbnN0YWxsLU1vZHVsZSBhcyBjb25maWd1cmF0aW9uIGlmIHNldCBieSB1c2VyLgoKV3JpdGUtRGVidWcgJ1NldCB1cCBuZWVkZWQgY29uc3RhbnRzLicKU2V0LVZhcmlhYmxlIC1OYW1lIFBTR0VUX1pJUCAtVmFsdWUgJ1pJUCcgLU9wdGlvbiBDb25zdGFudCAtU2NvcGUgU2NyaXB0ClNldC1WYXJpYWJsZSAtTmFtZSBQU0dFVF9QU00xIC1WYWx1ZSAnUFNNMScgLU9wdGlvbiBDb25zdGFudCAtU2NvcGUgU2NyaXB0ClNldC1WYXJpYWJsZSAtTmFtZSBQU0dFVF9QU0QxIC1WYWx1ZSAnUFNEMScgLU9wdGlvbiBDb25zdGFudCAtU2NvcGUgU2NyaXB0CgojZW5kcmVnaW9uCgojcmVnaW9uIEV4cG9ydGVkIENtZGxldHMKCjwjCiAgICAuU1lOT1BTSVMKICAgICAgICBJbnN0YWxscyBQb3dlclNoZWxsIG1vZHVsZXMgZnJvbSBhIHZhcmlldHkgb2Ygc291cmNlcyBpbmNsdWRpbmc6IE51Z2V0LCBQc0dldCBtb2R1bGUgZGlyZWN0b3J5LCBsb2NhbCBkaXJlY3RvcnksIHppcHBlZCBmb2xkZXIgYW5kIHdlYiBVUkwuCgogICAgLkRFU0NSSVBUSU9OCiAgICAgICAgU3VwcG9ydHMgaW5zdGFsbGluZyBtb2R1bGVzIGZvciB0aGUgY3VycmVudCB1c2VyIG9yIGFsbCB1c2VycyAoaWYgZWxldmF0ZWQpLgoKICAgIC5QQVJBTUVURVIgTW9kdWxlCiAgICAgICAgTmFtZSBvZiB0aGUgbW9kdWxlIHRvIGluc3RhbGwuCgogICAgLlBBUkFNRVRFUiBNb2R1bGVVcmwKICAgICAgICBVUkwgdG8gdGhlIG1vZHVsZSB0byBpbnN0YWxsOyBDYW4gYmUgZGlyZWN0IGxpbmsgdG8gUFNNMSBmaWxlIG9yIFpJUCBmaWxlLiBDYW4gYmUgYSBzaG9ydGVuZWQgbGluay4KCiAgICAuUEFSQU1FVEVSIE1vZHVsZVBhdGgKICAgICAgICBMb2NhbCBwYXRoIHRvIHRoZSBtb2R1bGUgdG8gaW5zdGFsbC4KCiAgICAuUEFSQU1FVEVSIE1vZHVsZU5hbWUKICAgICAgIEluIGNvbnRleHQgd2l0aCAtTW9kdWxlVXJsIG9yIC1Nb2R1bGVQYXRoIGl0IGlzIG5vdCBhbHdheXMgcG9zc2libGUgdG8gaW50ZXJmZXJlIHRoZSByaWdodCBNb2R1bGVOYW1lLCBlZy4gdGhlIGZpbGVuYW1lIGlzIHVua25vd24gb3IgdGhlIHppcCBhcmNoaXZlIGNvbnRhaW5zIG11bHRpcGxlIG1vZHVsZXMuCgogICAgLlBBUkFNRVRFUiBUeXBlCiAgICAgICAgV2hlbiBNb2R1bGVVcmwgb3IgTW9kdWxlUGF0aCBzcGVjaWZpZWQsIGFsbG93cyBzcGVjaWZ5aW5nIHR5cGUgb2YgdGhlIHBhY2thZ2UuIENhbiBiZSBaSVAgb3IgUFNNMS4KCiAgICAuUEFSQU1FVEVSIE51R2V0UGFja2FnZUlkCiAgICAgICAgTnVHZXQgcGFja2FnZSBuYW1lIGNvbnRhaW5pbmcgdGhlIG1vZHVsZSB0byBpbnN0YWxsLgoKICAgIC5QQVJBTUVURVIgUGFja2FnZVZlcnNpb24KICAgICAgICBBbGxvd3MgYSBzcGVjaWZpYyB2ZXJzaW9uIG9mIHRoZSBzcGVjaWZpZWQgTnVHZXQgcGFja2FnZSB0byB1c2VkLCBpZiBub3Qgc3BlY2lmaWVkIHRoZW4gdGhlIGxhdGVzdCBzdGFibGUgdmVyc2lvbiB3aWxsIGJlIHVzZWQuCgogICAgLlBBUkFNRVRFUiBOdWdldFNvdXJjZQogICAgICAgIFVSTCB0byB0aGUgTnVHZXQgZmVlZCBjb250YWluaW5nIHRoZSBwYWNrYWdlLgoKICAgIC5QQVJBTUVURVIgUHJlUmVsZWFzZQogICAgICAgIElmIFBhY2thZ2VWZXJzaW9uIGlzIG5vdCBzcGVjaWZpZWQsIHRoZW4gdGhpcyBzd2l0Y2ggYWxsb3dzIHRoZSBsYXRlc3QgcHJlcmVsZWFzZSBwYWNrYWdlIHRvIGJlIHVzZWQuCgogICAgLlBBUkFNRVRFUiBQcmVSZWxlYXNlVGFnCiAgICAgICAgSWYgUGFja2FnZVZlcnNpb24gaXMgbm90IHNwZWNpZmllZCwgdGhlbiB0aGlzIHBhcmFtZXRlciBhbGxvd3MgdGhlIGxhdGVzdCB2ZXJzaW9uIG9mIGEgcGFydGljdWxhciBwcmVyZWxlYXNlIHRhZyB0byBiZSB1c2VkCgogICAgLlBBUkFNRVRFUiBEZXN0aW5hdGlvbgogICAgICAgIFdoZW4gc3BlY2lmaWVkIHRoZSBtb2R1bGUgd2lsbCBiZSBpbnN0YWxsZWQgYmVsb3cgdGhpcyBwYXRoLiBEZWZhdWx0cyB0byAnJGdsb2JhbDpQc0dldERlc3RpbmF0aW9uTW9kdWxlUGF0aCcgaWYgZGVmaW5lZC4KCiAgICAuUEFSQU1FVEVSIE1vZHVsZUhhc2gKICAgICAgICBXaGVuIE1vZHVsZUhhc2ggaXMgc3BlY2lmaWVkIHRoZSBjaG9zZW4gbW9kdWxlIHdpbGwgb25seSBiZSBpbnN0YWxsZWQgaWYgaXRzIGNvbnRlbnRzIG1hdGNoIHRoZSBwcm92aWRlZCBoYXNoLgoKICAgIC5QQVJBTUVURVIgR2xvYmFsCiAgICAgICAgSWYgc2V0LCBhdHRlbXB0cyB0byBpbnN0YWxsIHRoZSBtb2R1bGUgdG8gdGhlIGFsbCB1c2VycyBsb2NhdGlvbiBpbiBDOlxQcm9ncmFtIEZpbGVzXENvbW1vbiBGaWxlc1xNb2R1bGVzLi4uCgogICAgICAgIE5PVEU6IElmIHRoZSAtRGVzdGluYXRpb24gZGlyZWN0b3J5IGlzIHNwZWNpZmllZCwgdGhlbiAtR2xvYmFsIHdpbGwgb25seSBoYXZlIGFuIGVmZmVjdCBpbiBjb21iaW5hdGlvbiB3aXRoICctUGVyc2lzdEVudmlyb25tZW50Jy4gVGhpcyBpcyBhbHNvIHRoZSBjYXNlIGlmICckZ2xvYmFsOlBzR2V0RGVzdGluYXRpb25Nb2R1bGVQYXRoJyBpcyBkZWZpbmVkLgoKICAgIC5QQVJBTUVURVIgRG9Ob3RJbXBvcnQKICAgICAgICBJbmRpY2F0ZXMgdGhhdCBjb21tYW5kIHNob3VsZCBub3QgaW1wb3J0IG1vZHVsZSBhZnRlciBpbnN0YWxsYXRpb24KCiAgICAuUEFSQU1FVEVSIEFkZFRvUHJvZmlsZQogICAgICAgIEFkZHMgSW1wb3J0LU1vZHVsZSBzdGF0ZW1lbnQgZm9yIGluc3RhbGxlZCBtb2R1bGUgdG8gdGhlIHByb2ZpbGUucHMxCgogICAgLlBBUkFNRVRFUiBVcGRhdGUKICAgICAgICBGb3JjZXMgbW9kdWxlIHRvIGJlIHVwZGF0ZWQKCiAgICAuUEFSQU1FVEVSIERpcmVjdG9yeVVybAogICAgICAgIFVSTCB0byBjZW50cmFsIGRpcmVjdG9yeS4gQnkgZGVmYXVsdCBpdCB1c2VzIHRoZSB2YWx1ZSBpbiB0aGUgJGdsb2JhbDpQc0dldERpcmVjdG9yeVVybCB2YXJpYWJsZQoKICAgIC5QQVJBTUVURVIgUGVyc2lzdEVudmlyb25tZW50CiAgICAgICAgSWYgdGhpcyBzd2l0Y2ggaXMgc3BlY2lmaWVkLCB0aGUgaW5zdGFsbGF0aW9uIGRlc3RpbmF0aW9uIHBhdGggd2lsbCBiZSBhZGRlZCB0byBlaXRoZXIgdGhlIFVzZXIncyBQU01vZHVsZVBhdGggZW52aXJvbm1lbnQgdmFyaWFibGUgb3IgTWFjaGluZSdzIFBTTW9kdWxlUGF0aCBlbnZpcm9ubWVudCB2YXJpYWJsZSAoaWYgLUdsb2JhbCBzcGVjaWZpZWQpCgogICAgLlBBUkFNRVRFUiBJbnN0YWxsV2l0aE1vZHVsZU5hbWUKICAgICAgICBBbGxvd3MgdG8gc3BlY2lmeSB0aGUgbmFtZSBvZiB0aGUgbW9kdWxlIGFuZCBvdmVycmlkZSB0aGUgTW9kdWxlTmFtZSBub3JtYWxseSB1c2VkLgogICAgICAgIE5PVEU6IFRoaXMgcGFyYW1ldGVyIGFsbG93cyB0byBpbnN0YWxsIGEgbW9kdWxlIGZyb20gdGhlIFBzR2V0LURpcmVjdG9yeSBtb3JlIHRoYW4gb25jZSBhbmQgUHNHZXQgZG9lcyBub3QgcmVtZW1iZXIgdGhhdCB0aGlzIG1vZHVsZSBpcyBpbnN0YWxsZWQgd2l0aCBhIGRpZmZlcmVudCBuYW1lLgoKICAgIC5QQVJBTUVURVIgRG9Ob3RQb3N0SW5zdGFsbAogICAgICAgIElmIGRlZmluZWQsIHRoZSBQb3N0SW5zdGFsbEhvb2sgaXMgbm90IGV4ZWN1dGVkLgoKICAgIC5QQVJBTUVSVEVSIFBvc3RJbnN0YWxsSG9vawogICAgICAgIERlZmluZXMgdGhlIG5hbWUgb2YgYSBzY3JpcHQgaW5zaWRlIHRoZSBpbnN0YWxsZWQgbW9kdWxlIGZvbGRlciB3aGljaCBzaG91bGQgYmUgZXhlY3V0ZWQgYWZ0ZXIgaW5zdGFsbGF0aW9uLgogICAgICAgIERlZmF1bHQ6IGRlZmluaXRpb24gaW4gZGlyZWN0b3J5IGZpbGUgb3IgJ0luc3RhbGwucHMxJwoKICAgIC5QQVJBTUVURVIgRm9yY2UKICAgICAgICBPQlNPTEFURQogICAgICAgIEFsdGVybmF0aXZlIG5hbWUgZm9yICdVcGRhdGUnLgoKICAgIC5QQVJBTUVURVIgU3RhcnR1cAogICAgICAgIE9CU09MQVRFCiAgICAgICAgQWx0ZXJuYXRpdmUgbmFtZSBmb3IgJ0FkZFRvUHJvZmlsZScuCgogICAgLkxJTksKICAgICAgICBodHRwOi8vcHNnZXQubmV0CgogICAgLkVYQU1QTEUKICAgICAgICAjIEluc3RhbGwtTW9kdWxlIFBzQ29uZmlnIC1Eb05vdEltcG9ydAoKICAgICAgICBEZXNjcmlwdGlvbgogICAgICAgIC0tLS0tLS0tLS0tCiAgICAgICAgSW5zdGFsbHMgdGhlIG1vZHVsZSB3aXRvdXQgaW1wb3J0aW5nIGl0IHRvIHRoZSBjdXJyZW50IHNlc3Npb24KCiAgICAuRVhBTVBMRQogICAgICAgICMgSW5zdGFsbC1Nb2R1bGUgUG9zaEhnIC1BZGRUb1Byb2ZpbGUKCiAgICAgICAgRGVzY3JpcHRpb24KICAgICAgICAtLS0tLS0tLS0tLQogICAgICAgIEluc3RhbGxzIHRoZSBtb2R1bGUgYW5kIHRoZW4gYWRkcyBpbXBvZXIgb2YgdGhlIGdpdmVuIG1vZHVsZSB0byB5b3VyIHByb2ZpbGUucHMxIGZpbGUKCiAgICAuRVhBTVBMRQogICAgICAgICMgSW5zdGFsbC1Nb2R1bGUgUHNVcmwKCiAgICAgICAgRGVzY3JpcHRpb24KICAgICAgICAtLS0tLS0tLS0tLQogICAgICAgIFRoaXMgY29tbWFuZCB3aWxsIHF1ZXJ5IG1vZHVsZSBpbmZvcm1hdGlvbiBmcm9tIGNlbnRyYWwgcmVnaXN0cnkgYW5kIGluc3RhbGwgcmVxdWlyZWQgc3R1ZmYuCgogICAgLkVYQU1QTEUKICAgICAgICAjIEluc3RhbGwtTW9kdWxlIC1Nb2R1bGVQYXRoIC5cQXV0aGVudGljb2RlLnBzbTEgLUdsb2JhbAoKICAgICAgICBEZXNjcmlwdGlvbgogICAgICAgIC0tLS0tLS0tLS0tCiAgICAgICAgSW5zdGFsbHMgdGhlIEF1dGhlbnRpY29kZSBtb2R1bGUgdG8gdGhlIFN5c3RlbTMyXFdpbmRvd3NQb3dlclNoZWxsXHYxLjBcTW9kdWxlcyBmb3IgYWxsIHVzZXJzIHRvIHVzZS4KCiAgICAuRVhBTVBMRQogICAgICAgICMgSW5zdGFsbC1Nb2R1bGUgLU1vZHVsZVVybCBodHRwczovL2dpdGh1Yi5jb20vY2hhbGl5L3BzdXJsL3Jhdy9tYXN0ZXIvUHNVcmwvUHNVcmwucHNtMQoKICAgICAgICBEZXNjcmlwdGlvbgogICAgICAgIC0tLS0tLS0tLS0tCiAgICAgICAgSW5zdGFsbHMgdGhlIFBzVXJsIG1vZHVsZSB0byB0aGUgdXNlcnMgbW9kdWxlcyBmb2xkZXIKCiAgICAuRVhBTVBMRQogICAgICAgICMgSW5zdGFsbC1Nb2R1bGUgLU1vZHVsZVVybCBodHRwOi8vYml0Lmx5L2UxWDRCTyAtTW9kdWxlTmFtZSAiUHNVcmwiCgogICAgICAgIERlc2NyaXB0aW9uCiAgICAgICAgLS0tLS0tLS0tLS0KICAgICAgICBJbnN0YWxscyB0aGUgUHNVcmwgbW9kdWxlIHdpdGggbmFtZSBzcGVjaWZpZWQsIGJlY2F1c2UgY29tbWFuZCB3aWxsIG5vdCBiZSBhYmxlIHRvIGd1ZXNzIGl0CgogICAgLkVYQU1QTEUKICAgICAgICAjIEluc3RhbGwtTW9kdWxlIC1Nb2R1bGVVcmwgaHR0cHM6Ly9naXRodWIuY29tL3BzZ2V0L3BzZ2V0L3Jhdy9tYXN0ZXIvVGVzdE1vZHVsZXMvSGVsbG9Xb3JsZC56aXAKCiAgICAgICAgRGVzY3JpcHRpb24KICAgICAgICAtLS0tLS0tLS0tLQogICAgICAgIERvd25sb2FkcyBIZWxsb1dvcmxkIG1vZHVsZSAobW9kdWxlIGNhbiBoYXZlIG1vcmUgdGhhbiBvbmUgZmlsZSkgYW5kIGluc3RhbGxzIGl0CgogICAgLkVYQU1QTEUKICAgICAgICAjIEluc3RhbGwtTW9kdWxlIC1OdWdldFBhY2thZ2VJZCBTb21lUGFja2FnZQoKICAgICAgICBEZXNjcmlwdGlvbgogICAgICAgIC0tLS0tLS0tLS0tCiAgICAgICAgRG93bmxvYWRzIHRoZSBsYXRlc3Qgc3RhYmxlIHZlcnNpb24gb2YgdGhlICdTb21lUGFja2FnZScgbW9kdWxlIGZyb20gdGhlIE51R2V0IEdhbGxlcnkKCiAgICAuRVhBTVBMRQogICAgICAgICMgSW5zdGFsbC1Nb2R1bGUgLU51Z2V0UGFja2FnZUlkIFNvbWVQYWNrYWdlIC1QYWNrYWdlVmVyc2lvbiAxLjAuMi1iZXRhCgogICAgICAgIERlc2NyaXB0aW9uCiAgICAgICAgLS0tLS0tLS0tLS0KICAgICAgICBEb3dubG9hZHMgdGhlIHNwZWNpZmllZCB2ZXJzaW9uIG9mIHRoZSAnU29tZVBhY2thZ2UnIG1vZHVsZSBmcm9tIHRoZSBOdUdldCBHYWxsZXJ5CgogICAgLkVYQU1QTEUKICAgICAgICAjIEluc3RhbGwtTW9kdWxlIC1OdWdldFBhY2thZ2VJZCBTb21lUGFja2FnZSAtUHJlUmVsZWFzZQoKICAgICAgICBEZXNjcmlwdGlvbgogICAgICAgIC0tLS0tLS0tLS0tCiAgICAgICAgRG93bmxvYWRzIHRoZSBsYXRlc3QgcHJlLXJlbGVhc2UgdmVyc2lvbiBvZiB0aGUgJ1NvbWVQYWNrYWdlJyBtb2R1bGUgZnJvbSB0aGUgTnVHZXQgR2FsbGVyeQoKICAgIC5FWEFNUExFCiAgICAgICAgIyBJbnN0YWxsLU1vZHVsZSAtTnVnZXRQYWNrYWdlSWQgU29tZVBhY2thZ2UgLVByZVJlbGVhc2VUYWcgYmV0YSAtTnVnZXRTb3VyY2UgaHR0cDovL215Z2V0Lm9yZy9GL215ZmVlZAoKICAgICAgICBEZXNjcmlwdGlvbgogICAgICAgIC0tLS0tLS0tLS0tCiAgICAgICAgRG93bmxvYWRzIHRoZSBsYXRlc3QgJ2JldGEnIHByZS1yZWxlYXNlIHZlcnNpb24gb2YgdGhlICdTb21lUGFja2FnZScgbW9kdWxlIGZyb20gYSBjdXN0b20gTnVHZXQgZmVlZAojPgpmdW5jdGlvbiBJbnN0YWxsLU1vZHVsZSB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MCwgVmFsdWVGcm9tUGlwZWxpbmU9JHRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUsIE1hbmRhdG9yeT0kdHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZT0nQ2VudHJhbERpcmVjdG9yeScpXQogICAgICAgIFtTdHJpbmddICRNb2R1bGUsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSwgTWFuZGF0b3J5PSR0cnVlLCBQYXJhbWV0ZXJTZXROYW1lPSdXZWInKV0KICAgICAgICBbU3RyaW5nXSAkTW9kdWxlVXJsLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUsIE1hbmRhdG9yeT0kdHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZT0nTG9jYWwnKV0KICAgICAgICBbU3RyaW5nXSAkTW9kdWxlUGF0aCwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlLCBQYXJhbWV0ZXJTZXROYW1lPSdXZWInKV0KICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUsIFBhcmFtZXRlclNldE5hbWU9J0xvY2FsJyldCiAgICAgICAgW1N0cmluZ10gJE1vZHVsZU5hbWUsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZT0nV2ViJyldCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlLCBQYXJhbWV0ZXJTZXROYW1lPSdMb2NhbCcpXQogICAgICAgIFtWYWxpZGF0ZVNldCgnWklQJywgJ1BTTTEnLCAnUFNEMScsICcnKV0gIyAkc2NyaXB0OlBTR0VUX1pJUCwgJHNjcmlwdDpQU0dFVF9QU00xIG9yICRzY3JpcHQ6UFNHRVRfUFNEMQogICAgICAgIFtTdHJpbmddICRUeXBlLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUsIE1hbmRhdG9yeT0kdHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZT0nTnVHZXQnKV0KICAgICAgICBbVmFsaWRhdGVQYXR0ZXJuKCdeXHcrKFtfLi1dXHcrKSokJyldICMgcmVnZXggZnJvbSBOdUdldC5QYWNrYWdlSWRWYWxpZGF0b3IuX2lkUmVnZXgKICAgICAgICBbVmFsaWRhdGVMZW5ndGgoMSwxMDApXSAjIG1heGltdW0gbGVuZ3RoIGZyb20gTnVHZXQuUGFja2FnZUlkVmFsaWRhdG9yLk1heFBhY2thZ2VJZExlbmd0aAogICAgICAgIFtTdHJpbmddICROdUdldFBhY2thZ2VJZCwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlLCBQYXJhbWV0ZXJTZXROYW1lPSdOdUdldCcpXQogICAgICAgIFtTdHJpbmddICRQYWNrYWdlVmVyc2lvbiwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlLCBQYXJhbWV0ZXJTZXROYW1lPSdOdUdldCcpXQogICAgICAgIFtTdHJpbmddICROdWdldFNvdXJjZSA9ICdodHRwczovL251Z2V0Lm9yZy9hcGkvdjIvJywKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlLCBQYXJhbWV0ZXJTZXROYW1lPSdOdUdldCcpXQogICAgICAgIFtTd2l0Y2hdICRQcmVSZWxlYXNlLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUsIFBhcmFtZXRlclNldE5hbWU9J051R2V0JyldCiAgICAgICAgW1N0cmluZ10gJFByZVJlbGVhc2VUYWcsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJERlc3RpbmF0aW9uID0gJGdsb2JhbDpQc0dldERlc3RpbmF0aW9uTW9kdWxlUGF0aCwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkTW9kdWxlSGFzaCwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3dpdGNoXSAkR2xvYmFsLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTd2l0Y2hdICREb05vdEltcG9ydCwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3dpdGNoXSAkQWRkVG9Qcm9maWxlLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTd2l0Y2hdICRVcGRhdGUsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJERpcmVjdG9yeVVybCA9ICRnbG9iYWw6UHNHZXREaXJlY3RvcnlVcmwsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N3aXRjaF0gJFBlcnNpc3RFbnZpcm9ubWVudCwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkSW5zdGFsbFdpdGhNb2R1bGVOYW1lLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTd2l0Y2hdICREb05vdFBvc3RJbnN0YWxsLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRQb3N0SW5zdGFsbEhvb2ssCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N3aXRjaF0gJEZvcmNlLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTd2l0Y2hdICRTdGFydHVwCiAgICApCiAgICBwcm9jZXNzIHsKCiAgICAgICAgaWYgKCRGb3JjZSkgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICdGb3JjZSBwYXJhbWV0ZXIgaXMgY29uc2lkZXJlZCBvYnNvbGV0ZS4gUGxlYXNlIHVzZSBVcGRhdGUgaW5zdGVhZC4nCiAgICAgICAgICAgICRVcGRhdGUgPSAkdHJ1ZQogICAgICAgIH0KCiAgICAgICAgaWYgKCRTdGFydHVwKSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJ1N0YXJ0dXAgcGFyYW1ldGVyIGlzIGNvbnNpZGVyZWQgb2Jzb2xldGUuIFBsZWFzZSB1c2UgQWRkVG9Qcm9maWxlIGluc3RlYWQuJwogICAgICAgICAgICAkQWRkVG9Qcm9maWxlID0gJHRydWUKICAgICAgICB9CgogICAgICAgIGlmICgtbm90ICREZXN0aW5hdGlvbikgewogICAgICAgICAgICAkRGVzdGluYXRpb24gPSBpZiAoJEdsb2JhbCkgeyAkZ2xvYmFsOkNvbW1vbkdsb2JhbE1vZHVsZUJhc2VQYXRoIH0gZWxzZSB7ICRnbG9iYWw6VXNlck1vZHVsZUJhc2VQYXRoIH0KCiAgICAgICAgICAgICNCZWNhdXNlIHdlIGFyZSB1c2luZyB0aGUgZGVmYXVsdCBsb2NhdGlvbiwgYWx3YXlzIGVuc3VyZSBpdCBpcyBwZXJzaXN0ZWQKICAgICAgICAgICAgJFBlcnNpc3RFbnZpcm9ubWVudCA9ICR0cnVlCiAgICAgICAgfQoKICAgICAgICBpZiAoLW5vdCAkRGVzdGluYXRpb24pIHsKICAgICAgICAgICAgdGhyb3cgJ1RoZSBkZXN0aW5hdGlvbiBwYXRoIHdhcyBub3QgYWRkZWQgdG8gdGhlIFBTTW9kdWxlUGF0aCBlbnZpcm9ubWVudCB2YXJpYWJsZSwgZW5zdXJlIHlvdSBoYXZlIHRoZSByaWdodHMgdG8gbW9kaWZ5IGVudmlyb25tZW50IHZhcmlhYmxlcycKICAgICAgICB9CgogICAgICAgICREZXN0aW5hdGlvbiA9IENvbnZlcnRUby1DYW5vbmljYWxQYXRoIC1QYXRoICREZXN0aW5hdGlvbgoKICAgICAgICBXcml0ZS1EZWJ1ZyAiRXhlY3V0ZSBpbnN0YWxsYXRpb24gZm9yICckKCRQU0NtZGxldC5QYXJhbWV0ZXJTZXROYW1lKScgdHlwZS4iCgogICAgICAgIHN3aXRjaCgkUFNDbWRsZXQuUGFyYW1ldGVyU2V0TmFtZSkgewogICAgICAgICAgICBDZW50cmFsRGlyZWN0b3J5IHsKICAgICAgICAgICAgICAgIEluc3RhbGwtTW9kdWxlRnJvbURpcmVjdG9yeSAtTW9kdWxlOiRNb2R1bGUgLURlc3RpbmF0aW9uOiREZXN0aW5hdGlvbiAtTW9kdWxlSGFzaDokTW9kdWxlSGFzaCAtR2xvYmFsOiRHbG9iYWwgLVBlcnNpc3RFbnZpcm9ubWVudDokUGVyc2lzdEVudmlyb25tZW50IC1Eb05vdEltcG9ydDokRG9Ob3RJbXBvcnQgLUFkZFRvUHJvZmlsZTokQWRkVG9Qcm9maWxlIC1VcGRhdGU6JFVwZGF0ZSAtRGlyZWN0b3J5VXJsOiREaXJlY3RvcnlVcmwgLUluc3RhbGxXaXRoTW9kdWxlTmFtZTokSW5zdGFsbFdpdGhNb2R1bGVOYW1lIC1Eb05vdFBvc3RJbnN0YWxsOiREb05vdFBvc3RJbnN0YWxsIC1Qb3N0SW5zdGFsbEhvb2s6JFBvc3RJbnN0YWxsSG9vawogICAgICAgICAgICB9CiAgICAgICAgICAgIFdlYiB7CiAgICAgICAgICAgICAgICBJbnN0YWxsLU1vZHVsZUZyb21XZWIgLU1vZHVsZVVybDokTW9kdWxlVXJsIC1Nb2R1bGVOYW1lOiRNb2R1bGVOYW1lIC1UeXBlOiRUeXBlIC1EZXN0aW5hdGlvbjokRGVzdGluYXRpb24gLU1vZHVsZUhhc2g6JE1vZHVsZUhhc2ggLUdsb2JhbDokR2xvYmFsIC1QZXJzaXN0RW52aXJvbm1lbnQ6JFBlcnNpc3RFbnZpcm9ubWVudCAtRG9Ob3RJbXBvcnQ6JERvTm90SW1wb3J0IC1BZGRUb1Byb2ZpbGU6JEFkZFRvUHJvZmlsZSAtVXBkYXRlOiRVcGRhdGUgLUluc3RhbGxXaXRoTW9kdWxlTmFtZTokSW5zdGFsbFdpdGhNb2R1bGVOYW1lIC1Eb05vdFBvc3RJbnN0YWxsOiREb05vdFBvc3RJbnN0YWxsIC1Qb3N0SW5zdGFsbEhvb2s6JFBvc3RJbnN0YWxsSG9vawogICAgICAgICAgICB9CiAgICAgICAgICAgIExvY2FsIHsKICAgICAgICAgICAgICAgIEluc3RhbGwtTW9kdWxlRnJvbUxvY2FsIC1Nb2R1bGVQYXRoOiRNb2R1bGVQYXRoIC1Nb2R1bGVOYW1lOiRNb2R1bGVOYW1lIC1UeXBlOiRUeXBlIC1EZXN0aW5hdGlvbjokRGVzdGluYXRpb24gLU1vZHVsZUhhc2g6JE1vZHVsZUhhc2ggLUdsb2JhbDokR2xvYmFsIC1QZXJzaXN0RW52aXJvbm1lbnQ6JFBlcnNpc3RFbnZpcm9ubWVudCAtRG9Ob3RJbXBvcnQ6JERvTm90SW1wb3J0IC1BZGRUb1Byb2ZpbGU6JEFkZFRvUHJvZmlsZSAtVXBkYXRlOiRVcGRhdGUgLUluc3RhbGxXaXRoTW9kdWxlTmFtZTokSW5zdGFsbFdpdGhNb2R1bGVOYW1lIC1Eb05vdFBvc3RJbnN0YWxsOiREb05vdFBvc3RJbnN0YWxsIC1Qb3N0SW5zdGFsbEhvb2s6JFBvc3RJbnN0YWxsSG9vawogICAgICAgICAgICB9CiAgICAgICAgICAgIE51R2V0IHsKICAgICAgICAgICAgICAgIEluc3RhbGwtTW9kdWxlRnJvbU51R2V0IC1OdUdldFBhY2thZ2VJZDokTnVHZXRQYWNrYWdlSWQgLVBhY2thZ2VWZXJzaW9uOiRQYWNrYWdlVmVyc2lvbiAtTnVnZXRTb3VyY2U6JE51Z2V0U291cmNlIC1QcmVSZWxlYXNlOiRQcmVSZWxlYXNlIC1QcmVSZWxlYXNlVGFnOiRQcmVSZWxlYXNlVGFnIC1EZXN0aW5hdGlvbjokRGVzdGluYXRpb24gLU1vZHVsZUhhc2g6JE1vZHVsZUhhc2ggLUdsb2JhbDokR2xvYmFsIC1QZXJzaXN0RW52aXJvbm1lbnQ6JFBlcnNpc3RFbnZpcm9ubWVudCAtRG9Ob3RJbXBvcnQ6JERvTm90SW1wb3J0IC1BZGRUb1Byb2ZpbGU6JEFkZFRvUHJvZmlsZSAtVXBkYXRlOiRVcGRhdGUgLUluc3RhbGxXaXRoTW9kdWxlTmFtZTokSW5zdGFsbFdpdGhNb2R1bGVOYW1lIC1Eb05vdFBvc3RJbnN0YWxsOiREb05vdFBvc3RJbnN0YWxsIC1Qb3N0SW5zdGFsbEhvb2s6JFBvc3RJbnN0YWxsSG9vawogICAgICAgICAgICB9CiAgICAgICAgICAgIGRlZmF1bHQgewogICAgICAgICAgICAgICAgdGhyb3cgIlVua25vd24gUGFyYW1ldGVyU2V0TmFtZSAnJCgkUFNDbWRsZXQuUGFyYW1ldGVyU2V0TmFtZSknIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cgo8IwogICAgLlNZTk9QU0lTCiAgICAgICAgVXBkYXRlcyBhIG1vZHVsZS4KCiAgICAuREVTQ1JJUFRJT04KICAgICAgICBTdXBwb3J0cyB1cGRhdGluZyBtb2R1bGVzIGZvciB0aGUgY3VycmVudCB1c2VyIG9yIGFsbCB1c2VycyAoaWYgZWxldmF0ZWQpLgoKICAgIC5QQVJBTUVURVIgTW9kdWxlCiAgICAgICAgTmFtZSBvZiB0aGUgbW9kdWxlIHRvIHVwZGF0ZS4KCiAgICAuUEFSQU1FVEVSIEFsbAogICAgICAgIElmIC1BbGwgaXMgZGVmaW5lZC4gYWxsIHRvIFBzR2V0IGtub3duIG1vZHVsZXMgd2lsbCBiZSB1cGRhdGVkLgoKICAgIC5QQVJBTUVURVIgRGVzdGluYXRpb24KICAgICAgICBXaGVuIHNwZWNpZmllZCB0aGUgbW9kdWxlIHdpbGwgYmUgdXBkYXRlZCBiZWxvdyB0aGlzIHBhdGguCgogICAgLlBBUkFNRVRFUiBNb2R1bGVIYXNoCiAgICAgICAgV2hlbiBNb2R1bGVIYXNoIGlzIHNwZWNpZmllZCB0aGUgY2hvc2VuIG1vZHVsZSB3aWxsIG9ubHkgYmUgaW5zdGFsbGVkIGlmIGl0cyBjb250ZW50cyBtYXRjaCB0aGUgcHJvdmlkZWQgaGFzaC4KCiAgICAuUEFSQU1FVEVSIEdsb2JhbAogICAgICAgIElmIHNldCwgYXR0ZW1wdHMgdG8gaW5zdGFsbCB0aGUgbW9kdWxlIHRvIHRoZSBhbGwgdXNlcnMgbG9jYXRpb24gaW4gV2luZG93c1xTeXN0ZW0zMi4uLgoKICAgIC5QQVJBTUVURVIgRG9Ob3RJbXBvcnQKICAgICAgICBJbmRpY2F0ZXMgdGhhdCBjb21tYW5kIHNob3VsZCBub3QgaW1wb3J0IG1vZHVsZSBhZnRlciBpbnN0YWxsYXRpb24uCgogICAgLlBBUkFNRVRFUiBBZGRUb1Byb2ZpbGUKICAgICAgICBBZGRzIGluc3RhbGxlZCBtb2R1bGUgdG8gdGhlIHByb2ZpbGUucHMxLgoKICAgIC5QQVJBTUVURVIgVXBkYXRlCiAgICAgICAgRm9yY2VzIG1vZHVsZSB0byBiZSB1cGRhdGVkLgoKICAgIC5QQVJBTUVURVIgRGlyZWN0b3J5VXJsCiAgICAgICAgVVJMIHRvIGNlbnRyYWwgZGlyZWN0b3J5LiBCeSBkZWZhdWx0IGl0IHVzZXMgdGhlIHZhbHVlIGluIHRoZSAkUHNHZXREaXJlY3RvcnlVcmwgZ2xvYmFsIHZhcmlhYmxlLgoKICAgIC5QQVJBTUVURVIgRG9Ob3RQb3N0SW5zdGFsbAogICAgICAgIElmIGRlZmluZWQsIHRoZSBQb3N0SW5zdGFsbEhvb2sgaXMgbm90IGV4ZWN1dGVkLgoKICAgIC5QQVJBTUVSVEVSIFBvc3RJbnN0YWxsSG9vawogICAgICAgIERlZmluZXMgdGhlIG5hbWUgb2YgYSBzY3JpcHQgaW5zaWRlIHRoZSBpbnN0YWxsZWQgbW9kdWxlIGZvbGRlciB3aGljaCBzaG91bGQgYmUgZXhlY3V0ZWQgYWZ0ZXIgaW5zdGFsbGF0aW9uLgogICAgICAgIFdpbGwgbm90IGJlIGNoZWNrIGluIGNvbWJpbmF0aW9uIHdpdGggLUFsbCBzd2l0Y2guCiAgICAgICAgRGVmYXVsdDogJ0luc3RhbGwucHMxJwoKICAgIC5MSU5LCiAgICAgICAgaHR0cDovL3BzZ2V0Lm5ldAoKICAgIC5MSU5LCiAgICAgICAgSW5zdGFsbC1Nb2R1bGUKCiAgICAuRVhBTVBMRQogICAgICAgICMgVXBkYXRlLU1vZHVsZSBQc1VybAoKICAgICAgICBEZXNjcmlwdGlvbgogICAgICAgIC0tLS0tLS0tLS0tCiAgICAgICAgVXBkYXRlcyB0aGUgbW9kdWxlCiM+CmZ1bmN0aW9uIFVwZGF0ZS1Nb2R1bGUgewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uPTAsIFZhbHVlRnJvbVBpcGVsaW5lPSR0cnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlLCBNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRNb2R1bGUsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N3aXRjaF0gJEFsbCwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkRGVzdGluYXRpb24gPSAkZ2xvYmFsOlBzR2V0RGVzdGluYXRpb25Nb2R1bGVQYXRoLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRNb2R1bGVIYXNoLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTd2l0Y2hdICRHbG9iYWwsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N3aXRjaF0gJERvTm90SW1wb3J0LAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTd2l0Y2hdICRBZGRUb1Byb2ZpbGUsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJERpcmVjdG9yeVVybCA9ICRnbG9iYWw6UHNHZXREaXJlY3RvcnlVcmwsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N3aXRjaF0gJERvTm90UG9zdEluc3RhbGwsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJFBvc3RJbnN0YWxsSG9vawogICAgKQogICAgcHJvY2VzcyB7CiAgICAgICAgaWYgKCRBbGwpIHsKICAgICAgICAgICAgSW5zdGFsbC1Nb2R1bGUgLU1vZHVsZSBQU0dldCAtRm9yY2UgLURvTm90SW1wb3J0CgogICAgICAgICAgICBHZXQtUHNHZXRNb2R1bGVJbmZvIC1Nb2R1bGVOYW1lICcqJyB8IFdoZXJlLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRfLklkIC1uZSAnUFNHZXQnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEdldC1Nb2R1bGUgLU5hbWU6KCRfLk1vZHVsZU5hbWUpIC1MaXN0QXZhaWxhYmxlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSB8IEluc3RhbGwtTW9kdWxlIC1VcGRhdGUKCiAgICAgICAgICAgIEltcG9ydC1Nb2R1bGUgLU5hbWUgUFNHZXQgLUZvcmNlIC1Eb05vdFBvc3RJbnN0YWxsOiREb05vdFBvc3RJbnN0YWxsCgogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgSW5zdGFsbC1Nb2R1bGUgLU1vZHVsZTokTW9kdWxlIC1EZXN0aW5hdGlvbjokRGVzdGluYXRpb24gLU1vZHVsZUhhc2g6JE1vZHVsZUhhc2ggLUdsb2JhbDokR2xvYmFsIC1Eb05vdEltcG9ydDokRG9Ob3RJbXBvcnQgLUFkZFRvUHJvZmlsZTokQWRkVG9Qcm9maWxlIC1EaXJlY3RvcnlVcmw6JERpcmVjdG9yeVVybCAtVXBkYXQgLURvTm90UG9zdEluc3RhbGw6JERvTm90UG9zdEluc3RhbGwgLVBvc3RJbnN0YWxsSG9vazokUG9zdEluc3RhbGxIb29rCiAgICAgICAgfQogICAgfQp9Cgo8IwogICAgLlNZTk9QU0lTCiAgICAgICAgUmV0cmlldmUgaW5mb3JtYXRpb24gYWJvdXQgbW9kdWxlIGZyb20gY2VudHJhbCBkaXJlY3RvcnkKCiAgICAuREVTQ1JJUFRJT04KICAgICAgICBDb21tYW5kIHdpbGwgcXVlcnkgY2VudHJhbCBkaXJlY3RvcnkgdG8gZ2V0IGluZm9ybWF0aW9uIGFib3V0IG1vZHVsZSBzcGVjaWZpZWQuCgogICAgLlBBUkFNRVRFUiBNb2R1bGVOYW1lCiAgICAgICAgTmFtZSBvZiBtb2R1bGUgdG8gbG9vayBmb3IgaW4gZGlyZWN0b3J5LiBTdXBwb3J0cyB3aWxkY2FyZHMuCgogICAgLlBBUkFNRVRFUiBEaXJlY3RvcnlVcmwKICAgICAgICBVUkwgdG8gY2VudHJhbCBkaXJlY3RvcnkuIEJ5IGRlZmF1bHQgaXQgdXNlcyB0aGUgdmFsdWUgaW4gdGhlICRQc0dldERpcmVjdG9yeVVybCBnbG9iYWwgdmFyaWFibGUuCgogICAgLkxJTksKICAgICAgICBodHRwOi8vcHNnZXQubmV0CgogICAgLkVYQU1QTEUKICAgICAgICBHZXQtUHNHZXRNb2R1bGVJbmZvIFBvc2hDbyoKCiAgICAgICAgRGVzY3JpcHRpb24KICAgICAgICAtLS0tLS0tLS0tLQogICAgICAgIFJldHJpZXZlcyBpbmZvcm1hdGlvbiBhYm91dCBhbGwgcmVnaXN0ZXJkIG1vZHVsZXMgdGhhdCBzdGFydHMgd2l0aCBQb3NoQ28uCiM+CmZ1bmN0aW9uIEdldC1Qc0dldE1vZHVsZUluZm8gewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uPTAsIFZhbHVlRnJvbVBpcGVsaW5lPSR0cnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlLCBNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRNb2R1bGVOYW1lLAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJERpcmVjdG9yeVVybCA9ICRnbG9iYWw6UHNHZXREaXJlY3RvcnlVcmwKICAgICkKICAgIGJlZ2luIHsKICAgICAgICAkY2xpZW50ID0gKG5ldy1vYmplY3QgTmV0LldlYkNsaWVudCkKICAgICAgICAkY2xpZW50LlByb3h5LkNyZWRlbnRpYWxzID0gW1N5c3RlbS5OZXQuQ3JlZGVudGlhbENhY2hlXTo6RGVmYXVsdE5ldHdvcmtDcmVkZW50aWFscwoKICAgICAgICAkUHNHZXREYXRhUGF0aCA9IEpvaW4tUGF0aCAtUGF0aCAkRW52OkFQUERBVEEgLUNoaWxkUGF0aCBwc2dldAogICAgICAgICREaXJlY3RvcnlDYWNoZVBhdGggPSBKb2luLVBhdGggLVBhdGggJFBzR2V0RGF0YVBhdGggLUNoaWxkUGF0aCBkaXJlY3RvcnljYWNoZS5jbGl4bWwKICAgICAgICAkRGlyZWN0b3J5Q2FjaGUgPSBAKCkKICAgICAgICAkQ2FjaGVFbnRyeSA9ICRudWxsCiAgICAgICAgaWYgKFRlc3QtUGF0aCAtUGF0aCAkRGlyZWN0b3J5Q2FjaGVQYXRoKSB7CiAgICAgICAgICAgICREaXJlY3RvcnlDYWNoZSA9IEltcG9ydC1DbGl4bWwgLVBhdGggJERpcmVjdG9yeUNhY2hlUGF0aAogICAgICAgICAgICAkQ2FjaGVFbnRyeSA9ICREaXJlY3RvcnlDYWNoZSB8IFdoZXJlLU9iamVjdCB7ICRfLlVybCAtZXEgJERpcmVjdG9yeVVybCB9IHwgU2VsZWN0LU9iamVjdCAtRmlyc3QgMQogICAgICAgIH0KICAgICAgICBpZiAoLW5vdCAkQ2FjaGVFbnRyeSkgewogICAgICAgICAgICAkQ2FjaGVFbnRyeSA9IEB7CiAgICAgICAgICAgICAgICBVcmwgPSAkRGlyZWN0b3J5VXJsCiAgICAgICAgICAgICAgICBGaWxlID0gJ3swfS54bWwnIC1mIFtHdWlkXTo6TmV3R3VpZCgpLlRvc3RyaW5nKCkKICAgICAgICAgICAgICAgIEVUYWcgPSAkbnVsbAogICAgICAgICAgICB9CiAgICAgICAgICAgICREaXJlY3RvcnlDYWNoZSArPSBAKCRDYWNoZUVudHJ5KQogICAgICAgIH0KICAgICAgICAkQ2FjaGVFbnRyeUZpbGVQYXRoID0gSm9pbi1QYXRoIC1QYXRoICRQc0dldERhdGFQYXRoIC1DaGlsZFBhdGggJENhY2hlRW50cnkuRmlsZQogICAgICAgIGlmICgkQ2FjaGVFbnRyeSAtYW5kICRDYWNoZUVudHJ5LkVUYWcgLWFuZCAoVGVzdC1QYXRoIC1QYXRoICRDYWNoZUVudHJ5RmlsZVBhdGgpKSB7CiAgICAgICAgICAgIGlmICgoR2V0LUl0ZW0gLVBhdGggJENhY2hlRW50cnlGaWxlUGF0aCkuTGFzdFdyaXRlVGltZS5BZGREYXlzKDEpIC1ndCAoR2V0LURhdGUpKSB7CiAgICAgICAgICAgICAgICAjIHVzZSBjYWNoZWQgZGlyZWN0b3J5IGlmIGl0IGlzIGxlc3MgdGhhbiAyNCBob3VycyBvbGQKICAgICAgICAgICAgICAgICRjbGllbnQuSGVhZGVycy5BZGQoJ0lmLU5vbmUtTWF0Y2gnLCAkQ2FjaGVFbnRyeS5FVGFnKQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB0cnkgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJEb3dubG9hZGluZyBtb2R1bGVzIHJlcG9zaXRvcnkgZnJvbSAkRGlyZWN0b3J5VXJsIgogICAgICAgICAgICAkcmVwb1JhdyA9ICRjbGllbnQuRG93bmxvYWRTdHJpbmcoJERpcmVjdG9yeVVybCkKICAgICAgICAgICAgJFN0YXR1c0NvZGUgPSAyMDAKICAgICAgICB9CiAgICAgICAgY2F0Y2ggW1N5c3RlbS5OZXQuV2ViRXhjZXB0aW9uXSB7CiAgICAgICAgICAgICRSZXNwb25zZSA9ICRfLkV4Y2VwdGlvbi5SZXNwb25zZQogICAgICAgICAgICBpZiAoJFJlc3BvbnNlKSB7ICRTdGF0dXNDb2RlID0gW2ludF0kUmVzcG9uc2UuU3RhdHVzQ29kZSB9CiAgICAgICAgfQoKICAgICAgICBpZiAoJFN0YXR1c0NvZGUgLWVxIDIwMCkgewogICAgICAgICAgICAkcmVwb1htbCA9IFt4bWxdJHJlcG9SYXcKCiAgICAgICAgICAgICRDYWNoZUVudHJ5LkVUYWcgPSAkY2xpZW50LlJlc3BvbnNlSGVhZGVyc1snRVRhZyddCiAgICAgICAgICAgIGlmICgtbm90IChUZXN0LVBhdGggLVBhdGggJFBzR2V0RGF0YVBhdGgpKSB7CiAgICAgICAgICAgICAgICBOZXctSXRlbSAtUGF0aCAkUHNHZXREYXRhUGF0aCAtSXRlbVR5cGUgQ29udGFpbmVyIHwgT3V0LU51bGwKICAgICAgICAgICAgfQogICAgICAgICAgICAkcmVwb1htbC5TYXZlKCRDYWNoZUVudHJ5RmlsZVBhdGgpCiAgICAgICAgICAgIEV4cG9ydC1DbGl4bWwgLUlucHV0T2JqZWN0ICREaXJlY3RvcnlDYWNoZSAtUGF0aCAkRGlyZWN0b3J5Q2FjaGVQYXRoCiAgICAgICAgfQogICAgICAgIGVsc2VpZiAoVGVzdC1QYXRoIC1QYXRoICRDYWNoZUVudHJ5RmlsZVBhdGgpIHsKICAgICAgICAgICAgaWYgKCRTdGF0dXNDb2RlIC1uZSAzMDQpIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkNvdWxkIG5vdCByZXRyaWV2ZSBtb2R1bGVzIHJlcG9zaXRvcnkgZnJvbSAnJERpcmVjdG9yeVVybCcuIFN0YXR1cyBjb2RlOiAkU3RhdHVzQ29kZSIKICAgICAgICAgICAgfQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICdVc2luZyBjYWNoZWQgY29weSBvZiBtb2R1bGVzIHJlcG9zaXRvcnknCiAgICAgICAgICAgICRyZXBvWG1sID0gW3htbF0oR2V0LUNvbnRlbnQgLVBhdGggJENhY2hlRW50cnlGaWxlUGF0aCkKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHRocm93ICJDb3VsZCBub3QgcmV0cmlldmUgbW9kdWxlcyByZXBvc2l0b3J5IGZyb20gJyREaXJlY3RvcnlVcmwnLiBTdGF0dXMgY29kZTogJFN0YXR1c0NvZGUiCiAgICAgICAgfQoKICAgICAgICAkbnNzID0gQHsgYSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDA1L0F0b20nOwogICAgICAgICAgICAgICAgICBwZyA9ICd1cm46cHNnZXQ6djEuMCcgfQoKICAgICAgICAkZmVlZCA9ICRyZXBvWG1sLmZlZWQKICAgICAgICAkdGl0bGUgPSAkZmVlZC50aXRsZS5pbm5lcnRleHQKICAgICAgICBXcml0ZS1WZXJib3NlICJQcm9jZXNzaW5nICR0aXRsZSBmZWVkLi4uIgogICAgfQogICAgcHJvY2VzcyB7CiAgICAgICAgIyBWZXJ5IG5haXZlLCBpZ25vcmluZyBuYW1lc3BhY2VzIGFuZCBzbyBvbi4KICAgICAgICAkZmVlZC5lbnRyeSB8IFdoZXJlLU9iamVjdCB7ICRfLmlkIC1saWtlICRNb2R1bGVOYW1lIH0gfAogICAgICAgICAgICBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAkVHlwZSA9ICcnCiAgICAgICAgICAgICAgICBzd2l0Y2ggLXJlZ2V4ICgkXy5jb250ZW50LnR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vemlwJyB7ICRUeXBlID0gJFBTR0VUX1pJUCAgfQogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAkVHlwZSA9ICRQU0dFVF9QU00xICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJFZlcmIgPSBpZiAoJF8ucHJvcGVydGllcy5WZXJiIC1pbWF0Y2ggJ1BPU1QnKSB7ICdQT1NUJyB9IGVsc2UgeyAnR0VUJyB9CgogICAgICAgICAgICAgICAgTmV3LU9iamVjdCBQU09iamVjdCAtUHJvcGVydHkgQHsKICAgICAgICAgICAgICAgICAgICBUaXRsZSA9ICRfLnRpdGxlLmlubmVydGV4dAogICAgICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uID0gJF8uc3VtbWFyeS4nI3RleHQnCiAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCA9IFtEYXRlVGltZV0kXy51cGRhdGVkCiAgICAgICAgICAgICAgICAgICAgQXV0aG9yPSAkXy5hdXRob3IubmFtZQogICAgICAgICAgICAgICAgICAgIElkID0gJF8uaWQKICAgICAgICAgICAgICAgICAgICBNb2R1bGVOYW1lID0gaWYgKCRfLnByb3BlcnRpZXMuTW9kdWxlTmFtZSkgeyAkXy5wcm9wZXJ0aWVzLk1vZHVsZU5hbWUgfSBlbHNlIHsgJF8uaWQgfQogICAgICAgICAgICAgICAgICAgIFR5cGUgPSAkVHlwZQogICAgICAgICAgICAgICAgICAgIERvd25sb2FkVXJsID0gJF8uY29udGVudC5zcmMKICAgICAgICAgICAgICAgICAgICBWZXJiID0gJFZlcmIKICAgICAgICAgICAgICAgICAgICAjVGhpcyB3YXMgY2hhbmdlZCBmcm9tIHVzaW5nIHRoZSAgJF8ucHJvcGVydGllcy5Qcm9qZWN0VXJsIGJlY2F1c2UgdGhlIHZhbHVlIGZvciBNb2R1bGVVcmwgbmVlZHMgdG8gYmUgdGhlIGZ1bGwgcGF0aCB0byB0aGUgbW9kdWxlIGZpbGUKICAgICAgICAgICAgICAgICAgICAjVGhpcyBjaGFuZ2Ugd2FzIHJlcXVpcmVkIHRvIGdldCB0aGUgdGVzdHMgdG8gcGFzcwogICAgICAgICAgICAgICAgICAgIE1vZHVsZVVybCA9ICRfLmNvbnRlbnQuc3JjCiAgICAgICAgICAgICAgICAgICAgTm9Qb3N0SW5zdGFsbEhvb2sgPSBpZiAoJF8ucHJvcGVydGllcy5Ob1Bvc3RJbnN0YWxsSG9vayAtZXEgJ3RydWUnKSB7ICR0cnVlIH0gZWxzZSB7ICRmYWxzZSB9CiAgICAgICAgICAgICAgICAgICAgUG9zdEluc3RhbGxIb29rID0gJF8ucHJvcGVydGllcy5Qb3N0SW5zdGFsbEhvb2sKICAgICAgICAgICAgICAgICAgICBQb3N0VXBkYXRlSG9vayA9ICRfLnByb3BlcnRpZXMuUG9zdFVwZGF0ZUhvb2sKICAgICAgICAgICAgICAgIH0gfAogICAgICAgICAgICAgICAgICAgIFNlbGVjdC1PYmplY3QgVGl0bGUsIE1vZHVsZU5hbWUsIElkLCBEZXNjcmlwdGlvbiwgVXBkYXRlZCwgVHlwZSwgVmVyYiwgTW9kdWxlVXJsLCBEb3dubG9hZFVybCwgTm9Qb3N0SW5zdGFsbEhvb2ssIFBvc3RJbnN0YWxsSG9vaywgUG9zdFVwZGF0ZUhvb2sKICAgICAgICAgICAgfQogICAgfQp9Cgo8IwogICAgLlNZTk9QU0lTCiAgICAgICAgQ2FsY3VsYXRlIHRoZSBoYXNoIHZhbHVlIG9mIGEgbW9kdWxlLgoKICAgIC5ERVNDUklQVElPTgogICAgICAgIENhbGN1bGF0ZSB0aGUgaGFzaCB2YWx1ZSBvZiB0aGUgc3BlY2lmaWVkIG1vZHVsZSBkaXJlY3RvcnkgZm9yIHVzYWdlIHdpdGggdGhlICdNb2R1bGVIYXNoJyBwYXJhbWV0ZXIgZm9yIHZhbGlkYXRpb24uCgogICAgLlBBUkFNRVRFUiBQYXRoCiAgICAgICAgUGF0aCB0byB0aGUgbW9kdWxlIGRpcmVjdG9yeQoKICAgIC5FWEFNUExFCiAgICAgICAgR2V0LVBzR2V0TW9kdWxlSGFzaCAkZ2xvYmFsOlVzZXJNb2R1bGVCYXNlUGF0aFxQc0dldAoKICAgICAgICBEZXNjcmlwdGlvbgogICAgICAgIC0tLS0tLS0tLS0tCiAgICAgICAgUmV0dXJucyB0aGUgaGFzaCB2YWx1ZSB1c2FibGUgd2l0aCB0aGUgJ01vZHVsZUhhc2gnIHBhcmFtZXRlciBvZiAnSW5zdGFsbC1Nb2R1bGUnCgogICAgLkxJTksKICAgICAgICBJbnN0YWxsLU1vZHVsZQoKICAgIC5MSU5LCiAgICAgICAgaHR0cDovL3BzZ2V0Lm5ldAojPgpmdW5jdGlvbiBHZXQtUHNHZXRNb2R1bGVIYXNoIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtBbGlhcygnTW9kdWxlQmFzZScpXQogICAgICAgIFtTdHJpbmddICRQYXRoCiAgICApCiAgICBwcm9jZXNzIHsKICAgICAgICBHZXQtRm9sZGVySGFzaCAtUGF0aCAoUmVzb2x2ZS1QYXRoIC1QYXRoICRQYXRoKS5QYXRoCiAgICB9Cn0KCiNlbmRyZWdpb24KCiNyZWdpb24gU3ViLUNtZGxldHMKCjwjCiAgICAuU1lOT1BTSVMKICAgICAgICBJbnN0YWxsIGEgbW9kdWxlIGZyb20gdGhlIGRlZmluZWQgUHNHZXQgZGlyZWN0b3J5LgoKICAgIC5QQVJBTUVURVIgTW9kdWxlCiAgICAgICAgTmFtZSBvZiB0aGUgbW9kdWxlIHRvIGluc3RhbGwgZnJvbSBQc0dldCBkaXJlY3RvcnkuCgogICAgLlBBUkFNRVRFUiBEZXN0aW5hdGlvbgogICAgICAgIFdoZW4gc3BlY2lmaWVkIHRoZSBtb2R1bGUgd2lsbCBiZSBpbnN0YWxsZWQgYmVsb3cgdGhpcyBwYXRoLiBEZWZhdWx0cyB0byAnJGdsb2JhbDpQc0dldERlc3RpbmF0aW9uTW9kdWxlUGF0aCcgaWYgZGVmaW5lZC4KCiAgICAuUEFSQU1FVEVSIE1vZHVsZUhhc2gKICAgICAgICBXaGVuIE1vZHVsZUhhc2ggaXMgc3BlY2lmaWVkIHRoZSBjaG9zZW4gbW9kdWxlIHdpbGwgb25seSBiZSBpbnN0YWxsZWQgaWYgaXRzIGNvbnRlbnRzIG1hdGNoIHRoZSBwcm92aWRlZCBoYXNoLgoKICAgIC5QQVJBTUVURVIgR2xvYmFsCiAgICAgICAgSWYgc2V0LCBhdHRlbXB0cyB0byBpbnN0YWxsIHRoZSBtb2R1bGUgdG8gdGhlIGFsbCB1c2VycyBsb2NhdGlvbiBpbiBDOlxQcm9ncmFtIEZpbGVzXENvbW1vbiBGaWxlc1xNb2R1bGVzLi4uCgogICAgICAgIE5PVEU6IElmIHRoZSAtRGVzdGluYXRpb24gZGlyZWN0b3J5IGlzIHNwZWNpZmllZCwgdGhlbiAtR2xvYmFsIHdpbGwgb25seSBoYXZlIGFuIGVmZmVjdCBpbiBjb21iaW5hdGlvbiB3aXRoICctUGVyc2lzdEVudmlyb25tZW50Jy4gVGhpcyBpcyBhbHNvIHRoZSBjYXNlIGlmICckZ2xvYmFsOlBzR2V0RGVzdGluYXRpb25Nb2R1bGVQYXRoJyBpcyBkZWZpbmVkLgoKICAgIC5QQVJBTUVURVIgRG9Ob3RJbXBvcnQKICAgICAgICBJbmRpY2F0ZXMgdGhhdCBjb21tYW5kIHNob3VsZCBub3QgaW1wb3J0IG1vZHVsZSBhZnRlciBpbnN0YWxsYXRpb24KCiAgICAuUEFSQU1FVEVSIEFkZFRvUHJvZmlsZQogICAgICAgIEFkZHMgSW1wb3J0LU1vZHVsZSBzdGF0ZW1lbnQgZm9yIGluc3RhbGxlZCBtb2R1bGUgdG8gdGhlIHByb2ZpbGUucHMxCgogICAgLlBBUkFNRVRFUiBVcGRhdGUKICAgICAgICBGb3JjZXMgbW9kdWxlIHRvIGJlIHVwZGF0ZWQKCiAgICAuUEFSQU1FVEVSIERpcmVjdG9yeVVybAogICAgICAgIFVSTCB0byBjZW50cmFsIGRpcmVjdG9yeS4gQnkgZGVmYXVsdCBpdCB1c2VzIHRoZSB2YWx1ZSBpbiB0aGUgJGdsb2JhbDpQc0dldERpcmVjdG9yeVVybCB2YXJpYWJsZQoKICAgIC5QQVJBTUVURVIgUGVyc2lzdEVudmlyb25tZW50CiAgICAgICAgSWYgdGhpcyBzd2l0Y2ggaXMgc3BlY2lmaWVkLCB0aGUgaW5zdGFsbGF0aW9uIGRlc3RpbmF0aW9uIHBhdGggd2lsbCBiZSBhZGRlZCB0byBlaXRoZXIgdGhlIFVzZXIncyBQU01vZHVsZVBhdGggZW52aXJvbm1lbnQgdmFyaWFibGUgb3IgTWFjaGluZSdzIFBTTW9kdWxlUGF0aCBlbnZpcm9ubWVudCB2YXJpYWJsZSAoaWYgLUdsb2JhbCBzcGVjaWZpZWQpCgogICAgLlBBUkFNRVRFUiBJbnN0YWxsV2l0aE1vZHVsZU5hbWUKICAgICAgICBBbGxvd3MgdG8gc3BlY2lmeSB0aGUgbmFtZSBvZiB0aGUgbW9kdWxlIGFuZCBvdmVycmlkZSB0aGUgTW9kdWxlTmFtZSBub3JtYWxseSB1c2VkLgogICAgICAgIE5PVEU6IFRoaXMgcGFyYW1ldGVyIGFsbG93cyB0byBpbnN0YWxsIGEgbW9kdWxlIGZyb20gdGhlIFBzR2V0LURpcmVjdG9yeSBtb3JlIHRoYW4gb25jZSBhbmQgUHNHZXQgZG9lcyBub3QgcmVtZW1iZXIgdGhhdCB0aGlzIG1vZHVsZSBpcyBpbnN0YWxsZWQgd2l0aCBhIGRpZmZlcmVudCBuYW1lLgoKICAgIC5QQVJBTUVURVIgRG9Ob3RQb3N0SW5zdGFsbAogICAgICAgIElmIGRlZmluZWQsIHRoZSBQb3N0SW5zdGFsbEhvb2sgaXMgbm90IGV4ZWN1dGVkLgoKICAgIC5QQVJBTUVSVEVSIFBvc3RJbnN0YWxsSG9vawogICAgICAgIERlZmluZXMgdGhlIG5hbWUgb2YgYSBzY3JpcHQgaW5zaWRlIHRoZSBpbnN0YWxsZWQgbW9kdWxlIGZvbGRlciB3aGljaCBzaG91bGQgYmUgZXhlY3V0ZWQgYWZ0ZXIgaW5zdGFsbGF0aW9uLgogICAgICAgIERlZmF1bHQ6IGRlZmluaXRpb24gaW4gZGlyZWN0b3J5IGZpbGUgb3IgJ0luc3RhbGwucHMxJwojPgpmdW5jdGlvbiBJbnN0YWxsLU1vZHVsZUZyb21EaXJlY3RvcnkgewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uPTAsIFZhbHVlRnJvbVBpcGVsaW5lPSR0cnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlLCBNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRNb2R1bGUsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJERlc3RpbmF0aW9uID0gJGdsb2JhbDpQc0dldERlc3RpbmF0aW9uTW9kdWxlUGF0aCwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkTW9kdWxlSGFzaCwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3dpdGNoXSAkR2xvYmFsLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTd2l0Y2hdICREb05vdEltcG9ydCwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3dpdGNoXSAkQWRkVG9Qcm9maWxlLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTd2l0Y2hdICRVcGRhdGUsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJERpcmVjdG9yeVVybCA9ICRnbG9iYWw6UHNHZXREaXJlY3RvcnlVcmwsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N3aXRjaF0gJFBlcnNpc3RFbnZpcm9ubWVudCwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkSW5zdGFsbFdpdGhNb2R1bGVOYW1lLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTd2l0Y2hdICREb05vdFBvc3RJbnN0YWxsLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRQb3N0SW5zdGFsbEhvb2sKICAgICkKICAgIHByb2Nlc3MgewogICAgICAgICR0ZXN0TW9kdWxlTmFtZSA9IGlmICgkSW5zdGFsbFdpdGhNb2R1bGVOYW1lKSB7ICRJbnN0YWxsV2l0aE1vZHVsZU5hbWUgfSBlbHNlIHsgJE1vZHVsZSB9CiAgICAgICAgaWYgKFRlc3QtTW9kdWxlSW5zdGFsbGVkQW5kSW1wb3J0IC1Nb2R1bGVOYW1lOiR0ZXN0TW9kdWxlTmFtZSAtRGVzdGluYXRpb246JERlc3RpbmF0aW9uIC1VcGRhdGU6JFVwZGF0ZSAtRG9Ob3RJbXBvcnQ6JERvTm90SW1wb3J0IC1Nb2R1bGVIYXNoOiRNb2R1bGVIYXNoKSB7CiAgICAgICAgICAgIHJldHVybgogICAgICAgIH0KCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiTW9kdWxlICRNb2R1bGUgd2lsbCBiZSBpbnN0YWxsZWQgZnJvbSBjZW50cmFsIHJlcG9zaXRvcnkiCiAgICAgICAgJG1vZHVsZURhdGEgPSBHZXQtUHNHZXRNb2R1bGVJbmZvIC1Nb2R1bGVOYW1lOiRNb2R1bGUgLURpcmVjdG9yeVVybDokRGlyZWN0b3J5VXJsIHwgc2VsZWN0IC1GaXJzdCAxCiAgICAgICAgaWYgKC1ub3QgJG1vZHVsZURhdGEpIHsKICAgICAgICAgICAgdGhyb3cgIk1vZHVsZSAkTW9kdWxlIHdhcyBub3QgZm91bmQgaW4gY2VudHJhbCByZXBvc2l0b3J5IgogICAgICAgIH0KCiAgICAgICAgIyAkTW9kdWxlIGFuZCAkbW9kdWxlRGF0YS5JZCBhcmUgbm90IGVxdWFsbHkgYnkgZ2FyYW50ZWUsIHNvIHdlIGhhdmUgdG8gdGVzdCBhZ2Fpbi4KICAgICAgICBpZiAoVGVzdC1Nb2R1bGVJbnN0YWxsZWRBbmRJbXBvcnQgLU1vZHVsZU5hbWU6JG1vZHVsZURhdGEuTW9kdWxlTmFtZSAtRGVzdGluYXRpb246JERlc3RpbmF0aW9uIC1VcGRhdGU6JFVwZGF0ZSAtRG9Ob3RJbXBvcnQ6JERvTm90SW1wb3J0IC1Nb2R1bGVIYXNoOiRNb2R1bGVIYXNoKSB7CiAgICAgICAgICAgIHJldHVybgogICAgICAgIH0KCiAgICAgICAgaWYgKC1ub3QgJERvTm90UG9zdEluc3RhbGwpIHsKICAgICAgICAgICAgJERvTm90UG9zdEluc3RhbGwgPSAkbW9kdWxlZGF0YS5Ob1Bvc3RJbnN0YWxsSG9vawogICAgICAgIH0KCiAgICAgICAgaWYgKC1ub3QgJFBvc3RJbnN0YWxsSG9vaykgewogICAgICAgICAgICBpZiAoJFVwZGF0ZSkgewogICAgICAgICAgICAgICAgJFBvc3RJbnN0YWxsSG9vayA9ICRtb2R1bGVEYXRhLlBvc3RVcGRhdGVIb29rCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkUG9zdEluc3RhbGxIb29rID0gJG1vZHVsZURhdGEuUG9zdEluc3RhbGxIb29rCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgtbm90ICRQb3N0SW5zdGFsbEhvb2spIHsKICAgICAgICAgICAgICAgICRQb3N0SW5zdGFsbEhvb2sgPSAnSW5zdGFsbC5wczEnCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICRyZXN1bHQgPSBJbnZva2UtRG93bmxvYWRNb2R1bGVGcm9tV2ViIC1Eb3dubG9hZFVybDokbW9kdWxlRGF0YS5Eb3dubG9hZFVybCAtTW9kdWxlTmFtZTokbW9kdWxlRGF0YS5Nb2R1bGVOYW1lIC1UeXBlOiRtb2R1bGVEYXRhLlR5cGUgLVZlcmI6JG1vZHVsZURhdGEuVmVyYgogICAgICAgIEluc3RhbGwtTW9kdWxlVG9EZXN0aW5hdGlvbiAtTW9kdWxlTmFtZTokcmVzdWx0Lk1vZHVsZU5hbWUgLUluc3RhbGxXaXRoTW9kdWxlTmFtZTokSW5zdGFsbFdpdGhNb2R1bGVOYW1lIC1Nb2R1bGVGb2xkZXJQYXRoOiRyZXN1bHQuTW9kdWxlRm9sZGVyUGF0aCAtVGVtcEZvbGRlclBhdGg6JHJlc3VsdC5UZW1wRm9sZGVyUGF0aCAtRGVzdGluYXRpb246JERlc3RpbmF0aW9uIC1Nb2R1bGVIYXNoOiRNb2R1bGVIYXNoIC1HbG9iYWw6JEdsb2JhbCAtUGVyc2lzdEVudmlyb25tZW50OiRQZXJzaXN0RW52aXJvbm1lbnQgLURvTm90SW1wb3J0OiREb05vdEltcG9ydCAtQWRkVG9Qcm9maWxlOiRBZGRUb1Byb2ZpbGUgLVVwZGF0ZTokVXBkYXRlIC1Eb05vdFBvc3RJbnN0YWxsOiREb05vdFBvc3RJbnN0YWxsIC1Qb3N0SW5zdGFsbEhvb2s6JFBvc3RJbnN0YWxsSG9vawogICAgfQp9Cgo8IwogICAgLlNZTk9QU0lTCiAgICAgICAgSW5zdGFsbCBhIG1vZHVsZSBmcm9tIGEgcHJvdmlkZWQgZG93bmxvYWQgbG9jYXRpb24uCgogICAgLlBBUkFNRVRFUiBNb2R1bGVVcmwKICAgICAgICBVUkwgdG8gdGhlIG1vZHVsZSB0byBpbnN0YWxsOyBDYW4gYmUgZGlyZWN0IGxpbmsgdG8gUFNNMSBmaWxlIG9yIFpJUCBmaWxlLiBDYW4gYmUgYSBzaG9ydGVuZWQgbGluay4KCiAgICAuUEFSQU1FVEVSIE1vZHVsZU5hbWUKICAgICAgICBJdCBpcyBub3QgYWx3YXlzIHBvc3NpYmxlIHRvIGludGVyZmVyZSB0aGUgcmlnaHQgTW9kdWxlTmFtZSwgZWcuIHRoZSBmaWxlbmFtZSBpcyB1bmtub3duIG9yIHRoZSB6aXAgYXJjaGl2ZSBjb250YWlucyBtdWx0aXBsZSBtb2R1bGVzLgoKICAgIC5QQVJBTUVURVIgVHlwZQogICAgICAgIFdoZW4gTW9kdWxlVXJsIG9yIE1vZHVsZVBhdGggc3BlY2lmaWVkLCBhbGxvd3Mgc3BlY2lmeWluZyB0eXBlIG9mIHRoZSBwYWNrYWdlLiBDYW4gYmUgWklQIG9yIFBTTTEuCgogICAgLlBBUkFNRVRFUiBEZXN0aW5hdGlvbgogICAgICAgIFdoZW4gc3BlY2lmaWVkIHRoZSBtb2R1bGUgd2lsbCBiZSBpbnN0YWxsZWQgYmVsb3cgdGhpcyBwYXRoLiBEZWZhdWx0cyB0byAnJGdsb2JhbDpQc0dldERlc3RpbmF0aW9uTW9kdWxlUGF0aCcgaWYgZGVmaW5lZC4KCiAgICAuUEFSQU1FVEVSIE1vZHVsZUhhc2gKICAgICAgICBXaGVuIE1vZHVsZUhhc2ggaXMgc3BlY2lmaWVkIHRoZSBjaG9zZW4gbW9kdWxlIHdpbGwgb25seSBiZSBpbnN0YWxsZWQgaWYgaXRzIGNvbnRlbnRzIG1hdGNoIHRoZSBwcm92aWRlZCBoYXNoLgoKICAgIC5QQVJBTUVURVIgR2xvYmFsCiAgICAgICAgSWYgc2V0LCBhdHRlbXB0cyB0byBpbnN0YWxsIHRoZSBtb2R1bGUgdG8gdGhlIGFsbCB1c2VycyBsb2NhdGlvbiBpbiBDOlxQcm9ncmFtIEZpbGVzXENvbW1vbiBGaWxlc1xNb2R1bGVzLi4uCgogICAgICAgIE5PVEU6IElmIHRoZSAtRGVzdGluYXRpb24gZGlyZWN0b3J5IGlzIHNwZWNpZmllZCwgdGhlbiAtR2xvYmFsIHdpbGwgb25seSBoYXZlIGFuIGVmZmVjdCBpbiBjb21iaW5hdGlvbiB3aXRoICctUGVyc2lzdEVudmlyb25tZW50Jy4gVGhpcyBpcyBhbHNvIHRoZSBjYXNlIGlmICckZ2xvYmFsOlBzR2V0RGVzdGluYXRpb25Nb2R1bGVQYXRoJyBpcyBkZWZpbmVkLgoKICAgIC5QQVJBTUVURVIgRG9Ob3RJbXBvcnQKICAgICAgICBJbmRpY2F0ZXMgdGhhdCBjb21tYW5kIHNob3VsZCBub3QgaW1wb3J0IG1vZHVsZSBhZnRlciBpbnN0YWxsYXRpb24KCiAgICAuUEFSQU1FVEVSIEFkZFRvUHJvZmlsZQogICAgICAgIEFkZHMgSW1wb3J0LU1vZHVsZSBzdGF0ZW1lbnQgZm9yIGluc3RhbGxlZCBtb2R1bGUgdG8gdGhlIHByb2ZpbGUucHMxCgogICAgLlBBUkFNRVRFUiBVcGRhdGUKICAgICAgICBGb3JjZXMgbW9kdWxlIHRvIGJlIHVwZGF0ZWQKCiAgICAuUEFSQU1FVEVSIFBlcnNpc3RFbnZpcm9ubWVudAogICAgICAgIElmIHRoaXMgc3dpdGNoIGlzIHNwZWNpZmllZCwgdGhlIGluc3RhbGxhdGlvbiBkZXN0aW5hdGlvbiBwYXRoIHdpbGwgYmUgYWRkZWQgdG8gZWl0aGVyIHRoZSBVc2VyJ3MgUFNNb2R1bGVQYXRoIGVudmlyb25tZW50IHZhcmlhYmxlIG9yIE1hY2hpbmUncyBQU01vZHVsZVBhdGggZW52aXJvbm1lbnQgdmFyaWFibGUgKGlmIC1HbG9iYWwgc3BlY2lmaWVkKQoKICAgIC5QQVJBTUVURVIgSW5zdGFsbFdpdGhNb2R1bGVOYW1lCiAgICAgICAgQWxsb3dzIHRvIHNwZWNpZnkgdGhlIG5hbWUgb2YgdGhlIG1vZHVsZSBhbmQgb3ZlcnJpZGUgdGhlIE1vZHVsZU5hbWUgbm9ybWFsbHkgdXNlZC4KICAgICAgICBOT1RFOiBUaGlzIHBhcmFtZXRlciBhbGxvd3MgdG8gaW5zdGFsbCBhIG1vZHVsZSBmcm9tIHRoZSBQc0dldC1EaXJlY3RvcnkgbW9yZSB0aGFuIG9uY2UgYW5kIFBzR2V0IGRvZXMgbm90IHJlbWVtYmVyIHRoYXQgdGhpcyBtb2R1bGUgaXMgaW5zdGFsbGVkIHdpdGggYSBkaWZmZXJlbnQgbmFtZS4KCiAgICAuUEFSQU1FVEVSIERvTm90UG9zdEluc3RhbGwKICAgICAgICBJZiBkZWZpbmVkLCB0aGUgUG9zdEluc3RhbGxIb29rIGlzIG5vdCBleGVjdXRlZC4KCiAgICAuUEFSQU1FUlRFUiBQb3N0SW5zdGFsbEhvb2sKICAgICAgICBEZWZpbmVzIHRoZSBuYW1lIG9mIGEgc2NyaXB0IGluc2lkZSB0aGUgaW5zdGFsbGVkIG1vZHVsZSBmb2xkZXIgd2hpY2ggc2hvdWxkIGJlIGV4ZWN1dGVkIGFmdGVyIGluc3RhbGxhdGlvbi4KICAgICAgICBEZWZhdWx0OiAnSW5zdGFsbC5wczEnCiM+CmZ1bmN0aW9uIEluc3RhbGwtTW9kdWxlRnJvbVdlYiB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MCwgVmFsdWVGcm9tUGlwZWxpbmU9JHRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUsIE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJE1vZHVsZVVybCwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkTW9kdWxlTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbVmFsaWRhdGVTZXQoJ1pJUCcsICdQU00xJywgJ1BTRDEnLCAnJyldICMgJHNjcmlwdDpQU0dFVF9aSVAsICRzY3JpcHQ6UFNHRVRfUFNNMSBvciAkc2NyaXB0OlBTR0VUX1BTRDEKICAgICAgICBbU3RyaW5nXSAkVHlwZSwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkRGVzdGluYXRpb24gPSAkZ2xvYmFsOlBzR2V0RGVzdGluYXRpb25Nb2R1bGVQYXRoLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRNb2R1bGVIYXNoLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTd2l0Y2hdICRHbG9iYWwsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N3aXRjaF0gJERvTm90SW1wb3J0LAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTd2l0Y2hdICRBZGRUb1Byb2ZpbGUsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N3aXRjaF0gJFVwZGF0ZSwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3dpdGNoXSAkUGVyc2lzdEVudmlyb25tZW50LAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRJbnN0YWxsV2l0aE1vZHVsZU5hbWUsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N3aXRjaF0gJERvTm90UG9zdEluc3RhbGwsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJFBvc3RJbnN0YWxsSG9vawogICAgKQogICAgcHJvY2VzcyB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiTW9kdWxlIHdpbGwgYmUgaW5zdGFsbGVkIGZyb20gJE1vZHVsZVVybCIKCiAgICAgICAgaWYgKCRJbnN0YWxsV2l0aE1vZHVsZU5hbWUpIHsKICAgICAgICAgICAgaWYgKFRlc3QtTW9kdWxlSW5zdGFsbGVkQW5kSW1wb3J0IC1Nb2R1bGVOYW1lOiRJbnN0YWxsV2l0aE1vZHVsZU5hbWUgLURlc3RpbmF0aW9uOiREZXN0aW5hdGlvbiAtVXBkYXRlOiRVcGRhdGUgLURvTm90SW1wb3J0OiREb05vdEltcG9ydCAtTW9kdWxlSGFzaDokTW9kdWxlSGFzaCkgewogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICRyZXN1bHQgPSBJbnZva2UtRG93bmxvYWRNb2R1bGVGcm9tV2ViIC1Eb3dubG9hZFVybDokTW9kdWxlVXJsIC1Nb2R1bGVOYW1lOiRNb2R1bGVOYW1lIC1UeXBlOiRUeXBlIC1WZXJiOidHRVQnCgogICAgICAgIGlmICgtbm90ICRQb3N0SW5zdGFsbEhvb2spIHsKICAgICAgICAgICAgJFBvc3RJbnN0YWxsSG9vayA9ICdJbnN0YWxsLnBzMScKICAgICAgICB9CgogICAgICAgIEluc3RhbGwtTW9kdWxlVG9EZXN0aW5hdGlvbiAtTW9kdWxlTmFtZTokcmVzdWx0Lk1vZHVsZU5hbWUgLUluc3RhbGxXaXRoTW9kdWxlTmFtZTokSW5zdGFsbFdpdGhNb2R1bGVOYW1lIC1Nb2R1bGVGb2xkZXJQYXRoOiRyZXN1bHQuTW9kdWxlRm9sZGVyUGF0aCAtVGVtcEZvbGRlclBhdGg6JHJlc3VsdC5UZW1wRm9sZGVyUGF0aCAtRGVzdGluYXRpb246JERlc3RpbmF0aW9uIC1Nb2R1bGVIYXNoOiRNb2R1bGVIYXNoIC1HbG9iYWw6JEdsb2JhbCAtUGVyc2lzdEVudmlyb25tZW50OiRQZXJzaXN0RW52aXJvbm1lbnQgLURvTm90SW1wb3J0OiREb05vdEltcG9ydCAtQWRkVG9Qcm9maWxlOiRBZGRUb1Byb2ZpbGUgLVVwZGF0ZTokVXBkYXRlIC1Eb05vdFBvc3RJbnN0YWxsOiREb05vdFBvc3RJbnN0YWxsIC1Qb3N0SW5zdGFsbEhvb2s6JFBvc3RJbnN0YWxsSG9vawogICAgfQp9Cgo8IwogICAgLlNZTk9QU0lTCiAgICAgICAgSW5zdGFsbCBhIG1vZHVsZSBmcm9tIGEgcHJvdmlkZWQgbG9jYWwgcGF0aC4KCiAgICAuUEFSQU1FVEVSIE1vZHVsZVBhdGgKICAgICAgICBMb2NhbCBwYXRoIHRvIHRoZSBtb2R1bGUgdG8gaW5zdGFsbC4KCiAgICAuUEFSQU1FVEVSIE1vZHVsZU5hbWUKICAgICAgICBJdCBpcyBub3QgYWx3YXlzIHBvc3NpYmxlIHRvIGludGVyZmVyZSB0aGUgcmlnaHQgTW9kdWxlTmFtZSwgZWcuIHRoZSBmaWxlbmFtZSBpcyB1bmtub3duIG9yIHRoZSB6aXAgYXJjaGl2ZSBjb250YWlucyBtdWx0aXBsZSBtb2R1bGVzLgoKICAgIC5QQVJBTUVURVIgVHlwZQogICAgICAgIFdoZW4gTW9kdWxlVXJsIG9yIE1vZHVsZVBhdGggc3BlY2lmaWVkLCBhbGxvd3Mgc3BlY2lmeWluZyB0eXBlIG9mIHRoZSBwYWNrYWdlLiBDYW4gYmUgWklQIG9yIFBTTTEuCgogICAgLlBBUkFNRVRFUiBEZXN0aW5hdGlvbgogICAgICAgIFdoZW4gc3BlY2lmaWVkIHRoZSBtb2R1bGUgd2lsbCBiZSBpbnN0YWxsZWQgYmVsb3cgdGhpcyBwYXRoLiBEZWZhdWx0cyB0byAnJGdsb2JhbDpQc0dldERlc3RpbmF0aW9uTW9kdWxlUGF0aCcgaWYgZGVmaW5lZC4KCiAgICAuUEFSQU1FVEVSIE1vZHVsZUhhc2gKICAgICAgICBXaGVuIE1vZHVsZUhhc2ggaXMgc3BlY2lmaWVkIHRoZSBjaG9zZW4gbW9kdWxlIHdpbGwgb25seSBiZSBpbnN0YWxsZWQgaWYgaXRzIGNvbnRlbnRzIG1hdGNoIHRoZSBwcm92aWRlZCBoYXNoLgoKICAgIC5QQVJBTUVURVIgR2xvYmFsCiAgICAgICAgSWYgc2V0LCBhdHRlbXB0cyB0byBpbnN0YWxsIHRoZSBtb2R1bGUgdG8gdGhlIGFsbCB1c2VycyBsb2NhdGlvbiBpbiBDOlxQcm9ncmFtIEZpbGVzXENvbW1vbiBGaWxlc1xNb2R1bGVzLi4uCgogICAgICAgIE5PVEU6IElmIHRoZSAtRGVzdGluYXRpb24gZGlyZWN0b3J5IGlzIHNwZWNpZmllZCwgdGhlbiAtR2xvYmFsIHdpbGwgb25seSBoYXZlIGFuIGVmZmVjdCBpbiBjb21iaW5hdGlvbiB3aXRoICctUGVyc2lzdEVudmlyb25tZW50Jy4gVGhpcyBpcyBhbHNvIHRoZSBjYXNlIGlmICckZ2xvYmFsOlBzR2V0RGVzdGluYXRpb25Nb2R1bGVQYXRoJyBpcyBkZWZpbmVkLgoKICAgIC5QQVJBTUVURVIgRG9Ob3RJbXBvcnQKICAgICAgICBJbmRpY2F0ZXMgdGhhdCBjb21tYW5kIHNob3VsZCBub3QgaW1wb3J0IG1vZHVsZSBhZnRlciBpbnN0YWxsYXRpb24KCiAgICAuUEFSQU1FVEVSIEFkZFRvUHJvZmlsZQogICAgICAgIEFkZHMgSW1wb3J0LU1vZHVsZSBzdGF0ZW1lbnQgZm9yIGluc3RhbGxlZCBtb2R1bGUgdG8gdGhlIHByb2ZpbGUucHMxCgogICAgLlBBUkFNRVRFUiBVcGRhdGUKICAgICAgICBGb3JjZXMgbW9kdWxlIHRvIGJlIHVwZGF0ZWQKCiAgICAuUEFSQU1FVEVSIFBlcnNpc3RFbnZpcm9ubWVudAogICAgICAgIElmIHRoaXMgc3dpdGNoIGlzIHNwZWNpZmllZCwgdGhlIGluc3RhbGxhdGlvbiBkZXN0aW5hdGlvbiBwYXRoIHdpbGwgYmUgYWRkZWQgdG8gZWl0aGVyIHRoZSBVc2VyJ3MgUFNNb2R1bGVQYXRoIGVudmlyb25tZW50IHZhcmlhYmxlIG9yIE1hY2hpbmUncyBQU01vZHVsZVBhdGggZW52aXJvbm1lbnQgdmFyaWFibGUgKGlmIC1HbG9iYWwgc3BlY2lmaWVkKQoKICAgIC5QQVJBTUVURVIgSW5zdGFsbFdpdGhNb2R1bGVOYW1lCiAgICAgICAgQWxsb3dzIHRvIHNwZWNpZnkgdGhlIG5hbWUgb2YgdGhlIG1vZHVsZSBhbmQgb3ZlcnJpZGUgdGhlIE1vZHVsZU5hbWUgbm9ybWFsbHkgdXNlZC4KICAgICAgICBOT1RFOiBUaGlzIHBhcmFtZXRlciBhbGxvd3MgdG8gaW5zdGFsbCBhIG1vZHVsZSBmcm9tIHRoZSBQc0dldC1EaXJlY3RvcnkgbW9yZSB0aGFuIG9uY2UgYW5kIFBzR2V0IGRvZXMgbm90IHJlbWVtYmVyIHRoYXQgdGhpcyBtb2R1bGUgaXMgaW5zdGFsbGVkIHdpdGggYSBkaWZmZXJlbnQgbmFtZS4KCiAgICAuUEFSQU1FVEVSIERvTm90UG9zdEluc3RhbGwKICAgICAgICBJZiBkZWZpbmVkLCB0aGUgUG9zdEluc3RhbGxIb29rIGlzIG5vdCBleGVjdXRlZC4KCiAgICAuUEFSQU1FUlRFUiBQb3N0SW5zdGFsbEhvb2sKICAgICAgICBEZWZpbmVzIHRoZSBuYW1lIG9mIGEgc2NyaXB0IGluc2lkZSB0aGUgaW5zdGFsbGVkIG1vZHVsZSBmb2xkZXIgd2hpY2ggc2hvdWxkIGJlIGV4ZWN1dGVkIGFmdGVyIGluc3RhbGxhdGlvbi4KICAgICAgICBEZWZhdWx0OiAnSW5zdGFsbC5wczEnCiM+CmZ1bmN0aW9uIEluc3RhbGwtTW9kdWxlRnJvbUxvY2FsIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLCBWYWx1ZUZyb21QaXBlbGluZT0kdHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSwgTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkTW9kdWxlUGF0aCwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkTW9kdWxlTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbVmFsaWRhdGVTZXQoJ1pJUCcsICdQU00xJywgJ1BTRDEnLCAnJyldICMgJHNjcmlwdDpQU0dFVF9aSVAsICRzY3JpcHQ6UFNHRVRfUFNNMSBvciAkc2NyaXB0OlBTR0VUX1BTRDEKICAgICAgICBbU3RyaW5nXSAkVHlwZSwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkRGVzdGluYXRpb24gPSAkZ2xvYmFsOlBzR2V0RGVzdGluYXRpb25Nb2R1bGVQYXRoLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRNb2R1bGVIYXNoLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTd2l0Y2hdICRHbG9iYWwsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N3aXRjaF0gJERvTm90SW1wb3J0LAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTd2l0Y2hdICRBZGRUb1Byb2ZpbGUsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N3aXRjaF0gJFVwZGF0ZSwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3dpdGNoXSAkUGVyc2lzdEVudmlyb25tZW50LAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRJbnN0YWxsV2l0aE1vZHVsZU5hbWUsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N3aXRjaF0gJERvTm90UG9zdEluc3RhbGwsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJFBvc3RJbnN0YWxsSG9vawogICAgKQogICAgcHJvY2VzcyB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAnTW9kdWxlIHdpbGwgYmUgaW5zdGFsbGVkIGZyb20gbG9jYWwgcGF0aCcKCiAgICAgICAgJEluc3RhbGxXaXRoTW9kdWxlTmFtZSA9IGlmICgkSW5zdGFsbFdpdGhNb2R1bGVOYW1lKSB7ICRJbnN0YWxsV2l0aE1vZHVsZU5hbWUgfSBlbHNlIHsgJE1vZHVsZU5hbWUgfQogICAgICAgIGlmICgkSW5zdGFsbFdpdGhNb2R1bGVOYW1lKSB7CiAgICAgICAgICAgIGlmIChUZXN0LU1vZHVsZUluc3RhbGxlZEFuZEltcG9ydCAtTW9kdWxlTmFtZTokSW5zdGFsbFdpdGhNb2R1bGVOYW1lIC1EZXN0aW5hdGlvbjokRGVzdGluYXRpb24gLVVwZGF0ZTokVXBkYXRlIC1Eb05vdEltcG9ydDokRG9Ob3RJbXBvcnQgLU1vZHVsZUhhc2g6JE1vZHVsZUhhc2gpIHsKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAkdGVtcEZvbGRlclBhdGggPSBKb2luLVBhdGggKFtJTy5QYXRoXTo6R2V0VGVtcFBhdGgoKSkgKFtHdWlkXTo6TmV3R3VpZCgpLlRvU3RyaW5nKCkpCiAgICAgICAgTmV3LUl0ZW0gJHRlbXBGb2xkZXJQYXRoIC1JdGVtVHlwZSBEaXJlY3RvcnkgfCBPdXQtTnVsbAogICAgICAgIFdyaXRlLURlYnVnICJUZW1wb3Jhcnkgd29yayBkaXJlY3RvcnkgY3JlYXRlZDogJHRlbXBGb2xkZXJQYXRoIgoKICAgICAgICB0cmFwIHsgUmVtb3ZlLUl0ZW0gLVBhdGggJHRlbXBGb2xkZXJQYXRoIC1SZWN1cnNlIC1Gb3JjZSA7IGJyZWFrIH0KCiAgICAgICAgJG5ld01vZHVsZVBhdGggPSBKb2luLVBhdGggLVBhdGggJHRlbXBGb2xkZXJQYXRoIC1DaGlsZFBhdGggJ21vZHVsZScKICAgICAgICBOZXctSXRlbSAkbmV3TW9kdWxlUGF0aCAtSXRlbVR5cGUgRGlyZWN0b3J5IHwgT3V0LU51bGwKCiAgICAgICAgaWYgKFRlc3QtUGF0aCAtUGF0aCAkTW9kdWxlUGF0aCAtUGF0aFR5cGUgTGVhZikgewogICAgICAgICAgICAkZXh0ZW5zaW9uID0gKEdldC1JdGVtICRNb2R1bGVQYXRoKS5FeHRlbnNpb24KICAgICAgICAgICAgaWYgKCRleHRlbnNpb24gLWVxICcucHNtMScpIHsKICAgICAgICAgICAgICAgICRUeXBlID0gaWYgKCRUeXBlKSB7ICRUeXBlIH0gZWxzZSB7ICRQU0dFVF9QU00xIH0KICAgICAgICAgICAgfSBlbHNlaWYgKCRleHRlbnNpb24gLWVxICcuemlwJykgewogICAgICAgICAgICAgICAgJFR5cGUgPSBpZiAoJFR5cGUpIHsgJFR5cGUgfSBlbHNlIHsgJFBTR0VUX1pJUCB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgkVHlwZSAtZXEgJFBTR0VUX1pJUCkgewogICAgICAgICAgICAgICAgRXhwYW5kLVppcE1vZHVsZSAkTW9kdWxlUGF0aCAkbmV3TW9kdWxlUGF0aAogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgQ29weS1JdGVtIC1QYXRoICRNb2R1bGVQYXRoIC1EZXN0aW5hdGlvbiAkbmV3TW9kdWxlUGF0aAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2VpZiAoVGVzdC1QYXRoIC1QYXRoICRNb2R1bGVQYXRoIC1QYXRoVHlwZSBDb250YWluZXIpIHsKICAgICAgICAgICAgQ29weS1JdGVtIC1QYXRoICRNb2R1bGVQYXRoIC1EZXN0aW5hdGlvbiAkbmV3TW9kdWxlUGF0aCAtRm9yY2UgLVJlY3Vyc2UKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHRocm93ICJNb2R1bGVQYXRoICckTW9kdWxlUGF0aCcgZG9lcyBub3QgcG9pbnQgdG8gYW4gbW9kdWxlLiIKICAgICAgICB9CgogICAgICAgICRmb3VuZFJlc3VsdCA9IEZpbmQtTW9kdWxlTmFtZUFuZEZvbGRlciAtUGF0aCAkbmV3TW9kdWxlUGF0aCAtTW9kdWxlTmFtZSAkTW9kdWxlTmFtZQoKICAgICAgICBpZiAoLW5vdCAkUG9zdEluc3RhbGxIb29rKSB7CiAgICAgICAgICAgICRQb3N0SW5zdGFsbEhvb2sgPSAnSW5zdGFsbC5wczEnCiAgICAgICAgfQoKICAgICAgICBJbnN0YWxsLU1vZHVsZVRvRGVzdGluYXRpb24gLU1vZHVsZU5hbWU6JGZvdW5kUmVzdWx0Lk1vZHVsZU5hbWUgLUluc3RhbGxXaXRoTW9kdWxlTmFtZTokSW5zdGFsbFdpdGhNb2R1bGVOYW1lIC1Nb2R1bGVGb2xkZXJQYXRoOiRmb3VuZFJlc3VsdC5Nb2R1bGVGb2xkZXJQYXRoIC1UZW1wRm9sZGVyUGF0aDokdGVtcEZvbGRlclBhdGggLURlc3RpbmF0aW9uOiREZXN0aW5hdGlvbiAtTW9kdWxlSGFzaDokTW9kdWxlSGFzaCAtR2xvYmFsOiRHbG9iYWwgLVBlcnNpc3RFbnZpcm9ubWVudDokUGVyc2lzdEVudmlyb25tZW50IC1Eb05vdEltcG9ydDokRG9Ob3RJbXBvcnQgLUFkZFRvUHJvZmlsZTokQWRkVG9Qcm9maWxlIC1VcGRhdGU6JFVwZGF0ZSAtRG9Ob3RQb3N0SW5zdGFsbDokRG9Ob3RQb3N0SW5zdGFsbCAtUG9zdEluc3RhbGxIb29rOiRQb3N0SW5zdGFsbEhvb2sKICAgIH0KfQoKPCMKICAgIC5TWU5PUFNJUwogICAgICAgIEluc3RhbGwgYSBtb2R1bGUgZnJvbSBhIE51R2V0IHNvdXJjZS4KCiAgICAuUEFSQU1FVEVSIE51R2V0UGFja2FnZUlkCiAgICAgICAgTnVHZXQgcGFja2FnZSBuYW1lIGNvbnRhaW5pbmcgdGhlIG1vZHVsZSB0byBpbnN0YWxsLgoKICAgIC5QQVJBTUVURVIgUGFja2FnZVZlcnNpb24KICAgICAgICBBbGxvd3MgYSBzcGVjaWZpYyB2ZXJzaW9uIG9mIHRoZSBzcGVjaWZpZWQgTnVHZXQgcGFja2FnZSB0byB1c2VkLCBpZiBub3Qgc3BlY2lmaWVkIHRoZW4gdGhlIGxhdGVzdCBzdGFibGUgdmVyc2lvbiB3aWxsIGJlIHVzZWQuCgogICAgLlBBUkFNRVRFUiBOdWdldFNvdXJjZQogICAgICAgIFVSTCB0byB0aGUgTnVHZXQgZmVlZCBjb250YWluaW5nIHRoZSBwYWNrYWdlLgoKICAgIC5QQVJBTUVURVIgUHJlUmVsZWFzZQogICAgICAgIElmIFBhY2thZ2VWZXJzaW9uIGlzIG5vdCBzcGVjaWZpZWQsIHRoZW4gdGhpcyBzd2l0Y2ggYWxsb3dzIHRoZSBsYXRlc3QgcHJlcmVsZWFzZSBwYWNrYWdlIHRvIGJlIHVzZWQuCgogICAgLlBBUkFNRVRFUiBQcmVSZWxlYXNlVGFnCiAgICAgICAgSWYgUGFja2FnZVZlcnNpb24gaXMgbm90IHNwZWNpZmllZCwgdGhlbiB0aGlzIHBhcmFtZXRlciBhbGxvd3MgdGhlIGxhdGVzdCB2ZXJzaW9uIG9mIGEgcGFydGljdWxhciBwcmVyZWxlYXNlIHRhZyB0byBiZSB1c2VkCgogICAgLlBBUkFNRVRFUiBEZXN0aW5hdGlvbgogICAgICAgIFdoZW4gc3BlY2lmaWVkIHRoZSBtb2R1bGUgd2lsbCBiZSBpbnN0YWxsZWQgYmVsb3cgdGhpcyBwYXRoLiBEZWZhdWx0cyB0byAnJGdsb2JhbDpQc0dldERlc3RpbmF0aW9uTW9kdWxlUGF0aCcgaWYgZGVmaW5lZC4KCiAgICAuUEFSQU1FVEVSIE1vZHVsZUhhc2gKICAgICAgICBXaGVuIE1vZHVsZUhhc2ggaXMgc3BlY2lmaWVkIHRoZSBjaG9zZW4gbW9kdWxlIHdpbGwgb25seSBiZSBpbnN0YWxsZWQgaWYgaXRzIGNvbnRlbnRzIG1hdGNoIHRoZSBwcm92aWRlZCBoYXNoLgoKICAgIC5QQVJBTUVURVIgR2xvYmFsCiAgICAgICAgSWYgc2V0LCBhdHRlbXB0cyB0byBpbnN0YWxsIHRoZSBtb2R1bGUgdG8gdGhlIGFsbCB1c2VycyBsb2NhdGlvbiBpbiBDOlxQcm9ncmFtIEZpbGVzXENvbW1vbiBGaWxlc1xNb2R1bGVzLi4uCgogICAgICAgIE5PVEU6IElmIHRoZSAtRGVzdGluYXRpb24gZGlyZWN0b3J5IGlzIHNwZWNpZmllZCwgdGhlbiAtR2xvYmFsIHdpbGwgb25seSBoYXZlIGFuIGVmZmVjdCBpbiBjb21iaW5hdGlvbiB3aXRoICctUGVyc2lzdEVudmlyb25tZW50Jy4gVGhpcyBpcyBhbHNvIHRoZSBjYXNlIGlmICckZ2xvYmFsOlBzR2V0RGVzdGluYXRpb25Nb2R1bGVQYXRoJyBpcyBkZWZpbmVkLgoKICAgIC5QQVJBTUVURVIgRG9Ob3RJbXBvcnQKICAgICAgICBJbmRpY2F0ZXMgdGhhdCBjb21tYW5kIHNob3VsZCBub3QgaW1wb3J0IG1vZHVsZSBhZnRlciBpbnN0YWxsYXRpb24KCiAgICAuUEFSQU1FVEVSIEFkZFRvUHJvZmlsZQogICAgICAgIEFkZHMgSW1wb3J0LU1vZHVsZSBzdGF0ZW1lbnQgZm9yIGluc3RhbGxlZCBtb2R1bGUgdG8gdGhlIHByb2ZpbGUucHMxCgogICAgLlBBUkFNRVRFUiBVcGRhdGUKICAgICAgICBGb3JjZXMgbW9kdWxlIHRvIGJlIHVwZGF0ZWQKCiAgICAuUEFSQU1FVEVSIFBlcnNpc3RFbnZpcm9ubWVudAogICAgICAgIElmIHRoaXMgc3dpdGNoIGlzIHNwZWNpZmllZCwgdGhlIGluc3RhbGxhdGlvbiBkZXN0aW5hdGlvbiBwYXRoIHdpbGwgYmUgYWRkZWQgdG8gZWl0aGVyIHRoZSBVc2VyJ3MgUFNNb2R1bGVQYXRoIGVudmlyb25tZW50IHZhcmlhYmxlIG9yIE1hY2hpbmUncyBQU01vZHVsZVBhdGggZW52aXJvbm1lbnQgdmFyaWFibGUgKGlmIC1HbG9iYWwgc3BlY2lmaWVkKQoKICAgIC5QQVJBTUVURVIgSW5zdGFsbFdpdGhNb2R1bGVOYW1lCiAgICAgICAgQWxsb3dzIHRvIHNwZWNpZnkgdGhlIG5hbWUgb2YgdGhlIG1vZHVsZSBhbmQgb3ZlcnJpZGUgdGhlIE1vZHVsZU5hbWUgbm9ybWFsbHkgdXNlZC4KICAgICAgICBOT1RFOiBUaGlzIHBhcmFtZXRlciBhbGxvd3MgdG8gaW5zdGFsbCBhIG1vZHVsZSBmcm9tIHRoZSBQc0dldC1EaXJlY3RvcnkgbW9yZSB0aGFuIG9uY2UgYW5kIFBzR2V0IGRvZXMgbm90IHJlbWVtYmVyIHRoYXQgdGhpcyBtb2R1bGUgaXMgaW5zdGFsbGVkIHdpdGggYSBkaWZmZXJlbnQgbmFtZS4KCiAgICAuUEFSQU1FVEVSIERvTm90UG9zdEluc3RhbGwKICAgICAgICBJZiBkZWZpbmVkLCB0aGUgUG9zdEluc3RhbGxIb29rIGlzIG5vdCBleGVjdXRlZC4KCiAgICAuUEFSQU1FUlRFUiBQb3N0SW5zdGFsbEhvb2sKICAgICAgICBEZWZpbmVzIHRoZSBuYW1lIG9mIGEgc2NyaXB0IGluc2lkZSB0aGUgaW5zdGFsbGVkIG1vZHVsZSBmb2xkZXIgd2hpY2ggc2hvdWxkIGJlIGV4ZWN1dGVkIGFmdGVyIGluc3RhbGxhdGlvbi4KICAgICAgICBEZWZhdWx0OiAnSW5zdGFsbC5wczEnCiM+CmZ1bmN0aW9uIEluc3RhbGwtTW9kdWxlRnJvbU51R2V0IHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLCBWYWx1ZUZyb21QaXBlbGluZT0kdHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSwgTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbVmFsaWRhdGVQYXR0ZXJuKCdeXHcrKFtfLi1dXHcrKSokJyldICMgcmVnZXggZnJvbSBOdUdldC5QYWNrYWdlSWRWYWxpZGF0b3IuX2lkUmVnZXgKICAgICAgICBbVmFsaWRhdGVMZW5ndGgoMSwxMDApXSAjIG1heGltdW0gbGVuZ3RoIGZyb20gTnVHZXQuUGFja2FnZUlkVmFsaWRhdG9yLk1heFBhY2thZ2VJZExlbmd0aAogICAgICAgIFtTdHJpbmddICROdUdldFBhY2thZ2VJZCwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkUGFja2FnZVZlcnNpb24sCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJE51Z2V0U291cmNlID0gJ2h0dHBzOi8vbnVnZXQub3JnL2FwaS92Mi8nLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTd2l0Y2hdICRQcmVSZWxlYXNlLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRQcmVSZWxlYXNlVGFnLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTdHJpbmddICREZXN0aW5hdGlvbiA9ICRnbG9iYWw6UHNHZXREZXN0aW5hdGlvbk1vZHVsZVBhdGgsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJE1vZHVsZUhhc2gsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N3aXRjaF0gJEdsb2JhbCwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3dpdGNoXSAkRG9Ob3RJbXBvcnQsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N3aXRjaF0gJEFkZFRvUHJvZmlsZSwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3dpdGNoXSAkVXBkYXRlLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQogICAgICAgIFtTd2l0Y2hdICRQZXJzaXN0RW52aXJvbm1lbnQsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJEluc3RhbGxXaXRoTW9kdWxlTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3dpdGNoXSAkRG9Ob3RQb3N0SW5zdGFsbCwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkUG9zdEluc3RhbGxIb29rCiAgICApCiAgICBwcm9jZXNzIHsKICAgICAgICBXcml0ZS1WZXJib3NlICdNb2R1bGUgd2lsbCBiZSBpbnN0YWxsZWQgZnJvbSBOdUdldCcKICAgICAgICAkSW5zdGFsbFdpdGhNb2R1bGVOYW1lID0gaWYgKCRJbnN0YWxsV2l0aE1vZHVsZU5hbWUpIHsgJEluc3RhbGxXaXRoTW9kdWxlTmFtZSB9IGVsc2UgeyAkTnVHZXRQYWNrYWdlSWQgfQoKICAgICAgICBpZiAoVGVzdC1Nb2R1bGVJbnN0YWxsZWRBbmRJbXBvcnQgLU1vZHVsZU5hbWU6JEluc3RhbGxXaXRoTW9kdWxlTmFtZSAtRGVzdGluYXRpb246JERlc3RpbmF0aW9uIC1VcGRhdGU6JFVwZGF0ZSAtRG9Ob3RJbXBvcnQ6JERvTm90SW1wb3J0IC1Nb2R1bGVIYXNoOiRNb2R1bGVIYXNoKSB7CiAgICAgICAgICAgIHJldHVybgogICAgICAgIH0KCiAgICAgICAgaWYgKC1ub3QgJFBvc3RJbnN0YWxsSG9vaykgewogICAgICAgICAgICAkUG9zdEluc3RhbGxIb29rID0gJ0luc3RhbGwucHMxJwogICAgICAgIH0KCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJHJlc3VsdCA9IEludm9rZS1Eb3dubG9hZE51Z2V0UGFja2FnZSAtTnVHZXRQYWNrYWdlSWQgJE51R2V0UGFja2FnZUlkIC1QYWNrYWdlVmVyc2lvbiAkUGFja2FnZVZlcnNpb24gLVNvdXJjZSAkTnVnZXRTb3VyY2UgLVByZVJlbGVhc2U6JFByZVJlbGVhc2UgLVByZVJlbGVhc2VUYWcgJFByZVJlbGVhc2VUYWcKICAgICAgICAgICAgSW5zdGFsbC1Nb2R1bGVUb0Rlc3RpbmF0aW9uIC1Nb2R1bGVOYW1lOiRyZXN1bHQuTW9kdWxlTmFtZSAtSW5zdGFsbFdpdGhNb2R1bGVOYW1lOiRJbnN0YWxsV2l0aE1vZHVsZU5hbWUgLU1vZHVsZUZvbGRlclBhdGg6JHJlc3VsdC5Nb2R1bGVGb2xkZXJQYXRoIC1UZW1wRm9sZGVyUGF0aDokcmVzdWx0LlRlbXBGb2xkZXJQYXRoIC1EZXN0aW5hdGlvbjokRGVzdGluYXRpb24gLU1vZHVsZUhhc2g6JE1vZHVsZUhhc2ggLUdsb2JhbDokR2xvYmFsIC1QZXJzaXN0RW52aXJvbm1lbnQ6JFBlcnNpc3RFbnZpcm9ubWVudCAtRG9Ob3RJbXBvcnQ6JERvTm90SW1wb3J0IC1BZGRUb1Byb2ZpbGU6JEFkZFRvUHJvZmlsZSAtVXBkYXRlOiRVcGRhdGUgLURvTm90UG9zdEluc3RhbGw6JERvTm90UG9zdEluc3RhbGwgLVBvc3RJbnN0YWxsSG9vazokUG9zdEluc3RhbGxIb29rCiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtRXJyb3IgJF8uRXhjZXB0aW9uLk1lc3NhZ2UKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgfQogICAgfQp9CgojZW5kcmVnaW9uCgojcmVnaW9uIEludGVybmFsIENtZGxldHMKI3JlZ2lvbiBNb2R1bGUgSW5zdGFsbGF0aW9uCjwjCiAgICAuU1lOT1BTSVMKICAgICAgICBBZGRzIHZhbHVlIHRvIGEgIlBhdGgiIHR5cGUgb2YgZW52aXJvbm1lbnQgdmFyaWFibGUgKFBBVEggb3IgUFNNb2R1bGVQYXRoKS4gIFBhdGggdHlwZSBvZiB2YXJpYWJsZXMgbXVuZ2UgdGhlIFVzZXIgYW5kIE1hY2hpbmUgdmFsdWVzIGludG8gdGhlIHZhbHVlIGZvciB0aGUgY3VycmVudCBzZXNzaW9uLgoKICAgIC5QQVJBTUVURVIgR2xvYmFsCiAgICAgICAgVGhlIFN5c3RlbS5FbnZpcm9ubWVudFZhcmlhYmxlVGFyZ2V0IG9mIHdoYXQgdHlwZSBvZiBlbnZpcm9ubWVudCB2YXJpYWJsZSB0byBtb2RpZnkgKCJNYWNoaW5lIiwiVXNlciIgb3IgIlNlc3Npb24iKQoKICAgIC5QQVJBTUVURVIgUGF0aFRvQWRkCiAgICAgICAgVGhlIGFjdHVhbCBwYXRoIHRvIGFkZCB0byB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUKCiAgICAuUEFSQU1FVEVSIFBlcnNpc3RFbnZpcm9ubWVudAogICAgICAgIElmIHNwZWNpZmllZCwgd2lsbCBwZXJtYW5lbnRseSBzdG9yZSB0aGUgdmFyaWFibGUgaW4gcmVnaXN0cnkKCiAgICAuRVhBTVBMRQogICAgICAgIEFkZFBhdGhUb1BTTW9kdWxlUGF0aCAtU2NvcGUgIk1hY2hpbmUiIC1QYXRoVG9BZGQgIiRlbnY6Q29tbW9uUHJvZ3JhbUZpbGVzXE1vZHVsZXMiCgogICAgICAgIERlc2NyaXB0aW9uCiAgICAgICAgLS0tLS0tLS0tLS0KICAgICAgICBUaGlzIGNvbW1hbmQgYWRkIHRoZSBwYXRoICIkZW52OkNvbW1vblByb2dyYW1GaWxlc1xNb2R1bGVzIiB0byB0aGUgTWFjaGluZSBQU01vZHVsZVBhdGggZW52aXJvbm1lbnQgdmFyaWFibGUKIz4KZnVuY3Rpb24gQWRkLVBhdGhUb1BTTW9kdWxlUGF0aCB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0gKAoKCSAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCgkgICAgW3N0cmluZ10gJFBhdGhUb0FkZCwKCiAgICAgICAgW3N3aXRjaF0gJFBlcnNpc3RFbnZpcm9ubWVudCwKCiAgICAgICAgW3N3aXRjaF0gJEdsb2JhbAogICAgKQogICAgcHJvY2VzcyB7CiAgICAgICAgJFBhdGhUb0FkZCA9IENvbnZlcnRUby1DYW5vbmljYWxQYXRoIC1QYXRoICRQYXRoVG9BZGQKCiAgICAgICAgaWYoLW5vdCAkUGVyc2lzdEVudmlyb25tZW50KSB7CiAgICAgICAgICAgIGlmICgtbm90ICgkZW52OlBTTW9kdWxlUGF0aC5Db250YWlucygkUGF0aFRvQWRkKSkpIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIk1vZHVsZSBpbnN0YWxsIGRlc3RpbmF0aW9uIGAiJFBhdGhUb0FkZGAiIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgUFNNb2R1bGVQYXRoIGVudmlyb25tZW50IHZhcmlhYmxlLiIKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4KICAgICAgICB9CgogICAgICAgICRzY29wZSA9ICdVc2VyJwogICAgICAgIGlmICgkR2xvYmFsKSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJ1RoZSBNYWNoaW5lIGVudmlyb25tZW50IHZhcmlhYmxlIFBTTW9kdWxlUGF0aCB3aWxsIGJlIG1vZGlmaWVkLicKICAgICAgICAgICAgJHNjb3BlID0gJ01hY2hpbmUnCiAgICAgICAgfQoKICAgICAgICAkcGF0aFZhbHVlID0gJycgKyBbRW52aXJvbm1lbnRdOjpHZXRFbnZpcm9ubWVudFZhcmlhYmxlKCdQU01vZHVsZVBhdGgnLCAkc2NvcGUpCgogICAgICAgIGlmICgtbm90ICgkcGF0aFZhbHVlLkNvbnRhaW5zKCRQYXRoVG9BZGQpKSkgewogICAgICAgICAgICBpZiAoJHBhdGhWYWx1ZSAtZXEgJycpIHsKICAgICAgICAgICAgICAgIFdyaXRlLURlYnVnICJQU01vZHVsZVBhdGggZm9yIHNjb3BlICckc2NvcGUnIHdhcyByZWFkIGVtcHR5LiBTZXR0aW5nIFBvd2VyU2hlbGwgZGVmYXVsdCBpbnN0ZWFkLiIKICAgICAgICAgICAgICAgIGlmICgkc2NvcGUgLWVxICdVc2VyJykgewogICAgICAgICAgICAgICAgICAgICRwYXRoVmFsdWUgPSBKb2luLVBhdGggLVBhdGggKFtFbnZpcm9ubWVudF06OkdldEZvbGRlclBhdGgoJ015RG9jdW1lbnRzJykpIC1DaGlsZFBhdGggJ1dpbmRvd3NQb3dlclNoZWxsXE1vZHVsZXMnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkcGF0aFZhbHVlID0gSm9pbi1QYXRoIC1QYXRoICRQU0hPTUUgLUNoaWxkUGF0aCAnTW9kdWxlcycKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKC1ub3QgKCRwYXRoVmFsdWUuQ29udGFpbnMoJFBhdGhUb0FkZCkpKSB7CiAgICAgICAgICAgICAgICAkcGF0aFZhbHVlID0gIiRwYXRoVmFsdWU7JFBhdGhUb0FkZCIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgW0Vudmlyb25tZW50XTo6U2V0RW52aXJvbm1lbnRWYXJpYWJsZSgnUFNNb2R1bGVQYXRoJywgJHBhdGhWYWx1ZSwgJHNjb3BlKQoKICAgICAgICAgICAgVXBkYXRlLVBTTW9kdWxlUGF0aAoKICAgICAgICAgICAgV3JpdGUtSG9zdCAiIiIkUGF0aFRvQWRkIiIgaXMgYWRkZWQgdG8gdGhlIFBTTW9kdWxlUGF0aCBlbnZpcm9ubWVudCB2YXJpYWJsZSIKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiIiJFBhdGhUb0FkZCIiIGFscmVhZHkgZXhpc3RzIGluIFBTTW9kdWxlUGF0aCBlbnZpcm9ubWVudCB2YXJpYWJsZSIKICAgICAgICB9CiAgICB9Cn0KCjwjCiAgICAuU1lOT1BTSVMKICAgICAgICBTdGFuZGFyZGl6ZSB0aGUgcHJvdmlkZWQgcGF0aC4KCiAgICAuREVTQ1JJUFRJT04KICAgICAgICBBIHNpbXBsZSByb3V0aW5lIHRvIHN0YW5kYXJkaXplIHBhdGggZm9ybWF0cy4KCiAgICAuUEFSQU1FVEVSIFBhdGgKIz4KZnVuY3Rpb24gQ29udmVydFRvLUNhbm9uaWNhbFBhdGggewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkUGF0aAogICAgKQogICAgcHJvY2VzcyB7CiAgICAgICAgcmV0dXJuIFtJTy5QYXRoXTo6R2V0RnVsbFBhdGgoKCRQYXRoLlRyaW0oKSkpCiAgICB9Cn0KCjwjCiAgICAuU1lOT1BTSVMKICAgICAgICBGaW5kIHRoZSBtb2R1bGUgZmlsZSBpbiB0aGUgZ2l2ZW4gcGF0aC4KCiAgICAuUEFSQU1FVEVSIFBhdGgKICAgICAgICBQYXRoIG9mIG1vZHVsZQoKICAgIC5QQVJBTUVURVIgTW9kdWxlTmFtZQogICAgICAgIE5hbWUgb2YgdGhlIE1vZHVsZQojPgpmdW5jdGlvbiBHZXQtTW9kdWxlRmlsZSB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLCBNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRQYXRoLAoKICAgICAgICBbU3RyaW5nXSAkTW9kdWxlTmFtZSA9ICcqJwogICAgKQogICAgcHJvY2VzcyB7CiAgICAgICAgJEluY2x1ZGVzID0gR2V0LVBvc3NpYmxlTW9kdWxlRmlsZU5hbWVzIC1Nb2R1bGVOYW1lICRNb2R1bGVOYW1lCgogICAgICAgICMgU29ydCBieSBmb2xkZXIgbGVuZ3RoIGVuc3VyZXMgdGhhdCB3ZSB1c2Ugb25lIGZyb20gcm9vdCBmb2xkZXIoSXNzdWUgIzEyKQogICAgICAgICREaXJlY3RvcnlOYW1lTGVuZ3RoUHJvcGVydHkgPSBAewogICAgICAgICAgICBFID0geyAkXy5EaXJlY3RvcnlOYW1lLkxlbmd0aCB9CiAgICAgICAgfQoKICAgICAgICAjIHNvcnQgYnkgSW5jbHVkZXMgdG8gZ2l2ZSBQU0QxIHByZWZlcmVuY2Ugb3ZlciBQU00xLCBldGMKICAgICAgICAkSW5jbHVkZXNQcmVmZXJlbmNlUHJvcGVydHkgPSBAewogICAgICAgICAgICBFID0gewogICAgICAgICAgICAgICAgZm9yICgkSW5kZXggPSAwOyAkSW5kZXggLWx0ICRJbmNsdWRlcy5MZW5ndGg7ICRJbmRleCsrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRfLk5hbWUgLWxpa2UgJEluY2x1ZGVzWyRJbmRleF0pIHsgYnJlYWsgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJEluZGV4CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIEdldC1DaGlsZEl0ZW0gLVBhdGggJFBhdGggLUluY2x1ZGUgJEluY2x1ZGVzIC1SZWN1cnNlIHwKICAgICAgICAgICAgV2hlcmUtT2JqZWN0IHsgLW5vdCAkXy5QU0lzQ29udGFpbmVyIH0gfAogICAgICAgICAgICBTb3J0LU9iamVjdCAtUHJvcGVydHkgJERpcmVjdG9yeU5hbWVMZW5ndGhQcm9wZXJ0eSwgJEluY2x1ZGVzUHJlZmVyZW5jZVByb3BlcnR5IHwKICAgICAgICAgICAgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgRnVsbE5hbWUgLUZpcnN0IDEKICAgIH0KfQoKPCMKICAgIC5TWU5PUFNJUwogICAgICAgIEdldCBsaXN0IG9mIHBvc3NpYmxlIG5hbWVzIGZvciB0aGUgbW9kdWxlIGZpbGUuCgogICAgLlBBUkFNRVRFUiBNb2R1bGVOYW1lCiAgICAgICAgTmFtZSBvZiB0aGUgbW9kdWxlCiM+CmZ1bmN0aW9uIEdldC1Qb3NzaWJsZU1vZHVsZUZpbGVOYW1lcyB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLCBNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRNb2R1bGVOYW1lCiAgICApCiAgICBwcm9jZXNzIHsKICAgICAgICAncHNkMScsJ3BzbTEnLCdwczEnLCdkbGwnLCdjZHhtbCcsJ3hhbWwnIHwgRm9yRWFjaC1PYmplY3QgeyAiJE1vZHVsZU5hbWVgLiRfIiB9CiAgICB9Cn0KCjwjCiAgICAuU1lOT1BTSVMKICAgICAgICBTZWFyY2ggaW4gdGhlIHByb3ZpZGVkIGZvbGRlciBmb3IgYSBtb2R1bGUsIGlmIHBvc3NpYmxlIHdpdGggdGhlIHByb3ZpZGVkIG5hbWUuCgogICAgLlBBUkFNRVRFUiBQYXRoCiAgICAgICAgUGF0aCB0byBzZWFyY2ggaW4gZm9yIHRoZSBtb2R1bGUuCgogICAgLlBBUkFNRVRFUiBNb2R1bGVOYW1lCiAgICAgICAgTW9kdWxlTmFtZSB3aGljaCBpcyBleHBlY3RlZC4KIz4KZnVuY3Rpb24gRmluZC1Nb2R1bGVOYW1lQW5kRm9sZGVyIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJFBhdGgsCgogICAgICAgIFtTdHJpbmddICRNb2R1bGVOYW1lCiAgICApCiAgICBwcm9jZXNzIHsKICAgICAgICBpZiAoJE1vZHVsZU5hbWUpIHsKICAgICAgICAgICAgJG1vZHVsZUZpbGUgPSBHZXQtTW9kdWxlRmlsZSAtUGF0aCAkUGF0aCAtTW9kdWxlTmFtZSAkTW9kdWxlTmFtZQogICAgICAgICAgICBpZiAoLW5vdCAkbW9kdWxlRmlsZSkgewogICAgICAgICAgICAgICAgdGhyb3cgIkNvdWxkIG5vdCBmaW5kIGEgbW9kdWxlIHdpdGggbmFtZSAnJE1vZHVsZU5hbWUnIGluIHRoZSBwcm92aWRlZCBmaWxlLiIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJG1vZHVsZUZpbGUgPSBHZXQtTW9kdWxlRmlsZSAtUGF0aCAkUGF0aAogICAgICAgICAgICBpZiAoLW5vdCAkbW9kdWxlRmlsZSkgewogICAgICAgICAgICAgICAgdGhyb3cgJ0NvdWxkIG5vdCBmaW5kIGFueSBtb2R1bGUgaW4gdGhlIHByb3ZpZGVkIGZpbGUuJwogICAgICAgICAgICB9CiAgICAgICAgICAgICRNb2R1bGVOYW1lID0gW0lPLlBhdGhdOjpHZXRGaWxlTmFtZVdpdGhvdXRFeHRlbnNpb24oJG1vZHVsZUZpbGUpCiAgICAgICAgfQoKICAgICAgICAkbW9kdWxlRm9sZGVyUGF0aCA9IFNwbGl0LVBhdGggLVBhdGggJG1vZHVsZUZpbGUKCiAgICAgICAgcmV0dXJuIEB7CiAgICAgICAgICAgIE1vZHVsZU5hbWUgPSAkTW9kdWxlTmFtZQogICAgICAgICAgICBNb2R1bGVGb2xkZXJQYXRoID0gJG1vZHVsZUZvbGRlclBhdGgKICAgICAgICB9CiAgICB9Cn0KCjwjCiAgICAuU1lOT1BTSVMKICAgICAgICBJbXBvcnQgZ2l2ZW4gbW9kZWxlCgogICAgLkRFU0NSSVBUSU9OCiAgICAgICAgSW1wb3J0IGdpdmVuIG1vZHVsZSB3aXRoIHN3aXRjaCAtR2xvYmFsIChmdW5jdGlvbnMgYXZhaWxhYmxlIHRvIG90aGVyIG1vZHVsZXMpIGFuZCBhdm9pZAogICAgICAgIGEgUG93ZXJzaGVsbCBidWcgcmVsYXRlZCB0byBiaW5hcnkgbW9kdWxlcy4KCiAgICAuJAojPgpmdW5jdGlvbiBJbXBvcnQtTW9kdWxlR2xvYmFsbHkgewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtICgKICAgICAgICBbU3RyaW5nXSAkTW9kdWxlTmFtZSwKICAgICAgICBbU3RyaW5nXSAkTW9kdWxlQmFzZSwKICAgICAgICBbU3dpdGNoXSAkRm9yY2UKICAgICkKICAgIHByb2Nlc3MgewogICAgICAgIFdyaXRlLVZlcmJvc2UgIkltcG9ydGluZyBpbnN0YWxsZWQgbW9kdWxlICckTW9kdWxlTmFtZScgZnJvbSAnJCgkaW5zdGFsbGVkTW9kdWxlLk1vZHVsZUJhc2UpJyIKICAgICAgICBJbXBvcnQtTW9kdWxlIC1OYW1lICRNb2R1bGVCYXNlIC1HbG9iYWwgLUZvcmNlOiRGb3JjZQoKICAgICAgICAkSWRlbnRpdHlFeHRlbnNpb24gPSBbU3lzdGVtLklPLlBhdGhdOjpHZXRFeHRlbnNpb24oKEdldC1Nb2R1bGVGaWxlIC1QYXRoICRNb2R1bGVCYXNlIC1Nb2R1bGVOYW1lICRNb2R1bGVOYW1lKSkKICAgICAgICBpZiAoJElkZW50aXR5RXh0ZW5zaW9uIC1lcSAnLmRsbCcpIHsKICAgICAgICAgICAgIyBpbXBvcnQgbW9kdWxlIHR3aWNlIGZvciBiaW5hcnkgbW9kdWxlcyB0byB3b3JrYXJvdW5kIFBvd2VyU2hlbGwgYnVnOgogICAgICAgICAgICAjIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL1Bvd2VyU2hlbGwvZmVlZGJhY2svZGV0YWlscy83MzM4NjkvaW1wb3J0LW1vZHVsZS1nbG9iYWwtZG9lcy1ub3Qtd29yay1mb3ItYS1iaW5hcnktbW9kdWxlCiAgICAgICAgICAgIEltcG9ydC1Nb2R1bGUgLU5hbWUgJE1vZHVsZUJhc2UgLUdsb2JhbCAtRm9yY2U6JEZvcmNlCiAgICAgICAgfQogICAgfQp9Cgo8IwogICAgLlNZTk9QU0lTCiAgICAgICAgRG93bmxvYWQgbW9kdWxlIGZyb20gVVJMCgogICAgLkRFU0NSSVBUSU9OCiAgICAgICAgRG93bmxvYWQgbW9kdWxlIGZyb20gVVJMIGFuZCB0cnkgdG8gaW50ZXJmZXJlIHVua25vd24gcGFyYW1ldGVyLgogICAgICAgIElmIGRvd25sb2FkIHRhcmdldCBpcyBhIHppcC1hcmNoaXZlIGl0IHdpbGwgYmUgZXh0cmFjdGVkLgoKICAgICAgICBSZXR1cm5zIGEgbWFwIGNvbnRhaW5pbmcgdGhlIFRlbXBGb2xkZXJQYXRoLCBNb2R1bGVGb2xkZXJQYXRoIGFuZCBNb2R1bGVOYW1lLgogICAgICAgIFRoZSBUZW1wRm9sZGVyUGF0aCBzaG91bGQgYmUgcmVtb3ZlZCBhZnRlciBwcm9jZXNzaW5nIHRoZSByZXN1bHQuCgogICAgLlBBUkFNRVRFUiBEb3dubG9hZFVybAogICAgICAgIFVSTCB0byB0aGUgbW9kdWxlIGRlbGl2ZXJ5IGZpbGUuCgogICAgLlBBUkFNRVRFUiBNb2R1bGVOYW1lCiAgICAgICAgTmFtZSBvZiB0aGUgbW9kdWxlLgoKICAgIC5QQVJBTUVURVIgVHlwZQogICAgICAgIFR5cGUgb2YgdGhlIG1vZHVsZSBkZWxpdmVyeSBmaWxlLgoKICAgIC5QQVJBTUVURVIgVmVyYgogICAgICAgIEh0dHAgbWV0aG9kIHVzZWQgZm9yIGRvd25sb2FkLgojPgpmdW5jdGlvbiBJbnZva2UtRG93bmxvYWRNb2R1bGVGcm9tV2ViIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICREb3dubG9hZFVybCwKCiAgICAgICAgW1N0cmluZ10gJE1vZHVsZU5hbWUsCgogICAgICAgIFtTdHJpbmddICRUeXBlLAoKICAgICAgICBbU3RyaW5nXSAkVmVyYgogICAgKQoKICAgICR0ZW1wRm9sZGVyUGF0aCA9IEpvaW4tUGF0aCAtUGF0aCAoW0lPLlBhdGhdOjpHZXRUZW1wUGF0aCgpKSAtQ2hpbGRQYXRoIChbR3VpZF06Ok5ld0d1aWQoKS5Ub1N0cmluZygpKQogICAgTmV3LUl0ZW0gLVBhdGggJHRlbXBGb2xkZXJQYXRoIC1JdGVtVHlwZSBEaXJlY3RvcnkgfCBPdXQtTnVsbAogICAgV3JpdGUtRGVidWcgIlRlbXBvcmFyeSB3b3JrIGRpcmVjdG9yeSBjcmVhdGVkOiAkdGVtcEZvbGRlclBhdGgiCgogICAgIyBtYWtlIGNlcnRhaW4gdGhhdCB0aGUgdGVtcEZvbGRlciB3aWxsIGJlIGRlbGV0ZWQgaWYgdGhlcmUgaXMgYW4gZXJyb3IKICAgIHRyYXAgeyBSZW1vdmUtSXRlbSAtUGF0aCAkdGVtcEZvbGRlclBhdGggLVJlY3Vyc2UgLUZvcmNlOyBicmVhayB9CgogICAgV3JpdGUtVmVyYm9zZSAiRG93bmxvYWRpbmcgbW9kdWxlIGZyb20gJERvd25sb2FkVXJsIgogICAgJGNsaWVudCA9IChuZXctb2JqZWN0IE5ldC5XZWJDbGllbnQpCiAgICAkY2xpZW50LlByb3h5LkNyZWRlbnRpYWxzID0gW1N5c3RlbS5OZXQuQ3JlZGVudGlhbENhY2hlXTo6RGVmYXVsdE5ldHdvcmtDcmVkZW50aWFscwogICAgJGRvd25sb2FkRmlsZVBhdGggPSBKb2luLVBhdGggLVBhdGggJHRlbXBmb2xkZXJQYXRoIC1DaGlsZFBhdGggJ2Rvd25sb2FkJwogICAgaWYgKCRWZXJiIC1lcSAnUE9TVCcpIHsKICAgICAgICAkY2xpZW50LkhlYWRlcnNbJ0NvbnRlbnQtdHlwZSddID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcKICAgICAgICBbSU8uRmlsZV06OldyaXRlQWxsQnl0ZXMoJGRvd25sb2FkRmlsZVBhdGgsICRjbGllbnQuVXBsb2FkRGF0YSgkRG93bmxvYWRVcmwsICcnKSkKICAgIH0KICAgIGVsc2UgewogICAgICAgICRjbGllbnQuRG93bmxvYWRGaWxlKCREb3dubG9hZFVybCwgJGRvd25sb2FkRmlsZVBhdGgpCiAgICB9CgogICAgJGNhbmRpZGF0ZU5hbWUgPSAne3VuZGVmaW5lZH0nCiAgICAkY29udGVudERpc3Bvc2l0aW9uID0gJGNsaWVudC5SZXNwb25zZUhlYWRlcnNbJ0NvbnRlbnQtRGlzcG9zaXRpb24nXQogICAgV3JpdGUtRGVidWcgIlRyeSB0byBnZXQgbW9kdWxlIGZpbGUgbmFtZSBmcm9tIGNvbnRlbnQgZGlzcG9zaXRpb24gaGVhZGVyOiBDb250ZW50LURpc3Bvc2l0aW9uID0gJyRjb250ZW50RGlzcG9zaXRpb24nIgoKICAgIGlmICgkY29udGVudERpc3Bvc2l0aW9uIC1tYXRjaCAnXGJmaWxlbmFtZT0iPyg/PG5hbWU+W14vXSspXC4oPzxleHQ+cHNtMXx6aXApIj8nKSB7CiAgICAgICAgJGNhbmRpZGF0ZU5hbWUgPSAkTWF0Y2hlcy5uYW1lCiAgICAgICAgJFR5cGUgPSBpZiAoJFR5cGUpIHsgJFR5cGUgfSBlbHNlaWYgKCRNYXRjaGVzLmV4dCAtZXEgJ3BzbTEnKSB7ICRQU0dFVF9QU00xIH0gZWxzZWlmICgkTWF0Y2hlcy5leHQgLWVxICd6aXAnKSB7ICRQU0dFVF9aSVAgfQogICAgfQogICAgZWxzZSB7CiAgICAgICAgV3JpdGUtRGVidWcgIlRyeSB0byBnZXQgbW9kdWxlIGZpbGUgbmFtZSBmcm9tIHVybDogJyREb3dubG9hZFVybCciCiAgICAgICAgaWYgKCREb3dubG9hZFVybCAtbWF0Y2ggJ1xiKD88bmFtZT5bXi9dKylcLig/PGV4dD5wc20xfHppcClbXCNcP10qJykgewogICAgICAgICAgICAkY2FuZGlkYXRlTmFtZSA9ICRNYXRjaGVzLm5hbWUKICAgICAgICAgICAgJFR5cGUgPSBpZiAoJFR5cGUpIHsgJFR5cGUgfSBlbHNlaWYgKCRNYXRjaGVzLmV4dCAtZXEgJ3BzbTEnKSB7ICRQU0dFVF9QU00xIH0gZWxzZWlmICgkTWF0Y2hlcy5leHQgLWVxICd6aXAnKSB7ICRQU0dFVF9aSVAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJGxvY2F0aW9uSGVhZGVyID0gJGNsaWVudC5SZXNwb25zZUhlYWRlcnNbJ0xvY2F0aW9uJ10KICAgICAgICAgICAgV3JpdGUtRGVidWcgIkNoZWNrIGxvY2F0aW9uIGhlYWRlciBpbiBjYXNlIG9mIHJlZGlyZWN0OiAnJGxvY2F0aW9uSGVhZGVyJyIKICAgICAgICAgICAgaWYgKCRsb2NhdGlvbkhlYWRlciAtbWF0Y2ggJ1xiKD88bmFtZT5bXi9dKylcLig/PGV4dD5wc20xfHppcClbXCNcP10qJykgewogICAgICAgICAgICAgICAgJGNhbmRpZGF0ZU5hbWUgPSAkTWF0Y2hlcy5uYW1lCiAgICAgICAgICAgICAgICAkVHlwZSA9IGlmICgkVHlwZSkgeyAkVHlwZSB9IGVsc2VpZiAoJE1hdGNoZXMuZXh0IC1lcSAncHNtMScpIHsgJFBTR0VUX1BTTTEgfSBlbHNlaWYgKCRNYXRjaGVzLmV4dCAtZXEgJ3ppcCcpIHsgJFBTR0VUX1pJUCB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgV3JpdGUtRGVidWcgIkludm9rZS1Eb3dubG9hZE1vZHVsZUZyb21XZWI6IENhbmRpZGF0ZU5hbWUgPSAnJGNhbmRpZGF0ZU5hbWUnIgoKICAgIGlmICgtbm90ICRUeXBlKSB7CiAgICAgICAgJGNvbnRlbnRUeXBlID0gJGNsaWVudC5SZXNwb25zZUhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddCiAgICAgICAgV3JpdGUtRGVidWcgIkRvd25sb2FkIGhlYWRlciBDb250ZW50LVR5cGU6ICckY29udGVudFR5cGUnIgogICAgICAgIGlmICgkY29udGVudFR5cGUgLWVxICdhcHBsaWNhdGlvbi96aXAnKSB7CiAgICAgICAgICAgICR0eXBlID0gJFBTR0VUX1pJUAogICAgICAgIH0KICAgICAgICAjIGNoZWNrIGRvd25sb2FkZWQgZmlsZSBmb3IgdGhlIFBLWmlwIGhlYWRlcgogICAgICAgIGVsc2VpZiAoKEdldC1JdGVtIC1QYXRoICRkb3dubG9hZEZpbGVQYXRoKS5MZW5ndGggLWd0IDQpIHsKICAgICAgICAgICAgV3JpdGUtRGVidWcgJ1NlYXJjaCBmb3IgUEtaaXBIZWFkZXInCiAgICAgICAgICAgICRrbm93blBLWmlwSGVhZGVyID0gMHg1MCwgMHg0YiwgMHgwMywgMHgwNAogICAgICAgICAgICAkZmlsZUhlYWRlciA9IEdldC1Db250ZW50IC1QYXRoICRkb3dubG9hZEZpbGVQYXRoIC1FbmNvZGluZyBCeXRlIC1Ub3RhbENvdW50IDQKICAgICAgICAgICAgaWYgKFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJGtub3duUEtaaXBIZWFkZXIpIC1lcSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRmaWxlSGVhZGVyKSkgewogICAgICAgICAgICAgICAgV3JpdGUtRGVidWcgJ0ZvdW5kIFBLWmlwSGVhZGVyID0+IFR5cGUgPSBaSVAnCiAgICAgICAgICAgICAgICAkdHlwZSA9ICRQU0dFVF9aSVAKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIFdyaXRlLURlYnVnICdObyBQS1ppcEhlYWRlciBmb3VuZCA9PiBUeXBlIC1uZSBaSVAnCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICgtbm90ICRUeXBlKSB7CiAgICAgICAgICAgIFdyaXRlLURlYnVnICdJZiBpdHMgbW9zdCBsaWtlbHkgbm8gemlwIGl0IGhhcyB0byBiZSBhbiBQU00xIGZpbGUuJwogICAgICAgICAgICAkVHlwZSA9ICRQU0dFVF9QU00xCiAgICAgICAgfQogICAgfQoKICAgICRtb2R1bGVGb2xkZXJQYXRoID0gSm9pbi1QYXRoIC1QYXRoICR0ZW1wRm9sZGVyUGF0aCAtQ2hpbGRQYXRoICdtb2R1bGUnCiAgICBOZXctSXRlbSAtUGF0aCAkbW9kdWxlRm9sZGVyUGF0aCAtSXRlbVR5cGUgRGlyZWN0b3J5IHwgT3V0LU51bGwKCiAgICBzd2l0Y2ggKCRUeXBlKSB7CiAgICAgICAgJFBTR0VUX1pJUCB7CiAgICAgICAgICAgICR6aXBGaWxlUGF0aCA9ICRkb3dubG9hZEZpbGVQYXRoICsgJy56aXAnCiAgICAgICAgICAgIE1vdmUtSXRlbSAtUGF0aCAkZG93bmxvYWRGaWxlUGF0aCAtRGVzdGluYXRpb24gJHppcEZpbGVQYXRoCiAgICAgICAgICAgIEV4cGFuZC1aaXBNb2R1bGUgLVBhdGggJHppcEZpbGVQYXRoIC1EZXN0aW5hdGlvbiAkbW9kdWxlRm9sZGVyUGF0aAogICAgICAgIH0KICAgICAgICAkUFNHRVRfUFNNMSB7CiAgICAgICAgICAgIGlmICgtbm90ICRNb2R1bGVOYW1lKSB7CiAgICAgICAgICAgICAgICBpZiAoJGNhbmRpZGF0ZU5hbWUgLWVxICd7dW5kZWZpbmVkfScpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyAnQ2Fubm90IGd1ZXNzIG1vZHVsZSBuYW1lLiBUcnkgc3BlY2lmeWluZyBNb2R1bGVOYW1lIGFyZ3VtZW50IScKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRNb2R1bGVOYW1lID0gJGNhbmRpZGF0ZU5hbWUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJHBzbUZpbGVQYXRoID0gSm9pbi1QYXRoIC1QYXRoICRtb2R1bGVGb2xkZXJQYXRoIC1DaGlsZFBhdGggIiRNb2R1bGVOYW1lLnBzbTEiCiAgICAgICAgICAgIE1vdmUtSXRlbSAtUGF0aCAkZG93bmxvYWRGaWxlUGF0aCAtRGVzdGluYXRpb24gJHBzbUZpbGVQYXRoCiAgICAgICAgfQogICAgICAgIGRlZmF1bHQgewogICAgICAgICAgICB0aHJvdyAiVHlwZSAkVHlwZSBpcyBub3Qgc3VwcG9ydGVkIHlldCIKICAgICAgICB9CiAgICB9CgogICAgJGZvdW5kUmVzdWx0ID0gRmluZC1Nb2R1bGVOYW1lQW5kRm9sZGVyIC1QYXRoICRtb2R1bGVGb2xkZXJQYXRoIC1Nb2R1bGVOYW1lICRNb2R1bGVOYW1lCgogICAgV3JpdGUtRGVidWcgIkludm9rZS1Eb3dubG9hZE1vZHVsZUZyb21XZWI6IE1vZHVsZU5hbWUgPSAnJE1vZHVsZU5hbWUnIgoKICAgIHJldHVybiBAewogICAgICAgIFRlbXBGb2xkZXJQYXRoID0gJHRlbXBGb2xkZXJQYXRoCiAgICAgICAgTW9kdWxlRm9sZGVyUGF0aCA9ICRmb3VuZFJlc3VsdC5Nb2R1bGVGb2xkZXJQYXRoCiAgICAgICAgTW9kdWxlTmFtZSA9ICRmb3VuZFJlc3VsdC5Nb2R1bGVOYW1lCiAgICB9Cn0KCjwjCiAgICAuU1lOT1BTSVMKICAgICAgICBJbnN0YWxsIHRoZSBwcm92aWRlZCBtb2R1bGUgaW50byB0aGUgZGVmaW5lZCBkZXN0aW5hdGlvbi4KCiAgICAuREVTQ1JJUFRJT04KICAgICAgICBJbnN0YWxsIHRoZSBtb2R1bGUgaW5zaWRlIG9mIHRoZSBwcm92aWRlZCBkaXJlY3RvcnkgaW50byB0aGUgZGVmaW5lZCBkZXN0aW5hdGlvbgogICAgICAgIGFuZCBwZXJmb3JtIHRoZSBmb2xsb3dpbmcgc3RlcHM6CgogICAgICAgICogUmVuYW1lIG1vZHVsZSBpZiByZXF1ZXN0ZXMgYnkgcHJvdmlkZWQgSW5zdGFsbFdpdGhNb2R1bGVOYW1lCiAgICAgICAgKiBJZiBhIE1vZHVsZUhhc2ggaXMgcHJvdmlkZWQsIGNoZWNrIGlmIGl0IG1hdGNoZXMuCiAgICAgICAgKiBBZGQgdGhlIGRlc3RpbmF0aW9uIHBhdGggdG8gdGhlIFBTTW9kdWxlUGF0aCBpZiBuZWNlc3NhcnkgKGRlcGVuZHMgb24gcHJvdmlkZWQgcGFyYW1ldGVycykKICAgICAgICAqIFBsYWNlIHRoZSBjb252ZW50aW9ucy1tYXRjaGluZyBtb2R1bGUgZm9sZGVyIGluIHRoZSBkZXN0aW5hdGlvbiBmb2xkZXIKICAgICAgICAqIEltcG9ydCB0aGUgbW9kdWxlIGlmIG5lY2Vzc2FyeQogICAgICAgICogQWRkIHRoZSBwcm9maWxlIGltcG9ydCB0byBwcm9maWxlIGlmIG5lY2Vzc2FyeQoKICAgIC5QQVJBTUVURVIgTW9kdWxlTmFtZQogICAgICAgIFRoZSBuYW1lIG9mIHRoZSBtb2R1bGUuCgogICAgLlBBUkFNRVRFUiBJbnN0YWxsV2l0aE1vZHVsZU5hbWUKICAgICAgICBUaGUgbmFtZSB0aGUgbW9kdWxlIHNob3VsZCBnZXQuCgogICAgLlBBUkFNRVRFUiBNb2R1bGVGb2xkZXJQYXRoCiAgICAgICAgVGhlIHBhdGggdG8gdGhlIG1vZHVsZSBkYXRhLCB3aGljaCBjb250YWlucyB0aGUgbW9kdWxlIG1haW4gZmlsZSwgbmFtZWQgYWNjb3JkaW5nIHRvIE1vZHVsZU5hbWUKCiAgICAuUEFSQU1FVEVSIFRlbXBGb2xkZXJQYXRoCiAgICAgICAgVGVtcFBhdGggdXNlZCBieSBQc0dldCBmb3IgZG9pbmcgdGhlIHdvcmsuIENvbnRhaW5zIHRoZSBNb2R1bGVGb2xkZXJQYXRoIGFuZCB3aWxsIGJlIGRlbGV0ZWQgYWZ0ZXIgcHJvY2Vzc2luZywKCiAgICAuUEFSQU1FVEVSIERlc3RpbmF0aW9uCiAgICAgICAgUGF0aCB0byB3aGljaCB0aGUgbW9kdWxlIHdpbGwgYmUgaW5zdGFsbGVkLgoKICAgIC5QQVJBTUVURVIgTW9kdWxlSGFzaAogICAgICAgIFdoZW4gTW9kdWxlSGFzaCBpcyBzcGVjaWZpZWQgdGhlIGNob3NlbiBtb2R1bGUgd2lsbCBvbmx5IGJlIGluc3RhbGxlZCBpZiBpdHMgY29udGVudHMgbWF0Y2ggdGhlIHByb3ZpZGVkIGhhc2guCgogICAgLlBBUkFNRVRFUiBHbG9iYWwKICAgICAgICBJbmZsdWVuY2UgdGhlIFBTTW9kdWxlUGF0aCBjaGFuZ2VzIGFuZCBwcm9maWxlIGNoYW5nZXMuCgogICAgLlBBUkFNRVRFUiBQZXJzaXN0RW52aXJvbm1lbnQKICAgICAgICBEZWZpbmVzIGlmIHRoZSBQU01vZHVsZVBhdGggY2hhbmdlcyBzaG91bGQgYmUgcGVyc2lzdGVudC4KCiAgICAuUEFSQU1FVEVSIERvTm90SW1wb3J0CiAgICAgICAgRGVmaW5lcyBpZiB0aGUgaW5zdGFsbGVkIG1vZHVsZSBzaG91bGQgYmUgaW1wb3J0ZWQuCgogICAgLlBBUkFNRVRFUiBBZGRUb1Byb2ZpbGUKICAgICAgICBEZWZpbmVzIGlmIGFuICdJbXBvcnQtTW9kdWxlJyBzdGF0ZW1lbnQgc2hvdWxkIGJlIGFkZGVkIHRvIHRoZSBwcm9maWxlLgoKICAgIC5QQVJBTUVURVIgVXBkYXRlCiAgICAgICAgRGVmaW5lcyBpZiBhbiBhbHJlYWR5IGV4aXN0aW5nIGZvbGRlciBpbiB0aGUgdGFyZ2V0IG1heSBiZSBkZWxldGVkIGZvciBpbnN0YWxsYXRpb24gb2YgdGhlIG1vZHVsZS4KCiAgICAuUEFSQU1FVEVSIERvTm90UG9zdEluc3RhbGwKICAgICAgICBJZiBkZWZpbmVkLCB0aGUgUG9zdEluc3RhbGxIb29rIGlzIG5vdCBleGVjdXRlZC4KCiAgICAuUEFSQU1FUlRFUiBQb3N0SW5zdGFsbEhvb2sKICAgICAgICBEZWZpbmVzIHRoZSBuYW1lIG9mIGEgc2NyaXB0IGluc2lkZSB0aGUgaW5zdGFsbGVkIG1vZHVsZSBmb2xkZXIgd2hpY2ggc2hvdWxkIGJlIGV4ZWN1dGVkIGFmdGVyIGluc3RhbGxhdGlvbi4KIz4KZnVuY3Rpb24gSW5zdGFsbC1Nb2R1bGVUb0Rlc3RpbmF0aW9uIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRNb2R1bGVOYW1lLAoKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJE1vZHVsZUZvbGRlclBhdGgsCgogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkVGVtcEZvbGRlclBhdGgsCgogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkRGVzdGluYXRpb24sCgogICAgICAgIFtTdHJpbmddICRJbnN0YWxsV2l0aE1vZHVsZU5hbWUsCgogICAgICAgIFtTdHJpbmddICRNb2R1bGVIYXNoLAoKICAgICAgICBbU3dpdGNoXSAkR2xvYmFsLAoKICAgICAgICBbU3dpdGNoXSAkUGVyc2lzdEVudmlyb25tZW50LAoKICAgICAgICBbU3dpdGNoXSAkRG9Ob3RJbXBvcnQsCgogICAgICAgIFtTd2l0Y2hdICRBZGRUb1Byb2ZpbGUsCgogICAgICAgIFtTd2l0Y2hdICRVcGRhdGUsCgogICAgICAgIFtTd2l0Y2hdICREb05vdFBvc3RJbnN0YWxsLAoKICAgICAgICBbU3RyaW5nXSAkUG9zdEluc3RhbGxIb29rCiAgICApCiAgICBwcm9jZXNzIHsKICAgICAgICAjIE1ha2UgY2VydGFpbiB0aGUgdGVtcCBmb2xkZXIgaXMgZGVsZXRlZAogICAgICAgIHRyYXAgeyBSZW1vdmUtSXRlbSAtUGF0aCAkVGVtcEZvbGRlclBhdGggLVJlY3Vyc2UgLUZvcmNlOyBicmVhayB9CgogICAgICAgICRJbnN0YWxsV2l0aE1vZHVsZU5hbWUgPSBpZiAoJEluc3RhbGxXaXRoTW9kdWxlTmFtZSkgeyAkSW5zdGFsbFdpdGhNb2R1bGVOYW1lIH0gZWxzZSB7ICRNb2R1bGVOYW1lIH0KICAgICAgICAjIENhc2U6IG5vICRJbnN0YWxsV2l0aE1vZHVsZU5hbWUgYW5kIG1vZHVsZSBuYW1lIGludGVyZmVyZWQgZnJvbSBpbnN0YWxsIGZpbGVzCiAgICAgICAgaWYgKFRlc3QtTW9kdWxlSW5zdGFsbGVkQW5kSW1wb3J0IC1Nb2R1bGVOYW1lOiRJbnN0YWxsV2l0aE1vZHVsZU5hbWUgLURlc3RpbmF0aW9uOiREZXN0aW5hdGlvbiAtVXBkYXRlOiRVcGRhdGUgLURvTm90SW1wb3J0OiREb05vdEltcG9ydCAtTW9kdWxlSGFzaDokTW9kdWxlSGFzaCkgewogICAgICAgICAgICBSZW1vdmUtSXRlbSAtUGF0aCAkVGVtcEZvbGRlclBhdGggLVJlY3Vyc2UgLUZvcmNlCiAgICAgICAgICAgIHJldHVybgogICAgICAgIH0KCiAgICAgICAgJG1vZHVsZUZpbGVQYXRoID0gR2V0LU1vZHVsZUZpbGUgLVBhdGggJE1vZHVsZUZvbGRlclBhdGggLU1vZHVsZU5hbWUgJE1vZHVsZU5hbWUKICAgICAgICAjIHNhbml0eSBjaGVja3MKICAgICAgICBpZiAoLW5vdCAkbW9kdWxlRmlsZVBhdGgpIHsKICAgICAgICAgICAgdGhyb3cgJ0JVRyEgTW9kdWxlIGluc3RhbGxhdGlvbiBmYWlsZWQgaW4gc3RlcCBJbnN0YWxsLU1vZHVsZVRvRGVzdGluYXRpb24uIFBsZWFzZSByZXBvcnQgdGhpcyBpc3N1ZSBpbmNsdWRpbmcgeW91ciBjb21tYW5kIGxpbmUuJwogICAgICAgIH0KICAgICAgICBpZiAoJE1vZHVsZUZvbGRlclBhdGggLW5lIChTcGxpdC1QYXRoIC1QYXRoICRtb2R1bGVGaWxlUGF0aCkpIHsKICAgICAgICAgICAgdGhyb3cgJ0JVRyEgTW9kdWxlIGluc3RhbGxhdGlvbiBmYWlsZWQgaW4gc3RlcCBJbnN0YWxsLU1vZHVsZVRvRGVzdGluYXRpb24uIFBsZWFzZSByZXBvcnQgdGhpcyBpc3N1ZSBpbmNsdWRpbmcgeW91ciBjb21tYW5kIGxpbmUuJwogICAgICAgIH0KCiAgICAgICAgaWYgKCRJbnN0YWxsV2l0aE1vZHVsZU5hbWUgLW5lICRNb2R1bGVOYW1lKSB7CiAgICAgICAgICAgIFJlbmFtZS1JdGVtIC1QYXRoICRtb2R1bGVGaWxlUGF0aCAtTmV3TmFtZSAoJEluc3RhbGxXaXRoTW9kdWxlTmFtZSArIChHZXQtSXRlbSAkbW9kdWxlRmlsZVBhdGgpLkV4dGVuc2lvbikKICAgICAgICB9CgogICAgICAgICR0YXJnZXRGb2xkZXJQYXRoID0gSm9pbi1QYXRoIC1QYXRoICREZXN0aW5hdGlvbiAtQ2hpbGRQYXRoICRJbnN0YWxsV2l0aE1vZHVsZU5hbWUKCiAgICAgICAgaWYgKCRNb2R1bGVIYXNoKSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJ0Vuc3VyZSB0aGF0IHRoZSBoYXNoIG9mIHRoZSBtb2R1bGUgbWF0Y2hlcyB0aGUgc3BlY2lmaWVkIGhhc2gnCgogICAgICAgICAgICAkbmV3TW9kdWxlSGFzaCA9IEdldC1Qc0dldE1vZHVsZUhhc2ggLVBhdGggJE1vZHVsZUZvbGRlclBhdGgKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiSGFzaCBvZiBtb2R1bGUgaW4gJyRNb2R1bGVGb2xkZXJQYXRoJyBpczogJG5ld01vZHVsZUhhc2giCiAgICAgICAgICAgIGlmICgkTW9kdWxlSGFzaCAtbmUgJG5ld01vZHVsZUhhc2gpIHsKICAgICAgICAgICAgICAgIHRocm93ICdNb2R1bGUgY29udGVudHMgZG8gbm90IG1hdGNoIHNwZWNpZmllZCBtb2R1bGUgaGFzaC4gRW5zdXJlIHRoZSBleHBlY3RlZCBoYXNoIGlzIGNvcnJlY3QgYW5kIHRoZSBtb2R1bGUgc291cmNlIGlzIHRydXN0ZWQuJwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIFRlc3QtUGF0aCAkdGFyZ2V0Rm9sZGVyUGF0aCApIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJ01vZHVsZSBhbHJlYWR5IGV4aXN0cyBpbiBkZXN0aW5hdGlvbiBwYXRoLiBDaGVjayBpZiBoYXNoIGluIGRlc3RpbmF0aW9uIGlzIGNvcnJlY3QuIElmIG5vdCByZXBsYWNlIHdpdGggdG8gYmUgaW5zdGFsbGVkIG1vZHVsZS4nCiAgICAgICAgICAgICAgICAkZGVzdGluYXRpb25Nb2R1bGVIYXNoID0gR2V0LVBzR2V0TW9kdWxlSGFzaCAtUGF0aCAkdGFyZ2V0Rm9sZGVyUGF0aAogICAgICAgICAgICAgICAgaWYgKCRkZXN0aW5hdGlvbk1vZHVsZUhhc2ggLW5lICRNb2R1bGVIYXNoICkgewogICAgICAgICAgICAgICAgICAgICRVcGRhdGUgPSAkdHJ1ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAjQWRkIHRoZSBEZXN0aW5hdGlvbiBwYXRoIHRvIHRoZSBVc2VyIG9yIE1hY2hpbmUgZW52aXJvbm1lbnQKICAgICAgICBBZGQtUGF0aFRvUFNNb2R1bGVQYXRoIC1QYXRoVG9BZGQ6JERlc3RpbmF0aW9uIC1QZXJzaXN0RW52aXJvbm1lbnQ6JFBlcnNpc3RFbnZpcm9ubWVudCAtR2xvYmFsOiRHbG9iYWwKCiAgICAgICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAkdGFyZ2V0Rm9sZGVyUGF0aCkpIHsKICAgICAgICAgICAgTmV3LUl0ZW0gJHRhcmdldEZvbGRlclBhdGggLUl0ZW1UeXBlIERpcmVjdG9yeSAtRXJyb3JBY3Rpb24gQ29udGludWUgLUVycm9yVmFyaWFibGUgRmFpbE1rRGlyIHwgT3V0LU51bGwKICAgICAgICAgICAgIyMgSGFuZGxlIHRoZSBlcnJvciBpZiB0aGV5IGFza2VkIGZvciAtR2xvYmFsIGFuZCBkb24ndCBoYXZlIHBlcm1pc3Npb25zCiAgICAgICAgICAgIGlmICgkRmFpbE1rRGlyIC1hbmQgQCgkRmFpbE1rRGlyKVswXS5DYXRlZ29yeUluZm8uQ2F0ZWdvcnkgLWVxICdQZXJtaXNzaW9uRGVuaWVkJykgewogICAgICAgICAgICAgICAgdGhyb3cgIllvdSBkbyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIGluc3RhbGwgYSBtb2R1bGUgdG8gJyREZXN0aW5hdGlvbicuIFlvdSBtYXkgbmVlZCB0byBiZSBlbGV2YXRlZC4iCiAgICAgICAgICAgIH0KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiQ3JlYXRlIG1vZHVsZSBmb2xkZXIgYXQgJHRhcmdldEZvbGRlclBhdGgiCiAgICAgICAgfQoKICAgICAgICBXcml0ZS1EZWJ1ZyAnRW1wdHkgZXhpc3RpbmcgbW9kdWxlIGZvbGRlciBiZWZvcmUgY29weWluZyBuZXcgZmlsZXMuJwogICAgICAgIEdldC1DaGlsZEl0ZW0gLVBhdGggJHRhcmdldEZvbGRlclBhdGggLUZvcmNlIHwgUmVtb3ZlLUl0ZW0gLUZvcmNlIC1SZWN1cnNlIC1FcnJvckFjdGlvbiBTdG9wCgogICAgICAgIFdyaXRlLURlYnVnICdDb3B5IG1vZHVsZSBmaWxlcyB0byBkZXN0aW5hdGlvbiBmb2xkZXInCiAgICAgICAgR2V0LUNoaWxkSXRlbSAtUGF0aCAkTW9kdWxlRm9sZGVyUGF0aCB8IENvcHktSXRlbSAtRGVzdGluYXRpb24gJHRhcmdldEZvbGRlclBhdGggLUZvcmNlIC1SZWN1cnNlCgogICAgICAgIGlmICgtbm90ICREb05vdFBvc3RJbnN0YWxsKSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlBvc3RJbnN0YWxsSG9vayAkUG9zdEluc3RhbGxIb29rIgogICAgICAgICAgICBpZiAoJFBvc3RJbnN0YWxsSG9vayAtbGlrZSAnKi5wczEnKSB7CiAgICAgICAgICAgICAgICAkcG9zdEluc3RhbGxTY3JpcHQgPSBKb2luLVBhdGggLVBhdGggJHRhcmdldEZvbGRlclBhdGggLUNoaWxkUGF0aCAkUG9zdEluc3RhbGxIb29rCiAgICAgICAgICAgICAgICBpZiAoVGVzdC1QYXRoIC1QYXRoICRwb3N0SW5zdGFsbFNjcmlwdCAtUGF0aFR5cGUgTGVhZikgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIickUG9zdEluc3RhbGxIb29rJyBmb3VuZCBpbiBtb2R1bGUuIExldCdzIGV4ZWN1dGUgaXQuIgogICAgICAgICAgICAgICAgICAgICYgJHBvc3RJbnN0YWxsU2NyaXB0CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJQb3N0SW5zdGFsbEhvb2sgJyRQb3N0SW5zdGFsbEhvb2snIG5vdCBmb3VuZC4iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICRpc0Rlc3RpbmF0aW9uSW5QU01vZHVsZVBhdGggPSAkZW52OlBTTW9kdWxlUGF0aC5Db250YWlucygkRGVzdGluYXRpb24pCiAgICAgICAgaWYgKCRpc0Rlc3RpbmF0aW9uSW5QU01vZHVsZVBhdGgpIHsKICAgICAgICAgICAgaWYgKC1ub3QgKEdldC1Nb2R1bGUgJE1vZHVsZU5hbWUgLUxpc3RBdmFpbGFibGUpKSB7CiAgICAgICAgICAgICAgICB0aHJvdyAnRm9yIHNvbWUgdW5leHBlY3RlZCByZWFzb25zIG1vZHVsZSB3YXMgbm90IGluc3RhbGxlZC4nCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGlmICgtbm90IChHZXQtTW9kdWxlRmlsZSAtUGF0aCAkdGFyZ2V0Rm9sZGVyUGF0aCkpIHsKICAgICAgICAgICAgICAgIHRocm93ICdGb3Igc29tZSB1bmV4cGVjdGVkIHJlYXNvbnMgbW9kdWxlIHdhcyBub3QgaW5zdGFsbGVkLicKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCRVcGRhdGUpIHsKICAgICAgICAgICAgV3JpdGUtSG9zdCAiTW9kdWxlICRNb2R1bGVOYW1lIHdhcyBzdWNjZXNzZnVsbHkgdXBkYXRlZC4iIC1Gb3JlZ3JvdW5kIEdyZWVuCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBXcml0ZS1Ib3N0ICJNb2R1bGUgJE1vZHVsZU5hbWUgd2FzIHN1Y2Nlc3NmdWxseSBpbnN0YWxsZWQuIiAtRm9yZWdyb3VuZCBHcmVlbgogICAgICAgIH0KCiAgICAgICAgaWYgKC1ub3QgJERvTm90SW1wb3J0KSB7CiAgICAgICAgICAgIEltcG9ydC1Nb2R1bGVHbG9iYWxseSAtTW9kdWxlTmFtZTokTW9kdWxlTmFtZSAtTW9kdWxlQmFzZTokdGFyZ2V0Rm9sZGVyUGF0aCAtRm9yY2U6JFVwZGF0ZQogICAgICAgIH0KCiAgICAgICAgaWYgKCRpc0Rlc3RpbmF0aW9uSW5QU01vZHVsZVBhdGggLWFuZCAkQWRkVG9Qcm9maWxlKSB7CiAgICAgICAgICAgICMgV0FSTklORyAkUHJvZmlsZSBpcyBlbXB0eSBvbiBXaW4yMDA4UjIgdW5kZXIgQWRtaW5pc3RyYXRvcgogICAgICAgICAgICBpZiAoJFBST0ZJTEUpIHsKICAgICAgICAgICAgICAgIGlmICgtbm90IChUZXN0LVBhdGggJFBST0ZJTEUpKSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiQ3JlYXRpbmcgUG93ZXJTaGVsbCBwcm9maWxlLi4uYG4kUFJPRklMRSIKICAgICAgICAgICAgICAgICAgICBOZXctSXRlbSAkUFJPRklMRSAtVHlwZSBGaWxlIC1Gb3JjZSAtRXJyb3JBY3Rpb24gU3RvcAogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChTZWxlY3QtU3RyaW5nICRQUk9GSUxFIC1QYXR0ZXJuICJJbXBvcnQtTW9kdWxlICRNb2R1bGVOYW1lIikgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkltcG9ydC1Nb2R1bGUgJE1vZHVsZU5hbWUgY29tbWFuZCBhbHJlYWR5IGluIHlvdXIgcHJvZmlsZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRzaWduYXR1cmUgPSBHZXQtQXV0aGVudGljb2RlU2lnbmF0dXJlIC1GaWxlUGF0aCAkUFJPRklMRQoKICAgICAgICAgICAgICAgICAgICBpZiAoJHNpZ25hdHVyZS5TdGF0dXMgLWVxICdWYWxpZCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtRXJyb3IgIlBzR2V0IGNhbm5vdCBtb2RpZnkgY29kZS1zaWduZWQgcHJvZmlsZSAnJFBST0ZJTEUnLiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkFkZCBJbXBvcnQtTW9kdWxlICRNb2R1bGVOYW1lIGNvbW1hbmQgdG8gdGhlIHByb2ZpbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICJgbkltcG9ydC1Nb2R1bGUgJE1vZHVsZU5hbWUiIHwgQWRkLUNvbnRlbnQgJFBST0ZJTEUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgfQoKICAgICAgICBXcml0ZS1EZWJ1ZyAiQ2xlYW51cCB0ZW1wb3Jhcnkgd29yayBmb2xkZXIgJyRUZW1wRm9sZGVyUGF0aCciCiAgICAgICAgUmVtb3ZlLUl0ZW0gLVBhdGggJFRlbXBGb2xkZXJQYXRoIC1SZWN1cnNlIC1Gb3JjZQogICAgfQp9Cgo8IwogICAgLlNZTk9QU0lTCiAgICAgICAgVGVzdCBpZiBtb2R1bGUgaXMgaW5zdGFsbGVkIGFuZCBpbXBvcnQgaXQgdGhlbi4KCiAgICAuREVTQ1JJUFRJT04KICAgICAgICBUZXN0IGlmIG1vZHVsZSB3aXRoIHByb3ZpZGVkIG5hbWUgaXMgaW5zdGFsbGVkIGluIHRoZSB0YXJnZXQgZGVzdGluYXRpb24uCiAgICAgICAgSWYgaXQgaXMgaW5zdGFsbGVkLCBpdCB3aWxsIGJlIGltcG9ydGVkLiBSZXR1cm5zICckdHJ1ZScgaWYgaW5zdGFsbGVkLgoKICAgIC5QQVJBTUVURVIgTW9kdWxlTmFtZQogICAgICAgIE5hbWUgb2YgdGhlIG1vZHVsZQoKICAgIC5QQVJBTUVURVIgRGVzdGluYXRpb24KICAgICAgICBJbnN0YWxsYXRpb24gZGVzdGluYXRpb24KCiAgICAuUEFSQU1FVEVSIFVwZGF0ZQogICAgICAgIElmICdVcGRhdGUnLXN3aXRjaCBpcyBzZXQsIHRoaXMgcmV0dXJucyBhbHdheXMgJyR0cnVlJy4KCiAgICAuUEFSQU1FVEVSIERvTm90SW1wb3J0CiAgICAgICAgU3dpdGNoIHN1cHByZXNzIHRoZSBpbXBvcnQgb2YgbW9kdWxlLgoKICAgIC5QQVJBTUVURVIgTW9kdWxlSGFzaAogICAgICAgIElmIGEgaGFzaCBpcyBwcm92aWRlZCBhbiBpbnN0YWxsZWQgbW9kdWxlIHdpbGwgb25seSBiZSBhY2NlcHRlZCBhcyBpbnN0YWxsZWQgaWYgdGhlIGhhc2ggbWF0Y2guCiM+CmZ1bmN0aW9uIFRlc3QtTW9kdWxlSW5zdGFsbGVkQW5kSW1wb3J0IHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRNb2R1bGVOYW1lLAoKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJERlc3RpbmF0aW9uLAoKICAgICAgICBbU3dpdGNoXSAkVXBkYXRlLAoKICAgICAgICBbU3dpdGNoXSAkRG9Ob3RJbXBvcnQsCgogICAgICAgIFtTdHJpbmddICRNb2R1bGVIYXNoCiAgICApCiAgICBwcm9jZXNzIHsKICAgICAgICBpZiAoJFVwZGF0ZSkgewogICAgICAgICAgICAjVE9ETzogVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBtb3JlIGxpa2UgdGhlIG9sZCAtRm9yY2UgZmxhZywgYmVjYXVzZSB0aGlzIHdpbGwgZm9yY2UgYW4gaW5zdGFsbGF0aW9uIGFsc28gaWYgbm8gaW5zdGFsbGF0aW9uIGluIGRlc3RpbmF0aW9uIGV4aXN0cy4KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiSWdub3JpbmcgaWYgbW9kdWxlIHdpdGggbmFtZSAnJE1vZHVsZU5hbWUnIGlzIGFscmVhZHkgaW5zdGFsbGVkIGJlY2F1c2Ugb2YgdXBkYXRlIG1vZGUuIgogICAgICAgICAgICByZXR1cm4gJGZhbHNlCiAgICAgICAgfQoKICAgICAgICAkaW5zdGFsbGVkTW9kdWxlID0gR2V0LU1vZHVsZSAtTmFtZSAkTW9kdWxlTmFtZSAtTGlzdEF2YWlsYWJsZQoKICAgICAgICBpZiAoJGluc3RhbGxlZE1vZHVsZSkgewogICAgICAgICAgICBpZiAoJGluc3RhbGxlZE1vZHVsZS5Db3VudCAtZ3QgMSkgewogICAgICAgICAgICAgICAgJHRhcmdldE1vZHVsZSA9ICRpbnN0YWxsZWRNb2R1bGUgfCBXaGVyZS1PYmplY3QgeyAoQ29udmVydFRvLUNhbm9uaWNhbFBhdGggLVBhdGggKFNwbGl0LVBhdGggJF8uTW9kdWxlQmFzZSkpIC1lcSAkRGVzdGluYXRpb24gfSB8IFNlbGVjdC1PYmplY3QgLUZpcnN0IDEKCiAgICAgICAgICAgICAgICBpZiAoLW5vdCAkdGFyZ2V0TW9kdWxlKSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiTW9kdWxlIHdpdGggbmFtZSAnJE1vZHVsZU5hbWUnIHdhcyBub3QgZm91bmQgaW4gJyREZXN0aW5hdGlvbicuIEJ1dCBpdCB3YXMgZm91bmQgaW46YG4gJCgkaW5zdGFsbGVkTW9kdWxlLk1vZHVsZUJhc2UgfCBGb3JtYXQtTGlzdCB8IE91dC1TdHJpbmcpIgogICAgICAgICAgICAgICAgICAgIHJldHVybiAkZmFsc2UKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJUaGUgbW9kdWxlICckTW9kdWxlTmFtZScgd2FzIGluc3RhbGxlZCBhdCBtb3JlIHRoZW4gb25lIGxvY2F0aW9uLiBJbnN0YWxsZWQgcGF0aHM6YG5gdCQoJGluc3RhbGxlZE1vZHVsZS5Nb2R1bGVCYXNlIHwgRm9ybWF0LUxpc3QgfCBPdXQtU3RyaW5nKWBuJyQoJGZpcnN0SW5zdGFsbGVkTW9kdWxlLk1vZHVsZUJhc2UpJyBpcyB0aGUgc2VhcmNoZWQgZGVzdGluYXRpb24uIgogICAgICAgICAgICAgICAgJGluc3RhbGxlZE1vZHVsZSA9ICR0YXJnZXRNb2R1bGUKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKChTcGxpdC1QYXRoICRpbnN0YWxsZWRNb2R1bGUuTW9kdWxlQmFzZSkgLW5lICREZXN0aW5hdGlvbikgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiTW9kdWxlIHdpdGggbmFtZSAnJE1vZHVsZU5hbWUnIHdhcyBmb3VuZCBpbiAnJCgkaW5zdGFsbGVkTW9kdWxlLk1vZHVsZUJhc2UpJyBidXQgbm90IGluICckRGVzdGluYXRpb24nLiIKICAgICAgICAgICAgICAgIHJldHVybiAkZmFsc2UKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJGNhbmRpZGF0ZU1vZHVsZVBhdGggPSBKb2luLVBhdGggLVBhdGggJERlc3RpbmF0aW9uIC1DaGlsZFBhdGggJE1vZHVsZU5hbWUKICAgICAgICAgICAgJHBvc3NpYmxlTW9kdWxlRmlsZU5hbWVzID0gR2V0LVBvc3NpYmxlTW9kdWxlRmlsZU5hbWVzIC1Nb2R1bGVOYW1lICRNb2R1bGVOYW1lCgogICAgICAgICAgICBpZiAoVGVzdC1QYXRoIC1QYXRoICRjYW5kaWRhdGVNb2R1bGVQYXRoXCogLUluY2x1ZGUgJHBvc3NpYmxlTW9kdWxlRmlsZU5hbWVzIC1QYXRoVHlwZSBMZWFmKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJNb2R1bGUgd2l0aCBuYW1lICckTW9kdWxlTmFtZScgZm91bmQgaW4gJyREZXN0aW5hdGlvbicgKG5vdGU6IGRlc3RpbmF0aW9uIGlzIG5vdCBpbiBQU01vZHVsZVBhdGgpIgogICAgICAgICAgICAgICAgJGluc3RhbGxlZE1vZHVsZSA9IEB7IE1vZHVsZUJhc2UgPSAkQ2FuZGlkYXRlTW9kdWxlUGF0aCB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJNb2R1bGUgd2l0aCBuYW1lICckTW9kdWxlTmFtZScgaXMgbm90IGluc3RhbGxlZC4iCiAgICAgICAgICAgICAgICByZXR1cm4gJGZhbHNlCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICgkTW9kdWxlSGFzaCkgewogICAgICAgICAgICAkaW5zdGFsbGVkTW9kdWxlSGFzaCA9IEdldC1Qc0dldE1vZHVsZUhhc2ggLVBhdGggJGluc3RhbGxlZE1vZHVsZS5Nb2R1bGVCYXNlCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkhhc2ggb2YgbW9kdWxlIGluICckKCRpbnN0YWxsZWRNb2R1bGUuTW9kdWxlQmFzZSknIGlzOiAkSW5zdGFsbGVkTW9kdWxlSGFzaCIKICAgICAgICAgICAgaWYgKCRNb2R1bGVIYXNoIC1uZSAkaW5zdGFsbGVkTW9kdWxlSGFzaCkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXhwZWN0ZWQgJyRNb2R1bGVIYXNoJyBidXQgY2FsY3VsYXRlZCAnJGluc3RhbGxlZE1vZHVsZUhhc2gnLiIKICAgICAgICAgICAgICAgIHJldHVybiAkZmFsc2UKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiJyRNb2R1bGVOYW1lJyBhbHJlYWR5IGluc3RhbGxlZC4gVXNlIC1VcGRhdGUgaWYgeW91IG5lZWQgdXBkYXRlIgoKICAgICAgICBpZiAoJERvTm90SW1wb3J0IC1lcSAkZmFsc2UpIHsKICAgICAgICAgICAgSW1wb3J0LU1vZHVsZUdsb2JhbGx5IC1Nb2R1bGVOYW1lICRNb2R1bGVOYW1lIC1Nb2R1bGVCYXNlICRpbnN0YWxsZWRNb2R1bGUuTW9kdWxlQmFzZSAtRm9yY2U6JFVwZGF0ZQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICR0cnVlCiAgICB9Cn0KCjwjCiAgICAuU1lOT1BTSVMKICAgICAgICBFeHRyYWN0IHRoZSBjb250ZW50IG9mIHRoZSByZWZlcmVuY2VkIHppcCBmaWxlIHRvIHRoZSBkZWZpbmQgZGVzdGluYXRpb24KCiAgICAuUEFSQU1BVEVSIFBhdGgKICAgICAgICBQYXRoIHRvIGEgemlwIGZpbGUgd2l0aCB0aGUgZmlsZSBleHRlbnNpb24gJy56aXAnCgogICAgLlBhcmFtZXRlciBEZXN0aW5hdGlvbgogICAgICAgIFBhdGggdG8gd2hpY2ggdGhlIHppcCBjb250ZW50IGlzIGV4dHJhY3RlZAojPgpmdW5jdGlvbiBFeHBhbmQtWmlwTW9kdWxlIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLCBNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRQYXRoLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uPTEsIE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJERlc3RpbmF0aW9uCiAgICApCiAgICBwcm9jZXNzIHsKICAgICAgICBXcml0ZS1EZWJ1ZyAiVW56aXBwaW5nICRQYXRoIHRvICREZXN0aW5hdGlvbi4uLiIKCiAgICAgICAgIyBDaGVjayBpZiBwb3dlcnNoZWxsIHYzKyBhbmQgLm5ldCB2NC41IGlzIGF2YWlsYWJsZQogICAgICAgICRuZXRGYWlsZWQgPSAkdHJ1ZQogICAgICAgIGlmICggJFBTVmVyc2lvblRhYmxlLlBTVmVyc2lvbi5NYWpvciAtZ2UgMyAtYW5kIChHZXQtQ2hpbGRJdGVtIC1QYXRoICdIS0xNOlxTT0ZUV0FSRVxNaWNyb3NvZnRcTkVUIEZyYW1ld29yayBTZXR1cFxORFBcdjQnIC1SZWN1cnNlIHwgR2V0LUl0ZW1Qcm9wZXJ0eSAtTmFtZSBWZXJzaW9uIHwgV2hlcmUtT2JqZWN0IHsgJF8uVmVyc2lvbiAtbGlrZSAnNC41KicgfSkgKSB7CiAgICAgICAgICAgIFdyaXRlLURlYnVnICdBdHRlbXB0aW5nIHVuemlwIHVzaW5nIHRoZSAuTkVUIEZyYW1ld29yay4uLicKCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBbU3lzdGVtLlJlZmxlY3Rpb24uQXNzZW1ibHldOjpMb2FkV2l0aFBhcnRpYWxOYW1lKCJTeXN0ZW0uSU8uQ29tcHJlc3Npb24uRmlsZVN5c3RlbSIpCiAgICAgICAgICAgICAgICBbU3lzdGVtLklPLkNvbXByZXNzaW9uLlppcEZpbGVdOjpFeHRyYWN0VG9EaXJlY3RvcnkoJFBhdGgsICREZXN0aW5hdGlvbikKICAgICAgICAgICAgICAgICRuZXRGYWlsZWQgPSAkZmFsc2UKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICgkbmV0RmFpbGVkKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBXcml0ZS1EZWJ1ZyAnQXR0ZW1wdGluZyB1bnppcCB1c2luZyB0aGUgV2luZG93cyBTaGVsbC4uLicKICAgICAgICAgICAgICAgICRzaGVsbEFwcCA9IE5ldy1PYmplY3QgLUNvbSBTaGVsbC5BcHBsaWNhdGlvbgogICAgICAgICAgICAgICAgJHNoZWxsWmlwID0gJHNoZWxsQXBwLk5hbWVTcGFjZShbU3RyaW5nXSRQYXRoKQogICAgICAgICAgICAgICAgJHNoZWxsRGVzdCA9ICRzaGVsbEFwcC5OYW1lU3BhY2UoJERlc3RpbmF0aW9uKQogICAgICAgICAgICAgICAgJHNoZWxsRGVzdC5Db3B5SGVyZSgkc2hlbGxaaXAuaXRlbXMoKSkKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAkc2hlbGxGYWlsZWQgPSAkdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAjIGlmIGZhaWx1cmUgYWxyZWFkeSByZWdpc3RlcmVkIG9yIG5vIHJlc3VsdAogICAgICAgIGlmICgoJG5ldEZhaWxlZCAtYW5kICRzaGVsbEZhaWxlZCkgLW9yICgoR2V0LUNoaWxkSXRlbSAkRGVzdGluYXRpb24gfCBNZWFzdXJlLU9iamVjdCB8IFdoZXJlLU9iamVjdCB7ICRfLkNvdW50IC1lcSAwfSkpKSB7CiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgJ1dlIHdlcmUgdW5hYmxlIHRvIGRlY29tcHJlc3MgdGhlIGRvd25sb2FkZWQgbW9kdWxlLiBUaGlzIHRlbmRzIHRvIG1lYW4gYm90aCBvZiB0aGUgZm9sbG93aW5nIGFyZSB0cnVlOicKICAgICAgICAgICAgV3JpdGUtV2FybmluZyAnMS4gWW91Jyd2ZSBkaXNhYmxlZCBXaW5kb3dzIEV4cGxvcmVyIFppcCBmaWxlIGludGVncmF0aW9uIG9yIGFyZSBydW5uaW5nIG9uIFdpbmRvd3MgU2VydmVyIENvcmUuJwogICAgICAgICAgICBXcml0ZS1XYXJuaW5nICcyLiBZb3UgZG9uJyd0IGhhdmUgdGhlIC5ORVQgRnJhbWV3b3JrIDQuNSBpbnN0YWxsZWQuJwogICAgICAgICAgICBXcml0ZS1XYXJuaW5nICdZb3UnJ2xsIG5lZWQgdG8gY29ycmVjdCBhdCBsZWFzdCBvbmUgb2YgdGhlIGFib3ZlIGlzc3VlcyBkZXBlbmRpbmcgb24geW91ciBpbnN0YWxsYXRpb24gdG8gcHJvY2VlZC4nCiAgICAgICAgICAgIHRocm93ICdVbmFibGUgdG8gdW56aXAgZG93bmxvYWRlZCBtb2R1bGUgZmlsZSEnCiAgICAgICAgfQogICAgfQp9Cgo8IwogICAgLlNZTk9QU0lTCiAgICAgICAgVXBkYXRlICckZW52OlBTTW9kdWxlUGF0aCcgZnJvbSAnVXNlcicgYW5kICdNYWNoaW5lJyBzY29wZSBlbnZyaW9ubWVudCB2YXJpYWJsZXMKIz4KZnVuY3Rpb24gVXBkYXRlLVBTTW9kdWxlUGF0aCB7CiAgICBwcm9jZXNzIHsKICAgICAgICAjIHBvd2Vyc2hlbGwgZGVmYXVsdAogICAgICAgICRwc01vZHVsZVBhdGggPSAiJGVudjpQcm9ncmFtRmlsZXNcV2luZG93c1Bvd2Vyc2hlbGxcTW9kdWxlc1wiCgogICAgICAgICRtYWNoaW5lTW9kdWxlUGF0aCA9IFtFbnZpcm9ubWVudF06OkdldEVudmlyb25tZW50VmFyaWFibGUoJ1BTTW9kdWxlUGF0aCcsICdNYWNoaW5lJykKICAgICAgICBpZiAoLW5vdCAkbWFjaGluZU1vZHVsZVBhdGgpIHsKICAgICAgICAgICAgIyBwb3dlcnNoZWxsIGRlZmF1bHQKICAgICAgICAgICAgJG1hY2hpbmVNb2R1bGVQYXRoID0gSm9pbi1QYXRoIC1QYXRoICRQU0hPTUUgLUNoaWxkUGF0aCAnTW9kdWxlcycKICAgICAgICB9CgogICAgICAgICR1c2VyTW9kdWxlUGF0aCA9IFtFbnZpcm9ubWVudF06OkdldEVudmlyb25tZW50VmFyaWFibGUoJ1BTTW9kdWxlUGF0aCcsICdVc2VyJykKICAgICAgICBpZiAoLW5vdCAkdXNlck1vZHVsZVBhdGgpIHsKICAgICAgICAgICAgIyBwb3dlcnNoZWxsIGRlZmF1bHQKICAgICAgICAgICAgJHVzZXJNb2R1bGVQYXRoID0gSm9pbi1QYXRoIC1QYXRoIChbRW52aXJvbm1lbnRdOjpHZXRGb2xkZXJQYXRoKCdNeURvY3VtZW50cycpKSAtQ2hpbGRQYXRoICdXaW5kb3dzUG93ZXJTaGVsbFxNb2R1bGVzJwogICAgICAgIH0KCiAgICAgICAgJG5ld1Nlc3Npb25WYWx1ZSA9ICIkdXNlck1vZHVsZVBhdGg7JG1hY2hpbmVNb2R1bGVQYXRoOyRwc01vZHVsZVBhdGgiCgogICAgICAgICNTZXQgdGhlIHZhbHVlIGluIHRoZSBjdXJyZW50IHByb2Nlc3MKICAgICAgICBbRW52aXJvbm1lbnRdOjpTZXRFbnZpcm9ubWVudFZhcmlhYmxlKCdQU01vZHVsZVBhdGgnLCAkbmV3U2Vzc2lvblZhbHVlLCAnUHJvY2VzcycpCiAgICB9Cn0KI2VuZHJlZ2lvbgoKI3JlZ2lvbiBOdUdldCBIYW5kbGluZwo8IwogICAgLlNZTk9QU0lTCiAgICAgICAgRG93bmxvYWQgYSBtb2R1bGUgb2YgdHlwZSBOdUdldCBwYWNrYWdlCgogICAgLlBBUkFNRVRFUiBOdUdldFBhY2thZ2VJZAogICAgICAgIE51R2V0IHBhY2thZ2UgaWQKCiAgICAuUEFSQU1FVEVSIFBhY2thZ2VWZXJzaW9uCiAgICAgICAgU3BlY2lmaWMgdmVyc2lvbiB0byBiZSBpbnN0YWxsZWQuIElmIG5vdCBkZWZpbmVkLCBpbnN0YWxsIG5ld2VzdC4KCiAgICAuUEFSQU1FVEVSIFNvdXJjZQogICAgICAgIE51R2V0IHNvdXJjZSB1cmwKCiAgICAuUEFSQU1FVEVSIFByZVJlbGVhc2UKICAgICAgICBJZiBubyBQYWNrYWdlVmVyc2lvbiBpcyBkZWZpbmVkLCBtYXkgUHJlUmVsZWFzZXMgYmUgdXNlZD8KCiAgICAuUEFSQU1FVEVSIFByZVJlbGVhc2VUYWcKICAgICAgICBJZiBQcmVSZWxlYXNlcyBtYXkgYmUgdXNlZCwgYWxzbyB1c2UgcHJlcmVsZWFzZXMgb2YgYSBzcGVjaWFsIHRhZz8KIz4KZnVuY3Rpb24gSW52b2tlLURvd25sb2FkTnVHZXRQYWNrYWdlIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICROdUdldFBhY2thZ2VJZCwKCiAgICAgICAgW1N0cmluZ10gJFBhY2thZ2VWZXJzaW9uLAoKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJFNvdXJjZSwKCiAgICAgICAgW1N3aXRjaF0gJFByZVJlbGVhc2UsCgogICAgICAgIFtTdHJpbmddICRQcmVSZWxlYXNlVGFnCiAgICApCiAgICBwcm9jZXNzIHsKICAgICAgICAkV2ViQ2xpZW50ID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLk5ldC5XZWJDbGllbnQKICAgICAgICAkV2ViQ2xpZW50LlByb3h5LkNyZWRlbnRpYWxzID0gW1N5c3RlbS5OZXQuQ3JlZGVudGlhbENhY2hlXTo6RGVmYXVsdE5ldHdvcmtDcmVkZW50aWFscwoKICAgICAgICBpZiAoLW5vdCAkU291cmNlLkVuZHNXaXRoKCcvJykpIHsKICAgICAgICAgICAgJFNvdXJjZSArPSAnLycKICAgICAgICB9CgogICAgICAgIFdyaXRlLVZlcmJvc2UgIlF1ZXJ5aW5nICckU291cmNlJyByZXBvc2l0b3J5IGZvciBwYWNrYWdlIHdpdGggSWQgJyROdUdldFBhY2thZ2VJZCciCiAgICAgICAgJFVybCA9ICJ7MX1QYWNrYWdlcygpP2AkZmlsdGVyPXRvbG93ZXIoSWQpK2VxKyd7MH0nJmAkb3JkZXJieT1JZCIgLWYgJE51R2V0UGFja2FnZUlkLlRvTG93ZXIoKSwgJFNvdXJjZQogICAgICAgIFdyaXRlLURlYnVnICJOdUdldCBxdWVyeSB1cmw6ICRVcmwiCgogICAgICAgIHRyeSB7CiAgICAgICAgICAgICRYbWxEb2MgPSBbeG1sXSRXZWJDbGllbnQuRG93bmxvYWRTdHJpbmcoJFVybCkKICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICB0aHJvdyAiVW5hYmxlIHRvIGRvd25sb2FkIGZyb20gTnVHZXQgZmVlZDogJCgkXy5FeGNlcHRpb24uSW5uZXJFeGNlcHRpb24uTWVzc2FnZSkiCiAgICAgICAgfQoKICAgICAgICBpZiAoJFBhY2thZ2VWZXJzaW9uKSB7CiAgICAgICAgICAgICMgIHZlcnNpb24gcmVnZXhzIGNhbiBiZSBmb3VuZCBpbiB0aGUgTnVHZXQuU2VtYW50aWNWZXJzaW9uIGNsYXNzCiAgICAgICAgICAgICRFbnRyeSA9ICRYbWxEb2MuZmVlZC5lbnRyeSB8CiAgICAgICAgICAgICAgICBXaGVyZS1PYmplY3QgeyAkXy5wcm9wZXJ0aWVzLlZlcnNpb24gLWVxICRQYWNrYWdlVmVyc2lvbiB9IHwKICAgICAgICAgICAgICAgIFNlbGVjdC1PYmplY3QgLUZpcnN0IDEKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRFbnRyeSA9IEZpbmQtTGF0ZXN0TnVnZXRQYWNrYWdlRnJvbUZlZWQgLUZlZWQ6JFhtbERvYy5mZWVkLmVudHJ5IC1QcmVSZWxlYXNlOiRQcmVSZWxlYXNlIC1QcmVSZWxlYXNlVGFnOiRQcmVSZWxlYXNlVGFnCiAgICAgICAgfQoKICAgICAgICBpZiAoJEVudHJ5KSB7CiAgICAgICAgICAgICRQYWNrYWdlVmVyc2lvbiA9ICRFbnRyeS5wcm9wZXJ0aWVzLlZlcnNpb24KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRm91bmQgTnVHZXQgcGFja2FnZSB2ZXJzaW9uICckUGFja2FnZVZlcnNpb24nIgogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgdGhyb3cgKCJDYW5ub3QgZmluZCBOdUdldCBwYWNrYWdlICckTnVHZXRQYWNrYWdlSWQgJFBhY2thZ2VWZXJzaW9uJyBbUHJlUmVsZWFzZT0nezB9JywgUHJlUmVsZWFzZVRhZz0nezF9J10iIC1mICRQcmVSZWxlYXNlLCAkUHJlUmVsZWFzZVRhZykKICAgICAgICB9CgogICAgICAgICREb3dubG9hZFVybCA9ICRFbnRyeS5jb250ZW50LnNyYwogICAgICAgIFdyaXRlLVZlcmJvc2UgIkRvd25sb2FkaW5nIE51R2V0IHBhY2thZ2UgZnJvbSAnJERvd25sb2FkVXJsJyIKICAgICAgICAkRG93bmxvYWRSZXN1bHQgPSBJbnZva2UtRG93bmxvYWRNb2R1bGVGcm9tV2ViIC1Eb3dubG9hZFVybDokRG93bmxvYWRVcmwgLU1vZHVsZU5hbWU6JE51Z2V0UGFja2FnZUlkCiAgICAgICAgcmV0dXJuICREb3dubG9hZFJlc3VsdAogICAgfQp9Cgo8IwogICAgLlNZTk9QU0lTCiAgICAgICAgRmluZCB0aGUgbGF0ZXN0IHJlbGVhc2UgaW4gdGhlIHByb3ZpZGVkIE51R2V0IGZlZWQgZm9yIHRoZSBOdUdldCBwYWNrYWdlIGlkLgoKICAgIC5QQVJBTUVURVIgRmVlZAogICAgICAgIFhtbCBmZWVkIG5vZGUgZm9yIE51R2V0IHBhY2thZ2UKCiAgICAuUEFSQU1FVEVSIFByZVJlbGVhc2UKICAgICAgICBJZiBubyBQYWNrYWdlVmVyc2lvbiBpcyBkZWZpbmVkLCBtYXkgUHJlUmVsZWFzZXMgYmUgdXNlZD8KCiAgICAuUEFSQU1FVEVSIFByZVJlbGVhc2VUYWcKICAgICAgICBJZiBQcmVSZWxlYXNlcyBtYXkgYmUgdXNlZCwgYWxzbyB1c2UgcHJlcmVsZWFzZXMgb2YgYSBzcGVjaWFsIHRhZz8KIz4KZnVuY3Rpb24gRmluZC1MYXRlc3ROdWdldFBhY2thZ2VGcm9tRmVlZCB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0KICAgICgKICAgICAgICBbT2JqZWN0W11dICRGZWVkLAoKICAgICAgICBbU3dpdGNoXSAkUHJlUmVsZWFzZSwKCiAgICAgICAgW1N0cmluZ10gJFByZVJlbGVhc2VUYWcKICAgICkKICAgIHByb2Nlc3MgewogICAgICAgICMgRnJvbSBOdUdldC5TZW1hbnRpY1ZlcnNpb24gLSBodHRwczovL2dpdGh1Yi5jb20vSGFhY2tlZC9OdUdldC9ibG9iL21hc3Rlci9zcmMvQ29yZS9TZW1hbnRpY1ZlcnNpb24uY3MKICAgICAgICAkc2VtVmVyUmVnZXggPSAiXig/PFZlcnNpb24+XGQrKFxzKlwuXHMqXGQrKXswLDN9KSg/PFJlbGVhc2U+LVthLXpdWzAtOWEtei1dKik/JCIKICAgICAgICAkc2VtVmVyU3RyaWN0UmVnZXggPSAiXig/PFZlcnNpb24+XGQrKFwuXGQrKXsyfSkoPzxSZWxlYXNlPi1bYS16XVswLTlhLXotXSopPyQiCgogICAgICAgICMgZmluZCBvbmx5IHN0YWJsZSB2ZXJzaW9ucwogICAgICAgICRzdGFibGVSZWdleCA9ICJeKFxkKyhccypcLlxzKlxkKyl7MCwzfSk/JCIKICAgICAgICAjIGZpbmQgc3RhYmxlIGFuZCBwcmVyZWxlYXNlIHZlcnNpb25zCiAgICAgICAgJHByZVJlbGVhc2VSZWdleCA9ICJeKFxkKyhccypcLlxzKlxkKyl7MCwzfSkoLVthLXpdWzAtOWEtei1dKik/JCIKICAgICAgICAjIGZpbmQgb25seSBhIHNwZWNpZmljIHByZXJlbGVhc2UgdmVyc2lvbnMKICAgICAgICAkc3BlY2lmaWNQcmVSZWxlYXNlUmVnZXggPSAiXihcZCsoXHMqXC5ccypcZCspe3swLDN9fS17MH1bMC05YS16LV0qKT8kIiAtZiAkcHJlUmVsZWFzZVRhZwoKICAgICAgICAjIFNldCB0aGUgcmVxdWlyZWQgc2VhcmNoIGV4cHJlc3Npb24KICAgICAgICAkc2VhcmNoUmVnZXggPSAkc3RhYmxlUmVnZXgKICAgICAgICBpZiAoJHByZVJlbGVhc2UpIHsgJHNlYXJjaFJlZ2V4ID0gJHByZVJlbGVhc2VSZWdleCB9CiAgICAgICAgaWYgKCRwcmVSZWxlYXNlVGFnKSB7ICRzZWFyY2hSZWdleCA9ICRzcGVjaWZpY1ByZVJlbGVhc2VSZWdleCB9CgogICAgICAgICRwYWNrYWdlcyA9ICRmZWVkIHwgV2hlcmUtT2JqZWN0IHsKCiAgICAgICAgICAgICgkXy5wcm9wZXJ0aWVzLlZlcnNpb24pIC1tYXRjaCAkc2VhcmNoUmVnZXgKICAgICAgICB9CgogICAgICAgIHJldHVybiAoJHBhY2thZ2VzIHwgU2VsZWN0IC1MYXN0IDEpCiAgICB9Cn0KCiNlbmRyZWdpb24KCiNyZWdpb24gTW9kdWxlIEhhc2hpbmcKPCMKICAgIC5TWU5PUFNJUwogICAgICAgIENhbGN1bGF0ZSBhIGhhc2ggZm9yIHRoZSBnaXZlbiBmaWxlCgogICAgLlBBUkFNRVRFUiBQYXRoCiAgICAgICAgRmlsZSBwYXRoIGZvciBoYXNpbmcKIz4KZnVuY3Rpb24gR2V0LUZpbGVIYXNoIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkdHJ1ZSldCiAgICAgICAgW0FsaWFzKCdGdWxsTmFtZScpXQogICAgICAgIFtTdHJpbmddICRQYXRoCiAgICApCiAgICBiZWdpbiB7CiAgICAgICAgJEFsZ29yaXRobSA9IE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuU0hBMjU2TWFuYWdlZAogICAgfQogICAgcHJvY2VzcyB7CiAgICAgICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAtUGF0aCAkUGF0aCAtUGF0aFR5cGUgTGVhZikpIHsKICAgICAgICAgICAgV3JpdGUtRXJyb3IgIkNhbm5vdCBmaW5kIGZpbGU6ICRQYXRoIgogICAgICAgICAgICByZXR1cm4KICAgICAgICB9CgogICAgICAgICRTdHJlYW0gPSBbU3lzdGVtLklPLkZpbGVdOjpPcGVuUmVhZCgkUGF0aCkKICAgICAgICB0cnkgewogICAgICAgICAgICAkSGFzaEJ5dGVzID0gJEFsZ29yaXRobS5Db21wdXRlSGFzaCgkU3RyZWFtKQogICAgICAgICAgICBbQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJEhhc2hCeXRlcykgLXJlcGxhY2UgJy0nLCcnCiAgICAgICAgfQogICAgICAgIGZpbmFsbHkgewogICAgICAgICAgICAkU3RyZWFtLkNsb3NlKCkKICAgICAgICB9CiAgICB9Cn0KCjwjCiAgICAuU1lOT1BTSVMKICAgICAgICBDYWxjdWxhdGUgYSBoYXNoIGZvciB0aGUgZ2l2ZW4gZGlyZWN0b3J5LgoKICAgIC5QQVJBTUVURVIgUGF0aAogICAgICAgIFBhdGggdG8gdGhlIGZvbGRlciB3aGljaCBzaG91bGQgYmUgaGFzaGVkLgojPgpmdW5jdGlvbiBHZXQtRm9sZGVySGFzaCB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkUGF0aAogICAgKQogICAgcHJvY2VzcyB7CiAgICAgICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAtUGF0aCAkUGF0aCAtUGF0aFR5cGUgQ29udGFpbmVyKSkgewogICAgICAgICAgICB0aHJvdyAiQ2Fubm90IGZpbmQgZm9sZGVyOiAkUGF0aCIKICAgICAgICB9CgogICAgICAgICRQYXRoID0gJFBhdGggKyAnXCcgLXJlcGxhY2UgJ1xcXFwkJywnXFwnCiAgICAgICAgJFBhdGhQYXR0ZXJuID0gJ14nICsgW1JlZ2V4XTo6RXNjYXBlKCRQYXRoKQoKICAgICAgICAkQ2hpbGRIYXNoZXMgPSBHZXQtQ2hpbGRJdGVtIC1QYXRoICRQYXRoIC1SZWN1cnNlIC1Gb3JjZSB8CiAgICAgICAgICAgIFdoZXJlLU9iamVjdCB7IC1ub3QgJF8uUFNJc0NvbnRhaW5lciB9IHwKICAgICAgICAgICAgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5IEB7CiAgICAgICAgICAgICAgICAgICAgUmVsYXRpdmVQYXRoID0gJF8uRnVsbE5hbWUgLXJlcGxhY2UgJFBhdGhQYXR0ZXJuLCAnJwogICAgICAgICAgICAgICAgICAgIEhhc2ggPSBHZXQtRmlsZUhhc2ggLVBhdGggJF8uRnVsbE5hbWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAkVGV4dCA9IEAoJENoaWxkSGFzaGVzIHwKICAgICAgICAgICAgU29ydC1PYmplY3QgLVByb3BlcnR5IFJlbGF0aXZlUGF0aCB8CiAgICAgICAgICAgIEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICd7MH0gezF9JyAtZiAkXy5IYXNoLCAkXy5SZWxhdGl2ZVBhdGgKICAgICAgICAgICAgfSkgLWpvaW4gJ2ByYG4nCgogICAgICAgIFdyaXRlLURlYnVnICJURVhUPiRUZXh0PFRFWFQiCgogICAgICAgICRBbGdvcml0aG0gPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LlNIQTI1Nk1hbmFnZWQKICAgICAgICAkSGFzaEJ5dGVzID0gJEFsZ29yaXRobS5Db21wdXRlSGFzaChbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCRUZXh0KSkKICAgICAgICBbQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJEhhc2hCeXRlcykgLXJlcGxhY2UgJy0nLCcnCiAgICB9Cn0KCiNlbmRyZWdpb24KCiNlbmRyZWdpb24KCiNyZWdpb24gVGFiRXhwYW5zaW9uCiMgQmFjayBVcCBUYWJFeHBhbnNpb24gaWYgbmVlZGVkCiMgSWRlYSBpcyBzdG9sZW4gZnJvbSBwb3NoLWdpdCArIHBzLWdldAokdGFiRXhwYW5zaW9uQmFja3VwID0gJ1BzR2V0X0RlZmF1bHRUYWJFeHBhbnNpb24nCmlmICgoVGVzdC1QYXRoIC1QYXRoIEZ1bmN0aW9uOlxUYWJFeHBhbnNpb24gLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUpIC1hbmQgLW5vdCAoVGVzdC1QYXRoIC1QYXRoIEZ1bmN0aW9uOlwkdGFiRXhwYW5zaW9uQmFja3VwIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKSkgewogICAgUmVuYW1lLUl0ZW0gLVBhdGggRnVuY3Rpb246XFRhYkV4cGFuc2lvbiAkdGFiRXhwYW5zaW9uQmFja3VwIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlCn0KCiMgUmV2ZXJ0IG9sZCB0YWJleHBuYXNpb24gd2hlbiBtb2R1bGUgaXMgdW5sb2FkZWQKIyB0aGlzIGRvZXMgbm90IGNvdmVyIGFsbCBwYXRocywgYnV0IG1vc3Qgb2YgdGhlbQojIElkZWEgaXMgc3RvbGVuIGZyb20gUG93ZXJUYWIKJE1vZHVsZSA9ICRNeUludm9jYXRpb24uTXlDb21tYW5kLlNjcmlwdEJsb2NrLk1vZHVsZQokTW9kdWxlLk9uUmVtb3ZlID0gewogICAgV3JpdGUtRGVidWcgJ1JldmVydCB0YWIgZXhwYW5zaW9uIGJhY2snCiAgICBSZW1vdmUtSXRlbSAtUGF0aCBGdW5jdGlvbjpcVGFiRXhwYW5zaW9uIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlCiAgICBpZiAoVGVzdC1QYXRoIC1QYXRoIEZ1bmN0aW9uOlwkdGFiRXhwYW5zaW9uQmFja3VwKSB7CiAgICAgICAgUmVuYW1lLUl0ZW0gLVBhdGggRnVuY3Rpb246XCR0YWJFeHBhbnNpb25CYWNrdXAgRnVuY3Rpb246XFRhYkV4cGFuc2lvbgogICAgfQp9CgpmdW5jdGlvbiBUYWJFeHBhbnNpb24gewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtTdHJpbmddICRsaW5lLAogICAgICAgIFtTdHJpbmddICRsYXN0V29yZAogICAgKQogICAgcHJvY2VzcyB7CiAgICAgICAgaWYgKCRsaW5lIC1lcSAiSW5zdGFsbC1Nb2R1bGUgJGxhc3R3b3JkIiAtb3IgJGxpbmUgLWVxICJpbm1vICRsYXN0d29yZCIgLW9yICRsaW5lIC1lcSAiaXNtbyAkbGFzdHdvcmQiIC1vciAkbGluZSAtZXEgInVwbW8gJGxhc3R3b3JkIiAtb3IgJGxpbmUgLWVxICJVcGRhdGUtTW9kdWxlICRsYXN0d29yZCIpIHsKICAgICAgICAgICAgR2V0LVBzR2V0TW9kdWxlSW5mbyAtTW9kdWxlTmFtZSAiJGxhc3R3b3JkKiIgfCAlIHsgJF8uSWQgfSB8IHNvcnQgLVVuaXF1ZQogICAgICAgIH0KICAgICAgICBlbHNlaWYgKCBUZXN0LVBhdGggLVBhdGggRnVuY3Rpb246XCR0YWJFeHBhbnNpb25CYWNrdXAgKSB7CiAgICAgICAgICAgICYgJHRhYkV4cGFuc2lvbkJhY2t1cCAkbGluZSAkbGFzdFdvcmQKICAgICAgICB9CiAgICB9Cn0KI2VuZHJlZ2lvbgoKI3JlZ2lvbiBNb2R1bGUgSW50ZXJmYWNlClNldC1BbGlhcyAtTmFtZSBpbm1vIC1WYWx1ZSBJbnN0YWxsLU1vZHVsZSAjT2Jzb2xldGUKU2V0LUFsaWFzIC1OYW1lIGlzbW8gLVZhbHVlIEluc3RhbGwtTW9kdWxlClNldC1BbGlhcyAtTmFtZSB1cG1vIC1WYWx1ZSBVcGRhdGUtTW9kdWxlCgpFeHBvcnQtTW9kdWxlTWVtYmVyIEluc3RhbGwtTW9kdWxlCkV4cG9ydC1Nb2R1bGVNZW1iZXIgVXBkYXRlLU1vZHVsZQpFeHBvcnQtTW9kdWxlTWVtYmVyIEdldC1Qc0dldE1vZHVsZUluZm8KRXhwb3J0LU1vZHVsZU1lbWJlciBHZXQtUHNHZXRNb2R1bGVIYXNoCkV4cG9ydC1Nb2R1bGVNZW1iZXIgVGFiRXhwYW5zaW9uCkV4cG9ydC1Nb2R1bGVNZW1iZXIgLUFsaWFzIGlubW8KRXhwb3J0LU1vZHVsZU1lbWJlciAtQWxpYXMgaXNtbwpFeHBvcnQtTW9kdWxlTWVtYmVyIC1BbGlhcyB1cG1vCiNlbmRyZWdpb24K
