win-updates.ps1,c9383cad7c22f3548508bdaca421f4d9,Scan result is 1. IsMalware: 0,cGFyYW0oJGdsb2JhbDpSZXN0YXJ0UmVxdWlyZWQ9MCwKICAgICAgICAkZ2xvYmFsOk1vcmVVcGRhdGVzPTAsCiAgICAgICAgJGdsb2JhbDpNYXhDeWNsZXM9NSwKICAgICAgICAkTWF4VXBkYXRlc1BlckN5Y2xlPTUwMCwKICAgICAgICAkRG9uZVNjcmlwdD0nJykKCiMkTG9nZmlsZSA9ICJjOlxXaW5kb3dzXFRlbXBcd2luLXVwZGF0ZXMubG9nIgokSG9zdC5VSS5SYXdVSS5XaW5kb3dUaXRsZSA9ICJSdW4gV2luZG93cyBVcGRhdGVzIgoKZnVuY3Rpb24gTG9nV3JpdGUgewogICBQYXJhbSAoW3N0cmluZ10kbG9nc3RyaW5nKQojICAgJG5vdyA9IEdldC1EYXRlIC1mb3JtYXQgcwojICAgQWRkLUNvbnRlbnQgJExvZ2ZpbGUgLXZhbHVlICIkbm93ICRsb2dzdHJpbmciCiAgIFdyaXRlLUhvc3QgJGxvZ3N0cmluZwp9CgpmdW5jdGlvbiBDaGVjay1Db250aW51ZVJlc3RhcnRPckVuZCgpIHsKICAgICRSZWdpc3RyeUtleSA9ICJIS0xNOlxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxSdW4iCiAgICAkUmVnaXN0cnlFbnRyeSA9ICJJbnN0YWxsV2luZG93c1VwZGF0ZXMiCiAgICBzd2l0Y2ggKCRnbG9iYWw6UmVzdGFydFJlcXVpcmVkKSB7CiAgICAgICAgMCB7CiAgICAgICAgICAgICRwcm9wID0gKEdldC1JdGVtUHJvcGVydHkgJFJlZ2lzdHJ5S2V5KS4kUmVnaXN0cnlFbnRyeQogICAgICAgICAgICBpZiAoJHByb3ApIHsKICAgICAgICAgICAgICAgIExvZ1dyaXRlICJSZXN0YXJ0IFJlZ2lzdHJ5IEVudHJ5IEV4aXN0cyAtIFJlbW92aW5nIEl0IgogICAgICAgICAgICAgICAgUmVtb3ZlLUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkUmVnaXN0cnlLZXkgLU5hbWUgJFJlZ2lzdHJ5RW50cnkgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgTG9nV3JpdGUgIk5vIFJlc3RhcnQgUmVxdWlyZWQiCiAgICAgICAgICAgIENoZWNrLVdpbmRvd3NVcGRhdGVzCgogICAgICAgICAgICBpZiAoKCRnbG9iYWw6TW9yZVVwZGF0ZXMgLWVxIDEpIC1hbmQgKCRzY3JpcHQ6Q3ljbGVzIC1sZSAkZ2xvYmFsOk1heEN5Y2xlcykpIHsKICAgICAgICAgICAgICAgIEluc3RhbGwtV2luZG93c1VwZGF0ZXMKICAgICAgICAgICAgfSBlbHNlaWYgKCRzY3JpcHQ6Q3ljbGVzIC1ndCAkZ2xvYmFsOk1heEN5Y2xlcykgewogICAgICAgICAgICAgICAgTG9nV3JpdGUgIkV4Y2VlZGVkIEN5Y2xlIENvdW50IC0gU3RvcHBpbmciCiAgICAgICAgICAgICAgICBJbnZva2UtRXhwcmVzc2lvbiAiJCgkRG9uZVNjcmlwdCkiCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBMb2dXcml0ZSAiRG9uZSBJbnN0YWxsaW5nIFdpbmRvd3MgVXBkYXRlcyIKICAgICAgICAgICAgICAgIEludm9rZS1FeHByZXNzaW9uICIkKCREb25lU2NyaXB0KSIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAxIHsKICAgICAgICAgICAgJHByb3AgPSAoR2V0LUl0ZW1Qcm9wZXJ0eSAkUmVnaXN0cnlLZXkpLiRSZWdpc3RyeUVudHJ5CiAgICAgICAgICAgIGlmICgtbm90ICRwcm9wKSB7CiAgICAgICAgICAgICAgICBMb2dXcml0ZSAiUmVzdGFydCBSZWdpc3RyeSBFbnRyeSBEb2VzIE5vdCBFeGlzdCAtIENyZWF0aW5nIEl0IgogICAgICAgICAgICAgICAgU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkUmVnaXN0cnlLZXkgLU5hbWUgJFJlZ2lzdHJ5RW50cnkgLVZhbHVlICJDOlxXaW5kb3dzXFN5c3RlbTMyXFdpbmRvd3NQb3dlclNoZWxsXHYxLjBccG93ZXJzaGVsbC5leGUgLUZpbGUgJCgkc2NyaXB0OlNjcmlwdFBhdGgpIC1NYXhVcGRhdGVzUGVyQ3ljbGUgJCgkTWF4VXBkYXRlc1BlckN5Y2xlKSAtRG9uZVNjcmlwdCAkKCREb25lU2NyaXB0KSIKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIExvZ1dyaXRlICJSZXN0YXJ0IFJlZ2lzdHJ5IEVudHJ5IEV4aXN0cyBBbHJlYWR5IgogICAgICAgICAgICB9CgogICAgICAgICAgICBMb2dXcml0ZSAiUmVzdGFydCBSZXF1aXJlZCAtIFJlc3RhcnRpbmcuLi4iCiAgICAgICAgICAgIFJlc3RhcnQtQ29tcHV0ZXIKICAgICAgICB9CiAgICAgICAgZGVmYXVsdCB7CiAgICAgICAgICAgIExvZ1dyaXRlICJVbnN1cmUgSWYgQSBSZXN0YXJ0IElzIFJlcXVpcmVkIgogICAgICAgICAgICBicmVhawogICAgICAgIH0KICAgIH0KfQoKZnVuY3Rpb24gSW5zdGFsbC1XaW5kb3dzVXBkYXRlcygpIHsKICAgICRzY3JpcHQ6Q3ljbGVzKysKICAgIExvZ1dyaXRlICJFdmFsdWF0aW5nIEF2YWlsYWJsZSBVcGRhdGVzIHdpdGggbGltaXQgb2YgJCgkTWF4VXBkYXRlc1BlckN5Y2xlKToiCiAgICAkVXBkYXRlc1RvRG93bmxvYWQgPSBOZXctT2JqZWN0IC1Db21PYmplY3QgJ01pY3Jvc29mdC5VcGRhdGUuVXBkYXRlQ29sbCcKICAgICRzY3JpcHQ6aSA9IDA7CiAgICAkQ3VycmVudFVwZGF0ZXMgPSAkU2VhcmNoUmVzdWx0LlVwZGF0ZXMgfCBTZWxlY3QtT2JqZWN0CiAgICB3aGlsZSgkc2NyaXB0OmkgLWx0ICRDdXJyZW50VXBkYXRlcy5Db3VudCAtYW5kICRzY3JpcHQ6Q3ljbGVVcGRhdGVDb3VudCAtbHQgJE1heFVwZGF0ZXNQZXJDeWNsZSkgewogICAgICAgICRVcGRhdGUgPSAkQ3VycmVudFVwZGF0ZXNbJHNjcmlwdDppXQogICAgICAgIGlmICgoJFVwZGF0ZSAtbmUgJG51bGwpIC1hbmQgKCEkVXBkYXRlLklzRG93bmxvYWRlZCkpIHsKICAgICAgICAgICAgW2Jvb2xdJGFkZFRoaXNVcGRhdGUgPSAkZmFsc2UKICAgICAgICAgICAgaWYgKCRVcGRhdGUuSW5zdGFsbGF0aW9uQmVoYXZpb3IuQ2FuUmVxdWVzdFVzZXJJbnB1dCkgewogICAgICAgICAgICAgICAgTG9nV3JpdGUgIj4gU2tpcHBpbmc6ICQoJFVwZGF0ZS5UaXRsZSkgYmVjYXVzZSBpdCByZXF1aXJlcyB1c2VyIGlucHV0IgogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKCEoJFVwZGF0ZS5FdWxhQWNjZXB0ZWQpKSB7CiAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgIj4gTm90ZTogJCgkVXBkYXRlLlRpdGxlKSBoYXMgYSBsaWNlbnNlIGFncmVlbWVudCB0aGF0IG11c3QgYmUgYWNjZXB0ZWQuIEFjY2VwdGluZyB0aGUgbGljZW5zZS4iCiAgICAgICAgICAgICAgICAgICAgJFVwZGF0ZS5BY2NlcHRFdWxhKCkKICAgICAgICAgICAgICAgICAgICBbYm9vbF0kYWRkVGhpc1VwZGF0ZSA9ICR0cnVlCiAgICAgICAgICAgICAgICAgICAgJHNjcmlwdDpDeWNsZVVwZGF0ZUNvdW50KysKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgW2Jvb2xdJGFkZFRoaXNVcGRhdGUgPSAkdHJ1ZQogICAgICAgICAgICAgICAgICAgICRzY3JpcHQ6Q3ljbGVVcGRhdGVDb3VudCsrCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChbYm9vbF0kYWRkVGhpc1VwZGF0ZSkgewogICAgICAgICAgICAgICAgTG9nV3JpdGUgIkFkZGluZzogJCgkVXBkYXRlLlRpdGxlKSIKICAgICAgICAgICAgICAgICRVcGRhdGVzVG9Eb3dubG9hZC5BZGQoJFVwZGF0ZSkgfE91dC1OdWxsCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgJHNjcmlwdDppKysKICAgIH0KCiAgICBpZiAoJFVwZGF0ZXNUb0Rvd25sb2FkLkNvdW50IC1lcSAwKSB7CiAgICAgICAgTG9nV3JpdGUgIk5vIFVwZGF0ZXMgVG8gRG93bmxvYWQuLi4iCiAgICB9IGVsc2UgewogICAgICAgIExvZ1dyaXRlICdEb3dubG9hZGluZyBVcGRhdGVzLi4uJwogICAgICAgICRvayA9IDA7CiAgICAgICAgd2hpbGUgKCEgJG9rKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkRG93bmxvYWRlciA9ICRVcGRhdGVTZXNzaW9uLkNyZWF0ZVVwZGF0ZURvd25sb2FkZXIoKQogICAgICAgICAgICAgICAgJERvd25sb2FkZXIuVXBkYXRlcyA9ICRVcGRhdGVzVG9Eb3dubG9hZAogICAgICAgICAgICAgICAgJERvd25sb2FkZXIuRG93bmxvYWQoKQogICAgICAgICAgICAgICAgJG9rID0gMTsKICAgICAgICAgICAgfSBjYXRjaCB7CiAgICAgICAgICAgICAgICBMb2dXcml0ZSAkXy5FeGNlcHRpb24gfCBGb3JtYXQtTGlzdCAtZm9yY2UKICAgICAgICAgICAgICAgIExvZ1dyaXRlICJFcnJvciBkb3dubG9hZGluZyB1cGRhdGVzLiBSZXRyeWluZyBpbiAzMHMuIgogICAgICAgICAgICAgICAgJHNjcmlwdDphdHRlbXB0cyA9ICRzY3JpcHQ6YXR0ZW1wdHMgKyAxCiAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtcyAzMAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgICRVcGRhdGVzVG9JbnN0YWxsID0gTmV3LU9iamVjdCAtQ29tT2JqZWN0ICdNaWNyb3NvZnQuVXBkYXRlLlVwZGF0ZUNvbGwnCiAgICBbYm9vbF0kcmVib290TWF5QmVSZXF1aXJlZCA9ICRmYWxzZQogICAgTG9nV3JpdGUgJ1RoZSBmb2xsb3dpbmcgdXBkYXRlcyBhcmUgZG93bmxvYWRlZCBhbmQgcmVhZHkgdG8gYmUgaW5zdGFsbGVkOicKICAgIGZvcmVhY2ggKCRVcGRhdGUgaW4gJFNlYXJjaFJlc3VsdC5VcGRhdGVzKSB7CiAgICAgICAgaWYgKCgkVXBkYXRlLklzRG93bmxvYWRlZCkpIHsKICAgICAgICAgICAgTG9nV3JpdGUgIj4gJCgkVXBkYXRlLlRpdGxlKSIKICAgICAgICAgICAgJFVwZGF0ZXNUb0luc3RhbGwuQWRkKCRVcGRhdGUpIHxPdXQtTnVsbAoKICAgICAgICAgICAgaWYgKCRVcGRhdGUuSW5zdGFsbGF0aW9uQmVoYXZpb3IuUmVib290QmVoYXZpb3IgLWd0IDApewogICAgICAgICAgICAgICAgW2Jvb2xdJHJlYm9vdE1heUJlUmVxdWlyZWQgPSAkdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGlmICgkVXBkYXRlc1RvSW5zdGFsbC5Db3VudCAtZXEgMCkgewogICAgICAgIExvZ1dyaXRlICdObyB1cGRhdGVzIGF2YWlsYWJsZSB0byBpbnN0YWxsLi4uJwogICAgICAgICRnbG9iYWw6TW9yZVVwZGF0ZXM9MAogICAgICAgICRnbG9iYWw6UmVzdGFydFJlcXVpcmVkPTAKICAgICAgICBJbnZva2UtRXhwcmVzc2lvbiAiJCgkRG9uZVNjcmlwdCkiCiAgICAgICAgYnJlYWsKICAgIH0KCiAgICBpZiAoJHJlYm9vdE1heUJlUmVxdWlyZWQpIHsKICAgICAgICBMb2dXcml0ZSAnVGhlc2UgdXBkYXRlcyBtYXkgcmVxdWlyZSBhIHJlYm9vdCcKICAgICAgICAkZ2xvYmFsOlJlc3RhcnRSZXF1aXJlZD0xCiAgICB9CgogICAgTG9nV3JpdGUgJ0luc3RhbGxpbmcgdXBkYXRlcy4uLicKCiAgICAkSW5zdGFsbGVyID0gJHNjcmlwdDpVcGRhdGVTZXNzaW9uLkNyZWF0ZVVwZGF0ZUluc3RhbGxlcigpCiAgICAkSW5zdGFsbGVyLlVwZGF0ZXMgPSAkVXBkYXRlc1RvSW5zdGFsbAogICAgJEluc3RhbGxhdGlvblJlc3VsdCA9ICRJbnN0YWxsZXIuSW5zdGFsbCgpCgogICAgTG9nV3JpdGUgIkluc3RhbGxhdGlvbiBSZXN1bHQ6ICQoJEluc3RhbGxhdGlvblJlc3VsdC5SZXN1bHRDb2RlKSIKICAgIExvZ1dyaXRlICJSZWJvb3QgUmVxdWlyZWQ6ICQoJEluc3RhbGxhdGlvblJlc3VsdC5SZWJvb3RSZXF1aXJlZCkiCiAgICBMb2dXcml0ZSAnTGlzdGluZyBvZiB1cGRhdGVzIGluc3RhbGxlZCBhbmQgaW5kaXZpZHVhbCBpbnN0YWxsYXRpb24gcmVzdWx0czonCiAgICBpZiAoJEluc3RhbGxhdGlvblJlc3VsdC5SZWJvb3RSZXF1aXJlZCkgewogICAgICAgICRnbG9iYWw6UmVzdGFydFJlcXVpcmVkPTEKICAgIH0gZWxzZSB7CiAgICAgICAgJGdsb2JhbDpSZXN0YXJ0UmVxdWlyZWQ9MAogICAgfQoKICAgIGZvcigkaT0wOyAkaSAtbHQgJFVwZGF0ZXNUb0luc3RhbGwuQ291bnQ7ICRpKyspIHsKICAgICAgICBOZXctT2JqZWN0IC1UeXBlTmFtZSBQU09iamVjdCAtUHJvcGVydHkgQHsKICAgICAgICAgICAgVGl0bGUgPSAkVXBkYXRlc1RvSW5zdGFsbC5JdGVtKCRpKS5UaXRsZQogICAgICAgICAgICBSZXN1bHQgPSAkSW5zdGFsbGF0aW9uUmVzdWx0LkdldFVwZGF0ZVJlc3VsdCgkaSkuUmVzdWx0Q29kZQogICAgICAgIH0KICAgIH0KCiAgICBDaGVjay1Db250aW51ZVJlc3RhcnRPckVuZAp9CgpmdW5jdGlvbiBDaGVjay1XaW5kb3dzVXBkYXRlcygpIHsKICAgIExvZ1dyaXRlICJDaGVja2luZyBGb3IgV2luZG93cyBVcGRhdGVzIgogICAgJFVzZXJuYW1lID0gJGVudjpVU0VSRE9NQUlOICsgIlwiICsgJGVudjpVU0VSTkFNRQoKICAgIE5ldy1FdmVudExvZyAtU291cmNlICRTY3JpcHROYW1lIC1Mb2dOYW1lICdXaW5kb3dzIFBvd2Vyc2hlbGwnIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlCgogICAgJE1lc3NhZ2UgPSAiU2NyaXB0OiAiICsgJFNjcmlwdFBhdGggKyAiYG5TY3JpcHQgVXNlcjogIiArICRVc2VybmFtZSArICJgblN0YXJ0ZWQ6ICIgKyAoR2V0LURhdGUpLnRvU3RyaW5nKCkKCiAgICBXcml0ZS1FdmVudExvZyAtTG9nTmFtZSAnV2luZG93cyBQb3dlcnNoZWxsJyAtU291cmNlICRTY3JpcHROYW1lIC1FdmVudElEICIxMDQiIC1FbnRyeVR5cGUgIkluZm9ybWF0aW9uIiAtTWVzc2FnZSAkTWVzc2FnZQogICAgTG9nV3JpdGUgJE1lc3NhZ2UKCiAgICAkc2NyaXB0OlVwZGF0ZVNlYXJjaGVyID0gJHNjcmlwdDpVcGRhdGVTZXNzaW9uLkNyZWF0ZVVwZGF0ZVNlYXJjaGVyKCkKICAgICRzY3JpcHQ6c3VjY2Vzc2Z1bCA9ICRGQUxTRQogICAgJHNjcmlwdDphdHRlbXB0cyA9IDAKICAgICRzY3JpcHQ6bWF4QXR0ZW1wdHMgPSAxMgogICAgd2hpbGUoLW5vdCAkc2NyaXB0OnN1Y2Nlc3NmdWwgLWFuZCAkc2NyaXB0OmF0dGVtcHRzIC1sdCAkc2NyaXB0Om1heEF0dGVtcHRzKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJHNjcmlwdDpTZWFyY2hSZXN1bHQgPSAkc2NyaXB0OlVwZGF0ZVNlYXJjaGVyLlNlYXJjaCgiSXNJbnN0YWxsZWQ9MCBhbmQgVHlwZT0nU29mdHdhcmUnIGFuZCBJc0hpZGRlbj0wIikKICAgICAgICAgICAgJHNjcmlwdDpzdWNjZXNzZnVsID0gJFRSVUUKICAgICAgICB9IGNhdGNoIHsKICAgICAgICAgICAgTG9nV3JpdGUgJF8uRXhjZXB0aW9uIHwgRm9ybWF0LUxpc3QgLWZvcmNlCiAgICAgICAgICAgIExvZ1dyaXRlICJTZWFyY2ggY2FsbCB0byBVcGRhdGVTZWFyY2hlciB3YXMgdW5zdWNjZXNzZnVsLiBSZXRyeWluZyBpbiAxMHMuIgogICAgICAgICAgICAkc2NyaXB0OmF0dGVtcHRzID0gJHNjcmlwdDphdHRlbXB0cyArIDEKICAgICAgICAgICAgU3RhcnQtU2xlZXAgLXMgMTAKICAgICAgICB9CiAgICB9CgogICAgaWYgKCRTZWFyY2hSZXN1bHQuVXBkYXRlcy5Db3VudCAtbmUgMCkgewogICAgICAgICRNZXNzYWdlID0gIlRoZXJlIGFyZSAiICsgJFNlYXJjaFJlc3VsdC5VcGRhdGVzLkNvdW50ICsgIiBtb3JlIHVwZGF0ZXMuIgogICAgICAgIExvZ1dyaXRlICRNZXNzYWdlCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJHNjcmlwdDpTZWFyY2hSZXN1bHQuVXBkYXRlcyB8U2VsZWN0LU9iamVjdCAtUHJvcGVydHkgVGl0bGUsIERlc2NyaXB0aW9uLCBTdXBwb3J0VXJsLCBVbmluc3RhbGxhdGlvbk5vdGVzLCBSZWJvb3RSZXF1aXJlZCwgRXVsYUFjY2VwdGVkIHxGb3JtYXQtTGlzdAogICAgICAgICAgICAkZ2xvYmFsOk1vcmVVcGRhdGVzPTEKICAgICAgICB9IGNhdGNoIHsKICAgICAgICAgICAgTG9nV3JpdGUgJF8uRXhjZXB0aW9uIHwgRm9ybWF0LUxpc3QgLWZvcmNlCiAgICAgICAgICAgIExvZ1dyaXRlICJTaG93aW5nIFNlYXJjaFJlc3VsdCB3YXMgdW5zdWNjZXNzZnVsLiBSZWJvb3RpbmcuIgogICAgICAgICAgICAkZ2xvYmFsOlJlc3RhcnRSZXF1aXJlZD0xCiAgICAgICAgICAgICRnbG9iYWw6TW9yZVVwZGF0ZXM9MAogICAgICAgICAgICBDaGVjay1Db250aW51ZVJlc3RhcnRPckVuZAogICAgICAgICAgICBMb2dXcml0ZSAiU2hvdyBuZXZlciBoYXBwZW4gdG8gc2VlIHRoaXMgdGV4dCEiCiAgICAgICAgICAgIFJlc3RhcnQtQ29tcHV0ZXIKICAgICAgICB9CiAgICB9IGVsc2UgewogICAgICAgIExvZ1dyaXRlICdUaGVyZSBhcmUgbm8gYXBwbGljYWJsZSB1cGRhdGVzJwogICAgICAgICRnbG9iYWw6UmVzdGFydFJlcXVpcmVkPTAKICAgICAgICAkZ2xvYmFsOk1vcmVVcGRhdGVzPTAKICAgIH0KfQoKJHNjcmlwdDpTY3JpcHROYW1lID0gJE15SW52b2NhdGlvbi5NeUNvbW1hbmQuVG9TdHJpbmcoKQokc2NyaXB0OlNjcmlwdFBhdGggPSAkTXlJbnZvY2F0aW9uLk15Q29tbWFuZC5QYXRoCiRzY3JpcHQ6VXBkYXRlU2Vzc2lvbiA9IE5ldy1PYmplY3QgLUNvbU9iamVjdCAnTWljcm9zb2Z0LlVwZGF0ZS5TZXNzaW9uJwokc2NyaXB0OlVwZGF0ZVNlc3Npb24uQ2xpZW50QXBwbGljYXRpb25JRCA9ICdQYWNrZXIgV2luZG93cyBVcGRhdGUgSW5zdGFsbGVyJwokc2NyaXB0OlVwZGF0ZVNlYXJjaGVyID0gJHNjcmlwdDpVcGRhdGVTZXNzaW9uLkNyZWF0ZVVwZGF0ZVNlYXJjaGVyKCkKJHNjcmlwdDpTZWFyY2hSZXN1bHQgPSBOZXctT2JqZWN0IC1Db21PYmplY3QgJ01pY3Jvc29mdC5VcGRhdGUuVXBkYXRlQ29sbCcKJHNjcmlwdDpDeWNsZXMgPSAwCiRzY3JpcHQ6Q3ljbGVVcGRhdGVDb3VudCA9IDAKCkNoZWNrLVdpbmRvd3NVcGRhdGVzCmlmICgkZ2xvYmFsOk1vcmVVcGRhdGVzIC1lcSAxKSB7CiAgICBJbnN0YWxsLVdpbmRvd3NVcGRhdGVzCn0gZWxzZSB7CiAgICBDaGVjay1Db250aW51ZVJlc3RhcnRPckVuZAp9Cg==
