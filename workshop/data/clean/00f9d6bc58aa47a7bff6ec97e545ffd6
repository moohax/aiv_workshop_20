progressbar.ps1,393be2ef247768c7043f2c2f9f4d7a71,Scan result is 1. IsMalware: 0,I0NvcHlyaWdodCAoYykgMjAxNCBTZXJndWVpIEtvdXptaW5lCiMKI1Blcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKI29mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsCiNpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzCiN0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCiNjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMKI2Z1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CiMKI1RoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluCiNhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KIwojVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKI0lNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLAojRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCiNBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCiNMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLAojT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTgojVEhFIFNPRlRXQVJFLgpBZGQtVHlwZSAtVHlwZURlZmluaXRpb24gQCIKCi8vICIKLy8gaHR0cDovL3d3dy5qYXZhMnMuY29tL0NvZGUvQ1NoYXJwL0dVSS1XaW5kb3dzLUZvcm0vUHJvZ3Jlc3NCYXJIb3N0Lmh0bQoKdXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uRHJhd2luZzsKdXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zOwp1c2luZyBTeXN0ZW0uV2luZG93cy5Gb3JtczsKdXNpbmcgU3lzdGVtLkRhdGE7CgpuYW1lc3BhY2UgUHJvZ3Jlc3NCYXJIb3N0CnsKCgogICAgcHVibGljIGNsYXNzIFByb2dyZXNzIDogU3lzdGVtLldpbmRvd3MuRm9ybXMuVXNlckNvbnRyb2wKICAgIHsKICAgICAgICBpbnRlcm5hbCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbCBsYmxQcm9ncmVzczsKICAgICAgICBpbnRlcm5hbCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Qcm9ncmVzc0JhciBCYXI7CgoKICAgICAgICBwdWJsaWMgUHJvZ3Jlc3MoKQogICAgICAgIHsKICAgICAgICAgICAgSW5pdGlhbGl6ZUNvbXBvbmVudCgpOwogICAgICAgIH0KCiAgICAgICAgcHJpdmF0ZSB2b2lkIEluaXRpYWxpemVDb21wb25lbnQoKQogICAgICAgIHsKICAgICAgICAgICAgdGhpcy5sYmxQcm9ncmVzcyA9IG5ldyBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbCgpOwogICAgICAgICAgICB0aGlzLkJhciA9IG5ldyBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Qcm9ncmVzc0JhcigpOwogICAgICAgICAgICB0aGlzLlN1c3BlbmRMYXlvdXQoKTsKICAgICAgICAgICAgLy8gbGJsUHJvZ3Jlc3MKICAgICAgICAgICAgdGhpcy5sYmxQcm9ncmVzcy5BbmNob3IgPSAoKFN5c3RlbS5XaW5kb3dzLkZvcm1zLkFuY2hvclN0eWxlcy5Ub3AgfCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5BbmNob3JTdHlsZXMuTGVmdCkgCiAgICAgICAgICAgICAgICB8IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkFuY2hvclN0eWxlcy5SaWdodCk7CiAgICAgICAgICAgIHRoaXMubGJsUHJvZ3Jlc3MuTG9jYXRpb24gPSBuZXcgU3lzdGVtLkRyYXdpbmcuUG9pbnQoNSwgNDYpOwogICAgICAgICAgICB0aGlzLmxibFByb2dyZXNzLk5hbWUgPSAibGJsUHJvZ3Jlc3MiOwogICAgICAgICAgICB0aGlzLmxibFByb2dyZXNzLlNpemUgPSBuZXcgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxNTIsIDE2KTsKICAgICAgICAgICAgdGhpcy5sYmxQcm9ncmVzcy5UYWJJbmRleCA9IDM7CiAgICAgICAgICAgIHRoaXMubGJsUHJvZ3Jlc3MuVGV4dCA9ICIwJSBEb25lIjsKICAgICAgICAgICAgdGhpcy5sYmxQcm9ncmVzcy5UZXh0QWxpZ24gPSBTeXN0ZW0uRHJhd2luZy5Db250ZW50QWxpZ25tZW50LlRvcENlbnRlcjsKICAgICAgICAgICAgLy8gQmFyCiAgICAgICAgICAgIHRoaXMuQmFyLkFuY2hvciA9ICgoU3lzdGVtLldpbmRvd3MuRm9ybXMuQW5jaG9yU3R5bGVzLlRvcCB8IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkFuY2hvclN0eWxlcy5MZWZ0KSAKICAgICAgICAgICAgICAgIHwgU3lzdGVtLldpbmRvd3MuRm9ybXMuQW5jaG9yU3R5bGVzLlJpZ2h0KTsKICAgICAgICAgICAgdGhpcy5CYXIuTG9jYXRpb24gPSBuZXcgU3lzdGVtLkRyYXdpbmcuUG9pbnQoNSwgNik7CiAgICAgICAgICAgIHRoaXMuQmFyLk5hbWUgPSAiQmFyIjsKICAgICAgICAgICAgdGhpcy5CYXIuU2l6ZSA9IG5ldyBTeXN0ZW0uRHJhd2luZy5TaXplKDE1NCwgMzIpOwogICAgICAgICAgICB0aGlzLkJhci5UYWJJbmRleCA9IDI7CiAgICAgICAgICAgIC8vIFByb2dyZXNzCiAgICAgICAgICAgIHRoaXMuQ29udHJvbHMuQWRkUmFuZ2UobmV3IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkNvbnRyb2xbXSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYmxQcm9ncmVzcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkJhcn0pOwogICAgICAgICAgICB0aGlzLk5hbWUgPSAiUHJvZ3Jlc3MiOwogICAgICAgICAgICB0aGlzLlNpemUgPSBuZXcgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxNjQsIDY4KTsKICAgICAgICAgICAgdGhpcy5SZXN1bWVMYXlvdXQoZmFsc2UpOwoKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgcHVibGljIGludCBWYWx1ZQogICAgICAgIHsKICAgICAgICAgICAgZ2V0CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHJldHVybiBCYXIuVmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc2V0CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIEJhci5WYWx1ZSA9IHZhbHVlOwogICAgICAgICAgICAgICAgVXBkYXRlTGFiZWwoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcHVibGljIGludCBNYXhpbXVtCiAgICAgICAgewogICAgICAgICAgICBnZXQKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcmV0dXJuIEJhci5NYXhpbXVtOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNldAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBCYXIuTWF4aW11bSA9IHZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBwdWJsaWMgaW50IFN0ZXAKICAgICAgICB7CiAgICAgICAgICAgIGdldAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICByZXR1cm4gQmFyLlN0ZXA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc2V0CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIEJhci5TdGVwID0gdmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHB1YmxpYyB2b2lkIFBlcmZvcm1TdGVwKCkKICAgICAgICB7CiAgICAgICAgICAgIEJhci5QZXJmb3JtU3RlcCgpOwogICAgICAgICAgICBVcGRhdGVMYWJlbCgpOwogICAgICAgIH0KCiAgICAgICAgcHJpdmF0ZSB2b2lkIFVwZGF0ZUxhYmVsKCkKICAgICAgICB7CiAgICAgICAgICAgIGxibFByb2dyZXNzLlRleHQgPSAoTWF0aC5Sb3VuZCgoZGVjaW1hbCkoQmFyLlZhbHVlICogMTAwKSAvCiAgICAgICAgICAgICAgICBCYXIuTWF4aW11bSkpLlRvU3RyaW5nKCk7CiAgICAgICAgICAgIGxibFByb2dyZXNzLlRleHQgKz0gIiUgRG9uZSI7CiAgICAgICAgfQogICAgfQoKCgp9CgpwdWJsaWMgY2xhc3MgV2luMzJXaW5kb3cgOiBJV2luMzJXaW5kb3cKewogICAgcHJpdmF0ZSBJbnRQdHIgX2hXbmQ7CiAgICBwcml2YXRlIGJvb2wgX3Zpc2libGU7CgogICAgcHVibGljIGJvb2wgVmlzaWJsZQogICAgewogICAgICAgIGdldCB7IHJldHVybiBfdmlzaWJsZTsgfQogICAgICAgIHNldCB7IF92aXNpYmxlID0gdmFsdWU7IH0KICAgIH0KCiAgICBwdWJsaWMgV2luMzJXaW5kb3coSW50UHRyIGhhbmRsZSkKICAgIHsKICAgICAgICBfaFduZCA9IGhhbmRsZTsKICAgIH0KCiAgICBwcml2YXRlIFByb2dyZXNzQmFySG9zdC5Qcm9ncmVzcyBfdGFyZ2V0OwogICAgcHVibGljIFByb2dyZXNzQmFySG9zdC5Qcm9ncmVzcyBUYXJnZXQKICAgIHsKICAgICAgICBnZXQgeyByZXR1cm4gX3RhcmdldDsgfQogICAgICAgIHNldCB7IF90YXJnZXQgPSB2YWx1ZTsgfQogICAgfQoKICAgIHB1YmxpYyBJbnRQdHIgSGFuZGxlCiAgICB7CiAgICAgICAgZ2V0IHsgcmV0dXJuIF9oV25kOyB9CiAgICB9Cn0KCiJAIC1SZWZlcmVuY2VkQXNzZW1ibGllcyAnU3lzdGVtLldpbmRvd3MuRm9ybXMuZGxsJywnU3lzdGVtLkRyYXdpbmcuZGxsJywnU3lzdGVtLkRhdGEuZGxsJwoKCiMgaHR0cDovL3Bvc2hjb2RlLm9yZy8yODg3CiMgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy84MzQzNzY3L2hvdy10by1nZXQtdGhlLWN1cnJlbnQtZGlyZWN0b3J5LW9mLXRoZS1jbWRsZXQtYmVpbmctZXhlY3V0ZWQKIyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3N5c3RlbS5tYW5hZ2VtZW50LmF1dG9tYXRpb24uaW52b2NhdGlvbmluZm8ucHNjb21tYW5kcGF0aCUyOHY9dnMuODUlMjkuYXNweApmdW5jdGlvbiBHZXQtU2NyaXB0RGlyZWN0b3J5CnsKICBbc3RyaW5nXSRzY3JpcHREaXJlY3RvcnkgPSAkbnVsbAoKICBpZiAoJGhvc3QuVmVyc2lvbi5NYWpvciAtZ3QgMikgewogICAgJHNjcmlwdERpcmVjdG9yeSA9IChHZXQtVmFyaWFibGUgUFNTY3JpcHRSb290KS5WYWx1ZQogICAgV3JpdGUtRGVidWcgKCckUFNTY3JpcHRSb290OiB7MH0nIC1mICRzY3JpcHREaXJlY3RvcnkpCiAgICBpZiAoJHNjcmlwdERpcmVjdG9yeSAtbmUgJG51bGwpIHsKICAgICAgcmV0dXJuICRzY3JpcHREaXJlY3Rvcnk7CiAgICB9CiAgICAkc2NyaXB0RGlyZWN0b3J5ID0gW1N5c3RlbS5JTy5QYXRoXTo6R2V0RGlyZWN0b3J5TmFtZSgkTXlJbnZvY2F0aW9uLlBTQ29tbWFuZFBhdGgpCiAgICBXcml0ZS1EZWJ1ZyAoJyRNeUludm9jYXRpb24uUFNDb21tYW5kUGF0aDogezB9JyAtZiAkc2NyaXB0RGlyZWN0b3J5KQogICAgaWYgKCRzY3JpcHREaXJlY3RvcnkgLW5lICRudWxsKSB7CiAgICAgIHJldHVybiAkc2NyaXB0RGlyZWN0b3J5OwogICAgfQoKICAgICRzY3JpcHREaXJlY3RvcnkgPSBTcGxpdC1QYXRoIC1QYXJlbnQgJFBTQ29tbWFuZFBhdGgKICAgIFdyaXRlLURlYnVnICgnJFBTQ29tbWFuZFBhdGg6IHswfScgLWYgJHNjcmlwdERpcmVjdG9yeSkKICAgIGlmICgkc2NyaXB0RGlyZWN0b3J5IC1uZSAkbnVsbCkgewogICAgICByZXR1cm4gJHNjcmlwdERpcmVjdG9yeTsKICAgIH0KICB9IGVsc2UgewogICAgJHNjcmlwdERpcmVjdG9yeSA9IFtTeXN0ZW0uSU8uUGF0aF06OkdldERpcmVjdG9yeU5hbWUoJE15SW52b2NhdGlvbi5NeUNvbW1hbmQuRGVmaW5pdGlvbikKICAgIGlmICgkc2NyaXB0RGlyZWN0b3J5IC1uZSAkbnVsbCkgewogICAgICByZXR1cm4gJHNjcmlwdERpcmVjdG9yeTsKICAgIH0KICAgICRJbnZvY2F0aW9uID0gKEdldC1WYXJpYWJsZSBNeUludm9jYXRpb24gLVNjb3BlIDEpLlZhbHVlCiAgICBpZiAoJEludm9jYXRpb24uUFNTY3JpcHRSb290KSB7CiAgICAgICRzY3JpcHREaXJlY3RvcnkgPSAkSW52b2NhdGlvbi5QU1NjcmlwdFJvb3QKICAgIH0gZWxzZWlmICgkSW52b2NhdGlvbi5NeUNvbW1hbmQuUGF0aCkgewogICAgICAkc2NyaXB0RGlyZWN0b3J5ID0gU3BsaXQtUGF0aCAkSW52b2NhdGlvbi5NeUNvbW1hbmQuUGF0aAogICAgfSBlbHNlIHsKICAgICAgJHNjcmlwdERpcmVjdG9yeSA9ICRJbnZvY2F0aW9uLkludm9jYXRpb25OYW1lLlN1YnN0cmluZygwLCRJbnZvY2F0aW9uLkludm9jYXRpb25OYW1lLkxhc3RJbmRleE9mKCdcJykpCiAgICB9CiAgICByZXR1cm4gJHNjcmlwdERpcmVjdG9yeQogIH0KfQoKJHNvID0gW2hhc2h0YWJsZV06OlN5bmNocm9uaXplZChAewogICAgJ1Jlc3VsdCcgPSBbc3RyaW5nXScnOwogICAgJ1Zpc2libGUnID0gW2Jvb2xdJGZhbHNlOwogICAgJ1NjcmlwdERpcmVjdG9yeScgPSBbc3RyaW5nXScnOwogICAgJ0Zvcm0nID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm1dJG51bGw7CiAgICAnUHJvZ3Jlc3MnID0gW1Byb2dyZXNzQmFySG9zdC5Qcm9ncmVzc10kbnVsbDsKICB9KQoKJHNvLlNjcmlwdERpcmVjdG9yeSA9IEdldC1TY3JpcHREaXJlY3RvcnkKCiRycyA9IFtydW5zcGFjZWZhY3RvcnldOjpDcmVhdGVSdW5zcGFjZSgpCiRycy5BcGFydG1lbnRTdGF0ZSA9ICdTVEEnCiRycy5UaHJlYWRPcHRpb25zID0gJ1JldXNlVGhyZWFkJwokcnMuT3BlbigpCiRycy5TZXNzaW9uU3RhdGVQcm94eS5TZXRWYXJpYWJsZSgnc28nLCRzbykKCgokY2FsbGVyID0gTmV3LU9iamVjdCBXaW4zMldpbmRvdyAtQXJndW1lbnRMaXN0IChbU3lzdGVtLkRpYWdub3N0aWNzLlByb2Nlc3NdOjpHZXRDdXJyZW50UHJvY2VzcygpLk1haW5XaW5kb3dIYW5kbGUpCgoKJHJ1bl9zY3JpcHQgPSBbcG93ZXJzaGVsbF06OkNyZWF0ZSgpLkFkZFNjcmlwdCh7CgogICAgZnVuY3Rpb24gUHJvZ3Jlc3NiYXIgewogICAgICBwYXJhbSgKICAgICAgICBbc3RyaW5nXSR0aXRsZSwKICAgICAgICBbc3RyaW5nXSRtZXNzYWdlLAogICAgICAgIFtvYmplY3RdJGNhbGxlcgogICAgICApCgogICAgICBAKCAnU3lzdGVtLkRyYXdpbmcnLCdTeXN0ZW0uV2luZG93cy5Gb3JtcycpIHwgRm9yRWFjaC1PYmplY3QgeyBbdm9pZF1bU3lzdGVtLlJlZmxlY3Rpb24uQXNzZW1ibHldOjpMb2FkV2l0aFBhcnRpYWxOYW1lKCRfKSB9CgogICAgICAkZiA9IE5ldy1PYmplY3QgLVR5cGVOYW1lICdTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Gb3JtJwogICAgICAkZi5UZXh0ID0gJHRpdGxlCgogICAgICAkZi5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplICg2NTAsMTIwKQogICAgICAkZi5TdGFydFBvc2l0aW9uID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm1TdGFydFBvc2l0aW9uXTo6Q2VudGVyU2NyZWVuCiAgICAgICRmLkF1dG9TY2FsZUJhc2VTaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplICg1LDE0KQogICAgICAkZi5DbGllbnRTaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplICgyOTIsMTA0KQoKCiAgICAgICRjb21wb25lbnRzID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgJ1N5c3RlbS5Db21wb25lbnRNb2RlbC5Db250YWluZXInCiAgICAgICR1ID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgJ1Byb2dyZXNzQmFySG9zdC5Qcm9ncmVzcycKICAgICAgJHNvLlByb2dyZXNzID0gJHUKICAgICAgJHUuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlBvaW50ICgxMiw4KQogICAgICAkdS5OYW1lID0gJ3N0YXR1cycKICAgICAgJHUuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSAoMjcyLDg4KQogICAgICAkdS5UYWJJbmRleCA9IDAKCiAgICAgICRiID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5CdXR0b24KICAgICAgJGIuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlBvaW50ICgxNDAsNzIpCiAgICAgICRiLkF1dG9TY2FsZU1vZGUgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuQXV0b1NjYWxlTW9kZV06OkZvbnQKICAgICAgJGIuRm9udCA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCAoJ01pY3Jvc29mdCBTYW5zIFNlcmlmJyw3LFtTeXN0ZW0uRHJhd2luZy5Gb250U3R5bGVdOjpSZWd1bGFyLFtTeXN0ZW0uRHJhd2luZy5HcmFwaGljc1VuaXRdOjpQb2ludCwwKQogICAgICAkYi5UZXh0ID0gJ2ZvcndhcmQnCiAgICAgICRiLmFkZF9jbGljayh7ICR1LlBlcmZvcm1TdGVwKCkKICAgICAgICAgIGlmICgkdS5NYXhpbXVtIC1lcSAkdS5WYWx1ZSkKICAgICAgICAgIHsKICAgICAgICAgICAgJGIuRW5hYmxlZCA9IGZhbHNlCiAgICAgICAgICB9CgogICAgICAgIH0pCgoKICAgICAgJGYuQ29udHJvbHMuQWRkUmFuZ2UoQCggJGIsJHUpKQogICAgICAkZi5Ub3Btb3N0ID0gJFRydWUKCiAgICAgICRzby5WaXNpYmxlID0gJGNhbGxlci5WaXNpYmxlID0gJHRydWUKICAgICAgJGYuQWRkX1Nob3duKHsgJGYuQWN0aXZhdGUoKSB9KQoKICAgICAgW3ZvaWRdJGYuU2hvd0RpYWxvZyhbd2luMzJ3aW5kb3ddKCRjYWxsZXIpKQoKICAgICAgJGYuRGlzcG9zZSgpCiAgICB9CgogICAgUHJvZ3Jlc3NiYXIgLVRpdGxlICR0aXRsZSAtTWVzc2FnZSAkbWVzc2FnZSAtY2FsbGVyICRjYWxsZXIKCiAgfSkKCgpDbGVhci1Ib3N0CiRydW5fc2NyaXB0LlJ1bnNwYWNlID0gJHJzCgokaGFuZGxlID0gJHJ1bl9zY3JpcHQuQmVnaW5JbnZva2UoKQoKU3RhcnQtU2xlZXAgMwokbWF4X2NudCA9IDEwCiRjbnQgPSAwCndoaWxlICgkY250IC1sdCAkbWF4X2NudCkgewogICRjbnQrKwogIFN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgMTAwCiAgJHNvLlByb2dyZXNzLlBlcmZvcm1TdGVwKCkKfQo=
