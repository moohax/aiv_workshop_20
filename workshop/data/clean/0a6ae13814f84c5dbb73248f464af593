PerfCounts (WorkFlow).ps1,da21183e82078bef0646ac391579297f,Scan result is 1. IsMalware: 0,ï»¿workflow inventory{

    param(
        [string[]]$Servers
        )

    foreach -parallel ($server in $servers){

    $srv = InlineScript {

            function Percent-PageFileUsage
            {
                    param
              (
                [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage="Data to process")]
                $InputObject
              )
              process
              {
                [math]::round($InputObject.CounterSamples[0].CookedValue, 2)
              }
            }

            function PDisk-QueueLength
            {
              param
              (
                [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage="Data to process")]
                $InputObject
              )
              process
              {
                $InputObject.CounterSamples[0].CookedValue
              }
            }

            function PDisk-AvgWritesSec
            {
              param
              (
                [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage="Data to process")]
                $InputObject
              )
              process
              {
                #$InputObject.CounterSamples[0].CookedValue
		            [math]::round($InputObject.CounterSamples[0].CookedValue, 4)
              }
            }

            function PDisk-AvgReadsSec
            {
              param
              (
                [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage="Data to process")]
                $InputObject
              )
              process
              {
                #$InputObject.CounterSamples[0].CookedValue
		            [math]::round($InputObject.CounterSamples[0].CookedValue, 4)
              }
            }

            function PDisk-PercentIdleTime
            {
              param
              (
                [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage="Data to process")]
                $InputObject
              )
              process
              {
                [math]::round($InputObject.CounterSamples[0].CookedValue, 2)
              }
            }

            function Active-UserSessions
            {
              param
              (
                [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage="Data to process")]
                $InputObject
              )
              process
              {
                $InputObject.CounterSamples[0].CookedValue
              }
            }

            function Percent-FreeMemory
            {
              param
              (
                [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage="Data to process")]
                $InputObject
              )
              process
              {
                $InputObject.CounterSamples[0].CookedValue
              }
            }

            function Available-Memory
            {
              param
              (
                [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage="Data to process")]
                $InputObject
              )
              process
              {
                [math]::round($InputObject.CounterSamples[0].CookedValue / 1024, 2)
              }
            }

            function CPU-Time
                                                    {
              param
              (
                [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage="Data to process")]
                $InputObject
              )
              process
              {
                [math]::round($InputObject.CounterSamples[0].CookedValue, 2)
              }
            }

    $Counters = @{

        "% CPU Time" = Get-Counter '\Processor(_total)\% processor time' | CPU-Time
        "Available Member (GB)" = Get-Counter '\Memory\Available MBytes' | Available-Memory
        "% Free Memory" = [math]::Round(((Get-WmiObject win32_OperatingSystem).freephysicalmemory / (Get-WmiObject win32_OperatingSystem).totalvisiblememorysize) * 100,2)
        "Memory Pages/sec" = Get-Counter '\Memory\Pages/sec' | Percent-FreeMemory
        #Netbytesentsec = Get-Counter '\Network Interface(*)\Bytes Sent/sec' | Foreach-Object {$_.CounterSamples[0].CookedValue}
        #Netbyterecsec = Get-Counter '\Network Interface(*)\Bytes Received/sec' | Foreach-Object {$_.CounterSamples[0].CookedValue}
        "Active User Sessions" = Get-Counter '\Terminal Services\Active Sessions' | Active-UserSessions
        "Physical Disk % Idle Time" = Get-Counter '\PhysicalDisk(_Total)\% Idle Time' | PDisk-PercentIdleTime
        "Physical Disk Average Reads/sec" = Get-Counter '\PhysicalDisk(_Total)\Avg. Disk sec/Read' | PDisk-AvgReadsSec
        "Physical Disk Average Writes/sec" = Get-Counter '\PhysicalDisk(_Total)\Avg. Disk sec/Write' | PDisk-AvgWritesSec
        "Physical Disk Queue Length" = Get-Counter '\PhysicalDisk(_total)\Current disk queue length' | PDisk-QueueLength
        "% PageFile Usage" = Get-Counter '\Paging File(_Total)\% Usage' | Percent-PageFileUsage
        Date = Get-Date -Format 'yyyy-MM-dd'
        Time = Get-Date -Format 'hh:mm:ss'
        }


            if (!(Test-Path -path C:\TEMP\$using:server)) {
                New-Item C:\TEMP\$using:server -type directory
                }

        New-Object psobject -Property $Counters | Export-Csv -Path "c:\TEMP\$using:server\$using:server.csv" -NoTypeInformation -Append -Force
        $srv.server
        }
    }
}

$servers = Get-Content C:\TEMP\2003Catalogue.txt

inventory $servers

# SIG # Begin signature block
# MIID1QYJKoZIhvcNAQcCoIIDxjCCA8ICAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB
# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR
# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUNwJre316UwWNdosKAlL7QNRz
# 09egggH3MIIB8zCCAVygAwIBAgIQG759VsA3cY1KNQQv8nVgpTANBgkqhkiG9w0B
# AQUFADAUMRIwEAYDVQQDDAlQb1NILUJ1cGEwHhcNMTYxMTE0MTY1OTQ1WhcNMjAx
# MTE0MDAwMDAwWjAUMRIwEAYDVQQDDAlQb1NILUJ1cGEwgZ8wDQYJKoZIhvcNAQEB
# BQADgY0AMIGJAoGBALR/8QtsCqYSPbfh+YQmNilGA2n4qD5LY1vjXmWfVcdtZE7o
# AR1f75bt2Avr5P5l8RoklgZjvTTGXD8su/rIS6wSXoeI0eijKuYysc5BUUOpk7an
# iogfQYTXE4+xHwkTpd+pYy875IxWqfPuL/An2BN08pIpdZhqzjom2vAKCfHdAgMB
# AAGjRjBEMBMGA1UdJQQMMAoGCCsGAQUFBwMDMB0GA1UdDgQWBBTUZ6KqkTxpbvSE
# BtzVax4v33X9vjAOBgNVHQ8BAf8EBAMCB4AwDQYJKoZIhvcNAQEFBQADgYEAKSz+
# ZfDIPoxwhP8sCPqYwb+A0IrNrpXL6Rb7dm16MUD9zZA2X0veEmOpH1FYxVavcokL
# xw+PifTvSqHG/vLFq0hY0dLzNSrsOnpuTrE4EsXyJx8ue8EilvV4piABcCphub6Q
# gyV4cKdYKmxnuORUIhReJYBga+LTBj/cEY1iBbIxggFIMIIBRAIBATAoMBQxEjAQ
# BgNVBAMMCVBvU0gtQnVwYQIQG759VsA3cY1KNQQv8nVgpTAJBgUrDgMCGgUAoHgw
# GAYKKwYBBAGCNwIBDDEKMAigAoAAoQKAADAZBgkqhkiG9w0BCQMxDAYKKwYBBAGC
# NwIBBDAcBgorBgEEAYI3AgELMQ4wDAYKKwYBBAGCNwIBFTAjBgkqhkiG9w0BCQQx
# FgQU1C0x3xI4vEl82Cvx73dB8cdtktkwDQYJKoZIhvcNAQEBBQAEgYAVFgo1YzJI
# kUVOXAWIXzUvsLHv5R+2qKDAIBobkUQpCDK70LrXQq8BC2scpbbk2vSaKTPmMf0y
# CDOKQiwXJH7Cbgarv/Mq3VhUQ3DVflAU//hRWcoQqFh8HyEfv87Qh6g3phnusyU8
# ycvimqKtnO1cIi5zh6UG2cy2dgzSBhGrSQ==
# SIG # End signature block
