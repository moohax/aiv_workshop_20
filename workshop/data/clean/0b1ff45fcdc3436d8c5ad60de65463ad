DTAP.psm1,faaab7397cc63ab7f5b655b4e119263f,Scan result is 1. IsMalware: 0,##################################################################################################################################################################################
## Author: Warner Soditus
## Modified date: 05-12-2015
## Version History: 1.0
## Purpose: DTAP cmdlet functions
#####################################################################################################################################################################################

#Requires -version 2.0

$ErrorActionPreference = "Stop";
$delim = "|"
$delimInner = "~"

<#
**************************************************
* Private members
**************************************************
#>


Function Import-TridionStructureGroupsFromFile
{    <#
    .Synopsis
    imports the structure groups from CSV file

    .Description
    TBD

    .Notes
    TBD

    .Inputs
    TBD

    .Outputs
    TBD

    .Link
    Get the latest version of this script from the following URL:
    TBD

    .Example
    TBD

    #>

    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true)]
        [Tridion.ContentManager.CoreService.Client.GroupData[]]$AllGroups,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$Title,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$Webdav,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$Directory,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$IsDefaultPageTemplateInherited,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$DefaultPageTemplate,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$PageBundleProcess,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$PageProcess,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$MetadataSchema,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$Metadata,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$IsActive,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$IsPermissionsInheritanceRoot,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$ACL

    )
    
    Process
    {
        if ([string]::IsNullOrEmpty($Webdav))
        {
            return
        }

        #Need to process ACL...
        if (($ACL -ne $null) -and ($ACL.Length -gt 0))
        {
            $allowPermissions = @{}
            #$allGroups = Get-TridionGroups -IdTitleOnly
            $parts = $ACL.Split($delim)
            foreach ($part in $parts)
            {
                Write-Verbose "part: $part"

                $group = $part.Substring(0,($part.IndexOf("(")))
                Write-Verbose "group: $group"
                $scope = $part.Substring(($part.IndexOf("(") + 1),($part.Length - $part.IndexOf("(") -2))
                $allowPermissions.Add((Get-TridionGroup -GroupName $group -AllGroups $AllGroups).Id,$scope)
            }
        }
        else
        {
            Write-Verbose "No ACL passed in"
            $allowPermissions = $null
        }


        if ($IsDefaultPageTemplateInherited.ToUpper() -eq "TRUE")
        {
            $isDefaultPTInherited = $true
        }
        else
        {
            $isDefaultPTInherited = $false
        }

        if ($IsActive.ToUpper() -eq "TRUE")
        {
            $makeActive = $true
        }
        else
        {
            $makeActive = $false
        }

        if ($IsPermissionsInheritanceRoot.ToUpper() -eq "TRUE")
        {
            $setInherit = $false
        }
        else
        {
            $setInherit = $true
        }

            #$parts = $Webdav.Split("/")
            #$parent = $Webdav.substring(0,($Webdav.Length - $Directory.Length -1))
        $parts = $Webdav.Split("/")
        $parent = $parts[0..($parts.Count - 2)] -Join "/"

        if ((Get-TridionItem -IdOrPath $Webdav -IgnoreNotFound) -eq $null)
        {
            #create item

            New-TridionStructureGroup `
                -Name $Title `
                -Directory $Directory `
                -WebdavLocation $parent `
                -BundleProcessName $PageBundleProcess `
                -RemoveExistingPermissions `
                -Permissions $allowPermissions `
                -MetadataSchema $MetadataSchema `
                -MetadataXml $Metadata `
                -DefaultPageTemplate $DefaultPageTemplate `
                -InheritDefaultPageTemplate $isDefaultPTInherited `
                -IsActive $makeActive `
                -PageProcess $PageProcess `
                -Verbose

        }
        else
        {
            #then we do an update!!! 
            Update-TridionStructureGroup `
                -Name $Title `
                -Directory $Directory `
                -WebdavLocation $Webdav `
                -BundleProcessName $PageBundleProcess `
                -RemoveExistingPermissions `
                -Permissions $allowPermissions `
                -MetadataSchema $MetadataSchema `
                -MetadataXml $Metadata `
                -DefaultPageTemplate $DefaultPageTemplate `
                -InheritDefaultPageTemplate $isDefaultPTInherited `
                -IsActive $makeActive `
                -PageProcess $PageProcess `
                -SetSecurityToInherit:($setInherit -eq $true) `
                -Verbose

        }

    }
}


Function Import-TridionFoldersFromFile
{    <#
    .Synopsis
    imports the Folders from CSV file

    .Description
    TBD

    .Notes
    TBD

    .Inputs
    TBD

    .Outputs
    TBD

    .Link
    Get the latest version of this script from the following URL:
    TBD

    .Example
    TBD

    #>

    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true)]
        [Tridion.ContentManager.CoreService.Client.GroupData[]]$AllGroups,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$Title,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$Webdav,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$MetadataSchema,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$Metadata,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$LinkedSchema,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$IsLinkedSchemaMandatory,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$IsPermissionsInheritanceRoot,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$ACL
    )
    
    Process
    {
        if ([string]::IsNullOrEmpty($Webdav))
        {
            return
        }

        #Need to process ACL...
        if (($ACL -ne $null) -and ($ACL.Length -gt 0))
        {
            $allowPermissions = @{}
            #$allGroups = Get-TridionGroups -IdTitleOnly
            $parts = $ACL.Split($delim)
            foreach ($part in $parts)
            {
                Write-Verbose "part: $part"

                $group = $part.Substring(0,($part.IndexOf("(")))
                Write-Verbose "group: $group"
                $scope = $part.Substring(($part.IndexOf("(") + 1),($part.Length - $part.IndexOf("(") -2))
                $allowPermissions.Add((Get-TridionGroup -GroupName $group -AllGroups $AllGroups).Id,$scope)
            }
        }
        else
        {
            Write-Verbose "No ACL passed in"
            $allowPermissions = $null
        }

        if ($IsLinkedSchemaMandatory.ToUpper() -eq "TRUE")
        {
            $isLinkedSchemaRequired = $true
        }
        else
        {
            $isLinkedSchemaRequired = $false
        }


        if ((Get-TridionItem -IdOrPath $Webdav -IgnoreNotFound) -eq $null)
        {
            $parts = $Webdav.Split("/")
            $parent = $parts[0..($parts.Count - 2)] -Join "/"
            #create item
            New-TridionFolder `
                -Name $Title `
                -WebdavLocation $parent `
                -RemoveExistingPermissions `
                -Permissions $allowPermissions `
                -MetadataSchema $MetadataSchema `
                -MetadataXml $Metadata `
                -LinkedSchemaWebdavUrl $LinkedSchema `
                -LinkedSchemaMandatory:($isLinkedSchemaRequired -eq $true) `
                -Verbose

        }
        else
        {
            #then we do an update!!!
            Update-TridionFolder `
                -Name $Title `
                -WebdavLocation $Webdav `
                -RemoveExistingPermissions `
                -Permissions $allowPermissions `
                -MetadataSchema $MetadataSchema `
                -MetadataXml $Metadata `
                -LinkedSchemaWebdavUrl $LinkedSchema `
                -LinkedSchemaMandatory:($isLinkedSchemaRequired -eq $true) `
                -Verbose
        }

    }
}

Function Get-TridionScopeSpecification
{
    <#
    .Synopsis
    Gets the scope specification from a group Member Of specification

    .Description
    looks for the text in parenthesis

    .Notes
    private cmdlet
    
    .Inputs
    [string] GroupName

    .Outputs
    [string] name of the Publication scope (if any)

    .Link
    Get the latest version of this script from the following URL:
    http://isdsvn.wellsfargo.com/svn/smt_sdl/branches/smt_sdl_admin/administration/opt/apps/scripts/powershell/modules/Tridion-ProductionSupport/ProductionSupport.psm1

    .Example
    TBD

    #>
    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        $GroupName
    )

    Process
    {
        if ([string]::IsNullOrEmpty($GroupName))
        {
            Write-Verbose -Message "Group Name is empty."
            return $null
        }
        $posL = $GroupName.IndexOf("(")
        $posR = $GroupName.IndexOf(")")
        $pubName = $null
        if (($posL -gt 0) -and ($posR -gt 0))
        {
            $pubName = $GroupName.Substring(($posL + 1),($posR - $posL - 1))
            Write-Verbose -Message "Found scope specification: $pubName"
            return $pubName
        }
        else
        {
            Write-Verbose -Message "No scope specification"
        }
        return $pubName

    }
}

Function Get-FixedTridionGroupName
{
    <#
    .Synopsis
    Fixes a group name

    .Description
    strips off white space at ends, converts em-dash to - and removes any (scope) specifier

    .Notes
    private cmdlet
    
    .Inputs
    [string] GroupName

    .Outputs
    [string] modified group name

    .Link
    Get the latest version of this script from the following URL:
    http://isdsvn.wellsfargo.com/svn/smt_sdl/branches/smt_sdl_admin/administration/opt/apps/scripts/powershell/modules/Tridion-ProductionSupport/ProductionSupport.psm1

    .Example
    TBD

    #>
    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        $GroupName
    )

    Process
    {
        if ([string]::IsNullOrEmpty($GroupName))
        {
            Write-Verbose -Message "Group Name is empty."
            return $null
        }
        $pos = $GroupName.IndexOf("(")
        if ($pos -gt 0)
        {
            $GroupName = $GroupName.Substring(0,$pos)
        }

        #delete this stuff
        #$charArray = [char[]]$GroupName
        #foreach ($char in $charArray)
        #{
        #    Write-Verbose ("char {0} -- {1}" -f $char,[int]$char)
        #}

        $emDash = [char]65533
        #$enOrEmDash = [char]0x2014
        $GroupName = $GroupName.Trim().Replace($emDash,"-")
        return $GroupName
    }
}



Function Import-TridionGroupsFromFile
{    <#
    .Synopsis
    imports the groups from CSV file

    .Description
    TBD

    .Notes
    TBD

    .Inputs
    TBD

    .Outputs
    TBD

    .Link
    Get the latest version of this script from the following URL:
    TBD

    .Example
    TBD

    #>

    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true)]
        [Tridion.ContentManager.CoreService.Client.GroupData[]]$AllGroups,
        [Parameter(Mandatory=$true)]
        [Tridion.ContentManager.CoreService.Client.PublicationData[]]$AllPublications,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$Title,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$Description,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$Scope,
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]$GroupMemberships

    )
    
    Process
    {

            $memberOfWithRestrictions=@{}
            $memberOfNoRestrictions=@()
            #Need to GroupMemberships...
            if (($GroupMemberships -ne $null) -and ($GroupMemberships.Length -gt 0))
            {
                $scopeList = $GroupMemberships.split($delim)



                foreach ($line in $scopeList)
                {
                    Write-Verbose "analyzing scope group member: $line"
                    $scopePub = Get-TridionScopeSpecification -GroupName $line
                    $scopeGroupName = Get-FixedTridionGroupName -GroupName $line
                    #Write-Verbose -Message "scope group: $scopeGroup"
                    #Write-Verbose -Message "scope publication: $scopePub"
                    #2 cases, have publication specified for scope or not (all pubs)

                    $scopeGroup = Get-TridionGroup -GroupName $scopeGroupName -AllGroups $AllGroups
                    if ($scopeGroup -ne $null)
                    {
                        if ([string]::IsNullOrEmpty($scopePub))
                        {
                            #all pubs case!
                            $memberOfNoRestrictions += ($scopeGroup.Id)
                            Write-Verbose -Message "Adding $scopeGroupName to be Unrestricted Member Of"
                        }
                        else
                        {
                            $whatPubs = @()
                            foreach ($pubName in ($scopePub.split($delimInner)))
                            {
                                $pub = Get-TridionPublication -Name $pubName -AllPublications $AllPublications
                                if ($pub -ne $null)
                                {
                                    $whatPubs += ($pub.Id)
                                }
                                else
                                {
                                    Write-Warning -Message "There is no publication: $pubName"
                                }
                            }
                            $memberOfWithRestrictions.Add(($scopeGroup.Id),$whatPubs)
                            Write-Verbose -Message "Adding to $scopeGroupName to be Restricted Membership"
                        }
                    }
                    else
                    {
                        Write-Warning -Message "There is no such group as $scopeGroupName"
                    }

                }

            }
            else
            {
                Write-Verbose "No GroupMemberships passed in"
            }

            #need to handle!!!!
            $scopes = @()

            if (($Scope -ne $null) -and ($Scope.Length -gt 0))
            {
                foreach ($line in ($Scope.split($delim)))
                {
                    $pub = Get-TridionPublication -Name $line -AllPublications $AllPublications
                    $scopes += $pub.Id
                }

            }
            else
            {
                Write-Verbose "No Scope limitation passed in"
            }


        if ((Get-TridionGroup -GroupName $Title) -eq $null)
        {
            New-TridionGroup `
                -Name $Title `
                -Description $Description `
                -Scope $scopes `
                -RestrictedMemberOf $memberOfWithRestrictions `
                -MemberOf $memberOfNoRestrictions `
                -Verbose

        }
        else
        {
            #then we do an update!!! 
            Update-TridionGroup `
                -GroupName $Title `
                -Description $Description `
                -Scope $scopes `
                -RestrictedMemberOf $memberOfWithRestrictions `
                -MemberOf $memberOfNoRestrictions `
                -RemoveExistingScope `
                -RemoveExistingMemberOf `
                -Verbose
        }

    }
}



function Out-CSVFile
{
    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true)]
        [string]$Directory,
        [Parameter(Mandatory=$true)]
        [string]$FileName,
        [Parameter(Mandatory=$true,ValueFromPipeline=$true)]
        $Data
    )
    Process
    {
        if (-Not (Test-Path $Directory -PathType Container))
        {
            New-Item -ItemType Directory -Force -Path $Directory
        }
      $Data | Export-CSV -Path ($Directory + "\" + $FileName + ".csv") -UseCulture -Encoding UTF8 -NoTypeInformation
    }
}




<#
**************************************************
* Public members
**************************************************
#>

Function Export-TridionDTAPAssets
{    <#
    .Synopsis
    Exports specified items to CSV file for later import to "next" environment

    .Description
    TBD

    .Notes
    TBD

    .Inputs
        [string[]]TcmIdOrWebDavUrls - list of TCM-IDs or WebDavUrls of items to export
        [switch]Recursive - flag to indicate recursive operation on Folders and Structure Groups
        [string]Directory - full path to write CSV files

    .Outputs
    None, exports CSV files to specified directory

    .Link
    Get the latest version of this script from the following URL:
    TBD

    .Example
    $assets = @()
    $allGroups = Get-TridionGroups -IdTitleOnly
    $assets += (Get-TridionGroup -GroupName "[rights] Author - Content" -AllGroups $allGroups).Id
    $assets += (Get-TridionGroup -GroupName "[acl] default_secure_content_acl_l" -AllGroups $allGroups).Id
    $assets += "\S070 Public Site US English\Home\test"
    $assets += "\C040 Local Public Content US English\Building Blocks\Content\test"
    Export-TridionDTAPAssets `
	    -TcmIdOrWebDavUrls $assets `
	    -Recursive `
	    -Directory "D:\opt\apps\scripts\powershell\output\dtap" `
	    -Verbose

    
    #>

    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true,ValueFromPipeline=$true)]
        [string[]]$TcmIdOrWebDavUrls,
        [Parameter()]
        [switch]$Recursive,
        [Parameter(Mandatory=$true)]
        [string]$Directory
    )
    
    Process
    {
        Write-Verbose -Message "Preparing to inspect assets"

        $folders = @()
        $sgs = @()
        $groups = @()
        foreach ($TcmIdOrWebDavUrl in $TcmIdOrWebDavUrls)
        {
            $tridionObject = Get-TridionItem -IdOrPath $TcmIdOrWebDavUrl
            Write-Verbose -Message "Loaded Tridion Item: $($tridionObject.Title)"
            if ($tridionObject -ne $null)
            {

            if ($tridionObject.GetType().FullName -eq "Tridion.ContentManager.CoreService.Client.FolderData")
            {
                Write-Verbose -Message "Item is a Folder"
                $folders += $tridionObject                
                if ($Recursive)
                {
                    $childFolders = Get-TridionFoldersRecursively -Folder $tridionObject              
                    foreach ($childFolder in $childFolders)
                    {
                        $folders += $childFolder
                    }
                }                
            }
            elseif ($tridionObject.GetType().FullName -eq "Tridion.ContentManager.CoreService.Client.StructureGroupData")
            {
                Write-Verbose -Message "Item is a Structure Group"
                $sgs += $tridionObject                
                if ($Recursive)
                {
                    $childSGs = Get-TridionStructureGroupsRecursively -StructureGroup $tridionObject
                    foreach ($childSG in $childSGs)
                    {
                        $sgs += $childSG
                    }
                }                
                
            }
            elseif ($tridionObject.GetType().FullName -eq "Tridion.ContentManager.CoreService.Client.GroupData")
            {
                Write-Verbose -Message "Item is a Group"
                $groups += $tridionObject                
            }
            }
            else
            {
                Write-Warning -Message "Unable to find item: $TcmIdOrWebDavUrl"
            }

        }
        Write-Verbose -Message "Preparing to do exports"
        if ($folders.Count -gt 0)
        {
            $folderData = @()
            Write-Verbose -Message "There are folders, going to export folder data"
            foreach ($folder in $folders)
            {
                Write-Verbose -Message "Processing folder: $($folder.Title)"
                $rowData = New-Object -TypeName PSObject
                Add-Member -InputObject $rowData -MemberType NoteProperty -Name "Title" -Value ($folder.Title)
                Add-Member -InputObject $rowData -MemberType NoteProperty -Name "Webdav" -Value ($folder.LocationInfo.WebDavUrl)

                if ($folder.MetadataSchema -eq $null)
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "MetadataSchema" -Value ""
                }
                else
                {
                    $metaDataSchema = Get-TridionItem -IdOrPath $folder.MetadataSchema.IdRef
                    if ($metaDataSchema -ne $null)
                    {
                        Add-Member -InputObject $rowData -MemberType NoteProperty -Name "MetadataSchema" -Value ($metaDataSchema.LocationInfo.WebDavUrl)
                    }
                    else
                    {
                        Add-Member -InputObject $rowData -MemberType NoteProperty -Name "MetadataSchema" -Value ""
                        Write-Warning -Message "Unable to find Metadata Schema: $($folder.MetadataSchema.IdRef)"
                    }
                }
                if ($folder.Metadata -eq $null)
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "Metadata" -Value ""
                }
                else
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "Metadata" -Value ($folder.Metadata)
                }
                if ($folder.LinkedSchema -eq $null)
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "LinkedSchema" -Value ""
                }
                else
                {
                    $linkedSchema = Get-TridionItem -IdOrPath $folder.LinkedSchema.IdRef
                    if ($linkedSchema -ne $null)
                    {
                        Add-Member -InputObject $rowData -MemberType NoteProperty -Name "LinkedSchema" -Value ($linkedSchema.LocationInfo.WebDavUrl)
                    }
                    else
                    {
                        Add-Member -InputObject $rowData -MemberType NoteProperty -Name "LinkedSchema" -Value ""
                        Write-Warning -Message "Unable to find Linked Schema: $($folder.LinkedSchema.IdRef)"
                    }
                }
                if ($folder.IsLinkedSchemaMandatory -eq $false)
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "IsLinkedSchemaMandatory" -Value "false"
                }
                else
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "IsLinkedSchemaMandatory" -Value "true"
                }
                if ($folder.IsPermissionsInheritanceRoot -eq $false)
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "IsPermissionsInheritanceRoot" -Value "false"
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "ACL" -Value ""
                }
                else
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "IsPermissionsInheritanceRoot" -Value "true"

                    #need to get all its ACL and export
                    $aclEntries=$folder.AccessControlList.AccessControlEntries
                    $aclOutput = ""

                    foreach ($aclEntry in $aclEntries)
                    {
                        $group = Get-TridionItem -IdOrPath $aclEntry.Trustee.IdRef
                        if ($aclOutput.Length -gt 0)
                        {
                            $aclOutput += $delim
                        }
                        $aclOutput += ($group.Title + "(" + $aclEntry.AllowedPermissions + ")")
                    }



                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "ACL" -Value $aclOutput

                }


                $folderData += $rowData
            }

            Out-CSVFile -Directory $Directory -FileName "Folders" -Data $folderData

        }
        if ($sgs.Count -gt 0)
        {
            Write-Verbose -Message "There are Structure Groups, going to export SG data"
            $sgData = @()
            foreach ($sg in $sgs)
            {
                Write-Verbose -Message "Processing SG: $($sg.Title)"
                $rowData = New-Object -TypeName PSObject
                Add-Member -InputObject $rowData -MemberType NoteProperty -Name "Title" -Value ($sg.Title)
                Add-Member -InputObject $rowData -MemberType NoteProperty -Name "Webdav" -Value ($sg.LocationInfo.WebDavUrl)
                Add-Member -InputObject $rowData -MemberType NoteProperty -Name "Directory" -Value ($sg.Directory)


                if ($sg.IsDefaultPageTemplateInherited -eq $false)
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "IsDefaultPageTemplateInherited" -Value "false"
                }
                else
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "IsDefaultPageTemplateInherited" -Value "true"
                }

                if ($sg.DefaultPageTemplate -eq $null)
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "DefaultPageTemplate" -Value ""
                }
                else
                {
                    $defaultPageTemplate = Get-TridionItem -IdOrPath $sg.DefaultPageTemplate.IdRef
                    if ($defaultPageTemplate -ne $null)
                    {
                        Add-Member -InputObject $rowData -MemberType NoteProperty -Name "DefaultPageTemplate" -Value ($defaultPageTemplate.LocationInfo.WebDavUrl)
                    }
                    else
                    {
                        Add-Member -InputObject $rowData -MemberType NoteProperty -Name "DefaultPageTemplate" -Value ""
                        Write-Warning -Message "Unable to find Default Page Template: $($sg.DefaultPageTemplate.IdRef)"
                    }
                }

                if ($sg.PageBundleProcess -eq $null)
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "PageBundleProcess" -Value ""
                }
                else
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "PageBundleProcess" -Value ($sg.PageBundleProcess.Title)
                }

                if (($sg.PageProcess -eq $null) -or ($sg.PageProcess.IdRef -eq "tcm:0-0-0"))
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "PageProcess" -Value ""
                }
                else
                {
                    $pageProcess = Get-TridionItem -IdOrPath $sg.PageProcess.IdRef
                    if ($pageProcess -ne $null)
                    {
                        Add-Member -InputObject $rowData -MemberType NoteProperty -Name "PageProcess" -Value ($pageProcess.LocationInfo.WebDavUrl)
                    }
                    else
                    {
                        Add-Member -InputObject $rowData -MemberType NoteProperty -Name "PageProcess" -Value ""
                        Write-Warning -Message "Unable to find Page Process: $($sg.PageProcess.IdRef)"
                    }
                }

                if ($sg.MetadataSchema -eq $null)
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "MetadataSchema" -Value ""
                }
                else
                {
                    $metaDataSchema = Get-TridionItem -IdOrPath $sg.MetadataSchema.IdRef
                    if ($metaDataSchema -ne $null)
                    {
                        Add-Member -InputObject $rowData -MemberType NoteProperty -Name "MetadataSchema" -Value ($metaDataSchema.LocationInfo.WebDavUrl)
                    }
                    else
                    {
                        Add-Member -InputObject $rowData -MemberType NoteProperty -Name "MetadataSchema" -Value ""
                        Write-Warning -Message "Unable to find Metadata Schema: $($sg.MetadataSchema.IdRef)"
                    }
                }
                if ($sg.Metadata -eq $null)
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "Metadata" -Value ""
                }
                else
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "Metadata" -Value ($sg.Metadata)
                }

                if ($sg.IsActive -eq $false)
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "IsActive" -Value "false"
                }
                else
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "IsActive" -Value "true"
                }

                if ($sg.IsPermissionsInheritanceRoot -eq $false)
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "IsPermissionsInheritanceRoot" -Value "false"
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "ACL" -Value ""
                }
                else
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "IsPermissionsInheritanceRoot" -Value "true"

                    #need to get all its ACL and export
                    $aclEntries=$sg.AccessControlList.AccessControlEntries
                    $aclOutput = ""

                    foreach ($aclEntry in $aclEntries)
                    {
                        if ($aclEntry.AllowedPermissions -ne "None")
                        {
                            $group = Get-TridionItem -IdOrPath $aclEntry.Trustee.IdRef
                            if ($aclOutput.Length -gt 0)
                            {
                                $aclOutput += $delim
                            }
                            $aclOutput += ($group.Title + "(" + $aclEntry.AllowedPermissions + ")")
                        }
                    }



                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "ACL" -Value $aclOutput

                }


                $sgData += $rowData
            }
            Out-CSVFile -Directory $Directory -FileName "StructureGroups" -Data $sgData
        }
        if ($groups.Count -gt 0)
        {
            Write-Verbose -Message "There are Groups, going to export Group data"
            $groupData = @()
            foreach ($group in $groups)
            {
                #need to get the full object (only partially loaded)
                $group = Get-TridionItem -IdOrPath $group.Id
                Write-Verbose -Message "Processing group: $($group.Title)"
                $rowData = New-Object -TypeName PSObject
                Add-Member -InputObject $rowData -MemberType NoteProperty -Name "Title" -Value ($group.Title)
                Add-Member -InputObject $rowData -MemberType NoteProperty -Name "Description" -Value ($group.Description)

                if (([string]::IsNullOrEmpty($group.Scope) -eq $null) -or ($group.Scope.count -eq 0))
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "Scope" -Value ""
                }
                else
                {
                    $scopeList = ""
                    foreach ($scopeEntry in $group.Scope)
                    {
                        if ($scopeList.Length -gt 0)
                        {
                            $scopeList += $delim
                        }
                        $scopeList += $scopeEntry.Title
                    }
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "Scope" -Value ($scopeList)
                }
                if (([string]::IsNullOrEmpty($group.GroupMemberships) -eq $null) -or ($group.GroupMemberships.count -eq 0))
                {
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "GroupMemberships" -Value ""
                }
                else
                {
                    $groupMembershipInfo = ""
                    foreach ($groupInfo in $group.GroupMemberships)
                    {
                        Write-Verbose -Message "looking at group membership: $groupInfo"
                        if ($groupMembershipInfo.Length -gt 0)
                        {
                            $groupMembershipInfo += $delim
                        }
                        $groupMember = Get-TridionItem -IdOrPath $groupInfo.Group.IdRef
                        if ($groupMember -ne $null)
                        {
                            $groupMembershipInfo += $groupMember.Title
                            $scopes = $groupInfo.Scope
                            if ($scopes -ne $null)
                            {
                                $scopeInfo = ""
                                foreach ($scope in $scopes){
                                    if ($scopeInfo.Length -gt 0)
                                    {
                                        $scopeInfo += $delimInner
                                    }
                                    $publication = Get-TridionItem -IdOrPath $scope.IdRef
                                    if ($publication -ne $null)
                                    {
                                        $scopeInfo += $publication.Title
                                    }
                                    else
                                    {
                                        Write-Warning -Message "Unable to find publication: $($scope.IdRef)"
                                    }
                                }
                                $groupMembershipInfo += "(" + $scopeInfo + ")"
                            }
                        }
                        else
                        {
                            Write-Warning -Message "Unable to locate group: $($groupInfo.Group.IdRef)"
                        }
                    }
                    Add-Member -InputObject $rowData -MemberType NoteProperty -Name "GroupMemberships" -Value ($groupMembershipInfo)
                }
                Write-Verbose "group data length was : $($groupData.count)"
                $groupData += $rowData
                Write-Verbose "group data length now: $($groupData.count)"
            }

            Out-CSVFile -Directory $Directory -FileName "Groups" -Data $groupData
            $Global:groupData = $groupData

        }

    }
}

Function Import-TridionDTAPAssets
{    <#
    .Synopsis
    TBD

    .Description
    TBD

    .Notes
    TBD

    .Inputs
    [string]Directory - the directory containing the exported CSV files

    .Outputs
    TBD

    .Link
    Get the latest version of this script from the following URL:
    TBD

    .Example
    Import-TridionDTAPAssets -Directory "D:\opt\apps\scripts\powershell\data\dtap" -Verbose
    
    #>

    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true)]
        [string]$Directory
    )
    
    Process
    {
        $allGroups = Get-TridionGroups -IdTitleOnly
        $allPubs = Get-TridionPublications -IdTitleOnly
        if (Test-Path -Path ($Directory + "\" + "Folders.csv"))
        {
            Write-Verbose -Message "Importing Folder data"
            Import-Csv -Path ($Directory + "\" + "Folders.csv") | Import-TridionFoldersFromFile -AllGroups $allGroups
        }
        else
        {
            Write-Verbose -Message "No Folder data provided"
        }
        if (Test-Path -Path ($Directory + "\" + "StructureGroups.csv"))
        {
            Write-Verbose -Message "Importing Structure Group data"
            Import-Csv -Path ($Directory + "\" + "StructureGroups.csv") | Import-TridionStructureGroupsFromFile -AllGroups $allGroups

        }
        else
        {
            Write-Verbose -Message "No Structure Group data provided"
        }
        if (Test-Path -Path ($Directory + "\" + "Groups.csv"))
        {
            Write-Verbose -Message "Importing Group data"
            Import-Csv -Path ($Directory + "\" + "Groups.csv") | Import-TridionGroupsFromFile -AllGroups $allGroups -AllPublications $allPubs
        }
        else
        {
            Write-Verbose -Message "No Group data provided"
        }
    }
}

<#
**************************************************
* Export statements
**************************************************
#>

Export-ModuleMember -Function Export-TridionDTAPAssets
Export-ModuleMember -Function Import-TridionDTAPAssets


